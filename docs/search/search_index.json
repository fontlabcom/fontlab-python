{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"index.html","text":"FontLab 7 Python API Version: 2020-08-09 The Python API for FontLab 7 consists of 4 packages: typerig fontlab fontgate FL You can also use the PythonQt package to interact with the OS and build GUIs. typerig TypeRig is a Python library and set of tools for FontLab 7. It is developed by Vassil Kateliev. TypeRig provides several plugins that extend the functionality of FontLab, see documentation . But it also comes with a typerig package that provides a simplified, alternative \u201cpythonic\u201d API to FontLab. TypeRig is written in Python. To use the typerig package, run FontLab 7, choose Scripts Update / Install Scripts . Click OK in the dialog, wait until the installation completes. When you see the TypeRig is up-to-date dialog, click OK and restart FontLab 7. fontlab and fontgate The fontlab package exposes most or all of the FontLab 7 GUI and high-level font-related objects. The fontgate package exposes more technical aspects of fonts, and does not include GUI functionality. Some functionality is in fontgate , some in fontlab , but typerig abstracts and combines both packages. Both fontgate and fontlab are \u201cbindings\u201d, i.e. they\u2019re not true Python packages, but instead interfaces that you can use from within Python. fontlab : the API docs for the fontlab package fontgate : the API docs for the fontgate package FL The FL package exposes a legacy API that is largely compatible with the old FontLab Studio 5 Python API. However, we no longer actively develop it, and it\u2019s only useful for very simple scripts. FL : the API docs for the FL package PythonQt FontLab uses Qt, a cross-platform set of APIs for user interface development and interaction with the operating system. Qt provides a unified API whether you use macOS or Windows. The PythonQt package exposes the entire Qt API to Python. PythonQt : FontLab\u2019s API docs for the PythonQt package official PythonQt : the official documentation of PythonQt PySide2 by Qt : documentation of PySide2 , which is an alternative Qt-Python bridge. The documentation is useful in exploring what you can do with Qt. Some details differ between PySide2 and PythonQt, so always check PythonQt documentation.","title":"Home"},{"location":"index.html#fontlab-7-python-api","text":"Version: 2020-08-09 The Python API for FontLab 7 consists of 4 packages: typerig fontlab fontgate FL You can also use the PythonQt package to interact with the OS and build GUIs.","title":"FontLab 7 Python API"},{"location":"index.html#typerig","text":"TypeRig is a Python library and set of tools for FontLab 7. It is developed by Vassil Kateliev. TypeRig provides several plugins that extend the functionality of FontLab, see documentation . But it also comes with a typerig package that provides a simplified, alternative \u201cpythonic\u201d API to FontLab. TypeRig is written in Python. To use the typerig package, run FontLab 7, choose Scripts Update / Install Scripts . Click OK in the dialog, wait until the installation completes. When you see the TypeRig is up-to-date dialog, click OK and restart FontLab 7.","title":"typerig"},{"location":"index.html#fontlab-and-fontgate","text":"The fontlab package exposes most or all of the FontLab 7 GUI and high-level font-related objects. The fontgate package exposes more technical aspects of fonts, and does not include GUI functionality. Some functionality is in fontgate , some in fontlab , but typerig abstracts and combines both packages. Both fontgate and fontlab are \u201cbindings\u201d, i.e. they\u2019re not true Python packages, but instead interfaces that you can use from within Python. fontlab : the API docs for the fontlab package fontgate : the API docs for the fontgate package","title":"fontlab and fontgate"},{"location":"index.html#fl","text":"The FL package exposes a legacy API that is largely compatible with the old FontLab Studio 5 Python API. However, we no longer actively develop it, and it\u2019s only useful for very simple scripts. FL : the API docs for the FL package","title":"FL"},{"location":"index.html#pythonqt","text":"FontLab uses Qt, a cross-platform set of APIs for user interface development and interaction with the operating system. Qt provides a unified API whether you use macOS or Windows. The PythonQt package exposes the entire Qt API to Python. PythonQt : FontLab\u2019s API docs for the PythonQt package official PythonQt : the official documentation of PythonQt PySide2 by Qt : documentation of PySide2 , which is an alternative Qt-Python bridge. The documentation is useful in exploring what you can do with Qt. Some details differ between PySide2 and PythonQt, so always check PythonQt documentation.","title":"PythonQt"},{"location":"FL.Anchor.html","text":"Anchor FL.Anchor = class Anchor ( object ) =============================================== Anchor - class to represent Anchor point =============================================== Integer values are accepted as coordinates CONSTRUCTOR: Anchor() - generic constructor, creates an Anchor with zero coordinates and empty name Anchor(Anchor) - copy constructor Anchor(string name, integer x, integer y) - creates an Anchor and assigns name and coordinates. ATTRIBUTES: parent (read-only) - anchor's parent object, Glyph name (string) - anchor's name as a string x (integer) - horizontal position of the anchor y (integer) - vertical position of the anchor p (Point) - position of the anchor as a Point object OPERATIONS: METHODS Transform(Matrix m) - applies Matrix transformation to the Anchor(see Matrix().__doc__) Layer(int layer_index) - returns position for the \"layer_index\" master SetLayer(int layer_index, Point position) - sets \"position\" position for the \"layer_index\" master Methods Layer (...) SetLayer (...) Transform (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Anchor"},{"location":"FL.Anchor.html#anchor","text":"","title":"Anchor"},{"location":"FL.Canvas.html","text":"Canvas FL.Canvas = class Canvas ( object ) =============================================== Canvas - class to represent screen paint area and operations =============================================== This class can perform automatic coordinates transformations, so you can draw in Glyph coordinate space or, if you prefer, in screen coordinates directly Use constants defined for FontLab module to assign attributes to Canvas object CONSTRUCTOR: ++ Never create Canvas object explicitly - they must be obtained from the FontLab's window classes Canvas() - generic constructor, creates an empty Canvas Canvas(Canvas) - copy constructor ATTRIBUTES: delta (Point) - horizontal shift during coordinates transformation scale (Point(float)) - scaling during coordinates transformation width (integer, read-only) - width of the canvas in pixels height (integer, read-only) - height of the canvas in pixels draw_style (integer, write-only) - sets current drawing mode (copy, XOR, invert etc.) pen_color (integer, write-only) - sets current pen color pen_style (integer, write-only) - sets current pen style (solid, dashed etc.) brush_color (integer, write-only) - sets current brush color brush_style (integer, write-only) - sets current brush style (solid, patterned etc.) text_color (integer, write-only) - sets color for a text bk_color (integer, write-only) - sets color for a text background bk_mode (integer, write-only) - sets background mode for a text output (transparent or opaque) OPERATIONS: METHODS MoveTo(Point p) | (x, y) - moves current position to p or (x, y) coordinates LineTo(Point p) | (x, y) - draws a straight line to the position p or (x, y) CurveTo(Point p0, Point p1, Point p2) - draws a 3th-order Bezier curve from the current point to points p0, p1, p2 SplineTo(Point p0, Point p1) - draws a 2th-order Bezier curve from the current point to points p0, p1 Ellipse(Rect r) | (Point p0, Point p1) | (x0, y0, x1, y1) - draws a filled ellipse defined by the Rect r, points p0 and p1 or set of coordinates Rectangle(Rect r) | (Point p0, Point p1) | (x0, y0, x1, y1) - draws a filled rectangle defined by the Rect r, points p0 and p1 or set of coordinates Convert(Point p) - converts coordinates from the source coordinate space to screen coordinates UnConvert(Point p) - converts screen coordinates to the currently defined coordinate space FitGlyph(Rect r, Glyph g) | (Rect r, Glyph g, WeightVector w) - recalculates parameters of coordinate conversion function to fit glyph g into rectangle r using currently selected options. FillGlyph(Glyph g) | (Glyph g, WeightVector w) - fills the glyph g using current coordinate transformation. OutlineGlyph(Glyph g) | (Glyph g, WeightVector w) - draws the glyph g outline using current coordinate transformation. TextOut(Point p, string s) | (x, y, string s) - draws the string s in the position p or (x, y) PutImage(Image i, Point p) | (Image i, Pioint p, int mode) - puts Image i at the selected point Methods Convert (...) CurveTo (...) Ellipse (...) FillGlyph (...) FitGlyph (...) LineTo (...) MoveTo (...) OutlineGlyph (...) PutImage (...) Rectangle (...) SplineTo (...) TextOut (...) UnConvert (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Canvas"},{"location":"FL.Canvas.html#canvas","text":"","title":"Canvas"},{"location":"FL.Component.html","text":"Component FL.Component = class Component ( object ) =============================================== Component - class to represent glyph component =============================================== Components are defined by the glyph index which they reference, shift of components origin point and scale factor of a component scale is measured in relation to 1.0, so 100% scale is 1.0 and 60% - 0.6 This class is Multiple Master - compatible CONSTRUCTOR: Component() - generic constructor, creates an empty Component Component(Component) - copy constructor Component(index) - creates component referencing glyph index with zero shift and 100% scale Component(index, Point(integer) delta) - creates component referencing glyph index with delta shift and 100% scale Component(index, Point(integer) delta, Point(float) scale) - creates component referencing glyph index with delta shift and scale factor defined by scale ATTRIBUTES: parent (read-only) - parent object, Glyph index (integer) - referencing glyph index delta (Point(integer)) - shift value scale (Point(float)) - scale factor deltas [(Point(integer))]- list of shift values for each master scales [(Point(float))] - list of scale values for each master OPERATIONS: METHODS Get() | (Font f) - creates a glyph from component applying delta and scale transformations. Font parameter is not needed when component has a parent Paste() - appends component to a parent glyph as a set of outlines. Component must have a parent Methods Get (...) Paste (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value transform (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Component"},{"location":"FL.Component.html#component","text":"","title":"Component"},{"location":"FL.Dialog.html","text":"Dialog FL.Dialog = class Dialog ( object ) =============================================== Dialog - class to represent Dialog =============================================== Note that objects of this class cannot be created explicitly, they are only generated as a result of Glyph().Audit() operation CONSTRUCTOR: Dialog(DialogClass) - generic constructor ATTRIBUTES: title - dialog title ok - text on the OK button cancel - text on the Cancel button position - position of the dialog's origin size - dialog size rectangle (combination of size and position) OPERATIONS: METHODS Center() - center dialog on screen AddControl(integer ControlType, Rect dimension, string identifier, integer ControlStyle) - adds a control to the dialog, see FLdict for Type- and Style-constants GetValue(string identifier) - get value from the specified control PutValue(string identifier) - put value to the specified control Enable(string identifier, integer value) - enable (value=1) or disable (value=0) the specified control Show(string identifier, integer value) - show (value=1) or hide (value=0) the specified control SetLabel(string identifier, string value) - set the label of the specified control GetRect(string identifier) - get dimension of the specified control as a Rect object Repaint(string identifier) - redraw the specified (custom)control Run() - run the dialog End()|End(integer returnvalue) - end the dialog Methods AddControl (...) Center (...) Enable (...) End (...) GetRect (...) GetValue (...) MoveTo (...) PutValue (...) Repaint (...) Run (...) SetLabel (...) Show (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors cancel ok position rectangle size title Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Dialog"},{"location":"FL.Dialog.html#dialog","text":"","title":"Dialog"},{"location":"FL.Encoding.html","text":"Encoding FL.Encoding = class Encoding ( object ) Encoding Methods FillUnencoded (...) FillUnicodes (...) FindName (...) Load (...) Save (...) __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Encoding"},{"location":"FL.Encoding.html#encoding","text":"","title":"Encoding"},{"location":"FL.EncodingRecord.html","text":"EncodingRecord FL.EncodingRecord = class EncodingRecord ( object ) EncodingRecord Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"EncodingRecord"},{"location":"FL.EncodingRecord.html#encodingrecord","text":"","title":"EncodingRecord"},{"location":"FL.Feature.html","text":"Feature FL.Feature = class Feature ( object ) =============================================== Feature - class to represent OpenType feature-definition record =============================================== CONSTRUCTOR: Feature() - generic constructor, creates an empty Feature record Feature(Feature) - copy constructor Feature(string tag) - creates feature, assigns 'tag' and empty value Feature(string tag, string value) - creates feature and assigns values to both attributes ATTRIBUTES: parent (read-only) - parent object, Font tag (string) - feature's tag value (string) - feature's text OPERATIONS: METHODS Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Feature"},{"location":"FL.Feature.html#feature","text":"","title":"Feature"},{"location":"FL.Font.html","text":"Font FL.Font = class Font ( object ) =============================================== Font - base class to represent font =============================================== CONSTRUCTOR: Font() - generic constructor, creates an empty Font Font(Font) - copy constructor Font(string filename) - creates a Font and assigns name of the file from which it was opened ATTRIBUTES: NAMES, COPYRIGHT AND IDENTIFICATION family_name(string) - font Family Name style_name full_name(string) - font Full Name font_name(string) - font Font Name font_style(integer) - Font Style menu_name(string) - font menu name weight weight_code width designer designer_url fontnames[NameRecord] - list of font name records copyright(string) - Copyright name field notice(string) - Notice field note(string) - Font note unique_id tt_u_id tt_version trademark x_u_id_num x_u_id vendor vendor_url version year version_major version_minor vp_id ms_charset ms_id panose[integer] - list of Panose values collection[collection] - list of glyph indexes in FontLab collection pcl_chars_set pcl_id DIMENSIONS upm ascender[integer] - list of ascenders, one for each master descender[integer] - list of descenders, one for each master cap_height[integer] - list of CapHeight records, one for each master x_height[integer] - list of xHeight values, one for each master default_width slant_angle italic_angle(float) - Italic Angle is_fixed_pitch underline_position underline_thickness ALIGNMENT blue_fuzz blue_scale blue_shift blue_values_num(integer) - number of defined blue values blue_values[integer[integer]] - two-dimentional array of BlueValues - master index is top-level index family_blues_num(integer) - number of FamilyBlues records family_blues[integer[integer]] - two-dimentional array of FamilyBlues - master index is top-level index family_other_blues_num(integer) - number of FamilyOtherBlues records family_other_blues[integer[integer]] - two-dimentional array of FamilyOtherBlues - master index is top-level index force_bold[integer] - list of Force Bold values, one for each master other_blues_num other_blues[integer[integer]] - two-dimentional array of OtherBlues - master index is top-level index stem_snap_h_num stem_snap_h stem_snap_v_num stem_snap_v OTHER ATTRIBUTES classes[string] - list of glyph classes ot_classes - OpenType classes data classes_text - glyph classes compiled in ot_classes format features[Feature] - list of OpenType features customdata(string) - font custom data field truetypetables[TrueTypeTable] - list of custom TrueType tables ttinfo(TTInfo) - loaded TrueType information (mostly hinting-related tables) encoding glyphs[Glyph] - array of glyphs source weight_vector measurement - position of the measurement line for the font OPERATIONS: len - returns number of glyphs [] - accesses glyphs array METHODS New() - clears the font Open(string filename) - opens font from VFB format Save(string filename) - saves font in VFB format Reencode() FindGlyph(string name) | (Uni unicode) | (integer Unicode) - finds glyph and return its index or -1 DefineAxis(string Name, string Type, string ShortName) - defines the new Multiple Master axis DeleteAxis(axisindex, float position) - removes the axis GenerateUnicode() - generates Unicode indexes for all glyphs GenerateNames() - generates names for all glyphs GenerateGlyph(string glyphname) - generates new glyph using 'glyphname' as a source of information about glyph's composition MakeKernFeature([WeightVector vector]) - generates 'kern' feature using font kerning and classes MergeFonts(Font source[, flags]) - appends all glyphs from the source font. Check mfXXXX constants for options SetClassFlags(int class_index, bool left, bool right) - allows to set 'left' and 'right' properties of the kerning class SetClassFlags(int class_index, bool lsb, bool rsb, bool width) - allows to set 'lsb', 'rsb' and 'width' properties of the metrics class GetClassLeft(int class_index) - returns the 'left' property of the class GetClassRight(int class_index) - returns the 'right' property of the class GetClassMetricsFlags(int class_index) - returns the tuple containing LSB, RSB and Width flags of the metrics class Methods DefineAxis (...) DeleteAxis (...) FindGlyph (...) GenerateGlyph (...) GenerateNames (...) GenerateUnicode (...) GetClassLeft (...) GetClassMetricsFlags (...) GetClassRight (...) MakeKernFeature (...) MergeFonts (...) New (...) Open (...) OpenAFM (...) Save (...) SaveAFM (...) SetClassFlags (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y has_key (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Font"},{"location":"FL.Font.html#font","text":"","title":"Font"},{"location":"FL.Glyph.html","text":"Glyph FL.Glyph = class Glyph ( object ) =============================================== Glyph - class to represent glyph =============================================== CONSTRUCTOR: Glyph() - generic constructor, creates an empty glyph Glyph(Glyph) - copy constructor Glyph(masterscount) - creates a glyph with 'masterscount' number of masters Glyph(masterscount, [Node, ...]) - creates a glyph with 'masterscount' number of masters and assigns a list of nodes ATTRIBUTES: parent (read-only) - Glyph's parent object nodes [Node] - list of Nodes customdata (string) - custom data defined for this glyph note (string) - note defined for this glyph mark (integer) - True if glyph is marked anchors [Anchor] - list of anchors hhints [Hint] - list of horizontal hints vhints [Hint] - list of vertical hints hlinks [Link] - list of horizontal links vlinks [Link] - list of vertical links components [Component] - list of componets replace_table [Replace] - hint replacing program, list of Replace objects kerning [KerningPair] - list of kerning pairs layers_number (integer) - number of masters flags (integer) - flags set for this glyph nodes_number (integer) - number of nodes, same as 'len(Glyph)' width (integer) - advance width for the first master height (integer) - advance height for the first master unicode (integer) - first Unicode index in integer form unicodes [integer] - list of Unicode indexes name (string) - glyph name mask (string) - mask STORED TRUETYPE DATA advance_width (integer) advance_height (integer) left_side_bearing (integer) top_side_bearing (integer) y_pels (integer) bounding_box (Rect) number_of_contours (integer) end_points [integer] points [TTPoint] instructions [Byte] hdmx[Byte] OPERATIONS: len() - returns number of nodes in the glyph [] - can be used to access individial nodes slice - can be used to access portion of the glyph's nodes array + or concatination - can be used to append Glyph, Node or sequence of Nodes multiply - second operand must be Matrix, applies matrix transformation to a glyph METHODS Assign (Glyph) - copies all information from the assigned glyph Transform(Matrix m) - applies Matrix transformation to the Glyph (see Matrix().__doc__) SetLayersNumber(mastersnumber) - changes the number of masters, is applicable only to glyphs that have no parent Clear() - removes all nodes Add - refer to '+' operator Insert (Node | Glyph | [Node]) | (Node | Glyph | [Node], nodeindex) - inserts Node, Glyph or sequence of Nodes at the begining of glyph's nodes or at specified node index Present (style) - returns True if a layer or a combination of layers are present in the glyph Delete (index) | (index0, index1) - removes node or range of nodes ExpandLayer (masterindex) - expands selected master to all other masters Shift (Point) | (Point, masterindex) - shifts positions of all nodes at first or specified master Scale (Point(float) scale) | (Point(float) scale, Point center) | (Point(float) scale, Point center, masterindex) - scales the glyph Layer (masterindex) - returns list of Points for all nodes for the selected master Section (masterindex, pointindex, nodetype) - returns list of Points that conform to selected options MoveNode(...) - moves the node copying Edit tool behavior (see User manual for details) DeleteNode(nodeindex) - removes the node InsertNode(nodeindex) | (nodeindex, float time) | (nodeindex, float time, masterindex) - insers new node on a contour SELECTION OPERATIONS Selection() - returns list of selected nodes SelectAll() - selects all nodes UnselectAll() - deselects all nodes InvertSelection() - selects unselected nodes and deselects selected nodes isAnySelected() - returns True if at least one node is selected SelectedCount() - returns number of selected nodes SelectRect(Rect r) | (Rect r, masterindex) - selects all nodes that are inside the rectangle UnselectRect(Rect r) | (Rect r, masterindex) - deselects all nodes that are inside the rectangle DeleteSelected() - deletes all selected nodes METRICS AND BBOX OPERATIONS GetBoundingRect() | (masterindex) - returns Rect - bounding box of the glyph GetMetrics() | (masterindex) - returns glyph advance width and advance height in a form of Point SetMetrics(Point p) | (Point p, masterindex) - assigns new values to the width and height of the glyph GetVSB() | (masterindex) - returns glyph bottom sidebearing position SetVSB(value) | (value, masterindex) - assigns new values to the bottom sidebearing of the glyph OVERLAP OPERATIONS RemoveOverlap() | (masterindex) - removes overlap Badd(Glyph g) | ([Node]) | (Glyph g, masterindex) | ([Node], masterindex) - performs bollean Add operation with the glyph or list of nodes Bsubtract(Glyph g) | ([Node]) | (Glyph g, masterindex) | ([Node], masterindex) - performs bollean Subtract operation with the glyph or list of nodes Bintersect(Glyph g) | ([Node]) | (Glyph g, masterindex) | ([Node], masterindex) - performs bollean Insersect operation with the glyph or list of nodes OPERATIONS ON CONTOURS GetContoursNumber() - returns number of contours in the glyph GetContourBegin(contourindex) - returns index of the first node for a contour GetContourLength(contourindex) - returns number of nodes in a contour SelectContour(contourindex) - selects all nodes in the contour DeleteContour(contourindex) - removes contour ReverseContour(contourindex) - reverses contour's direction ReorderContour(contourindex, newindex) - reorders contours in the glyph isContourClockwise(contourindex) - returns True if direction of contour is clockwise SetStartNode(nodeindex) - makes the node a starting node of the contour FindContour(nodeindex) - returns number of contour containing the 'nodeindex' HINTS OPERATIONS RemoveHints(mode) - removes hints and links Autohint() | (masterindex) - automatically generates Type 1 hints ANCHOR OPERATIONS FindAnchor(string name) - finds anchor by name TRANSFORMATION ACTIONS Decompose() - pastes all components to the glyph outline MakeExtremeNodes() | (masterindex) - automatically detects and adds extreme nodes Audit() | (masterindex) - performs test of the glyph and returns list of AuditRecord objects Iterate(Iterator) - iterates glyph trough iterator class which must unclude following methods: Start(); ClosePath(); StartPath(Node); LineTo(Node); CurveTo(Node); SplineTo(Node); Finish() Rotate3D Extrude3D(outlinewidth, shift_x, shift_y) Shadow(outlinewidth, shift_x, shift_y) College(outlinewidth, distance) Gradient(outlinewidth, direction, stripes_number, start_y, finish_y) Distance(width_x, width_y, cornermode) | (width_x, width_y, cornermode, Glyph dest) Interpolate([(nodeindex, Point newposition]) Warp([Point], float force) Rasterize() | Rasterize(Image, [, active layer[, height]]) | Rasterize(Image, [, WeightVector[, height]]) - rasterizes glyph to the Image or to glyph's background. Returns resulting image_rect. Height is relative to font's UPM Blend(Glyph source, integer layer1, integer layer2, Point amount) - returns blend of the glyph and source JoinAll() - tries to join all open contours SaveEPS(string filename) | (string filename, layer) - writes layer into the EPS file named filename LoadEPS(string filename) - reads EPS from filename and returns Glyph object. Use Assign method to replace current glyph with the loaded outline R([Point], float force) Methods Add (...) Assign (...) Audit (...) Autohint (...) Badd (...) Bintersect (...) Blend (...) Bsubtract (...) Clear (...) College (...) Decompose (...) Delete (...) DeleteContour (...) DeleteNode (...) DeleteSelected (...) Distance (...) EditMask (...) ExchangeMask (...) ExpandLayer (...) Extrude3D (...) FindAnchor (...) FindContour (...) GetBoundingRect (...) GetContourBegin (...) GetContourLength (...) GetContoursNumber (...) GetMetrics (...) Gradient (...) Insert (...) InsertNode (...) Interpolate (...) InvertSelection (...) Iterate (...) JoinAll (...) Layer (...) LoadEPS (...) MakeExtremeNodes (...) MoveNode (...) Present (...) Rasterize (...) RemoveHints (...) RemoveOverlap (...) ReorderContour (...) ReverseContour (...) Rotate3D (...) SaveEPS (...) Scale (...) Section (...) SelectAll (...) SelectContour (...) SelectRect (...) SelectedCount (...) Selection (...) SetLayersNumber (...) SetMetrics (...) SetStartNode (...) Shadow (...) Shift (...) Transform (...) UnselectAll (...) UnselectRect (...) Warp (...) __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (y) < ==> x*y __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. clear (...) isAnySelected (...) isContourClockwise (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Glyph"},{"location":"FL.Glyph.html#glyph","text":"","title":"Glyph"},{"location":"FL.Guide.html","text":"Guide FL.Guide = class Guide ( object ) =============================================== Guide - class to represent guideline =============================================== This class is Multiple Master - compatible CONSTRUCTOR: Guide() - generic constructor, creates a Guide with zero coordinates Guide(Guide) - copy constructor Guide(position) - creates a Guide and assigns position Guide(position, angle) - creates a Guide and assigns position and width values ATTRIBUTES: parent (read-only) - Guide's parent object, Glyph position (integer) - position of the guideline width (integer) - width of the guideline angle (float) - angle of the guide (degrees) positions [(integer)] - list of positions for each master widths [(integer)] - list of widths for each master OPERATIONS: METHODS Transform(Matrix m) - applies Matrix transformation to the Guide (see Matrix().__doc__) TransformLayer(Matrix m, layernum) - applies Matrix transformation to the selected layer of the Guide Methods Transform (...) TransformLayer (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Guide"},{"location":"FL.Guide.html#guide","text":"","title":"Guide"},{"location":"FL.Hint.html","text":"Hint FL.Hint = class Hint ( object ) =============================================== Hint - class to represent hint =============================================== This class is Multiple Master - compatible CONSTRUCTOR: Hint() - generic constructor, creates a Hint with zero coordinates Hint(Hint) - copy constructor Hint(position, width) - creates a Hint and assigns position and width values ATTRIBUTES: parent (read-only) - Hint's parent object, Glyph position (integer) - position of the hint width (integer) - width of the hint positions [(integer)] - list of positions for each master widths [(integer)] - list of widths for each master OPERATIONS: METHODS ToLink() - transforms hint to Link (and returns it as a result) using parent as a source of node coordinates. Parent must exist Transform(Matrix m) - applies Matrix transformation to the Hint (see Matrix().__doc__) TransformLayer(Matrix m, layernum) - applies Matrix transformation to the selected layer of the Hint Methods ToLink (...) Transform (...) TransformLayer (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Hint"},{"location":"FL.Hint.html#hint","text":"","title":"Hint"},{"location":"FL.Image.html","text":"Image FL.Image = class Image ( object ) =============================================== Image - class to represent bitmap image =============================================== CONSTRUCTOR: Image() - generic constructor, creates a Image with zero coordinates Image(Image) - copy constructor Image(index1, index2) - creates a Image between nodes index1 and index2 ATTRIBUTES: width, height (integer) [read-only] - dimensions of the image empty (integer) [read-only] - empty status of the image size (integer) [read-only] - size of the image buffer data (string) - image data as string with length traceenabled () [read-only] - there is a possibility to trace the image with the Trace command OPERATIONS: Trace (Glyph) - Traces the image with the current option and adds it to the glyph METHODS Methods Clear (...) Create (...) GetPixel (...) HLine (...) ImageBlt (...) Invert (...) SetPixel (...) Trace (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Image"},{"location":"FL.Image.html#image","text":"","title":"Image"},{"location":"FL.KerningPair.html","text":"KerningPair FL.KerningPair = class KerningPair ( object ) =============================================== KerningPair - class to represent kerning pair =============================================== This class is Multiple Master - compatible CONSTRUCTOR: KerningPair() - generic constructor, creates an empty KerningPair KerningPair(KerningPair) - copy constructor KerningPair(index) - creates a KerningPair to glyph referenced by index but zero value KerningPair(index, value) - creates a KerningPair to glyph referenced by index but and assigns value ATTRIBUTES: parent (read-only) - KerningPair's parent object, Glyph key (integer) - index of right glyph of the pair value (integer) - value of the pair values [(integer)] - list of values for each master OPERATIONS: METHODS Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"KerningPair"},{"location":"FL.KerningPair.html#kerningpair","text":"","title":"KerningPair"},{"location":"FL.Link.html","text":"Link FL.Link = class Link ( object ) =============================================== Link - class to represent link =============================================== CONSTRUCTOR: Link() - generic constructor, creates a Link with zero coordinates Link(Link) - copy constructor Link(index1, index2) - creates a Link between nodes index1 and index2 ATTRIBUTES: parent (read-only) - Link's parent object, Glyph node1, node2 (integer) - indexes of the nodes that are linked OPERATIONS: METHODS ToHint() - transforms link to Hint (and returns it as a result) using parent as a source of node coordinates. Parent must exist Methods ToHint (...) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Link"},{"location":"FL.Link.html#link","text":"","title":"Link"},{"location":"FL.Matrix.html","text":"Matrix FL.Matrix = class Matrix ( object ) =============================================== Matrix - class to represent planar transformations =============================================== Matrix is used to perform following transformations: x1 = x * a + y * b + e y1 = x * c + y * d + f CONSTRUCTOR: Matrix() - generic constructor, creates a Matrix that makes no change to coordinates Matrix(Matrix) - copy constructor Matrix([a, b, c, d, e, f]) - creates a Matrix and assigns coordinates from the list of float numbers Matrix(a, b, c, d, e, f) - creates a Matrix and assigns coordinates from float numbers ATTRIBUTES: a, b, c, d, e, f (float) - Matrix parameters OPERATIONS: add - Matrix must be second operand, all parameters are added subtract - Matrix must be second operand, all parameters are subtracted multiply (with Matrix) - matrixes are multiplied multiply (with float number) - all parameters are scaled by the operand METHODS Assign - assigns new values to a Matrix, uses the same syntax as in constructors Add(Matrix m) - adds values of the Matrix m to current matrix Sub(Matrix m) - subtracts values of the Matrix m from current matrix Mul(float s) - mutiplies Matrix's parameters to s value Transform(Matrix m) - applies Matrix m transformation to the current Matrix Methods Add (...) Add (Matrix m) - adds values of the Matrix m to current matrix Assign (...) Assign - assigns new values to a Matrix, uses the same syntax as in constructors Mul (...) Mul (float s) - mutiplies Matrix's parameters to s value Sub (...) Sub (Matrix m) - subtracts values of the Matrix m from current matrix Transform (...) Transform (Matrix m) - applies Matrix m transformation to the current Matrix __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __mul__ (...) x. __mul__ (y) < ==> x*y __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __rsub__ (...) x. __rsub__ (y) < ==> y-x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __sub__ (...) x. __sub__ (y) < ==> x-y Descriptors a b c d e f Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Add FL.Matrix.Add = Add (...) Add(Matrix m) - adds values of the Matrix m to current matrix Assign FL.Matrix.Assign = Assign (...) Assign - assigns new values to a Matrix, uses the same syntax as in constructors Mul FL.Matrix.Mul = Mul (...) Mul(float s) - mutiplies Matrix's parameters to s value Sub FL.Matrix.Sub = Sub (...) Sub(Matrix m) - subtracts values of the Matrix m from current matrix Transform FL.Matrix.Transform = Transform (...) Transform(Matrix m) - applies Matrix m transformation to the current Matrix","title":"Matrix"},{"location":"FL.Matrix.html#matrix","text":"","title":"Matrix"},{"location":"FL.Matrix.html#add","text":"FL.Matrix.Add = Add (...) Add(Matrix m) - adds values of the Matrix m to current matrix","title":"Add"},{"location":"FL.Matrix.html#assign","text":"FL.Matrix.Assign = Assign (...) Assign - assigns new values to a Matrix, uses the same syntax as in constructors","title":"Assign"},{"location":"FL.Matrix.html#mul","text":"FL.Matrix.Mul = Mul (...) Mul(float s) - mutiplies Matrix's parameters to s value","title":"Mul"},{"location":"FL.Matrix.html#sub","text":"FL.Matrix.Sub = Sub (...) Sub(Matrix m) - subtracts values of the Matrix m from current matrix","title":"Sub"},{"location":"FL.Matrix.html#transform","text":"FL.Matrix.Transform = Transform (...) Transform(Matrix m) - applies Matrix m transformation to the current Matrix","title":"Transform"},{"location":"FL.Node.html","text":"Node FL.Node = class Node ( object ) =============================================== Node - class to represent node =============================================== This class is Multiple Master - compatible CONSTRUCTOR: Node() - generic constructor, creates an empty node Node(Node) - copy constructor Node(intteger type, Point p) - creates a Node and assigns type and coordinates of the final point ATTRIBUTES: parent (read-only) - Node's parent object type (integer) - type of the node, values are: nMOVE, nLINE, nCURVE or nOFF count (integer, read-only) - number of points in the node. 3 for curves and 1 for all other types of nodes alignment (integer) - type of primitive connection, possible values are: nSHARP, nSMOOTH, nFIXED selected (integer) - True if node is selected point (Point) - position of the final point of the first master points [(Points)] - positions of all points of the first master x (integer) - horizontal position of the final point of the node y (integer) - vertical position of the final point of the node OPERATIONS: len() - returns number of points in the node, same as count attribute [] - can be used to access individial points of the first master multiply - second operand must be Matrix, applies matrix transformation to a node METHODS Assign - assigns new values to a Node, refer to constructor for a description of possible options SetAllLayers(pointindex, Point p) - assigns position of the point p to all masters of the point number 'pointindex' Layer(masterindex) - returns list of points for the master 'masterindex' Section(pointindex) - returns list of points for all layers and point number 'pointindex' Shift(Point p, masterindex) - shifts position of all points for the master 'masterindex' ExpandLayer(masterindex) - copies positions of all points in the master 'masterindex' to other masters Transform(Matrix m) - applies Matrix transformation to the Node (see Matrix().__doc__) Methods Assign (...) ExpandLayer (...) Layer (...) Section (...) SetAllLayers (...) Shift (...) Transform (...) __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (y) < ==> x*y __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. Descriptors alignment count open parent point points selected type x y Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"Node"},{"location":"FL.Node.html#node","text":"","title":"Node"},{"location":"FL.Point.html","text":"Point FL.Point = class Point ( object ) =============================================== Point - base class to represent point =============================================== Integer or float values are accepted as coordinates CONSTRUCTOR: Point() - generic constructor, creates a Point with zero coordinates Point(Point) - copy constructor Point(x, y) - creates a Point and assigns coordinates. x and y may be integer or float ATTRIBUTES: parent (read-only) - Point's parent object x (integer or float) - horizontal position of the point y (integer or float) - vertical position of the point OPERATIONS: == - compares two points, both coordinates must be equal add - Point must be second operand, both coordinates are added subtract - Point must be second operand, both coordinates are added multiply - second operand may be Point, float or Matrix. If second operand is Point, then result of scalar product is returned METHODS Assign(Point p) | (x, y) - assigns new values to a Point Shift(Point p) | (x, y) - shifts Point on a position defined by p or x and y values Add(Point p) - same as Shift(Point p) Sub(Point p) - subtracts p coordinates from the current Point Mul(float s) - mutiplies Point's position to s value Transform(Matrix m) - applies Matrix transformation to the Point (see Matrix().__doc__) Methods Add (...) Add (Point p) - same as Shift (Point p) Assign (...) Assign (Point p) | (x, y) - assigns new values to a Point Mul (...) Mul (float s) - mutiplies Point's position to s value Shift (...) Shift (Point p) | (x, y) - shifts Point on a position defined by p or x and y values Sub (...) Sub (Point p) - subtracts p coordinates from the current Point Transform (...) Transform (Matrix m) - applies Matrix transformation to the Point (see Matrix().__doc__) __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __mul__ (...) x. __mul__ (y) < ==> x*y __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __rsub__ (...) x. __rsub__ (y) < ==> y-x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __sub__ (...) x. __sub__ (y) < ==> x-y Descriptors x y Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Add FL.Point.Add = Add (...) Add(Point p) - same as Shift(Point p) Assign FL.Point.Assign = Assign (...) Assign(Point p) | (x, y) - assigns new values to a Point Mul FL.Point.Mul = Mul (...) Mul(float s) - mutiplies Point's position to s value Shift FL.Point.Shift = Shift (...) Shift(Point p) | (x, y) - shifts Point on a position defined by p or x and y values Sub FL.Point.Sub = Sub (...) Sub(Point p) - subtracts p coordinates from the current Point Transform FL.Point.Transform = Transform (...) Transform(Matrix m) - applies Matrix transformation to the Point (see Matrix().__doc__)","title":"Point"},{"location":"FL.Point.html#point","text":"","title":"Point"},{"location":"FL.Point.html#add","text":"FL.Point.Add = Add (...) Add(Point p) - same as Shift(Point p)","title":"Add"},{"location":"FL.Point.html#assign","text":"FL.Point.Assign = Assign (...) Assign(Point p) | (x, y) - assigns new values to a Point","title":"Assign"},{"location":"FL.Point.html#mul","text":"FL.Point.Mul = Mul (...) Mul(float s) - mutiplies Point's position to s value","title":"Mul"},{"location":"FL.Point.html#shift","text":"FL.Point.Shift = Shift (...) Shift(Point p) | (x, y) - shifts Point on a position defined by p or x and y values","title":"Shift"},{"location":"FL.Point.html#sub","text":"FL.Point.Sub = Sub (...) Sub(Point p) - subtracts p coordinates from the current Point","title":"Sub"},{"location":"FL.Point.html#transform","text":"FL.Point.Transform = Transform (...) Transform(Matrix m) - applies Matrix transformation to the Point (see Matrix().__doc__)","title":"Transform"},{"location":"FL.Rect.html","text":"Rect FL.Rect = class Rect ( object ) =============================================== Rect - base class to represent rectangle =============================================== Integer or float values are accepted as coordinates CONSTRUCTOR: Rect() - generic constructor, creates a Rect with zero coordinates Rect(Rect r) - copy constructor Rect(Point p) - creates rectangle with one corner at (0, 0) and another - at coordinates defined by p Rect(Point p0, Point p1) - creates rectangle defined by the corner points Rect(x0, y0, x1, y1) - creates a rectangle defined by the coordinates of the corner points ATTRIBUTES: ll (Point) - position of the left/bottom corner ur (Point) - position of the right/top corner x (integer or float) - horizontal position of the left corner y (integer or float) - vertical position of the bottom corner width (integer or float) - width of the rectangle height (integer or float) - height of the rectangle OPERATIONS: add - Point or Rect must be second operand, rectangle is expanded to include this point or rectange multiply - second operand must be Matrix. Matrix transformation is applied to the rectangle METHODS Assign(Rect r) | (Point p0, Point p1) | (x0, y0, x1, y1) - assigns new values to a Rect, the same as constructor Shift(Point p) | (x, y) - shifts Rect on a position defined by p or x and y values Transform(Matrix m) - applies Matrix transformation to the Rect (see Matrix().__doc__) Resize(width, height) - resizes rectangle to new width and height Include(Rect r) | (Point p) | (x, y) - expands rectangle to include new rectangle or point Check(Rect r) - returns True if r overlaps current rectangle Check(Point p) - returns True if p is insude current rectangle Validate() - corrents rectangle's orientation Methods Assign (...) Assign (Rect r) | (Point p0, Point p1) | (x0, y0, x1, y1) - assigns new values to a Rect, the same as constructor Check (...) Check (Rect r) - returns True if r overlaps current rectangle Check (Point p) - returns True if p is insude current rectangle Include (...) Include (Rect r) | (Point p) | (x, y) - expands rectangle to include new rectangle or point Resize (...) Resize (width, height) - resizes rectangle to new width and height Shift (...) Shift (Point p) | (x, y) - shifts Rect on a position defined by p or x and y values Transform (...) Transform (Matrix m) - applies Matrix transformation to the Rect (see Matrix().__doc__) Validate (...) Validate () - corrents rectangle's orientation __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __mul__ (...) x. __mul__ (y) < ==> x*y __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors height ll ur width x y Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Assign FL.Rect.Assign = Assign (...) Assign(Rect r) | (Point p0, Point p1) | (x0, y0, x1, y1) - assigns new values to a Rect, the same as constructor Check FL.Rect.Check = Check (...) Check(Rect r) - returns True if r overlaps current rectangle Check(Point p) - returns True if p is insude current rectangle Include FL.Rect.Include = Include (...) Include(Rect r) | (Point p) | (x, y) - expands rectangle to include new rectangle or point Resize FL.Rect.Resize = Resize (...) Resize(width, height) - resizes rectangle to new width and height Shift FL.Rect.Shift = Shift (...) Shift(Point p) | (x, y) - shifts Rect on a position defined by p or x and y values Transform FL.Rect.Transform = Transform (...) Transform(Matrix m) - applies Matrix transformation to the Rect (see Matrix().__doc__) Validate FL.Rect.Validate = Validate (...) Validate() - corrents rectangle's orientation","title":"Rect"},{"location":"FL.Rect.html#rect","text":"","title":"Rect"},{"location":"FL.Rect.html#assign","text":"FL.Rect.Assign = Assign (...) Assign(Rect r) | (Point p0, Point p1) | (x0, y0, x1, y1) - assigns new values to a Rect, the same as constructor","title":"Assign"},{"location":"FL.Rect.html#check","text":"FL.Rect.Check = Check (...) Check(Rect r) - returns True if r overlaps current rectangle Check(Point p) - returns True if p is insude current rectangle","title":"Check"},{"location":"FL.Rect.html#include","text":"FL.Rect.Include = Include (...) Include(Rect r) | (Point p) | (x, y) - expands rectangle to include new rectangle or point","title":"Include"},{"location":"FL.Rect.html#resize","text":"FL.Rect.Resize = Resize (...) Resize(width, height) - resizes rectangle to new width and height","title":"Resize"},{"location":"FL.Rect.html#shift","text":"FL.Rect.Shift = Shift (...) Shift(Point p) | (x, y) - shifts Rect on a position defined by p or x and y values","title":"Shift"},{"location":"FL.Rect.html#transform","text":"FL.Rect.Transform = Transform (...) Transform(Matrix m) - applies Matrix transformation to the Rect (see Matrix().__doc__)","title":"Transform"},{"location":"FL.Rect.html#validate","text":"FL.Rect.Validate = Validate (...) Validate() - corrents rectangle's orientation","title":"Validate"},{"location":"FL.TTPoint.html","text":"TTPoint FL.TTPoint = class TTPoint ( object ) =============================================== TTPoint - class to represent TrueType points =============================================== All coordinates in TTPoint class are set in 10.6 fixed-point format CONSTRUCTOR: TTPoint() - generic constructor, creates a TTPoint with zero coordinates ATTRIBUTES: x (integer) - x coordinate y (integer) - y coordinate flag (integer) - point's flag (on-curve or off-curve) OPERATIONS: METHODS Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors flag x y Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"TTPoint"},{"location":"FL.TTPoint.html#ttpoint","text":"","title":"TTPoint"},{"location":"FL.TrueTypeTable.html","text":"TrueTypeTable FL.TrueTypeTable = class TrueTypeTable ( object ) =============================================== TrueTypeTable - class to represent custom OpenType table =============================================== CONSTRUCTOR: TrueTypeTable() - generic constructor, creates an empty TrueTypeTable record TrueTypeTable(TrueTypeTable) - copy constructor TrueTypeTable(string tag) - creates table, assigns 'tag' and empty value TrueTypeTable(string tag, string value) - creates TrueType table and assigns values to both attributes TrueTypeTable(string tag, string value, integer valuelen) - creates TrueType table and assigns values to both attributes. 'value' may include zeroes ATTRIBUTES: parent (read-only) - parent object, Font tag (string) - TrueType table's tag value (string) - TrueType table's value OPERATIONS: METHODS Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"TrueTypeTable"},{"location":"FL.TrueTypeTable.html#truetypetable","text":"","title":"TrueTypeTable"},{"location":"FL.fl.html","text":"fl FL.fl = FontLab Fonts: 1","title":"fl"},{"location":"FL.fl.html#fl","text":"FL.fl = FontLab Fonts: 1","title":"fl"},{"location":"FL.html","text":"FL FL old FL-Python interface for FontGate","title":"FL"},{"location":"FL.html#fl","text":"","title":"FL"},{"location":"fontgate.fgAnchor.html","text":"fgAnchor fontgate.fgAnchor = class fgAnchor ( object ) Anchor representation Constructors: fgAnchor() - default fgAnchor(fgAnchor) - copy fgAnchor((x, y), 'name') - create with position=(x, y) and name='name' fgAnchor(x, y, 'name') - create with position=(x, y) and name='name' Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) copy (...) copy (fgAnchor) - copy data from another fgAnchor object draw (...) draw (penObject) - draw the object with a segment pen drawPoints (...) drawPoints (penObject) - draw the object with a point pen move (...) move (dx, dy) - move anchor by (dx, dy) round (...) round () - round anchor coordinates scale (...) scale ((scale_x, scale_y)[, (center_x, center_y)]) - scale anchor by (scale_x, scale_y) with center=(center_x, center_y) or (0,0) if not defined transform (...) transform (fgMatrix) - transform anchor coordinates by matrix Descriptors data (uint) - data index (int) - index of object for owner's base layer mark (uint) - mark name (string) - name position (fgPoint) - coordinates as fgPoint x (int/double) - horizontal coordinate y (int/double) - vertical coordinate Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T copy fontgate.fgAnchor.copy = copy (...) copy(fgAnchor) - copy data from another fgAnchor object data fontgate.fgAnchor.data (uint) - data draw fontgate.fgAnchor.draw = draw (...) draw(penObject) - draw the object with a segment pen drawPoints fontgate.fgAnchor.drawPoints = drawPoints (...) drawPoints(penObject) - draw the object with a point pen index fontgate.fgAnchor.index (int) - index of object for owner's base layer mark fontgate.fgAnchor.mark (uint) - mark move fontgate.fgAnchor.move = move (...) move(dx, dy) - move anchor by (dx, dy) name fontgate.fgAnchor.name (string) - name position fontgate.fgAnchor.position (fgPoint) - coordinates as fgPoint round fontgate.fgAnchor.round = round (...) round() - round anchor coordinates scale fontgate.fgAnchor.scale = scale (...) scale((scale_x, scale_y)[, (center_x, center_y)]) - scale anchor by (scale_x, scale_y) with center=(center_x, center_y) or (0,0) if not defined transform fontgate.fgAnchor.transform = transform (...) transform(fgMatrix) - transform anchor coordinates by matrix x fontgate.fgAnchor.x (int/double) - horizontal coordinate y fontgate.fgAnchor.y (int/double) - vertical coordinate","title":"fgAnchor"},{"location":"fontgate.fgAnchor.html#fganchor","text":"","title":"fgAnchor"},{"location":"fontgate.fgAnchor.html#copy","text":"fontgate.fgAnchor.copy = copy (...) copy(fgAnchor) - copy data from another fgAnchor object","title":"copy"},{"location":"fontgate.fgAnchor.html#data","text":"fontgate.fgAnchor.data (uint) - data","title":"data"},{"location":"fontgate.fgAnchor.html#draw","text":"fontgate.fgAnchor.draw = draw (...) draw(penObject) - draw the object with a segment pen","title":"draw"},{"location":"fontgate.fgAnchor.html#drawpoints","text":"fontgate.fgAnchor.drawPoints = drawPoints (...) drawPoints(penObject) - draw the object with a point pen","title":"drawPoints"},{"location":"fontgate.fgAnchor.html#index","text":"fontgate.fgAnchor.index (int) - index of object for owner's base layer","title":"index"},{"location":"fontgate.fgAnchor.html#mark","text":"fontgate.fgAnchor.mark (uint) - mark","title":"mark"},{"location":"fontgate.fgAnchor.html#move","text":"fontgate.fgAnchor.move = move (...) move(dx, dy) - move anchor by (dx, dy)","title":"move"},{"location":"fontgate.fgAnchor.html#name","text":"fontgate.fgAnchor.name (string) - name","title":"name"},{"location":"fontgate.fgAnchor.html#position","text":"fontgate.fgAnchor.position (fgPoint) - coordinates as fgPoint","title":"position"},{"location":"fontgate.fgAnchor.html#round","text":"fontgate.fgAnchor.round = round (...) round() - round anchor coordinates","title":"round"},{"location":"fontgate.fgAnchor.html#scale","text":"fontgate.fgAnchor.scale = scale (...) scale((scale_x, scale_y)[, (center_x, center_y)]) - scale anchor by (scale_x, scale_y) with center=(center_x, center_y) or (0,0) if not defined","title":"scale"},{"location":"fontgate.fgAnchor.html#transform","text":"fontgate.fgAnchor.transform = transform (...) transform(fgMatrix) - transform anchor coordinates by matrix","title":"transform"},{"location":"fontgate.fgAnchor.html#x","text":"fontgate.fgAnchor.x (int/double) - horizontal coordinate","title":"x"},{"location":"fontgate.fgAnchor.html#y","text":"fontgate.fgAnchor.y (int/double) - vertical coordinate","title":"y"},{"location":"fontgate.fgAnchors.html","text":"fgAnchors fontgate.fgAnchors = class fgAnchors ( object ) list of fgAnchor objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgAnchors.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgAnchors.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgAnchors.clean = clean (...) clean() - delete all items del fontgate.fgAnchors.del = del (...) del(index) - delete item by index insert fontgate.fgAnchors.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgAnchors"},{"location":"fontgate.fgAnchors.html#fganchors","text":"","title":"fgAnchors"},{"location":"fontgate.fgAnchors.html#append","text":"fontgate.fgAnchors.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgAnchors.html#aslist","text":"fontgate.fgAnchors.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgAnchors.html#clean","text":"fontgate.fgAnchors.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgAnchors.html#del","text":"fontgate.fgAnchors.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgAnchors.html#insert","text":"fontgate.fgAnchors.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgAxes.html","text":"fgAxes fontgate.fgAxes = class fgAxes ( object ) Axes list representation Constructors: fgAxes() - default fgAxes(fgAxes) - copy Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) Descriptors masters (fgMasters) - masters Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T masters fontgate.fgAxes.masters (fgMasters) - masters","title":"fgAxes"},{"location":"fontgate.fgAxes.html#fgaxes","text":"","title":"fgAxes"},{"location":"fontgate.fgAxes.html#masters","text":"fontgate.fgAxes.masters (fgMasters) - masters","title":"masters"},{"location":"fontgate.fgAxis.html","text":"fgAxis fontgate.fgAxis = class fgAxis ( object ) Axis representation Constructors: fgAxis('name') - create with name='name' Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors blendMap (list(Point)) map (list(Point)) name (string) - name shortName (string) - shortName type (string) - type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T blendMap fontgate.fgAxis.blendMap (list(Point)) map fontgate.fgAxis.map (list(Point)) name fontgate.fgAxis.name (string) - name shortName fontgate.fgAxis.shortName (string) - shortName type fontgate.fgAxis.type (string) - type","title":"fgAxis"},{"location":"fontgate.fgAxis.html#fgaxis","text":"","title":"fgAxis"},{"location":"fontgate.fgAxis.html#blendmap","text":"fontgate.fgAxis.blendMap (list(Point))","title":"blendMap"},{"location":"fontgate.fgAxis.html#map","text":"fontgate.fgAxis.map (list(Point))","title":"map"},{"location":"fontgate.fgAxis.html#name","text":"fontgate.fgAxis.name (string) - name","title":"name"},{"location":"fontgate.fgAxis.html#shortname","text":"fontgate.fgAxis.shortName (string) - shortName","title":"shortName"},{"location":"fontgate.fgAxis.html#type","text":"fontgate.fgAxis.type (string) - type","title":"type"},{"location":"fontgate.fgBitmap.html","text":"fgBitmap fontgate.fgBitmap = class fgBitmap ( object ) Bitmap representation Constructors: fgBitmap() - default fgBitmap(fgBitmap) - make orphan copy of another object fgBitmap(width, height, bitsPerPixel) fgBitmap(width, height, rowBytes, bitsPerPixel, bytesarray) Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (n) < ==> x*n __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple clear (...) clear all data clone (...) clone (fgBitmap source) - make clone of source bitmap copy (...) copy (fgBitmap source[, x, y, w, h]) - copy whole source bitmap or part of it with size (w, h) from pos (x, y) copyData (...) copy (bytesarray) - assign new bitmap data create (...) create ( ') - allocate new bitmap data downsample (...) downsample (fgBitmap, int oversampling) empty (...) bool empty () - return true if no data assigned or bitmap size is 0 emptyRow (...) emptyRow (y, x0, x1) - return true if part of row y from x0 till x1 has no non-zero pixels fill (...) fill (fgColor color) - fill entire bitmap by color flipV (...) flip bitmap by vertical axis getPixel (...) fgColor getPixel (x, y) - get color of pixel (x, y) row (...) setPixel (...) setPixel (x, y, fgColor color) - set color for pixel (x, y) Descriptors bpp bits per pixel bytes bytes per row data bitmap data height bitmap height in pixels size overall bytes count for bitmap storage width bitmap width in pixels Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgBitmap.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgBitmap.asTuple = asTuple (...) represent object as tuple bpp fontgate.fgBitmap.bpp bits per pixel bytes fontgate.fgBitmap.bytes bytes per row clear fontgate.fgBitmap.clear = clear (...) clear all data clone fontgate.fgBitmap.clone = clone (...) clone(fgBitmap source) - make clone of source bitmap copy fontgate.fgBitmap.copy = copy (...) copy(fgBitmap source[, x, y, w, h]) - copy whole source bitmap or part of it with size (w, h) from pos (x, y) copyData fontgate.fgBitmap.copyData = copyData (...) copy(bytesarray) - assign new bitmap data create fontgate.fgBitmap.create = create (...) create( ') - allocate new bitmap data data fontgate.fgBitmap.data bitmap data downsample fontgate.fgBitmap.downsample = downsample (...) downsample(fgBitmap, int oversampling) empty fontgate.fgBitmap.empty = empty (...) bool empty() - return true if no data assigned or bitmap size is 0 emptyRow fontgate.fgBitmap.emptyRow = emptyRow (...) emptyRow(y, x0, x1) - return true if part of row y from x0 till x1 has no non-zero pixels fill fontgate.fgBitmap.fill = fill (...) fill(fgColor color) - fill entire bitmap by color flipV fontgate.fgBitmap.flipV = flipV (...) flip bitmap by vertical axis getPixel fontgate.fgBitmap.getPixel = getPixel (...) fgColor getPixel(x, y) - get color of pixel (x, y) height fontgate.fgBitmap.height bitmap height in pixels setPixel fontgate.fgBitmap.setPixel = setPixel (...) setPixel(x, y, fgColor color) - set color for pixel (x, y) size fontgate.fgBitmap.size overall bytes count for bitmap storage width fontgate.fgBitmap.width bitmap width in pixels","title":"fgBitmap"},{"location":"fontgate.fgBitmap.html#fgbitmap","text":"","title":"fgBitmap"},{"location":"fontgate.fgBitmap.html#asdict","text":"fontgate.fgBitmap.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgBitmap.html#astuple","text":"fontgate.fgBitmap.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgBitmap.html#bpp","text":"fontgate.fgBitmap.bpp bits per pixel","title":"bpp"},{"location":"fontgate.fgBitmap.html#bytes","text":"fontgate.fgBitmap.bytes bytes per row","title":"bytes"},{"location":"fontgate.fgBitmap.html#clear","text":"fontgate.fgBitmap.clear = clear (...) clear all data","title":"clear"},{"location":"fontgate.fgBitmap.html#clone","text":"fontgate.fgBitmap.clone = clone (...) clone(fgBitmap source) - make clone of source bitmap","title":"clone"},{"location":"fontgate.fgBitmap.html#copy","text":"fontgate.fgBitmap.copy = copy (...) copy(fgBitmap source[, x, y, w, h]) - copy whole source bitmap or part of it with size (w, h) from pos (x, y)","title":"copy"},{"location":"fontgate.fgBitmap.html#copydata","text":"fontgate.fgBitmap.copyData = copyData (...) copy(bytesarray) - assign new bitmap data","title":"copyData"},{"location":"fontgate.fgBitmap.html#create","text":"fontgate.fgBitmap.create = create (...) create( ') - allocate new bitmap data","title":"create"},{"location":"fontgate.fgBitmap.html#data","text":"fontgate.fgBitmap.data bitmap data","title":"data"},{"location":"fontgate.fgBitmap.html#downsample","text":"fontgate.fgBitmap.downsample = downsample (...) downsample(fgBitmap, int oversampling)","title":"downsample"},{"location":"fontgate.fgBitmap.html#empty","text":"fontgate.fgBitmap.empty = empty (...) bool empty() - return true if no data assigned or bitmap size is 0","title":"empty"},{"location":"fontgate.fgBitmap.html#emptyrow","text":"fontgate.fgBitmap.emptyRow = emptyRow (...) emptyRow(y, x0, x1) - return true if part of row y from x0 till x1 has no non-zero pixels","title":"emptyRow"},{"location":"fontgate.fgBitmap.html#fill","text":"fontgate.fgBitmap.fill = fill (...) fill(fgColor color) - fill entire bitmap by color","title":"fill"},{"location":"fontgate.fgBitmap.html#flipv","text":"fontgate.fgBitmap.flipV = flipV (...) flip bitmap by vertical axis","title":"flipV"},{"location":"fontgate.fgBitmap.html#getpixel","text":"fontgate.fgBitmap.getPixel = getPixel (...) fgColor getPixel(x, y) - get color of pixel (x, y)","title":"getPixel"},{"location":"fontgate.fgBitmap.html#height","text":"fontgate.fgBitmap.height bitmap height in pixels","title":"height"},{"location":"fontgate.fgBitmap.html#setpixel","text":"fontgate.fgBitmap.setPixel = setPixel (...) setPixel(x, y, fgColor color) - set color for pixel (x, y)","title":"setPixel"},{"location":"fontgate.fgBitmap.html#size","text":"fontgate.fgBitmap.size overall bytes count for bitmap storage","title":"size"},{"location":"fontgate.fgBitmap.html#width","text":"fontgate.fgBitmap.width bitmap width in pixels","title":"width"},{"location":"fontgate.fgBitmaps.html","text":"fgBitmaps fontgate.fgBitmaps = class fgBitmaps ( object ) list of fgBitmap objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgBitmaps"},{"location":"fontgate.fgBitmaps.html#fgbitmaps","text":"","title":"fgBitmaps"},{"location":"fontgate.fgBitmapsData.html","text":"fgBitmapsData fontgate.fgBitmapsData = class fgBitmapsData ( object ) BitmapsData representation Constructors: fgBitmapsData() - default fgBitmapsData(fgBitmapsData) - copy Methods OK (...) bool OK () - return true if status is gdsOK __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) bad (...) bool bad () - return true if status isn't gdsOK boundingBox (...) fgRect boundingBox (fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box copy (...) fgBitmapsData copy () - create alone copy of data countPictures (...) int countPictures () - return pictures count getFontGateData (...) getFontGateData () always return 0 getType (...) string getType () - return 'dtBitmaps' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present modified (...) bool modified () - always return false setParent (...) setParent (fgGlyph) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform (fgMatrix) - transform data updated (...) updated () - mark data as changed, reset internal caches Descriptors bitmaps (fgBitmaps) - list of fgRendered objects Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T bad fontgate.fgBitmapsData.bad = bad (...) bool bad() - return true if status isn't gdsOK bitmaps fontgate.fgBitmapsData.bitmaps (fgBitmaps) - list of fgRendered objects boundingBox fontgate.fgBitmapsData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box copy fontgate.fgBitmapsData.copy = copy (...) fgBitmapsData copy() - create alone copy of data countPictures fontgate.fgBitmapsData.countPictures = countPictures (...) int countPictures() - return pictures count getFontGateData fontgate.fgBitmapsData.getFontGateData = getFontGateData (...) getFontGateData() always return 0 getType fontgate.fgBitmapsData.getType = getType (...) string getType() - return 'dtBitmaps' hasBody fontgate.fgBitmapsData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present hasColors fontgate.fgBitmapsData.hasColors = hasColors (...) bool hasColors() - return true if colors is present hasHints fontgate.fgBitmapsData.hasHints = hasHints (...) bool hasHints() - return true if hints is present hasPictures fontgate.fgBitmapsData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present modified fontgate.fgBitmapsData.modified = modified (...) bool modified() - always return false OK fontgate.fgBitmapsData.OK = OK (...) bool OK() - return true if status is gdsOK setParent fontgate.fgBitmapsData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph status fontgate.fgBitmapsData.status = status (...) 'gdsOK'/'gdsInvalid' status() transform fontgate.fgBitmapsData.transform = transform (...) transform(fgMatrix) - transform data updated fontgate.fgBitmapsData.updated = updated (...) updated() - mark data as changed, reset internal caches","title":"fgBitmapsData"},{"location":"fontgate.fgBitmapsData.html#fgbitmapsdata","text":"","title":"fgBitmapsData"},{"location":"fontgate.fgBitmapsData.html#bad","text":"fontgate.fgBitmapsData.bad = bad (...) bool bad() - return true if status isn't gdsOK","title":"bad"},{"location":"fontgate.fgBitmapsData.html#bitmaps","text":"fontgate.fgBitmapsData.bitmaps (fgBitmaps) - list of fgRendered objects","title":"bitmaps"},{"location":"fontgate.fgBitmapsData.html#boundingbox","text":"fontgate.fgBitmapsData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box","title":"boundingBox"},{"location":"fontgate.fgBitmapsData.html#copy","text":"fontgate.fgBitmapsData.copy = copy (...) fgBitmapsData copy() - create alone copy of data","title":"copy"},{"location":"fontgate.fgBitmapsData.html#countpictures","text":"fontgate.fgBitmapsData.countPictures = countPictures (...) int countPictures() - return pictures count","title":"countPictures"},{"location":"fontgate.fgBitmapsData.html#getfontgatedata","text":"fontgate.fgBitmapsData.getFontGateData = getFontGateData (...) getFontGateData() always return 0","title":"getFontGateData"},{"location":"fontgate.fgBitmapsData.html#gettype","text":"fontgate.fgBitmapsData.getType = getType (...) string getType() - return 'dtBitmaps'","title":"getType"},{"location":"fontgate.fgBitmapsData.html#hasbody","text":"fontgate.fgBitmapsData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present","title":"hasBody"},{"location":"fontgate.fgBitmapsData.html#hascolors","text":"fontgate.fgBitmapsData.hasColors = hasColors (...) bool hasColors() - return true if colors is present","title":"hasColors"},{"location":"fontgate.fgBitmapsData.html#hashints","text":"fontgate.fgBitmapsData.hasHints = hasHints (...) bool hasHints() - return true if hints is present","title":"hasHints"},{"location":"fontgate.fgBitmapsData.html#haspictures","text":"fontgate.fgBitmapsData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present","title":"hasPictures"},{"location":"fontgate.fgBitmapsData.html#modified","text":"fontgate.fgBitmapsData.modified = modified (...) bool modified() - always return false","title":"modified"},{"location":"fontgate.fgBitmapsData.html#ok","text":"fontgate.fgBitmapsData.OK = OK (...) bool OK() - return true if status is gdsOK","title":"OK"},{"location":"fontgate.fgBitmapsData.html#setparent","text":"fontgate.fgBitmapsData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph","title":"setParent"},{"location":"fontgate.fgBitmapsData.html#status","text":"fontgate.fgBitmapsData.status = status (...) 'gdsOK'/'gdsInvalid' status()","title":"status"},{"location":"fontgate.fgBitmapsData.html#transform","text":"fontgate.fgBitmapsData.transform = transform (...) transform(fgMatrix) - transform data","title":"transform"},{"location":"fontgate.fgBitmapsData.html#updated","text":"fontgate.fgBitmapsData.updated = updated (...) updated() - mark data as changed, reset internal caches","title":"updated"},{"location":"fontgate.fgBrush.html","text":"fgBrush fontgate.fgBrush = class fgBrush ( object ) Brush representation Constructors: fgBrush() - default fgBrush(fgBrush) - copy fgBrush(fgColor) - solid brush with selected color and default size (1, 0) fgBrush(fgColor, fgPoint) - solid brush with selected color and size Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (n) < ==> x*n __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple isBlack (...) bool isBlack () - return true if brush is black isTransparent (...) bool isTransparent () - return true if brush is transparent Static methods black (...) fgBrush black () - get black solid brush transparent (...) fgBrush transparent () - get transparent solid brush Descriptors kind ('Empty'/'Solid'/'Gradient') brush type size (fgPoint) brush size by x and y axis solid (fgColor) brush color Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgBrush.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgBrush.asTuple = asTuple (...) represent object as tuple black fontgate.fgBrush.black = black (...) fgBrush black() - get black solid brush isBlack fontgate.fgBrush.isBlack = isBlack (...) bool isBlack() - return true if brush is black isTransparent fontgate.fgBrush.isTransparent = isTransparent (...) bool isTransparent() - return true if brush is transparent kind fontgate.fgBrush.kind ('Empty'/'Solid'/'Gradient') brush type size fontgate.fgBrush.size (fgPoint) brush size by x and y axis solid fontgate.fgBrush.solid (fgColor) brush color transparent fontgate.fgBrush.transparent = transparent (...) fgBrush transparent() - get transparent solid brush","title":"fgBrush"},{"location":"fontgate.fgBrush.html#fgbrush","text":"","title":"fgBrush"},{"location":"fontgate.fgBrush.html#asdict","text":"fontgate.fgBrush.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgBrush.html#astuple","text":"fontgate.fgBrush.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgBrush.html#black","text":"fontgate.fgBrush.black = black (...) fgBrush black() - get black solid brush","title":"black"},{"location":"fontgate.fgBrush.html#isblack","text":"fontgate.fgBrush.isBlack = isBlack (...) bool isBlack() - return true if brush is black","title":"isBlack"},{"location":"fontgate.fgBrush.html#istransparent","text":"fontgate.fgBrush.isTransparent = isTransparent (...) bool isTransparent() - return true if brush is transparent","title":"isTransparent"},{"location":"fontgate.fgBrush.html#kind","text":"fontgate.fgBrush.kind ('Empty'/'Solid'/'Gradient') brush type","title":"kind"},{"location":"fontgate.fgBrush.html#size","text":"fontgate.fgBrush.size (fgPoint) brush size by x and y axis","title":"size"},{"location":"fontgate.fgBrush.html#solid","text":"fontgate.fgBrush.solid (fgColor) brush color","title":"solid"},{"location":"fontgate.fgBrush.html#transparent","text":"fontgate.fgBrush.transparent = transparent (...) fgBrush transparent() - get transparent solid brush","title":"transparent"},{"location":"fontgate.fgCMaps.html","text":"fgCMaps fontgate.fgCMaps = class fgCMaps ( object ) list of fgCmapRecord objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgCMaps"},{"location":"fontgate.fgCMaps.html#fgcmaps","text":"","title":"fgCMaps"},{"location":"fontgate.fgCaret.html","text":"fgCaret fontgate.fgCaret = class fgCaret ( object ) Caret representation Constructors: fgCaret() - default fgCaret(fgCaret) - copy fgCaret((fgOtValue/float/int, 'name')) - by coordinate and name Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors name (string) name v (fgOtValue) coordinate Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T name fontgate.fgCaret.name (string) name v fontgate.fgCaret.v (fgOtValue) coordinate","title":"fgCaret"},{"location":"fontgate.fgCaret.html#fgcaret","text":"","title":"fgCaret"},{"location":"fontgate.fgCaret.html#name","text":"fontgate.fgCaret.name (string) name","title":"name"},{"location":"fontgate.fgCaret.html#v","text":"fontgate.fgCaret.v (fgOtValue) coordinate","title":"v"},{"location":"fontgate.fgCarets.html","text":"fgCarets fontgate.fgCarets = class fgCarets ( object ) list of fgCaret objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgCarets.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgCarets.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgCarets.clean = clean (...) clean() - delete all items del fontgate.fgCarets.del = del (...) del(index) - delete item by index insert fontgate.fgCarets.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgCarets"},{"location":"fontgate.fgCarets.html#fgcarets","text":"","title":"fgCarets"},{"location":"fontgate.fgCarets.html#append","text":"fontgate.fgCarets.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgCarets.html#aslist","text":"fontgate.fgCarets.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgCarets.html#clean","text":"fontgate.fgCarets.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgCarets.html#del","text":"fontgate.fgCarets.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgCarets.html#insert","text":"fontgate.fgCarets.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgCmapRecord.html","text":"fgCmapRecord fontgate.fgCmapRecord = class fgCmapRecord ( object ) fgCmapRecord representation Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors eid format lid nid pagename pid type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgCmapRecord.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgCmapRecord.asTuple = asTuple (...) represent object as tuple","title":"fgCmapRecord"},{"location":"fontgate.fgCmapRecord.html#fgcmaprecord","text":"","title":"fgCmapRecord"},{"location":"fontgate.fgCmapRecord.html#asdict","text":"fontgate.fgCmapRecord.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgCmapRecord.html#astuple","text":"fontgate.fgCmapRecord.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgCoding.html","text":"fgCoding fontgate.fgCoding = class fgCoding ( object ) Coding data representation Constructors: fgCoding() - default fgCoding(fgCoding) - copy fgCoding( bool [unicodeRange], bool [codepageRange], fgCMaps cmaps, fgEncoding encoding, fgEncoding importedEncoding, 'encDefault'/'encStandard'/'encCustom') Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors cmaps (fgCMaps) codepageRange (bool list) encoding (fgEncoding) encodingType ('encDefault'/'encStandard'/'encCustom') importedEncoding (fgEncoding) unicodeRange (bool list) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T cmaps fontgate.fgCoding.cmaps (fgCMaps) codepageRange fontgate.fgCoding.codepageRange (bool list) encoding fontgate.fgCoding.encoding (fgEncoding) encodingType fontgate.fgCoding.encodingType ('encDefault'/'encStandard'/'encCustom') importedEncoding fontgate.fgCoding.importedEncoding (fgEncoding) unicodeRange fontgate.fgCoding.unicodeRange (bool list)","title":"fgCoding"},{"location":"fontgate.fgCoding.html#fgcoding","text":"","title":"fgCoding"},{"location":"fontgate.fgCoding.html#cmaps","text":"fontgate.fgCoding.cmaps (fgCMaps)","title":"cmaps"},{"location":"fontgate.fgCoding.html#codepagerange","text":"fontgate.fgCoding.codepageRange (bool list)","title":"codepageRange"},{"location":"fontgate.fgCoding.html#encoding","text":"fontgate.fgCoding.encoding (fgEncoding)","title":"encoding"},{"location":"fontgate.fgCoding.html#encodingtype","text":"fontgate.fgCoding.encodingType ('encDefault'/'encStandard'/'encCustom')","title":"encodingType"},{"location":"fontgate.fgCoding.html#importedencoding","text":"fontgate.fgCoding.importedEncoding (fgEncoding)","title":"importedEncoding"},{"location":"fontgate.fgCoding.html#unicoderange","text":"fontgate.fgCoding.unicodeRange (bool list)","title":"unicodeRange"},{"location":"fontgate.fgColor.html","text":"fgColor fontgate.fgColor = class fgColor ( object ) Color representation Constructors: fgColor() - default fgColor(fgColor) - copy fgColor(float hueValue) - by hue value fgColor(r, g, b) - by r, g, b, float values from 0 to 1.0 fgColor(r, g, b, a) - by r, g, b, a float values from 0 to 1.0 Methods A (...) int A () - get alpha value as int (0..255) B (...) int B () - get blue value as int (0..255) G (...) int G () - get green value as int (0..255) R (...) int B () - get blue value as int (0..255) __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (n) < ==> x*n __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple getCMYK (...) (c, m, y, k, a) getCMYK ([varK = 0.3]) - get color as CMYK+A components gray (...) float gray () - get color as grayscale level hue (...) float hue () - get hue value lab (...) (l, a, b) lab () - get color as lab float values lightness (...) float lightness () - get lightness value saturation (...) float saturation () - get saturation value set (...) set ((r, g, b[, a])) - set color by tuple with rgb or rgba float values setCMYK (...) setCMYK (c, m, y, k[, _a = 1.0]) = set color by CMYK[A] float values setGray (...) segGray(float v) - set rgb components to v setHue (...) setHue (h[, s=1.0[, l = 0.5]]) - set by hsl float values xyz (...) (x, y, z) xyz () - get color as xyz float values Static methods black (...) fgColor black () - get black color fromInt (...) fgColor fromInt (r, g, b[, a=255]) - get color by int rgb(a) values (0..255) fromLab (...) fgColor fromLab (l, a, b) - get color by float lab values transparent (...) fgColor transparent () - get transparent color Descriptors a (float 0..1.0) - alpha channel b (float 0..1.0) - blue channel g (float 0..1.0) - green channel r (float 0..1.0) - red channel Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T A fontgate.fgColor.A = A (...) int A() - get alpha value as int (0..255) a fontgate.fgColor.a (float 0..1.0) - alpha channel asDict fontgate.fgColor.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgColor.asTuple = asTuple (...) represent object as tuple B fontgate.fgColor.B = B (...) int B() - get blue value as int (0..255) b fontgate.fgColor.b (float 0..1.0) - blue channel black fontgate.fgColor.black = black (...) fgColor black() - get black color fromInt fontgate.fgColor.fromInt = fromInt (...) fgColor fromInt(r, g, b[, a=255]) - get color by int rgb(a) values (0..255) fromLab fontgate.fgColor.fromLab = fromLab (...) fgColor fromLab(l, a, b) - get color by float lab values G fontgate.fgColor.G = G (...) int G() - get green value as int (0..255) g fontgate.fgColor.g (float 0..1.0) - green channel getCMYK fontgate.fgColor.getCMYK = getCMYK (...) (c, m, y, k, a) getCMYK([varK = 0.3]) - get color as CMYK+A components gray fontgate.fgColor.gray = gray (...) float gray() - get color as grayscale level hue fontgate.fgColor.hue = hue (...) float hue() - get hue value lab fontgate.fgColor.lab = lab (...) (l, a, b) lab() - get color as lab float values lightness fontgate.fgColor.lightness = lightness (...) float lightness() - get lightness value R fontgate.fgColor.R = R (...) int B() - get blue value as int (0..255) r fontgate.fgColor.r (float 0..1.0) - red channel saturation fontgate.fgColor.saturation = saturation (...) float saturation() - get saturation value set fontgate.fgColor.set = set (...) set((r, g, b[, a])) - set color by tuple with rgb or rgba float values setCMYK fontgate.fgColor.setCMYK = setCMYK (...) setCMYK(c, m, y, k[, _a = 1.0]) = set color by CMYK[A] float values setGray fontgate.fgColor.setGray = setGray (...) segGray(float v) - set rgb components to v setHue fontgate.fgColor.setHue = setHue (...) setHue(h[, s=1.0[, l = 0.5]]) - set by hsl float values transparent fontgate.fgColor.transparent = transparent (...) fgColor transparent() - get transparent color xyz fontgate.fgColor.xyz = xyz (...) (x, y, z) xyz() - get color as xyz float values","title":"fgColor"},{"location":"fontgate.fgColor.html#fgcolor","text":"","title":"fgColor"},{"location":"fontgate.fgColor.html#a","text":"fontgate.fgColor.A = A (...) int A() - get alpha value as int (0..255)","title":"A"},{"location":"fontgate.fgColor.html#a_1","text":"fontgate.fgColor.a (float 0..1.0) - alpha channel","title":"a"},{"location":"fontgate.fgColor.html#asdict","text":"fontgate.fgColor.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgColor.html#astuple","text":"fontgate.fgColor.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgColor.html#b","text":"fontgate.fgColor.B = B (...) int B() - get blue value as int (0..255)","title":"B"},{"location":"fontgate.fgColor.html#b_1","text":"fontgate.fgColor.b (float 0..1.0) - blue channel","title":"b"},{"location":"fontgate.fgColor.html#black","text":"fontgate.fgColor.black = black (...) fgColor black() - get black color","title":"black"},{"location":"fontgate.fgColor.html#fromint","text":"fontgate.fgColor.fromInt = fromInt (...) fgColor fromInt(r, g, b[, a=255]) - get color by int rgb(a) values (0..255)","title":"fromInt"},{"location":"fontgate.fgColor.html#fromlab","text":"fontgate.fgColor.fromLab = fromLab (...) fgColor fromLab(l, a, b) - get color by float lab values","title":"fromLab"},{"location":"fontgate.fgColor.html#g","text":"fontgate.fgColor.G = G (...) int G() - get green value as int (0..255)","title":"G"},{"location":"fontgate.fgColor.html#g_1","text":"fontgate.fgColor.g (float 0..1.0) - green channel","title":"g"},{"location":"fontgate.fgColor.html#getcmyk","text":"fontgate.fgColor.getCMYK = getCMYK (...) (c, m, y, k, a) getCMYK([varK = 0.3]) - get color as CMYK+A components","title":"getCMYK"},{"location":"fontgate.fgColor.html#gray","text":"fontgate.fgColor.gray = gray (...) float gray() - get color as grayscale level","title":"gray"},{"location":"fontgate.fgColor.html#hue","text":"fontgate.fgColor.hue = hue (...) float hue() - get hue value","title":"hue"},{"location":"fontgate.fgColor.html#lab","text":"fontgate.fgColor.lab = lab (...) (l, a, b) lab() - get color as lab float values","title":"lab"},{"location":"fontgate.fgColor.html#lightness","text":"fontgate.fgColor.lightness = lightness (...) float lightness() - get lightness value","title":"lightness"},{"location":"fontgate.fgColor.html#r","text":"fontgate.fgColor.R = R (...) int B() - get blue value as int (0..255)","title":"R"},{"location":"fontgate.fgColor.html#r_1","text":"fontgate.fgColor.r (float 0..1.0) - red channel","title":"r"},{"location":"fontgate.fgColor.html#saturation","text":"fontgate.fgColor.saturation = saturation (...) float saturation() - get saturation value","title":"saturation"},{"location":"fontgate.fgColor.html#set","text":"fontgate.fgColor.set = set (...) set((r, g, b[, a])) - set color by tuple with rgb or rgba float values","title":"set"},{"location":"fontgate.fgColor.html#setcmyk","text":"fontgate.fgColor.setCMYK = setCMYK (...) setCMYK(c, m, y, k[, _a = 1.0]) = set color by CMYK[A] float values","title":"setCMYK"},{"location":"fontgate.fgColor.html#setgray","text":"fontgate.fgColor.setGray = setGray (...) segGray(float v) - set rgb components to v","title":"setGray"},{"location":"fontgate.fgColor.html#sethue","text":"fontgate.fgColor.setHue = setHue (...) setHue(h[, s=1.0[, l = 0.5]]) - set by hsl float values","title":"setHue"},{"location":"fontgate.fgColor.html#transparent","text":"fontgate.fgColor.transparent = transparent (...) fgColor transparent() - get transparent color","title":"transparent"},{"location":"fontgate.fgColor.html#xyz","text":"fontgate.fgColor.xyz = xyz (...) (x, y, z) xyz() - get color as xyz float values","title":"xyz"},{"location":"fontgate.fgComponent.html","text":"fgComponent fontgate.fgComponent = class fgComponent ( object ) Component representation Constructors: fgComponent() - default fgComponent(fgComponent) - copy fgComponent('name', fgMatrix) - by 'name' and transformation matrix fgMatrix Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) draw (...) draw (pen object) - draw the object with a segment pen drawPoints (...) drawPoints (pen object) - draw the object with a point pen move (...) move (dx, dy) - move by float dx, dy value Descriptors baseGlyph (string) name of base glyph box (fgRect) - bounding box hasFullMatrix index (int) component index in glyph's components list matrix (fgMatrix) - component transform matrix offset scale Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T baseGlyph fontgate.fgComponent.baseGlyph (string) name of base glyph box fontgate.fgComponent.box (fgRect) - bounding box draw fontgate.fgComponent.draw = draw (...) draw(pen object) - draw the object with a segment pen drawPoints fontgate.fgComponent.drawPoints = drawPoints (...) drawPoints(pen object) - draw the object with a point pen index fontgate.fgComponent.index (int) component index in glyph's components list matrix fontgate.fgComponent.matrix (fgMatrix) - component transform matrix move fontgate.fgComponent.move = move (...) move(dx, dy) - move by float dx, dy value","title":"fgComponent"},{"location":"fontgate.fgComponent.html#fgcomponent","text":"","title":"fgComponent"},{"location":"fontgate.fgComponent.html#baseglyph","text":"fontgate.fgComponent.baseGlyph (string) name of base glyph","title":"baseGlyph"},{"location":"fontgate.fgComponent.html#box","text":"fontgate.fgComponent.box (fgRect) - bounding box","title":"box"},{"location":"fontgate.fgComponent.html#draw","text":"fontgate.fgComponent.draw = draw (...) draw(pen object) - draw the object with a segment pen","title":"draw"},{"location":"fontgate.fgComponent.html#drawpoints","text":"fontgate.fgComponent.drawPoints = drawPoints (...) drawPoints(pen object) - draw the object with a point pen","title":"drawPoints"},{"location":"fontgate.fgComponent.html#index","text":"fontgate.fgComponent.index (int) component index in glyph's components list","title":"index"},{"location":"fontgate.fgComponent.html#matrix","text":"fontgate.fgComponent.matrix (fgMatrix) - component transform matrix","title":"matrix"},{"location":"fontgate.fgComponent.html#move","text":"fontgate.fgComponent.move = move (...) move(dx, dy) - move by float dx, dy value","title":"move"},{"location":"fontgate.fgComponents.html","text":"fgComponents fontgate.fgComponents = class fgComponents ( object ) list of fgComponent objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) decompose (...) del (...) getAsList (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgComponents"},{"location":"fontgate.fgComponents.html#fgcomponents","text":"","title":"fgComponents"},{"location":"fontgate.fgContour.html","text":"fgContour fontgate.fgContour = class fgContour ( object ) Contour representation Constructors: fgContour() - default fgContour(fgContour) - copy Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) appendNode (...) appendNode (fgNode) - add node to the end of the contour area (...) float area () autoClose (...) bool autoClose () - bool autoClose () - close contour, return true if changes was made autoInterpolated (...) bool autoInterpolated () - interpolate contour nodes, return true if changes was made autoSmooth (...) bool autoSmooth () - smooth contour nodes, return true if changes was made boundingBox (...) fgRect boundingBox (fgMatrix[, bool prepareExport = false]) clear (...) clear () - clear all nodes contains (...) bool/Nothing contains (fgPoint[, bool winding = false]) containsCurvePoint (...) bool containsCurvePoint () containsOffPoint (...) bool containsOffPoint () countNodes (...) int countNodes () - get count of nodes deleteNode (...) bool deleteNode (int nodeIndex) - delete node draw (...) draw (segmentPen) - draw the object with a segment pen drawPoints (...) drawPoints (pointPen) - draw the object with a point pen empty (...) bool empty () - return True if contour haven't any node filterOnPoints (...) filterOnPoints () getNode (...) fgNode getNode (int nodeIndex) - get node by index getNodes (...) [ fgNode ] getNodes () - get list of fgNode objects getUFONodesList (...) [ ((x, y), 'nodetype', bool smooth, 'name') ] getUFONodesList () -get list of contour nodes as UFO-style tuples insertNode (...) insertNode (fgNode, int insertTo) - insert node into position insertTo isCompatible (...) bool isCompatible (fgContour) length (...) int length () - get count of nodes midPoint (...) fgPoint midPoint () reverse (...) reverse () - reverse order of contour nodes toCurves (...) toCurves ([tolerance = 5.]) toShortSplines (...) toShortSplines ([tolerance = 5.[, bool short_splines = true]]) transform (...) fgContour transform (fgMatrix) Descriptors name (string) name of contour nodes ([fgNode]) contour nodes open (bool) open flag Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T appendNode fontgate.fgContour.appendNode = appendNode (...) appendNode(fgNode) - add node to the end of the contour area fontgate.fgContour.area = area (...) float area() autoClose fontgate.fgContour.autoClose = autoClose (...) bool autoClose() - bool autoClose() - close contour, return true if changes was made autoInterpolated fontgate.fgContour.autoInterpolated = autoInterpolated (...) bool autoInterpolated() - interpolate contour nodes, return true if changes was made autoSmooth fontgate.fgContour.autoSmooth = autoSmooth (...) bool autoSmooth() - smooth contour nodes, return true if changes was made boundingBox fontgate.fgContour.boundingBox = boundingBox (...) fgRect boundingBox(fgMatrix[, bool prepareExport = false]) clear fontgate.fgContour.clear = clear (...) clear() - clear all nodes contains fontgate.fgContour.contains = contains (...) bool/Nothing contains(fgPoint[, bool winding = false]) containsCurvePoint fontgate.fgContour.containsCurvePoint = containsCurvePoint (...) bool containsCurvePoint() containsOffPoint fontgate.fgContour.containsOffPoint = containsOffPoint (...) bool containsOffPoint() countNodes fontgate.fgContour.countNodes = countNodes (...) int countNodes() - get count of nodes deleteNode fontgate.fgContour.deleteNode = deleteNode (...) bool deleteNode(int nodeIndex) - delete node draw fontgate.fgContour.draw = draw (...) draw(segmentPen) - draw the object with a segment pen drawPoints fontgate.fgContour.drawPoints = drawPoints (...) drawPoints(pointPen) - draw the object with a point pen empty fontgate.fgContour.empty = empty (...) bool empty() - return True if contour haven't any node filterOnPoints fontgate.fgContour.filterOnPoints = filterOnPoints (...) filterOnPoints() getNode fontgate.fgContour.getNode = getNode (...) fgNode getNode(int nodeIndex) - get node by index getNodes fontgate.fgContour.getNodes = getNodes (...) [ fgNode ] getNodes() - get list of fgNode objects getUFONodesList fontgate.fgContour.getUFONodesList = getUFONodesList (...) [ ((x, y), 'nodetype', bool smooth, 'name') ] getUFONodesList() -get list of contour nodes as UFO-style tuples insertNode fontgate.fgContour.insertNode = insertNode (...) insertNode(fgNode, int insertTo) - insert node into position insertTo isCompatible fontgate.fgContour.isCompatible = isCompatible (...) bool isCompatible(fgContour) length fontgate.fgContour.length = length (...) int length() - get count of nodes midPoint fontgate.fgContour.midPoint = midPoint (...) fgPoint midPoint() name fontgate.fgContour.name (string) name of contour nodes fontgate.fgContour.nodes ([fgNode]) contour nodes open fontgate.fgContour.open (bool) open flag reverse fontgate.fgContour.reverse = reverse (...) reverse() - reverse order of contour nodes toCurves fontgate.fgContour.toCurves = toCurves (...) toCurves([tolerance = 5.]) toShortSplines fontgate.fgContour.toShortSplines = toShortSplines (...) toShortSplines([tolerance = 5.[, bool short_splines = true]]) transform fontgate.fgContour.transform = transform (...) fgContour transform(fgMatrix)","title":"fgContour"},{"location":"fontgate.fgContour.html#fgcontour","text":"","title":"fgContour"},{"location":"fontgate.fgContour.html#appendnode","text":"fontgate.fgContour.appendNode = appendNode (...) appendNode(fgNode) - add node to the end of the contour","title":"appendNode"},{"location":"fontgate.fgContour.html#area","text":"fontgate.fgContour.area = area (...) float area()","title":"area"},{"location":"fontgate.fgContour.html#autoclose","text":"fontgate.fgContour.autoClose = autoClose (...) bool autoClose() - bool autoClose() - close contour, return true if changes was made","title":"autoClose"},{"location":"fontgate.fgContour.html#autointerpolated","text":"fontgate.fgContour.autoInterpolated = autoInterpolated (...) bool autoInterpolated() - interpolate contour nodes, return true if changes was made","title":"autoInterpolated"},{"location":"fontgate.fgContour.html#autosmooth","text":"fontgate.fgContour.autoSmooth = autoSmooth (...) bool autoSmooth() - smooth contour nodes, return true if changes was made","title":"autoSmooth"},{"location":"fontgate.fgContour.html#boundingbox","text":"fontgate.fgContour.boundingBox = boundingBox (...) fgRect boundingBox(fgMatrix[, bool prepareExport = false])","title":"boundingBox"},{"location":"fontgate.fgContour.html#clear","text":"fontgate.fgContour.clear = clear (...) clear() - clear all nodes","title":"clear"},{"location":"fontgate.fgContour.html#contains","text":"fontgate.fgContour.contains = contains (...) bool/Nothing contains(fgPoint[, bool winding = false])","title":"contains"},{"location":"fontgate.fgContour.html#containscurvepoint","text":"fontgate.fgContour.containsCurvePoint = containsCurvePoint (...) bool containsCurvePoint()","title":"containsCurvePoint"},{"location":"fontgate.fgContour.html#containsoffpoint","text":"fontgate.fgContour.containsOffPoint = containsOffPoint (...) bool containsOffPoint()","title":"containsOffPoint"},{"location":"fontgate.fgContour.html#countnodes","text":"fontgate.fgContour.countNodes = countNodes (...) int countNodes() - get count of nodes","title":"countNodes"},{"location":"fontgate.fgContour.html#deletenode","text":"fontgate.fgContour.deleteNode = deleteNode (...) bool deleteNode(int nodeIndex) - delete node","title":"deleteNode"},{"location":"fontgate.fgContour.html#draw","text":"fontgate.fgContour.draw = draw (...) draw(segmentPen) - draw the object with a segment pen","title":"draw"},{"location":"fontgate.fgContour.html#drawpoints","text":"fontgate.fgContour.drawPoints = drawPoints (...) drawPoints(pointPen) - draw the object with a point pen","title":"drawPoints"},{"location":"fontgate.fgContour.html#empty","text":"fontgate.fgContour.empty = empty (...) bool empty() - return True if contour haven't any node","title":"empty"},{"location":"fontgate.fgContour.html#filteronpoints","text":"fontgate.fgContour.filterOnPoints = filterOnPoints (...) filterOnPoints()","title":"filterOnPoints"},{"location":"fontgate.fgContour.html#getnode","text":"fontgate.fgContour.getNode = getNode (...) fgNode getNode(int nodeIndex) - get node by index","title":"getNode"},{"location":"fontgate.fgContour.html#getnodes","text":"fontgate.fgContour.getNodes = getNodes (...) [ fgNode ] getNodes() - get list of fgNode objects","title":"getNodes"},{"location":"fontgate.fgContour.html#getufonodeslist","text":"fontgate.fgContour.getUFONodesList = getUFONodesList (...) [ ((x, y), 'nodetype', bool smooth, 'name') ] getUFONodesList() -get list of contour nodes as UFO-style tuples","title":"getUFONodesList"},{"location":"fontgate.fgContour.html#insertnode","text":"fontgate.fgContour.insertNode = insertNode (...) insertNode(fgNode, int insertTo) - insert node into position insertTo","title":"insertNode"},{"location":"fontgate.fgContour.html#iscompatible","text":"fontgate.fgContour.isCompatible = isCompatible (...) bool isCompatible(fgContour)","title":"isCompatible"},{"location":"fontgate.fgContour.html#length","text":"fontgate.fgContour.length = length (...) int length() - get count of nodes","title":"length"},{"location":"fontgate.fgContour.html#midpoint","text":"fontgate.fgContour.midPoint = midPoint (...) fgPoint midPoint()","title":"midPoint"},{"location":"fontgate.fgContour.html#name","text":"fontgate.fgContour.name (string) name of contour","title":"name"},{"location":"fontgate.fgContour.html#nodes","text":"fontgate.fgContour.nodes ([fgNode]) contour nodes","title":"nodes"},{"location":"fontgate.fgContour.html#open","text":"fontgate.fgContour.open (bool) open flag","title":"open"},{"location":"fontgate.fgContour.html#reverse","text":"fontgate.fgContour.reverse = reverse (...) reverse() - reverse order of contour nodes","title":"reverse"},{"location":"fontgate.fgContour.html#tocurves","text":"fontgate.fgContour.toCurves = toCurves (...) toCurves([tolerance = 5.])","title":"toCurves"},{"location":"fontgate.fgContour.html#toshortsplines","text":"fontgate.fgContour.toShortSplines = toShortSplines (...) toShortSplines([tolerance = 5.[, bool short_splines = true]])","title":"toShortSplines"},{"location":"fontgate.fgContour.html#transform","text":"fontgate.fgContour.transform = transform (...) fgContour transform(fgMatrix)","title":"transform"},{"location":"fontgate.fgContours.html","text":"fgContours fontgate.fgContours = class fgContours ( object ) list of fgContour objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgContours"},{"location":"fontgate.fgContours.html#fgcontours","text":"","title":"fgContours"},{"location":"fontgate.fgCurve.html","text":"fgCurve fontgate.fgCurve = class fgCurve ( object ) Curve representation Constructors: fgCurve() - default fgCurve(fgCurve) - copy fgCurve( [4 x fgPoint] ) fgCurve( (q0, q1, q2, q3) ) fgCurve( fgPoint, fgPoint ) fgCurve( fgPoint, fgPoint, fgPoint ) fgCurve( fgPoint, fgPoint, fgPoint, fgPoint ) fgCurve( fgCurve, float t0, float t1 ) Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple bbox (...) fgRect bbox () check (...) bool check (float flatness, float length, float w0, float w1) coefficients (...) (fgPoint a, fgPoint b, fgPoint c, fgPoint d) coefficients () curvature (...) float curvature (float t) d1 (...) fgPoint d1 (float t) d2 (...) fgPoint d2 (float t) direction (...) fgPoint direction (float time) eseg (...) fgCurve eseg (float u) flat (...) bool flat (double parameter = almost_zero) getExtrema (...) int getExtrema (bool h, [float] ) getInflection (...) int getInflection ( [float] ) hasExtrema (...) bool hasExtrema () isConvex (...) bool isConvex ( [float area] ) len (...) float len (int quality) maximumDeviation (...) float maximumDeviation () merge (...) bool merge (fgCurve c) point (...) fgPoint point (float time) quickLen (...) float quickLen () render (...) int render ([fgPoint/fgPointU], int quality) seg (...) fgCurve seg (float stime, float etime) sseg (...) fgCurve sseg (float u) time (...) float time (fgPoint[, int quality[, [float min_dist] ]]) Descriptors q0 (fgPoint) q1 (fgPoint) q2 (fgPoint) q3 (fgPoint) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgCurve.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgCurve.asTuple = asTuple (...) represent object as tuple bbox fontgate.fgCurve.bbox = bbox (...) fgRect bbox() check fontgate.fgCurve.check = check (...) bool check(float flatness, float length, float w0, float w1) coefficients fontgate.fgCurve.coefficients = coefficients (...) (fgPoint a, fgPoint b, fgPoint c, fgPoint d) coefficients() curvature fontgate.fgCurve.curvature = curvature (...) float curvature(float t) d1 fontgate.fgCurve.d1 = d1 (...) fgPoint d1(float t) d2 fontgate.fgCurve.d2 = d2 (...) fgPoint d2(float t) direction fontgate.fgCurve.direction = direction (...) fgPoint direction(float time) eseg fontgate.fgCurve.eseg = eseg (...) fgCurve eseg(float u) flat fontgate.fgCurve.flat = flat (...) bool flat(double parameter = almost_zero) getExtrema fontgate.fgCurve.getExtrema = getExtrema (...) int getExtrema(bool h, [float] ) getInflection fontgate.fgCurve.getInflection = getInflection (...) int getInflection( [float] ) hasExtrema fontgate.fgCurve.hasExtrema = hasExtrema (...) bool hasExtrema() isConvex fontgate.fgCurve.isConvex = isConvex (...) bool isConvex( [float area] ) len fontgate.fgCurve.len = len (...) float len(int quality) maximumDeviation fontgate.fgCurve.maximumDeviation = maximumDeviation (...) float maximumDeviation() merge fontgate.fgCurve.merge = merge (...) bool merge(fgCurve c) point fontgate.fgCurve.point = point (...) fgPoint point(float time) q0 fontgate.fgCurve.q0 (fgPoint) q1 fontgate.fgCurve.q1 (fgPoint) q2 fontgate.fgCurve.q2 (fgPoint) q3 fontgate.fgCurve.q3 (fgPoint) quickLen fontgate.fgCurve.quickLen = quickLen (...) float quickLen() render fontgate.fgCurve.render = render (...) int render([fgPoint/fgPointU], int quality) seg fontgate.fgCurve.seg = seg (...) fgCurve seg(float stime, float etime) sseg fontgate.fgCurve.sseg = sseg (...) fgCurve sseg(float u) time fontgate.fgCurve.time = time (...) float time(fgPoint[, int quality[, [float min_dist] ]])","title":"fgCurve"},{"location":"fontgate.fgCurve.html#fgcurve","text":"","title":"fgCurve"},{"location":"fontgate.fgCurve.html#asdict","text":"fontgate.fgCurve.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgCurve.html#astuple","text":"fontgate.fgCurve.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgCurve.html#bbox","text":"fontgate.fgCurve.bbox = bbox (...) fgRect bbox()","title":"bbox"},{"location":"fontgate.fgCurve.html#check","text":"fontgate.fgCurve.check = check (...) bool check(float flatness, float length, float w0, float w1)","title":"check"},{"location":"fontgate.fgCurve.html#coefficients","text":"fontgate.fgCurve.coefficients = coefficients (...) (fgPoint a, fgPoint b, fgPoint c, fgPoint d) coefficients()","title":"coefficients"},{"location":"fontgate.fgCurve.html#curvature","text":"fontgate.fgCurve.curvature = curvature (...) float curvature(float t)","title":"curvature"},{"location":"fontgate.fgCurve.html#d1","text":"fontgate.fgCurve.d1 = d1 (...) fgPoint d1(float t)","title":"d1"},{"location":"fontgate.fgCurve.html#d2","text":"fontgate.fgCurve.d2 = d2 (...) fgPoint d2(float t)","title":"d2"},{"location":"fontgate.fgCurve.html#direction","text":"fontgate.fgCurve.direction = direction (...) fgPoint direction(float time)","title":"direction"},{"location":"fontgate.fgCurve.html#eseg","text":"fontgate.fgCurve.eseg = eseg (...) fgCurve eseg(float u)","title":"eseg"},{"location":"fontgate.fgCurve.html#flat","text":"fontgate.fgCurve.flat = flat (...) bool flat(double parameter = almost_zero)","title":"flat"},{"location":"fontgate.fgCurve.html#getextrema","text":"fontgate.fgCurve.getExtrema = getExtrema (...) int getExtrema(bool h, [float] )","title":"getExtrema"},{"location":"fontgate.fgCurve.html#getinflection","text":"fontgate.fgCurve.getInflection = getInflection (...) int getInflection( [float] )","title":"getInflection"},{"location":"fontgate.fgCurve.html#hasextrema","text":"fontgate.fgCurve.hasExtrema = hasExtrema (...) bool hasExtrema()","title":"hasExtrema"},{"location":"fontgate.fgCurve.html#isconvex","text":"fontgate.fgCurve.isConvex = isConvex (...) bool isConvex( [float area] )","title":"isConvex"},{"location":"fontgate.fgCurve.html#len","text":"fontgate.fgCurve.len = len (...) float len(int quality)","title":"len"},{"location":"fontgate.fgCurve.html#maximumdeviation","text":"fontgate.fgCurve.maximumDeviation = maximumDeviation (...) float maximumDeviation()","title":"maximumDeviation"},{"location":"fontgate.fgCurve.html#merge","text":"fontgate.fgCurve.merge = merge (...) bool merge(fgCurve c)","title":"merge"},{"location":"fontgate.fgCurve.html#point","text":"fontgate.fgCurve.point = point (...) fgPoint point(float time)","title":"point"},{"location":"fontgate.fgCurve.html#q0","text":"fontgate.fgCurve.q0 (fgPoint)","title":"q0"},{"location":"fontgate.fgCurve.html#q1","text":"fontgate.fgCurve.q1 (fgPoint)","title":"q1"},{"location":"fontgate.fgCurve.html#q2","text":"fontgate.fgCurve.q2 (fgPoint)","title":"q2"},{"location":"fontgate.fgCurve.html#q3","text":"fontgate.fgCurve.q3 (fgPoint)","title":"q3"},{"location":"fontgate.fgCurve.html#quicklen","text":"fontgate.fgCurve.quickLen = quickLen (...) float quickLen()","title":"quickLen"},{"location":"fontgate.fgCurve.html#render","text":"fontgate.fgCurve.render = render (...) int render([fgPoint/fgPointU], int quality)","title":"render"},{"location":"fontgate.fgCurve.html#seg","text":"fontgate.fgCurve.seg = seg (...) fgCurve seg(float stime, float etime)","title":"seg"},{"location":"fontgate.fgCurve.html#sseg","text":"fontgate.fgCurve.sseg = sseg (...) fgCurve sseg(float u)","title":"sseg"},{"location":"fontgate.fgCurve.html#time","text":"fontgate.fgCurve.time = time (...) float time(fgPoint[, int quality[, [float min_dist] ]])","title":"time"},{"location":"fontgate.fgCuspPoint.html","text":"fgCuspPoint fontgate.fgCuspPoint = class fgCuspPoint ( object ) CuspPoint representation Constructors: fgCuspPoint() - default fgCuspPoint(fgCuspPoint) - copy Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) middleH (...) bool middleH () middleV (...) bool middleV () Descriptors hlink0 (int) hlink1 (int) index (int) p (fgPoint) vlink0 (int) vlink1 (int) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T hlink0 fontgate.fgCuspPoint.hlink0 (int) hlink1 fontgate.fgCuspPoint.hlink1 (int) index fontgate.fgCuspPoint.index (int) middleH fontgate.fgCuspPoint.middleH = middleH (...) bool middleH() middleV fontgate.fgCuspPoint.middleV = middleV (...) bool middleV() p fontgate.fgCuspPoint.p (fgPoint) vlink0 fontgate.fgCuspPoint.vlink0 (int) vlink1 fontgate.fgCuspPoint.vlink1 (int)","title":"fgCuspPoint"},{"location":"fontgate.fgCuspPoint.html#fgcusppoint","text":"","title":"fgCuspPoint"},{"location":"fontgate.fgCuspPoint.html#hlink0","text":"fontgate.fgCuspPoint.hlink0 (int)","title":"hlink0"},{"location":"fontgate.fgCuspPoint.html#hlink1","text":"fontgate.fgCuspPoint.hlink1 (int)","title":"hlink1"},{"location":"fontgate.fgCuspPoint.html#index","text":"fontgate.fgCuspPoint.index (int)","title":"index"},{"location":"fontgate.fgCuspPoint.html#middleh","text":"fontgate.fgCuspPoint.middleH = middleH (...) bool middleH()","title":"middleH"},{"location":"fontgate.fgCuspPoint.html#middlev","text":"fontgate.fgCuspPoint.middleV = middleV (...) bool middleV()","title":"middleV"},{"location":"fontgate.fgCuspPoint.html#p","text":"fontgate.fgCuspPoint.p (fgPoint)","title":"p"},{"location":"fontgate.fgCuspPoint.html#vlink0","text":"fontgate.fgCuspPoint.vlink0 (int)","title":"vlink0"},{"location":"fontgate.fgCuspPoint.html#vlink1","text":"fontgate.fgCuspPoint.vlink1 (int)","title":"vlink1"},{"location":"fontgate.fgCuspPoints.html","text":"fgCuspPoints fontgate.fgCuspPoints = class fgCuspPoints ( object ) list of fgCuspPoint objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgCuspPoints"},{"location":"fontgate.fgCuspPoints.html#fgcusppoints","text":"","title":"fgCuspPoints"},{"location":"fontgate.fgDesignPosition.html","text":"fgDesignPosition fontgate.fgDesignPosition = class fgDesignPosition ( object ) Anchor representation Constructors: fgDesignPosition() - default fgDesignPosition(fgDesignPosition) - copy fgDesignPosition(axisCount) - parametric Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors data (list(double)) - data Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T data fontgate.fgDesignPosition.data (list(double)) - data","title":"fgDesignPosition"},{"location":"fontgate.fgDesignPosition.html#fgdesignposition","text":"","title":"fgDesignPosition"},{"location":"fontgate.fgDesignPosition.html#data","text":"fontgate.fgDesignPosition.data (list(double)) - data","title":"data"},{"location":"fontgate.fgDeviceRecord.html","text":"fgDeviceRecord fontgate.fgDeviceRecord = class fgDeviceRecord ( object ) DeviceRecord representation Constructors: fgDeviceRecord() - default fgDeviceRecord(fgDeviceRecord) - copy fgDeviceRecord(tuple( int ppm, int correction) ) fgDeviceRecord( int ppm, int correction ) Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors correction (int) ppm (int) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T correction fontgate.fgDeviceRecord.correction (int) ppm fontgate.fgDeviceRecord.ppm (int)","title":"fgDeviceRecord"},{"location":"fontgate.fgDeviceRecord.html#fgdevicerecord","text":"","title":"fgDeviceRecord"},{"location":"fontgate.fgDeviceRecord.html#correction","text":"fontgate.fgDeviceRecord.correction (int)","title":"correction"},{"location":"fontgate.fgDeviceRecord.html#ppm","text":"fontgate.fgDeviceRecord.ppm (int)","title":"ppm"},{"location":"fontgate.fgDeviceRecords.html","text":"fgDeviceRecords fontgate.fgDeviceRecords = class fgDeviceRecords ( object ) list of fgDeviceRecord objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgDeviceRecords.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgDeviceRecords.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgDeviceRecords.clean = clean (...) clean() - delete all items del fontgate.fgDeviceRecords.del = del (...) del(index) - delete item by index insert fontgate.fgDeviceRecords.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgDeviceRecords"},{"location":"fontgate.fgDeviceRecords.html#fgdevicerecords","text":"","title":"fgDeviceRecords"},{"location":"fontgate.fgDeviceRecords.html#append","text":"fontgate.fgDeviceRecords.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgDeviceRecords.html#aslist","text":"fontgate.fgDeviceRecords.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgDeviceRecords.html#clean","text":"fontgate.fgDeviceRecords.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgDeviceRecords.html#del","text":"fontgate.fgDeviceRecords.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgDeviceRecords.html#insert","text":"fontgate.fgDeviceRecords.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgExtMapIntTofgShape.html","text":"fgExtMapIntTofgShape fontgate.fgExtMapIntTofgShape = class fgExtMapIntTofgShape ( object ) fgExtMapIntTofgShape dictionary Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgExtMapIntTofgShape"},{"location":"fontgate.fgExtMapIntTofgShape.html#fgextmapinttofgshape","text":"","title":"fgExtMapIntTofgShape"},{"location":"fontgate.fgExtMapUCharToUChar.html","text":"fgExtMapUCharToUChar fontgate.fgExtMapUCharToUChar = class fgExtMapUCharToUChar ( object ) fgExtMapUCharToUChar dictionary Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgExtMapUCharToUChar"},{"location":"fontgate.fgExtMapUCharToUChar.html#fgextmapuchartouchar","text":"","title":"fgExtMapUCharToUChar"},{"location":"fontgate.fgExtMapUIntToString.html","text":"fgExtMapUIntToString fontgate.fgExtMapUIntToString = class fgExtMapUIntToString ( object ) fgExtMapUIntToString dictionary Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgExtMapUIntToString"},{"location":"fontgate.fgExtMapUIntToString.html#fgextmapuinttostring","text":"","title":"fgExtMapUIntToString"},{"location":"fontgate.fgExtMapUShortToShort.html","text":"fgExtMapUShortToShort fontgate.fgExtMapUShortToShort = class fgExtMapUShortToShort ( object ) fgExtMapUShortToShort dictionary Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgExtMapUShortToShort"},{"location":"fontgate.fgExtMapUShortToShort.html#fgextmapushorttoshort","text":"","title":"fgExtMapUShortToShort"},{"location":"fontgate.fgFlagsDict.html","text":"fgFlagsDict fontgate.fgFlagsDict = class fgFlagsDict ( object ) bool flags diactionary Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgFlagsDict"},{"location":"fontgate.fgFlagsDict.html#fgflagsdict","text":"","title":"fgFlagsDict"},{"location":"fontgate.fgFont.html","text":"fgFont fontgate.fgFont = class fgFont ( object ) Font representation Constructors: fgFont() - create new empty font fgFont('font_name') - - create new empty font with name 'font_name' Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. addGlyph (...) fgGlyph addGlyph (fgGlyph) appendFeatures (...) int appendFeatures () averageHeight (...) float averageHeight () averageWidth (...) float averageWidth () boundingBox (...) fgRect boundingBox (fgMatrix) calculateSafeZones (...) ? checkMaps (...) checkMaps () clearGlyphs (...) clearGlyphs () - remove all glyphs clearMaps (...) clearMaps () - force clear all font internal caches copyFrom (...) copyFrom (fgFont sourceFont) - copy all data and glyphs from source font createGlyph (...) fgGlyph createGlyph ('name'[, int unicode[, bool clearExisting = false]]) dropHintingTables (...) dropHintingTables () dropLayoutTables (...) dropLayoutTables () fixOrdering (...) bool fixOrdering (float upm[, sortMethod='sortUnicode']) - sort glyphs by selected method. Methods are 'sortNone', 'sortName', 'sortUnicode', 'sortIndex', 'sortIndexReverse' hasColors (...) bool hasColors () hasPictures (...) bool hasPictures () has_key (...) bool has_key ('name') - return true if font contains glyph with name 'name' items (...) [('name', fgGlyph)] items () - returns a list of font's ('name', fgGlyph) tuple pairs keys (...) ['names'] keys () - return list of names of all glyphs in the font killUnicode (...) killUnicode (unicode) - remove selected unicode from all glyph unicodes lists rebuildMaps (...) rebuildMaps () - force clear and rebuild all font internal caches removeGlyph (...) bool/Nothing removeGlyph ('name'/unicode) - remove glyph selected by 'name' or unicode (int) save (...) save ('path/filename'[, bool save_vfb=false]) - save font in UFO or VFB format scale (...) scale (float) - scale font UPM sortGlyphs (...) sortGlyphs (sortMethod) - sort glyphs. sortMethod: 'sortNone'/'sortName'/'sortUnicode'/'sortIndex'/'sortIndexReverse' update (...) update () - force rebuild font chaches and request font update values (...) [fgGlyph] values () - returns list of font's fgGlyph Descriptors axes (fgAxes) axes info coding (fgCoding) encoding info features (fgOTLayout) features data glyphs ([fgGlyph]) font glyphs list groups (fgGroups) glyph groups list guides (fgGuides) guides list hinting (fgFontHinting) hinting info hints (fgHints) hints list for font 'Body' layer id (long) package id info (fgFontInfo) font info data kerning (fgKerning) kerning data lib (fgLib) additional font data master (fgLayer) font master layer metricsClasses (fgMetricsClasses) list of metrics classes path (string) path and font file name shapes (fgMapShapes) font shapes map tables (fgMapBytes) raw OT tables data translatedNames ([tuples]) raw style->names.translated data Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T addGlyph fontgate.fgFont.addGlyph = addGlyph (...) fgGlyph addGlyph(fgGlyph) appendFeatures fontgate.fgFont.appendFeatures = appendFeatures (...) int appendFeatures() averageHeight fontgate.fgFont.averageHeight = averageHeight (...) float averageHeight() averageWidth fontgate.fgFont.averageWidth = averageWidth (...) float averageWidth() axes fontgate.fgFont.axes (fgAxes) axes info boundingBox fontgate.fgFont.boundingBox = boundingBox (...) fgRect boundingBox(fgMatrix) calculateSafeZones fontgate.fgFont.calculateSafeZones = calculateSafeZones (...) ? checkMaps fontgate.fgFont.checkMaps = checkMaps (...) checkMaps() clearGlyphs fontgate.fgFont.clearGlyphs = clearGlyphs (...) clearGlyphs() - remove all glyphs clearMaps fontgate.fgFont.clearMaps = clearMaps (...) clearMaps() - force clear all font internal caches coding fontgate.fgFont.coding (fgCoding) encoding info copyFrom fontgate.fgFont.copyFrom = copyFrom (...) copyFrom(fgFont sourceFont) - copy all data and glyphs from source font createGlyph fontgate.fgFont.createGlyph = createGlyph (...) fgGlyph createGlyph('name'[, int unicode[, bool clearExisting = false]]) dropHintingTables fontgate.fgFont.dropHintingTables = dropHintingTables (...) dropHintingTables() dropLayoutTables fontgate.fgFont.dropLayoutTables = dropLayoutTables (...) dropLayoutTables() features fontgate.fgFont.features (fgOTLayout) features data fixOrdering fontgate.fgFont.fixOrdering = fixOrdering (...) bool fixOrdering(float upm[, sortMethod='sortUnicode']) - sort glyphs by selected method. Methods are 'sortNone', 'sortName', 'sortUnicode', 'sortIndex', 'sortIndexReverse' glyphs fontgate.fgFont.glyphs ([fgGlyph]) font glyphs list groups fontgate.fgFont.groups (fgGroups) glyph groups list guides fontgate.fgFont.guides (fgGuides) guides list has_key fontgate.fgFont.has_key = has_key (...) bool has_key('name') - return true if font contains glyph with name 'name' hasColors fontgate.fgFont.hasColors = hasColors (...) bool hasColors() hasPictures fontgate.fgFont.hasPictures = hasPictures (...) bool hasPictures() hinting fontgate.fgFont.hinting (fgFontHinting) hinting info hints fontgate.fgFont.hints (fgHints) hints list for font 'Body' layer id fontgate.fgFont.id (long) package id info fontgate.fgFont.info (fgFontInfo) font info data items fontgate.fgFont.items = items (...) [('name', fgGlyph)] items() - returns a list of font's ('name', fgGlyph) tuple pairs kerning fontgate.fgFont.kerning (fgKerning) kerning data keys fontgate.fgFont.keys = keys (...) ['names'] keys() - return list of names of all glyphs in the font killUnicode fontgate.fgFont.killUnicode = killUnicode (...) killUnicode(unicode) - remove selected unicode from all glyph unicodes lists lib fontgate.fgFont.lib (fgLib) additional font data master fontgate.fgFont.master (fgLayer) font master layer metricsClasses fontgate.fgFont.metricsClasses (fgMetricsClasses) list of metrics classes path fontgate.fgFont.path (string) path and font file name rebuildMaps fontgate.fgFont.rebuildMaps = rebuildMaps (...) rebuildMaps() - force clear and rebuild all font internal caches removeGlyph fontgate.fgFont.removeGlyph = removeGlyph (...) bool/Nothing removeGlyph('name'/unicode) - remove glyph selected by 'name' or unicode (int) save fontgate.fgFont.save = save (...) save('path/filename'[, bool save_vfb=false]) - save font in UFO or VFB format scale fontgate.fgFont.scale = scale (...) scale(float) - scale font UPM shapes fontgate.fgFont.shapes (fgMapShapes) font shapes map sortGlyphs fontgate.fgFont.sortGlyphs = sortGlyphs (...) sortGlyphs(sortMethod) - sort glyphs. sortMethod: 'sortNone'/'sortName'/'sortUnicode'/'sortIndex'/'sortIndexReverse' tables fontgate.fgFont.tables (fgMapBytes) raw OT tables data translatedNames fontgate.fgFont.translatedNames ([tuples]) raw style->names.translated data update fontgate.fgFont.update = update (...) update() - force rebuild font chaches and request font update values fontgate.fgFont.values = values (...) [fgGlyph] values() - returns list of font's fgGlyph","title":"fgFont"},{"location":"fontgate.fgFont.html#fgfont","text":"","title":"fgFont"},{"location":"fontgate.fgFont.html#addglyph","text":"fontgate.fgFont.addGlyph = addGlyph (...) fgGlyph addGlyph(fgGlyph)","title":"addGlyph"},{"location":"fontgate.fgFont.html#appendfeatures","text":"fontgate.fgFont.appendFeatures = appendFeatures (...) int appendFeatures()","title":"appendFeatures"},{"location":"fontgate.fgFont.html#averageheight","text":"fontgate.fgFont.averageHeight = averageHeight (...) float averageHeight()","title":"averageHeight"},{"location":"fontgate.fgFont.html#averagewidth","text":"fontgate.fgFont.averageWidth = averageWidth (...) float averageWidth()","title":"averageWidth"},{"location":"fontgate.fgFont.html#axes","text":"fontgate.fgFont.axes (fgAxes) axes info","title":"axes"},{"location":"fontgate.fgFont.html#boundingbox","text":"fontgate.fgFont.boundingBox = boundingBox (...) fgRect boundingBox(fgMatrix)","title":"boundingBox"},{"location":"fontgate.fgFont.html#calculatesafezones","text":"fontgate.fgFont.calculateSafeZones = calculateSafeZones (...) ?","title":"calculateSafeZones"},{"location":"fontgate.fgFont.html#checkmaps","text":"fontgate.fgFont.checkMaps = checkMaps (...) checkMaps()","title":"checkMaps"},{"location":"fontgate.fgFont.html#clearglyphs","text":"fontgate.fgFont.clearGlyphs = clearGlyphs (...) clearGlyphs() - remove all glyphs","title":"clearGlyphs"},{"location":"fontgate.fgFont.html#clearmaps","text":"fontgate.fgFont.clearMaps = clearMaps (...) clearMaps() - force clear all font internal caches","title":"clearMaps"},{"location":"fontgate.fgFont.html#coding","text":"fontgate.fgFont.coding (fgCoding) encoding info","title":"coding"},{"location":"fontgate.fgFont.html#copyfrom","text":"fontgate.fgFont.copyFrom = copyFrom (...) copyFrom(fgFont sourceFont) - copy all data and glyphs from source font","title":"copyFrom"},{"location":"fontgate.fgFont.html#createglyph","text":"fontgate.fgFont.createGlyph = createGlyph (...) fgGlyph createGlyph('name'[, int unicode[, bool clearExisting = false]])","title":"createGlyph"},{"location":"fontgate.fgFont.html#drophintingtables","text":"fontgate.fgFont.dropHintingTables = dropHintingTables (...) dropHintingTables()","title":"dropHintingTables"},{"location":"fontgate.fgFont.html#droplayouttables","text":"fontgate.fgFont.dropLayoutTables = dropLayoutTables (...) dropLayoutTables()","title":"dropLayoutTables"},{"location":"fontgate.fgFont.html#features","text":"fontgate.fgFont.features (fgOTLayout) features data","title":"features"},{"location":"fontgate.fgFont.html#fixordering","text":"fontgate.fgFont.fixOrdering = fixOrdering (...) bool fixOrdering(float upm[, sortMethod='sortUnicode']) - sort glyphs by selected method. Methods are 'sortNone', 'sortName', 'sortUnicode', 'sortIndex', 'sortIndexReverse'","title":"fixOrdering"},{"location":"fontgate.fgFont.html#glyphs","text":"fontgate.fgFont.glyphs ([fgGlyph]) font glyphs list","title":"glyphs"},{"location":"fontgate.fgFont.html#groups","text":"fontgate.fgFont.groups (fgGroups) glyph groups list","title":"groups"},{"location":"fontgate.fgFont.html#guides","text":"fontgate.fgFont.guides (fgGuides) guides list","title":"guides"},{"location":"fontgate.fgFont.html#has_key","text":"fontgate.fgFont.has_key = has_key (...) bool has_key('name') - return true if font contains glyph with name 'name'","title":"has_key"},{"location":"fontgate.fgFont.html#hascolors","text":"fontgate.fgFont.hasColors = hasColors (...) bool hasColors()","title":"hasColors"},{"location":"fontgate.fgFont.html#haspictures","text":"fontgate.fgFont.hasPictures = hasPictures (...) bool hasPictures()","title":"hasPictures"},{"location":"fontgate.fgFont.html#hinting","text":"fontgate.fgFont.hinting (fgFontHinting) hinting info","title":"hinting"},{"location":"fontgate.fgFont.html#hints","text":"fontgate.fgFont.hints (fgHints) hints list for font 'Body' layer","title":"hints"},{"location":"fontgate.fgFont.html#id","text":"fontgate.fgFont.id (long) package id","title":"id"},{"location":"fontgate.fgFont.html#info","text":"fontgate.fgFont.info (fgFontInfo) font info data","title":"info"},{"location":"fontgate.fgFont.html#items","text":"fontgate.fgFont.items = items (...) [('name', fgGlyph)] items() - returns a list of font's ('name', fgGlyph) tuple pairs","title":"items"},{"location":"fontgate.fgFont.html#kerning","text":"fontgate.fgFont.kerning (fgKerning) kerning data","title":"kerning"},{"location":"fontgate.fgFont.html#keys","text":"fontgate.fgFont.keys = keys (...) ['names'] keys() - return list of names of all glyphs in the font","title":"keys"},{"location":"fontgate.fgFont.html#killunicode","text":"fontgate.fgFont.killUnicode = killUnicode (...) killUnicode(unicode) - remove selected unicode from all glyph unicodes lists","title":"killUnicode"},{"location":"fontgate.fgFont.html#lib","text":"fontgate.fgFont.lib (fgLib) additional font data","title":"lib"},{"location":"fontgate.fgFont.html#master","text":"fontgate.fgFont.master (fgLayer) font master layer","title":"master"},{"location":"fontgate.fgFont.html#metricsclasses","text":"fontgate.fgFont.metricsClasses (fgMetricsClasses) list of metrics classes","title":"metricsClasses"},{"location":"fontgate.fgFont.html#path","text":"fontgate.fgFont.path (string) path and font file name","title":"path"},{"location":"fontgate.fgFont.html#rebuildmaps","text":"fontgate.fgFont.rebuildMaps = rebuildMaps (...) rebuildMaps() - force clear and rebuild all font internal caches","title":"rebuildMaps"},{"location":"fontgate.fgFont.html#removeglyph","text":"fontgate.fgFont.removeGlyph = removeGlyph (...) bool/Nothing removeGlyph('name'/unicode) - remove glyph selected by 'name' or unicode (int)","title":"removeGlyph"},{"location":"fontgate.fgFont.html#save","text":"fontgate.fgFont.save = save (...) save('path/filename'[, bool save_vfb=false]) - save font in UFO or VFB format","title":"save"},{"location":"fontgate.fgFont.html#scale","text":"fontgate.fgFont.scale = scale (...) scale(float) - scale font UPM","title":"scale"},{"location":"fontgate.fgFont.html#shapes","text":"fontgate.fgFont.shapes (fgMapShapes) font shapes map","title":"shapes"},{"location":"fontgate.fgFont.html#sortglyphs","text":"fontgate.fgFont.sortGlyphs = sortGlyphs (...) sortGlyphs(sortMethod) - sort glyphs. sortMethod: 'sortNone'/'sortName'/'sortUnicode'/'sortIndex'/'sortIndexReverse'","title":"sortGlyphs"},{"location":"fontgate.fgFont.html#tables","text":"fontgate.fgFont.tables (fgMapBytes) raw OT tables data","title":"tables"},{"location":"fontgate.fgFont.html#translatednames","text":"fontgate.fgFont.translatedNames ([tuples]) raw style->names.translated data","title":"translatedNames"},{"location":"fontgate.fgFont.html#update","text":"fontgate.fgFont.update = update (...) update() - force rebuild font chaches and request font update","title":"update"},{"location":"fontgate.fgFont.html#values","text":"fontgate.fgFont.values = values (...) [fgGlyph] values() - returns list of font's fgGlyph","title":"values"},{"location":"fontgate.fgFontGateData.html","text":"fgFontGateData fontgate.fgFontGateData = class fgFontGateData ( object ) FontGateData representation Constructors: fgFontGateData() - default fgFontGateData(fgFontGateData) - copy Methods OK (...) bool OK () - return true if status is gdsOK __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) activeLayer (...) fgLayer activeLayer () - get active layer or Nothing if no layers exists addContour (...) fgContour addContour (fgContour) - add contour into 'Body' layer addShape (...) fgShape addShape (fgShape) - add shape into 'Body' layer bad (...) bool bad () - return true if status isn't gdsOK bodyLayer (...) fgLayer bodyLayer () - get layer named 'Body', any existing non-service layer if not found or Nothing if no layers exists bodyLayerStrict (...) fgLayer bodyLayerStrict () - get layer named 'Body'. if it's not present, create it on the fly boundingBox (...) fgRect boundingBox (fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box checkContours (...) checkContours () - ckeck for multi-segment contours and split it into one segment's contours copy (...) fgFontGateData copy () - create alone copy of data countNodesContours (...) (nodesCount, contoursCount) countNodesContours () - calculate stats for 'Body' layer if it present, return (0,0) otherwise countPictures (...) int countPictures () - return pictures count countShapes (...) int countShapes () - return shapes count findLayer (...) fgLayer findLayer ('name') - get layer by name, return Nothing if no layer found getFontGateData (...) fgFontGateData getFontGateData () - return self getType (...) string getType () - return 'dtFontGate' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present maskLayer (...) fgLayer maskLayer (bool createIfMissing) modified (...) bool modified () - return true if data was changed resetBbox (...) resetBbox () - reset bbox cache setParent (...) setParent (fgGlyph) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform (fgMatrix) - transform data updated (...) updated () - mark data as changed, reset internal caches Descriptors layers (fgLayers) layers list Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T activeLayer fontgate.fgFontGateData.activeLayer = activeLayer (...) fgLayer activeLayer() - get active layer or Nothing if no layers exists addContour fontgate.fgFontGateData.addContour = addContour (...) fgContour addContour(fgContour) - add contour into 'Body' layer addShape fontgate.fgFontGateData.addShape = addShape (...) fgShape addShape(fgShape) - add shape into 'Body' layer bad fontgate.fgFontGateData.bad = bad (...) bool bad() - return true if status isn't gdsOK bodyLayer fontgate.fgFontGateData.bodyLayer = bodyLayer (...) fgLayer bodyLayer() - get layer named 'Body', any existing non-service layer if not found or Nothing if no layers exists bodyLayerStrict fontgate.fgFontGateData.bodyLayerStrict = bodyLayerStrict (...) fgLayer bodyLayerStrict() - get layer named 'Body'. if it's not present, create it on the fly boundingBox fontgate.fgFontGateData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box checkContours fontgate.fgFontGateData.checkContours = checkContours (...) checkContours() - ckeck for multi-segment contours and split it into one segment's contours copy fontgate.fgFontGateData.copy = copy (...) fgFontGateData copy() - create alone copy of data countNodesContours fontgate.fgFontGateData.countNodesContours = countNodesContours (...) (nodesCount, contoursCount) countNodesContours() - calculate stats for 'Body' layer if it present, return (0,0) otherwise countPictures fontgate.fgFontGateData.countPictures = countPictures (...) int countPictures() - return pictures count countShapes fontgate.fgFontGateData.countShapes = countShapes (...) int countShapes() - return shapes count findLayer fontgate.fgFontGateData.findLayer = findLayer (...) fgLayer findLayer('name') - get layer by name, return Nothing if no layer found getFontGateData fontgate.fgFontGateData.getFontGateData = getFontGateData (...) fgFontGateData getFontGateData() - return self getType fontgate.fgFontGateData.getType = getType (...) string getType() - return 'dtFontGate' hasBody fontgate.fgFontGateData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present hasColors fontgate.fgFontGateData.hasColors = hasColors (...) bool hasColors() - return true if colors is present hasHints fontgate.fgFontGateData.hasHints = hasHints (...) bool hasHints() - return true if hints is present hasPictures fontgate.fgFontGateData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present layers fontgate.fgFontGateData.layers (fgLayers) layers list maskLayer fontgate.fgFontGateData.maskLayer = maskLayer (...) fgLayer maskLayer(bool createIfMissing) modified fontgate.fgFontGateData.modified = modified (...) bool modified() - return true if data was changed OK fontgate.fgFontGateData.OK = OK (...) bool OK() - return true if status is gdsOK resetBbox fontgate.fgFontGateData.resetBbox = resetBbox (...) resetBbox() - reset bbox cache setParent fontgate.fgFontGateData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph status fontgate.fgFontGateData.status = status (...) 'gdsOK'/'gdsInvalid' status() transform fontgate.fgFontGateData.transform = transform (...) transform(fgMatrix) - transform data updated fontgate.fgFontGateData.updated = updated (...) updated() - mark data as changed, reset internal caches","title":"fgFontGateData"},{"location":"fontgate.fgFontGateData.html#fgfontgatedata","text":"","title":"fgFontGateData"},{"location":"fontgate.fgFontGateData.html#activelayer","text":"fontgate.fgFontGateData.activeLayer = activeLayer (...) fgLayer activeLayer() - get active layer or Nothing if no layers exists","title":"activeLayer"},{"location":"fontgate.fgFontGateData.html#addcontour","text":"fontgate.fgFontGateData.addContour = addContour (...) fgContour addContour(fgContour) - add contour into 'Body' layer","title":"addContour"},{"location":"fontgate.fgFontGateData.html#addshape","text":"fontgate.fgFontGateData.addShape = addShape (...) fgShape addShape(fgShape) - add shape into 'Body' layer","title":"addShape"},{"location":"fontgate.fgFontGateData.html#bad","text":"fontgate.fgFontGateData.bad = bad (...) bool bad() - return true if status isn't gdsOK","title":"bad"},{"location":"fontgate.fgFontGateData.html#bodylayer","text":"fontgate.fgFontGateData.bodyLayer = bodyLayer (...) fgLayer bodyLayer() - get layer named 'Body', any existing non-service layer if not found or Nothing if no layers exists","title":"bodyLayer"},{"location":"fontgate.fgFontGateData.html#bodylayerstrict","text":"fontgate.fgFontGateData.bodyLayerStrict = bodyLayerStrict (...) fgLayer bodyLayerStrict() - get layer named 'Body'. if it's not present, create it on the fly","title":"bodyLayerStrict"},{"location":"fontgate.fgFontGateData.html#boundingbox","text":"fontgate.fgFontGateData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box","title":"boundingBox"},{"location":"fontgate.fgFontGateData.html#checkcontours","text":"fontgate.fgFontGateData.checkContours = checkContours (...) checkContours() - ckeck for multi-segment contours and split it into one segment's contours","title":"checkContours"},{"location":"fontgate.fgFontGateData.html#copy","text":"fontgate.fgFontGateData.copy = copy (...) fgFontGateData copy() - create alone copy of data","title":"copy"},{"location":"fontgate.fgFontGateData.html#countnodescontours","text":"fontgate.fgFontGateData.countNodesContours = countNodesContours (...) (nodesCount, contoursCount) countNodesContours() - calculate stats for 'Body' layer if it present, return (0,0) otherwise","title":"countNodesContours"},{"location":"fontgate.fgFontGateData.html#countpictures","text":"fontgate.fgFontGateData.countPictures = countPictures (...) int countPictures() - return pictures count","title":"countPictures"},{"location":"fontgate.fgFontGateData.html#countshapes","text":"fontgate.fgFontGateData.countShapes = countShapes (...) int countShapes() - return shapes count","title":"countShapes"},{"location":"fontgate.fgFontGateData.html#findlayer","text":"fontgate.fgFontGateData.findLayer = findLayer (...) fgLayer findLayer('name') - get layer by name, return Nothing if no layer found","title":"findLayer"},{"location":"fontgate.fgFontGateData.html#getfontgatedata","text":"fontgate.fgFontGateData.getFontGateData = getFontGateData (...) fgFontGateData getFontGateData() - return self","title":"getFontGateData"},{"location":"fontgate.fgFontGateData.html#gettype","text":"fontgate.fgFontGateData.getType = getType (...) string getType() - return 'dtFontGate'","title":"getType"},{"location":"fontgate.fgFontGateData.html#hasbody","text":"fontgate.fgFontGateData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present","title":"hasBody"},{"location":"fontgate.fgFontGateData.html#hascolors","text":"fontgate.fgFontGateData.hasColors = hasColors (...) bool hasColors() - return true if colors is present","title":"hasColors"},{"location":"fontgate.fgFontGateData.html#hashints","text":"fontgate.fgFontGateData.hasHints = hasHints (...) bool hasHints() - return true if hints is present","title":"hasHints"},{"location":"fontgate.fgFontGateData.html#haspictures","text":"fontgate.fgFontGateData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present","title":"hasPictures"},{"location":"fontgate.fgFontGateData.html#layers","text":"fontgate.fgFontGateData.layers (fgLayers) layers list","title":"layers"},{"location":"fontgate.fgFontGateData.html#masklayer","text":"fontgate.fgFontGateData.maskLayer = maskLayer (...) fgLayer maskLayer(bool createIfMissing)","title":"maskLayer"},{"location":"fontgate.fgFontGateData.html#modified","text":"fontgate.fgFontGateData.modified = modified (...) bool modified() - return true if data was changed","title":"modified"},{"location":"fontgate.fgFontGateData.html#ok","text":"fontgate.fgFontGateData.OK = OK (...) bool OK() - return true if status is gdsOK","title":"OK"},{"location":"fontgate.fgFontGateData.html#resetbbox","text":"fontgate.fgFontGateData.resetBbox = resetBbox (...) resetBbox() - reset bbox cache","title":"resetBbox"},{"location":"fontgate.fgFontGateData.html#setparent","text":"fontgate.fgFontGateData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph","title":"setParent"},{"location":"fontgate.fgFontGateData.html#status","text":"fontgate.fgFontGateData.status = status (...) 'gdsOK'/'gdsInvalid' status()","title":"status"},{"location":"fontgate.fgFontGateData.html#transform","text":"fontgate.fgFontGateData.transform = transform (...) transform(fgMatrix) - transform data","title":"transform"},{"location":"fontgate.fgFontGateData.html#updated","text":"fontgate.fgFontGateData.updated = updated (...) updated() - mark data as changed, reset internal caches","title":"updated"},{"location":"fontgate.fgFontHinting.html","text":"fgFontHinting fontgate.fgFontHinting = class fgFontHinting ( object ) Font Hinting data representation Constructors: fgFontHinting() - default fgFontHinting(fgFontHinting) - copy Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) generateStemsProgram (...) generateStemsProgram (Position upm, bool keepValues) getBlueValues (...) list( float ) getBlueValues () getFamilyBlues (...) list( float ) getFamilyBlues () getFamilyOtherBlues (...) list( float ) getFamilyBlues () getOtherBlues (...) list( float ) getOtherBlues () getZone (...) fgZone/Nothing getZone (int index, bool top) getZonesCount (...) int getZonesCount (bool top) Descriptors blueFuzz (int) blueScale (float) blueShift (int) codePPM (int) cvt ( bytesarray ) dict ( { string : int } ) dropoutPPM (int) familyZones (fgZones) flex (bool) forceBold (bool) forceBoldTreshold (float) fpgm ( bytesarray ) gasp ( [ fgGaspRecord ] ) hdmx ( [ int ] ) maxp ( fgMaxP ) prep ( bytesarray ) stemH (float) stemSnapLimit (int) stemV (float) stemsH (fgStems) stemsV (fgStems) t1stemsH (fgStems) t1stemsV (fgStems) t1zones (fgZones) vdmx ( [ fgVdmxRecord ] ) zonePPM (int) zones (fgZones) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T blueFuzz fontgate.fgFontHinting.blueFuzz (int) blueScale fontgate.fgFontHinting.blueScale (float) blueShift fontgate.fgFontHinting.blueShift (int) codePPM fontgate.fgFontHinting.codePPM (int) cvt fontgate.fgFontHinting.cvt ( bytesarray ) dict fontgate.fgFontHinting.dict ( { string : int } ) dropoutPPM fontgate.fgFontHinting.dropoutPPM (int) familyZones fontgate.fgFontHinting.familyZones (fgZones) flex fontgate.fgFontHinting.flex (bool) forceBold fontgate.fgFontHinting.forceBold (bool) forceBoldTreshold fontgate.fgFontHinting.forceBoldTreshold (float) fpgm fontgate.fgFontHinting.fpgm ( bytesarray ) gasp fontgate.fgFontHinting.gasp ( [ fgGaspRecord ] ) generateStemsProgram fontgate.fgFontHinting.generateStemsProgram = generateStemsProgram (...) generateStemsProgram(Position upm, bool keepValues) getBlueValues fontgate.fgFontHinting.getBlueValues = getBlueValues (...) list( float ) getBlueValues() getFamilyBlues fontgate.fgFontHinting.getFamilyBlues = getFamilyBlues (...) list( float ) getFamilyBlues() getFamilyOtherBlues fontgate.fgFontHinting.getFamilyOtherBlues = getFamilyOtherBlues (...) list( float ) getFamilyBlues() getOtherBlues fontgate.fgFontHinting.getOtherBlues = getOtherBlues (...) list( float ) getOtherBlues() getZone fontgate.fgFontHinting.getZone = getZone (...) fgZone/Nothing getZone(int index, bool top) getZonesCount fontgate.fgFontHinting.getZonesCount = getZonesCount (...) int getZonesCount(bool top) hdmx fontgate.fgFontHinting.hdmx ( [ int ] ) maxp fontgate.fgFontHinting.maxp ( fgMaxP ) prep fontgate.fgFontHinting.prep ( bytesarray ) stemH fontgate.fgFontHinting.stemH (float) stemsH fontgate.fgFontHinting.stemsH (fgStems) stemSnapLimit fontgate.fgFontHinting.stemSnapLimit (int) stemsV fontgate.fgFontHinting.stemsV (fgStems) stemV fontgate.fgFontHinting.stemV (float) t1stemsH fontgate.fgFontHinting.t1stemsH (fgStems) t1stemsV fontgate.fgFontHinting.t1stemsV (fgStems) t1zones fontgate.fgFontHinting.t1zones (fgZones) vdmx fontgate.fgFontHinting.vdmx ( [ fgVdmxRecord ] ) zonePPM fontgate.fgFontHinting.zonePPM (int) zones fontgate.fgFontHinting.zones (fgZones)","title":"fgFontHinting"},{"location":"fontgate.fgFontHinting.html#fgfonthinting","text":"","title":"fgFontHinting"},{"location":"fontgate.fgFontHinting.html#bluefuzz","text":"fontgate.fgFontHinting.blueFuzz (int)","title":"blueFuzz"},{"location":"fontgate.fgFontHinting.html#bluescale","text":"fontgate.fgFontHinting.blueScale (float)","title":"blueScale"},{"location":"fontgate.fgFontHinting.html#blueshift","text":"fontgate.fgFontHinting.blueShift (int)","title":"blueShift"},{"location":"fontgate.fgFontHinting.html#codeppm","text":"fontgate.fgFontHinting.codePPM (int)","title":"codePPM"},{"location":"fontgate.fgFontHinting.html#cvt","text":"fontgate.fgFontHinting.cvt ( bytesarray )","title":"cvt"},{"location":"fontgate.fgFontHinting.html#dict","text":"fontgate.fgFontHinting.dict ( { string : int } )","title":"dict"},{"location":"fontgate.fgFontHinting.html#dropoutppm","text":"fontgate.fgFontHinting.dropoutPPM (int)","title":"dropoutPPM"},{"location":"fontgate.fgFontHinting.html#familyzones","text":"fontgate.fgFontHinting.familyZones (fgZones)","title":"familyZones"},{"location":"fontgate.fgFontHinting.html#flex","text":"fontgate.fgFontHinting.flex (bool)","title":"flex"},{"location":"fontgate.fgFontHinting.html#forcebold","text":"fontgate.fgFontHinting.forceBold (bool)","title":"forceBold"},{"location":"fontgate.fgFontHinting.html#forceboldtreshold","text":"fontgate.fgFontHinting.forceBoldTreshold (float)","title":"forceBoldTreshold"},{"location":"fontgate.fgFontHinting.html#fpgm","text":"fontgate.fgFontHinting.fpgm ( bytesarray )","title":"fpgm"},{"location":"fontgate.fgFontHinting.html#gasp","text":"fontgate.fgFontHinting.gasp ( [ fgGaspRecord ] )","title":"gasp"},{"location":"fontgate.fgFontHinting.html#generatestemsprogram","text":"fontgate.fgFontHinting.generateStemsProgram = generateStemsProgram (...) generateStemsProgram(Position upm, bool keepValues)","title":"generateStemsProgram"},{"location":"fontgate.fgFontHinting.html#getbluevalues","text":"fontgate.fgFontHinting.getBlueValues = getBlueValues (...) list( float ) getBlueValues()","title":"getBlueValues"},{"location":"fontgate.fgFontHinting.html#getfamilyblues","text":"fontgate.fgFontHinting.getFamilyBlues = getFamilyBlues (...) list( float ) getFamilyBlues()","title":"getFamilyBlues"},{"location":"fontgate.fgFontHinting.html#getfamilyotherblues","text":"fontgate.fgFontHinting.getFamilyOtherBlues = getFamilyOtherBlues (...) list( float ) getFamilyBlues()","title":"getFamilyOtherBlues"},{"location":"fontgate.fgFontHinting.html#getotherblues","text":"fontgate.fgFontHinting.getOtherBlues = getOtherBlues (...) list( float ) getOtherBlues()","title":"getOtherBlues"},{"location":"fontgate.fgFontHinting.html#getzone","text":"fontgate.fgFontHinting.getZone = getZone (...) fgZone/Nothing getZone(int index, bool top)","title":"getZone"},{"location":"fontgate.fgFontHinting.html#getzonescount","text":"fontgate.fgFontHinting.getZonesCount = getZonesCount (...) int getZonesCount(bool top)","title":"getZonesCount"},{"location":"fontgate.fgFontHinting.html#hdmx","text":"fontgate.fgFontHinting.hdmx ( [ int ] )","title":"hdmx"},{"location":"fontgate.fgFontHinting.html#maxp","text":"fontgate.fgFontHinting.maxp ( fgMaxP )","title":"maxp"},{"location":"fontgate.fgFontHinting.html#prep","text":"fontgate.fgFontHinting.prep ( bytesarray )","title":"prep"},{"location":"fontgate.fgFontHinting.html#stemh","text":"fontgate.fgFontHinting.stemH (float)","title":"stemH"},{"location":"fontgate.fgFontHinting.html#stemsh","text":"fontgate.fgFontHinting.stemsH (fgStems)","title":"stemsH"},{"location":"fontgate.fgFontHinting.html#stemsnaplimit","text":"fontgate.fgFontHinting.stemSnapLimit (int)","title":"stemSnapLimit"},{"location":"fontgate.fgFontHinting.html#stemsv","text":"fontgate.fgFontHinting.stemsV (fgStems)","title":"stemsV"},{"location":"fontgate.fgFontHinting.html#stemv","text":"fontgate.fgFontHinting.stemV (float)","title":"stemV"},{"location":"fontgate.fgFontHinting.html#t1stemsh","text":"fontgate.fgFontHinting.t1stemsH (fgStems)","title":"t1stemsH"},{"location":"fontgate.fgFontHinting.html#t1stemsv","text":"fontgate.fgFontHinting.t1stemsV (fgStems)","title":"t1stemsV"},{"location":"fontgate.fgFontHinting.html#t1zones","text":"fontgate.fgFontHinting.t1zones (fgZones)","title":"t1zones"},{"location":"fontgate.fgFontHinting.html#vdmx","text":"fontgate.fgFontHinting.vdmx ( [ fgVdmxRecord ] )","title":"vdmx"},{"location":"fontgate.fgFontHinting.html#zoneppm","text":"fontgate.fgFontHinting.zonePPM (int)","title":"zonePPM"},{"location":"fontgate.fgFontHinting.html#zones","text":"fontgate.fgFontHinting.zones (fgZones)","title":"zones"},{"location":"fontgate.fgFontInfo.html","text":"fgFontInfo fontgate.fgFontInfo = class fgFontInfo ( object ) FontInfo data No constructors - it's the direct member of the fgFont object Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors ascender Ascender value capHeight Cap height value caretOffset Caret offset value copyright Copyright statement descender Descender value dict Other font info tags and data familyName Family name italicAngle Italic angle macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the Macintosh FOND resource macintoshFONDName Font name for the Macintosh FOND resource note Arbitrary note about the font openTypeHeadCreated Creation date and time openTypeHeadFlags A list of bit numbers indicating the flags. Corresponds to the OpenType head table flags field openTypeHeadFontDirectionHint Deprecated (Set to 2). Corresponds to the OpenType head table fontDirectionHint field openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field openTypeHeadModified Last modification date and time openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18 openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10 openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9 openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12 openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13 openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14 openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8 openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11 openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16 openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17 openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 20 openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3 openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5 openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21 openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22 openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, should be in the range 0-14. The second number, representing the subclass, should be in the range 0-15. Corresponds to the OpenType OS/2 table sFamilyClass field openTypeOS2Panose The list should contain 10 integers that represent the setting for each category in the Panose specification. This corresponds to the OpenType OS/2 table Panose field openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. Corresponds to the OpenType OS/2 table selection field openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field openTypeOS2Type A list of bit numbers indicating the embedding type. Corresponds to the OpenType OS/2 table fsType field openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field openTypeOS2WeightClass Weight class value. Must be a positive integer. Corresponds to the OpenType OS/2 table usWeightClass field openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files postscriptDefaultWidthX Default width for glyphs postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field postscriptFontName Name to be used for the FontName field in Type 1/CFF table postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set postscriptFullName Name to be used for the FullName field in Type 1/CFF table postscriptIsFixedPitch Indicates if the font is monospaced. A compiler could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field postscriptNominalWidthX Nominal width for glyphs postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field postscriptSlantAngle Artificial slant angle postscriptStemSnapH List of horizontal stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field postscriptStemSnapV List of vertical stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value postscriptWindowsCharacterSet The Windows character set. postscriptWindowsCharacterSet Options. Possible values are 1..20 styleMapFamilyName Family name used for bold, italic and bold italic style mapping styleMapStyleName Styling link name. Perrmitted values are 'Regular', 'Italic', 'Bold', 'Bold Italic' (exactly as spelled). No other values are permitted styleName Style name trademark Trademark statement unitsPerEm Units per em versionMajor Major version versionMinor Minor version xHeight x-height value year The year the font was created Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T ascender fontgate.fgFontInfo.ascender Ascender value capHeight fontgate.fgFontInfo.capHeight Cap height value caretOffset fontgate.fgFontInfo.caretOffset Caret offset value copyright fontgate.fgFontInfo.copyright Copyright statement descender fontgate.fgFontInfo.descender Descender value dict fontgate.fgFontInfo.dict Other font info tags and data familyName fontgate.fgFontInfo.familyName Family name italicAngle fontgate.fgFontInfo.italicAngle Italic angle macintoshFONDFamilyID fontgate.fgFontInfo.macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the Macintosh FOND resource macintoshFONDName fontgate.fgFontInfo.macintoshFONDName Font name for the Macintosh FOND resource note fontgate.fgFontInfo.note Arbitrary note about the font openTypeHeadCreated fontgate.fgFontInfo.openTypeHeadCreated Creation date and time openTypeHeadFlags fontgate.fgFontInfo.openTypeHeadFlags A list of bit numbers indicating the flags. Corresponds to the OpenType head table flags field openTypeHeadFontDirectionHint fontgate.fgFontInfo.openTypeHeadFontDirectionHint Deprecated (Set to 2). Corresponds to the OpenType head table fontDirectionHint field openTypeHeadLowestRecPPEM fontgate.fgFontInfo.openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field openTypeHeadModified fontgate.fgFontInfo.openTypeHeadModified Last modification date and time openTypeHheaAscender fontgate.fgFontInfo.openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field openTypeHheaCaretOffset fontgate.fgFontInfo.openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field openTypeHheaCaretSlopeRise fontgate.fgFontInfo.openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field openTypeHheaCaretSlopeRun fontgate.fgFontInfo.openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field openTypeHheaDescender fontgate.fgFontInfo.openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field openTypeHheaLineGap fontgate.fgFontInfo.openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field openTypeNameCompatibleFullName fontgate.fgFontInfo.openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18 openTypeNameDescription fontgate.fgFontInfo.openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10 openTypeNameDesigner fontgate.fgFontInfo.openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9 openTypeNameDesignerURL fontgate.fgFontInfo.openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12 openTypeNameLicense fontgate.fgFontInfo.openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13 openTypeNameLicenseURL fontgate.fgFontInfo.openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14 openTypeNameManufacturer fontgate.fgFontInfo.openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8 openTypeNameManufacturerURL fontgate.fgFontInfo.openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11 openTypeNamePreferredFamilyName fontgate.fgFontInfo.openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16 openTypeNamePreferredSubfamilyName fontgate.fgFontInfo.openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17 openTypeNameSampleText fontgate.fgFontInfo.openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 20 openTypeNameUniqueID fontgate.fgFontInfo.openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3 openTypeNameVersion fontgate.fgFontInfo.openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5 openTypeNameWWSFamilyName fontgate.fgFontInfo.openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21 openTypeNameWWSSubfamilyName fontgate.fgFontInfo.openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22 openTypeOS2CodePageRanges fontgate.fgFontInfo.openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields openTypeOS2FamilyClass fontgate.fgFontInfo.openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, should be in the range 0-14. The second number, representing the subclass, should be in the range 0-15. Corresponds to the OpenType OS/2 table sFamilyClass field openTypeOS2Panose fontgate.fgFontInfo.openTypeOS2Panose The list should contain 10 integers that represent the setting for each category in the Panose specification. This corresponds to the OpenType OS/2 table Panose field openTypeOS2Selection fontgate.fgFontInfo.openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. Corresponds to the OpenType OS/2 table selection field openTypeOS2StrikeoutPosition fontgate.fgFontInfo.openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field openTypeOS2StrikeoutSize fontgate.fgFontInfo.openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field openTypeOS2SubscriptXOffset fontgate.fgFontInfo.openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field openTypeOS2SubscriptXSize fontgate.fgFontInfo.openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field openTypeOS2SubscriptYOffset fontgate.fgFontInfo.openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field openTypeOS2SubscriptYSize fontgate.fgFontInfo.openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field openTypeOS2SuperscriptXOffset fontgate.fgFontInfo.openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field openTypeOS2SuperscriptXSize fontgate.fgFontInfo.openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field openTypeOS2SuperscriptYOffset fontgate.fgFontInfo.openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field openTypeOS2SuperscriptYSize fontgate.fgFontInfo.openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field openTypeOS2Type fontgate.fgFontInfo.openTypeOS2Type A list of bit numbers indicating the embedding type. Corresponds to the OpenType OS/2 table fsType field openTypeOS2TypoAscender fontgate.fgFontInfo.openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field openTypeOS2TypoDescender fontgate.fgFontInfo.openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field openTypeOS2TypoLineGap fontgate.fgFontInfo.openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field openTypeOS2UnicodeRanges fontgate.fgFontInfo.openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields openTypeOS2VendorID fontgate.fgFontInfo.openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field openTypeOS2WeightClass fontgate.fgFontInfo.openTypeOS2WeightClass Weight class value. Must be a positive integer. Corresponds to the OpenType OS/2 table usWeightClass field openTypeOS2WidthClass fontgate.fgFontInfo.openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field openTypeOS2WinAscent fontgate.fgFontInfo.openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field openTypeOS2WinDescent fontgate.fgFontInfo.openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field openTypeVheaCaretOffset fontgate.fgFontInfo.openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field openTypeVheaCaretSlopeRise fontgate.fgFontInfo.openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field openTypeVheaCaretSlopeRun fontgate.fgFontInfo.openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field openTypeVheaVertTypoAscender fontgate.fgFontInfo.openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field openTypeVheaVertTypoDescender fontgate.fgFontInfo.openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field openTypeVheaVertTypoLineGap fontgate.fgFontInfo.openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field postscriptBlueFuzz fontgate.fgFontInfo.postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field postscriptBlueScale fontgate.fgFontInfo.postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field postscriptBlueShift fontgate.fgFontInfo.postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field postscriptBlueValues fontgate.fgFontInfo.postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field postscriptDefaultCharacter fontgate.fgFontInfo.postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files postscriptDefaultWidthX fontgate.fgFontInfo.postscriptDefaultWidthX Default width for glyphs postscriptFamilyBlues fontgate.fgFontInfo.postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field postscriptFamilyOtherBlues fontgate.fgFontInfo.postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field postscriptFontName fontgate.fgFontInfo.postscriptFontName Name to be used for the FontName field in Type 1/CFF table postscriptForceBold fontgate.fgFontInfo.postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set postscriptFullName fontgate.fgFontInfo.postscriptFullName Name to be used for the FullName field in Type 1/CFF table postscriptIsFixedPitch fontgate.fgFontInfo.postscriptIsFixedPitch Indicates if the font is monospaced. A compiler could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field postscriptNominalWidthX fontgate.fgFontInfo.postscriptNominalWidthX Nominal width for glyphs postscriptOtherBlues fontgate.fgFontInfo.postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field postscriptSlantAngle fontgate.fgFontInfo.postscriptSlantAngle Artificial slant angle postscriptStemSnapH fontgate.fgFontInfo.postscriptStemSnapH List of horizontal stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field postscriptStemSnapV fontgate.fgFontInfo.postscriptStemSnapV List of vertical stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field postscriptUnderlinePosition fontgate.fgFontInfo.postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field postscriptUnderlineThickness fontgate.fgFontInfo.postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field postscriptUniqueID fontgate.fgFontInfo.postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification postscriptWeightName fontgate.fgFontInfo.postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value postscriptWindowsCharacterSet fontgate.fgFontInfo.postscriptWindowsCharacterSet The Windows character set. postscriptWindowsCharacterSet Options. Possible values are 1..20 styleMapFamilyName fontgate.fgFontInfo.styleMapFamilyName Family name used for bold, italic and bold italic style mapping styleMapStyleName fontgate.fgFontInfo.styleMapStyleName Styling link name. Perrmitted values are 'Regular', 'Italic', 'Bold', 'Bold Italic' (exactly as spelled). No other values are permitted styleName fontgate.fgFontInfo.styleName Style name trademark fontgate.fgFontInfo.trademark Trademark statement unitsPerEm fontgate.fgFontInfo.unitsPerEm Units per em versionMajor fontgate.fgFontInfo.versionMajor Major version versionMinor fontgate.fgFontInfo.versionMinor Minor version xHeight fontgate.fgFontInfo.xHeight x-height value year fontgate.fgFontInfo.year The year the font was created","title":"fgFontInfo"},{"location":"fontgate.fgFontInfo.html#fgfontinfo","text":"","title":"fgFontInfo"},{"location":"fontgate.fgFontInfo.html#ascender","text":"fontgate.fgFontInfo.ascender Ascender value","title":"ascender"},{"location":"fontgate.fgFontInfo.html#capheight","text":"fontgate.fgFontInfo.capHeight Cap height value","title":"capHeight"},{"location":"fontgate.fgFontInfo.html#caretoffset","text":"fontgate.fgFontInfo.caretOffset Caret offset value","title":"caretOffset"},{"location":"fontgate.fgFontInfo.html#copyright","text":"fontgate.fgFontInfo.copyright Copyright statement","title":"copyright"},{"location":"fontgate.fgFontInfo.html#descender","text":"fontgate.fgFontInfo.descender Descender value","title":"descender"},{"location":"fontgate.fgFontInfo.html#dict","text":"fontgate.fgFontInfo.dict Other font info tags and data","title":"dict"},{"location":"fontgate.fgFontInfo.html#familyname","text":"fontgate.fgFontInfo.familyName Family name","title":"familyName"},{"location":"fontgate.fgFontInfo.html#italicangle","text":"fontgate.fgFontInfo.italicAngle Italic angle","title":"italicAngle"},{"location":"fontgate.fgFontInfo.html#macintoshfondfamilyid","text":"fontgate.fgFontInfo.macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the Macintosh FOND resource","title":"macintoshFONDFamilyID"},{"location":"fontgate.fgFontInfo.html#macintoshfondname","text":"fontgate.fgFontInfo.macintoshFONDName Font name for the Macintosh FOND resource","title":"macintoshFONDName"},{"location":"fontgate.fgFontInfo.html#note","text":"fontgate.fgFontInfo.note Arbitrary note about the font","title":"note"},{"location":"fontgate.fgFontInfo.html#opentypeheadcreated","text":"fontgate.fgFontInfo.openTypeHeadCreated Creation date and time","title":"openTypeHeadCreated"},{"location":"fontgate.fgFontInfo.html#opentypeheadflags","text":"fontgate.fgFontInfo.openTypeHeadFlags A list of bit numbers indicating the flags. Corresponds to the OpenType head table flags field","title":"openTypeHeadFlags"},{"location":"fontgate.fgFontInfo.html#opentypeheadfontdirectionhint","text":"fontgate.fgFontInfo.openTypeHeadFontDirectionHint Deprecated (Set to 2). Corresponds to the OpenType head table fontDirectionHint field","title":"openTypeHeadFontDirectionHint"},{"location":"fontgate.fgFontInfo.html#opentypeheadlowestrecppem","text":"fontgate.fgFontInfo.openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field","title":"openTypeHeadLowestRecPPEM"},{"location":"fontgate.fgFontInfo.html#opentypeheadmodified","text":"fontgate.fgFontInfo.openTypeHeadModified Last modification date and time","title":"openTypeHeadModified"},{"location":"fontgate.fgFontInfo.html#opentypehheaascender","text":"fontgate.fgFontInfo.openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field","title":"openTypeHheaAscender"},{"location":"fontgate.fgFontInfo.html#opentypehheacaretoffset","text":"fontgate.fgFontInfo.openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field","title":"openTypeHheaCaretOffset"},{"location":"fontgate.fgFontInfo.html#opentypehheacaretsloperise","text":"fontgate.fgFontInfo.openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field","title":"openTypeHheaCaretSlopeRise"},{"location":"fontgate.fgFontInfo.html#opentypehheacaretsloperun","text":"fontgate.fgFontInfo.openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field","title":"openTypeHheaCaretSlopeRun"},{"location":"fontgate.fgFontInfo.html#opentypehheadescender","text":"fontgate.fgFontInfo.openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field","title":"openTypeHheaDescender"},{"location":"fontgate.fgFontInfo.html#opentypehhealinegap","text":"fontgate.fgFontInfo.openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field","title":"openTypeHheaLineGap"},{"location":"fontgate.fgFontInfo.html#opentypenamecompatiblefullname","text":"fontgate.fgFontInfo.openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18","title":"openTypeNameCompatibleFullName"},{"location":"fontgate.fgFontInfo.html#opentypenamedescription","text":"fontgate.fgFontInfo.openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10","title":"openTypeNameDescription"},{"location":"fontgate.fgFontInfo.html#opentypenamedesigner","text":"fontgate.fgFontInfo.openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9","title":"openTypeNameDesigner"},{"location":"fontgate.fgFontInfo.html#opentypenamedesignerurl","text":"fontgate.fgFontInfo.openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12","title":"openTypeNameDesignerURL"},{"location":"fontgate.fgFontInfo.html#opentypenamelicense","text":"fontgate.fgFontInfo.openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13","title":"openTypeNameLicense"},{"location":"fontgate.fgFontInfo.html#opentypenamelicenseurl","text":"fontgate.fgFontInfo.openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14","title":"openTypeNameLicenseURL"},{"location":"fontgate.fgFontInfo.html#opentypenamemanufacturer","text":"fontgate.fgFontInfo.openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8","title":"openTypeNameManufacturer"},{"location":"fontgate.fgFontInfo.html#opentypenamemanufacturerurl","text":"fontgate.fgFontInfo.openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11","title":"openTypeNameManufacturerURL"},{"location":"fontgate.fgFontInfo.html#opentypenamepreferredfamilyname","text":"fontgate.fgFontInfo.openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16","title":"openTypeNamePreferredFamilyName"},{"location":"fontgate.fgFontInfo.html#opentypenamepreferredsubfamilyname","text":"fontgate.fgFontInfo.openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17","title":"openTypeNamePreferredSubfamilyName"},{"location":"fontgate.fgFontInfo.html#opentypenamesampletext","text":"fontgate.fgFontInfo.openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 20","title":"openTypeNameSampleText"},{"location":"fontgate.fgFontInfo.html#opentypenameuniqueid","text":"fontgate.fgFontInfo.openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3","title":"openTypeNameUniqueID"},{"location":"fontgate.fgFontInfo.html#opentypenameversion","text":"fontgate.fgFontInfo.openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5","title":"openTypeNameVersion"},{"location":"fontgate.fgFontInfo.html#opentypenamewwsfamilyname","text":"fontgate.fgFontInfo.openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21","title":"openTypeNameWWSFamilyName"},{"location":"fontgate.fgFontInfo.html#opentypenamewwssubfamilyname","text":"fontgate.fgFontInfo.openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22","title":"openTypeNameWWSSubfamilyName"},{"location":"fontgate.fgFontInfo.html#opentypeos2codepageranges","text":"fontgate.fgFontInfo.openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields","title":"openTypeOS2CodePageRanges"},{"location":"fontgate.fgFontInfo.html#opentypeos2familyclass","text":"fontgate.fgFontInfo.openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, should be in the range 0-14. The second number, representing the subclass, should be in the range 0-15. Corresponds to the OpenType OS/2 table sFamilyClass field","title":"openTypeOS2FamilyClass"},{"location":"fontgate.fgFontInfo.html#opentypeos2panose","text":"fontgate.fgFontInfo.openTypeOS2Panose The list should contain 10 integers that represent the setting for each category in the Panose specification. This corresponds to the OpenType OS/2 table Panose field","title":"openTypeOS2Panose"},{"location":"fontgate.fgFontInfo.html#opentypeos2selection","text":"fontgate.fgFontInfo.openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. Corresponds to the OpenType OS/2 table selection field","title":"openTypeOS2Selection"},{"location":"fontgate.fgFontInfo.html#opentypeos2strikeoutposition","text":"fontgate.fgFontInfo.openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field","title":"openTypeOS2StrikeoutPosition"},{"location":"fontgate.fgFontInfo.html#opentypeos2strikeoutsize","text":"fontgate.fgFontInfo.openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field","title":"openTypeOS2StrikeoutSize"},{"location":"fontgate.fgFontInfo.html#opentypeos2subscriptxoffset","text":"fontgate.fgFontInfo.openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field","title":"openTypeOS2SubscriptXOffset"},{"location":"fontgate.fgFontInfo.html#opentypeos2subscriptxsize","text":"fontgate.fgFontInfo.openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field","title":"openTypeOS2SubscriptXSize"},{"location":"fontgate.fgFontInfo.html#opentypeos2subscriptyoffset","text":"fontgate.fgFontInfo.openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field","title":"openTypeOS2SubscriptYOffset"},{"location":"fontgate.fgFontInfo.html#opentypeos2subscriptysize","text":"fontgate.fgFontInfo.openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field","title":"openTypeOS2SubscriptYSize"},{"location":"fontgate.fgFontInfo.html#opentypeos2superscriptxoffset","text":"fontgate.fgFontInfo.openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field","title":"openTypeOS2SuperscriptXOffset"},{"location":"fontgate.fgFontInfo.html#opentypeos2superscriptxsize","text":"fontgate.fgFontInfo.openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field","title":"openTypeOS2SuperscriptXSize"},{"location":"fontgate.fgFontInfo.html#opentypeos2superscriptyoffset","text":"fontgate.fgFontInfo.openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field","title":"openTypeOS2SuperscriptYOffset"},{"location":"fontgate.fgFontInfo.html#opentypeos2superscriptysize","text":"fontgate.fgFontInfo.openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field","title":"openTypeOS2SuperscriptYSize"},{"location":"fontgate.fgFontInfo.html#opentypeos2type","text":"fontgate.fgFontInfo.openTypeOS2Type A list of bit numbers indicating the embedding type. Corresponds to the OpenType OS/2 table fsType field","title":"openTypeOS2Type"},{"location":"fontgate.fgFontInfo.html#opentypeos2typoascender","text":"fontgate.fgFontInfo.openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field","title":"openTypeOS2TypoAscender"},{"location":"fontgate.fgFontInfo.html#opentypeos2typodescender","text":"fontgate.fgFontInfo.openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field","title":"openTypeOS2TypoDescender"},{"location":"fontgate.fgFontInfo.html#opentypeos2typolinegap","text":"fontgate.fgFontInfo.openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field","title":"openTypeOS2TypoLineGap"},{"location":"fontgate.fgFontInfo.html#opentypeos2unicoderanges","text":"fontgate.fgFontInfo.openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields","title":"openTypeOS2UnicodeRanges"},{"location":"fontgate.fgFontInfo.html#opentypeos2vendorid","text":"fontgate.fgFontInfo.openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field","title":"openTypeOS2VendorID"},{"location":"fontgate.fgFontInfo.html#opentypeos2weightclass","text":"fontgate.fgFontInfo.openTypeOS2WeightClass Weight class value. Must be a positive integer. Corresponds to the OpenType OS/2 table usWeightClass field","title":"openTypeOS2WeightClass"},{"location":"fontgate.fgFontInfo.html#opentypeos2widthclass","text":"fontgate.fgFontInfo.openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field","title":"openTypeOS2WidthClass"},{"location":"fontgate.fgFontInfo.html#opentypeos2winascent","text":"fontgate.fgFontInfo.openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field","title":"openTypeOS2WinAscent"},{"location":"fontgate.fgFontInfo.html#opentypeos2windescent","text":"fontgate.fgFontInfo.openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field","title":"openTypeOS2WinDescent"},{"location":"fontgate.fgFontInfo.html#opentypevheacaretoffset","text":"fontgate.fgFontInfo.openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field","title":"openTypeVheaCaretOffset"},{"location":"fontgate.fgFontInfo.html#opentypevheacaretsloperise","text":"fontgate.fgFontInfo.openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field","title":"openTypeVheaCaretSlopeRise"},{"location":"fontgate.fgFontInfo.html#opentypevheacaretsloperun","text":"fontgate.fgFontInfo.openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field","title":"openTypeVheaCaretSlopeRun"},{"location":"fontgate.fgFontInfo.html#opentypevheaverttypoascender","text":"fontgate.fgFontInfo.openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field","title":"openTypeVheaVertTypoAscender"},{"location":"fontgate.fgFontInfo.html#opentypevheaverttypodescender","text":"fontgate.fgFontInfo.openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field","title":"openTypeVheaVertTypoDescender"},{"location":"fontgate.fgFontInfo.html#opentypevheaverttypolinegap","text":"fontgate.fgFontInfo.openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field","title":"openTypeVheaVertTypoLineGap"},{"location":"fontgate.fgFontInfo.html#postscriptbluefuzz","text":"fontgate.fgFontInfo.postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field","title":"postscriptBlueFuzz"},{"location":"fontgate.fgFontInfo.html#postscriptbluescale","text":"fontgate.fgFontInfo.postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field","title":"postscriptBlueScale"},{"location":"fontgate.fgFontInfo.html#postscriptblueshift","text":"fontgate.fgFontInfo.postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field","title":"postscriptBlueShift"},{"location":"fontgate.fgFontInfo.html#postscriptbluevalues","text":"fontgate.fgFontInfo.postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field","title":"postscriptBlueValues"},{"location":"fontgate.fgFontInfo.html#postscriptdefaultcharacter","text":"fontgate.fgFontInfo.postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files","title":"postscriptDefaultCharacter"},{"location":"fontgate.fgFontInfo.html#postscriptdefaultwidthx","text":"fontgate.fgFontInfo.postscriptDefaultWidthX Default width for glyphs","title":"postscriptDefaultWidthX"},{"location":"fontgate.fgFontInfo.html#postscriptfamilyblues","text":"fontgate.fgFontInfo.postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field","title":"postscriptFamilyBlues"},{"location":"fontgate.fgFontInfo.html#postscriptfamilyotherblues","text":"fontgate.fgFontInfo.postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field","title":"postscriptFamilyOtherBlues"},{"location":"fontgate.fgFontInfo.html#postscriptfontname","text":"fontgate.fgFontInfo.postscriptFontName Name to be used for the FontName field in Type 1/CFF table","title":"postscriptFontName"},{"location":"fontgate.fgFontInfo.html#postscriptforcebold","text":"fontgate.fgFontInfo.postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set","title":"postscriptForceBold"},{"location":"fontgate.fgFontInfo.html#postscriptfullname","text":"fontgate.fgFontInfo.postscriptFullName Name to be used for the FullName field in Type 1/CFF table","title":"postscriptFullName"},{"location":"fontgate.fgFontInfo.html#postscriptisfixedpitch","text":"fontgate.fgFontInfo.postscriptIsFixedPitch Indicates if the font is monospaced. A compiler could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field","title":"postscriptIsFixedPitch"},{"location":"fontgate.fgFontInfo.html#postscriptnominalwidthx","text":"fontgate.fgFontInfo.postscriptNominalWidthX Nominal width for glyphs","title":"postscriptNominalWidthX"},{"location":"fontgate.fgFontInfo.html#postscriptotherblues","text":"fontgate.fgFontInfo.postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field","title":"postscriptOtherBlues"},{"location":"fontgate.fgFontInfo.html#postscriptslantangle","text":"fontgate.fgFontInfo.postscriptSlantAngle Artificial slant angle","title":"postscriptSlantAngle"},{"location":"fontgate.fgFontInfo.html#postscriptstemsnaph","text":"fontgate.fgFontInfo.postscriptStemSnapH List of horizontal stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field","title":"postscriptStemSnapH"},{"location":"fontgate.fgFontInfo.html#postscriptstemsnapv","text":"fontgate.fgFontInfo.postscriptStemSnapV List of vertical stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field","title":"postscriptStemSnapV"},{"location":"fontgate.fgFontInfo.html#postscriptunderlineposition","text":"fontgate.fgFontInfo.postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field","title":"postscriptUnderlinePosition"},{"location":"fontgate.fgFontInfo.html#postscriptunderlinethickness","text":"fontgate.fgFontInfo.postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field","title":"postscriptUnderlineThickness"},{"location":"fontgate.fgFontInfo.html#postscriptuniqueid","text":"fontgate.fgFontInfo.postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification","title":"postscriptUniqueID"},{"location":"fontgate.fgFontInfo.html#postscriptweightname","text":"fontgate.fgFontInfo.postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value","title":"postscriptWeightName"},{"location":"fontgate.fgFontInfo.html#postscriptwindowscharacterset","text":"fontgate.fgFontInfo.postscriptWindowsCharacterSet The Windows character set. postscriptWindowsCharacterSet Options. Possible values are 1..20","title":"postscriptWindowsCharacterSet"},{"location":"fontgate.fgFontInfo.html#stylemapfamilyname","text":"fontgate.fgFontInfo.styleMapFamilyName Family name used for bold, italic and bold italic style mapping","title":"styleMapFamilyName"},{"location":"fontgate.fgFontInfo.html#stylemapstylename","text":"fontgate.fgFontInfo.styleMapStyleName Styling link name. Perrmitted values are 'Regular', 'Italic', 'Bold', 'Bold Italic' (exactly as spelled). No other values are permitted","title":"styleMapStyleName"},{"location":"fontgate.fgFontInfo.html#stylename","text":"fontgate.fgFontInfo.styleName Style name","title":"styleName"},{"location":"fontgate.fgFontInfo.html#trademark","text":"fontgate.fgFontInfo.trademark Trademark statement","title":"trademark"},{"location":"fontgate.fgFontInfo.html#unitsperem","text":"fontgate.fgFontInfo.unitsPerEm Units per em","title":"unitsPerEm"},{"location":"fontgate.fgFontInfo.html#versionmajor","text":"fontgate.fgFontInfo.versionMajor Major version","title":"versionMajor"},{"location":"fontgate.fgFontInfo.html#versionminor","text":"fontgate.fgFontInfo.versionMinor Minor version","title":"versionMinor"},{"location":"fontgate.fgFontInfo.html#xheight","text":"fontgate.fgFontInfo.xHeight x-height value","title":"xHeight"},{"location":"fontgate.fgFontInfo.html#year","text":"fontgate.fgFontInfo.year The year the font was created","title":"year"},{"location":"fontgate.fgFontInfoDict.html","text":"fgFontInfoDict fontgate.fgFontInfoDict = class fgFontInfoDict ( object ) Font info dictionaries Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors flags hinting metrics names values Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgFontInfoDict"},{"location":"fontgate.fgFontInfoDict.html#fgfontinfodict","text":"","title":"fgFontInfoDict"},{"location":"fontgate.fgGaspRecord.html","text":"fgGaspRecord fontgate.fgGaspRecord = class fgGaspRecord ( object ) GaspRecord representation Constructors: fgGaspRecord() - default fgGaspRecord(fgGaspRecord) - copy fgGaspRecord(int rangeMaxPPEM, int rangeGaspBehavior) - parametric Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) addSymmetry (...) rangeGaspBehavior (...) set (...) Descriptors DOGRAY (bool) GRIDFIT (bool) SYMMETRIC_GRIDFIT (bool) SYMMETRIC_SMOOTHING (bool) rangeMaxpPPEM (int) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T DOGRAY fontgate.fgGaspRecord.DOGRAY (bool) GRIDFIT fontgate.fgGaspRecord.GRIDFIT (bool) rangeMaxpPPEM fontgate.fgGaspRecord.rangeMaxpPPEM (int) SYMMETRIC_GRIDFIT fontgate.fgGaspRecord.SYMMETRIC_GRIDFIT (bool) SYMMETRIC_SMOOTHING fontgate.fgGaspRecord.SYMMETRIC_SMOOTHING (bool)","title":"fgGaspRecord"},{"location":"fontgate.fgGaspRecord.html#fggasprecord","text":"","title":"fgGaspRecord"},{"location":"fontgate.fgGaspRecord.html#dogray","text":"fontgate.fgGaspRecord.DOGRAY (bool)","title":"DOGRAY"},{"location":"fontgate.fgGaspRecord.html#gridfit","text":"fontgate.fgGaspRecord.GRIDFIT (bool)","title":"GRIDFIT"},{"location":"fontgate.fgGaspRecord.html#rangemaxpppem","text":"fontgate.fgGaspRecord.rangeMaxpPPEM (int)","title":"rangeMaxpPPEM"},{"location":"fontgate.fgGaspRecord.html#symmetric_gridfit","text":"fontgate.fgGaspRecord.SYMMETRIC_GRIDFIT (bool)","title":"SYMMETRIC_GRIDFIT"},{"location":"fontgate.fgGaspRecord.html#symmetric_smoothing","text":"fontgate.fgGaspRecord.SYMMETRIC_SMOOTHING (bool)","title":"SYMMETRIC_SMOOTHING"},{"location":"fontgate.fgGaspRecords.html","text":"fgGaspRecords fontgate.fgGaspRecords = class fgGaspRecords ( object ) list of fgGaspRecord objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgGaspRecords.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgGaspRecords.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgGaspRecords.clean = clean (...) clean() - delete all items del fontgate.fgGaspRecords.del = del (...) del(index) - delete item by index insert fontgate.fgGaspRecords.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgGaspRecords"},{"location":"fontgate.fgGaspRecords.html#fggasprecords","text":"","title":"fgGaspRecords"},{"location":"fontgate.fgGaspRecords.html#append","text":"fontgate.fgGaspRecords.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgGaspRecords.html#aslist","text":"fontgate.fgGaspRecords.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgGaspRecords.html#clean","text":"fontgate.fgGaspRecords.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgGaspRecords.html#del","text":"fontgate.fgGaspRecords.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgGaspRecords.html#insert","text":"fontgate.fgGaspRecords.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgGlyph.html","text":"fgGlyph fontgate.fgGlyph = class fgGlyph ( object ) Glyph representation Constructors: fgGlyph() - default fgGlyph(fgGlyph) - copy fgGlyph('name') - create by name Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. addUnicode (...) addUnicode (unicode) - add unicode to glyph append (...) append (fgGlyph[, mtx=fgMatrix()]) - append contours of source glyph to current glyph clear (...) clear (contours=true, components=true, anchors=true, guides=true, hints=true) - clear glyph's data countPictures (...) int countPictures () - return count of glyph pictures createContour (...) fgContour createContour () - create new contour createData (...) (variable type) createData (GlyphDataType) - create glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' decompose (...) bool decompose () - decompose glyph deleteContour (...) deleteContour (contourIndex) - delete contour by index draw (...) draw (penObject[, fgMatrix]) - draw contour by penObject (like fgPen) with transform matrix fgMatrix fgData (...) fgFontGateData/Nothing fgData () - get dtFontGate data if it's exist fgDataCreate (...) fgFontGateData fgDataCreate () - get dtFontGate data (create new one if missing) fixComposites (...) bool fixComposites (fixRotation=false) getData (...) (variable type) getData ([GlyphDataType='dtFontGate']) - get glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' getPen (...) fgPen getPen () - create new pen object hasBody (...) bool hasBody () - return True if glyph has contours or picture hasColors (...) bool hasColors () - return True if glyph has color pictures hasData (...) bool hasData (GlyphDataType) - return True if glyph data, specified by GlyphDataType, is exist. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' hasHints (...) bool hasHints () - return True if glyph has hints hasPictures (...) bool hasPictures () - return True if glyph has pictures hasUnicode (...) bool hasUnicode (unicode) - return True if glyph has specified unicode keepData (...) bool keepData (GlyphDataType) - remove all glyph data, except one specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' killData (...) bool killData (GlyphDataType) - remove glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' killUnicode (...) killUnicode (unicode) - remove unicode from glyph modified (...) modified (GlyphDataType) - inform that glyph data GlyphDataType has been modified. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' move (...) move (dx, dy) - move contour by (dx, dy) removeOverlap (...) removeOverlap () setData (...) setData (GlyphData-like object) - set glyph data setUnicode (...) setUnicode (unicode) - assign unicode to glyph transform (...) transform (fgMatrix) - transform glyph by fgMatrix data ttData (...) fgTrueTypeData/Nothing ttData () - get dtTrueType data if it's exist ttDataCreate (...) fgTrueTypeData ttDataCreate () - get dtTrueType data (create new one if missing) update (...) update () Descriptors activeLayer (fgLayer) active layer or Nothing if not found anchors ([ fgAnchor ]) anchor's list bodyLayer (fgLayer) layer 'Body' or Nothing if not found bodyLayerStrict (fgLayer) layer 'Body' (create one if not found) box (fgRect) glyph bounding box (int values) carets ([ fgCaret ]) caret's list components ([ fgComponent ]) component's list dict (fgGlyphDict) glyph's data dictionary fbox (fgRect) glyph bounding box (int/float values) guides ([ fgGuide ]) guide's list height (float) advancedHeight hints ([ fgHint ]) hint's list id (long) glyph ID image (fgBitmap) first glyph image index (int) glyph index from font.tableIndex kerningLeft (int) kerningRight (int) layer (fgLayer) working layer (if present) or None. Read-only attribute, use layerName='string'|index to change layerName (string) name of the working layer name layers ([ fgLayer ]) layer's list leftMargin lib (fgLib) additional glyph's data mark (int) glyph's mark value mask (fgGlyph/Nothing) mask glyph metrics (fgPoint) advancedWidth and advancedHeight name (string) glyph name note (string) otInfo (fgOtInfo) parent (fgFont) parent font for glyph rightMargin unicode (int/Nothing) first glyph's unicode or Nothing if unicodes aren't defined unicodes ([ int ]) unicode's list vsb (float) vsb width (float) advancedWidth Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T activeLayer fontgate.fgGlyph.activeLayer (fgLayer) active layer or Nothing if not found addUnicode fontgate.fgGlyph.addUnicode = addUnicode (...) addUnicode(unicode) - add unicode to glyph anchors fontgate.fgGlyph.anchors ([ fgAnchor ]) anchor's list append fontgate.fgGlyph.append = append (...) append(fgGlyph[, mtx=fgMatrix()]) - append contours of source glyph to current glyph bodyLayer fontgate.fgGlyph.bodyLayer (fgLayer) layer 'Body' or Nothing if not found bodyLayerStrict fontgate.fgGlyph.bodyLayerStrict (fgLayer) layer 'Body' (create one if not found) box fontgate.fgGlyph.box (fgRect) glyph bounding box (int values) carets fontgate.fgGlyph.carets ([ fgCaret ]) caret's list clear fontgate.fgGlyph.clear = clear (...) clear(contours=true, components=true, anchors=true, guides=true, hints=true) - clear glyph's data components fontgate.fgGlyph.components ([ fgComponent ]) component's list countPictures fontgate.fgGlyph.countPictures = countPictures (...) int countPictures() - return count of glyph pictures createContour fontgate.fgGlyph.createContour = createContour (...) fgContour createContour() - create new contour createData fontgate.fgGlyph.createData = createData (...) (variable type) createData(GlyphDataType) - create glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' decompose fontgate.fgGlyph.decompose = decompose (...) bool decompose() - decompose glyph deleteContour fontgate.fgGlyph.deleteContour = deleteContour (...) deleteContour(contourIndex) - delete contour by index dict fontgate.fgGlyph.dict (fgGlyphDict) glyph's data dictionary draw fontgate.fgGlyph.draw = draw (...) draw(penObject[, fgMatrix]) - draw contour by penObject (like fgPen) with transform matrix fgMatrix fbox fontgate.fgGlyph.fbox (fgRect) glyph bounding box (int/float values) fgData fontgate.fgGlyph.fgData = fgData (...) fgFontGateData/Nothing fgData() - get dtFontGate data if it's exist fgDataCreate fontgate.fgGlyph.fgDataCreate = fgDataCreate (...) fgFontGateData fgDataCreate() - get dtFontGate data (create new one if missing) fixComposites fontgate.fgGlyph.fixComposites = fixComposites (...) bool fixComposites(fixRotation=false) getData fontgate.fgGlyph.getData = getData (...) (variable type) getData([GlyphDataType='dtFontGate']) - get glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' getPen fontgate.fgGlyph.getPen = getPen (...) fgPen getPen() - create new pen object guides fontgate.fgGlyph.guides ([ fgGuide ]) guide's list hasBody fontgate.fgGlyph.hasBody = hasBody (...) bool hasBody() - return True if glyph has contours or picture hasColors fontgate.fgGlyph.hasColors = hasColors (...) bool hasColors() - return True if glyph has color pictures hasData fontgate.fgGlyph.hasData = hasData (...) bool hasData(GlyphDataType) - return True if glyph data, specified by GlyphDataType, is exist. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' hasHints fontgate.fgGlyph.hasHints = hasHints (...) bool hasHints() - return True if glyph has hints hasPictures fontgate.fgGlyph.hasPictures = hasPictures (...) bool hasPictures() - return True if glyph has pictures hasUnicode fontgate.fgGlyph.hasUnicode = hasUnicode (...) bool hasUnicode(unicode) - return True if glyph has specified unicode height fontgate.fgGlyph.height (float) advancedHeight hints fontgate.fgGlyph.hints ([ fgHint ]) hint's list id fontgate.fgGlyph.id (long) glyph ID image fontgate.fgGlyph.image (fgBitmap) first glyph image index fontgate.fgGlyph.index (int) glyph index from font.tableIndex keepData fontgate.fgGlyph.keepData = keepData (...) bool keepData(GlyphDataType) - remove all glyph data, except one specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' kerningLeft fontgate.fgGlyph.kerningLeft (int) kerningRight fontgate.fgGlyph.kerningRight (int) killData fontgate.fgGlyph.killData = killData (...) bool killData(GlyphDataType) - remove glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' killUnicode fontgate.fgGlyph.killUnicode = killUnicode (...) killUnicode(unicode) - remove unicode from glyph layer fontgate.fgGlyph.layer (fgLayer) working layer (if present) or None. Read-only attribute, use layerName='string'|index to change layerName fontgate.fgGlyph.layerName (string) name of the working layer name layers fontgate.fgGlyph.layers ([ fgLayer ]) layer's list lib fontgate.fgGlyph.lib (fgLib) additional glyph's data mark fontgate.fgGlyph.mark (int) glyph's mark value mask fontgate.fgGlyph.mask (fgGlyph/Nothing) mask glyph metrics fontgate.fgGlyph.metrics (fgPoint) advancedWidth and advancedHeight modified fontgate.fgGlyph.modified = modified (...) modified(GlyphDataType) - inform that glyph data GlyphDataType has been modified. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' move fontgate.fgGlyph.move = move (...) move(dx, dy) - move contour by (dx, dy) name fontgate.fgGlyph.name (string) glyph name note fontgate.fgGlyph.note (string) otInfo fontgate.fgGlyph.otInfo (fgOtInfo) parent fontgate.fgGlyph.parent (fgFont) parent font for glyph removeOverlap fontgate.fgGlyph.removeOverlap = removeOverlap (...) removeOverlap() setData fontgate.fgGlyph.setData = setData (...) setData(GlyphData-like object) - set glyph data setUnicode fontgate.fgGlyph.setUnicode = setUnicode (...) setUnicode(unicode) - assign unicode to glyph transform fontgate.fgGlyph.transform = transform (...) transform(fgMatrix) - transform glyph by fgMatrix data ttData fontgate.fgGlyph.ttData = ttData (...) fgTrueTypeData/Nothing ttData() - get dtTrueType data if it's exist ttDataCreate fontgate.fgGlyph.ttDataCreate = ttDataCreate (...) fgTrueTypeData ttDataCreate() - get dtTrueType data (create new one if missing) unicode fontgate.fgGlyph.unicode (int/Nothing) first glyph's unicode or Nothing if unicodes aren't defined unicodes fontgate.fgGlyph.unicodes ([ int ]) unicode's list update fontgate.fgGlyph.update = update (...) update() vsb fontgate.fgGlyph.vsb (float) vsb width fontgate.fgGlyph.width (float) advancedWidth","title":"fgGlyph"},{"location":"fontgate.fgGlyph.html#fgglyph","text":"","title":"fgGlyph"},{"location":"fontgate.fgGlyph.html#activelayer","text":"fontgate.fgGlyph.activeLayer (fgLayer) active layer or Nothing if not found","title":"activeLayer"},{"location":"fontgate.fgGlyph.html#addunicode","text":"fontgate.fgGlyph.addUnicode = addUnicode (...) addUnicode(unicode) - add unicode to glyph","title":"addUnicode"},{"location":"fontgate.fgGlyph.html#anchors","text":"fontgate.fgGlyph.anchors ([ fgAnchor ]) anchor's list","title":"anchors"},{"location":"fontgate.fgGlyph.html#append","text":"fontgate.fgGlyph.append = append (...) append(fgGlyph[, mtx=fgMatrix()]) - append contours of source glyph to current glyph","title":"append"},{"location":"fontgate.fgGlyph.html#bodylayer","text":"fontgate.fgGlyph.bodyLayer (fgLayer) layer 'Body' or Nothing if not found","title":"bodyLayer"},{"location":"fontgate.fgGlyph.html#bodylayerstrict","text":"fontgate.fgGlyph.bodyLayerStrict (fgLayer) layer 'Body' (create one if not found)","title":"bodyLayerStrict"},{"location":"fontgate.fgGlyph.html#box","text":"fontgate.fgGlyph.box (fgRect) glyph bounding box (int values)","title":"box"},{"location":"fontgate.fgGlyph.html#carets","text":"fontgate.fgGlyph.carets ([ fgCaret ]) caret's list","title":"carets"},{"location":"fontgate.fgGlyph.html#clear","text":"fontgate.fgGlyph.clear = clear (...) clear(contours=true, components=true, anchors=true, guides=true, hints=true) - clear glyph's data","title":"clear"},{"location":"fontgate.fgGlyph.html#components","text":"fontgate.fgGlyph.components ([ fgComponent ]) component's list","title":"components"},{"location":"fontgate.fgGlyph.html#countpictures","text":"fontgate.fgGlyph.countPictures = countPictures (...) int countPictures() - return count of glyph pictures","title":"countPictures"},{"location":"fontgate.fgGlyph.html#createcontour","text":"fontgate.fgGlyph.createContour = createContour (...) fgContour createContour() - create new contour","title":"createContour"},{"location":"fontgate.fgGlyph.html#createdata","text":"fontgate.fgGlyph.createData = createData (...) (variable type) createData(GlyphDataType) - create glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps'","title":"createData"},{"location":"fontgate.fgGlyph.html#decompose","text":"fontgate.fgGlyph.decompose = decompose (...) bool decompose() - decompose glyph","title":"decompose"},{"location":"fontgate.fgGlyph.html#deletecontour","text":"fontgate.fgGlyph.deleteContour = deleteContour (...) deleteContour(contourIndex) - delete contour by index","title":"deleteContour"},{"location":"fontgate.fgGlyph.html#dict","text":"fontgate.fgGlyph.dict (fgGlyphDict) glyph's data dictionary","title":"dict"},{"location":"fontgate.fgGlyph.html#draw","text":"fontgate.fgGlyph.draw = draw (...) draw(penObject[, fgMatrix]) - draw contour by penObject (like fgPen) with transform matrix fgMatrix","title":"draw"},{"location":"fontgate.fgGlyph.html#fbox","text":"fontgate.fgGlyph.fbox (fgRect) glyph bounding box (int/float values)","title":"fbox"},{"location":"fontgate.fgGlyph.html#fgdata","text":"fontgate.fgGlyph.fgData = fgData (...) fgFontGateData/Nothing fgData() - get dtFontGate data if it's exist","title":"fgData"},{"location":"fontgate.fgGlyph.html#fgdatacreate","text":"fontgate.fgGlyph.fgDataCreate = fgDataCreate (...) fgFontGateData fgDataCreate() - get dtFontGate data (create new one if missing)","title":"fgDataCreate"},{"location":"fontgate.fgGlyph.html#fixcomposites","text":"fontgate.fgGlyph.fixComposites = fixComposites (...) bool fixComposites(fixRotation=false)","title":"fixComposites"},{"location":"fontgate.fgGlyph.html#getdata","text":"fontgate.fgGlyph.getData = getData (...) (variable type) getData([GlyphDataType='dtFontGate']) - get glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps'","title":"getData"},{"location":"fontgate.fgGlyph.html#getpen","text":"fontgate.fgGlyph.getPen = getPen (...) fgPen getPen() - create new pen object","title":"getPen"},{"location":"fontgate.fgGlyph.html#guides","text":"fontgate.fgGlyph.guides ([ fgGuide ]) guide's list","title":"guides"},{"location":"fontgate.fgGlyph.html#hasbody","text":"fontgate.fgGlyph.hasBody = hasBody (...) bool hasBody() - return True if glyph has contours or picture","title":"hasBody"},{"location":"fontgate.fgGlyph.html#hascolors","text":"fontgate.fgGlyph.hasColors = hasColors (...) bool hasColors() - return True if glyph has color pictures","title":"hasColors"},{"location":"fontgate.fgGlyph.html#hasdata","text":"fontgate.fgGlyph.hasData = hasData (...) bool hasData(GlyphDataType) - return True if glyph data, specified by GlyphDataType, is exist. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps'","title":"hasData"},{"location":"fontgate.fgGlyph.html#hashints","text":"fontgate.fgGlyph.hasHints = hasHints (...) bool hasHints() - return True if glyph has hints","title":"hasHints"},{"location":"fontgate.fgGlyph.html#haspictures","text":"fontgate.fgGlyph.hasPictures = hasPictures (...) bool hasPictures() - return True if glyph has pictures","title":"hasPictures"},{"location":"fontgate.fgGlyph.html#hasunicode","text":"fontgate.fgGlyph.hasUnicode = hasUnicode (...) bool hasUnicode(unicode) - return True if glyph has specified unicode","title":"hasUnicode"},{"location":"fontgate.fgGlyph.html#height","text":"fontgate.fgGlyph.height (float) advancedHeight","title":"height"},{"location":"fontgate.fgGlyph.html#hints","text":"fontgate.fgGlyph.hints ([ fgHint ]) hint's list","title":"hints"},{"location":"fontgate.fgGlyph.html#id","text":"fontgate.fgGlyph.id (long) glyph ID","title":"id"},{"location":"fontgate.fgGlyph.html#image","text":"fontgate.fgGlyph.image (fgBitmap) first glyph image","title":"image"},{"location":"fontgate.fgGlyph.html#index","text":"fontgate.fgGlyph.index (int) glyph index from font.tableIndex","title":"index"},{"location":"fontgate.fgGlyph.html#keepdata","text":"fontgate.fgGlyph.keepData = keepData (...) bool keepData(GlyphDataType) - remove all glyph data, except one specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps'","title":"keepData"},{"location":"fontgate.fgGlyph.html#kerningleft","text":"fontgate.fgGlyph.kerningLeft (int)","title":"kerningLeft"},{"location":"fontgate.fgGlyph.html#kerningright","text":"fontgate.fgGlyph.kerningRight (int)","title":"kerningRight"},{"location":"fontgate.fgGlyph.html#killdata","text":"fontgate.fgGlyph.killData = killData (...) bool killData(GlyphDataType) - remove glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps'","title":"killData"},{"location":"fontgate.fgGlyph.html#killunicode","text":"fontgate.fgGlyph.killUnicode = killUnicode (...) killUnicode(unicode) - remove unicode from glyph","title":"killUnicode"},{"location":"fontgate.fgGlyph.html#layer","text":"fontgate.fgGlyph.layer (fgLayer) working layer (if present) or None. Read-only attribute, use layerName='string'|index to change","title":"layer"},{"location":"fontgate.fgGlyph.html#layername","text":"fontgate.fgGlyph.layerName (string) name of the working layer name","title":"layerName"},{"location":"fontgate.fgGlyph.html#layers","text":"fontgate.fgGlyph.layers ([ fgLayer ]) layer's list","title":"layers"},{"location":"fontgate.fgGlyph.html#lib","text":"fontgate.fgGlyph.lib (fgLib) additional glyph's data","title":"lib"},{"location":"fontgate.fgGlyph.html#mark","text":"fontgate.fgGlyph.mark (int) glyph's mark value","title":"mark"},{"location":"fontgate.fgGlyph.html#mask","text":"fontgate.fgGlyph.mask (fgGlyph/Nothing) mask glyph","title":"mask"},{"location":"fontgate.fgGlyph.html#metrics","text":"fontgate.fgGlyph.metrics (fgPoint) advancedWidth and advancedHeight","title":"metrics"},{"location":"fontgate.fgGlyph.html#modified","text":"fontgate.fgGlyph.modified = modified (...) modified(GlyphDataType) - inform that glyph data GlyphDataType has been modified. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps'","title":"modified"},{"location":"fontgate.fgGlyph.html#move","text":"fontgate.fgGlyph.move = move (...) move(dx, dy) - move contour by (dx, dy)","title":"move"},{"location":"fontgate.fgGlyph.html#name","text":"fontgate.fgGlyph.name (string) glyph name","title":"name"},{"location":"fontgate.fgGlyph.html#note","text":"fontgate.fgGlyph.note (string)","title":"note"},{"location":"fontgate.fgGlyph.html#otinfo","text":"fontgate.fgGlyph.otInfo (fgOtInfo)","title":"otInfo"},{"location":"fontgate.fgGlyph.html#parent","text":"fontgate.fgGlyph.parent (fgFont) parent font for glyph","title":"parent"},{"location":"fontgate.fgGlyph.html#removeoverlap","text":"fontgate.fgGlyph.removeOverlap = removeOverlap (...) removeOverlap()","title":"removeOverlap"},{"location":"fontgate.fgGlyph.html#setdata","text":"fontgate.fgGlyph.setData = setData (...) setData(GlyphData-like object) - set glyph data","title":"setData"},{"location":"fontgate.fgGlyph.html#setunicode","text":"fontgate.fgGlyph.setUnicode = setUnicode (...) setUnicode(unicode) - assign unicode to glyph","title":"setUnicode"},{"location":"fontgate.fgGlyph.html#transform","text":"fontgate.fgGlyph.transform = transform (...) transform(fgMatrix) - transform glyph by fgMatrix data","title":"transform"},{"location":"fontgate.fgGlyph.html#ttdata","text":"fontgate.fgGlyph.ttData = ttData (...) fgTrueTypeData/Nothing ttData() - get dtTrueType data if it's exist","title":"ttData"},{"location":"fontgate.fgGlyph.html#ttdatacreate","text":"fontgate.fgGlyph.ttDataCreate = ttDataCreate (...) fgTrueTypeData ttDataCreate() - get dtTrueType data (create new one if missing)","title":"ttDataCreate"},{"location":"fontgate.fgGlyph.html#unicode","text":"fontgate.fgGlyph.unicode (int/Nothing) first glyph's unicode or Nothing if unicodes aren't defined","title":"unicode"},{"location":"fontgate.fgGlyph.html#unicodes","text":"fontgate.fgGlyph.unicodes ([ int ]) unicode's list","title":"unicodes"},{"location":"fontgate.fgGlyph.html#update","text":"fontgate.fgGlyph.update = update (...) update()","title":"update"},{"location":"fontgate.fgGlyph.html#vsb","text":"fontgate.fgGlyph.vsb (float) vsb","title":"vsb"},{"location":"fontgate.fgGlyph.html#width","text":"fontgate.fgGlyph.width (float) advancedWidth","title":"width"},{"location":"fontgate.fgGlyphData.html","text":"fgGlyphData fontgate.fgGlyphData = class fgGlyphData ( object ) GlyphData representation Constructors: fgGlyphData() - default fgGlyphData(fgGlyphData) - copy Methods OK (...) bool OK () - return true if status is gdsOK __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value bad (...) bool bad () - return true if status isn't gdsOK boundingBox (...) fgRect boundingBox (fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box copy (...) fgGlyphData copy () - create alone copy of data countPictures (...) int countPictures () - return pictures count countShapes (...) int countShapes () - return shapes count getFontGateData (...) fgFontGateData getFontGateData () - return Nothing getType (...) string getType () - return 'dtTrueType' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present modified (...) bool modified () - return true if data was changed setParent (...) setParent (fgGlyph) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform (fgMatrix) - transform data updated (...) updated () - mark data as changed, reset internal caches Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T bad fontgate.fgGlyphData.bad = bad (...) bool bad() - return true if status isn't gdsOK boundingBox fontgate.fgGlyphData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box copy fontgate.fgGlyphData.copy = copy (...) fgGlyphData copy() - create alone copy of data countPictures fontgate.fgGlyphData.countPictures = countPictures (...) int countPictures() - return pictures count countShapes fontgate.fgGlyphData.countShapes = countShapes (...) int countShapes() - return shapes count getFontGateData fontgate.fgGlyphData.getFontGateData = getFontGateData (...) fgFontGateData getFontGateData() - return Nothing getType fontgate.fgGlyphData.getType = getType (...) string getType() - return 'dtTrueType' hasBody fontgate.fgGlyphData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present hasColors fontgate.fgGlyphData.hasColors = hasColors (...) bool hasColors() - return true if colors is present hasHints fontgate.fgGlyphData.hasHints = hasHints (...) bool hasHints() - return true if hints is present hasPictures fontgate.fgGlyphData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present modified fontgate.fgGlyphData.modified = modified (...) bool modified() - return true if data was changed OK fontgate.fgGlyphData.OK = OK (...) bool OK() - return true if status is gdsOK setParent fontgate.fgGlyphData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph status fontgate.fgGlyphData.status = status (...) 'gdsOK'/'gdsInvalid' status() transform fontgate.fgGlyphData.transform = transform (...) transform(fgMatrix) - transform data updated fontgate.fgGlyphData.updated = updated (...) updated() - mark data as changed, reset internal caches","title":"fgGlyphData"},{"location":"fontgate.fgGlyphData.html#fgglyphdata","text":"","title":"fgGlyphData"},{"location":"fontgate.fgGlyphData.html#bad","text":"fontgate.fgGlyphData.bad = bad (...) bool bad() - return true if status isn't gdsOK","title":"bad"},{"location":"fontgate.fgGlyphData.html#boundingbox","text":"fontgate.fgGlyphData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box","title":"boundingBox"},{"location":"fontgate.fgGlyphData.html#copy","text":"fontgate.fgGlyphData.copy = copy (...) fgGlyphData copy() - create alone copy of data","title":"copy"},{"location":"fontgate.fgGlyphData.html#countpictures","text":"fontgate.fgGlyphData.countPictures = countPictures (...) int countPictures() - return pictures count","title":"countPictures"},{"location":"fontgate.fgGlyphData.html#countshapes","text":"fontgate.fgGlyphData.countShapes = countShapes (...) int countShapes() - return shapes count","title":"countShapes"},{"location":"fontgate.fgGlyphData.html#getfontgatedata","text":"fontgate.fgGlyphData.getFontGateData = getFontGateData (...) fgFontGateData getFontGateData() - return Nothing","title":"getFontGateData"},{"location":"fontgate.fgGlyphData.html#gettype","text":"fontgate.fgGlyphData.getType = getType (...) string getType() - return 'dtTrueType'","title":"getType"},{"location":"fontgate.fgGlyphData.html#hasbody","text":"fontgate.fgGlyphData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present","title":"hasBody"},{"location":"fontgate.fgGlyphData.html#hascolors","text":"fontgate.fgGlyphData.hasColors = hasColors (...) bool hasColors() - return true if colors is present","title":"hasColors"},{"location":"fontgate.fgGlyphData.html#hashints","text":"fontgate.fgGlyphData.hasHints = hasHints (...) bool hasHints() - return true if hints is present","title":"hasHints"},{"location":"fontgate.fgGlyphData.html#haspictures","text":"fontgate.fgGlyphData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present","title":"hasPictures"},{"location":"fontgate.fgGlyphData.html#modified","text":"fontgate.fgGlyphData.modified = modified (...) bool modified() - return true if data was changed","title":"modified"},{"location":"fontgate.fgGlyphData.html#ok","text":"fontgate.fgGlyphData.OK = OK (...) bool OK() - return true if status is gdsOK","title":"OK"},{"location":"fontgate.fgGlyphData.html#setparent","text":"fontgate.fgGlyphData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph","title":"setParent"},{"location":"fontgate.fgGlyphData.html#status","text":"fontgate.fgGlyphData.status = status (...) 'gdsOK'/'gdsInvalid' status()","title":"status"},{"location":"fontgate.fgGlyphData.html#transform","text":"fontgate.fgGlyphData.transform = transform (...) transform(fgMatrix) - transform data","title":"transform"},{"location":"fontgate.fgGlyphData.html#updated","text":"fontgate.fgGlyphData.updated = updated (...) updated() - mark data as changed, reset internal caches","title":"updated"},{"location":"fontgate.fgGlyphDict.html","text":"fgGlyphDict fontgate.fgGlyphDict = class fgGlyphDict ( object ) Glyph dictionaries Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors flags lib tags values Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgGlyphDict"},{"location":"fontgate.fgGlyphDict.html#fgglyphdict","text":"","title":"fgGlyphDict"},{"location":"fontgate.fgGlyphIDsSet.html","text":"fgGlyphIDsSet fontgate.fgGlyphIDsSet = class fgGlyphIDsSet ( object ) GlyphIDs set Constructors: fgGlyphIDsSet() - default fgGlyphIDsSet(fgGlyphIDsSet) - copy Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asList (...) [ int ] asList () - return set as list clean (...) clean () - remove all id's from set contains (...) bool contains (int id) - return True if set contains id del (...) del (int id) - remove id from set Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asList fontgate.fgGlyphIDsSet.asList = asList (...) [ int ] asList() - return set as list clean fontgate.fgGlyphIDsSet.clean = clean (...) clean() - remove all id's from set contains fontgate.fgGlyphIDsSet.contains = contains (...) bool contains(int id) - return True if set contains id del fontgate.fgGlyphIDsSet.del = del (...) del(int id) - remove id from set","title":"fgGlyphIDsSet"},{"location":"fontgate.fgGlyphIDsSet.html#fgglyphidsset","text":"","title":"fgGlyphIDsSet"},{"location":"fontgate.fgGlyphIDsSet.html#aslist","text":"fontgate.fgGlyphIDsSet.asList = asList (...) [ int ] asList() - return set as list","title":"asList"},{"location":"fontgate.fgGlyphIDsSet.html#clean","text":"fontgate.fgGlyphIDsSet.clean = clean (...) clean() - remove all id's from set","title":"clean"},{"location":"fontgate.fgGlyphIDsSet.html#contains","text":"fontgate.fgGlyphIDsSet.contains = contains (...) bool contains(int id) - return True if set contains id","title":"contains"},{"location":"fontgate.fgGlyphIDsSet.html#del","text":"fontgate.fgGlyphIDsSet.del = del (...) del(int id) - remove id from set","title":"del"},{"location":"fontgate.fgGlyphs.html","text":"fgGlyphs fontgate.fgGlyphs = class fgGlyphs ( object ) list of fgGlyph objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgGlyphs"},{"location":"fontgate.fgGlyphs.html#fgglyphs","text":"","title":"fgGlyphs"},{"location":"fontgate.fgGlyphsR.html","text":"fgGlyphsR fontgate.fgGlyphsR = class fgGlyphsR ( object ) fgGlyphsR representation Constructors: fgGlyphsR() - default fgGlyphsR(fgGlyphsR) - copy fgGlyphsR(fgGlyphs) - create from list(fgGlyph) Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) find (...) fgGlyph find (name|unicode) getStats (...) (totalGlyphs, avgNodesCount, avgContoursCount) getStats () glyph (...) fgGlyph glyph (int index) glyphByID (...) fgGlyph glyphByID (int ID) index (...) int index (fgGlyph) indexByID (...) int index (int ID) rebuildUnicodeMap (...) rebuildUnicodeMap () Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T find fontgate.fgGlyphsR.find = find (...) fgGlyph find(name|unicode) getStats fontgate.fgGlyphsR.getStats = getStats (...) (totalGlyphs, avgNodesCount, avgContoursCount) getStats() glyph fontgate.fgGlyphsR.glyph = glyph (...) fgGlyph glyph(int index) glyphByID fontgate.fgGlyphsR.glyphByID = glyphByID (...) fgGlyph glyphByID(int ID) index fontgate.fgGlyphsR.index = index (...) int index(fgGlyph) indexByID fontgate.fgGlyphsR.indexByID = indexByID (...) int index(int ID) rebuildUnicodeMap fontgate.fgGlyphsR.rebuildUnicodeMap = rebuildUnicodeMap (...) rebuildUnicodeMap()","title":"fgGlyphsR"},{"location":"fontgate.fgGlyphsR.html#fgglyphsr","text":"","title":"fgGlyphsR"},{"location":"fontgate.fgGlyphsR.html#find","text":"fontgate.fgGlyphsR.find = find (...) fgGlyph find(name|unicode)","title":"find"},{"location":"fontgate.fgGlyphsR.html#getstats","text":"fontgate.fgGlyphsR.getStats = getStats (...) (totalGlyphs, avgNodesCount, avgContoursCount) getStats()","title":"getStats"},{"location":"fontgate.fgGlyphsR.html#glyph","text":"fontgate.fgGlyphsR.glyph = glyph (...) fgGlyph glyph(int index)","title":"glyph"},{"location":"fontgate.fgGlyphsR.html#glyphbyid","text":"fontgate.fgGlyphsR.glyphByID = glyphByID (...) fgGlyph glyphByID(int ID)","title":"glyphByID"},{"location":"fontgate.fgGlyphsR.html#index","text":"fontgate.fgGlyphsR.index = index (...) int index(fgGlyph)","title":"index"},{"location":"fontgate.fgGlyphsR.html#indexbyid","text":"fontgate.fgGlyphsR.indexByID = indexByID (...) int index(int ID)","title":"indexByID"},{"location":"fontgate.fgGlyphsR.html#rebuildunicodemap","text":"fontgate.fgGlyphsR.rebuildUnicodeMap = rebuildUnicodeMap (...) rebuildUnicodeMap()","title":"rebuildUnicodeMap"},{"location":"fontgate.fgGroup.html","text":"fgGroup fontgate.fgGroup = class fgGroup ( object ) Kerning/Metrics group Constructors: fgGroup() - default fgGroup(fgGroup) - copy fgGroup( tuple('name', list(ids), mode, 'mainglyphname') ) - parametric possible values for mode are 'FeaClassGroupMode', 'KernLeftGroupMode', 'KernRightGroupMode', 'KernBothSideGroupMode' Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. isBoth (...) True if group mode is 'KernBothSideGroupMode' isFeaGroup (...) True if group mode is 'FeaClassGroupMode' isLeft (...) True if group mode is 'KernLeftGroupMode' or 'KernBothSideGroupMode' isRight (...) True if group mode is 'KernRightGroupMode' or 'KernBothSideGroupMode' Descriptors id (int) group id mode ('FeaClassGroupMode'/'KernLeftGroupMode'/'KernRightGroupMode'/'KernBothSideGroupMode') group mode name (string) group name Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T id fontgate.fgGroup.id (int) group id isBoth fontgate.fgGroup.isBoth = isBoth (...) True if group mode is 'KernBothSideGroupMode' isFeaGroup fontgate.fgGroup.isFeaGroup = isFeaGroup (...) True if group mode is 'FeaClassGroupMode' isLeft fontgate.fgGroup.isLeft = isLeft (...) True if group mode is 'KernLeftGroupMode' or 'KernBothSideGroupMode' isRight fontgate.fgGroup.isRight = isRight (...) True if group mode is 'KernRightGroupMode' or 'KernBothSideGroupMode' mode fontgate.fgGroup.mode ('FeaClassGroupMode'/'KernLeftGroupMode'/'KernRightGroupMode'/'KernBothSideGroupMode') group mode name fontgate.fgGroup.name (string) group name","title":"fgGroup"},{"location":"fontgate.fgGroup.html#fggroup","text":"","title":"fgGroup"},{"location":"fontgate.fgGroup.html#id","text":"fontgate.fgGroup.id (int) group id","title":"id"},{"location":"fontgate.fgGroup.html#isboth","text":"fontgate.fgGroup.isBoth = isBoth (...) True if group mode is 'KernBothSideGroupMode'","title":"isBoth"},{"location":"fontgate.fgGroup.html#isfeagroup","text":"fontgate.fgGroup.isFeaGroup = isFeaGroup (...) True if group mode is 'FeaClassGroupMode'","title":"isFeaGroup"},{"location":"fontgate.fgGroup.html#isleft","text":"fontgate.fgGroup.isLeft = isLeft (...) True if group mode is 'KernLeftGroupMode' or 'KernBothSideGroupMode'","title":"isLeft"},{"location":"fontgate.fgGroup.html#isright","text":"fontgate.fgGroup.isRight = isRight (...) True if group mode is 'KernRightGroupMode' or 'KernBothSideGroupMode'","title":"isRight"},{"location":"fontgate.fgGroup.html#mode","text":"fontgate.fgGroup.mode ('FeaClassGroupMode'/'KernLeftGroupMode'/'KernRightGroupMode'/'KernBothSideGroupMode') group mode","title":"mode"},{"location":"fontgate.fgGroup.html#name","text":"fontgate.fgGroup.name (string) group name","title":"name"},{"location":"fontgate.fgGroups.html","text":"fgGroups fontgate.fgGroups = class fgGroups ( object ) Glyph groups list Constructors: fgGroups() - default fgGroups(fgDataOwnerData) - parametric Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) dict('name' : fgGroup) asDict () clear (...) clear () fromClassRecords (...) fromDict (...) fromDict (dict('name':fgGroup)) get (...) fgGroup get ('name') getAsClassRecords (...) getCompiled (...) string getCompiled () has_key (...) bool has_key ('name') items (...) list(tuple('name', fgGroup)) items () keys (...) list(names of group) keys () remove (...) bool remove ('name') rename (...) bool rename ('old_name', 'new_name') values (...) list(fgGroup) values () Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgGroups.asDict = asDict (...) dict('name' : fgGroup) asDict() clear fontgate.fgGroups.clear = clear (...) clear() fromDict fontgate.fgGroups.fromDict = fromDict (...) fromDict(dict('name':fgGroup)) get fontgate.fgGroups.get = get (...) fgGroup get('name') getCompiled fontgate.fgGroups.getCompiled = getCompiled (...) string getCompiled() has_key fontgate.fgGroups.has_key = has_key (...) bool has_key('name') items fontgate.fgGroups.items = items (...) list(tuple('name', fgGroup)) items() keys fontgate.fgGroups.keys = keys (...) list(names of group) keys() remove fontgate.fgGroups.remove = remove (...) bool remove('name') rename fontgate.fgGroups.rename = rename (...) bool rename('old_name', 'new_name') values fontgate.fgGroups.values = values (...) list(fgGroup) values()","title":"fgGroups"},{"location":"fontgate.fgGroups.html#fggroups","text":"","title":"fgGroups"},{"location":"fontgate.fgGroups.html#asdict","text":"fontgate.fgGroups.asDict = asDict (...) dict('name' : fgGroup) asDict()","title":"asDict"},{"location":"fontgate.fgGroups.html#clear","text":"fontgate.fgGroups.clear = clear (...) clear()","title":"clear"},{"location":"fontgate.fgGroups.html#fromdict","text":"fontgate.fgGroups.fromDict = fromDict (...) fromDict(dict('name':fgGroup))","title":"fromDict"},{"location":"fontgate.fgGroups.html#get","text":"fontgate.fgGroups.get = get (...) fgGroup get('name')","title":"get"},{"location":"fontgate.fgGroups.html#getcompiled","text":"fontgate.fgGroups.getCompiled = getCompiled (...) string getCompiled()","title":"getCompiled"},{"location":"fontgate.fgGroups.html#has_key","text":"fontgate.fgGroups.has_key = has_key (...) bool has_key('name')","title":"has_key"},{"location":"fontgate.fgGroups.html#items","text":"fontgate.fgGroups.items = items (...) list(tuple('name', fgGroup)) items()","title":"items"},{"location":"fontgate.fgGroups.html#keys","text":"fontgate.fgGroups.keys = keys (...) list(names of group) keys()","title":"keys"},{"location":"fontgate.fgGroups.html#remove","text":"fontgate.fgGroups.remove = remove (...) bool remove('name')","title":"remove"},{"location":"fontgate.fgGroups.html#rename","text":"fontgate.fgGroups.rename = rename (...) bool rename('old_name', 'new_name')","title":"rename"},{"location":"fontgate.fgGroups.html#values","text":"fontgate.fgGroups.values = values (...) list(fgGroup) values()","title":"values"},{"location":"fontgate.fgGuide.html","text":"fgGuide fontgate.fgGuide = class fgGuide ( object ) Guide representation Constructors: fgGuide() - default fgGuide(fgGuide) - copy fgGuide(float pos[, bool horizontal = false]) fgGuide(fgPoint p0, fgPoint p1[, name=''[, horizonta=false[, color=fgColor]]]) Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value copy (...) fgGuide copy () - copy object Descriptors color (fgColor) horizontal True if guide is horizontal index (int) index in owner guides list name (string) guide name p0 (fgPoint) p1 (fgPoint) position (int) y value of p0, p1 if guide is horizontal, x value - if vertical, none if guide nor horizontal/vertical vertical True if guide is vertical Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T color fontgate.fgGuide.color (fgColor) copy fontgate.fgGuide.copy = copy (...) fgGuide copy() - copy object horizontal fontgate.fgGuide.horizontal True if guide is horizontal index fontgate.fgGuide.index (int) index in owner guides list name fontgate.fgGuide.name (string) guide name p0 fontgate.fgGuide.p0 (fgPoint) p1 fontgate.fgGuide.p1 (fgPoint) position fontgate.fgGuide.position (int) y value of p0, p1 if guide is horizontal, x value - if vertical, none if guide nor horizontal/vertical vertical fontgate.fgGuide.vertical True if guide is vertical","title":"fgGuide"},{"location":"fontgate.fgGuide.html#fgguide","text":"","title":"fgGuide"},{"location":"fontgate.fgGuide.html#color","text":"fontgate.fgGuide.color (fgColor)","title":"color"},{"location":"fontgate.fgGuide.html#copy","text":"fontgate.fgGuide.copy = copy (...) fgGuide copy() - copy object","title":"copy"},{"location":"fontgate.fgGuide.html#horizontal","text":"fontgate.fgGuide.horizontal True if guide is horizontal","title":"horizontal"},{"location":"fontgate.fgGuide.html#index","text":"fontgate.fgGuide.index (int) index in owner guides list","title":"index"},{"location":"fontgate.fgGuide.html#name","text":"fontgate.fgGuide.name (string) guide name","title":"name"},{"location":"fontgate.fgGuide.html#p0","text":"fontgate.fgGuide.p0 (fgPoint)","title":"p0"},{"location":"fontgate.fgGuide.html#p1","text":"fontgate.fgGuide.p1 (fgPoint)","title":"p1"},{"location":"fontgate.fgGuide.html#position","text":"fontgate.fgGuide.position (int) y value of p0, p1 if guide is horizontal, x value - if vertical, none if guide nor horizontal/vertical","title":"position"},{"location":"fontgate.fgGuide.html#vertical","text":"fontgate.fgGuide.vertical True if guide is vertical","title":"vertical"},{"location":"fontgate.fgGuides.html","text":"fgGuides fontgate.fgGuides = class fgGuides ( object ) list of fgGuide objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position remove (...) remove (fgPoint p0, fgPoint p1) - remove item if it's points are equal to specified removeHV (...) removeHV (float position, bool horizontal) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgGuides.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgGuides.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgGuides.clean = clean (...) clean() - delete all items del fontgate.fgGuides.del = del (...) del(index) - delete item by index insert fontgate.fgGuides.insert = insert (...) insert(position, item) - insert item into list at specified position remove fontgate.fgGuides.remove = remove (...) remove(fgPoint p0, fgPoint p1) - remove item if it's points are equal to specified removeHV fontgate.fgGuides.removeHV = removeHV (...) removeHV(float position, bool horizontal)","title":"fgGuides"},{"location":"fontgate.fgGuides.html#fgguides","text":"","title":"fgGuides"},{"location":"fontgate.fgGuides.html#append","text":"fontgate.fgGuides.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgGuides.html#aslist","text":"fontgate.fgGuides.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgGuides.html#clean","text":"fontgate.fgGuides.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgGuides.html#del","text":"fontgate.fgGuides.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgGuides.html#insert","text":"fontgate.fgGuides.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgGuides.html#remove","text":"fontgate.fgGuides.remove = remove (...) remove(fgPoint p0, fgPoint p1) - remove item if it's points are equal to specified","title":"remove"},{"location":"fontgate.fgGuides.html#removehv","text":"fontgate.fgGuides.removeHV = removeHV (...) removeHV(float position, bool horizontal)","title":"removeHV"},{"location":"fontgate.fgHint.html","text":"fgHint fontgate.fgHint = class fgHint ( object ) Hint representation Constructors: fgHint() - default fgHint(fgHint) - copy fgHint(name= , v= , dv= , point0= , point1= , p0= , p1= , points0= , points1= , horizontal= ) Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value copy (...) Descriptors dv (float) horizontal (bool) index (int) index from owner's hints list name (string) hint name p0 (float) p1 (float) point0 (string) point1 (string) points0 ([int]) points1 ([int]) v (float) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T dv fontgate.fgHint.dv (float) horizontal fontgate.fgHint.horizontal (bool) index fontgate.fgHint.index (int) index from owner's hints list name fontgate.fgHint.name (string) hint name p0 fontgate.fgHint.p0 (float) p1 fontgate.fgHint.p1 (float) point0 fontgate.fgHint.point0 (string) point1 fontgate.fgHint.point1 (string) points0 fontgate.fgHint.points0 ([int]) points1 fontgate.fgHint.points1 ([int]) v fontgate.fgHint.v (float)","title":"fgHint"},{"location":"fontgate.fgHint.html#fghint","text":"","title":"fgHint"},{"location":"fontgate.fgHint.html#dv","text":"fontgate.fgHint.dv (float)","title":"dv"},{"location":"fontgate.fgHint.html#horizontal","text":"fontgate.fgHint.horizontal (bool)","title":"horizontal"},{"location":"fontgate.fgHint.html#index","text":"fontgate.fgHint.index (int) index from owner's hints list","title":"index"},{"location":"fontgate.fgHint.html#name","text":"fontgate.fgHint.name (string) hint name","title":"name"},{"location":"fontgate.fgHint.html#p0","text":"fontgate.fgHint.p0 (float)","title":"p0"},{"location":"fontgate.fgHint.html#p1","text":"fontgate.fgHint.p1 (float)","title":"p1"},{"location":"fontgate.fgHint.html#point0","text":"fontgate.fgHint.point0 (string)","title":"point0"},{"location":"fontgate.fgHint.html#point1","text":"fontgate.fgHint.point1 (string)","title":"point1"},{"location":"fontgate.fgHint.html#points0","text":"fontgate.fgHint.points0 ([int])","title":"points0"},{"location":"fontgate.fgHint.html#points1","text":"fontgate.fgHint.points1 ([int])","title":"points1"},{"location":"fontgate.fgHint.html#v","text":"fontgate.fgHint.v (float)","title":"v"},{"location":"fontgate.fgHintCommand.html","text":"fgHintCommand fontgate.fgHintCommand = class fgHintCommand ( object ) HintCommand representation Constructors: fgHintCommand() - default fgHintCommand(fgHintCommand) - copy fgHintCommand(code, index) - parametric, possible values for code are 'none'/'hintH'/'hintV'/'replace' Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors code ('none'/'hintH'/'hintV'/'replace') code index (int) pointName (string) subrIndex (int) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T code fontgate.fgHintCommand.code ('none'/'hintH'/'hintV'/'replace') code index fontgate.fgHintCommand.index (int) pointName fontgate.fgHintCommand.pointName (string) subrIndex fontgate.fgHintCommand.subrIndex (int)","title":"fgHintCommand"},{"location":"fontgate.fgHintCommand.html#fghintcommand","text":"","title":"fgHintCommand"},{"location":"fontgate.fgHintCommand.html#code","text":"fontgate.fgHintCommand.code ('none'/'hintH'/'hintV'/'replace') code","title":"code"},{"location":"fontgate.fgHintCommand.html#index","text":"fontgate.fgHintCommand.index (int)","title":"index"},{"location":"fontgate.fgHintCommand.html#pointname","text":"fontgate.fgHintCommand.pointName (string)","title":"pointName"},{"location":"fontgate.fgHintCommand.html#subrindex","text":"fontgate.fgHintCommand.subrIndex (int)","title":"subrIndex"},{"location":"fontgate.fgHintCommands.html","text":"fgHintCommands fontgate.fgHintCommands = class fgHintCommands ( object ) list of fgHintCommand objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgHintCommands"},{"location":"fontgate.fgHintCommands.html#fghintcommands","text":"","title":"fgHintCommands"},{"location":"fontgate.fgHints.html","text":"fgHints fontgate.fgHints = class fgHints ( object ) list of fgHint objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index getAsDict (...) dict(items) getAsDict () getAsList (...) insert (...) insert (position, item) - insert item into list at specified position removeByName (...) removeByName ('name') removeHV (...) removeHV (float v, float dv, bool horizontal) setFromDict (...) setFromDict (dict(items)) setFromList (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgHints.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgHints.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgHints.clean = clean (...) clean() - delete all items del fontgate.fgHints.del = del (...) del(index) - delete item by index getAsDict fontgate.fgHints.getAsDict = getAsDict (...) dict(items) getAsDict() insert fontgate.fgHints.insert = insert (...) insert(position, item) - insert item into list at specified position removeByName fontgate.fgHints.removeByName = removeByName (...) removeByName('name') removeHV fontgate.fgHints.removeHV = removeHV (...) removeHV(float v, float dv, bool horizontal) setFromDict fontgate.fgHints.setFromDict = setFromDict (...) setFromDict(dict(items))","title":"fgHints"},{"location":"fontgate.fgHints.html#fghints","text":"","title":"fgHints"},{"location":"fontgate.fgHints.html#append","text":"fontgate.fgHints.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgHints.html#aslist","text":"fontgate.fgHints.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgHints.html#clean","text":"fontgate.fgHints.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgHints.html#del","text":"fontgate.fgHints.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgHints.html#getasdict","text":"fontgate.fgHints.getAsDict = getAsDict (...) dict(items) getAsDict()","title":"getAsDict"},{"location":"fontgate.fgHints.html#insert","text":"fontgate.fgHints.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgHints.html#removebyname","text":"fontgate.fgHints.removeByName = removeByName (...) removeByName('name')","title":"removeByName"},{"location":"fontgate.fgHints.html#removehv","text":"fontgate.fgHints.removeHV = removeHV (...) removeHV(float v, float dv, bool horizontal)","title":"removeHV"},{"location":"fontgate.fgHints.html#setfromdict","text":"fontgate.fgHints.setFromDict = setFromDict (...) setFromDict(dict(items))","title":"setFromDict"},{"location":"fontgate.fgIntDict.html","text":"fgIntDict fontgate.fgIntDict = class fgIntDict ( object ) int dictionary Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgIntDict"},{"location":"fontgate.fgIntDict.html#fgintdict","text":"","title":"fgIntDict"},{"location":"fontgate.fgKerning.html","text":"fgKerning fontgate.fgKerning = class fgKerning ( object ) Kerning representation Constructors: fgKerning(fgDataOwnerData) Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. addGroup (...) asDict (...) dict(fgKerningObjectPair : float) asDict () clear (...) deleteAllGroups (...) deleteGroup (...) get (...) float get (fgKerningObjectPair / tuple('name1', 'name2')) - get kerning value getPlainPairs (...) getPlainPairsDict (...) hasGroupKerning (...) has_key (...) bool has_key (fgKerningObjectPair) items (...) list( tuple(fgKerningObjectPair, float) ) items () keys (...) list(fgKerningObjectPair) keys () remove (...) renameGroup (...) scale (...) setPlainPairs (...) values (...) list( float ) values () Descriptors groups Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgKerning.asDict = asDict (...) dict(fgKerningObjectPair : float) asDict() get fontgate.fgKerning.get = get (...) float get(fgKerningObjectPair / tuple('name1', 'name2')) - get kerning value has_key fontgate.fgKerning.has_key = has_key (...) bool has_key(fgKerningObjectPair) items fontgate.fgKerning.items = items (...) list( tuple(fgKerningObjectPair, float) ) items() keys fontgate.fgKerning.keys = keys (...) list(fgKerningObjectPair) keys() values fontgate.fgKerning.values = values (...) list( float ) values()","title":"fgKerning"},{"location":"fontgate.fgKerning.html#fgkerning","text":"","title":"fgKerning"},{"location":"fontgate.fgKerning.html#asdict","text":"fontgate.fgKerning.asDict = asDict (...) dict(fgKerningObjectPair : float) asDict()","title":"asDict"},{"location":"fontgate.fgKerning.html#get","text":"fontgate.fgKerning.get = get (...) float get(fgKerningObjectPair / tuple('name1', 'name2')) - get kerning value","title":"get"},{"location":"fontgate.fgKerning.html#has_key","text":"fontgate.fgKerning.has_key = has_key (...) bool has_key(fgKerningObjectPair)","title":"has_key"},{"location":"fontgate.fgKerning.html#items","text":"fontgate.fgKerning.items = items (...) list( tuple(fgKerningObjectPair, float) ) items()","title":"items"},{"location":"fontgate.fgKerning.html#keys","text":"fontgate.fgKerning.keys = keys (...) list(fgKerningObjectPair) keys()","title":"keys"},{"location":"fontgate.fgKerning.html#values","text":"fontgate.fgKerning.values = values (...) list( float ) values()","title":"values"},{"location":"fontgate.fgKerningGroups.html","text":"fgKerningGroups fontgate.fgKerningGroups = class fgKerningGroups ( object ) Dictionary of kerning groups Constructors: fgKerningGroups(fgDataOwnerData) - default Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) represent object as dictionary clear (...) clear () - delete all items has_key (...) bool has_key ('groupName') items (...) list( tuple('groupName', tuple( list('glyphName'), mode ) ) items () keys (...) list('groupName') keys () remove (...) remove ('groupName'[, deleteDependentKerningPairs = false]) rename (...) bool/Nothing rename ('oldGroupName', 'newGroupName') values (...) list ( tuple( list('glyphName'), mode ) ) values () Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgKerningGroups.asDict = asDict (...) represent object as dictionary clear fontgate.fgKerningGroups.clear = clear (...) clear() - delete all items has_key fontgate.fgKerningGroups.has_key = has_key (...) bool has_key('groupName') items fontgate.fgKerningGroups.items = items (...) list( tuple('groupName', tuple( list('glyphName'), mode ) ) items() keys fontgate.fgKerningGroups.keys = keys (...) list('groupName') keys() remove fontgate.fgKerningGroups.remove = remove (...) remove('groupName'[, deleteDependentKerningPairs = false]) rename fontgate.fgKerningGroups.rename = rename (...) bool/Nothing rename('oldGroupName', 'newGroupName') values fontgate.fgKerningGroups.values = values (...) list ( tuple( list('glyphName'), mode ) ) values()","title":"fgKerningGroups"},{"location":"fontgate.fgKerningGroups.html#fgkerninggroups","text":"","title":"fgKerningGroups"},{"location":"fontgate.fgKerningGroups.html#asdict","text":"fontgate.fgKerningGroups.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgKerningGroups.html#clear","text":"fontgate.fgKerningGroups.clear = clear (...) clear() - delete all items","title":"clear"},{"location":"fontgate.fgKerningGroups.html#has_key","text":"fontgate.fgKerningGroups.has_key = has_key (...) bool has_key('groupName')","title":"has_key"},{"location":"fontgate.fgKerningGroups.html#items","text":"fontgate.fgKerningGroups.items = items (...) list( tuple('groupName', tuple( list('glyphName'), mode ) ) items()","title":"items"},{"location":"fontgate.fgKerningGroups.html#keys","text":"fontgate.fgKerningGroups.keys = keys (...) list('groupName') keys()","title":"keys"},{"location":"fontgate.fgKerningGroups.html#remove","text":"fontgate.fgKerningGroups.remove = remove (...) remove('groupName'[, deleteDependentKerningPairs = false])","title":"remove"},{"location":"fontgate.fgKerningGroups.html#rename","text":"fontgate.fgKerningGroups.rename = rename (...) bool/Nothing rename('oldGroupName', 'newGroupName')","title":"rename"},{"location":"fontgate.fgKerningGroups.html#values","text":"fontgate.fgKerningGroups.values = values (...) list ( tuple( list('glyphName'), mode ) ) values()","title":"values"},{"location":"fontgate.fgKerningObject.html","text":"fgKerningObject fontgate.fgKerningObject = class fgKerningObject ( object ) KerningObject representation Constructors: fgKerningObject() - default fgKerningObject(fgKerningObject) - copy fgKerningObject('name', mode) - mode must be one of 'glyphMode'/'groupMode' Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors id (string) glyph or group name mode ('glyphMode'/'groupMode') Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgKerningObject.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgKerningObject.asTuple = asTuple (...) represent object as tuple id fontgate.fgKerningObject.id (string) glyph or group name mode fontgate.fgKerningObject.mode ('glyphMode'/'groupMode')","title":"fgKerningObject"},{"location":"fontgate.fgKerningObject.html#fgkerningobject","text":"","title":"fgKerningObject"},{"location":"fontgate.fgKerningObject.html#asdict","text":"fontgate.fgKerningObject.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgKerningObject.html#astuple","text":"fontgate.fgKerningObject.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgKerningObject.html#id","text":"fontgate.fgKerningObject.id (string) glyph or group name","title":"id"},{"location":"fontgate.fgKerningObject.html#mode","text":"fontgate.fgKerningObject.mode ('glyphMode'/'groupMode')","title":"mode"},{"location":"fontgate.fgKerningObjectPair.html","text":"fgKerningObjectPair fontgate.fgKerningObjectPair = class fgKerningObjectPair ( object ) KerningObjectPair representation Constructors: fgKerningObjectPair() - default fgKerningObjectPair(fgKerningObjectPair) - copy fgKerningObjectPair( tuple(fgKerningObject, fgKerningObject) ) fgKerningObjectPair('nameLeft', 'nameRight') fgKerningObjectPair(fgKerningObject, fgKerningObject) fgKerningObjectPair('nameLeft', 'nameRight', modeLeft, modeRight) - modeLeft, modeRight must be one of 'glyphMode'/'groupMode' Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __hash__ (...) x. __hash__ () < ==> hash(x) __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors left (fgKerningObject) - left glyph or group right (fgKerningObject) - right glyph or group Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgKerningObjectPair.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgKerningObjectPair.asTuple = asTuple (...) represent object as tuple left fontgate.fgKerningObjectPair.left (fgKerningObject) - left glyph or group right fontgate.fgKerningObjectPair.right (fgKerningObject) - right glyph or group","title":"fgKerningObjectPair"},{"location":"fontgate.fgKerningObjectPair.html#fgkerningobjectpair","text":"","title":"fgKerningObjectPair"},{"location":"fontgate.fgKerningObjectPair.html#asdict","text":"fontgate.fgKerningObjectPair.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgKerningObjectPair.html#astuple","text":"fontgate.fgKerningObjectPair.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgKerningObjectPair.html#left","text":"fontgate.fgKerningObjectPair.left (fgKerningObject) - left glyph or group","title":"left"},{"location":"fontgate.fgKerningObjectPair.html#right","text":"fontgate.fgKerningObjectPair.right (fgKerningObject) - right glyph or group","title":"right"},{"location":"fontgate.fgLayer.html","text":"fgLayer fontgate.fgLayer = class fgLayer ( object ) Layer representation Constructors: fgLayer() - default fgLayer(fgLayer) - copy fgLayer('name') - create named layer Math operation: fgLayer + fgLayer fgLayer - fgLayer Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __rsub__ (...) x. __rsub__ (y) < ==> y-x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __sub__ (...) x. __sub__ (y) < ==> x-y addContour (...) fgContour addContour (fgContour) - add contour to layer boundingBox (...) fgRect/Nothing boundingBox (fgMatrix[, prepareExport = false]) checkContours (...) checkContours () countContours (...) int countContours () countHints (...) int countHints (bool horizontal) countNodes (...) int countNodes () countPictures (...) int countPictures () countShapes (...) int countShapes () findHint (...) int findHint (fgHint) findNode (...) fgNode/Nothing findNode (nodeIndex / 'nodeName') - find name by index or name hasColors (...) bool hasColors () hasHints (...) bool hasHints () hasPictures (...) bool hasPictures () hints2links (...) hints2links (double tolerance[, fgCuspPoints]) indexToName (...) 'nodeName' indexToName (int nodeIndex) isCompatible (...) bool/Nothing isCompatible (flLayer) nameToIndex (...) int nameToIndex ('nodeName') prepareNodeNames (...) prepareNodeNames () removeHints (...) removeHints (bool horizontal) transform (...) transform (const Matrix & mx[, apply = true]) Descriptors active (bool) anchors (fgAnchors) guides (fgGuides) hints (fgHints) hintsProgram (fgHintCommands) locked (bool) matrix (fgMatrix) name (string) opacity (float) reference (fgPoint) service (bool) visible (bool) wireframe (bool) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T active fontgate.fgLayer.active (bool) addContour fontgate.fgLayer.addContour = addContour (...) fgContour addContour(fgContour) - add contour to layer anchors fontgate.fgLayer.anchors (fgAnchors) boundingBox fontgate.fgLayer.boundingBox = boundingBox (...) fgRect/Nothing boundingBox(fgMatrix[, prepareExport = false]) checkContours fontgate.fgLayer.checkContours = checkContours (...) checkContours() countContours fontgate.fgLayer.countContours = countContours (...) int countContours() countHints fontgate.fgLayer.countHints = countHints (...) int countHints(bool horizontal) countNodes fontgate.fgLayer.countNodes = countNodes (...) int countNodes() countPictures fontgate.fgLayer.countPictures = countPictures (...) int countPictures() countShapes fontgate.fgLayer.countShapes = countShapes (...) int countShapes() findHint fontgate.fgLayer.findHint = findHint (...) int findHint(fgHint) findNode fontgate.fgLayer.findNode = findNode (...) fgNode/Nothing findNode(nodeIndex / 'nodeName') - find name by index or name guides fontgate.fgLayer.guides (fgGuides) hasColors fontgate.fgLayer.hasColors = hasColors (...) bool hasColors() hasHints fontgate.fgLayer.hasHints = hasHints (...) bool hasHints() hasPictures fontgate.fgLayer.hasPictures = hasPictures (...) bool hasPictures() hints fontgate.fgLayer.hints (fgHints) hints2links fontgate.fgLayer.hints2links = hints2links (...) hints2links(double tolerance[, fgCuspPoints]) hintsProgram fontgate.fgLayer.hintsProgram (fgHintCommands) indexToName fontgate.fgLayer.indexToName = indexToName (...) 'nodeName' indexToName(int nodeIndex) isCompatible fontgate.fgLayer.isCompatible = isCompatible (...) bool/Nothing isCompatible(flLayer) locked fontgate.fgLayer.locked (bool) matrix fontgate.fgLayer.matrix (fgMatrix) name fontgate.fgLayer.name (string) nameToIndex fontgate.fgLayer.nameToIndex = nameToIndex (...) int nameToIndex('nodeName') opacity fontgate.fgLayer.opacity (float) prepareNodeNames fontgate.fgLayer.prepareNodeNames = prepareNodeNames (...) prepareNodeNames() reference fontgate.fgLayer.reference (fgPoint) removeHints fontgate.fgLayer.removeHints = removeHints (...) removeHints(bool horizontal) service fontgate.fgLayer.service (bool) transform fontgate.fgLayer.transform = transform (...) transform(const Matrix & mx[, apply = true]) visible fontgate.fgLayer.visible (bool) wireframe fontgate.fgLayer.wireframe (bool)","title":"fgLayer"},{"location":"fontgate.fgLayer.html#fglayer","text":"","title":"fgLayer"},{"location":"fontgate.fgLayer.html#active","text":"fontgate.fgLayer.active (bool)","title":"active"},{"location":"fontgate.fgLayer.html#addcontour","text":"fontgate.fgLayer.addContour = addContour (...) fgContour addContour(fgContour) - add contour to layer","title":"addContour"},{"location":"fontgate.fgLayer.html#anchors","text":"fontgate.fgLayer.anchors (fgAnchors)","title":"anchors"},{"location":"fontgate.fgLayer.html#boundingbox","text":"fontgate.fgLayer.boundingBox = boundingBox (...) fgRect/Nothing boundingBox(fgMatrix[, prepareExport = false])","title":"boundingBox"},{"location":"fontgate.fgLayer.html#checkcontours","text":"fontgate.fgLayer.checkContours = checkContours (...) checkContours()","title":"checkContours"},{"location":"fontgate.fgLayer.html#countcontours","text":"fontgate.fgLayer.countContours = countContours (...) int countContours()","title":"countContours"},{"location":"fontgate.fgLayer.html#counthints","text":"fontgate.fgLayer.countHints = countHints (...) int countHints(bool horizontal)","title":"countHints"},{"location":"fontgate.fgLayer.html#countnodes","text":"fontgate.fgLayer.countNodes = countNodes (...) int countNodes()","title":"countNodes"},{"location":"fontgate.fgLayer.html#countpictures","text":"fontgate.fgLayer.countPictures = countPictures (...) int countPictures()","title":"countPictures"},{"location":"fontgate.fgLayer.html#countshapes","text":"fontgate.fgLayer.countShapes = countShapes (...) int countShapes()","title":"countShapes"},{"location":"fontgate.fgLayer.html#findhint","text":"fontgate.fgLayer.findHint = findHint (...) int findHint(fgHint)","title":"findHint"},{"location":"fontgate.fgLayer.html#findnode","text":"fontgate.fgLayer.findNode = findNode (...) fgNode/Nothing findNode(nodeIndex / 'nodeName') - find name by index or name","title":"findNode"},{"location":"fontgate.fgLayer.html#guides","text":"fontgate.fgLayer.guides (fgGuides)","title":"guides"},{"location":"fontgate.fgLayer.html#hascolors","text":"fontgate.fgLayer.hasColors = hasColors (...) bool hasColors()","title":"hasColors"},{"location":"fontgate.fgLayer.html#hashints","text":"fontgate.fgLayer.hasHints = hasHints (...) bool hasHints()","title":"hasHints"},{"location":"fontgate.fgLayer.html#haspictures","text":"fontgate.fgLayer.hasPictures = hasPictures (...) bool hasPictures()","title":"hasPictures"},{"location":"fontgate.fgLayer.html#hints","text":"fontgate.fgLayer.hints (fgHints)","title":"hints"},{"location":"fontgate.fgLayer.html#hints2links","text":"fontgate.fgLayer.hints2links = hints2links (...) hints2links(double tolerance[, fgCuspPoints])","title":"hints2links"},{"location":"fontgate.fgLayer.html#hintsprogram","text":"fontgate.fgLayer.hintsProgram (fgHintCommands)","title":"hintsProgram"},{"location":"fontgate.fgLayer.html#indextoname","text":"fontgate.fgLayer.indexToName = indexToName (...) 'nodeName' indexToName(int nodeIndex)","title":"indexToName"},{"location":"fontgate.fgLayer.html#iscompatible","text":"fontgate.fgLayer.isCompatible = isCompatible (...) bool/Nothing isCompatible(flLayer)","title":"isCompatible"},{"location":"fontgate.fgLayer.html#locked","text":"fontgate.fgLayer.locked (bool)","title":"locked"},{"location":"fontgate.fgLayer.html#matrix","text":"fontgate.fgLayer.matrix (fgMatrix)","title":"matrix"},{"location":"fontgate.fgLayer.html#name","text":"fontgate.fgLayer.name (string)","title":"name"},{"location":"fontgate.fgLayer.html#nametoindex","text":"fontgate.fgLayer.nameToIndex = nameToIndex (...) int nameToIndex('nodeName')","title":"nameToIndex"},{"location":"fontgate.fgLayer.html#opacity","text":"fontgate.fgLayer.opacity (float)","title":"opacity"},{"location":"fontgate.fgLayer.html#preparenodenames","text":"fontgate.fgLayer.prepareNodeNames = prepareNodeNames (...) prepareNodeNames()","title":"prepareNodeNames"},{"location":"fontgate.fgLayer.html#reference","text":"fontgate.fgLayer.reference (fgPoint)","title":"reference"},{"location":"fontgate.fgLayer.html#removehints","text":"fontgate.fgLayer.removeHints = removeHints (...) removeHints(bool horizontal)","title":"removeHints"},{"location":"fontgate.fgLayer.html#service","text":"fontgate.fgLayer.service (bool)","title":"service"},{"location":"fontgate.fgLayer.html#transform","text":"fontgate.fgLayer.transform = transform (...) transform(const Matrix & mx[, apply = true])","title":"transform"},{"location":"fontgate.fgLayer.html#visible","text":"fontgate.fgLayer.visible (bool)","title":"visible"},{"location":"fontgate.fgLayer.html#wireframe","text":"fontgate.fgLayer.wireframe (bool)","title":"wireframe"},{"location":"fontgate.fgLayers.html","text":"fgLayers fontgate.fgLayers = class fgLayers ( object ) list of fgLayer objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgLayers"},{"location":"fontgate.fgLayers.html#fglayers","text":"","title":"fgLayers"},{"location":"fontgate.fgLib.html","text":"fgLib fontgate.fgLib = class fgLib ( object ) Dictionary with font- or glyph-related data Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y clear (...) get (...) hasKey (...) items (...) keys (...) update (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgLib"},{"location":"fontgate.fgLib.html#fglib","text":"","title":"fgLib"},{"location":"fontgate.fgMapBytes.html","text":"fgMapBytes fontgate.fgMapBytes = class fgMapBytes ( object ) Raw data dictionary Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgMapBytes"},{"location":"fontgate.fgMapBytes.html#fgmapbytes","text":"","title":"fgMapBytes"},{"location":"fontgate.fgMaster.html","text":"fgMaster fontgate.fgMaster = class fgMaster ( object ) Anchor representation Constructors: fgMaster() - default fgMaster(fgMaster) - copy fgMaster('name') - create with name='name' Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors name (string) - name penColor (int) - penColor position (fgDesignPosition) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T name fontgate.fgMaster.name (string) - name penColor fontgate.fgMaster.penColor (int) - penColor position fontgate.fgMaster.position (fgDesignPosition)","title":"fgMaster"},{"location":"fontgate.fgMaster.html#fgmaster","text":"","title":"fgMaster"},{"location":"fontgate.fgMaster.html#name","text":"fontgate.fgMaster.name (string) - name","title":"name"},{"location":"fontgate.fgMaster.html#pencolor","text":"fontgate.fgMaster.penColor (int) - penColor","title":"penColor"},{"location":"fontgate.fgMaster.html#position","text":"fontgate.fgMaster.position (fgDesignPosition)","title":"position"},{"location":"fontgate.fgMasters.html","text":"fgMasters fontgate.fgMasters = class fgMasters ( object ) list of fgMaster objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgMasters.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgMasters.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgMasters.clean = clean (...) clean() - delete all items del fontgate.fgMasters.del = del (...) del(index) - delete item by index insert fontgate.fgMasters.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgMasters"},{"location":"fontgate.fgMasters.html#fgmasters","text":"","title":"fgMasters"},{"location":"fontgate.fgMasters.html#append","text":"fontgate.fgMasters.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgMasters.html#aslist","text":"fontgate.fgMasters.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgMasters.html#clean","text":"fontgate.fgMasters.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgMasters.html#del","text":"fontgate.fgMasters.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgMasters.html#insert","text":"fontgate.fgMasters.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgMatrix.html","text":"fgMatrix fontgate.fgMatrix = class fgMatrix ( object ) Transformation matrix representation Constructors: fgMatrix() - default fgMatrix(fgMatrix) - copy fgMatrix(float m11, float m12, float m21, float m22, float dx, float dy) Math operation: fgMatrix * fgMatrix Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (y) < ==> x*y __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign (fgMatrix) or assign (m11, m12, m21, m22, dx, dy) determinant (...) float determinant () invert (...) bool invert () inverted (...) fgMatrix inverted () invertible (...) bool invertible () noMove (...) bool noMove () noRotate (...) bool noRotate () noScale (...) bool noScale () scale (...) scale (float s) slant (...) slant (float angle) or float slant () standard (...) bool standard () Descriptors dx dy m11 m12 m21 m22 Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgMatrix.asDict = asDict (...) represent object as dictionary assign fontgate.fgMatrix.assign = assign (...) assign(fgMatrix) or assign(m11, m12, m21, m22, dx, dy) asTuple fontgate.fgMatrix.asTuple = asTuple (...) represent object as tuple determinant fontgate.fgMatrix.determinant = determinant (...) float determinant() invert fontgate.fgMatrix.invert = invert (...) bool invert() inverted fontgate.fgMatrix.inverted = inverted (...) fgMatrix inverted() invertible fontgate.fgMatrix.invertible = invertible (...) bool invertible() noMove fontgate.fgMatrix.noMove = noMove (...) bool noMove() noRotate fontgate.fgMatrix.noRotate = noRotate (...) bool noRotate() noScale fontgate.fgMatrix.noScale = noScale (...) bool noScale() scale fontgate.fgMatrix.scale = scale (...) scale(float s) slant fontgate.fgMatrix.slant = slant (...) slant(float angle) or float slant() standard fontgate.fgMatrix.standard = standard (...) bool standard()","title":"fgMatrix"},{"location":"fontgate.fgMatrix.html#fgmatrix","text":"","title":"fgMatrix"},{"location":"fontgate.fgMatrix.html#asdict","text":"fontgate.fgMatrix.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgMatrix.html#assign","text":"fontgate.fgMatrix.assign = assign (...) assign(fgMatrix) or assign(m11, m12, m21, m22, dx, dy)","title":"assign"},{"location":"fontgate.fgMatrix.html#astuple","text":"fontgate.fgMatrix.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgMatrix.html#determinant","text":"fontgate.fgMatrix.determinant = determinant (...) float determinant()","title":"determinant"},{"location":"fontgate.fgMatrix.html#invert","text":"fontgate.fgMatrix.invert = invert (...) bool invert()","title":"invert"},{"location":"fontgate.fgMatrix.html#inverted","text":"fontgate.fgMatrix.inverted = inverted (...) fgMatrix inverted()","title":"inverted"},{"location":"fontgate.fgMatrix.html#invertible","text":"fontgate.fgMatrix.invertible = invertible (...) bool invertible()","title":"invertible"},{"location":"fontgate.fgMatrix.html#nomove","text":"fontgate.fgMatrix.noMove = noMove (...) bool noMove()","title":"noMove"},{"location":"fontgate.fgMatrix.html#norotate","text":"fontgate.fgMatrix.noRotate = noRotate (...) bool noRotate()","title":"noRotate"},{"location":"fontgate.fgMatrix.html#noscale","text":"fontgate.fgMatrix.noScale = noScale (...) bool noScale()","title":"noScale"},{"location":"fontgate.fgMatrix.html#scale","text":"fontgate.fgMatrix.scale = scale (...) scale(float s)","title":"scale"},{"location":"fontgate.fgMatrix.html#slant","text":"fontgate.fgMatrix.slant = slant (...) slant(float angle) or float slant()","title":"slant"},{"location":"fontgate.fgMatrix.html#standard","text":"fontgate.fgMatrix.standard = standard (...) bool standard()","title":"standard"},{"location":"fontgate.fgMaxP.html","text":"fgMaxP fontgate.fgMaxP = class fgMaxP ( object ) fgMaxP representation Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors maxFunctionDefs maxInstructionDefs maxStackElements maxStorage maxTwilightPoints maxZones Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgMaxP.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgMaxP.asTuple = asTuple (...) represent object as tuple","title":"fgMaxP"},{"location":"fontgate.fgMaxP.html#fgmaxp","text":"","title":"fgMaxP"},{"location":"fontgate.fgMaxP.html#asdict","text":"fontgate.fgMaxP.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgMaxP.html#astuple","text":"fontgate.fgMaxP.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgMetricsClass.html","text":"fgMetricsClass fontgate.fgMetricsClass = class fgMetricsClass ( object ) MetricsClass representation Constructors: fgMetricsClass() - default fgMetricsClass(fgMetricsClass) - copy Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) hasGlyph (...) bool hasGlyph (int glyphID/'glyphName') keyGlyphName (...) 'keyGlyphName' keyGlyphName () Descriptors glyphs (fgGlyphIDsSet) left (bool) name (string) right (bool) width (bool) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T glyphs fontgate.fgMetricsClass.glyphs (fgGlyphIDsSet) hasGlyph fontgate.fgMetricsClass.hasGlyph = hasGlyph (...) bool hasGlyph(int glyphID/'glyphName') keyGlyphName fontgate.fgMetricsClass.keyGlyphName = keyGlyphName (...) 'keyGlyphName' keyGlyphName() left fontgate.fgMetricsClass.left (bool) name fontgate.fgMetricsClass.name (string) right fontgate.fgMetricsClass.right (bool) width fontgate.fgMetricsClass.width (bool)","title":"fgMetricsClass"},{"location":"fontgate.fgMetricsClass.html#fgmetricsclass","text":"","title":"fgMetricsClass"},{"location":"fontgate.fgMetricsClass.html#glyphs","text":"fontgate.fgMetricsClass.glyphs (fgGlyphIDsSet)","title":"glyphs"},{"location":"fontgate.fgMetricsClass.html#hasglyph","text":"fontgate.fgMetricsClass.hasGlyph = hasGlyph (...) bool hasGlyph(int glyphID/'glyphName')","title":"hasGlyph"},{"location":"fontgate.fgMetricsClass.html#keyglyphname","text":"fontgate.fgMetricsClass.keyGlyphName = keyGlyphName (...) 'keyGlyphName' keyGlyphName()","title":"keyGlyphName"},{"location":"fontgate.fgMetricsClass.html#left","text":"fontgate.fgMetricsClass.left (bool)","title":"left"},{"location":"fontgate.fgMetricsClass.html#name","text":"fontgate.fgMetricsClass.name (string)","title":"name"},{"location":"fontgate.fgMetricsClass.html#right","text":"fontgate.fgMetricsClass.right (bool)","title":"right"},{"location":"fontgate.fgMetricsClass.html#width","text":"fontgate.fgMetricsClass.width (bool)","title":"width"},{"location":"fontgate.fgMetricsClasses.html","text":"fgMetricsClasses fontgate.fgMetricsClasses = class fgMetricsClasses ( object ) list of fgMetricsClass objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgMetricsClasses"},{"location":"fontgate.fgMetricsClasses.html#fgmetricsclasses","text":"","title":"fgMetricsClasses"},{"location":"fontgate.fgNametable.html","text":"fgNametable fontgate.fgNametable = class fgNametable ( object ) NameTable - unicode->name translation and vice versa Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value easyCompare (...) bool easyCompare ('name0', 'name1') getAlternativeNames (...) list( 'altGlyphName' ) getAlternativeNames ('glyphName') load (...) bool load (string path_to_file) name (...) 'glyphName' name (int unicode) unc (...) int unc ('glyphName') Descriptors loaded (bool) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T easyCompare fontgate.fgNametable.easyCompare = easyCompare (...) bool easyCompare('name0', 'name1') getAlternativeNames fontgate.fgNametable.getAlternativeNames = getAlternativeNames (...) list( 'altGlyphName' ) getAlternativeNames('glyphName') load fontgate.fgNametable.load = load (...) bool load(string path_to_file) loaded fontgate.fgNametable.loaded (bool) name fontgate.fgNametable.name = name (...) 'glyphName' name(int unicode) unc fontgate.fgNametable.unc = unc (...) int unc('glyphName')","title":"fgNametable"},{"location":"fontgate.fgNametable.html#fgnametable","text":"","title":"fgNametable"},{"location":"fontgate.fgNametable.html#easycompare","text":"fontgate.fgNametable.easyCompare = easyCompare (...) bool easyCompare('name0', 'name1')","title":"easyCompare"},{"location":"fontgate.fgNametable.html#getalternativenames","text":"fontgate.fgNametable.getAlternativeNames = getAlternativeNames (...) list( 'altGlyphName' ) getAlternativeNames('glyphName')","title":"getAlternativeNames"},{"location":"fontgate.fgNametable.html#load","text":"fontgate.fgNametable.load = load (...) bool load(string path_to_file)","title":"load"},{"location":"fontgate.fgNametable.html#loaded","text":"fontgate.fgNametable.loaded (bool)","title":"loaded"},{"location":"fontgate.fgNametable.html#name","text":"fontgate.fgNametable.name = name (...) 'glyphName' name(int unicode)","title":"name"},{"location":"fontgate.fgNametable.html#unc","text":"fontgate.fgNametable.unc = unc (...) int unc('glyphName')","title":"unc"},{"location":"fontgate.fgNode.html","text":"fgNode fontgate.fgNode = class fgNode ( object ) Node representation Constructors: fgNode() - default fgNode(fgNode) - copy fgNode('Move'/'On'/'Off'/'Curve', fgPoint[, smooth=false]) fgNode('Move'/'On'/'Off'/'Curve', fgPoint, 'name'[, smooth=false]) Math operation: fgNode + fgNode fgNode - fgNode fgNode * float Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __mul__ (...) x. __mul__ (y) < ==> x*y __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __rsub__ (...) x. __rsub__ (y) < ==> y-x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __sub__ (...) x. __sub__ (y) < ==> x-y isG2 (...) bool isG2 () isInterpolatedX (...) bool isInterpolatedX () isInterpolatedY (...) bool isInterpolatedY () isOff (...) bool isOff () isOn (...) bool isOn () isSelected (...) bool isSelected () setG2 (...) setG2 ([true]) setInterpolatedX (...) setInterpolatedX ([true]) setInterpolatedY (...) setInterpolatedY ([true]) setSelected (...) setSelected ([true]) transform (...) transform (fgMatrix) Descriptors flags (int) kind ('Move'/'On'/'Off'/'Curve') name (string) point (fgPoint) smooth (bool) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flags fontgate.fgNode.flags (int) isG2 fontgate.fgNode.isG2 = isG2 (...) bool isG2() isInterpolatedX fontgate.fgNode.isInterpolatedX = isInterpolatedX (...) bool isInterpolatedX() isInterpolatedY fontgate.fgNode.isInterpolatedY = isInterpolatedY (...) bool isInterpolatedY() isOff fontgate.fgNode.isOff = isOff (...) bool isOff() isOn fontgate.fgNode.isOn = isOn (...) bool isOn() isSelected fontgate.fgNode.isSelected = isSelected (...) bool isSelected() kind fontgate.fgNode.kind ('Move'/'On'/'Off'/'Curve') name fontgate.fgNode.name (string) point fontgate.fgNode.point (fgPoint) setG2 fontgate.fgNode.setG2 = setG2 (...) setG2([true]) setInterpolatedX fontgate.fgNode.setInterpolatedX = setInterpolatedX (...) setInterpolatedX([true]) setInterpolatedY fontgate.fgNode.setInterpolatedY = setInterpolatedY (...) setInterpolatedY([true]) setSelected fontgate.fgNode.setSelected = setSelected (...) setSelected([true]) smooth fontgate.fgNode.smooth (bool) transform fontgate.fgNode.transform = transform (...) transform(fgMatrix)","title":"fgNode"},{"location":"fontgate.fgNode.html#fgnode","text":"","title":"fgNode"},{"location":"fontgate.fgNode.html#flags","text":"fontgate.fgNode.flags (int)","title":"flags"},{"location":"fontgate.fgNode.html#isg2","text":"fontgate.fgNode.isG2 = isG2 (...) bool isG2()","title":"isG2"},{"location":"fontgate.fgNode.html#isinterpolatedx","text":"fontgate.fgNode.isInterpolatedX = isInterpolatedX (...) bool isInterpolatedX()","title":"isInterpolatedX"},{"location":"fontgate.fgNode.html#isinterpolatedy","text":"fontgate.fgNode.isInterpolatedY = isInterpolatedY (...) bool isInterpolatedY()","title":"isInterpolatedY"},{"location":"fontgate.fgNode.html#isoff","text":"fontgate.fgNode.isOff = isOff (...) bool isOff()","title":"isOff"},{"location":"fontgate.fgNode.html#ison","text":"fontgate.fgNode.isOn = isOn (...) bool isOn()","title":"isOn"},{"location":"fontgate.fgNode.html#isselected","text":"fontgate.fgNode.isSelected = isSelected (...) bool isSelected()","title":"isSelected"},{"location":"fontgate.fgNode.html#kind","text":"fontgate.fgNode.kind ('Move'/'On'/'Off'/'Curve')","title":"kind"},{"location":"fontgate.fgNode.html#name","text":"fontgate.fgNode.name (string)","title":"name"},{"location":"fontgate.fgNode.html#point","text":"fontgate.fgNode.point (fgPoint)","title":"point"},{"location":"fontgate.fgNode.html#setg2","text":"fontgate.fgNode.setG2 = setG2 (...) setG2([true])","title":"setG2"},{"location":"fontgate.fgNode.html#setinterpolatedx","text":"fontgate.fgNode.setInterpolatedX = setInterpolatedX (...) setInterpolatedX([true])","title":"setInterpolatedX"},{"location":"fontgate.fgNode.html#setinterpolatedy","text":"fontgate.fgNode.setInterpolatedY = setInterpolatedY (...) setInterpolatedY([true])","title":"setInterpolatedY"},{"location":"fontgate.fgNode.html#setselected","text":"fontgate.fgNode.setSelected = setSelected (...) setSelected([true])","title":"setSelected"},{"location":"fontgate.fgNode.html#smooth","text":"fontgate.fgNode.smooth (bool)","title":"smooth"},{"location":"fontgate.fgNode.html#transform","text":"fontgate.fgNode.transform = transform (...) transform(fgMatrix)","title":"transform"},{"location":"fontgate.fgNodes.html","text":"fgNodes fontgate.fgNodes = class fgNodes ( object ) list of fgNode objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgNodes"},{"location":"fontgate.fgNodes.html#fgnodes","text":"","title":"fgNodes"},{"location":"fontgate.fgOTLayout.html","text":"fgOTLayout fontgate.fgOTLayout = class fgOTLayout ( object ) OpenType Layout representation Constructors: fgOTLayout(fgDataOwnerData) fgOTLayout(fgFont) Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. clear (...) clear () - remove all features get_feature (...) string get_feature (string / numeric tag) - get feature text get_prefix (...) string get_prefix () - get common part of fea data has_key (...) bool has_key (string / numeric tag) - True if feature is present keys (...) list(string) keys () - list of feature tags remove (...) remove (string / numeric tag) - remove feature set_feature (...) set_feature (string / numeric tag, string new_content) - set feature text set_prefix (...) set_prefix (string new_prefix) - set common part of fea data Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T clear fontgate.fgOTLayout.clear = clear (...) clear() - remove all features get_feature fontgate.fgOTLayout.get_feature = get_feature (...) string get_feature(string / numeric tag) - get feature text get_prefix fontgate.fgOTLayout.get_prefix = get_prefix (...) string get_prefix() - get common part of fea data has_key fontgate.fgOTLayout.has_key = has_key (...) bool has_key(string / numeric tag) - True if feature is present keys fontgate.fgOTLayout.keys = keys (...) list(string) keys() - list of feature tags remove fontgate.fgOTLayout.remove = remove (...) remove(string / numeric tag) - remove feature set_feature fontgate.fgOTLayout.set_feature = set_feature (...) set_feature(string / numeric tag, string new_content) - set feature text set_prefix fontgate.fgOTLayout.set_prefix = set_prefix (...) set_prefix(string new_prefix) - set common part of fea data","title":"fgOTLayout"},{"location":"fontgate.fgOTLayout.html#fgotlayout","text":"","title":"fgOTLayout"},{"location":"fontgate.fgOTLayout.html#clear","text":"fontgate.fgOTLayout.clear = clear (...) clear() - remove all features","title":"clear"},{"location":"fontgate.fgOTLayout.html#get_feature","text":"fontgate.fgOTLayout.get_feature = get_feature (...) string get_feature(string / numeric tag) - get feature text","title":"get_feature"},{"location":"fontgate.fgOTLayout.html#get_prefix","text":"fontgate.fgOTLayout.get_prefix = get_prefix (...) string get_prefix() - get common part of fea data","title":"get_prefix"},{"location":"fontgate.fgOTLayout.html#has_key","text":"fontgate.fgOTLayout.has_key = has_key (...) bool has_key(string / numeric tag) - True if feature is present","title":"has_key"},{"location":"fontgate.fgOTLayout.html#keys","text":"fontgate.fgOTLayout.keys = keys (...) list(string) keys() - list of feature tags","title":"keys"},{"location":"fontgate.fgOTLayout.html#remove","text":"fontgate.fgOTLayout.remove = remove (...) remove(string / numeric tag) - remove feature","title":"remove"},{"location":"fontgate.fgOTLayout.html#set_feature","text":"fontgate.fgOTLayout.set_feature = set_feature (...) set_feature(string / numeric tag, string new_content) - set feature text","title":"set_feature"},{"location":"fontgate.fgOTLayout.html#set_prefix","text":"fontgate.fgOTLayout.set_prefix = set_prefix (...) set_prefix(string new_prefix) - set common part of fea data","title":"set_prefix"},{"location":"fontgate.fgOpt_AutoMetrics.html","text":"fgOpt_AutoMetrics fontgate.fgOpt_AutoMetrics = class fgOpt_AutoMetrics ( object ) fgOpt_AutoMetrics options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors close left right Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_AutoMetrics"},{"location":"fontgate.fgOpt_AutoMetrics.html#fgopt_autometrics","text":"","title":"fgOpt_AutoMetrics"},{"location":"fontgate.fgOpt_EOTExport.html","text":"fgOpt_EOTExport fontgate.fgOpt_EOTExport = class fgOpt_EOTExport ( object ) fgOpt_EOTExport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors doCompression doXORCryptData otExport Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_EOTExport"},{"location":"fontgate.fgOpt_EOTExport.html#fgopt_eotexport","text":"","title":"fgOpt_EOTExport"},{"location":"fontgate.fgOpt_ExpandKerning.html","text":"fgOpt_ExpandKerning fontgate.fgOpt_ExpandKerning = class fgOpt_ExpandKerning ( object ) fgOpt_ExpandKerning options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors applyToAssistance codepage count keep limitAction limitCmap10 limitCodepage limitCount limitFontWindow Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_ExpandKerning"},{"location":"fontgate.fgOpt_ExpandKerning.html#fgopt_expandkerning","text":"","title":"fgOpt_ExpandKerning"},{"location":"fontgate.fgOpt_Font.html","text":"fgOpt_Font fontgate.fgOpt_Font = class fgOpt_Font ( object ) fgOpt_Font options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors autoMetrics buildPclt detectG2 detectInterpolation expandKerning fitAscender fitDescender optimize otExport placeDuplicate placePaste t1Autohint t1Export ttAutohint Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_Font"},{"location":"fontgate.fgOpt_Font.html#fgopt_font","text":"","title":"fgOpt_Font"},{"location":"fontgate.fgOpt_KerningOptions.html","text":"fgOpt_KerningOptions fontgate.fgOpt_KerningOptions = class fgOpt_KerningOptions ( object ) fgOpt_KerningOptions options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors saveTheOnlySubtableInKernTable useScriptInfoForOneSubtableCutting Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_KerningOptions"},{"location":"fontgate.fgOpt_KerningOptions.html#fgopt_kerningoptions","text":"","title":"fgOpt_KerningOptions"},{"location":"fontgate.fgOpt_OTExport.html","text":"fgOpt_OTExport fontgate.fgOpt_OTExport = class fgOpt_OTExport ( object ) fgOpt_OTExport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors CBDT COLR SVG addCharacters applyBBoxSavings autoWinAscDesc autohint autohintGlyphs autohintingMode autotrace cff cff_adobe cff_compress cmap10 copyHDMXData decompose doAutohinting doHintsCompile exportCBDT exportCOLR exportSBIX exportSVG exportVOLT feaFileOptions featuresCompile featuresRestore fixDirection fixNames fontNames generateLTSH headBBoxSavings kerningOptions noReorder roundCoordinates sbix silent_mode subrize t1autohint ttfautohint useTTFAutohint writeBinaryHinting writeBitmaps writeDeviceMetrics writeGDEF writeHintedFont writeKernFeature writeKernTable writeOriginalHinting Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_OTExport"},{"location":"fontgate.fgOpt_OTExport.html#fgopt_otexport","text":"","title":"fgOpt_OTExport"},{"location":"fontgate.fgOpt_OTExportFeaFile.html","text":"fgOpt_OTExportFeaFile fontgate.fgOpt_OTExportFeaFile = class fgOpt_OTExportFeaFile ( object ) fgOpt_OTExportFeaFile options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors doWriteGDEF inlineLookups verbose write_body write_classes write_prefix Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_OTExportFeaFile"},{"location":"fontgate.fgOpt_OTExportFeaFile.html#fgopt_otexportfeafile","text":"","title":"fgOpt_OTExportFeaFile"},{"location":"fontgate.fgOpt_OTImport.html","text":"fgOpt_OTImport fontgate.fgOpt_OTImport = class fgOpt_OTImport ( object ) fgOpt_OTImport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors convertCurves convertNames curveConvertPrecision featuresDecompile featuresStore ignoreGlyphs namesGrouping readKerningFromFeature readKerningFromTable readMacSpecificNaming shortSplines storeAAT storeOriginalHinting Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_OTImport"},{"location":"fontgate.fgOpt_OTImport.html#fgopt_otimport","text":"","title":"fgOpt_OTImport"},{"location":"fontgate.fgOpt_Optimize.html","text":"fgOpt_Optimize fontgate.fgOpt_Optimize = class fgOpt_Optimize ( object ) fgOpt_Optimize options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors align reduce Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_Optimize"},{"location":"fontgate.fgOpt_Optimize.html#fgopt_optimize","text":"","title":"fgOpt_Optimize"},{"location":"fontgate.fgOpt_T1Autohint.html","text":"fgOpt_T1Autohint fontgate.fgOpt_T1Autohint = class fgOpt_T1Autohint ( object ) fgOpt_T1Autohint options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors hHinting hStems maxHWidth maxVWidth minHLen minHWidth minVLen minVWidth ratioH ratioV useAdobeAutohinter vHinting vStems zones Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_T1Autohint"},{"location":"fontgate.fgOpt_T1Autohint.html#fgopt_t1autohint","text":"","title":"fgOpt_T1Autohint"},{"location":"fontgate.fgOpt_T1Export.html","text":"fgOpt_T1Export fontgate.fgOpt_T1Export = class fgOpt_T1Export ( object ) fgOpt_T1Export options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors AFM ASCII INF PFM autohint cff cid decompose downloadable encoding fixDirection flex fsType roundCoordinates scale1000 sort swapNotice unicode useOS2 Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_T1Export"},{"location":"fontgate.fgOpt_T1Export.html#fgopt_t1export","text":"","title":"fgOpt_T1Export"},{"location":"fontgate.fgOpt_T1Import.html","text":"fgOpt_T1Import fontgate.fgOpt_T1Import = class fgOpt_T1Import ( object ) fgOpt_T1Import options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors decompose familyGrouping ignoreGlyphs readMacSpecificNaming singleMasterOnly Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_T1Import"},{"location":"fontgate.fgOpt_T1Import.html#fgopt_t1import","text":"","title":"fgOpt_T1Import"},{"location":"fontgate.fgOpt_TTAutohint.html","text":"fgOpt_TTAutohint fontgate.fgOpt_TTAutohint = class fgOpt_TTAutohint ( object ) fgOpt_TTAutohint options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors allow3Stems allowDeltas hHinting hintSidebearing hintToCenter interpolateCusps interpolateDoubleLinks treshold vHinting Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_TTAutohint"},{"location":"fontgate.fgOpt_TTAutohint.html#fgopt_ttautohint","text":"","title":"fgOpt_TTAutohint"},{"location":"fontgate.fgOpt_TTFAutohint.html","text":"fgOpt_TTFAutohint fontgate.fgOpt_TTFAutohint = class fgOpt_TTFAutohint ( object ) fgOpt_TTFAutohint options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors TTFA_info adjust_subglyphs control_name default_script dehint detailed_info dw_cleartype_strong_stem_width fallback_script fallback_stem_width family_suffix gdi_cleartype_strong_stem_width gray_strong_stem_width hint_composites hinting_limit hinting_range_max hinting_range_min ignore_restrictions increase_x_height no_info symbol windows_compatibility x_height_snapping_exceptions_string Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_TTFAutohint"},{"location":"fontgate.fgOpt_TTFAutohint.html#fgopt_ttfautohint","text":"","title":"fgOpt_TTFAutohint"},{"location":"fontgate.fgOpt_UfoFontExport.html","text":"fgOpt_UfoFontExport fontgate.fgOpt_UfoFontExport = class fgOpt_UfoFontExport ( object ) fgOpt_UfoFontExport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors base64 compress formatVersion writeLayoutTTX Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_UfoFontExport"},{"location":"fontgate.fgOpt_UfoFontExport.html#fgopt_ufofontexport","text":"","title":"fgOpt_UfoFontExport"},{"location":"fontgate.fgOpt_UfoFontImport.html","text":"fgOpt_UfoFontImport fontgate.fgOpt_UfoFontImport = class fgOpt_UfoFontImport ( object ) fgOpt_UfoFontImport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors compileFeatures fixOrdering readLayoutTTX removeOverlap Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_UfoFontImport"},{"location":"fontgate.fgOpt_UfoFontImport.html#fgopt_ufofontimport","text":"","title":"fgOpt_UfoFontImport"},{"location":"fontgate.fgOpt_VfbExport.html","text":"fgOpt_VfbExport fontgate.fgOpt_VfbExport = class fgOpt_VfbExport ( object ) fgOpt_VfbExport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors saveEncoding Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_VfbExport"},{"location":"fontgate.fgOpt_VfbExport.html#fgopt_vfbexport","text":"","title":"fgOpt_VfbExport"},{"location":"fontgate.fgOpt_VfbImport.html","text":"fgOpt_VfbImport fontgate.fgOpt_VfbImport = class fgOpt_VfbImport ( object ) fgOpt_VfbImport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors autoReplace compileFeatures fixOrdering separateMasters Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_VfbImport"},{"location":"fontgate.fgOpt_VfbImport.html#fgopt_vfbimport","text":"","title":"fgOpt_VfbImport"},{"location":"fontgate.fgOpt_WOFFExport.html","text":"fgOpt_WOFFExport fontgate.fgOpt_WOFFExport = class fgOpt_WOFFExport ( object ) fgOpt_WOFFExport options page Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors otExport Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOpt_WOFFExport"},{"location":"fontgate.fgOpt_WOFFExport.html#fgopt_woffexport","text":"","title":"fgOpt_WOFFExport"},{"location":"fontgate.fgOptions.html","text":"fgOptions fontgate.fgOptions = class fgOptions ( object ) FontGate options Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors eotexport font otexport otimport t1export t1import ufoexport ufoimport vfbexport vfbimport woffexport Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgOptions"},{"location":"fontgate.fgOptions.html#fgoptions","text":"","title":"fgOptions"},{"location":"fontgate.fgOtInfo.html","text":"fgOtInfo fontgate.fgOtInfo = class fgOtInfo ( object ) OT Info representation Constructors: fgOtInfo() - default fgOtInfo(fgOtInfo) - copy Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Descriptors glyphClass ('Unspecified'/'Simple'/'Ligature'/'Mark'/'Component') markClass (int) otClasses ( [ int ] ) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T glyphClass fontgate.fgOtInfo.glyphClass ('Unspecified'/'Simple'/'Ligature'/'Mark'/'Component') markClass fontgate.fgOtInfo.markClass (int) otClasses fontgate.fgOtInfo.otClasses ( [ int ] )","title":"fgOtInfo"},{"location":"fontgate.fgOtInfo.html#fgotinfo","text":"","title":"fgOtInfo"},{"location":"fontgate.fgOtInfo.html#glyphclass","text":"fontgate.fgOtInfo.glyphClass ('Unspecified'/'Simple'/'Ligature'/'Mark'/'Component')","title":"glyphClass"},{"location":"fontgate.fgOtInfo.html#markclass","text":"fontgate.fgOtInfo.markClass (int)","title":"markClass"},{"location":"fontgate.fgOtInfo.html#otclasses","text":"fontgate.fgOtInfo.otClasses ( [ int ] )","title":"otClasses"},{"location":"fontgate.fgOtValue.html","text":"fgOtValue fontgate.fgOtValue = class fgOtValue ( object ) OT Value representation Constructors: fgOtValue() - default fgOtValue(fgOtValue) - copy fgOtValue(float) - by float value fgOtValue(int/long) - by int/long value Math operation: fgOtValue + fgOtValue fgOtValue - fgOtValue fgOtValue * float Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __mul__ (...) x. __mul__ (y) < ==> x*y __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __rsub__ (...) x. __rsub__ (y) < ==> y-x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) __sub__ (...) x. __sub__ (y) < ==> x-y Descriptors coordinate (float) deviceTable (fgDeviceRecords) point_index (int) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T coordinate fontgate.fgOtValue.coordinate (float) deviceTable fontgate.fgOtValue.deviceTable (fgDeviceRecords) point_index fontgate.fgOtValue.point_index (int)","title":"fgOtValue"},{"location":"fontgate.fgOtValue.html#fgotvalue","text":"","title":"fgOtValue"},{"location":"fontgate.fgOtValue.html#coordinate","text":"fontgate.fgOtValue.coordinate (float)","title":"coordinate"},{"location":"fontgate.fgOtValue.html#devicetable","text":"fontgate.fgOtValue.deviceTable (fgDeviceRecords)","title":"deviceTable"},{"location":"fontgate.fgOtValue.html#point_index","text":"fontgate.fgOtValue.point_index (int)","title":"point_index"},{"location":"fontgate.fgPackages.html","text":"fgPackages fontgate.fgPackages = class fgPackages ( object ) Font packages representation Constructors: fgPackages() - default fgPackages(fgPackages) - copy fgPackages('pathToFontFileOrFolder') Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. add (...) add (fgFont or fgPackages object) - add font(s) close (...) close () - remove all font(s) from list copyFrom (...) copyFrom (fgPackages) - copy all fonts from another fgPackages object create (...) create () - add empty font to list and return it's index indexOf (...) indexOf (fgFont) - return font index or (-1) if missing in list open (...) open (path) - open existing font(s) from 'path' location and return first index of created font(s) remove (...) remove (int index) - remove font by index Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T add fontgate.fgPackages.add = add (...) add(fgFont or fgPackages object) - add font(s) close fontgate.fgPackages.close = close (...) close() - remove all font(s) from list copyFrom fontgate.fgPackages.copyFrom = copyFrom (...) copyFrom(fgPackages) - copy all fonts from another fgPackages object create fontgate.fgPackages.create = create (...) create() - add empty font to list and return it's index indexOf fontgate.fgPackages.indexOf = indexOf (...) indexOf(fgFont) - return font index or (-1) if missing in list open fontgate.fgPackages.open = open (...) open(path) - open existing font(s) from 'path' location and return first index of created font(s) remove fontgate.fgPackages.remove = remove (...) remove(int index) - remove font by index","title":"fgPackages"},{"location":"fontgate.fgPackages.html#fgpackages","text":"","title":"fgPackages"},{"location":"fontgate.fgPackages.html#add","text":"fontgate.fgPackages.add = add (...) add(fgFont or fgPackages object) - add font(s)","title":"add"},{"location":"fontgate.fgPackages.html#close","text":"fontgate.fgPackages.close = close (...) close() - remove all font(s) from list","title":"close"},{"location":"fontgate.fgPackages.html#copyfrom","text":"fontgate.fgPackages.copyFrom = copyFrom (...) copyFrom(fgPackages) - copy all fonts from another fgPackages object","title":"copyFrom"},{"location":"fontgate.fgPackages.html#create","text":"fontgate.fgPackages.create = create (...) create() - add empty font to list and return it's index","title":"create"},{"location":"fontgate.fgPackages.html#indexof","text":"fontgate.fgPackages.indexOf = indexOf (...) indexOf(fgFont) - return font index or (-1) if missing in list","title":"indexOf"},{"location":"fontgate.fgPackages.html#open","text":"fontgate.fgPackages.open = open (...) open(path) - open existing font(s) from 'path' location and return first index of created font(s)","title":"open"},{"location":"fontgate.fgPackages.html#remove","text":"fontgate.fgPackages.remove = remove (...) remove(int index) - remove font by index","title":"remove"},{"location":"fontgate.fgPen.html","text":"fgPen fontgate.fgPen = class fgPen ( object ) Pen representation Constructors: fgPen(fgGlyph) - default fgPen(fgPen) - copy Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value beginPath (...) beginPath () closePath (...) closePath () curveTo (...) curveTo (fgPoint...) curveToOne (...) curveToOne (fgPoint, fgPoint, fgPoint) endPath (...) endPath () lineTo (...) lineTo (fgPoint) moveTo (...) moveTo (fgPoint) qCurveToOne (...) qCurveToOne (fgPoint, fgPoint) Descriptors smooth (bool) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T beginPath fontgate.fgPen.beginPath = beginPath (...) beginPath() closePath fontgate.fgPen.closePath = closePath (...) closePath() curveTo fontgate.fgPen.curveTo = curveTo (...) curveTo(fgPoint...) curveToOne fontgate.fgPen.curveToOne = curveToOne (...) curveToOne(fgPoint, fgPoint, fgPoint) endPath fontgate.fgPen.endPath = endPath (...) endPath() lineTo fontgate.fgPen.lineTo = lineTo (...) lineTo(fgPoint) moveTo fontgate.fgPen.moveTo = moveTo (...) moveTo(fgPoint) qCurveToOne fontgate.fgPen.qCurveToOne = qCurveToOne (...) qCurveToOne(fgPoint, fgPoint) smooth fontgate.fgPen.smooth (bool)","title":"fgPen"},{"location":"fontgate.fgPen.html#fgpen","text":"","title":"fgPen"},{"location":"fontgate.fgPen.html#beginpath","text":"fontgate.fgPen.beginPath = beginPath (...) beginPath()","title":"beginPath"},{"location":"fontgate.fgPen.html#closepath","text":"fontgate.fgPen.closePath = closePath (...) closePath()","title":"closePath"},{"location":"fontgate.fgPen.html#curveto","text":"fontgate.fgPen.curveTo = curveTo (...) curveTo(fgPoint...)","title":"curveTo"},{"location":"fontgate.fgPen.html#curvetoone","text":"fontgate.fgPen.curveToOne = curveToOne (...) curveToOne(fgPoint, fgPoint, fgPoint)","title":"curveToOne"},{"location":"fontgate.fgPen.html#endpath","text":"fontgate.fgPen.endPath = endPath (...) endPath()","title":"endPath"},{"location":"fontgate.fgPen.html#lineto","text":"fontgate.fgPen.lineTo = lineTo (...) lineTo(fgPoint)","title":"lineTo"},{"location":"fontgate.fgPen.html#moveto","text":"fontgate.fgPen.moveTo = moveTo (...) moveTo(fgPoint)","title":"moveTo"},{"location":"fontgate.fgPen.html#qcurvetoone","text":"fontgate.fgPen.qCurveToOne = qCurveToOne (...) qCurveToOne(fgPoint, fgPoint)","title":"qCurveToOne"},{"location":"fontgate.fgPen.html#smooth","text":"fontgate.fgPen.smooth (bool)","title":"smooth"},{"location":"fontgate.fgPoint.html","text":"fgPoint fontgate.fgPoint = class fgPoint ( object ) Point representation Constructors: fgPoint() - default fgPoint(fgPoint) - copy fgPoint(float x) fgPoint(tuple(float x, float y)) fgPoint(float x, float y) Math Operations: fgPoint + fgPoint fgPoint - fgPoint fgPoint * fgPoint fgPoint * float - vector product fgPoint / float fgPoint < < fgPoint - True if first point is less or equal to second fgPoint >> fgPoint - True if first point is greater or equal to second fgPoint ^ fgPoint - scalar product Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __div__ (...) x. __div__ (y) < ==> x/y __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len (x) __lshift__ (...) x. __lshift__ (y) < ==> x < __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (y) < ==> x*y __ne__ (...) x. __ne__ (y) < ==> x!=y __radd__ (...) x. __radd__ (y) < ==> y+x __rdiv__ (...) x. __rdiv__ (y) < ==> y/x __repr__ (...) x. __repr__ () < ==> repr(x) __rlshift__ (...) x. __rlshift__ (y) < ==> y < __rmul__ (...) x. __rmul__ (y) < ==> y*x __rrshift__ (...) x. __rrshift__ (y) < ==> y>>x __rshift__ (...) x. __rshift__ (y) < ==> x>>y __rsub__ (...) x. __rsub__ (y) < ==> y-x __rxor__ (...) x. __rxor__ (y) < ==> y^x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) __sub__ (...) x. __sub__ (y) < ==> x-y __xor__ (...) x. __xor__ (y) < ==> x^y angleDiff (...) fgPoint angleDiff (fgPoint) angleSum (...) fgPoint angleSum (fgPoint) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign (fgPoint) or assign (float x, float y) clear (...) clear () close_to (...) bool close_to (fgPoint[, d=0.00001]) collinear (...) bool collinear (fgPoint) direction (...) fgPoint direction () dist (...) float dist (fgPoint) dist2 (...) float dist2 (fgPoint) distance (...) float distance (fgPoint[, horizontal=false] doubleScale (...) scale(fgPoint) or scale(float sx, float sy) flip (...) flip () flipped (...) fgPoint flipped () ix (...) int ix () - integer fast iy (...) int iy () - integer fast len (...) float len () len2 (...) float len2 () normal (...) fgPoint normal () rotate (...) fgPoint rotate (fgPoint v, fgPoint c) round (...) fgPoint round ([doRound=true]) rx (...) int rx () - integer rounded ry (...) int ry () - integer rounded transform (...) transform (fgMatrix) transformed (...) fgPoint transformed (fgMatrix) value (...) float value ([horizontal=true]) zero (...) bool zero () Descriptors x (float) y (float) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T angleDiff fontgate.fgPoint.angleDiff = angleDiff (...) fgPoint angleDiff(fgPoint) angleSum fontgate.fgPoint.angleSum = angleSum (...) fgPoint angleSum(fgPoint) asDict fontgate.fgPoint.asDict = asDict (...) represent object as dictionary assign fontgate.fgPoint.assign = assign (...) assign(fgPoint) or assign(float x, float y) asTuple fontgate.fgPoint.asTuple = asTuple (...) represent object as tuple clear fontgate.fgPoint.clear = clear (...) clear() close_to fontgate.fgPoint.close_to = close_to (...) bool close_to(fgPoint[, d=0.00001]) collinear fontgate.fgPoint.collinear = collinear (...) bool collinear(fgPoint) direction fontgate.fgPoint.direction = direction (...) fgPoint direction() dist fontgate.fgPoint.dist = dist (...) float dist(fgPoint) dist2 fontgate.fgPoint.dist2 = dist2 (...) float dist2(fgPoint) distance fontgate.fgPoint.distance = distance (...) float distance(fgPoint[, horizontal=false] doubleScale fontgate.fgPoint.doubleScale = doubleScale (...) scale(fgPoint) or scale(float sx, float sy) flip fontgate.fgPoint.flip = flip (...) flip() flipped fontgate.fgPoint.flipped = flipped (...) fgPoint flipped() ix fontgate.fgPoint.ix = ix (...) int ix() - integer fast iy fontgate.fgPoint.iy = iy (...) int iy() - integer fast len fontgate.fgPoint.len = len (...) float len() len2 fontgate.fgPoint.len2 = len2 (...) float len2() normal fontgate.fgPoint.normal = normal (...) fgPoint normal() rotate fontgate.fgPoint.rotate = rotate (...) fgPoint rotate(fgPoint v, fgPoint c) round fontgate.fgPoint.round = round (...) fgPoint round([doRound=true]) rx fontgate.fgPoint.rx = rx (...) int rx() - integer rounded ry fontgate.fgPoint.ry = ry (...) int ry() - integer rounded transform fontgate.fgPoint.transform = transform (...) transform(fgMatrix) transformed fontgate.fgPoint.transformed = transformed (...) fgPoint transformed(fgMatrix) value fontgate.fgPoint.value = value (...) float value([horizontal=true]) x fontgate.fgPoint.x (float) y fontgate.fgPoint.y (float) zero fontgate.fgPoint.zero = zero (...) bool zero()","title":"fgPoint"},{"location":"fontgate.fgPoint.html#fgpoint","text":"","title":"fgPoint"},{"location":"fontgate.fgPoint.html#anglediff","text":"fontgate.fgPoint.angleDiff = angleDiff (...) fgPoint angleDiff(fgPoint)","title":"angleDiff"},{"location":"fontgate.fgPoint.html#anglesum","text":"fontgate.fgPoint.angleSum = angleSum (...) fgPoint angleSum(fgPoint)","title":"angleSum"},{"location":"fontgate.fgPoint.html#asdict","text":"fontgate.fgPoint.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgPoint.html#assign","text":"fontgate.fgPoint.assign = assign (...) assign(fgPoint) or assign(float x, float y)","title":"assign"},{"location":"fontgate.fgPoint.html#astuple","text":"fontgate.fgPoint.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgPoint.html#clear","text":"fontgate.fgPoint.clear = clear (...) clear()","title":"clear"},{"location":"fontgate.fgPoint.html#close_to","text":"fontgate.fgPoint.close_to = close_to (...) bool close_to(fgPoint[, d=0.00001])","title":"close_to"},{"location":"fontgate.fgPoint.html#collinear","text":"fontgate.fgPoint.collinear = collinear (...) bool collinear(fgPoint)","title":"collinear"},{"location":"fontgate.fgPoint.html#direction","text":"fontgate.fgPoint.direction = direction (...) fgPoint direction()","title":"direction"},{"location":"fontgate.fgPoint.html#dist","text":"fontgate.fgPoint.dist = dist (...) float dist(fgPoint)","title":"dist"},{"location":"fontgate.fgPoint.html#dist2","text":"fontgate.fgPoint.dist2 = dist2 (...) float dist2(fgPoint)","title":"dist2"},{"location":"fontgate.fgPoint.html#distance","text":"fontgate.fgPoint.distance = distance (...) float distance(fgPoint[, horizontal=false]","title":"distance"},{"location":"fontgate.fgPoint.html#doublescale","text":"fontgate.fgPoint.doubleScale = doubleScale (...) scale(fgPoint) or scale(float sx, float sy)","title":"doubleScale"},{"location":"fontgate.fgPoint.html#flip","text":"fontgate.fgPoint.flip = flip (...) flip()","title":"flip"},{"location":"fontgate.fgPoint.html#flipped","text":"fontgate.fgPoint.flipped = flipped (...) fgPoint flipped()","title":"flipped"},{"location":"fontgate.fgPoint.html#ix","text":"fontgate.fgPoint.ix = ix (...) int ix() - integer fast","title":"ix"},{"location":"fontgate.fgPoint.html#iy","text":"fontgate.fgPoint.iy = iy (...) int iy() - integer fast","title":"iy"},{"location":"fontgate.fgPoint.html#len","text":"fontgate.fgPoint.len = len (...) float len()","title":"len"},{"location":"fontgate.fgPoint.html#len2","text":"fontgate.fgPoint.len2 = len2 (...) float len2()","title":"len2"},{"location":"fontgate.fgPoint.html#normal","text":"fontgate.fgPoint.normal = normal (...) fgPoint normal()","title":"normal"},{"location":"fontgate.fgPoint.html#rotate","text":"fontgate.fgPoint.rotate = rotate (...) fgPoint rotate(fgPoint v, fgPoint c)","title":"rotate"},{"location":"fontgate.fgPoint.html#round","text":"fontgate.fgPoint.round = round (...) fgPoint round([doRound=true])","title":"round"},{"location":"fontgate.fgPoint.html#rx","text":"fontgate.fgPoint.rx = rx (...) int rx() - integer rounded","title":"rx"},{"location":"fontgate.fgPoint.html#ry","text":"fontgate.fgPoint.ry = ry (...) int ry() - integer rounded","title":"ry"},{"location":"fontgate.fgPoint.html#transform","text":"fontgate.fgPoint.transform = transform (...) transform(fgMatrix)","title":"transform"},{"location":"fontgate.fgPoint.html#transformed","text":"fontgate.fgPoint.transformed = transformed (...) fgPoint transformed(fgMatrix)","title":"transformed"},{"location":"fontgate.fgPoint.html#value","text":"fontgate.fgPoint.value = value (...) float value([horizontal=true])","title":"value"},{"location":"fontgate.fgPoint.html#x","text":"fontgate.fgPoint.x (float)","title":"x"},{"location":"fontgate.fgPoint.html#y","text":"fontgate.fgPoint.y (float)","title":"y"},{"location":"fontgate.fgPoint.html#zero","text":"fontgate.fgPoint.zero = zero (...) bool zero()","title":"zero"},{"location":"fontgate.fgPointU.html","text":"fgPointU fontgate.fgPointU = class fgPointU ( object ) PointU representation Constructors: fgPointU() - default fgPointU(fgPoint) - copy fgPointU(fgPointU) - copy fgPointU(fgPoint, float u) fgPointU(tuple(float x, float y, float u)) fgPointU(float x, float y, float u) Math Operations: fgPointU + fgPoint/fgPointU fgPointU - fgPoint/fgPointU fgPointU * fgPoint/fgPointU fgPointU * float - vector product fgPointU / float fgPointU < < fgPointU - True if first point is less or equal to second fgPointU >> fgPointU - True if first point is greater or equal to second fgPointU ^ fgPointU - scalar product Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __div__ (...) x. __div__ (y) < ==> x/y __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len (x) __lshift__ (...) x. __lshift__ (y) < ==> x < __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (y) < ==> x*y __ne__ (...) x. __ne__ (y) < ==> x!=y __radd__ (...) x. __radd__ (y) < ==> y+x __rdiv__ (...) x. __rdiv__ (y) < ==> y/x __repr__ (...) x. __repr__ () < ==> repr(x) __rlshift__ (...) x. __rlshift__ (y) < ==> y < __rmul__ (...) x. __rmul__ (y) < ==> y*x __rrshift__ (...) x. __rrshift__ (y) < ==> y>>x __rshift__ (...) x. __rshift__ (y) < ==> x>>y __rsub__ (...) x. __rsub__ (y) < ==> y-x __rxor__ (...) x. __rxor__ (y) < ==> y^x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) __sub__ (...) x. __sub__ (y) < ==> x-y __xor__ (...) x. __xor__ (y) < ==> x^y angleDiff (...) fgPoint angleDiff (fgPoint) angleSum (...) fgPoint angleSum (fgPoint) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign (fgPointU) or assign (float x, float y, float u) clear (...) clear () close_to (...) bool close_to (fgPointU[, d=0.00001]) collinear (...) bool collinear (fgPoint) direction (...) fgPoint direction () dist (...) float dist (fgPoint) dist2 (...) float dist2 (fgPoint) distance (...) float distance (fgPoint[, horizontal=false] doubleScale (...) scale(fgPoint) or scale(float sx, float sy) flip (...) flip () flipped (...) fgPoint flipped () ix (...) int ix () - integer fast iy (...) int iy () - integer fast len (...) float len () len2 (...) float len2 () normal (...) fgPoint normal () rotate (...) fgPoint rotate (fgPointU v, fgPoint c) round (...) fgPoint round ([doRound=true]) rx (...) int rx () - integer rounded ry (...) int ry () - integer rounded transform (...) transform (fgMatrix) transformed (...) fgPoint transformed (fgMatrix) value (...) float value ([horizontal=true]) zero (...) bool zero () Descriptors u (float) x (float) y (float) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T angleDiff fontgate.fgPointU.angleDiff = angleDiff (...) fgPoint angleDiff(fgPoint) angleSum fontgate.fgPointU.angleSum = angleSum (...) fgPoint angleSum(fgPoint) asDict fontgate.fgPointU.asDict = asDict (...) represent object as dictionary assign fontgate.fgPointU.assign = assign (...) assign(fgPointU) or assign(float x, float y, float u) asTuple fontgate.fgPointU.asTuple = asTuple (...) represent object as tuple clear fontgate.fgPointU.clear = clear (...) clear() close_to fontgate.fgPointU.close_to = close_to (...) bool close_to(fgPointU[, d=0.00001]) collinear fontgate.fgPointU.collinear = collinear (...) bool collinear(fgPoint) direction fontgate.fgPointU.direction = direction (...) fgPoint direction() dist fontgate.fgPointU.dist = dist (...) float dist(fgPoint) dist2 fontgate.fgPointU.dist2 = dist2 (...) float dist2(fgPoint) distance fontgate.fgPointU.distance = distance (...) float distance(fgPoint[, horizontal=false] doubleScale fontgate.fgPointU.doubleScale = doubleScale (...) scale(fgPoint) or scale(float sx, float sy) flip fontgate.fgPointU.flip = flip (...) flip() flipped fontgate.fgPointU.flipped = flipped (...) fgPoint flipped() ix fontgate.fgPointU.ix = ix (...) int ix() - integer fast iy fontgate.fgPointU.iy = iy (...) int iy() - integer fast len fontgate.fgPointU.len = len (...) float len() len2 fontgate.fgPointU.len2 = len2 (...) float len2() normal fontgate.fgPointU.normal = normal (...) fgPoint normal() rotate fontgate.fgPointU.rotate = rotate (...) fgPoint rotate(fgPointU v, fgPoint c) round fontgate.fgPointU.round = round (...) fgPoint round([doRound=true]) rx fontgate.fgPointU.rx = rx (...) int rx() - integer rounded ry fontgate.fgPointU.ry = ry (...) int ry() - integer rounded transform fontgate.fgPointU.transform = transform (...) transform(fgMatrix) transformed fontgate.fgPointU.transformed = transformed (...) fgPoint transformed(fgMatrix) u fontgate.fgPointU.u (float) value fontgate.fgPointU.value = value (...) float value([horizontal=true]) x fontgate.fgPointU.x (float) y fontgate.fgPointU.y (float) zero fontgate.fgPointU.zero = zero (...) bool zero()","title":"fgPointU"},{"location":"fontgate.fgPointU.html#fgpointu","text":"","title":"fgPointU"},{"location":"fontgate.fgPointU.html#anglediff","text":"fontgate.fgPointU.angleDiff = angleDiff (...) fgPoint angleDiff(fgPoint)","title":"angleDiff"},{"location":"fontgate.fgPointU.html#anglesum","text":"fontgate.fgPointU.angleSum = angleSum (...) fgPoint angleSum(fgPoint)","title":"angleSum"},{"location":"fontgate.fgPointU.html#asdict","text":"fontgate.fgPointU.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgPointU.html#assign","text":"fontgate.fgPointU.assign = assign (...) assign(fgPointU) or assign(float x, float y, float u)","title":"assign"},{"location":"fontgate.fgPointU.html#astuple","text":"fontgate.fgPointU.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgPointU.html#clear","text":"fontgate.fgPointU.clear = clear (...) clear()","title":"clear"},{"location":"fontgate.fgPointU.html#close_to","text":"fontgate.fgPointU.close_to = close_to (...) bool close_to(fgPointU[, d=0.00001])","title":"close_to"},{"location":"fontgate.fgPointU.html#collinear","text":"fontgate.fgPointU.collinear = collinear (...) bool collinear(fgPoint)","title":"collinear"},{"location":"fontgate.fgPointU.html#direction","text":"fontgate.fgPointU.direction = direction (...) fgPoint direction()","title":"direction"},{"location":"fontgate.fgPointU.html#dist","text":"fontgate.fgPointU.dist = dist (...) float dist(fgPoint)","title":"dist"},{"location":"fontgate.fgPointU.html#dist2","text":"fontgate.fgPointU.dist2 = dist2 (...) float dist2(fgPoint)","title":"dist2"},{"location":"fontgate.fgPointU.html#distance","text":"fontgate.fgPointU.distance = distance (...) float distance(fgPoint[, horizontal=false]","title":"distance"},{"location":"fontgate.fgPointU.html#doublescale","text":"fontgate.fgPointU.doubleScale = doubleScale (...) scale(fgPoint) or scale(float sx, float sy)","title":"doubleScale"},{"location":"fontgate.fgPointU.html#flip","text":"fontgate.fgPointU.flip = flip (...) flip()","title":"flip"},{"location":"fontgate.fgPointU.html#flipped","text":"fontgate.fgPointU.flipped = flipped (...) fgPoint flipped()","title":"flipped"},{"location":"fontgate.fgPointU.html#ix","text":"fontgate.fgPointU.ix = ix (...) int ix() - integer fast","title":"ix"},{"location":"fontgate.fgPointU.html#iy","text":"fontgate.fgPointU.iy = iy (...) int iy() - integer fast","title":"iy"},{"location":"fontgate.fgPointU.html#len","text":"fontgate.fgPointU.len = len (...) float len()","title":"len"},{"location":"fontgate.fgPointU.html#len2","text":"fontgate.fgPointU.len2 = len2 (...) float len2()","title":"len2"},{"location":"fontgate.fgPointU.html#normal","text":"fontgate.fgPointU.normal = normal (...) fgPoint normal()","title":"normal"},{"location":"fontgate.fgPointU.html#rotate","text":"fontgate.fgPointU.rotate = rotate (...) fgPoint rotate(fgPointU v, fgPoint c)","title":"rotate"},{"location":"fontgate.fgPointU.html#round","text":"fontgate.fgPointU.round = round (...) fgPoint round([doRound=true])","title":"round"},{"location":"fontgate.fgPointU.html#rx","text":"fontgate.fgPointU.rx = rx (...) int rx() - integer rounded","title":"rx"},{"location":"fontgate.fgPointU.html#ry","text":"fontgate.fgPointU.ry = ry (...) int ry() - integer rounded","title":"ry"},{"location":"fontgate.fgPointU.html#transform","text":"fontgate.fgPointU.transform = transform (...) transform(fgMatrix)","title":"transform"},{"location":"fontgate.fgPointU.html#transformed","text":"fontgate.fgPointU.transformed = transformed (...) fgPoint transformed(fgMatrix)","title":"transformed"},{"location":"fontgate.fgPointU.html#u","text":"fontgate.fgPointU.u (float)","title":"u"},{"location":"fontgate.fgPointU.html#value","text":"fontgate.fgPointU.value = value (...) float value([horizontal=true])","title":"value"},{"location":"fontgate.fgPointU.html#x","text":"fontgate.fgPointU.x (float)","title":"x"},{"location":"fontgate.fgPointU.html#y","text":"fontgate.fgPointU.y (float)","title":"y"},{"location":"fontgate.fgPointU.html#zero","text":"fontgate.fgPointU.zero = zero (...) bool zero()","title":"zero"},{"location":"fontgate.fgRect.html","text":"fgRect fontgate.fgRect = class fgRect ( object ) Rectangle representation Constructors: fgRect() - default fgRect(fgRect) - copy fgRect(fgPoint, fgPoint) fgRect(fgPoint, fgPoint, bool empty) fgRect(float x1, float y1, float x2, float y2) Math Operations: fgRect + fgPoint fgRect + fgRect fgRect + float fgRect - fgPoint fgRect - fgRect fgRect - float fgRect * float fgRect / float fgRect & fgRect fgRect | fgRect Methods __add__ (...) x. __add__ (y) < ==> x+y __and__ (...) x. __and__ (y) < ==> x __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __div__ (...) x. __div__ (y) < ==> x/y __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __mul__ (...) x. __mul__ (y) < ==> x*y __ne__ (...) x. __ne__ (y) < ==> x!=y __or__ (...) x. __or__ (y) < ==> x|y __radd__ (...) x. __radd__ (y) < ==> y+x __rand__ (...) x. __rand__ (y) < ==> y __rdiv__ (...) x. __rdiv__ (y) < ==> y/x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __ror__ (...) x. __ror__ (y) < ==> y|x __rsub__ (...) x. __rsub__ (y) < ==> y-x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) __sub__ (...) x. __sub__ (y) < ==> x-y adjust (...) adjust (float x1, float y1, float x2, float y2) adjusted (...) fgRect adjusted (float x1, float y1, float x2, float y2) asDict (...) represent Py::Object as dictionary asTuple (...) represent Py::Object as tuple assign (...) assign (fgPoint, fgPoint[, fix=true]) or assign (float, float, float, float[, fix=true]) bottom (...) float bottom () center (...) fgPoint center () clear (...) clear () contains (...) bool contains (fgPoint) or bool contains (fgRect) containsX (...) bool containsX (float) containsY (...) bool containsY (float) diagonal (...) float diagonal () empty (...) empty () fix (...) fix () fix_x (...) fix_x () fix_y (...) fix_y () height (...) float height () intersects (...) bool intersects (fgRect) left (...) float left () move (...) move (float dx, float dy) moved (...) fgRect moved (float dx, float dy) right (...) float right () setBottom (...) setBottom (float) setHeight (...) setHeight (float) setLeft (...) setLeft (float) setRect (...) setRect (int x, int y, int w, int h) setRight (...) setRight (float) setSize (...) setSize (fgPoint) setTop (...) setTop (float) setWidth (...) setWidth (float) size (...) fgPoint size () top (...) float top () transform (...) transform (fgMatrix) transformed (...) fgRect transformed (fgMatrix) width (...) float width () zero (...) zero () Descriptors ll (fgPoint) lower left point ur (fgPoint) upper right point Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T adjust fontgate.fgRect.adjust = adjust (...) adjust(float x1, float y1, float x2, float y2) adjusted fontgate.fgRect.adjusted = adjusted (...) fgRect adjusted(float x1, float y1, float x2, float y2) asDict fontgate.fgRect.asDict = asDict (...) represent Py::Object as dictionary assign fontgate.fgRect.assign = assign (...) assign(fgPoint, fgPoint[, fix=true]) or assign(float, float, float, float[, fix=true]) asTuple fontgate.fgRect.asTuple = asTuple (...) represent Py::Object as tuple bottom fontgate.fgRect.bottom = bottom (...) float bottom() center fontgate.fgRect.center = center (...) fgPoint center() clear fontgate.fgRect.clear = clear (...) clear() contains fontgate.fgRect.contains = contains (...) bool contains(fgPoint) or bool contains(fgRect) containsX fontgate.fgRect.containsX = containsX (...) bool containsX(float) containsY fontgate.fgRect.containsY = containsY (...) bool containsY(float) diagonal fontgate.fgRect.diagonal = diagonal (...) float diagonal() empty fontgate.fgRect.empty = empty (...) empty() fix fontgate.fgRect.fix = fix (...) fix() fix_x fontgate.fgRect.fix_x = fix_x (...) fix_x() fix_y fontgate.fgRect.fix_y = fix_y (...) fix_y() height fontgate.fgRect.height = height (...) float height() intersects fontgate.fgRect.intersects = intersects (...) bool intersects(fgRect) left fontgate.fgRect.left = left (...) float left() ll fontgate.fgRect.ll (fgPoint) lower left point move fontgate.fgRect.move = move (...) move(float dx, float dy) moved fontgate.fgRect.moved = moved (...) fgRect moved(float dx, float dy) right fontgate.fgRect.right = right (...) float right() setBottom fontgate.fgRect.setBottom = setBottom (...) setBottom(float) setHeight fontgate.fgRect.setHeight = setHeight (...) setHeight(float) setLeft fontgate.fgRect.setLeft = setLeft (...) setLeft(float) setRect fontgate.fgRect.setRect = setRect (...) setRect(int x, int y, int w, int h) setRight fontgate.fgRect.setRight = setRight (...) setRight(float) setSize fontgate.fgRect.setSize = setSize (...) setSize(fgPoint) setTop fontgate.fgRect.setTop = setTop (...) setTop(float) setWidth fontgate.fgRect.setWidth = setWidth (...) setWidth(float) size fontgate.fgRect.size = size (...) fgPoint size() top fontgate.fgRect.top = top (...) float top() transform fontgate.fgRect.transform = transform (...) transform(fgMatrix) transformed fontgate.fgRect.transformed = transformed (...) fgRect transformed(fgMatrix) ur fontgate.fgRect.ur (fgPoint) upper right point width fontgate.fgRect.width = width (...) float width() zero fontgate.fgRect.zero = zero (...) zero()","title":"fgRect"},{"location":"fontgate.fgRect.html#fgrect","text":"","title":"fgRect"},{"location":"fontgate.fgRect.html#adjust","text":"fontgate.fgRect.adjust = adjust (...) adjust(float x1, float y1, float x2, float y2)","title":"adjust"},{"location":"fontgate.fgRect.html#adjusted","text":"fontgate.fgRect.adjusted = adjusted (...) fgRect adjusted(float x1, float y1, float x2, float y2)","title":"adjusted"},{"location":"fontgate.fgRect.html#asdict","text":"fontgate.fgRect.asDict = asDict (...) represent Py::Object as dictionary","title":"asDict"},{"location":"fontgate.fgRect.html#assign","text":"fontgate.fgRect.assign = assign (...) assign(fgPoint, fgPoint[, fix=true]) or assign(float, float, float, float[, fix=true])","title":"assign"},{"location":"fontgate.fgRect.html#astuple","text":"fontgate.fgRect.asTuple = asTuple (...) represent Py::Object as tuple","title":"asTuple"},{"location":"fontgate.fgRect.html#bottom","text":"fontgate.fgRect.bottom = bottom (...) float bottom()","title":"bottom"},{"location":"fontgate.fgRect.html#center","text":"fontgate.fgRect.center = center (...) fgPoint center()","title":"center"},{"location":"fontgate.fgRect.html#clear","text":"fontgate.fgRect.clear = clear (...) clear()","title":"clear"},{"location":"fontgate.fgRect.html#contains","text":"fontgate.fgRect.contains = contains (...) bool contains(fgPoint) or bool contains(fgRect)","title":"contains"},{"location":"fontgate.fgRect.html#containsx","text":"fontgate.fgRect.containsX = containsX (...) bool containsX(float)","title":"containsX"},{"location":"fontgate.fgRect.html#containsy","text":"fontgate.fgRect.containsY = containsY (...) bool containsY(float)","title":"containsY"},{"location":"fontgate.fgRect.html#diagonal","text":"fontgate.fgRect.diagonal = diagonal (...) float diagonal()","title":"diagonal"},{"location":"fontgate.fgRect.html#empty","text":"fontgate.fgRect.empty = empty (...) empty()","title":"empty"},{"location":"fontgate.fgRect.html#fix","text":"fontgate.fgRect.fix = fix (...) fix()","title":"fix"},{"location":"fontgate.fgRect.html#fix_x","text":"fontgate.fgRect.fix_x = fix_x (...) fix_x()","title":"fix_x"},{"location":"fontgate.fgRect.html#fix_y","text":"fontgate.fgRect.fix_y = fix_y (...) fix_y()","title":"fix_y"},{"location":"fontgate.fgRect.html#height","text":"fontgate.fgRect.height = height (...) float height()","title":"height"},{"location":"fontgate.fgRect.html#intersects","text":"fontgate.fgRect.intersects = intersects (...) bool intersects(fgRect)","title":"intersects"},{"location":"fontgate.fgRect.html#left","text":"fontgate.fgRect.left = left (...) float left()","title":"left"},{"location":"fontgate.fgRect.html#ll","text":"fontgate.fgRect.ll (fgPoint) lower left point","title":"ll"},{"location":"fontgate.fgRect.html#move","text":"fontgate.fgRect.move = move (...) move(float dx, float dy)","title":"move"},{"location":"fontgate.fgRect.html#moved","text":"fontgate.fgRect.moved = moved (...) fgRect moved(float dx, float dy)","title":"moved"},{"location":"fontgate.fgRect.html#right","text":"fontgate.fgRect.right = right (...) float right()","title":"right"},{"location":"fontgate.fgRect.html#setbottom","text":"fontgate.fgRect.setBottom = setBottom (...) setBottom(float)","title":"setBottom"},{"location":"fontgate.fgRect.html#setheight","text":"fontgate.fgRect.setHeight = setHeight (...) setHeight(float)","title":"setHeight"},{"location":"fontgate.fgRect.html#setleft","text":"fontgate.fgRect.setLeft = setLeft (...) setLeft(float)","title":"setLeft"},{"location":"fontgate.fgRect.html#setrect","text":"fontgate.fgRect.setRect = setRect (...) setRect(int x, int y, int w, int h)","title":"setRect"},{"location":"fontgate.fgRect.html#setright","text":"fontgate.fgRect.setRight = setRight (...) setRight(float)","title":"setRight"},{"location":"fontgate.fgRect.html#setsize","text":"fontgate.fgRect.setSize = setSize (...) setSize(fgPoint)","title":"setSize"},{"location":"fontgate.fgRect.html#settop","text":"fontgate.fgRect.setTop = setTop (...) setTop(float)","title":"setTop"},{"location":"fontgate.fgRect.html#setwidth","text":"fontgate.fgRect.setWidth = setWidth (...) setWidth(float)","title":"setWidth"},{"location":"fontgate.fgRect.html#size","text":"fontgate.fgRect.size = size (...) fgPoint size()","title":"size"},{"location":"fontgate.fgRect.html#top","text":"fontgate.fgRect.top = top (...) float top()","title":"top"},{"location":"fontgate.fgRect.html#transform","text":"fontgate.fgRect.transform = transform (...) transform(fgMatrix)","title":"transform"},{"location":"fontgate.fgRect.html#transformed","text":"fontgate.fgRect.transformed = transformed (...) fgRect transformed(fgMatrix)","title":"transformed"},{"location":"fontgate.fgRect.html#ur","text":"fontgate.fgRect.ur (fgPoint) upper right point","title":"ur"},{"location":"fontgate.fgRect.html#width","text":"fontgate.fgRect.width = width (...) float width()","title":"width"},{"location":"fontgate.fgRect.html#zero","text":"fontgate.fgRect.zero = zero (...) zero()","title":"zero"},{"location":"fontgate.fgRendered.html","text":"fgRendered fontgate.fgRendered = class fgRendered ( object ) fgRendered representation Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors bitmap metrics position ppm Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgRendered.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgRendered.asTuple = asTuple (...) represent object as tuple","title":"fgRendered"},{"location":"fontgate.fgRendered.html#fgrendered","text":"","title":"fgRendered"},{"location":"fontgate.fgRendered.html#asdict","text":"fontgate.fgRendered.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgRendered.html#astuple","text":"fontgate.fgRendered.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgShape.html","text":"fgShape fontgate.fgShape = class fgShape ( object ) Shape representation Constructors: fgShape() - default fgShape(fgShape) - copy fgShape(fgShape, fgShape, float tx, float ty) fgShape(fgShape, fgShape, float tx, float ty, int blend_mode) Math Operations: fgShape + fgShape fgShape - fgShape fgShape * float Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __mul__ (...) x. __mul__ (y) < ==> x*y __radd__ (...) x. __radd__ (y) < ==> y+x __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (y) < ==> y*x __rsub__ (...) x. __rsub__ (y) < ==> y-x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __sub__ (...) x. __sub__ (y) < ==> x-y addContour (...) fgContour addContour (fgContour) addShape (...) int addShape (fgShape, int mode) ??? applyTransform (...) applyTransform () area (...) float area () assignStyle (...) assignStyle (fgShape) autoInterpolated (...) bool autoInterpolated () autoSmooth (...) bool autoSmooth () boundingBox (...) fgRect/Nothing boundingBox (fgMatrix[, bool prepareExport=false]) checkContours (...) checkContours () containsOffPoint (...) bool containsOffPoint () countContours (...) int countContours () countNodes (...) int countNodes () excludeShape (...) int excludeShape (fgShape, int mode) ??? hasBody (...) bool hasBody () hasContours (...) bool hasContours () isCompatible (...) bool/Nothing isCompatible (fgShape) removeOverlap (...) int removeOverlap () reverse (...) reverse () sortContours (...) sortContours () subtractShape (...) int subtractShape (fgShape, int mode) ??? transform (...) transform (fgMatrix) Descriptors angle (float) body (fgBrush) calligraphic (bool) cap_type (int) contours (fgContours) join_type (int) matrix (fgMatrix) name (string) opacity (float) pen (fgBrush) picture (fgBitmap) width (float) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T addContour fontgate.fgShape.addContour = addContour (...) fgContour addContour(fgContour) addShape fontgate.fgShape.addShape = addShape (...) int addShape(fgShape, int mode) ??? angle fontgate.fgShape.angle (float) applyTransform fontgate.fgShape.applyTransform = applyTransform (...) applyTransform() area fontgate.fgShape.area = area (...) float area() assignStyle fontgate.fgShape.assignStyle = assignStyle (...) assignStyle(fgShape) autoInterpolated fontgate.fgShape.autoInterpolated = autoInterpolated (...) bool autoInterpolated() autoSmooth fontgate.fgShape.autoSmooth = autoSmooth (...) bool autoSmooth() body fontgate.fgShape.body (fgBrush) boundingBox fontgate.fgShape.boundingBox = boundingBox (...) fgRect/Nothing boundingBox(fgMatrix[, bool prepareExport=false]) calligraphic fontgate.fgShape.calligraphic (bool) cap_type fontgate.fgShape.cap_type (int) checkContours fontgate.fgShape.checkContours = checkContours (...) checkContours() containsOffPoint fontgate.fgShape.containsOffPoint = containsOffPoint (...) bool containsOffPoint() contours fontgate.fgShape.contours (fgContours) countContours fontgate.fgShape.countContours = countContours (...) int countContours() countNodes fontgate.fgShape.countNodes = countNodes (...) int countNodes() excludeShape fontgate.fgShape.excludeShape = excludeShape (...) int excludeShape(fgShape, int mode) ??? hasBody fontgate.fgShape.hasBody = hasBody (...) bool hasBody() hasContours fontgate.fgShape.hasContours = hasContours (...) bool hasContours() isCompatible fontgate.fgShape.isCompatible = isCompatible (...) bool/Nothing isCompatible(fgShape) join_type fontgate.fgShape.join_type (int) matrix fontgate.fgShape.matrix (fgMatrix) name fontgate.fgShape.name (string) opacity fontgate.fgShape.opacity (float) pen fontgate.fgShape.pen (fgBrush) picture fontgate.fgShape.picture (fgBitmap) removeOverlap fontgate.fgShape.removeOverlap = removeOverlap (...) int removeOverlap() reverse fontgate.fgShape.reverse = reverse (...) reverse() sortContours fontgate.fgShape.sortContours = sortContours (...) sortContours() subtractShape fontgate.fgShape.subtractShape = subtractShape (...) int subtractShape(fgShape, int mode) ??? transform fontgate.fgShape.transform = transform (...) transform(fgMatrix) width fontgate.fgShape.width (float)","title":"fgShape"},{"location":"fontgate.fgShape.html#fgshape","text":"","title":"fgShape"},{"location":"fontgate.fgShape.html#addcontour","text":"fontgate.fgShape.addContour = addContour (...) fgContour addContour(fgContour)","title":"addContour"},{"location":"fontgate.fgShape.html#addshape","text":"fontgate.fgShape.addShape = addShape (...) int addShape(fgShape, int mode) ???","title":"addShape"},{"location":"fontgate.fgShape.html#angle","text":"fontgate.fgShape.angle (float)","title":"angle"},{"location":"fontgate.fgShape.html#applytransform","text":"fontgate.fgShape.applyTransform = applyTransform (...) applyTransform()","title":"applyTransform"},{"location":"fontgate.fgShape.html#area","text":"fontgate.fgShape.area = area (...) float area()","title":"area"},{"location":"fontgate.fgShape.html#assignstyle","text":"fontgate.fgShape.assignStyle = assignStyle (...) assignStyle(fgShape)","title":"assignStyle"},{"location":"fontgate.fgShape.html#autointerpolated","text":"fontgate.fgShape.autoInterpolated = autoInterpolated (...) bool autoInterpolated()","title":"autoInterpolated"},{"location":"fontgate.fgShape.html#autosmooth","text":"fontgate.fgShape.autoSmooth = autoSmooth (...) bool autoSmooth()","title":"autoSmooth"},{"location":"fontgate.fgShape.html#body","text":"fontgate.fgShape.body (fgBrush)","title":"body"},{"location":"fontgate.fgShape.html#boundingbox","text":"fontgate.fgShape.boundingBox = boundingBox (...) fgRect/Nothing boundingBox(fgMatrix[, bool prepareExport=false])","title":"boundingBox"},{"location":"fontgate.fgShape.html#calligraphic","text":"fontgate.fgShape.calligraphic (bool)","title":"calligraphic"},{"location":"fontgate.fgShape.html#cap_type","text":"fontgate.fgShape.cap_type (int)","title":"cap_type"},{"location":"fontgate.fgShape.html#checkcontours","text":"fontgate.fgShape.checkContours = checkContours (...) checkContours()","title":"checkContours"},{"location":"fontgate.fgShape.html#containsoffpoint","text":"fontgate.fgShape.containsOffPoint = containsOffPoint (...) bool containsOffPoint()","title":"containsOffPoint"},{"location":"fontgate.fgShape.html#contours","text":"fontgate.fgShape.contours (fgContours)","title":"contours"},{"location":"fontgate.fgShape.html#countcontours","text":"fontgate.fgShape.countContours = countContours (...) int countContours()","title":"countContours"},{"location":"fontgate.fgShape.html#countnodes","text":"fontgate.fgShape.countNodes = countNodes (...) int countNodes()","title":"countNodes"},{"location":"fontgate.fgShape.html#excludeshape","text":"fontgate.fgShape.excludeShape = excludeShape (...) int excludeShape(fgShape, int mode) ???","title":"excludeShape"},{"location":"fontgate.fgShape.html#hasbody","text":"fontgate.fgShape.hasBody = hasBody (...) bool hasBody()","title":"hasBody"},{"location":"fontgate.fgShape.html#hascontours","text":"fontgate.fgShape.hasContours = hasContours (...) bool hasContours()","title":"hasContours"},{"location":"fontgate.fgShape.html#iscompatible","text":"fontgate.fgShape.isCompatible = isCompatible (...) bool/Nothing isCompatible(fgShape)","title":"isCompatible"},{"location":"fontgate.fgShape.html#join_type","text":"fontgate.fgShape.join_type (int)","title":"join_type"},{"location":"fontgate.fgShape.html#matrix","text":"fontgate.fgShape.matrix (fgMatrix)","title":"matrix"},{"location":"fontgate.fgShape.html#name","text":"fontgate.fgShape.name (string)","title":"name"},{"location":"fontgate.fgShape.html#opacity","text":"fontgate.fgShape.opacity (float)","title":"opacity"},{"location":"fontgate.fgShape.html#pen","text":"fontgate.fgShape.pen (fgBrush)","title":"pen"},{"location":"fontgate.fgShape.html#picture","text":"fontgate.fgShape.picture (fgBitmap)","title":"picture"},{"location":"fontgate.fgShape.html#removeoverlap","text":"fontgate.fgShape.removeOverlap = removeOverlap (...) int removeOverlap()","title":"removeOverlap"},{"location":"fontgate.fgShape.html#reverse","text":"fontgate.fgShape.reverse = reverse (...) reverse()","title":"reverse"},{"location":"fontgate.fgShape.html#sortcontours","text":"fontgate.fgShape.sortContours = sortContours (...) sortContours()","title":"sortContours"},{"location":"fontgate.fgShape.html#subtractshape","text":"fontgate.fgShape.subtractShape = subtractShape (...) int subtractShape(fgShape, int mode) ???","title":"subtractShape"},{"location":"fontgate.fgShape.html#transform","text":"fontgate.fgShape.transform = transform (...) transform(fgMatrix)","title":"transform"},{"location":"fontgate.fgShape.html#width","text":"fontgate.fgShape.width (float)","title":"width"},{"location":"fontgate.fgShapes.html","text":"fgShapes fontgate.fgShapes = class fgShapes ( object ) list of fgShape objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgShapes"},{"location":"fontgate.fgShapes.html#fgshapes","text":"","title":"fgShapes"},{"location":"fontgate.fgStem.html","text":"fgStem fontgate.fgStem = class fgStem ( object ) Stem representation Constructors: fgStem() - default fgStem(fgStem) - copy fgStem(float) Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) clear (...) clear () fillProgram (...) list(int) fillProgram (float upm) ppm (...) int ppm (float upm, int k) setProgram (...) setProgram (int k, int ppm, bool keepValues) Descriptors name (string) program ( dict(int:int) ) value (float) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T clear fontgate.fgStem.clear = clear (...) clear() fillProgram fontgate.fgStem.fillProgram = fillProgram (...) list(int) fillProgram(float upm) name fontgate.fgStem.name (string) ppm fontgate.fgStem.ppm = ppm (...) int ppm(float upm, int k) program fontgate.fgStem.program ( dict(int:int) ) setProgram fontgate.fgStem.setProgram = setProgram (...) setProgram(int k, int ppm, bool keepValues) value fontgate.fgStem.value (float)","title":"fgStem"},{"location":"fontgate.fgStem.html#fgstem","text":"","title":"fgStem"},{"location":"fontgate.fgStem.html#clear","text":"fontgate.fgStem.clear = clear (...) clear()","title":"clear"},{"location":"fontgate.fgStem.html#fillprogram","text":"fontgate.fgStem.fillProgram = fillProgram (...) list(int) fillProgram(float upm)","title":"fillProgram"},{"location":"fontgate.fgStem.html#name","text":"fontgate.fgStem.name (string)","title":"name"},{"location":"fontgate.fgStem.html#ppm","text":"fontgate.fgStem.ppm = ppm (...) int ppm(float upm, int k)","title":"ppm"},{"location":"fontgate.fgStem.html#program","text":"fontgate.fgStem.program ( dict(int:int) )","title":"program"},{"location":"fontgate.fgStem.html#setprogram","text":"fontgate.fgStem.setProgram = setProgram (...) setProgram(int k, int ppm, bool keepValues)","title":"setProgram"},{"location":"fontgate.fgStem.html#value","text":"fontgate.fgStem.value (float)","title":"value"},{"location":"fontgate.fgStems.html","text":"fgStems fontgate.fgStems = class fgStems ( object ) list of fgStem objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgStems.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgStems.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgStems.clean = clean (...) clean() - delete all items del fontgate.fgStems.del = del (...) del(index) - delete item by index insert fontgate.fgStems.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgStems"},{"location":"fontgate.fgStems.html#fgstems","text":"","title":"fgStems"},{"location":"fontgate.fgStems.html#append","text":"fontgate.fgStems.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgStems.html#aslist","text":"fontgate.fgStems.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgStems.html#clean","text":"fontgate.fgStems.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgStems.html#del","text":"fontgate.fgStems.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgStems.html#insert","text":"fontgate.fgStems.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgStringDict.html","text":"fgStringDict fontgate.fgStringDict = class fgStringDict ( object ) string dictionary Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgStringDict"},{"location":"fontgate.fgStringDict.html#fgstringdict","text":"","title":"fgStringDict"},{"location":"fontgate.fgTTInterpreter.html","text":"fgTTInterpreter fontgate.fgTTInterpreter = class fgTTInterpreter ( object ) TTInterpreter representation Constructors: fgTTInterpreter() - default fgTTInterpreter(fgTTInterpreter) - copy Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgTTInterpreter"},{"location":"fontgate.fgTTInterpreter.html#fgttinterpreter","text":"","title":"fgTTInterpreter"},{"location":"fontgate.fgTrueTypeData.html","text":"fgTrueTypeData fontgate.fgTrueTypeData = class fgTrueTypeData ( object ) TrueTypeData representation Constructors: fgTrueTypeData() - default fgTrueTypeData(fgTrueTypeData) - copy Methods OK (...) bool OK () - return true if status is gdsOK __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value bad (...) bool bad () - return true if status isn't gdsOK bottomSideBearing (...) int bottomSideBearing () boundingBox (...) fgRect boundingBox (fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box clearImports (...) clearImports () - clear instructions and hdmx, set yPels = 1 copy (...) fgTrueTypeData copy () - create alone copy of data countPictures (...) int countPictures () - return pictures count empty (...) bool empty () - return true if state == sEmpty or no endpoints present getFontGateData (...) fgFontGateData getFontGateData () - return Nothing getType (...) string getType () - return 'dtTrueType' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present modified (...) bool modified () - return true if data was changed rightSideBearing (...) int rightSideBearing () setParent (...) setParent (fgGlyph) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform (fgMatrix) - transform data updateBoundingBox (...) updateBoundingBox () updated (...) updated () - mark data as changed, reset internal caches valid (...) bool valid () - return true if state == sValid | sDecomposed xExtent (...) int xExtent () yExtent (...) int yExtent () Descriptors advanceHeight (int) advanceWidth (int) endpoint ([int]) hdmx (fgHdmx) instructions (fgBuffer) leftSideBearing (int) points (fgTrueTypePoints) pointsMap ({ 'name': int value }) topSideBearing (int) xMax (int) xMin (int) yMax (int) yMin (int) yPels (int) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T advanceHeight fontgate.fgTrueTypeData.advanceHeight (int) advanceWidth fontgate.fgTrueTypeData.advanceWidth (int) bad fontgate.fgTrueTypeData.bad = bad (...) bool bad() - return true if status isn't gdsOK bottomSideBearing fontgate.fgTrueTypeData.bottomSideBearing = bottomSideBearing (...) int bottomSideBearing() boundingBox fontgate.fgTrueTypeData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box clearImports fontgate.fgTrueTypeData.clearImports = clearImports (...) clearImports() - clear instructions and hdmx, set yPels = 1 copy fontgate.fgTrueTypeData.copy = copy (...) fgTrueTypeData copy() - create alone copy of data countPictures fontgate.fgTrueTypeData.countPictures = countPictures (...) int countPictures() - return pictures count empty fontgate.fgTrueTypeData.empty = empty (...) bool empty() - return true if state == sEmpty or no endpoints present endpoint fontgate.fgTrueTypeData.endpoint ([int]) getFontGateData fontgate.fgTrueTypeData.getFontGateData = getFontGateData (...) fgFontGateData getFontGateData() - return Nothing getType fontgate.fgTrueTypeData.getType = getType (...) string getType() - return 'dtTrueType' hasBody fontgate.fgTrueTypeData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present hasColors fontgate.fgTrueTypeData.hasColors = hasColors (...) bool hasColors() - return true if colors is present hasHints fontgate.fgTrueTypeData.hasHints = hasHints (...) bool hasHints() - return true if hints is present hasPictures fontgate.fgTrueTypeData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present hdmx fontgate.fgTrueTypeData.hdmx (fgHdmx) instructions fontgate.fgTrueTypeData.instructions (fgBuffer) leftSideBearing fontgate.fgTrueTypeData.leftSideBearing (int) modified fontgate.fgTrueTypeData.modified = modified (...) bool modified() - return true if data was changed OK fontgate.fgTrueTypeData.OK = OK (...) bool OK() - return true if status is gdsOK points fontgate.fgTrueTypeData.points (fgTrueTypePoints) pointsMap fontgate.fgTrueTypeData.pointsMap ({ 'name': int value }) rightSideBearing fontgate.fgTrueTypeData.rightSideBearing = rightSideBearing (...) int rightSideBearing() setParent fontgate.fgTrueTypeData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph status fontgate.fgTrueTypeData.status = status (...) 'gdsOK'/'gdsInvalid' status() topSideBearing fontgate.fgTrueTypeData.topSideBearing (int) transform fontgate.fgTrueTypeData.transform = transform (...) transform(fgMatrix) - transform data updateBoundingBox fontgate.fgTrueTypeData.updateBoundingBox = updateBoundingBox (...) updateBoundingBox() updated fontgate.fgTrueTypeData.updated = updated (...) updated() - mark data as changed, reset internal caches valid fontgate.fgTrueTypeData.valid = valid (...) bool valid() - return true if state == sValid | sDecomposed xExtent fontgate.fgTrueTypeData.xExtent = xExtent (...) int xExtent() xMax fontgate.fgTrueTypeData.xMax (int) xMin fontgate.fgTrueTypeData.xMin (int) yExtent fontgate.fgTrueTypeData.yExtent = yExtent (...) int yExtent() yMax fontgate.fgTrueTypeData.yMax (int) yMin fontgate.fgTrueTypeData.yMin (int) yPels fontgate.fgTrueTypeData.yPels (int)","title":"fgTrueTypeData"},{"location":"fontgate.fgTrueTypeData.html#fgtruetypedata","text":"","title":"fgTrueTypeData"},{"location":"fontgate.fgTrueTypeData.html#advanceheight","text":"fontgate.fgTrueTypeData.advanceHeight (int)","title":"advanceHeight"},{"location":"fontgate.fgTrueTypeData.html#advancewidth","text":"fontgate.fgTrueTypeData.advanceWidth (int)","title":"advanceWidth"},{"location":"fontgate.fgTrueTypeData.html#bad","text":"fontgate.fgTrueTypeData.bad = bad (...) bool bad() - return true if status isn't gdsOK","title":"bad"},{"location":"fontgate.fgTrueTypeData.html#bottomsidebearing","text":"fontgate.fgTrueTypeData.bottomSideBearing = bottomSideBearing (...) int bottomSideBearing()","title":"bottomSideBearing"},{"location":"fontgate.fgTrueTypeData.html#boundingbox","text":"fontgate.fgTrueTypeData.boundingBox = boundingBox (...) fgRect boundingBox(fgGlyphsR, fgMatrix, bool prepareExport) - calculate bounding box","title":"boundingBox"},{"location":"fontgate.fgTrueTypeData.html#clearimports","text":"fontgate.fgTrueTypeData.clearImports = clearImports (...) clearImports() - clear instructions and hdmx, set yPels = 1","title":"clearImports"},{"location":"fontgate.fgTrueTypeData.html#copy","text":"fontgate.fgTrueTypeData.copy = copy (...) fgTrueTypeData copy() - create alone copy of data","title":"copy"},{"location":"fontgate.fgTrueTypeData.html#countpictures","text":"fontgate.fgTrueTypeData.countPictures = countPictures (...) int countPictures() - return pictures count","title":"countPictures"},{"location":"fontgate.fgTrueTypeData.html#empty","text":"fontgate.fgTrueTypeData.empty = empty (...) bool empty() - return true if state == sEmpty or no endpoints present","title":"empty"},{"location":"fontgate.fgTrueTypeData.html#endpoint","text":"fontgate.fgTrueTypeData.endpoint ([int])","title":"endpoint"},{"location":"fontgate.fgTrueTypeData.html#getfontgatedata","text":"fontgate.fgTrueTypeData.getFontGateData = getFontGateData (...) fgFontGateData getFontGateData() - return Nothing","title":"getFontGateData"},{"location":"fontgate.fgTrueTypeData.html#gettype","text":"fontgate.fgTrueTypeData.getType = getType (...) string getType() - return 'dtTrueType'","title":"getType"},{"location":"fontgate.fgTrueTypeData.html#hasbody","text":"fontgate.fgTrueTypeData.hasBody = hasBody (...) bool hasBody(bool prepareExport) - return true if non-empty body layer is present","title":"hasBody"},{"location":"fontgate.fgTrueTypeData.html#hascolors","text":"fontgate.fgTrueTypeData.hasColors = hasColors (...) bool hasColors() - return true if colors is present","title":"hasColors"},{"location":"fontgate.fgTrueTypeData.html#hashints","text":"fontgate.fgTrueTypeData.hasHints = hasHints (...) bool hasHints() - return true if hints is present","title":"hasHints"},{"location":"fontgate.fgTrueTypeData.html#haspictures","text":"fontgate.fgTrueTypeData.hasPictures = hasPictures (...) bool hasPictures() - return true if pictures is present","title":"hasPictures"},{"location":"fontgate.fgTrueTypeData.html#hdmx","text":"fontgate.fgTrueTypeData.hdmx (fgHdmx)","title":"hdmx"},{"location":"fontgate.fgTrueTypeData.html#instructions","text":"fontgate.fgTrueTypeData.instructions (fgBuffer)","title":"instructions"},{"location":"fontgate.fgTrueTypeData.html#leftsidebearing","text":"fontgate.fgTrueTypeData.leftSideBearing (int)","title":"leftSideBearing"},{"location":"fontgate.fgTrueTypeData.html#modified","text":"fontgate.fgTrueTypeData.modified = modified (...) bool modified() - return true if data was changed","title":"modified"},{"location":"fontgate.fgTrueTypeData.html#ok","text":"fontgate.fgTrueTypeData.OK = OK (...) bool OK() - return true if status is gdsOK","title":"OK"},{"location":"fontgate.fgTrueTypeData.html#points","text":"fontgate.fgTrueTypeData.points (fgTrueTypePoints)","title":"points"},{"location":"fontgate.fgTrueTypeData.html#pointsmap","text":"fontgate.fgTrueTypeData.pointsMap ({ 'name': int value })","title":"pointsMap"},{"location":"fontgate.fgTrueTypeData.html#rightsidebearing","text":"fontgate.fgTrueTypeData.rightSideBearing = rightSideBearing (...) int rightSideBearing()","title":"rightSideBearing"},{"location":"fontgate.fgTrueTypeData.html#setparent","text":"fontgate.fgTrueTypeData.setParent = setParent (...) setParent(fgGlyph) - set parent glyph","title":"setParent"},{"location":"fontgate.fgTrueTypeData.html#status","text":"fontgate.fgTrueTypeData.status = status (...) 'gdsOK'/'gdsInvalid' status()","title":"status"},{"location":"fontgate.fgTrueTypeData.html#topsidebearing","text":"fontgate.fgTrueTypeData.topSideBearing (int)","title":"topSideBearing"},{"location":"fontgate.fgTrueTypeData.html#transform","text":"fontgate.fgTrueTypeData.transform = transform (...) transform(fgMatrix) - transform data","title":"transform"},{"location":"fontgate.fgTrueTypeData.html#updateboundingbox","text":"fontgate.fgTrueTypeData.updateBoundingBox = updateBoundingBox (...) updateBoundingBox()","title":"updateBoundingBox"},{"location":"fontgate.fgTrueTypeData.html#updated","text":"fontgate.fgTrueTypeData.updated = updated (...) updated() - mark data as changed, reset internal caches","title":"updated"},{"location":"fontgate.fgTrueTypeData.html#valid","text":"fontgate.fgTrueTypeData.valid = valid (...) bool valid() - return true if state == sValid | sDecomposed","title":"valid"},{"location":"fontgate.fgTrueTypeData.html#xextent","text":"fontgate.fgTrueTypeData.xExtent = xExtent (...) int xExtent()","title":"xExtent"},{"location":"fontgate.fgTrueTypeData.html#xmax","text":"fontgate.fgTrueTypeData.xMax (int)","title":"xMax"},{"location":"fontgate.fgTrueTypeData.html#xmin","text":"fontgate.fgTrueTypeData.xMin (int)","title":"xMin"},{"location":"fontgate.fgTrueTypeData.html#yextent","text":"fontgate.fgTrueTypeData.yExtent = yExtent (...) int yExtent()","title":"yExtent"},{"location":"fontgate.fgTrueTypeData.html#ymax","text":"fontgate.fgTrueTypeData.yMax (int)","title":"yMax"},{"location":"fontgate.fgTrueTypeData.html#ymin","text":"fontgate.fgTrueTypeData.yMin (int)","title":"yMin"},{"location":"fontgate.fgTrueTypeData.html#ypels","text":"fontgate.fgTrueTypeData.yPels (int)","title":"yPels"},{"location":"fontgate.fgTrueTypePoint.html","text":"fgTrueTypePoint fontgate.fgTrueTypePoint = class fgTrueTypePoint ( object ) TrueType Point representation Constructors: fgTrueTypePoint() - default fgTrueTypePoint(fgTrueTypePoint) - copy fgTrueTypePoint(fgPoint) fgTrueTypePoint(bool on, int x, int y) Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign (int x, int y) onCurve (...) bool onCurve () or onCurve (bool value) repeat (...) bool repeat () or repeat (bool value) touched (...) bool touched () or touched (bool value) xSame (...) bool xSame () or xSame (bool value) xShort (...) bool xShort () or xShort (bool value) ySame (...) bool ySame () or ySame (bool value) yShort (...) bool yShort () or yShort (bool value) Descriptors flag (int) x (int) y (int) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgTrueTypePoint.asDict = asDict (...) represent object as dictionary assign fontgate.fgTrueTypePoint.assign = assign (...) assign(int x, int y) asTuple fontgate.fgTrueTypePoint.asTuple = asTuple (...) represent object as tuple flag fontgate.fgTrueTypePoint.flag (int) onCurve fontgate.fgTrueTypePoint.onCurve = onCurve (...) bool onCurve() or onCurve(bool value) repeat fontgate.fgTrueTypePoint.repeat = repeat (...) bool repeat() or repeat(bool value) touched fontgate.fgTrueTypePoint.touched = touched (...) bool touched() or touched(bool value) x fontgate.fgTrueTypePoint.x (int) xSame fontgate.fgTrueTypePoint.xSame = xSame (...) bool xSame() or xSame(bool value) xShort fontgate.fgTrueTypePoint.xShort = xShort (...) bool xShort() or xShort(bool value) y fontgate.fgTrueTypePoint.y (int) ySame fontgate.fgTrueTypePoint.ySame = ySame (...) bool ySame() or ySame(bool value) yShort fontgate.fgTrueTypePoint.yShort = yShort (...) bool yShort() or yShort(bool value)","title":"fgTrueTypePoint"},{"location":"fontgate.fgTrueTypePoint.html#fgtruetypepoint","text":"","title":"fgTrueTypePoint"},{"location":"fontgate.fgTrueTypePoint.html#asdict","text":"fontgate.fgTrueTypePoint.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgTrueTypePoint.html#assign","text":"fontgate.fgTrueTypePoint.assign = assign (...) assign(int x, int y)","title":"assign"},{"location":"fontgate.fgTrueTypePoint.html#astuple","text":"fontgate.fgTrueTypePoint.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgTrueTypePoint.html#flag","text":"fontgate.fgTrueTypePoint.flag (int)","title":"flag"},{"location":"fontgate.fgTrueTypePoint.html#oncurve","text":"fontgate.fgTrueTypePoint.onCurve = onCurve (...) bool onCurve() or onCurve(bool value)","title":"onCurve"},{"location":"fontgate.fgTrueTypePoint.html#repeat","text":"fontgate.fgTrueTypePoint.repeat = repeat (...) bool repeat() or repeat(bool value)","title":"repeat"},{"location":"fontgate.fgTrueTypePoint.html#touched","text":"fontgate.fgTrueTypePoint.touched = touched (...) bool touched() or touched(bool value)","title":"touched"},{"location":"fontgate.fgTrueTypePoint.html#x","text":"fontgate.fgTrueTypePoint.x (int)","title":"x"},{"location":"fontgate.fgTrueTypePoint.html#xsame","text":"fontgate.fgTrueTypePoint.xSame = xSame (...) bool xSame() or xSame(bool value)","title":"xSame"},{"location":"fontgate.fgTrueTypePoint.html#xshort","text":"fontgate.fgTrueTypePoint.xShort = xShort (...) bool xShort() or xShort(bool value)","title":"xShort"},{"location":"fontgate.fgTrueTypePoint.html#y","text":"fontgate.fgTrueTypePoint.y (int)","title":"y"},{"location":"fontgate.fgTrueTypePoint.html#ysame","text":"fontgate.fgTrueTypePoint.ySame = ySame (...) bool ySame() or ySame(bool value)","title":"ySame"},{"location":"fontgate.fgTrueTypePoint.html#yshort","text":"fontgate.fgTrueTypePoint.yShort = yShort (...) bool yShort() or yShort(bool value)","title":"yShort"},{"location":"fontgate.fgTrueTypePoints.html","text":"fgTrueTypePoints fontgate.fgTrueTypePoints = class fgTrueTypePoints ( object ) list of fgTrueTypePoint objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgTrueTypePoints.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgTrueTypePoints.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgTrueTypePoints.clean = clean (...) clean() - delete all items del fontgate.fgTrueTypePoints.del = del (...) del(index) - delete item by index insert fontgate.fgTrueTypePoints.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgTrueTypePoints"},{"location":"fontgate.fgTrueTypePoints.html#fgtruetypepoints","text":"","title":"fgTrueTypePoints"},{"location":"fontgate.fgTrueTypePoints.html#append","text":"fontgate.fgTrueTypePoints.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgTrueTypePoints.html#aslist","text":"fontgate.fgTrueTypePoints.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgTrueTypePoints.html#clean","text":"fontgate.fgTrueTypePoints.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgTrueTypePoints.html#del","text":"fontgate.fgTrueTypePoints.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgTrueTypePoints.html#insert","text":"fontgate.fgTrueTypePoints.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgValuesDict.html","text":"fgValuesDict fontgate.fgValuesDict = class fgValuesDict ( object ) float values dictionary Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fgValuesDict"},{"location":"fontgate.fgValuesDict.html#fgvaluesdict","text":"","title":"fgValuesDict"},{"location":"fontgate.fgVdmxRecord.html","text":"fgVdmxRecord fontgate.fgVdmxRecord = class fgVdmxRecord ( object ) fgVdmxRecord representation Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors yMax yMin yPelHeight Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontgate.fgVdmxRecord.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgVdmxRecord.asTuple = asTuple (...) represent object as tuple","title":"fgVdmxRecord"},{"location":"fontgate.fgVdmxRecord.html#fgvdmxrecord","text":"","title":"fgVdmxRecord"},{"location":"fontgate.fgVdmxRecord.html#asdict","text":"fontgate.fgVdmxRecord.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgVdmxRecord.html#astuple","text":"fontgate.fgVdmxRecord.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgVdmxRecords.html","text":"fgVdmxRecords fontgate.fgVdmxRecords = class fgVdmxRecords ( object ) list of fgVdmxRecord objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVdmxRecords.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVdmxRecords.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVdmxRecords.clean = clean (...) clean() - delete all items del fontgate.fgVdmxRecords.del = del (...) del(index) - delete item by index insert fontgate.fgVdmxRecords.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVdmxRecords"},{"location":"fontgate.fgVdmxRecords.html#fgvdmxrecords","text":"","title":"fgVdmxRecords"},{"location":"fontgate.fgVdmxRecords.html#append","text":"fontgate.fgVdmxRecords.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVdmxRecords.html#aslist","text":"fontgate.fgVdmxRecords.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVdmxRecords.html#clean","text":"fontgate.fgVdmxRecords.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVdmxRecords.html#del","text":"fontgate.fgVdmxRecords.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVdmxRecords.html#insert","text":"fontgate.fgVdmxRecords.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgVector.html","text":"fgVector fontgate.fgVector = class fgVector ( object ) Vector representation Constructors: fgVector() - default fgVector(fgVector) - copy fgVector(fgPoint q0[, fgPoint q1]) - from one or two points fgVector(fgPoint, float l, float a) Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) angle (...) float angle () angleTo (...) float angleTo (fgVector) asDict (...) represent object as dictionary asTuple (...) represent object as tuple bbox (...) fgRect bbox () center (...) fgPoint center () delta (...) fgPoint delta () direction (...) fgPoint direction () equivalent (...) bool equivalent (fgVector) intersect (...) fgPoint/None intersect (fgVector) or (fgPoint, t)/None intersect (fgVector, bool get_t) intersectY (...) float/None intersectY (float pos) len (...) float len () - distance between q0 and q1 parallel (...) bool parallel (fgVector) point (...) fgPoint point (float time) time (...) float time (fgPoint) Descriptors q0 (fgPoint) q1 (fgPoint) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T angle fontgate.fgVector.angle = angle (...) float angle() angleTo fontgate.fgVector.angleTo = angleTo (...) float angleTo(fgVector) asDict fontgate.fgVector.asDict = asDict (...) represent object as dictionary asTuple fontgate.fgVector.asTuple = asTuple (...) represent object as tuple bbox fontgate.fgVector.bbox = bbox (...) fgRect bbox() center fontgate.fgVector.center = center (...) fgPoint center() delta fontgate.fgVector.delta = delta (...) fgPoint delta() direction fontgate.fgVector.direction = direction (...) fgPoint direction() equivalent fontgate.fgVector.equivalent = equivalent (...) bool equivalent(fgVector) intersect fontgate.fgVector.intersect = intersect (...) fgPoint/None intersect(fgVector) or (fgPoint, t)/None intersect(fgVector, bool get_t) intersectY fontgate.fgVector.intersectY = intersectY (...) float/None intersectY(float pos) len fontgate.fgVector.len = len (...) float len() - distance between q0 and q1 parallel fontgate.fgVector.parallel = parallel (...) bool parallel(fgVector) point fontgate.fgVector.point = point (...) fgPoint point(float time) q0 fontgate.fgVector.q0 (fgPoint) q1 fontgate.fgVector.q1 (fgPoint) time fontgate.fgVector.time = time (...) float time(fgPoint)","title":"fgVector"},{"location":"fontgate.fgVector.html#fgvector","text":"","title":"fgVector"},{"location":"fontgate.fgVector.html#angle","text":"fontgate.fgVector.angle = angle (...) float angle()","title":"angle"},{"location":"fontgate.fgVector.html#angleto","text":"fontgate.fgVector.angleTo = angleTo (...) float angleTo(fgVector)","title":"angleTo"},{"location":"fontgate.fgVector.html#asdict","text":"fontgate.fgVector.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontgate.fgVector.html#astuple","text":"fontgate.fgVector.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontgate.fgVector.html#bbox","text":"fontgate.fgVector.bbox = bbox (...) fgRect bbox()","title":"bbox"},{"location":"fontgate.fgVector.html#center","text":"fontgate.fgVector.center = center (...) fgPoint center()","title":"center"},{"location":"fontgate.fgVector.html#delta","text":"fontgate.fgVector.delta = delta (...) fgPoint delta()","title":"delta"},{"location":"fontgate.fgVector.html#direction","text":"fontgate.fgVector.direction = direction (...) fgPoint direction()","title":"direction"},{"location":"fontgate.fgVector.html#equivalent","text":"fontgate.fgVector.equivalent = equivalent (...) bool equivalent(fgVector)","title":"equivalent"},{"location":"fontgate.fgVector.html#intersect","text":"fontgate.fgVector.intersect = intersect (...) fgPoint/None intersect(fgVector) or (fgPoint, t)/None intersect(fgVector, bool get_t)","title":"intersect"},{"location":"fontgate.fgVector.html#intersecty","text":"fontgate.fgVector.intersectY = intersectY (...) float/None intersectY(float pos)","title":"intersectY"},{"location":"fontgate.fgVector.html#len","text":"fontgate.fgVector.len = len (...) float len() - distance between q0 and q1","title":"len"},{"location":"fontgate.fgVector.html#parallel","text":"fontgate.fgVector.parallel = parallel (...) bool parallel(fgVector)","title":"parallel"},{"location":"fontgate.fgVector.html#point","text":"fontgate.fgVector.point = point (...) fgPoint point(float time)","title":"point"},{"location":"fontgate.fgVector.html#q0","text":"fontgate.fgVector.q0 (fgPoint)","title":"q0"},{"location":"fontgate.fgVector.html#q1","text":"fontgate.fgVector.q1 (fgPoint)","title":"q1"},{"location":"fontgate.fgVector.html#time","text":"fontgate.fgVector.time = time (...) float time(fgPoint)","title":"time"},{"location":"fontgate.fgVectorBool.html","text":"fgVectorBool fontgate.fgVectorBool = class fgVectorBool ( object ) [char] vector Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVectorBool.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVectorBool.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVectorBool.clean = clean (...) clean() - delete all items del fontgate.fgVectorBool.del = del (...) del(index) - delete item by index insert fontgate.fgVectorBool.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVectorBool"},{"location":"fontgate.fgVectorBool.html#fgvectorbool","text":"","title":"fgVectorBool"},{"location":"fontgate.fgVectorBool.html#append","text":"fontgate.fgVectorBool.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVectorBool.html#aslist","text":"fontgate.fgVectorBool.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVectorBool.html#clean","text":"fontgate.fgVectorBool.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVectorBool.html#del","text":"fontgate.fgVectorBool.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVectorBool.html#insert","text":"fontgate.fgVectorBool.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgVectorChar.html","text":"fgVectorChar fontgate.fgVectorChar = class fgVectorChar ( object ) [char] vector Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVectorChar.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVectorChar.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVectorChar.clean = clean (...) clean() - delete all items del fontgate.fgVectorChar.del = del (...) del(index) - delete item by index insert fontgate.fgVectorChar.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVectorChar"},{"location":"fontgate.fgVectorChar.html#fgvectorchar","text":"","title":"fgVectorChar"},{"location":"fontgate.fgVectorChar.html#append","text":"fontgate.fgVectorChar.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVectorChar.html#aslist","text":"fontgate.fgVectorChar.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVectorChar.html#clean","text":"fontgate.fgVectorChar.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVectorChar.html#del","text":"fontgate.fgVectorChar.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVectorChar.html#insert","text":"fontgate.fgVectorChar.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgVectorDouble.html","text":"fgVectorDouble fontgate.fgVectorDouble = class fgVectorDouble ( object ) [double] vector Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVectorDouble.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVectorDouble.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVectorDouble.clean = clean (...) clean() - delete all items del fontgate.fgVectorDouble.del = del (...) del(index) - delete item by index insert fontgate.fgVectorDouble.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVectorDouble"},{"location":"fontgate.fgVectorDouble.html#fgvectordouble","text":"","title":"fgVectorDouble"},{"location":"fontgate.fgVectorDouble.html#append","text":"fontgate.fgVectorDouble.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVectorDouble.html#aslist","text":"fontgate.fgVectorDouble.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVectorDouble.html#clean","text":"fontgate.fgVectorDouble.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVectorDouble.html#del","text":"fontgate.fgVectorDouble.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVectorDouble.html#insert","text":"fontgate.fgVectorDouble.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgVectorInt.html","text":"fgVectorInt fontgate.fgVectorInt = class fgVectorInt ( object ) [int] vector Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVectorInt.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVectorInt.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVectorInt.clean = clean (...) clean() - delete all items del fontgate.fgVectorInt.del = del (...) del(index) - delete item by index insert fontgate.fgVectorInt.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVectorInt"},{"location":"fontgate.fgVectorInt.html#fgvectorint","text":"","title":"fgVectorInt"},{"location":"fontgate.fgVectorInt.html#append","text":"fontgate.fgVectorInt.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVectorInt.html#aslist","text":"fontgate.fgVectorInt.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVectorInt.html#clean","text":"fontgate.fgVectorInt.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVectorInt.html#del","text":"fontgate.fgVectorInt.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVectorInt.html#insert","text":"fontgate.fgVectorInt.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgVectorPoint.html","text":"fgVectorPoint fontgate.fgVectorPoint = class fgVectorPoint ( object ) [fgPoint] vector Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVectorPoint.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVectorPoint.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVectorPoint.clean = clean (...) clean() - delete all items del fontgate.fgVectorPoint.del = del (...) del(index) - delete item by index insert fontgate.fgVectorPoint.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVectorPoint"},{"location":"fontgate.fgVectorPoint.html#fgvectorpoint","text":"","title":"fgVectorPoint"},{"location":"fontgate.fgVectorPoint.html#append","text":"fontgate.fgVectorPoint.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVectorPoint.html#aslist","text":"fontgate.fgVectorPoint.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVectorPoint.html#clean","text":"fontgate.fgVectorPoint.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVectorPoint.html#del","text":"fontgate.fgVectorPoint.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVectorPoint.html#insert","text":"fontgate.fgVectorPoint.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgVectorUInt16.html","text":"fgVectorUInt16 fontgate.fgVectorUInt16 = class fgVectorUInt16 ( object ) [uint16_t] vector Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVectorUInt16.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVectorUInt16.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVectorUInt16.clean = clean (...) clean() - delete all items del fontgate.fgVectorUInt16.del = del (...) del(index) - delete item by index insert fontgate.fgVectorUInt16.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVectorUInt16"},{"location":"fontgate.fgVectorUInt16.html#fgvectoruint16","text":"","title":"fgVectorUInt16"},{"location":"fontgate.fgVectorUInt16.html#append","text":"fontgate.fgVectorUInt16.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVectorUInt16.html#aslist","text":"fontgate.fgVectorUInt16.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVectorUInt16.html#clean","text":"fontgate.fgVectorUInt16.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVectorUInt16.html#del","text":"fontgate.fgVectorUInt16.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVectorUInt16.html#insert","text":"fontgate.fgVectorUInt16.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgVectorUInt32.html","text":"fgVectorUInt32 fontgate.fgVectorUInt32 = class fgVectorUInt32 ( object ) [uint32t] vector Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgVectorUInt32.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgVectorUInt32.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgVectorUInt32.clean = clean (...) clean() - delete all items del fontgate.fgVectorUInt32.del = del (...) del(index) - delete item by index insert fontgate.fgVectorUInt32.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgVectorUInt32"},{"location":"fontgate.fgVectorUInt32.html#fgvectoruint32","text":"","title":"fgVectorUInt32"},{"location":"fontgate.fgVectorUInt32.html#append","text":"fontgate.fgVectorUInt32.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgVectorUInt32.html#aslist","text":"fontgate.fgVectorUInt32.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgVectorUInt32.html#clean","text":"fontgate.fgVectorUInt32.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgVectorUInt32.html#del","text":"fontgate.fgVectorUInt32.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgVectorUInt32.html#insert","text":"fontgate.fgVectorUInt32.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.fgZone.html","text":"fgZone fontgate.fgZone = class fgZone ( object ) Zone representation Constructors: fgZone() - default fgZone(fgZone) - copy Methods __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) clear (...) clear () getIntValues (...) tuple( int y0, int y1 ) getIntValues () v0 (...) float v0 () v1 (...) float v1 () Descriptors name (string) position (float) program ( dict(int:int) ) top (bool) width (float) Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T clear fontgate.fgZone.clear = clear (...) clear() getIntValues fontgate.fgZone.getIntValues = getIntValues (...) tuple( int y0, int y1 ) getIntValues() name fontgate.fgZone.name (string) position fontgate.fgZone.position (float) program fontgate.fgZone.program ( dict(int:int) ) top fontgate.fgZone.top (bool) v0 fontgate.fgZone.v0 = v0 (...) float v0() v1 fontgate.fgZone.v1 = v1 (...) float v1() width fontgate.fgZone.width (float)","title":"fgZone"},{"location":"fontgate.fgZone.html#fgzone","text":"","title":"fgZone"},{"location":"fontgate.fgZone.html#clear","text":"fontgate.fgZone.clear = clear (...) clear()","title":"clear"},{"location":"fontgate.fgZone.html#getintvalues","text":"fontgate.fgZone.getIntValues = getIntValues (...) tuple( int y0, int y1 ) getIntValues()","title":"getIntValues"},{"location":"fontgate.fgZone.html#name","text":"fontgate.fgZone.name (string)","title":"name"},{"location":"fontgate.fgZone.html#position","text":"fontgate.fgZone.position (float)","title":"position"},{"location":"fontgate.fgZone.html#program","text":"fontgate.fgZone.program ( dict(int:int) )","title":"program"},{"location":"fontgate.fgZone.html#top","text":"fontgate.fgZone.top (bool)","title":"top"},{"location":"fontgate.fgZone.html#v0","text":"fontgate.fgZone.v0 = v0 (...) float v0()","title":"v0"},{"location":"fontgate.fgZone.html#v1","text":"fontgate.fgZone.v1 = v1 (...) float v1()","title":"v1"},{"location":"fontgate.fgZone.html#width","text":"fontgate.fgZone.width (float)","title":"width"},{"location":"fontgate.fgZones.html","text":"fgZones fontgate.fgZones = class fgZones ( object ) list of fgZone objects Methods __add__ (...) x. __add__ (y) < ==> x+y __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontgate.fgZones.append = append (...) append(item) or append( list(item) ) - add items to the end of the list asList fontgate.fgZones.asList = asList (...) list(items) asList() - get items as list clean fontgate.fgZones.clean = clean (...) clean() - delete all items del fontgate.fgZones.del = del (...) del(index) - delete item by index insert fontgate.fgZones.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"fgZones"},{"location":"fontgate.fgZones.html#fgzones","text":"","title":"fgZones"},{"location":"fontgate.fgZones.html#append","text":"fontgate.fgZones.append = append (...) append(item) or append( list(item) ) - add items to the end of the list","title":"append"},{"location":"fontgate.fgZones.html#aslist","text":"fontgate.fgZones.asList = asList (...) list(items) asList() - get items as list","title":"asList"},{"location":"fontgate.fgZones.html#clean","text":"fontgate.fgZones.clean = clean (...) clean() - delete all items","title":"clean"},{"location":"fontgate.fgZones.html#del","text":"fontgate.fgZones.del = del (...) del(index) - delete item by index","title":"del"},{"location":"fontgate.fgZones.html#insert","text":"fontgate.fgZones.insert = insert (...) insert(position, item) - insert item into list at specified position","title":"insert"},{"location":"fontgate.html","text":"fontgate fontgate FontGate Python interface fgAnchor: Anchor representation fgAnchors: list of fgAnchor objects fgAxes: Axes list representation fgAxis: Axis representation fgCMaps: list of fgCmapRecord objects fgCaret: Caret representation fgCarets: list of fgCaret objects fgCmapRecord: fgCmapRecord representation fgCoding: Coding data representation fgComponent: Component representation fgComponents: list of fgComponent objects fgContour: Contour representation fgContours: list of fgContour objects fgCuspPoint: CuspPoint representation fgCuspPoints: list of fgCuspPoint objects pyfgDataOwnerData: pyfgDataOwnerData objects fgDesignPosition: Anchor representation fgDeviceRecord: DeviceRecord representation fgDeviceRecords: list of fgDeviceRecord objects fgExtMapUIntToString: fgExtMapUIntToString dictionary fgFont: Font representation fgFontHinting: Font Hinting data representation fgFontInfo: FontInfo data fgFontInfoDict: Font info dictionaries fgGaspRecord: GaspRecord representation fgGaspRecords: list of fgGaspRecord objects fgGlyph: Glyph representation fgGlyphsR: fgGlyphsR representation fgGlyphDict: Glyph dictionaries fgGlyphIDsSet: GlyphIDs set fgGlyphs: list of fgGlyph objects fgGroup: Kerning/Metrics group fgGroups: Glyph groups list fgGuide: Guide representation fgGuides: list of fgGuide objects fgHint: Hint representation fgHintCommand: HintCommand representation fgHintCommands: list of fgHintCommand objects fgHints: list of fgHint objects fgKerning: Kerning representation fgKerningGroups: Dictionary of kerning groups fgKerningObject: KerningObject representation fgKerningObjectPair: KerningObjectPair representation fgLayer: Layer representation fgLayers: list of fgLayer objects fgLib: Dictionary with font- or glyph-related data fgMapBytes: Raw data dictionary fgExtMapIntTofgShape: fgExtMapIntTofgShape dictionary fgFlagsDict: bool flags diactionary fgValuesDict: float values dictionary fgIntDict: int dictionary fgStringDict: string dictionary fgMaster: Anchor representation fgMasters: list of fgMaster objects fgMaxP: fgMaxP representation fgMetricsClass: MetricsClass representation fgMetricsClasses: list of fgMetricsClass objects fgNametable: NameTable - unicode->name translation and vice versa fgNode: Node representation fgNodes: list of fgNode objects fgOTLayout: OpenType Layout representation fgOtInfo: OT Info representation fgOtValue: OT Value representation fgPackages: Font packages representation fgPen: Pen representation fgExtMapUShortToShort: fgExtMapUShortToShort dictionary fgShape: Shape representation fgShapes: list of fgShape objects fgStem: Stem representation fgStems: list of fgStem objects fgTrueTypePoint: TrueType Point representation fgTrueTypePoints: list of fgTrueTypePoint objects fgTTInterpreter: TTInterpreter representation fgVdmxRecord: fgVdmxRecord representation fgVdmxRecords: list of fgVdmxRecord objects fgVectorBool: [char] vector fgVectorChar: [char] vector fgVectorDouble: [double] vector fgVectorInt: [int] vector fgVectorUInt16: [uint16_t] vector fgVectorUInt32: [uint32t] vector fgVectorPoint: [fgPoint] vector fgZone: Zone representation fgZones: list of fgZone objects fgOptions: FontGate options fgOpt_T1Import: fgOpt_T1Import options page fgOpt_OTImport: fgOpt_OTImport options page fgOpt_UfoFontImport: fgOpt_UfoFontImport options page fgOpt_VfbImport: fgOpt_VfbImport options page fgOpt_VfbExport: fgOpt_VfbExport options page fgOpt_UfoFontExport: fgOpt_UfoFontExport options page fgOpt_OTExport: fgOpt_OTExport options page fgOpt_T1Export: fgOpt_T1Export options page fgOpt_EOTExport: fgOpt_EOTExport options page fgOpt_WOFFExport: fgOpt_WOFFExport options page fgOpt_Font: fgOpt_Font options page fgOpt_KerningOptions: fgOpt_KerningOptions options page fgOpt_OTExportFeaFile: fgOpt_OTExportFeaFile options page fgOpt_TTAutohint: fgOpt_TTAutohint options page fgOpt_T1Autohint: fgOpt_T1Autohint options page fgOpt_TTFAutohint: fgOpt_TTFAutohint options page fgOpt_AutoMetrics: fgOpt_AutoMetrics options page fgOpt_ExpandKerning: fgOpt_ExpandKerning options page fgOpt_Optimize: fgOpt_Optimize options page fgBitmap: Bitmap representation fgBitmaps: list of fgBitmap objects fgBitmapsData: BitmapsData representation fgBrush: Brush representation fgColor: Color representation fgCurve: Curve representation fgFontGateData: FontGateData representation fgGlyphData: GlyphData representation fgExtMapUCharToUChar: fgExtMapUCharToUChar dictionary fgMatrix: Transformation matrix representation fgPoint: Point representation fgPointU: PointU representation fgRect: Rectangle representation fgRendered: fgRendered representation fgTrueTypeData: TrueTypeData representation fgVector: Vector representation Classes builtin .object builtin .fgAnchor builtin .fgAnchors builtin .fgAxes builtin .fgAxis builtin .fgBitmap builtin .fgBitmaps builtin .fgBitmapsData builtin .fgBrush builtin .fgCMaps builtin .fgCaret builtin .fgCarets builtin .fgCmapRecord builtin .fgCoding builtin .fgColor builtin .fgComponent builtin .fgComponents builtin .fgContour builtin .fgContours builtin .fgCurve builtin .fgCuspPoint builtin .fgCuspPoints builtin .fgDesignPosition builtin .fgDeviceRecord builtin .fgDeviceRecords builtin .fgExtMapIntTofgShape builtin .fgExtMapUCharToUChar builtin .fgExtMapUIntToString builtin .fgExtMapUShortToShort builtin .fgFlagsDict builtin .fgFont builtin .fgFontGateData builtin .fgFontHinting builtin .fgFontInfo builtin .fgFontInfoDict builtin .fgGaspRecord builtin .fgGaspRecords builtin .fgGlyph builtin .fgGlyphData builtin .fgGlyphDict builtin .fgGlyphIDsSet builtin .fgGlyphs builtin .fgGlyphsR builtin .fgGroup builtin .fgGroups builtin .fgGuide builtin .fgGuides builtin .fgHint builtin .fgHintCommand builtin .fgHintCommands builtin .fgHints builtin .fgIntDict builtin .fgKerning builtin .fgKerningGroups builtin .fgKerningObject builtin .fgKerningObjectPair builtin .fgLayer builtin .fgLayers builtin .fgLib builtin .fgMapBytes builtin .fgMaster builtin .fgMasters builtin .fgMatrix builtin .fgMaxP builtin .fgMetricsClass builtin .fgMetricsClasses builtin .fgNametable builtin .fgNode builtin .fgNodes builtin .fgOTLayout builtin .fgOpt_AutoMetrics builtin .fgOpt_EOTExport builtin .fgOpt_ExpandKerning builtin .fgOpt_Font builtin .fgOpt_KerningOptions builtin .fgOpt_OTExport builtin .fgOpt_OTExportFeaFile builtin .fgOpt_OTImport builtin .fgOpt_Optimize builtin .fgOpt_T1Autohint builtin .fgOpt_T1Export builtin .fgOpt_T1Import builtin .fgOpt_TTAutohint builtin .fgOpt_TTFAutohint builtin .fgOpt_UfoFontExport builtin .fgOpt_UfoFontImport builtin .fgOpt_VfbExport builtin .fgOpt_VfbImport builtin .fgOpt_WOFFExport builtin .fgOptions builtin .fgOtInfo builtin .fgOtValue builtin .fgPackages builtin .fgPen builtin .fgPoint builtin .fgPointU builtin .fgRect builtin .fgRendered builtin .fgShape builtin .fgShapes builtin .fgStem builtin .fgStems builtin .fgStringDict builtin .fgTTInterpreter builtin .fgTrueTypeData builtin .fgTrueTypePoint builtin .fgTrueTypePoints builtin .fgValuesDict builtin .fgVdmxRecord builtin .fgVdmxRecords builtin .fgVector builtin .fgVectorBool builtin .fgVectorChar builtin .fgVectorDouble builtin .fgVectorInt builtin .fgVectorPoint builtin .fgVectorUInt16 builtin .fgVectorUInt32 builtin .fgZone builtin .fgZones builtin .pyfgDataOwnerData class fgAnchor ( object ) Anchor representation Constructors: fgAnchor() - default fgAnchor(fgAnchor) - copy fgAnchor((x, y), 'name') - create with position=(x, y) and name='name' fgAnchor(x, y, 'name') - create with position=(x, y) and name='name' Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) copy (...) copy ( fgAnchor ) - copy data from another fgAnchor object draw (...) draw (penObject) - draw the object with a segment pen drawPoints (...) drawPoints (penObject) - draw the object with a point pen move (...) move (dx, dy) - move anchor by (dx, dy) round (...) round () - round anchor coordinates scale (...) scale ((scale_x, scale_y)[, (center_x, center_y)]) - scale anchor by (scale_x, scale_y) with center=(center_x, center_y) or (0,0) if not defined transform (...) transform ( fgMatrix ) - transform anchor coordinates by matrix Descriptors data (uint) - data index (int) - index of object for owner's base layer mark (uint) - mark name (string) - name position (fgPoint) - coordinates as fgPoint x (int/double) - horizontal coordinate y (int/double) - vertical coordinate Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgAnchors ( object ) list of fgAnchor objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgAxes ( object ) Axes list representation Constructors: fgAxes() - default fgAxes(fgAxes) - copy Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) Descriptors masters (fgMasters) - masters Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgAxis ( object ) Axis representation Constructors: fgAxis('name') - create with name='name' Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help( type (x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors blendMap (list(Point)) map (list(Point)) name (string) - name shortName (string) - shortName type (string) - type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgBitmap ( object ) Bitmap representation Constructors: fgBitmap() - default fgBitmap(fgBitmap) - make orphan copy of another object fgBitmap(width, height, bitsPerPixel) fgBitmap(width, height, rowBytes, bitsPerPixel, bytesarray) Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x mul (...) x. __mul__ (n) < ==> x*n ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple clear (...) clear all data clone (...) clone ( fgBitmap source) - make clone of source bitmap copy (...) copy ( fgBitmap source[, x, y, w, h]) - copy whole source bitmap or part of it with size (w, h) from pos (x, y) copyData (...) copy (bytesarray) - assign new bitmap data create (...) create ( ') - allocate new bitmap data downsample (...) downsample ( fgBitmap , int oversampling) empty (...) bool empty () - return true if no data assigned or bitmap size is 0 emptyRow (...) emptyRow (y, x0, x1) - return true if part of row y from x0 till x1 has no non-zero pixels fill (...) fill ( fgColor color) - fill entire bitmap by color flipV (...) flip bitmap by vertical axis getPixel (...) fgColor getPixel (x, y) - get color of pixel (x, y) row (...) setPixel (...) setPixel (x, y, fgColor color) - set color for pixel (x, y) Descriptors bpp bits per pixel bytes bytes per row data bitmap data height bitmap height in pixels size overall bytes count for bitmap storage width bitmap width in pixels Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgBitmaps ( object ) list of fgBitmap objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgBitmapsData ( object ) BitmapsData representation Constructors: fgBitmapsData() - default fgBitmapsData(fgBitmapsData) - copy Methods OK (...) bool OK () - return true if status is gdsOK cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) bad (...) bool bad () - return true if status isn't gdsOK boundingBox (...) fgRect boundingBox ( fgGlyphsR , fgMatrix , bool prepareExport) - calculate bounding box copy (...) fgBitmapsData copy () - create alone copy of data countPictures (...) int countPictures () - return pictures count getFontGateData (...) getFontGateData () always return 0 getType (...) string getType () - return 'dtBitmaps' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present modified (...) bool modified () - always return false setParent (...) setParent ( fgGlyph ) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform ( fgMatrix ) - transform data updated (...) updated () - mark data as changed, reset internal caches Descriptors bitmaps (fgBitmaps) - list of fgRendered objects Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgBrush ( object ) Brush representation Constructors: fgBrush() - default fgBrush(fgBrush) - copy fgBrush(fgColor) - solid brush with selected color and default size (1, 0) fgBrush(fgColor, fgPoint) - solid brush with selected color and size Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x mul (...) x. __mul__ (n) < ==> x*n ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple isBlack (...) bool isBlack () - return true if brush is black isTransparent (...) bool isTransparent () - return true if brush is transparent Static methods black (...) fgBrush black () - get black solid brush transparent (...) fgBrush transparent () - get transparent solid brush Descriptors kind ('Empty'/'Solid'/'Gradient') brush type size (fgPoint) brush size by x and y axis solid (fgColor) brush color Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCMaps ( object ) list of fgCmapRecord objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCaret ( object ) Caret representation Constructors: fgCaret() - default fgCaret(fgCaret) - copy fgCaret((fgOtValue/float/int, 'name')) - by coordinate and name Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors name (string) name v (fgOtValue) coordinate Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCarets ( object ) list of fgCaret objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCmapRecord ( object ) fgCmapRecord representation Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help( type (x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors eid format lid nid pagename pid type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCoding ( object ) Coding data representation Constructors: fgCoding() - default fgCoding(fgCoding) - copy fgCoding( bool [unicodeRange], bool [codepageRange], fgCMaps cmaps, fgEncoding encoding, fgEncoding importedEncoding, 'encDefault'/'encStandard'/'encCustom') Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors cmaps (fgCMaps) codepageRange (bool list) encoding (fgEncoding) encodingType ('encDefault'/'encStandard'/'encCustom') importedEncoding (fgEncoding) unicodeRange (bool list) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgColor ( object ) Color representation Constructors: fgColor() - default fgColor(fgColor) - copy fgColor(float hueValue) - by hue value fgColor(r, g, b) - by r, g, b, float values from 0 to 1.0 fgColor(r, g, b, a) - by r, g, b, a float values from 0 to 1.0 Methods A (...) int A () - get alpha value as int (0..255) B (...) int B () - get blue value as int (0..255) G (...) int G () - get green value as int (0..255) R (...) int B () - get blue value as int (0..255) add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x mul (...) x. __mul__ (n) < ==> x*n ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple getCMYK (...) (c, m, y, k, a) getCMYK ([varK = 0.3]) - get color as CMYK+A components gray (...) float gray () - get color as grayscale level hue (...) float hue () - get hue value lab (...) (l, a, b) lab () - get color as lab float values lightness (...) float lightness () - get lightness value saturation (...) float saturation () - get saturation value set (...) set ((r, g, b[, a])) - set color by tuple with rgb or rgba float values setCMYK (...) setCMYK (c, m, y, k[, _a = 1.0]) = set color by CMYK[A] float values setGray (...) segGray(float v) - set rgb components to v setHue (...) setHue (h[, s=1.0[, l = 0.5]]) - set by hsl float values xyz (...) (x, y, z) xyz () - get color as xyz float values Static methods black (...) fgColor black () - get black color fromInt (...) fgColor fromInt (r, g, b[, a=255]) - get color by int rgb(a) values (0..255) fromLab (...) fgColor fromLab (l, a, b) - get color by float lab values transparent (...) fgColor transparent () - get transparent color Descriptors a (float 0..1.0) - alpha channel b (float 0..1.0) - blue channel g (float 0..1.0) - green channel r (float 0..1.0) - red channel Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgComponent ( object ) Component representation Constructors: fgComponent() - default fgComponent(fgComponent) - copy fgComponent('name', fgMatrix) - by 'name' and transformation matrix fgMatrix Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) draw (...) draw (pen object ) - draw the object with a segment pen drawPoints (...) drawPoints (pen object ) - draw the object with a point pen move (...) move (dx, dy) - move by float dx, dy value Descriptors baseGlyph (string) name of base glyph box (fgRect) - bounding box hasFullMatrix index (int) component index in glyph's components list matrix (fgMatrix) - component transform matrix offset scale Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgComponents ( object ) list of fgComponent objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) decompose (...) del (...) getAsList (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgContour ( object ) Contour representation Constructors: fgContour() - default fgContour(fgContour) - copy Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) appendNode (...) appendNode ( fgNode ) - add node to the end of the contour area (...) float area () autoClose (...) bool autoClose () - bool autoClose () - close contour, return true if changes was made autoInterpolated (...) bool autoInterpolated () - interpolate contour nodes, return true if changes was made autoSmooth (...) bool autoSmooth () - smooth contour nodes, return true if changes was made boundingBox (...) fgRect boundingBox ( fgMatrix [, bool prepareExport = false]) clear (...) clear () - clear all nodes contains (...) bool/Nothing contains ( fgPoint [, bool winding = false]) containsCurvePoint (...) bool containsCurvePoint () containsOffPoint (...) bool containsOffPoint () countNodes (...) int countNodes () - get count of nodes deleteNode (...) bool deleteNode (int nodeIndex) - delete node draw (...) draw (segmentPen) - draw the object with a segment pen drawPoints (...) drawPoints (pointPen) - draw the object with a point pen empty (...) bool empty () - return True if contour haven't any node filterOnPoints (...) filterOnPoints () getNode (...) fgNode getNode (int nodeIndex) - get node by index getNodes (...) [ fgNode ] getNodes () - get list of fgNode objects getUFONodesList (...) [ ((x, y), 'nodetype', bool smooth, 'name') ] getUFONodesList () -get list of contour nodes as UFO-style tuples insertNode (...) insertNode ( fgNode , int insertTo) - insert node into position insertTo isCompatible (...) bool isCompatible ( fgContour ) length (...) int length () - get count of nodes midPoint (...) fgPoint midPoint () reverse (...) reverse () - reverse order of contour nodes toCurves (...) toCurves ([tolerance = 5.]) toShortSplines (...) toShortSplines ([tolerance = 5.[, bool short_splines = true]]) transform (...) fgContour transform ( fgMatrix ) Descriptors name (string) name of contour nodes ([fgNode]) contour nodes open (bool) open flag Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgContours ( object ) list of fgContour objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCurve ( object ) Curve representation Constructors: fgCurve() - default fgCurve(fgCurve) - copy fgCurve( [4 x fgPoint] ) fgCurve( (q0, q1, q2, q3) ) fgCurve( fgPoint, fgPoint ) fgCurve( fgPoint, fgPoint, fgPoint ) fgCurve( fgPoint, fgPoint, fgPoint, fgPoint ) fgCurve( fgCurve, float t0, float t1 ) Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple bbox (...) fgRect bbox () check (...) bool check (float flatness, float length, float w0, float w1) coefficients (...) ( fgPoint a, fgPoint b, fgPoint c, fgPoint d) coefficients () curvature (...) float curvature (float t) d1 (...) fgPoint d1 (float t) d2 (...) fgPoint d2 (float t) direction (...) fgPoint direction (float time) eseg (...) fgCurve eseg (float u) flat (...) bool flat (double parameter = almost_zero) getExtrema (...) int getExtrema (bool h, [float] ) getInflection (...) int getInflection ( [float] ) hasExtrema (...) bool hasExtrema () isConvex (...) bool isConvex ( [float area] ) len (...) float len (int quality) maximumDeviation (...) float maximumDeviation () merge (...) bool merge ( fgCurve c) point (...) fgPoint point (float time) quickLen (...) float quickLen () render (...) int render ([ fgPoint / fgPointU ], int quality) seg (...) fgCurve seg (float stime, float etime) sseg (...) fgCurve sseg (float u) time (...) float time ( fgPoint [, int quality[, [float min_dist] ]]) Descriptors q0 (fgPoint) q1 (fgPoint) q2 (fgPoint) q3 (fgPoint) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCuspPoint ( object ) CuspPoint representation Constructors: fgCuspPoint() - default fgCuspPoint(fgCuspPoint) - copy Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) middleH (...) bool middleH () middleV (...) bool middleV () Descriptors hlink0 (int) hlink1 (int) index (int) p (fgPoint) vlink0 (int) vlink1 (int) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgCuspPoints ( object ) list of fgCuspPoint objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgDesignPosition ( object ) Anchor representation Constructors: fgDesignPosition() - default fgDesignPosition(fgDesignPosition) - copy fgDesignPosition(axisCount) - parametric Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors data (list(double)) - data Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgDeviceRecord ( object ) DeviceRecord representation Constructors: fgDeviceRecord() - default fgDeviceRecord(fgDeviceRecord) - copy fgDeviceRecord(tuple( int ppm, int correction) ) fgDeviceRecord( int ppm, int correction ) Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors correction (int) ppm (int) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgDeviceRecords ( object ) list of fgDeviceRecord objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgExtMapIntTofgShape ( object ) fgExtMapIntTofgShape dictionary Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgExtMapUCharToUChar ( object ) fgExtMapUCharToUChar dictionary Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgExtMapUIntToString ( object ) fgExtMapUIntToString dictionary Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgExtMapUShortToShort ( object ) fgExtMapUShortToShort dictionary Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgFlagsDict ( object ) bool flags diactionary Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgFont ( object ) Font representation Constructors: fgFont() - create new empty font fgFont('font_name') - - create new empty font with name 'font_name' Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. addGlyph (...) fgGlyph addGlyph ( fgGlyph ) appendFeatures (...) int appendFeatures () averageHeight (...) float averageHeight () averageWidth (...) float averageWidth () boundingBox (...) fgRect boundingBox ( fgMatrix ) calculateSafeZones (...) ? checkMaps (...) checkMaps () clearGlyphs (...) clearGlyphs () - remove all glyphs clearMaps (...) clearMaps () - force clear all font internal caches copyFrom (...) copyFrom ( fgFont sourceFont) - copy all data and glyphs from source font createGlyph (...) fgGlyph createGlyph ('name'[, int unicode[, bool clearExisting = false]]) dropHintingTables (...) dropHintingTables () dropLayoutTables (...) dropLayoutTables () fixOrdering (...) bool fixOrdering (float upm[, sortMethod='sortUnicode']) - sort glyphs by selected method. Methods are 'sortNone', 'sortName', 'sortUnicode', 'sortIndex', 'sortIndexReverse' hasColors (...) bool hasColors () hasPictures (...) bool hasPictures () has_key (...) bool has_key ('name') - return true if font contains glyph with name 'name' items (...) [('name', fgGlyph )] items () - returns a list of font's ('name', fgGlyph ) tuple pairs keys (...) ['names'] keys () - return list of names of all glyphs in the font killUnicode (...) killUnicode (unicode) - remove selected unicode from all glyph unicodes lists rebuildMaps (...) rebuildMaps () - force clear and rebuild all font internal caches removeGlyph (...) bool/Nothing removeGlyph ('name'/unicode) - remove glyph selected by 'name' or unicode (int) save (...) save ('path/filename'[, bool save_vfb=false]) - save font in UFO or VFB format scale (...) scale (float) - scale font UPM sortGlyphs (...) sortGlyphs (sortMethod) - sort glyphs. sortMethod: 'sortNone'/'sortName'/'sortUnicode'/'sortIndex'/'sortIndexReverse' update (...) update () - force rebuild font chaches and request font update values (...) [ fgGlyph ] values () - returns list of font's fgGlyph Descriptors axes (fgAxes) axes info coding (fgCoding) encoding info features (fgOTLayout) features data glyphs ([fgGlyph]) font glyphs list groups (fgGroups) glyph groups list guides (fgGuides) guides list hinting (fgFontHinting) hinting info hints (fgHints) hints list for font 'Body' layer id (long) package id info (fgFontInfo) font info data kerning (fgKerning) kerning data lib (fgLib) additional font data master (fgLayer) font master layer metricsClasses (fgMetricsClasses) list of metrics classes path (string) path and font file name shapes (fgMapShapes) font shapes map tables (fgMapBytes) raw OT tables data translatedNames ([tuples]) raw style->names.translated data Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgFontGateData ( object ) FontGateData representation Constructors: fgFontGateData() - default fgFontGateData(fgFontGateData) - copy Methods OK (...) bool OK () - return true if status is gdsOK cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) activeLayer (...) fgLayer activeLayer () - get active layer or Nothing if no layers exists addContour (...) fgContour addContour ( fgContour ) - add contour into 'Body' layer addShape (...) fgShape addShape ( fgShape ) - add shape into 'Body' layer bad (...) bool bad () - return true if status isn't gdsOK bodyLayer (...) fgLayer bodyLayer () - get layer named 'Body', any existing non-service layer if not found or Nothing if no layers exists bodyLayerStrict (...) fgLayer bodyLayerStrict () - get layer named 'Body'. if it's not present, create it on the fly boundingBox (...) fgRect boundingBox ( fgGlyphsR , fgMatrix , bool prepareExport) - calculate bounding box checkContours (...) checkContours () - ckeck for multi-segment contours and split it into one segment's contours copy (...) fgFontGateData copy () - create alone copy of data countNodesContours (...) (nodesCount, contoursCount) countNodesContours () - calculate stats for 'Body' layer if it present, return (0,0) otherwise countPictures (...) int countPictures () - return pictures count countShapes (...) int countShapes () - return shapes count findLayer (...) fgLayer findLayer ('name') - get layer by name, return Nothing if no layer found getFontGateData (...) fgFontGateData getFontGateData () - return self getType (...) string getType () - return 'dtFontGate' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present maskLayer (...) fgLayer maskLayer (bool createIfMissing) modified (...) bool modified () - return true if data was changed resetBbox (...) resetBbox () - reset bbox cache setParent (...) setParent ( fgGlyph ) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform ( fgMatrix ) - transform data updated (...) updated () - mark data as changed, reset internal caches Descriptors layers (fgLayers) layers list Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgFontHinting ( object ) Font Hinting data representation Constructors: fgFontHinting() - default fgFontHinting(fgFontHinting) - copy Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) generateStemsProgram (...) generateStemsProgram (Position upm, bool keepValues) getBlueValues (...) list( float ) getBlueValues () getFamilyBlues (...) list( float ) getFamilyBlues () getFamilyOtherBlues (...) list( float ) getFamilyBlues () getOtherBlues (...) list( float ) getOtherBlues () getZone (...) fgZone /Nothing getZone (int index, bool top) getZonesCount (...) int getZonesCount (bool top) Descriptors blueFuzz (int) blueScale (float) blueShift (int) codePPM (int) cvt ( bytesarray ) dict ( { string : int } ) dropoutPPM (int) familyZones (fgZones) flex (bool) forceBold (bool) forceBoldTreshold (float) fpgm ( bytesarray ) gasp ( [ fgGaspRecord ] ) hdmx ( [ int ] ) maxp ( fgMaxP ) prep ( bytesarray ) stemH (float) stemSnapLimit (int) stemV (float) stemsH (fgStems) stemsV (fgStems) t1stemsH (fgStems) t1stemsV (fgStems) t1zones (fgZones) vdmx ( [ fgVdmxRecord ] ) zonePPM (int) zones (fgZones) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgFontInfo ( object ) FontInfo data No constructors - it's the direct member of the fgFont object Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors ascender Ascender value capHeight Cap height value caretOffset Caret offset value copyright Copyright statement descender Descender value dict Other font info tags and data familyName Family name italicAngle Italic angle macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the Macintosh FOND resource macintoshFONDName Font name for the Macintosh FOND resource note Arbitrary note about the font openTypeHeadCreated Creation date and time openTypeHeadFlags A list of bit numbers indicating the flags. Corresponds to the OpenType head table flags field openTypeHeadFontDirectionHint Deprecated (Set to 2). Corresponds to the OpenType head table fontDirectionHint field openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field openTypeHeadModified Last modification date and time openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18 openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10 openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9 openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12 openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13 openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14 openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8 openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11 openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16 openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17 openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 20 openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3 openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5 openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21 openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22 openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, should be in the range 0-14. The second number, representing the subclass, should be in the range 0-15. Corresponds to the OpenType OS/2 table sFamilyClass field openTypeOS2Panose The list should contain 10 integers that represent the setting for each category in the Panose specification. This corresponds to the OpenType OS/2 table Panose field openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. Corresponds to the OpenType OS/2 table selection field openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field openTypeOS2Type A list of bit numbers indicating the embedding type. Corresponds to the OpenType OS/2 table fsType field openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field openTypeOS2WeightClass Weight class value. Must be a positive integer. Corresponds to the OpenType OS/2 table usWeightClass field openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files postscriptDefaultWidthX Default width for glyphs postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field postscriptFontName Name to be used for the FontName field in Type 1/CFF table postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set postscriptFullName Name to be used for the FullName field in Type 1/CFF table postscriptIsFixedPitch Indicates if the font is monospaced. A compiler could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field postscriptNominalWidthX Nominal width for glyphs postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field postscriptSlantAngle Artificial slant angle postscriptStemSnapH List of horizontal stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field postscriptStemSnapV List of vertical stems sorted in increasing order. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value postscriptWindowsCharacterSet The Windows character set. postscriptWindowsCharacterSet Options. Possible values are 1..20 styleMapFamilyName Family name used for bold, italic and bold italic style mapping styleMapStyleName Styling link name. Perrmitted values are 'Regular', 'Italic', 'Bold', 'Bold Italic' (exactly as spelled). No other values are permitted styleName Style name trademark Trademark statement unitsPerEm Units per em versionMajor Major version versionMinor Minor version xHeight x-height value year The year the font was created Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgFontInfoDict ( object ) Font info dictionaries Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors flags hinting metrics names values Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGaspRecord ( object ) GaspRecord representation Constructors: fgGaspRecord() - default fgGaspRecord(fgGaspRecord) - copy fgGaspRecord(int rangeMaxPPEM, int rangeGaspBehavior) - parametric Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) addSymmetry (...) rangeGaspBehavior (...) set (...) Descriptors DOGRAY (bool) GRIDFIT (bool) SYMMETRIC_GRIDFIT (bool) SYMMETRIC_SMOOTHING (bool) rangeMaxpPPEM (int) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGaspRecords ( object ) list of fgGaspRecord objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGlyph ( object ) Glyph representation Constructors: fgGlyph() - default fgGlyph(fgGlyph) - copy fgGlyph('name') - create by name Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. addUnicode (...) addUnicode (unicode) - add unicode to glyph append (...) append ( fgGlyph [, mtx= fgMatrix ()]) - append contours of source glyph to current glyph clear (...) clear (contours=true, components=true, anchors=true, guides=true, hints=true) - clear glyph's data countPictures (...) int countPictures () - return count of glyph pictures createContour (...) fgContour createContour () - create new contour createData (...) (variable type) createData (GlyphDataType) - create glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' decompose (...) bool decompose () - decompose glyph deleteContour (...) deleteContour (contourIndex) - delete contour by index draw (...) draw (penObject[, fgMatrix ]) - draw contour by penObject (like fgPen ) with transform matrix fgMatrix fgData (...) fgFontGateData /Nothing fgData () - get dtFontGate data if it's exist fgDataCreate (...) fgFontGateData fgDataCreate () - get dtFontGate data (create new one if missing) fixComposites (...) bool fixComposites (fixRotation=false) getData (...) (variable type) getData ([GlyphDataType='dtFontGate']) - get glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' getPen (...) fgPen getPen () - create new pen object hasBody (...) bool hasBody () - return True if glyph has contours or picture hasColors (...) bool hasColors () - return True if glyph has color pictures hasData (...) bool hasData (GlyphDataType) - return True if glyph data, specified by GlyphDataType, is exist. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' hasHints (...) bool hasHints () - return True if glyph has hints hasPictures (...) bool hasPictures () - return True if glyph has pictures hasUnicode (...) bool hasUnicode (unicode) - return True if glyph has specified unicode keepData (...) bool keepData (GlyphDataType) - remove all glyph data, except one specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' killData (...) bool killData (GlyphDataType) - remove glyph data, specified by GlyphDataType. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' killUnicode (...) killUnicode (unicode) - remove unicode from glyph modified (...) modified (GlyphDataType) - inform that glyph data GlyphDataType has been modified. Possible values are 'dtNone', 'dtFontGate', 'dtTrueType', 'dtType1', 'dtCFF', 'dtProteus', 'dtBitmaps' move (...) move (dx, dy) - move contour by (dx, dy) removeOverlap (...) removeOverlap () setData (...) setData (GlyphData-like object ) - set glyph data setUnicode (...) setUnicode (unicode) - assign unicode to glyph transform (...) transform ( fgMatrix ) - transform glyph by fgMatrix data ttData (...) fgTrueTypeData /Nothing ttData () - get dtTrueType data if it's exist ttDataCreate (...) fgTrueTypeData ttDataCreate () - get dtTrueType data (create new one if missing) update (...) update () Descriptors activeLayer (fgLayer) active layer or Nothing if not found anchors ([ fgAnchor ]) anchor's list bodyLayer (fgLayer) layer 'Body' or Nothing if not found bodyLayerStrict (fgLayer) layer 'Body' (create one if not found) box (fgRect) glyph bounding box (int values) carets ([ fgCaret ]) caret's list components ([ fgComponent ]) component's list dict (fgGlyphDict) glyph's data dictionary fbox (fgRect) glyph bounding box (int/float values) guides ([ fgGuide ]) guide's list height (float) advancedHeight hints ([ fgHint ]) hint's list id (long) glyph ID image (fgBitmap) first glyph image index (int) glyph index from font.tableIndex kerningLeft (int) kerningRight (int) layer (fgLayer) working layer (if present) or None. Read-only attribute, use layerName='string'|index to change layerName (string) name of the working layer name layers ([ fgLayer ]) layer's list leftMargin lib (fgLib) additional glyph's data mark (int) glyph's mark value mask (fgGlyph/Nothing) mask glyph metrics (fgPoint) advancedWidth and advancedHeight name (string) glyph name note (string) otInfo (fgOtInfo) parent (fgFont) parent font for glyph rightMargin unicode (int/Nothing) first glyph's unicode or Nothing if unicodes aren't defined unicodes ([ int ]) unicode's list vsb (float) vsb width (float) advancedWidth Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGlyphData ( object ) GlyphData representation Constructors: fgGlyphData() - default fgGlyphData(fgGlyphData) - copy Methods OK (...) bool OK () - return true if status is gdsOK cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value bad (...) bool bad () - return true if status isn't gdsOK boundingBox (...) fgRect boundingBox ( fgGlyphsR , fgMatrix , bool prepareExport) - calculate bounding box copy (...) fgGlyphData copy () - create alone copy of data countPictures (...) int countPictures () - return pictures count countShapes (...) int countShapes () - return shapes count getFontGateData (...) fgFontGateData getFontGateData () - return Nothing getType (...) string getType () - return 'dtTrueType' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present modified (...) bool modified () - return true if data was changed setParent (...) setParent ( fgGlyph ) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform ( fgMatrix ) - transform data updated (...) updated () - mark data as changed, reset internal caches Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGlyphDict ( object ) Glyph dictionaries Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors flags lib tags values Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGlyphIDsSet ( object ) GlyphIDs set Constructors: fgGlyphIDsSet() - default fgGlyphIDsSet(fgGlyphIDsSet) - copy Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asList (...) [ int ] asList () - return set as list clean (...) clean () - remove all id's from set contains (...) bool contains (int id) - return True if set contains id del (...) del (int id) - remove id from set Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGlyphs ( object ) list of fgGlyph objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGlyphsR ( object ) fgGlyphsR representation Constructors: fgGlyphsR() - default fgGlyphsR(fgGlyphsR) - copy fgGlyphsR(fgGlyphs) - create from list(fgGlyph) Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) find (...) fgGlyph find (name|unicode) getStats (...) (totalGlyphs, avgNodesCount, avgContoursCount) getStats () glyph (...) fgGlyph glyph (int index) glyphByID (...) fgGlyph glyphByID (int ID) index (...) int index ( fgGlyph ) indexByID (...) int index (int ID) rebuildUnicodeMap (...) rebuildUnicodeMap () Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGroup ( object ) Kerning/Metrics group Constructors: fgGroup() - default fgGroup(fgGroup) - copy fgGroup( tuple('name', list(ids), mode, 'mainglyphname') ) - parametric possible values for mode are 'FeaClassGroupMode', 'KernLeftGroupMode', 'KernRightGroupMode', 'KernBothSideGroupMode' Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. isBoth (...) True if group mode is 'KernBothSideGroupMode' isFeaGroup (...) True if group mode is 'FeaClassGroupMode' isLeft (...) True if group mode is 'KernLeftGroupMode' or 'KernBothSideGroupMode' isRight (...) True if group mode is 'KernRightGroupMode' or 'KernBothSideGroupMode' Descriptors id (int) group id mode ('FeaClassGroupMode'/'KernLeftGroupMode'/'KernRightGroupMode'/'KernBothSideGroupMode') group mode name (string) group name Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGroups ( object ) Glyph groups list Constructors: fgGroups() - default fgGroups(fgDataOwnerData) - parametric Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) dict('name' : fgGroup ) asDict () clear (...) clear () fromClassRecords (...) fromDict (...) fromDict (dict('name': fgGroup )) get (...) fgGroup get ('name') getAsClassRecords (...) getCompiled (...) string getCompiled () has_key (...) bool has_key ('name') items (...) list(tuple('name', fgGroup )) items () keys (...) list(names of group) keys () remove (...) bool remove ('name') rename (...) bool rename ('old_name', 'new_name') values (...) list( fgGroup ) values () Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGuide ( object ) Guide representation Constructors: fgGuide() - default fgGuide(fgGuide) - copy fgGuide(float pos[, bool horizontal = false]) fgGuide(fgPoint p0, fgPoint p1[, name=''[, horizonta=false[, color=fgColor]]]) Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value copy (...) fgGuide copy () - copy object Descriptors color (fgColor) horizontal True if guide is horizontal index (int) index in owner guides list name (string) guide name p0 (fgPoint) p1 (fgPoint) position (int) y value of p0, p1 if guide is horizontal, x value - if vertical, none if guide nor horizontal/vertical vertical True if guide is vertical Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgGuides ( object ) list of fgGuide objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position remove (...) remove ( fgPoint p0, fgPoint p1) - remove item if it's points are equal to specified removeHV (...) removeHV (float position, bool horizontal) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgHint ( object ) Hint representation Constructors: fgHint() - default fgHint(fgHint) - copy fgHint(name= , v= , dv= , point0= , point1= , p0= , p1= , points0= , points1= , horizontal= ) Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value copy (...) Descriptors dv (float) horizontal (bool) index (int) index from owner's hints list name (string) hint name p0 (float) p1 (float) point0 (string) point1 (string) points0 ([int]) points1 ([int]) v (float) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgHintCommand ( object ) HintCommand representation Constructors: fgHintCommand() - default fgHintCommand(fgHintCommand) - copy fgHintCommand(code, index) - parametric, possible values for code are 'none'/'hintH'/'hintV'/'replace' Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors code ('none'/'hintH'/'hintV'/'replace') code index (int) pointName (string) subrIndex (int) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgHintCommands ( object ) list of fgHintCommand objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgHints ( object ) list of fgHint objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index getAsDict (...) dict(items) getAsDict () getAsList (...) insert (...) insert (position, item) - insert item into list at specified position removeByName (...) removeByName ('name') removeHV (...) removeHV (float v, float dv, bool horizontal) setFromDict (...) setFromDict (dict(items)) setFromList (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgIntDict ( object ) int dictionary Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgKerning ( object ) Kerning representation Constructors: fgKerning(fgDataOwnerData) Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. addGroup (...) asDict (...) dict( fgKerningObjectPair : float) asDict () clear (...) deleteAllGroups (...) deleteGroup (...) get (...) float get ( fgKerningObjectPair / tuple('name1', 'name2')) - get kerning value getPlainPairs (...) getPlainPairsDict (...) hasGroupKerning (...) has_key (...) bool has_key ( fgKerningObjectPair ) items (...) list( tuple( fgKerningObjectPair , float) ) items () keys (...) list( fgKerningObjectPair ) keys () remove (...) renameGroup (...) scale (...) setPlainPairs (...) values (...) list( float ) values () Descriptors groups Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgKerningGroups ( object ) Dictionary of kerning groups Constructors: fgKerningGroups(fgDataOwnerData) - default Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y asDict (...) represent object as dictionary clear (...) clear () - delete all items has_key (...) bool has_key ('groupName') items (...) list( tuple('groupName', tuple( list('glyphName'), mode ) ) items () keys (...) list('groupName') keys () remove (...) remove ('groupName'[, deleteDependentKerningPairs = false]) rename (...) bool/Nothing rename ('oldGroupName', 'newGroupName') values (...) list ( tuple( list('glyphName'), mode ) ) values () Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgKerningObject ( object ) KerningObject representation Constructors: fgKerningObject() - default fgKerningObject(fgKerningObject) - copy fgKerningObject('name', mode) - mode must be one of 'glyphMode'/'groupMode' Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors id (string) glyph or group name mode ('glyphMode'/'groupMode') Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgKerningObjectPair ( object ) KerningObjectPair representation Constructors: fgKerningObjectPair() - default fgKerningObjectPair(fgKerningObjectPair) - copy fgKerningObjectPair( tuple(fgKerningObject, fgKerningObject) ) fgKerningObjectPair('nameLeft', 'nameRight') fgKerningObjectPair(fgKerningObject, fgKerningObject) fgKerningObjectPair('nameLeft', 'nameRight', modeLeft, modeRight) - modeLeft, modeRight must be one of 'glyphMode'/'groupMode' Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. hash (...) x. __hash__ () < ==> hash(x) init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors left (fgKerningObject) - left glyph or group right (fgKerningObject) - right glyph or group Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgLayer ( object ) Layer representation Constructors: fgLayer() - default fgLayer(fgLayer) - copy fgLayer('name') - create named layer Math operation: fgLayer + fgLayer fgLayer - fgLayer Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n radd (...) x. __radd__ (y) < ==> y+x repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x rsub (...) x. __rsub__ (y) < ==> y-x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sub (...) x. __sub__ (y) < ==> x-y addContour (...) fgContour addContour ( fgContour ) - add contour to layer boundingBox (...) fgRect /Nothing boundingBox ( fgMatrix [, prepareExport = false]) checkContours (...) checkContours () countContours (...) int countContours () countHints (...) int countHints (bool horizontal) countNodes (...) int countNodes () countPictures (...) int countPictures () countShapes (...) int countShapes () findHint (...) int findHint ( fgHint ) findNode (...) fgNode /Nothing findNode (nodeIndex / 'nodeName') - find name by index or name hasColors (...) bool hasColors () hasHints (...) bool hasHints () hasPictures (...) bool hasPictures () hints2links (...) hints2links (double tolerance[, fgCuspPoints ]) indexToName (...) 'nodeName' indexToName (int nodeIndex) isCompatible (...) bool/Nothing isCompatible (flLayer) nameToIndex (...) int nameToIndex ('nodeName') prepareNodeNames (...) prepareNodeNames () removeHints (...) removeHints (bool horizontal) transform (...) transform (const Matrix & mx[, apply = true]) Descriptors active (bool) anchors (fgAnchors) guides (fgGuides) hints (fgHints) hintsProgram (fgHintCommands) locked (bool) matrix (fgMatrix) name (string) opacity (float) reference (fgPoint) service (bool) visible (bool) wireframe (bool) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgLayers ( object ) list of fgLayer objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgLib ( object ) Dictionary with font- or glyph-related data Methods delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y clear (...) get (...) hasKey (...) items (...) keys (...) update (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgMapBytes ( object ) Raw data dictionary Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgMaster ( object ) Anchor representation Constructors: fgMaster() - default fgMaster(fgMaster) - copy fgMaster('name') - create with name='name' Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors name (string) - name penColor (int) - penColor position (fgDesignPosition) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgMasters ( object ) list of fgMaster objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgMatrix ( object ) Transformation matrix representation Constructors: fgMatrix() - default fgMatrix(fgMatrix) - copy fgMatrix(float m11, float m12, float m21, float m22, float dx, float dy) Math operation: fgMatrix * fgMatrix Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x mul (...) x. __mul__ (y) < ==> x*y ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (y) < ==> y*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign ( fgMatrix ) or assign (m11, m12, m21, m22, dx, dy) determinant (...) float determinant () invert (...) bool invert () inverted (...) fgMatrix inverted () invertible (...) bool invertible () noMove (...) bool noMove () noRotate (...) bool noRotate () noScale (...) bool noScale () scale (...) scale (float s) slant (...) slant (float angle) or float slant () standard (...) bool standard () Descriptors dx dy m11 m12 m21 m22 Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgMaxP ( object ) fgMaxP representation Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors maxFunctionDefs maxInstructionDefs maxStackElements maxStorage maxTwilightPoints maxZones Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgMetricsClass ( object ) MetricsClass representation Constructors: fgMetricsClass() - default fgMetricsClass(fgMetricsClass) - copy Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) hasGlyph (...) bool hasGlyph (int glyphID/'glyphName') keyGlyphName (...) 'keyGlyphName' keyGlyphName () Descriptors glyphs (fgGlyphIDsSet) left (bool) name (string) right (bool) width (bool) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgMetricsClasses ( object ) list of fgMetricsClass objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgNametable ( object ) NameTable - unicode->name translation and vice versa Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value easyCompare (...) bool easyCompare ('name0', 'name1') getAlternativeNames (...) list( 'altGlyphName' ) getAlternativeNames ('glyphName') load (...) bool load (string path_to_file) name (...) 'glyphName' name (int unicode) unc (...) int unc ('glyphName') Descriptors loaded (bool) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgNode ( object ) Node representation Constructors: fgNode() - default fgNode(fgNode) - copy fgNode('Move'/'On'/'Off'/'Curve', fgPoint[, smooth=false]) fgNode('Move'/'On'/'Off'/'Curve', fgPoint, 'name'[, smooth=false]) Math operation: fgNode + fgNode fgNode - fgNode fgNode * float Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature mul (...) x. __mul__ (y) < ==> x*y radd (...) x. __radd__ (y) < ==> y+x repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (y) < ==> y*x rsub (...) x. __rsub__ (y) < ==> y-x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value sub (...) x. __sub__ (y) < ==> x-y isG2 (...) bool isG2 () isInterpolatedX (...) bool isInterpolatedX () isInterpolatedY (...) bool isInterpolatedY () isOff (...) bool isOff () isOn (...) bool isOn () isSelected (...) bool isSelected () setG2 (...) setG2 ([true]) setInterpolatedX (...) setInterpolatedX ([true]) setInterpolatedY (...) setInterpolatedY ([true]) setSelected (...) setSelected ([true]) transform (...) transform ( fgMatrix ) Descriptors flags (int) kind ('Move'/'On'/'Off'/'Curve') name (string) point (fgPoint) smooth (bool) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgNodes ( object ) list of fgNode objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOTLayout ( object ) OpenType Layout representation Constructors: fgOTLayout(fgDataOwnerData) fgOTLayout(fgFont) Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. clear (...) clear () - remove all features get_feature (...) string get_feature (string / numeric tag) - get feature text get_prefix (...) string get_prefix () - get common part of fea data has_key (...) bool has_key (string / numeric tag) - True if feature is present keys (...) list(string) keys () - list of feature tags remove (...) remove (string / numeric tag) - remove feature set_feature (...) set_feature (string / numeric tag, string new_content) - set feature text set_prefix (...) set_prefix (string new_prefix) - set common part of fea data Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_AutoMetrics ( object ) fgOpt_AutoMetrics options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors close left right Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_EOTExport ( object ) fgOpt_EOTExport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors doCompression doXORCryptData otExport Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_ExpandKerning ( object ) fgOpt_ExpandKerning options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors applyToAssistance codepage count keep limitAction limitCmap10 limitCodepage limitCount limitFontWindow Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_Font ( object ) fgOpt_Font options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors autoMetrics buildPclt detectG2 detectInterpolation expandKerning fitAscender fitDescender optimize otExport placeDuplicate placePaste t1Autohint t1Export ttAutohint Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_KerningOptions ( object ) fgOpt_KerningOptions options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors saveTheOnlySubtableInKernTable useScriptInfoForOneSubtableCutting Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_OTExport ( object ) fgOpt_OTExport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors CBDT COLR SVG addCharacters applyBBoxSavings autoWinAscDesc autohint autohintGlyphs autohintingMode autotrace cff cff_adobe cff_compress cmap10 copyHDMXData decompose doAutohinting doHintsCompile exportCBDT exportCOLR exportSBIX exportSVG exportVOLT feaFileOptions featuresCompile featuresRestore fixDirection fixNames fontNames generateLTSH headBBoxSavings kerningOptions noReorder roundCoordinates sbix silent_mode subrize t1autohint ttfautohint useTTFAutohint writeBinaryHinting writeBitmaps writeDeviceMetrics writeGDEF writeHintedFont writeKernFeature writeKernTable writeOriginalHinting Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_OTExportFeaFile ( object ) fgOpt_OTExportFeaFile options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors doWriteGDEF inlineLookups verbose write_body write_classes write_prefix Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_OTImport ( object ) fgOpt_OTImport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors convertCurves convertNames curveConvertPrecision featuresDecompile featuresStore ignoreGlyphs namesGrouping readKerningFromFeature readKerningFromTable readMacSpecificNaming shortSplines storeAAT storeOriginalHinting Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_Optimize ( object ) fgOpt_Optimize options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors align reduce Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_T1Autohint ( object ) fgOpt_T1Autohint options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors hHinting hStems maxHWidth maxVWidth minHLen minHWidth minVLen minVWidth ratioH ratioV useAdobeAutohinter vHinting vStems zones Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_T1Export ( object ) fgOpt_T1Export options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors AFM ASCII INF PFM autohint cff cid decompose downloadable encoding fixDirection flex fsType roundCoordinates scale1000 sort swapNotice unicode useOS2 Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_T1Import ( object ) fgOpt_T1Import options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors decompose familyGrouping ignoreGlyphs readMacSpecificNaming singleMasterOnly Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_TTAutohint ( object ) fgOpt_TTAutohint options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors allow3Stems allowDeltas hHinting hintSidebearing hintToCenter interpolateCusps interpolateDoubleLinks treshold vHinting Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_TTFAutohint ( object ) fgOpt_TTFAutohint options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors TTFA_info adjust_subglyphs control_name default_script dehint detailed_info dw_cleartype_strong_stem_width fallback_script fallback_stem_width family_suffix gdi_cleartype_strong_stem_width gray_strong_stem_width hint_composites hinting_limit hinting_range_max hinting_range_min ignore_restrictions increase_x_height no_info symbol windows_compatibility x_height_snapping_exceptions_string Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_UfoFontExport ( object ) fgOpt_UfoFontExport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors base64 compress formatVersion writeLayoutTTX Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_UfoFontImport ( object ) fgOpt_UfoFontImport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors compileFeatures fixOrdering readLayoutTTX removeOverlap Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_VfbExport ( object ) fgOpt_VfbExport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors saveEncoding Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_VfbImport ( object ) fgOpt_VfbImport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors autoReplace compileFeatures fixOrdering separateMasters Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOpt_WOFFExport ( object ) fgOpt_WOFFExport options page Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors otExport Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOptions ( object ) FontGate options Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors eotexport font otexport otimport t1export t1import ufoexport ufoimport vfbexport vfbimport woffexport Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOtInfo ( object ) OT Info representation Constructors: fgOtInfo() - default fgOtInfo(fgOtInfo) - copy Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Descriptors glyphClass ('Unspecified'/'Simple'/'Ligature'/'Mark'/'Component') markClass (int) otClasses ( [ int ] ) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgOtValue ( object ) OT Value representation Constructors: fgOtValue() - default fgOtValue(fgOtValue) - copy fgOtValue(float) - by float value fgOtValue(int/long) - by int/long value Math operation: fgOtValue + fgOtValue fgOtValue - fgOtValue fgOtValue * float Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature mul (...) x. __mul__ (y) < ==> x*y radd (...) x. __radd__ (y) < ==> y+x repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (y) < ==> y*x rsub (...) x. __rsub__ (y) < ==> y-x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) sub (...) x. __sub__ (y) < ==> x-y Descriptors coordinate (float) deviceTable (fgDeviceRecords) point_index (int) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgPackages ( object ) Font packages representation Constructors: fgPackages() - default fgPackages(fgPackages) - copy fgPackages('pathToFontFileOrFolder') Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. add (...) add ( fgFont or fgPackages object ) - add font(s) close (...) close () - remove all font(s) from list copyFrom (...) copyFrom ( fgPackages ) - copy all fonts from another fgPackages object create (...) create () - add empty font to list and return it's index indexOf (...) indexOf ( fgFont ) - return font index or (-1) if missing in list open (...) open (path) - open existing font(s) from 'path' location and return first index of created font(s) remove (...) remove (int index) - remove font by index Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgPen ( object ) Pen representation Constructors: fgPen(fgGlyph) - default fgPen(fgPen) - copy Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value beginPath (...) beginPath () closePath (...) closePath () curveTo (...) curveTo ( fgPoint ...) curveToOne (...) curveToOne ( fgPoint , fgPoint , fgPoint ) endPath (...) endPath () lineTo (...) lineTo ( fgPoint ) moveTo (...) moveTo ( fgPoint ) qCurveToOne (...) qCurveToOne ( fgPoint , fgPoint ) Descriptors smooth (bool) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgPoint ( object ) Point representation Constructors: fgPoint() - default fgPoint(fgPoint) - copy fgPoint(float x) fgPoint(tuple(float x, float y)) fgPoint(float x, float y) Math Operations: fgPoint + fgPoint fgPoint - fgPoint fgPoint * fgPoint fgPoint * float - vector product fgPoint / float fgPoint < < fgPoint - True if first point is less or equal to second fgPoint >> fgPoint - True if first point is greater or equal to second fgPoint ^ fgPoint - scalar product Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. div (...) x. __div__ (y) < ==> x/y eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len (x) lshift (...) x. __lshift__ (y) < ==> x < lt (...) x. __lt__ (y) < ==> x mul (...) x. __mul__ (y) < ==> x*y ne (...) x. __ne__ (y) < ==> x!=y radd (...) x. __radd__ (y) < ==> y+x rdiv (...) x. __rdiv__ (y) < ==> y/x repr (...) x. __repr__ () < ==> repr(x) rlshift (...) x. __rlshift__ (y) < ==> y < rmul (...) x. __rmul__ (y) < ==> y*x rrshift (...) x. __rrshift__ (y) < ==> y>>x rshift (...) x. __rshift__ (y) < ==> x>>y rsub (...) x. __rsub__ (y) < ==> y-x rxor (...) x. __rxor__ (y) < ==> y^x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) sub (...) x. __sub__ (y) < ==> x-y xor (...) x. __xor__ (y) < ==> x^y angleDiff (...) fgPoint angleDiff ( fgPoint ) angleSum (...) fgPoint angleSum ( fgPoint ) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign ( fgPoint ) or assign (float x, float y) clear (...) clear () close_to (...) bool close_to ( fgPoint [, d=0.00001]) collinear (...) bool collinear ( fgPoint ) direction (...) fgPoint direction () dist (...) float dist ( fgPoint ) dist2 (...) float dist2 ( fgPoint ) distance (...) float distance ( fgPoint [, horizontal=false] doubleScale (...) scale( fgPoint ) or scale(float sx, float sy) flip (...) flip () flipped (...) fgPoint flipped () ix (...) int ix () - integer fast iy (...) int iy () - integer fast len (...) float len () len2 (...) float len2 () normal (...) fgPoint normal () rotate (...) fgPoint rotate ( fgPoint v, fgPoint c) round (...) fgPoint round ([doRound=true]) rx (...) int rx () - integer rounded ry (...) int ry () - integer rounded transform (...) transform ( fgMatrix ) transformed (...) fgPoint transformed ( fgMatrix ) value (...) float value ([horizontal=true]) zero (...) bool zero () Descriptors x (float) y (float) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgPointU ( object ) PointU representation Constructors: fgPointU() - default fgPointU(fgPoint) - copy fgPointU(fgPointU) - copy fgPointU(fgPoint, float u) fgPointU(tuple(float x, float y, float u)) fgPointU(float x, float y, float u) Math Operations: fgPointU + fgPoint/fgPointU fgPointU - fgPoint/fgPointU fgPointU * fgPoint/fgPointU fgPointU * float - vector product fgPointU / float fgPointU < < fgPointU - True if first point is less or equal to second fgPointU >> fgPointU - True if first point is greater or equal to second fgPointU ^ fgPointU - scalar product Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. div (...) x. __div__ (y) < ==> x/y eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len (x) lshift (...) x. __lshift__ (y) < ==> x < lt (...) x. __lt__ (y) < ==> x mul (...) x. __mul__ (y) < ==> x*y ne (...) x. __ne__ (y) < ==> x!=y radd (...) x. __radd__ (y) < ==> y+x rdiv (...) x. __rdiv__ (y) < ==> y/x repr (...) x. __repr__ () < ==> repr(x) rlshift (...) x. __rlshift__ (y) < ==> y < rmul (...) x. __rmul__ (y) < ==> y*x rrshift (...) x. __rrshift__ (y) < ==> y>>x rshift (...) x. __rshift__ (y) < ==> x>>y rsub (...) x. __rsub__ (y) < ==> y-x rxor (...) x. __rxor__ (y) < ==> y^x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) sub (...) x. __sub__ (y) < ==> x-y xor (...) x. __xor__ (y) < ==> x^y angleDiff (...) fgPoint angleDiff ( fgPoint ) angleSum (...) fgPoint angleSum ( fgPoint ) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign ( fgPointU ) or assign (float x, float y, float u) clear (...) clear () close_to (...) bool close_to ( fgPointU [, d=0.00001]) collinear (...) bool collinear ( fgPoint ) direction (...) fgPoint direction () dist (...) float dist ( fgPoint ) dist2 (...) float dist2 ( fgPoint ) distance (...) float distance ( fgPoint [, horizontal=false] doubleScale (...) scale( fgPoint ) or scale(float sx, float sy) flip (...) flip () flipped (...) fgPoint flipped () ix (...) int ix () - integer fast iy (...) int iy () - integer fast len (...) float len () len2 (...) float len2 () normal (...) fgPoint normal () rotate (...) fgPoint rotate ( fgPointU v, fgPoint c) round (...) fgPoint round ([doRound=true]) rx (...) int rx () - integer rounded ry (...) int ry () - integer rounded transform (...) transform ( fgMatrix ) transformed (...) fgPoint transformed ( fgMatrix ) value (...) float value ([horizontal=true]) zero (...) bool zero () Descriptors u (float) x (float) y (float) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgRect ( object ) Rectangle representation Constructors: fgRect() - default fgRect(fgRect) - copy fgRect(fgPoint, fgPoint) fgRect(fgPoint, fgPoint, bool empty) fgRect(float x1, float y1, float x2, float y2) Math Operations: fgRect + fgPoint fgRect + fgRect fgRect + float fgRect - fgPoint fgRect - fgRect fgRect - float fgRect * float fgRect / float fgRect & fgRect fgRect | fgRect Methods add (...) x. __add__ (y) < ==> x+y and (...) x. __and__ (y) < ==> x delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. div (...) x. __div__ (y) < ==> x/y eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x mul (...) x. __mul__ (y) < ==> x*y ne (...) x. __ne__ (y) < ==> x!=y or (...) x. __or__ (y) < ==> x|y radd (...) x. __radd__ (y) < ==> y+x rand (...) x. __rand__ (y) < ==> y rdiv (...) x. __rdiv__ (y) < ==> y/x repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (y) < ==> y*x ror (...) x. __ror__ (y) < ==> y|x rsub (...) x. __rsub__ (y) < ==> y-x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) sub (...) x. __sub__ (y) < ==> x-y adjust (...) adjust (float x1, float y1, float x2, float y2) adjusted (...) fgRect adjusted (float x1, float y1, float x2, float y2) asDict (...) represent Py::Object as dictionary asTuple (...) represent Py::Object as tuple assign (...) assign ( fgPoint , fgPoint [, fix=true]) or assign (float, float, float, float[, fix=true]) bottom (...) float bottom () center (...) fgPoint center () clear (...) clear () contains (...) bool contains ( fgPoint ) or bool contains ( fgRect ) containsX (...) bool containsX (float) containsY (...) bool containsY (float) diagonal (...) float diagonal () empty (...) empty () fix (...) fix () fix_x (...) fix_x () fix_y (...) fix_y () height (...) float height () intersects (...) bool intersects ( fgRect ) left (...) float left () move (...) move (float dx, float dy) moved (...) fgRect moved (float dx, float dy) right (...) float right () setBottom (...) setBottom (float) setHeight (...) setHeight (float) setLeft (...) setLeft (float) setRect (...) setRect (int x, int y, int w, int h) setRight (...) setRight (float) setSize (...) setSize ( fgPoint ) setTop (...) setTop (float) setWidth (...) setWidth (float) size (...) fgPoint size () top (...) float top () transform (...) transform ( fgMatrix ) transformed (...) fgRect transformed ( fgMatrix ) width (...) float width () zero (...) zero () Descriptors ll (fgPoint) lower left point ur (fgPoint) upper right point Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgRendered ( object ) fgRendered representation Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors bitmap metrics position ppm Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgShape ( object ) Shape representation Constructors: fgShape() - default fgShape(fgShape) - copy fgShape(fgShape, fgShape, float tx, float ty) fgShape(fgShape, fgShape, float tx, float ty, int blend_mode) Math Operations: fgShape + fgShape fgShape - fgShape fgShape * float Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature mul (...) x. __mul__ (y) < ==> x*y radd (...) x. __radd__ (y) < ==> y+x repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (y) < ==> y*x rsub (...) x. __rsub__ (y) < ==> y-x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value sub (...) x. __sub__ (y) < ==> x-y addContour (...) fgContour addContour ( fgContour ) addShape (...) int addShape ( fgShape , int mode) ??? applyTransform (...) applyTransform () area (...) float area () assignStyle (...) assignStyle ( fgShape ) autoInterpolated (...) bool autoInterpolated () autoSmooth (...) bool autoSmooth () boundingBox (...) fgRect /Nothing boundingBox ( fgMatrix [, bool prepareExport=false]) checkContours (...) checkContours () containsOffPoint (...) bool containsOffPoint () countContours (...) int countContours () countNodes (...) int countNodes () excludeShape (...) int excludeShape ( fgShape , int mode) ??? hasBody (...) bool hasBody () hasContours (...) bool hasContours () isCompatible (...) bool/Nothing isCompatible ( fgShape ) removeOverlap (...) int removeOverlap () reverse (...) reverse () sortContours (...) sortContours () subtractShape (...) int subtractShape ( fgShape , int mode) ??? transform (...) transform ( fgMatrix ) Descriptors angle (float) body (fgBrush) calligraphic (bool) cap_type (int) contours (fgContours) join_type (int) matrix (fgMatrix) name (string) opacity (float) pen (fgBrush) picture (fgBitmap) width (float) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgShapes ( object ) list of fgShape objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) asList (...) clean (...) del (...) insert (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgStem ( object ) Stem representation Constructors: fgStem() - default fgStem(fgStem) - copy fgStem(float) Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) clear (...) clear () fillProgram (...) list(int) fillProgram (float upm) ppm (...) int ppm (float upm, int k) setProgram (...) setProgram (int k, int ppm, bool keepValues) Descriptors name (string) program ( dict(int:int) ) value (float) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgStems ( object ) list of fgStem objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgStringDict ( object ) string dictionary Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgTTInterpreter ( object ) TTInterpreter representation Constructors: fgTTInterpreter() - default fgTTInterpreter(fgTTInterpreter) - copy Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgTrueTypeData ( object ) TrueTypeData representation Constructors: fgTrueTypeData() - default fgTrueTypeData(fgTrueTypeData) - copy Methods OK (...) bool OK () - return true if status is gdsOK cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value bad (...) bool bad () - return true if status isn't gdsOK bottomSideBearing (...) int bottomSideBearing () boundingBox (...) fgRect boundingBox ( fgGlyphsR , fgMatrix , bool prepareExport) - calculate bounding box clearImports (...) clearImports () - clear instructions and hdmx, set yPels = 1 copy (...) fgTrueTypeData copy () - create alone copy of data countPictures (...) int countPictures () - return pictures count empty (...) bool empty () - return true if state == sEmpty or no endpoints present getFontGateData (...) fgFontGateData getFontGateData () - return Nothing getType (...) string getType () - return 'dtTrueType' hasBody (...) bool hasBody (bool prepareExport) - return true if non-empty body layer is present hasColors (...) bool hasColors () - return true if colors is present hasHints (...) bool hasHints () - return true if hints is present hasPictures (...) bool hasPictures () - return true if pictures is present modified (...) bool modified () - return true if data was changed rightSideBearing (...) int rightSideBearing () setParent (...) setParent ( fgGlyph ) - set parent glyph status (...) 'gdsOK'/'gdsInvalid' status () transform (...) transform ( fgMatrix ) - transform data updateBoundingBox (...) updateBoundingBox () updated (...) updated () - mark data as changed, reset internal caches valid (...) bool valid () - return true if state == sValid | sDecomposed xExtent (...) int xExtent () yExtent (...) int yExtent () Descriptors advanceHeight (int) advanceWidth (int) endpoint ([int]) hdmx (fgHdmx) instructions (fgBuffer) leftSideBearing (int) points (fgTrueTypePoints) pointsMap ({ 'name': int value }) topSideBearing (int) xMax (int) xMin (int) yMax (int) yMin (int) yPels (int) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgTrueTypePoint ( object ) TrueType Point representation Constructors: fgTrueTypePoint() - default fgTrueTypePoint(fgTrueTypePoint) - copy fgTrueTypePoint(fgPoint) fgTrueTypePoint(bool on, int x, int y) Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple assign (...) assign (int x, int y) onCurve (...) bool onCurve () or onCurve (bool value) repeat (...) bool repeat () or repeat (bool value) touched (...) bool touched () or touched (bool value) xSame (...) bool xSame () or xSame (bool value) xShort (...) bool xShort () or xShort (bool value) ySame (...) bool ySame () or ySame (bool value) yShort (...) bool yShort () or yShort (bool value) Descriptors flag (int) x (int) y (int) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgTrueTypePoints ( object ) list of fgTrueTypePoint objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgValuesDict ( object ) float values dictionary Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. asDict (...) del (...) has_key (...) keys (...) value (...) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVdmxRecord ( object ) fgVdmxRecord representation Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors yMax yMin yPelHeight Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVdmxRecords ( object ) list of fgVdmxRecord objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVector ( object ) Vector representation Constructors: fgVector() - default fgVector(fgVector) - copy fgVector(fgPoint q0[, fgPoint q1]) - from one or two points fgVector(fgPoint, float l, float a) Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) angle (...) float angle () angleTo (...) float angleTo ( fgVector ) asDict (...) represent object as dictionary asTuple (...) represent object as tuple bbox (...) fgRect bbox () center (...) fgPoint center () delta (...) fgPoint delta () direction (...) fgPoint direction () equivalent (...) bool equivalent ( fgVector ) intersect (...) fgPoint /None intersect ( fgVector ) or ( fgPoint , t)/None intersect ( fgVector , bool get_t) intersectY (...) float/None intersectY (float pos) len (...) float len () - distance between q0 and q1 parallel (...) bool parallel ( fgVector ) point (...) fgPoint point (float time) time (...) float time ( fgPoint ) Descriptors q0 (fgPoint) q1 (fgPoint) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVectorBool ( object ) [char] vector Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVectorChar ( object ) [char] vector Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVectorDouble ( object ) [double] vector Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVectorInt ( object ) [int] vector Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVectorPoint ( object ) [fgPoint] vector Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVectorUInt16 ( object ) [uint16_t] vector Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgVectorUInt32 ( object ) [uint32t] vector Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgZone ( object ) Zone representation Constructors: fgZone() - default fgZone(fgZone) - copy Methods cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) clear (...) clear () getIntValues (...) tuple( int y0, int y1 ) getIntValues () v0 (...) float v0 () v1 (...) float v1 () Descriptors name (string) position (float) program ( dict(int:int) ) top (bool) width (float) Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgZones ( object ) list of fgZone objects Methods add (...) x. __add__ (y) < ==> x+y cmp (...) x. __cmp__ (y) < ==> cmp(x,y) delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (item) or append ( list(item) ) - add items to the end of the list asList (...) list(items) asList () - get items as list clean (...) clean () - delete all items del (...) del (index) - delete item by index insert (...) insert (position, item) - insert item into list at specified position Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class pyfgDataOwnerData ( object ) pyfgDataOwnerData objects Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"fontgate"},{"location":"fontgate.html#fontgate","text":"","title":"fontgate"},{"location":"fontgate.pyfgDataOwnerData.html","text":"pyfgDataOwnerData fontgate.pyfgDataOwnerData = class pyfgDataOwnerData ( object ) pyfgDataOwnerData objects Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"pyfgDataOwnerData"},{"location":"fontgate.pyfgDataOwnerData.html#pyfgdataownerdata","text":"","title":"pyfgDataOwnerData"},{"location":"fontlab.AccentInfo.html","text":"AccentInfo fontlab.AccentInfo = class AccentInfo ( object ) Data wrapper Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors layer offset Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontlab.AccentInfo.asDict = asDict (...) represent object as dictionary asTuple fontlab.AccentInfo.asTuple = asTuple (...) represent object as tuple","title":"AccentInfo"},{"location":"fontlab.AccentInfo.html#accentinfo","text":"","title":"AccentInfo"},{"location":"fontlab.AccentInfo.html#asdict","text":"fontlab.AccentInfo.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontlab.AccentInfo.html#astuple","text":"fontlab.AccentInfo.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontlab.CurveEx.html","text":"CurveEx fontlab.CurveEx = class CurveEx ( object ) CurveEx representation Constructors: CurveEx() - default CurveEx(QPointF p0, QPointF p1[, int leftIdx=0[, int _rightIdx=0]]) CurveEx(QPointF p0, QPointF p1, QPointF p2, QPointF p3) CurveEx( list(QPointF) ) Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. applyTransform (...) void applyTransform (QTransform & tx) empty (...) bool empty () extremum (...) bool extremum (CurveEx prev) fastLength (...) double fastLength () improve (...) bool improve ([double curvature = 1.0]) smooth (...) bool smooth (CurveEx prev) smoothCurvature (...) CurveEx smoothCurvature (CurveEx c1, bool complete) split (...) bool split (CurveEx, CurveEx) updateBRect (...) void updateBRect () Descriptors bcp0 QPointF bcp0 bcp1 QPointF bcp1 bcv0 QPointF bcv0 bcv1 QPointF bcv1 brect QRectF contourIx int countPoints int leftIdx int p0 QPointF p0 p1 QPointF p1 paramT int rightIdx int Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T applyTransform fontlab.CurveEx.applyTransform = applyTransform (...) void applyTransform(QTransform & tx) bcp0 fontlab.CurveEx.bcp0 QPointF bcp0 bcp1 fontlab.CurveEx.bcp1 QPointF bcp1 bcv0 fontlab.CurveEx.bcv0 QPointF bcv0 bcv1 fontlab.CurveEx.bcv1 QPointF bcv1 brect fontlab.CurveEx.brect QRectF contourIx fontlab.CurveEx.contourIx int countPoints fontlab.CurveEx.countPoints int empty fontlab.CurveEx.empty = empty (...) bool empty() extremum fontlab.CurveEx.extremum = extremum (...) bool extremum(CurveEx prev) fastLength fontlab.CurveEx.fastLength = fastLength (...) double fastLength() improve fontlab.CurveEx.improve = improve (...) bool improve([double curvature = 1.0]) leftIdx fontlab.CurveEx.leftIdx int p0 fontlab.CurveEx.p0 QPointF p0 p1 fontlab.CurveEx.p1 QPointF p1 paramT fontlab.CurveEx.paramT int rightIdx fontlab.CurveEx.rightIdx int smooth fontlab.CurveEx.smooth = smooth (...) bool smooth(CurveEx prev) smoothCurvature fontlab.CurveEx.smoothCurvature = smoothCurvature (...) CurveEx smoothCurvature(CurveEx c1, bool complete) split fontlab.CurveEx.split = split (...) bool split(CurveEx, CurveEx) updateBRect fontlab.CurveEx.updateBRect = updateBRect (...) void updateBRect()","title":"CurveEx"},{"location":"fontlab.CurveEx.html#curveex","text":"","title":"CurveEx"},{"location":"fontlab.CurveEx.html#applytransform","text":"fontlab.CurveEx.applyTransform = applyTransform (...) void applyTransform(QTransform & tx)","title":"applyTransform"},{"location":"fontlab.CurveEx.html#bcp0","text":"fontlab.CurveEx.bcp0 QPointF bcp0","title":"bcp0"},{"location":"fontlab.CurveEx.html#bcp1","text":"fontlab.CurveEx.bcp1 QPointF bcp1","title":"bcp1"},{"location":"fontlab.CurveEx.html#bcv0","text":"fontlab.CurveEx.bcv0 QPointF bcv0","title":"bcv0"},{"location":"fontlab.CurveEx.html#bcv1","text":"fontlab.CurveEx.bcv1 QPointF bcv1","title":"bcv1"},{"location":"fontlab.CurveEx.html#brect","text":"fontlab.CurveEx.brect QRectF","title":"brect"},{"location":"fontlab.CurveEx.html#contourix","text":"fontlab.CurveEx.contourIx int","title":"contourIx"},{"location":"fontlab.CurveEx.html#countpoints","text":"fontlab.CurveEx.countPoints int","title":"countPoints"},{"location":"fontlab.CurveEx.html#empty","text":"fontlab.CurveEx.empty = empty (...) bool empty()","title":"empty"},{"location":"fontlab.CurveEx.html#extremum","text":"fontlab.CurveEx.extremum = extremum (...) bool extremum(CurveEx prev)","title":"extremum"},{"location":"fontlab.CurveEx.html#fastlength","text":"fontlab.CurveEx.fastLength = fastLength (...) double fastLength()","title":"fastLength"},{"location":"fontlab.CurveEx.html#improve","text":"fontlab.CurveEx.improve = improve (...) bool improve([double curvature = 1.0])","title":"improve"},{"location":"fontlab.CurveEx.html#leftidx","text":"fontlab.CurveEx.leftIdx int","title":"leftIdx"},{"location":"fontlab.CurveEx.html#p0","text":"fontlab.CurveEx.p0 QPointF p0","title":"p0"},{"location":"fontlab.CurveEx.html#p1","text":"fontlab.CurveEx.p1 QPointF p1","title":"p1"},{"location":"fontlab.CurveEx.html#paramt","text":"fontlab.CurveEx.paramT int","title":"paramT"},{"location":"fontlab.CurveEx.html#rightidx","text":"fontlab.CurveEx.rightIdx int","title":"rightIdx"},{"location":"fontlab.CurveEx.html#smooth","text":"fontlab.CurveEx.smooth = smooth (...) bool smooth(CurveEx prev)","title":"smooth"},{"location":"fontlab.CurveEx.html#smoothcurvature","text":"fontlab.CurveEx.smoothCurvature = smoothCurvature (...) CurveEx smoothCurvature(CurveEx c1, bool complete)","title":"smoothCurvature"},{"location":"fontlab.CurveEx.html#split","text":"fontlab.CurveEx.split = split (...) bool split(CurveEx, CurveEx)","title":"split"},{"location":"fontlab.CurveEx.html#updatebrect","text":"fontlab.CurveEx.updateBRect = updateBRect (...) void updateBRect()","title":"updateBRect"},{"location":"fontlab.ExportControl.html","text":"ExportControl fontlab.ExportControl = class ExportControl ( object ) ExportControl representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value init (...) init () load (...) bool load () store (...) store () Descriptors conflictMode int contentMode int contentName string contentName destinationFolder string destinationMode int groupFamily bool groupProfiles bool profileId int profileName int Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T conflictMode fontlab.ExportControl.conflictMode int contentMode fontlab.ExportControl.contentMode int contentName fontlab.ExportControl.contentName string contentName destinationFolder fontlab.ExportControl.destinationFolder string destinationMode fontlab.ExportControl.destinationMode int groupFamily fontlab.ExportControl.groupFamily bool groupProfiles fontlab.ExportControl.groupProfiles bool init fontlab.ExportControl.init = init (...) init() load fontlab.ExportControl.load = load (...) bool load() profileId fontlab.ExportControl.profileId int profileName fontlab.ExportControl.profileName int store fontlab.ExportControl.store = store (...) store()","title":"ExportControl"},{"location":"fontlab.ExportControl.html#exportcontrol","text":"","title":"ExportControl"},{"location":"fontlab.ExportControl.html#conflictmode","text":"fontlab.ExportControl.conflictMode int","title":"conflictMode"},{"location":"fontlab.ExportControl.html#contentmode","text":"fontlab.ExportControl.contentMode int","title":"contentMode"},{"location":"fontlab.ExportControl.html#contentname","text":"fontlab.ExportControl.contentName string contentName","title":"contentName"},{"location":"fontlab.ExportControl.html#destinationfolder","text":"fontlab.ExportControl.destinationFolder string","title":"destinationFolder"},{"location":"fontlab.ExportControl.html#destinationmode","text":"fontlab.ExportControl.destinationMode int","title":"destinationMode"},{"location":"fontlab.ExportControl.html#groupfamily","text":"fontlab.ExportControl.groupFamily bool","title":"groupFamily"},{"location":"fontlab.ExportControl.html#groupprofiles","text":"fontlab.ExportControl.groupProfiles bool","title":"groupProfiles"},{"location":"fontlab.ExportControl.html#init","text":"fontlab.ExportControl.init = init (...) init()","title":"init"},{"location":"fontlab.ExportControl.html#load","text":"fontlab.ExportControl.load = load (...) bool load()","title":"load"},{"location":"fontlab.ExportControl.html#profileid","text":"fontlab.ExportControl.profileId int","title":"profileId"},{"location":"fontlab.ExportControl.html#profilename","text":"fontlab.ExportControl.profileName int","title":"profileName"},{"location":"fontlab.ExportControl.html#store","text":"fontlab.ExportControl.store = store (...) store()","title":"store"},{"location":"fontlab.FaBasicPtr.html","text":"FaBasicPtr fontlab.FaBasicPtr = class FaBasicPtr ( object ) FaBasicPtr representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value fix (...) flGlyph/Nothing fix () Descriptors canBeFixed bool contour flContour id int location QPointF nodeIndex int priority int report QString title QString vector QPointF Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T canBeFixed fontlab.FaBasicPtr.canBeFixed bool contour fontlab.FaBasicPtr.contour flContour fix fontlab.FaBasicPtr.fix = fix (...) flGlyph/Nothing fix() id fontlab.FaBasicPtr.id int location fontlab.FaBasicPtr.location QPointF nodeIndex fontlab.FaBasicPtr.nodeIndex int priority fontlab.FaBasicPtr.priority int report fontlab.FaBasicPtr.report QString title fontlab.FaBasicPtr.title QString vector fontlab.FaBasicPtr.vector QPointF","title":"FaBasicPtr"},{"location":"fontlab.FaBasicPtr.html#fabasicptr","text":"","title":"FaBasicPtr"},{"location":"fontlab.FaBasicPtr.html#canbefixed","text":"fontlab.FaBasicPtr.canBeFixed bool","title":"canBeFixed"},{"location":"fontlab.FaBasicPtr.html#contour","text":"fontlab.FaBasicPtr.contour flContour","title":"contour"},{"location":"fontlab.FaBasicPtr.html#fix","text":"fontlab.FaBasicPtr.fix = fix (...) flGlyph/Nothing fix()","title":"fix"},{"location":"fontlab.FaBasicPtr.html#id","text":"fontlab.FaBasicPtr.id int","title":"id"},{"location":"fontlab.FaBasicPtr.html#location","text":"fontlab.FaBasicPtr.location QPointF","title":"location"},{"location":"fontlab.FaBasicPtr.html#nodeindex","text":"fontlab.FaBasicPtr.nodeIndex int","title":"nodeIndex"},{"location":"fontlab.FaBasicPtr.html#priority","text":"fontlab.FaBasicPtr.priority int","title":"priority"},{"location":"fontlab.FaBasicPtr.html#report","text":"fontlab.FaBasicPtr.report QString","title":"report"},{"location":"fontlab.FaBasicPtr.html#title","text":"fontlab.FaBasicPtr.title QString","title":"title"},{"location":"fontlab.FaBasicPtr.html#vector","text":"fontlab.FaBasicPtr.vector QPointF","title":"vector"},{"location":"fontlab.FontLayer.html","text":"FontLayer fontlab.FontLayer = class FontLayer ( object ) FontLayer object Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"FontLayer"},{"location":"fontlab.FontLayer.html#fontlayer","text":"","title":"FontLayer"},{"location":"fontlab.FontMetrics.html","text":"FontMetrics fontlab.FontMetrics = class FontMetrics ( object ) FontMetrics representation Constructors: FontMetrics() - default FontMetrics(FontMetrics) FontMetrics(double upm) FontMetrics(fg::Package *p) FontMetrics(flPackage p, string layer_name) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value init (...) init () Descriptors ascender double capsHeight double descender double lineGap double upm double xHeight double Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T ascender fontlab.FontMetrics.ascender double capsHeight fontlab.FontMetrics.capsHeight double descender fontlab.FontMetrics.descender double init fontlab.FontMetrics.init = init (...) init() lineGap fontlab.FontMetrics.lineGap double upm fontlab.FontMetrics.upm double xHeight fontlab.FontMetrics.xHeight double","title":"FontMetrics"},{"location":"fontlab.FontMetrics.html#fontmetrics","text":"","title":"FontMetrics"},{"location":"fontlab.FontMetrics.html#ascender","text":"fontlab.FontMetrics.ascender double","title":"ascender"},{"location":"fontlab.FontMetrics.html#capsheight","text":"fontlab.FontMetrics.capsHeight double","title":"capsHeight"},{"location":"fontlab.FontMetrics.html#descender","text":"fontlab.FontMetrics.descender double","title":"descender"},{"location":"fontlab.FontMetrics.html#init","text":"fontlab.FontMetrics.init = init (...) init()","title":"init"},{"location":"fontlab.FontMetrics.html#linegap","text":"fontlab.FontMetrics.lineGap double","title":"lineGap"},{"location":"fontlab.FontMetrics.html#upm","text":"fontlab.FontMetrics.upm double","title":"upm"},{"location":"fontlab.FontMetrics.html#xheight","text":"fontlab.FontMetrics.xHeight double","title":"xHeight"},{"location":"fontlab.GlyphComponent.html","text":"GlyphComponent fontlab.GlyphComponent = class GlyphComponent ( object ) GlyphComponent representation Constructors: GlyphComponent() - default GlyphComponent(GlyphComponent) GlyphComponent(uint id) GlyphComponent(string name) GlyphComponent(uint id, QTransform tx, double w, bool ua) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors name_id uint transform QTransform use_anchors bool width_scale double Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T name_id fontlab.GlyphComponent.name_id uint transform fontlab.GlyphComponent.transform QTransform use_anchors fontlab.GlyphComponent.use_anchors bool width_scale fontlab.GlyphComponent.width_scale double","title":"GlyphComponent"},{"location":"fontlab.GlyphComponent.html#glyphcomponent","text":"","title":"GlyphComponent"},{"location":"fontlab.GlyphComponent.html#name_id","text":"fontlab.GlyphComponent.name_id uint","title":"name_id"},{"location":"fontlab.GlyphComponent.html#transform","text":"fontlab.GlyphComponent.transform QTransform","title":"transform"},{"location":"fontlab.GlyphComponent.html#use_anchors","text":"fontlab.GlyphComponent.use_anchors bool","title":"use_anchors"},{"location":"fontlab.GlyphComponent.html#width_scale","text":"fontlab.GlyphComponent.width_scale double","title":"width_scale"},{"location":"fontlab.Info.html","text":"Info fontlab.Info = class Info ( object ) Font Info data Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors ascender Ascender value. This should be a integer or float capHeight Cap height value. This should be a integer or float copyright Copyright statement. This should be a string descender Descender value. This should be a integer or float familyName Family name. This should be a string italicAngle Italic angle. This must be an angle in counter-clockwise degrees from the vertical. This should be a integer or float macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the FOND resource. This should be a integer macintoshFONDName Font name for the FOND resource. This should be a string note Arbitrary note about the font. This should be a string openTypeGaspRangeRecords A list of gasp Range Records. These must be sorted in ascending order based on the rangeMaxPPEM value of the record. This should be a list openTypeHeadCreated Creation date. Expressed as a string of the format \"YYYY/MM/DD HH:MM:SS\". \"YYYY/MM/DD\" is year/month/day. The month must be in the range 1-12 and the day must be in the range 1-end of month. \"HH:MM:SS\" is hour:minute:second. The hour must be in the range 0:23. The minute and second must each be in the range 0-59. This should be a string openTypeHeadFlags A list of bit numbers indicating the flags. The bit numbers are listed in the OpenType head specification. Corresponds to the OpenType head table flags field. This should be a list openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field. This should be a non-negative integer openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field. This should be a integer openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field. This should be a integer openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field. This should be a integer openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field. This should be a integer openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field. This should be a integer openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field. This should be a integer openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18. This should be a string openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10. This should be a string openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9. This should be a string openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12. This should be a string openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13. This should be a string openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14. This should be a string openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8. This should be a string openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11. This should be a string openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16. This should be a string openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17. This should be a string openTypeNameRecords A list of name records. This name record storage area is intended for records that require platform, encoding and or language localization. This should be a list openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 19. This should be a string openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3. This should be a string openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5. This should be a string openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21. This should be a string openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22. This should be a string openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields. This should be a list openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, must be in the range 0-14. The second number, representing the subclass, must be in the range 0-15. The numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table sFamilyClass field. This should be a list openTypeOS2Panose The list must contain 10 non-negative integers that represent the setting for each category in the Panose specification. The integers correspond with the option numbers in each of the Panose categories. This corresponds to the OpenType OS/2 table Panose field. This should be a list openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table selection field. Note: Bits 0 (italic), 5 (bold) and 6 (regular) must not be set here. These bits should be taken from the generic styleMapStyle attribute. This should be a list openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field. This should be a integer openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field. This should be a integer openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field. This should be a integer openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field. This should be a integer openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field. This should be a integer openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field. This should be a integer openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field. This should be a integer openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field. This should be a integer openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field. This should be a integer openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field. This should be a integer openTypeOS2Type A list of bit numbers indicating the embedding type. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table fsType field. This should be a list openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field. This should be a integer openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field. This should be a integer openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field. This should be a integer openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields. This should be a list openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field. This should be a string openTypeOS2WeightClass Weight class value. Must be a non-negative integer. Corresponds to the OpenType OS/2 table usWeightClass field. This should be a integer openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field. This should be a integer openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field. This should be a non-negative integer openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field. This should be a non-negative integer openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field. This should be a integer openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field. This should be a integer openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field. This should be a integer openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field. This should be a integer openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field. This should be a integer openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field. This should be a integer panose PANOSE identification. Should be a string containing 10 space-separated numbers postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field. This should be a integer or float postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field. This should be a float postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field. This should be a integer or float postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files. This should be a string postscriptDefaultWidthX Default width for glyphs. This should be a integer or float postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptFontName Name to be used for the FontName field in Type 1/CFF table. This should be a string postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set. This should be a boolean postscriptFullName Name to be used for the FullName field in Type 1/CFF table. This should be a string postscriptIsFixedPitch Indicates if the font is monospaced. An authoring tool could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field This should be a boolean postscriptNominalWidthX Nominal width for glyphs. This should be a integer or float postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptStemSnapH List of horizontal stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field. This should be a list postscriptStemSnapV List of vertical stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field. This should be a list postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field. This should be a integer or float postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field. This should be a integer or float postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification. This should be a integer postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value. This should be a string postscriptWindowsCharacterSet The Windows character set. The values are defined below. This should be a integer styleMapFamilyName Family name used for bold, italic and bold italic style mapping. This should be a string styleMapStyleName Style map style. The possible values are regular, italic, bold and bold italic. These are case sensitive. This should be a string styleName Style name. This should be a string trademark Trademark statement. This should be a string unitsPerEm Units per em. This should be a non-negative integer or float versionMajor Major version. This should be a integer versionMinor Minor version. This should be a non-negative integer xHeight x-height value. This should be a integer or float year The year the font was created. This attribute is deprecated as of version 2. It's presence should not be relied upon by authoring tools. However, it may occur in a font's info so authoring tools should preserve it if present. This should be a integer Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T ascender fontlab.Info.ascender Ascender value. This should be a integer or float capHeight fontlab.Info.capHeight Cap height value. This should be a integer or float copyright fontlab.Info.copyright Copyright statement. This should be a string descender fontlab.Info.descender Descender value. This should be a integer or float familyName fontlab.Info.familyName Family name. This should be a string italicAngle fontlab.Info.italicAngle Italic angle. This must be an angle in counter-clockwise degrees from the vertical. This should be a integer or float macintoshFONDFamilyID fontlab.Info.macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the FOND resource. This should be a integer macintoshFONDName fontlab.Info.macintoshFONDName Font name for the FOND resource. This should be a string note fontlab.Info.note Arbitrary note about the font. This should be a string openTypeGaspRangeRecords fontlab.Info.openTypeGaspRangeRecords A list of gasp Range Records. These must be sorted in ascending order based on the rangeMaxPPEM value of the record. This should be a list openTypeHeadCreated fontlab.Info.openTypeHeadCreated Creation date. Expressed as a string of the format \"YYYY/MM/DD HH:MM:SS\". \"YYYY/MM/DD\" is year/month/day. The month must be in the range 1-12 and the day must be in the range 1-end of month. \"HH:MM:SS\" is hour:minute:second. The hour must be in the range 0:23. The minute and second must each be in the range 0-59. This should be a string openTypeHeadFlags fontlab.Info.openTypeHeadFlags A list of bit numbers indicating the flags. The bit numbers are listed in the OpenType head specification. Corresponds to the OpenType head table flags field. This should be a list openTypeHeadLowestRecPPEM fontlab.Info.openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field. This should be a non-negative integer openTypeHheaAscender fontlab.Info.openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field. This should be a integer openTypeHheaCaretOffset fontlab.Info.openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field. This should be a integer openTypeHheaCaretSlopeRise fontlab.Info.openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field. This should be a integer openTypeHheaCaretSlopeRun fontlab.Info.openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field. This should be a integer openTypeHheaDescender fontlab.Info.openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field. This should be a integer openTypeHheaLineGap fontlab.Info.openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field. This should be a integer openTypeNameCompatibleFullName fontlab.Info.openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18. This should be a string openTypeNameDescription fontlab.Info.openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10. This should be a string openTypeNameDesigner fontlab.Info.openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9. This should be a string openTypeNameDesignerURL fontlab.Info.openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12. This should be a string openTypeNameLicense fontlab.Info.openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13. This should be a string openTypeNameLicenseURL fontlab.Info.openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14. This should be a string openTypeNameManufacturer fontlab.Info.openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8. This should be a string openTypeNameManufacturerURL fontlab.Info.openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11. This should be a string openTypeNamePreferredFamilyName fontlab.Info.openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16. This should be a string openTypeNamePreferredSubfamilyName fontlab.Info.openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17. This should be a string openTypeNameRecords fontlab.Info.openTypeNameRecords A list of name records. This name record storage area is intended for records that require platform, encoding and or language localization. This should be a list openTypeNameSampleText fontlab.Info.openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 19. This should be a string openTypeNameUniqueID fontlab.Info.openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3. This should be a string openTypeNameVersion fontlab.Info.openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5. This should be a string openTypeNameWWSFamilyName fontlab.Info.openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21. This should be a string openTypeNameWWSSubfamilyName fontlab.Info.openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22. This should be a string openTypeOS2CodePageRanges fontlab.Info.openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields. This should be a list openTypeOS2FamilyClass fontlab.Info.openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, must be in the range 0-14. The second number, representing the subclass, must be in the range 0-15. The numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table sFamilyClass field. This should be a list openTypeOS2Panose fontlab.Info.openTypeOS2Panose The list must contain 10 non-negative integers that represent the setting for each category in the Panose specification. The integers correspond with the option numbers in each of the Panose categories. This corresponds to the OpenType OS/2 table Panose field. This should be a list openTypeOS2Selection fontlab.Info.openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table selection field. Note: Bits 0 (italic), 5 (bold) and 6 (regular) must not be set here. These bits should be taken from the generic styleMapStyle attribute. This should be a list openTypeOS2StrikeoutPosition fontlab.Info.openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field. This should be a integer openTypeOS2StrikeoutSize fontlab.Info.openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field. This should be a integer openTypeOS2SubscriptXOffset fontlab.Info.openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field. This should be a integer openTypeOS2SubscriptXSize fontlab.Info.openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field. This should be a integer openTypeOS2SubscriptYOffset fontlab.Info.openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field. This should be a integer openTypeOS2SubscriptYSize fontlab.Info.openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field. This should be a integer openTypeOS2SuperscriptXOffset fontlab.Info.openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field. This should be a integer openTypeOS2SuperscriptXSize fontlab.Info.openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field. This should be a integer openTypeOS2SuperscriptYOffset fontlab.Info.openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field. This should be a integer openTypeOS2SuperscriptYSize fontlab.Info.openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field. This should be a integer openTypeOS2Type fontlab.Info.openTypeOS2Type A list of bit numbers indicating the embedding type. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table fsType field. This should be a list openTypeOS2TypoAscender fontlab.Info.openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field. This should be a integer openTypeOS2TypoDescender fontlab.Info.openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field. This should be a integer openTypeOS2TypoLineGap fontlab.Info.openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field. This should be a integer openTypeOS2UnicodeRanges fontlab.Info.openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields. This should be a list openTypeOS2VendorID fontlab.Info.openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field. This should be a string openTypeOS2WeightClass fontlab.Info.openTypeOS2WeightClass Weight class value. Must be a non-negative integer. Corresponds to the OpenType OS/2 table usWeightClass field. This should be a integer openTypeOS2WidthClass fontlab.Info.openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field. This should be a integer openTypeOS2WinAscent fontlab.Info.openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field. This should be a non-negative integer openTypeOS2WinDescent fontlab.Info.openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field. This should be a non-negative integer openTypeVheaCaretOffset fontlab.Info.openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field. This should be a integer openTypeVheaCaretSlopeRise fontlab.Info.openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field. This should be a integer openTypeVheaCaretSlopeRun fontlab.Info.openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field. This should be a integer openTypeVheaVertTypoAscender fontlab.Info.openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field. This should be a integer openTypeVheaVertTypoDescender fontlab.Info.openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field. This should be a integer openTypeVheaVertTypoLineGap fontlab.Info.openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field. This should be a integer panose fontlab.Info.panose PANOSE identification. Should be a string containing 10 space-separated numbers postscriptBlueFuzz fontlab.Info.postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field. This should be a integer or float postscriptBlueScale fontlab.Info.postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field. This should be a float postscriptBlueShift fontlab.Info.postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field. This should be a integer or float postscriptBlueValues fontlab.Info.postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptDefaultCharacter fontlab.Info.postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files. This should be a string postscriptDefaultWidthX fontlab.Info.postscriptDefaultWidthX Default width for glyphs. This should be a integer or float postscriptFamilyBlues fontlab.Info.postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptFamilyOtherBlues fontlab.Info.postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptFontName fontlab.Info.postscriptFontName Name to be used for the FontName field in Type 1/CFF table. This should be a string postscriptForceBold fontlab.Info.postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set. This should be a boolean postscriptFullName fontlab.Info.postscriptFullName Name to be used for the FullName field in Type 1/CFF table. This should be a string postscriptIsFixedPitch fontlab.Info.postscriptIsFixedPitch Indicates if the font is monospaced. An authoring tool could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field This should be a boolean postscriptNominalWidthX fontlab.Info.postscriptNominalWidthX Nominal width for glyphs. This should be a integer or float postscriptOtherBlues fontlab.Info.postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptStemSnapH fontlab.Info.postscriptStemSnapH List of horizontal stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field. This should be a list postscriptStemSnapV fontlab.Info.postscriptStemSnapV List of vertical stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field. This should be a list postscriptUnderlinePosition fontlab.Info.postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field. This should be a integer or float postscriptUnderlineThickness fontlab.Info.postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field. This should be a integer or float postscriptUniqueID fontlab.Info.postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification. This should be a integer postscriptWeightName fontlab.Info.postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value. This should be a string postscriptWindowsCharacterSet fontlab.Info.postscriptWindowsCharacterSet The Windows character set. The values are defined below. This should be a integer styleMapFamilyName fontlab.Info.styleMapFamilyName Family name used for bold, italic and bold italic style mapping. This should be a string styleMapStyleName fontlab.Info.styleMapStyleName Style map style. The possible values are regular, italic, bold and bold italic. These are case sensitive. This should be a string styleName fontlab.Info.styleName Style name. This should be a string trademark fontlab.Info.trademark Trademark statement. This should be a string unitsPerEm fontlab.Info.unitsPerEm Units per em. This should be a non-negative integer or float versionMajor fontlab.Info.versionMajor Major version. This should be a integer versionMinor fontlab.Info.versionMinor Minor version. This should be a non-negative integer xHeight fontlab.Info.xHeight x-height value. This should be a integer or float year fontlab.Info.year The year the font was created. This attribute is deprecated as of version 2. It's presence should not be relied upon by authoring tools. However, it may occur in a font's info so authoring tools should preserve it if present. This should be a integer","title":"Info"},{"location":"fontlab.Info.html#info","text":"","title":"Info"},{"location":"fontlab.Info.html#ascender","text":"fontlab.Info.ascender Ascender value. This should be a integer or float","title":"ascender"},{"location":"fontlab.Info.html#capheight","text":"fontlab.Info.capHeight Cap height value. This should be a integer or float","title":"capHeight"},{"location":"fontlab.Info.html#copyright","text":"fontlab.Info.copyright Copyright statement. This should be a string","title":"copyright"},{"location":"fontlab.Info.html#descender","text":"fontlab.Info.descender Descender value. This should be a integer or float","title":"descender"},{"location":"fontlab.Info.html#familyname","text":"fontlab.Info.familyName Family name. This should be a string","title":"familyName"},{"location":"fontlab.Info.html#italicangle","text":"fontlab.Info.italicAngle Italic angle. This must be an angle in counter-clockwise degrees from the vertical. This should be a integer or float","title":"italicAngle"},{"location":"fontlab.Info.html#macintoshfondfamilyid","text":"fontlab.Info.macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the FOND resource. This should be a integer","title":"macintoshFONDFamilyID"},{"location":"fontlab.Info.html#macintoshfondname","text":"fontlab.Info.macintoshFONDName Font name for the FOND resource. This should be a string","title":"macintoshFONDName"},{"location":"fontlab.Info.html#note","text":"fontlab.Info.note Arbitrary note about the font. This should be a string","title":"note"},{"location":"fontlab.Info.html#opentypegasprangerecords","text":"fontlab.Info.openTypeGaspRangeRecords A list of gasp Range Records. These must be sorted in ascending order based on the rangeMaxPPEM value of the record. This should be a list","title":"openTypeGaspRangeRecords"},{"location":"fontlab.Info.html#opentypeheadcreated","text":"fontlab.Info.openTypeHeadCreated Creation date. Expressed as a string of the format \"YYYY/MM/DD HH:MM:SS\". \"YYYY/MM/DD\" is year/month/day. The month must be in the range 1-12 and the day must be in the range 1-end of month. \"HH:MM:SS\" is hour:minute:second. The hour must be in the range 0:23. The minute and second must each be in the range 0-59. This should be a string","title":"openTypeHeadCreated"},{"location":"fontlab.Info.html#opentypeheadflags","text":"fontlab.Info.openTypeHeadFlags A list of bit numbers indicating the flags. The bit numbers are listed in the OpenType head specification. Corresponds to the OpenType head table flags field. This should be a list","title":"openTypeHeadFlags"},{"location":"fontlab.Info.html#opentypeheadlowestrecppem","text":"fontlab.Info.openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field. This should be a non-negative integer","title":"openTypeHeadLowestRecPPEM"},{"location":"fontlab.Info.html#opentypehheaascender","text":"fontlab.Info.openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field. This should be a integer","title":"openTypeHheaAscender"},{"location":"fontlab.Info.html#opentypehheacaretoffset","text":"fontlab.Info.openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field. This should be a integer","title":"openTypeHheaCaretOffset"},{"location":"fontlab.Info.html#opentypehheacaretsloperise","text":"fontlab.Info.openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field. This should be a integer","title":"openTypeHheaCaretSlopeRise"},{"location":"fontlab.Info.html#opentypehheacaretsloperun","text":"fontlab.Info.openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field. This should be a integer","title":"openTypeHheaCaretSlopeRun"},{"location":"fontlab.Info.html#opentypehheadescender","text":"fontlab.Info.openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field. This should be a integer","title":"openTypeHheaDescender"},{"location":"fontlab.Info.html#opentypehhealinegap","text":"fontlab.Info.openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field. This should be a integer","title":"openTypeHheaLineGap"},{"location":"fontlab.Info.html#opentypenamecompatiblefullname","text":"fontlab.Info.openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18. This should be a string","title":"openTypeNameCompatibleFullName"},{"location":"fontlab.Info.html#opentypenamedescription","text":"fontlab.Info.openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10. This should be a string","title":"openTypeNameDescription"},{"location":"fontlab.Info.html#opentypenamedesigner","text":"fontlab.Info.openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9. This should be a string","title":"openTypeNameDesigner"},{"location":"fontlab.Info.html#opentypenamedesignerurl","text":"fontlab.Info.openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12. This should be a string","title":"openTypeNameDesignerURL"},{"location":"fontlab.Info.html#opentypenamelicense","text":"fontlab.Info.openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13. This should be a string","title":"openTypeNameLicense"},{"location":"fontlab.Info.html#opentypenamelicenseurl","text":"fontlab.Info.openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14. This should be a string","title":"openTypeNameLicenseURL"},{"location":"fontlab.Info.html#opentypenamemanufacturer","text":"fontlab.Info.openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8. This should be a string","title":"openTypeNameManufacturer"},{"location":"fontlab.Info.html#opentypenamemanufacturerurl","text":"fontlab.Info.openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11. This should be a string","title":"openTypeNameManufacturerURL"},{"location":"fontlab.Info.html#opentypenamepreferredfamilyname","text":"fontlab.Info.openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16. This should be a string","title":"openTypeNamePreferredFamilyName"},{"location":"fontlab.Info.html#opentypenamepreferredsubfamilyname","text":"fontlab.Info.openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17. This should be a string","title":"openTypeNamePreferredSubfamilyName"},{"location":"fontlab.Info.html#opentypenamerecords","text":"fontlab.Info.openTypeNameRecords A list of name records. This name record storage area is intended for records that require platform, encoding and or language localization. This should be a list","title":"openTypeNameRecords"},{"location":"fontlab.Info.html#opentypenamesampletext","text":"fontlab.Info.openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 19. This should be a string","title":"openTypeNameSampleText"},{"location":"fontlab.Info.html#opentypenameuniqueid","text":"fontlab.Info.openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3. This should be a string","title":"openTypeNameUniqueID"},{"location":"fontlab.Info.html#opentypenameversion","text":"fontlab.Info.openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5. This should be a string","title":"openTypeNameVersion"},{"location":"fontlab.Info.html#opentypenamewwsfamilyname","text":"fontlab.Info.openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21. This should be a string","title":"openTypeNameWWSFamilyName"},{"location":"fontlab.Info.html#opentypenamewwssubfamilyname","text":"fontlab.Info.openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22. This should be a string","title":"openTypeNameWWSSubfamilyName"},{"location":"fontlab.Info.html#opentypeos2codepageranges","text":"fontlab.Info.openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields. This should be a list","title":"openTypeOS2CodePageRanges"},{"location":"fontlab.Info.html#opentypeos2familyclass","text":"fontlab.Info.openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, must be in the range 0-14. The second number, representing the subclass, must be in the range 0-15. The numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table sFamilyClass field. This should be a list","title":"openTypeOS2FamilyClass"},{"location":"fontlab.Info.html#opentypeos2panose","text":"fontlab.Info.openTypeOS2Panose The list must contain 10 non-negative integers that represent the setting for each category in the Panose specification. The integers correspond with the option numbers in each of the Panose categories. This corresponds to the OpenType OS/2 table Panose field. This should be a list","title":"openTypeOS2Panose"},{"location":"fontlab.Info.html#opentypeos2selection","text":"fontlab.Info.openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table selection field. Note: Bits 0 (italic), 5 (bold) and 6 (regular) must not be set here. These bits should be taken from the generic styleMapStyle attribute. This should be a list","title":"openTypeOS2Selection"},{"location":"fontlab.Info.html#opentypeos2strikeoutposition","text":"fontlab.Info.openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field. This should be a integer","title":"openTypeOS2StrikeoutPosition"},{"location":"fontlab.Info.html#opentypeos2strikeoutsize","text":"fontlab.Info.openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field. This should be a integer","title":"openTypeOS2StrikeoutSize"},{"location":"fontlab.Info.html#opentypeos2subscriptxoffset","text":"fontlab.Info.openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field. This should be a integer","title":"openTypeOS2SubscriptXOffset"},{"location":"fontlab.Info.html#opentypeos2subscriptxsize","text":"fontlab.Info.openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field. This should be a integer","title":"openTypeOS2SubscriptXSize"},{"location":"fontlab.Info.html#opentypeos2subscriptyoffset","text":"fontlab.Info.openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field. This should be a integer","title":"openTypeOS2SubscriptYOffset"},{"location":"fontlab.Info.html#opentypeos2subscriptysize","text":"fontlab.Info.openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field. This should be a integer","title":"openTypeOS2SubscriptYSize"},{"location":"fontlab.Info.html#opentypeos2superscriptxoffset","text":"fontlab.Info.openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field. This should be a integer","title":"openTypeOS2SuperscriptXOffset"},{"location":"fontlab.Info.html#opentypeos2superscriptxsize","text":"fontlab.Info.openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field. This should be a integer","title":"openTypeOS2SuperscriptXSize"},{"location":"fontlab.Info.html#opentypeos2superscriptyoffset","text":"fontlab.Info.openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field. This should be a integer","title":"openTypeOS2SuperscriptYOffset"},{"location":"fontlab.Info.html#opentypeos2superscriptysize","text":"fontlab.Info.openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field. This should be a integer","title":"openTypeOS2SuperscriptYSize"},{"location":"fontlab.Info.html#opentypeos2type","text":"fontlab.Info.openTypeOS2Type A list of bit numbers indicating the embedding type. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table fsType field. This should be a list","title":"openTypeOS2Type"},{"location":"fontlab.Info.html#opentypeos2typoascender","text":"fontlab.Info.openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field. This should be a integer","title":"openTypeOS2TypoAscender"},{"location":"fontlab.Info.html#opentypeos2typodescender","text":"fontlab.Info.openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field. This should be a integer","title":"openTypeOS2TypoDescender"},{"location":"fontlab.Info.html#opentypeos2typolinegap","text":"fontlab.Info.openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field. This should be a integer","title":"openTypeOS2TypoLineGap"},{"location":"fontlab.Info.html#opentypeos2unicoderanges","text":"fontlab.Info.openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields. This should be a list","title":"openTypeOS2UnicodeRanges"},{"location":"fontlab.Info.html#opentypeos2vendorid","text":"fontlab.Info.openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field. This should be a string","title":"openTypeOS2VendorID"},{"location":"fontlab.Info.html#opentypeos2weightclass","text":"fontlab.Info.openTypeOS2WeightClass Weight class value. Must be a non-negative integer. Corresponds to the OpenType OS/2 table usWeightClass field. This should be a integer","title":"openTypeOS2WeightClass"},{"location":"fontlab.Info.html#opentypeos2widthclass","text":"fontlab.Info.openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field. This should be a integer","title":"openTypeOS2WidthClass"},{"location":"fontlab.Info.html#opentypeos2winascent","text":"fontlab.Info.openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field. This should be a non-negative integer","title":"openTypeOS2WinAscent"},{"location":"fontlab.Info.html#opentypeos2windescent","text":"fontlab.Info.openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field. This should be a non-negative integer","title":"openTypeOS2WinDescent"},{"location":"fontlab.Info.html#opentypevheacaretoffset","text":"fontlab.Info.openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field. This should be a integer","title":"openTypeVheaCaretOffset"},{"location":"fontlab.Info.html#opentypevheacaretsloperise","text":"fontlab.Info.openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field. This should be a integer","title":"openTypeVheaCaretSlopeRise"},{"location":"fontlab.Info.html#opentypevheacaretsloperun","text":"fontlab.Info.openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field. This should be a integer","title":"openTypeVheaCaretSlopeRun"},{"location":"fontlab.Info.html#opentypevheaverttypoascender","text":"fontlab.Info.openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field. This should be a integer","title":"openTypeVheaVertTypoAscender"},{"location":"fontlab.Info.html#opentypevheaverttypodescender","text":"fontlab.Info.openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field. This should be a integer","title":"openTypeVheaVertTypoDescender"},{"location":"fontlab.Info.html#opentypevheaverttypolinegap","text":"fontlab.Info.openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field. This should be a integer","title":"openTypeVheaVertTypoLineGap"},{"location":"fontlab.Info.html#panose","text":"fontlab.Info.panose PANOSE identification. Should be a string containing 10 space-separated numbers","title":"panose"},{"location":"fontlab.Info.html#postscriptbluefuzz","text":"fontlab.Info.postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field. This should be a integer or float","title":"postscriptBlueFuzz"},{"location":"fontlab.Info.html#postscriptbluescale","text":"fontlab.Info.postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field. This should be a float","title":"postscriptBlueScale"},{"location":"fontlab.Info.html#postscriptblueshift","text":"fontlab.Info.postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field. This should be a integer or float","title":"postscriptBlueShift"},{"location":"fontlab.Info.html#postscriptbluevalues","text":"fontlab.Info.postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list","title":"postscriptBlueValues"},{"location":"fontlab.Info.html#postscriptdefaultcharacter","text":"fontlab.Info.postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files. This should be a string","title":"postscriptDefaultCharacter"},{"location":"fontlab.Info.html#postscriptdefaultwidthx","text":"fontlab.Info.postscriptDefaultWidthX Default width for glyphs. This should be a integer or float","title":"postscriptDefaultWidthX"},{"location":"fontlab.Info.html#postscriptfamilyblues","text":"fontlab.Info.postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list","title":"postscriptFamilyBlues"},{"location":"fontlab.Info.html#postscriptfamilyotherblues","text":"fontlab.Info.postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list","title":"postscriptFamilyOtherBlues"},{"location":"fontlab.Info.html#postscriptfontname","text":"fontlab.Info.postscriptFontName Name to be used for the FontName field in Type 1/CFF table. This should be a string","title":"postscriptFontName"},{"location":"fontlab.Info.html#postscriptforcebold","text":"fontlab.Info.postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set. This should be a boolean","title":"postscriptForceBold"},{"location":"fontlab.Info.html#postscriptfullname","text":"fontlab.Info.postscriptFullName Name to be used for the FullName field in Type 1/CFF table. This should be a string","title":"postscriptFullName"},{"location":"fontlab.Info.html#postscriptisfixedpitch","text":"fontlab.Info.postscriptIsFixedPitch Indicates if the font is monospaced. An authoring tool could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field This should be a boolean","title":"postscriptIsFixedPitch"},{"location":"fontlab.Info.html#postscriptnominalwidthx","text":"fontlab.Info.postscriptNominalWidthX Nominal width for glyphs. This should be a integer or float","title":"postscriptNominalWidthX"},{"location":"fontlab.Info.html#postscriptotherblues","text":"fontlab.Info.postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list","title":"postscriptOtherBlues"},{"location":"fontlab.Info.html#postscriptstemsnaph","text":"fontlab.Info.postscriptStemSnapH List of horizontal stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field. This should be a list","title":"postscriptStemSnapH"},{"location":"fontlab.Info.html#postscriptstemsnapv","text":"fontlab.Info.postscriptStemSnapV List of vertical stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field. This should be a list","title":"postscriptStemSnapV"},{"location":"fontlab.Info.html#postscriptunderlineposition","text":"fontlab.Info.postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field. This should be a integer or float","title":"postscriptUnderlinePosition"},{"location":"fontlab.Info.html#postscriptunderlinethickness","text":"fontlab.Info.postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field. This should be a integer or float","title":"postscriptUnderlineThickness"},{"location":"fontlab.Info.html#postscriptuniqueid","text":"fontlab.Info.postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification. This should be a integer","title":"postscriptUniqueID"},{"location":"fontlab.Info.html#postscriptweightname","text":"fontlab.Info.postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value. This should be a string","title":"postscriptWeightName"},{"location":"fontlab.Info.html#postscriptwindowscharacterset","text":"fontlab.Info.postscriptWindowsCharacterSet The Windows character set. The values are defined below. This should be a integer","title":"postscriptWindowsCharacterSet"},{"location":"fontlab.Info.html#stylemapfamilyname","text":"fontlab.Info.styleMapFamilyName Family name used for bold, italic and bold italic style mapping. This should be a string","title":"styleMapFamilyName"},{"location":"fontlab.Info.html#stylemapstylename","text":"fontlab.Info.styleMapStyleName Style map style. The possible values are regular, italic, bold and bold italic. These are case sensitive. This should be a string","title":"styleMapStyleName"},{"location":"fontlab.Info.html#stylename","text":"fontlab.Info.styleName Style name. This should be a string","title":"styleName"},{"location":"fontlab.Info.html#trademark","text":"fontlab.Info.trademark Trademark statement. This should be a string","title":"trademark"},{"location":"fontlab.Info.html#unitsperem","text":"fontlab.Info.unitsPerEm Units per em. This should be a non-negative integer or float","title":"unitsPerEm"},{"location":"fontlab.Info.html#versionmajor","text":"fontlab.Info.versionMajor Major version. This should be a integer","title":"versionMajor"},{"location":"fontlab.Info.html#versionminor","text":"fontlab.Info.versionMinor Minor version. This should be a non-negative integer","title":"versionMinor"},{"location":"fontlab.Info.html#xheight","text":"fontlab.Info.xHeight x-height value. This should be a integer or float","title":"xHeight"},{"location":"fontlab.Info.html#year","text":"fontlab.Info.year The year the font was created. This attribute is deprecated as of version 2. It's presence should not be relied upon by authoring tools. However, it may occur in a font's info so authoring tools should preserve it if present. This should be a integer","title":"year"},{"location":"fontlab.Interval.html","text":"Interval fontlab.Interval = class Interval ( object ) Interval representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value isEmpty (...) bool isEmpty () middle (...) double middle () reversed (...) Interval reversed () setT0T1 (...) void setT0T1 (double t0, double t1) toAbsolute (...) double toAbsolute (double v) toInterval (...) double toInterval (double absv) Descriptors d double d key uint key t0 double t0 t1 double t1 Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T d fontlab.Interval.d double d isEmpty fontlab.Interval.isEmpty = isEmpty (...) bool isEmpty() key fontlab.Interval.key uint key middle fontlab.Interval.middle = middle (...) double middle() reversed fontlab.Interval.reversed = reversed (...) Interval reversed() setT0T1 fontlab.Interval.setT0T1 = setT0T1 (...) void setT0T1(double t0, double t1) t0 fontlab.Interval.t0 double t0 t1 fontlab.Interval.t1 double t1 toAbsolute fontlab.Interval.toAbsolute = toAbsolute (...) double toAbsolute(double v) toInterval fontlab.Interval.toInterval = toInterval (...) double toInterval(double absv)","title":"Interval"},{"location":"fontlab.Interval.html#interval","text":"","title":"Interval"},{"location":"fontlab.Interval.html#d","text":"fontlab.Interval.d double d","title":"d"},{"location":"fontlab.Interval.html#isempty","text":"fontlab.Interval.isEmpty = isEmpty (...) bool isEmpty()","title":"isEmpty"},{"location":"fontlab.Interval.html#key","text":"fontlab.Interval.key uint key","title":"key"},{"location":"fontlab.Interval.html#middle","text":"fontlab.Interval.middle = middle (...) double middle()","title":"middle"},{"location":"fontlab.Interval.html#reversed","text":"fontlab.Interval.reversed = reversed (...) Interval reversed()","title":"reversed"},{"location":"fontlab.Interval.html#sett0t1","text":"fontlab.Interval.setT0T1 = setT0T1 (...) void setT0T1(double t0, double t1)","title":"setT0T1"},{"location":"fontlab.Interval.html#t0","text":"fontlab.Interval.t0 double t0","title":"t0"},{"location":"fontlab.Interval.html#t1","text":"fontlab.Interval.t1 double t1","title":"t1"},{"location":"fontlab.Interval.html#toabsolute","text":"fontlab.Interval.toAbsolute = toAbsolute (...) double toAbsolute(double v)","title":"toAbsolute"},{"location":"fontlab.Interval.html#tointerval","text":"fontlab.Interval.toInterval = toInterval (...) double toInterval(double absv)","title":"toInterval"},{"location":"fontlab.LocationValue.html","text":"LocationValue fontlab.LocationValue = class LocationValue ( object ) LocationValue representation Constructors: LocationValue(flLocation) LocationValue(double) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"LocationValue"},{"location":"fontlab.LocationValue.html#locationvalue","text":"","title":"LocationValue"},{"location":"fontlab.PaintBrush.html","text":"PaintBrush fontlab.PaintBrush = class PaintBrush ( object ) PaintBrush representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value assign (...) void assign (PaintBrush) init (...) void init () render (...) void render (double scale) toString (...) QString toString () Descriptors angle double flatness double shape PaintBrushShape size double Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T angle fontlab.PaintBrush.angle double assign fontlab.PaintBrush.assign = assign (...) void assign(PaintBrush) flatness fontlab.PaintBrush.flatness double init fontlab.PaintBrush.init = init (...) void init() render fontlab.PaintBrush.render = render (...) void render(double scale) shape fontlab.PaintBrush.shape PaintBrushShape size fontlab.PaintBrush.size double toString fontlab.PaintBrush.toString = toString (...) QString toString()","title":"PaintBrush"},{"location":"fontlab.PaintBrush.html#paintbrush","text":"","title":"PaintBrush"},{"location":"fontlab.PaintBrush.html#angle","text":"fontlab.PaintBrush.angle double","title":"angle"},{"location":"fontlab.PaintBrush.html#assign","text":"fontlab.PaintBrush.assign = assign (...) void assign(PaintBrush)","title":"assign"},{"location":"fontlab.PaintBrush.html#flatness","text":"fontlab.PaintBrush.flatness double","title":"flatness"},{"location":"fontlab.PaintBrush.html#init","text":"fontlab.PaintBrush.init = init (...) void init()","title":"init"},{"location":"fontlab.PaintBrush.html#render","text":"fontlab.PaintBrush.render = render (...) void render(double scale)","title":"render"},{"location":"fontlab.PaintBrush.html#shape","text":"fontlab.PaintBrush.shape PaintBrushShape","title":"shape"},{"location":"fontlab.PaintBrush.html#size","text":"fontlab.PaintBrush.size double","title":"size"},{"location":"fontlab.PaintBrush.html#tostring","text":"fontlab.PaintBrush.toString = toString (...) QString toString()","title":"toString"},{"location":"fontlab.PaintBrushShape.html","text":"PaintBrushShape fontlab.PaintBrushShape = class PaintBrushShape ( object ) Data wrapper Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors cap0 cap1 cap_length0 cap_length1 data Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontlab.PaintBrushShape.asDict = asDict (...) represent object as dictionary asTuple fontlab.PaintBrushShape.asTuple = asTuple (...) represent object as tuple","title":"PaintBrushShape"},{"location":"fontlab.PaintBrushShape.html#paintbrushshape","text":"","title":"PaintBrushShape"},{"location":"fontlab.PaintBrushShape.html#asdict","text":"fontlab.PaintBrushShape.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontlab.PaintBrushShape.html#astuple","text":"fontlab.PaintBrushShape.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontlab.SmartCornerParameters.html","text":"SmartCornerParameters fontlab.SmartCornerParameters = class SmartCornerParameters ( object ) Data wrapper Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors curvature Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontlab.SmartCornerParameters.asDict = asDict (...) represent object as dictionary asTuple fontlab.SmartCornerParameters.asTuple = asTuple (...) represent object as tuple","title":"SmartCornerParameters"},{"location":"fontlab.SmartCornerParameters.html#smartcornerparameters","text":"","title":"SmartCornerParameters"},{"location":"fontlab.SmartCornerParameters.html#asdict","text":"fontlab.SmartCornerParameters.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontlab.SmartCornerParameters.html#astuple","text":"fontlab.SmartCornerParameters.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontlab.TransformFrame.html","text":"TransformFrame fontlab.TransformFrame = class TransformFrame ( object ) TransformFrame representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value boundingRect (...) QRectF boundingRect () bw (...) double bw () doTransformation (...) void doTransformation (int code, QPointF value) flipHorizontal (...) void flipHorizontal () flipVertical (...) void flipVertical () getControlPos (...) QPointF getControlPos (TransformFrameControls) getMapped (...) TransformFrame getMapped (QTransform t) getTransform (...) QTransform getTransform () horizontalReflection (...) void horizontalReflection () initCenter (...) void initCenter () lh (...) double lh () mb (...) QPointF mb () mh (...) double mh () ml (...) QPointF ml () mr (...) QPointF mr () mt (...) QPointF mt () mw (...) double mw () polygon (...) QPolygonF polygon () prepareTransformations (...) void prepareTransformations ([TransformFrameControls control, QPointF p,] double scale) rh (...) double rh () rotate (...) void rotate (double) rotate180 (...) void rotate180 () scale (...) void scale (QPointF s) setControlPos (...) void setControlPos ([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed) setProjectionPos (...) void setProjectionPos ([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed) slant (...) void slant (double angle) translate (...) void translate (QPointF) tw (...) double tw () verticalReflection (...) void verticalReflection () Static methods expandPolygon (...) QPolygonF expandPolygon (QPolygonF polygon) Descriptors bl QPointF br QPointF cr QPointF tl QPointF tr QPointF Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T bl fontlab.TransformFrame.bl QPointF boundingRect fontlab.TransformFrame.boundingRect = boundingRect (...) QRectF boundingRect() br fontlab.TransformFrame.br QPointF bw fontlab.TransformFrame.bw = bw (...) double bw() cr fontlab.TransformFrame.cr QPointF doTransformation fontlab.TransformFrame.doTransformation = doTransformation (...) void doTransformation(int code, QPointF value) expandPolygon fontlab.TransformFrame.expandPolygon = expandPolygon (...) QPolygonF expandPolygon(QPolygonF polygon) flipHorizontal fontlab.TransformFrame.flipHorizontal = flipHorizontal (...) void flipHorizontal() flipVertical fontlab.TransformFrame.flipVertical = flipVertical (...) void flipVertical() getControlPos fontlab.TransformFrame.getControlPos = getControlPos (...) QPointF getControlPos(TransformFrameControls) getMapped fontlab.TransformFrame.getMapped = getMapped (...) TransformFrame getMapped(QTransform t) getTransform fontlab.TransformFrame.getTransform = getTransform (...) QTransform getTransform() horizontalReflection fontlab.TransformFrame.horizontalReflection = horizontalReflection (...) void horizontalReflection() initCenter fontlab.TransformFrame.initCenter = initCenter (...) void initCenter() lh fontlab.TransformFrame.lh = lh (...) double lh() mb fontlab.TransformFrame.mb = mb (...) QPointF mb() mh fontlab.TransformFrame.mh = mh (...) double mh() ml fontlab.TransformFrame.ml = ml (...) QPointF ml() mr fontlab.TransformFrame.mr = mr (...) QPointF mr() mt fontlab.TransformFrame.mt = mt (...) QPointF mt() mw fontlab.TransformFrame.mw = mw (...) double mw() polygon fontlab.TransformFrame.polygon = polygon (...) QPolygonF polygon() prepareTransformations fontlab.TransformFrame.prepareTransformations = prepareTransformations (...) void prepareTransformations([TransformFrameControls control, QPointF p,] double scale) rh fontlab.TransformFrame.rh = rh (...) double rh() rotate fontlab.TransformFrame.rotate = rotate (...) void rotate(double) rotate180 fontlab.TransformFrame.rotate180 = rotate180 (...) void rotate180() scale fontlab.TransformFrame.scale = scale (...) void scale(QPointF s) setControlPos fontlab.TransformFrame.setControlPos = setControlPos (...) void setControlPos([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed) setProjectionPos fontlab.TransformFrame.setProjectionPos = setProjectionPos (...) void setProjectionPos([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed) slant fontlab.TransformFrame.slant = slant (...) void slant(double angle) tl fontlab.TransformFrame.tl QPointF tr fontlab.TransformFrame.tr QPointF translate fontlab.TransformFrame.translate = translate (...) void translate(QPointF) tw fontlab.TransformFrame.tw = tw (...) double tw() verticalReflection fontlab.TransformFrame.verticalReflection = verticalReflection (...) void verticalReflection()","title":"TransformFrame"},{"location":"fontlab.TransformFrame.html#transformframe","text":"","title":"TransformFrame"},{"location":"fontlab.TransformFrame.html#bl","text":"fontlab.TransformFrame.bl QPointF","title":"bl"},{"location":"fontlab.TransformFrame.html#boundingrect","text":"fontlab.TransformFrame.boundingRect = boundingRect (...) QRectF boundingRect()","title":"boundingRect"},{"location":"fontlab.TransformFrame.html#br","text":"fontlab.TransformFrame.br QPointF","title":"br"},{"location":"fontlab.TransformFrame.html#bw","text":"fontlab.TransformFrame.bw = bw (...) double bw()","title":"bw"},{"location":"fontlab.TransformFrame.html#cr","text":"fontlab.TransformFrame.cr QPointF","title":"cr"},{"location":"fontlab.TransformFrame.html#dotransformation","text":"fontlab.TransformFrame.doTransformation = doTransformation (...) void doTransformation(int code, QPointF value)","title":"doTransformation"},{"location":"fontlab.TransformFrame.html#expandpolygon","text":"fontlab.TransformFrame.expandPolygon = expandPolygon (...) QPolygonF expandPolygon(QPolygonF polygon)","title":"expandPolygon"},{"location":"fontlab.TransformFrame.html#fliphorizontal","text":"fontlab.TransformFrame.flipHorizontal = flipHorizontal (...) void flipHorizontal()","title":"flipHorizontal"},{"location":"fontlab.TransformFrame.html#flipvertical","text":"fontlab.TransformFrame.flipVertical = flipVertical (...) void flipVertical()","title":"flipVertical"},{"location":"fontlab.TransformFrame.html#getcontrolpos","text":"fontlab.TransformFrame.getControlPos = getControlPos (...) QPointF getControlPos(TransformFrameControls)","title":"getControlPos"},{"location":"fontlab.TransformFrame.html#getmapped","text":"fontlab.TransformFrame.getMapped = getMapped (...) TransformFrame getMapped(QTransform t)","title":"getMapped"},{"location":"fontlab.TransformFrame.html#gettransform","text":"fontlab.TransformFrame.getTransform = getTransform (...) QTransform getTransform()","title":"getTransform"},{"location":"fontlab.TransformFrame.html#horizontalreflection","text":"fontlab.TransformFrame.horizontalReflection = horizontalReflection (...) void horizontalReflection()","title":"horizontalReflection"},{"location":"fontlab.TransformFrame.html#initcenter","text":"fontlab.TransformFrame.initCenter = initCenter (...) void initCenter()","title":"initCenter"},{"location":"fontlab.TransformFrame.html#lh","text":"fontlab.TransformFrame.lh = lh (...) double lh()","title":"lh"},{"location":"fontlab.TransformFrame.html#mb","text":"fontlab.TransformFrame.mb = mb (...) QPointF mb()","title":"mb"},{"location":"fontlab.TransformFrame.html#mh","text":"fontlab.TransformFrame.mh = mh (...) double mh()","title":"mh"},{"location":"fontlab.TransformFrame.html#ml","text":"fontlab.TransformFrame.ml = ml (...) QPointF ml()","title":"ml"},{"location":"fontlab.TransformFrame.html#mr","text":"fontlab.TransformFrame.mr = mr (...) QPointF mr()","title":"mr"},{"location":"fontlab.TransformFrame.html#mt","text":"fontlab.TransformFrame.mt = mt (...) QPointF mt()","title":"mt"},{"location":"fontlab.TransformFrame.html#mw","text":"fontlab.TransformFrame.mw = mw (...) double mw()","title":"mw"},{"location":"fontlab.TransformFrame.html#polygon","text":"fontlab.TransformFrame.polygon = polygon (...) QPolygonF polygon()","title":"polygon"},{"location":"fontlab.TransformFrame.html#preparetransformations","text":"fontlab.TransformFrame.prepareTransformations = prepareTransformations (...) void prepareTransformations([TransformFrameControls control, QPointF p,] double scale)","title":"prepareTransformations"},{"location":"fontlab.TransformFrame.html#rh","text":"fontlab.TransformFrame.rh = rh (...) double rh()","title":"rh"},{"location":"fontlab.TransformFrame.html#rotate","text":"fontlab.TransformFrame.rotate = rotate (...) void rotate(double)","title":"rotate"},{"location":"fontlab.TransformFrame.html#rotate180","text":"fontlab.TransformFrame.rotate180 = rotate180 (...) void rotate180()","title":"rotate180"},{"location":"fontlab.TransformFrame.html#scale","text":"fontlab.TransformFrame.scale = scale (...) void scale(QPointF s)","title":"scale"},{"location":"fontlab.TransformFrame.html#setcontrolpos","text":"fontlab.TransformFrame.setControlPos = setControlPos (...) void setControlPos([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed)","title":"setControlPos"},{"location":"fontlab.TransformFrame.html#setprojectionpos","text":"fontlab.TransformFrame.setProjectionPos = setProjectionPos (...) void setProjectionPos([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed)","title":"setProjectionPos"},{"location":"fontlab.TransformFrame.html#slant","text":"fontlab.TransformFrame.slant = slant (...) void slant(double angle)","title":"slant"},{"location":"fontlab.TransformFrame.html#tl","text":"fontlab.TransformFrame.tl QPointF","title":"tl"},{"location":"fontlab.TransformFrame.html#tr","text":"fontlab.TransformFrame.tr QPointF","title":"tr"},{"location":"fontlab.TransformFrame.html#translate","text":"fontlab.TransformFrame.translate = translate (...) void translate(QPointF)","title":"translate"},{"location":"fontlab.TransformFrame.html#tw","text":"fontlab.TransformFrame.tw = tw (...) double tw()","title":"tw"},{"location":"fontlab.TransformFrame.html#verticalreflection","text":"fontlab.TransformFrame.verticalReflection = verticalReflection (...) void verticalReflection()","title":"verticalReflection"},{"location":"fontlab.YPanelManager.html","text":"YPanelManager fontlab.YPanelManager = class YPanelManager (PythonQt.PythonQtInstanceWrapper) Method resolution order: YPanelManager PythonQt.PythonQtInstanceWrapper __builtin__.object Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes blockSignals = unbound qt slot blockSignals of YPanelManager type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of YPanelManager type X. childEvent (a, b) children = unbound qt slot children of YPanelManager type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object connect = unbound qt slot connect of YPanelManager type X. connect (a, b, c, d, e) -> bool customEvent = unbound qt slot py_q_customEvent of YPanelManager type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of YPanelManager type X. deleteLater () desktopClientRectChanged = unbound qt signal desktopClientRectChanged of YPanelManager type destroyed = unbound qt signal destroyed of YPanelManager type disconnect = unbound qt slot disconnect of YPanelManager type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelManager type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of YPanelManager type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelManager type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of YPanelManager type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of YPanelManager type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of YPanelManager type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of YPanelManager type X. findChildren (a, b, c) -> tuple help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name installEventFilter = unbound qt slot installEventFilter of YPanelManager type X. installEventFilter (a, b) isSignalConnected = unbound qt slot isSignalConnected of YPanelManager type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of YPanelManager type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of YPanelManager type X. isWindowType (a) -> bool killTimer = unbound qt slot killTimer of YPanelManager type X. killTimer (a, b) metaObject = unbound qt slot metaObject of YPanelManager type X. metaObject (a) -> PythonQt.QtCore.QMetaObject moveToThread = unbound qt slot moveToThread of YPanelManager type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of YPanelManager type panelClosed = unbound qt signal panelClosed of YPanelManager type parent = unbound qt slot parent of YPanelManager type X. parent (a) -> PythonQt.private.QObject property = unbound qt slot property of YPanelManager type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of YPanelManager type X. removeEventFilter (a, b) sender = unbound qt slot sender of YPanelManager type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of YPanelManager type X. senderSignalIndex (a) -> int setObjectName = unbound qt slot setObjectName of YPanelManager type X. setObjectName (a, b) setParent = unbound qt slot setParent of YPanelManager type X. setParent (a, b) setProperty = unbound qt slot setProperty of YPanelManager type X. setProperty (a, b, c) -> bool showContextMenu = unbound qt signal showContextMenu of YPanelManager type signalsBlocked = unbound qt slot signalsBlocked of YPanelManager type X. signalsBlocked (a) -> bool startTimer = unbound qt slot startTimer of YPanelManager type X. startTimer (a, b, c) -> int thread = unbound qt slot thread of YPanelManager type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of YPanelManager type X. timerEvent (a, b) toolbarClosed = unbound qt signal toolbarClosed of YPanelManager type toolbarOpened = unbound qt signal toolbarOpened of YPanelManager type tr = unbound qt slot tr of YPanelManager type X. tr (a, b, c, d) -> str Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __init__ (...) x. __init__ (...) initializes x; see help (type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T blockSignals fontlab.YPanelManager.blockSignals = unbound qt slot blockSignals of YPanelManager type childEvent fontlab.YPanelManager.childEvent = unbound qt slot py_q_childEvent of YPanelManager type children fontlab.YPanelManager.children = unbound qt slot children of YPanelManager type className fontlab.YPanelManager.className = className (...) Return the classname of the object connect fontlab.YPanelManager.connect = unbound qt slot connect of YPanelManager type customEvent fontlab.YPanelManager.customEvent = unbound qt slot py_q_customEvent of YPanelManager type delete fontlab.YPanelManager.delete = delete (...) Deletes the given C++ object deleteLater fontlab.YPanelManager.deleteLater = unbound qt slot deleteLater of YPanelManager type disconnect fontlab.YPanelManager.disconnect = unbound qt slot disconnect of YPanelManager type dumpObjectInfo fontlab.YPanelManager.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelManager type dumpObjectTree fontlab.YPanelManager.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelManager type dynamicPropertyNames fontlab.YPanelManager.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelManager type event fontlab.YPanelManager.event = unbound qt slot py_q_event of YPanelManager type eventFilter fontlab.YPanelManager.eventFilter = unbound qt slot py_q_eventFilter of YPanelManager type findChild fontlab.YPanelManager.findChild = unbound qt slot findChild of YPanelManager type findChildren fontlab.YPanelManager.findChildren = unbound qt slot findChildren of YPanelManager type help fontlab.YPanelManager.help = help (...) Shows the help of available methods for this class inherits fontlab.YPanelManager.inherits = inherits (...) Returns if the class inherits or is of given type name installEventFilter fontlab.YPanelManager.installEventFilter = unbound qt slot installEventFilter of YPanelManager type isSignalConnected fontlab.YPanelManager.isSignalConnected = unbound qt slot isSignalConnected of YPanelManager type isWidgetType fontlab.YPanelManager.isWidgetType = unbound qt slot isWidgetType of YPanelManager type isWindowType fontlab.YPanelManager.isWindowType = unbound qt slot isWindowType of YPanelManager type killTimer fontlab.YPanelManager.killTimer = unbound qt slot killTimer of YPanelManager type metaObject fontlab.YPanelManager.metaObject = unbound qt slot metaObject of YPanelManager type moveToThread fontlab.YPanelManager.moveToThread = unbound qt slot moveToThread of YPanelManager type parent fontlab.YPanelManager.parent = unbound qt slot parent of YPanelManager type property fontlab.YPanelManager.property = unbound qt slot property of YPanelManager type removeEventFilter fontlab.YPanelManager.removeEventFilter = unbound qt slot removeEventFilter of YPanelManager type sender fontlab.YPanelManager.sender = unbound qt slot sender of YPanelManager type senderSignalIndex fontlab.YPanelManager.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelManager type setObjectName fontlab.YPanelManager.setObjectName = unbound qt slot setObjectName of YPanelManager type setParent fontlab.YPanelManager.setParent = unbound qt slot setParent of YPanelManager type setProperty fontlab.YPanelManager.setProperty = unbound qt slot setProperty of YPanelManager type signalsBlocked fontlab.YPanelManager.signalsBlocked = unbound qt slot signalsBlocked of YPanelManager type startTimer fontlab.YPanelManager.startTimer = unbound qt slot startTimer of YPanelManager type thread fontlab.YPanelManager.thread = unbound qt slot thread of YPanelManager type timerEvent fontlab.YPanelManager.timerEvent = unbound qt slot py_q_timerEvent of YPanelManager type tr fontlab.YPanelManager.tr = unbound qt slot tr of YPanelManager type","title":"YPanelManager"},{"location":"fontlab.YPanelManager.html#ypanelmanager","text":"","title":"YPanelManager"},{"location":"fontlab.YPanelManager.html#blocksignals","text":"fontlab.YPanelManager.blockSignals = unbound qt slot blockSignals of YPanelManager type","title":"blockSignals"},{"location":"fontlab.YPanelManager.html#childevent","text":"fontlab.YPanelManager.childEvent = unbound qt slot py_q_childEvent of YPanelManager type","title":"childEvent"},{"location":"fontlab.YPanelManager.html#children","text":"fontlab.YPanelManager.children = unbound qt slot children of YPanelManager type","title":"children"},{"location":"fontlab.YPanelManager.html#classname","text":"fontlab.YPanelManager.className = className (...) Return the classname of the object","title":"className"},{"location":"fontlab.YPanelManager.html#connect","text":"fontlab.YPanelManager.connect = unbound qt slot connect of YPanelManager type","title":"connect"},{"location":"fontlab.YPanelManager.html#customevent","text":"fontlab.YPanelManager.customEvent = unbound qt slot py_q_customEvent of YPanelManager type","title":"customEvent"},{"location":"fontlab.YPanelManager.html#delete","text":"fontlab.YPanelManager.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"fontlab.YPanelManager.html#deletelater","text":"fontlab.YPanelManager.deleteLater = unbound qt slot deleteLater of YPanelManager type","title":"deleteLater"},{"location":"fontlab.YPanelManager.html#disconnect","text":"fontlab.YPanelManager.disconnect = unbound qt slot disconnect of YPanelManager type","title":"disconnect"},{"location":"fontlab.YPanelManager.html#dumpobjectinfo","text":"fontlab.YPanelManager.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelManager type","title":"dumpObjectInfo"},{"location":"fontlab.YPanelManager.html#dumpobjecttree","text":"fontlab.YPanelManager.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelManager type","title":"dumpObjectTree"},{"location":"fontlab.YPanelManager.html#dynamicpropertynames","text":"fontlab.YPanelManager.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelManager type","title":"dynamicPropertyNames"},{"location":"fontlab.YPanelManager.html#event","text":"fontlab.YPanelManager.event = unbound qt slot py_q_event of YPanelManager type","title":"event"},{"location":"fontlab.YPanelManager.html#eventfilter","text":"fontlab.YPanelManager.eventFilter = unbound qt slot py_q_eventFilter of YPanelManager type","title":"eventFilter"},{"location":"fontlab.YPanelManager.html#findchild","text":"fontlab.YPanelManager.findChild = unbound qt slot findChild of YPanelManager type","title":"findChild"},{"location":"fontlab.YPanelManager.html#findchildren","text":"fontlab.YPanelManager.findChildren = unbound qt slot findChildren of YPanelManager type","title":"findChildren"},{"location":"fontlab.YPanelManager.html#help","text":"fontlab.YPanelManager.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"fontlab.YPanelManager.html#inherits","text":"fontlab.YPanelManager.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"fontlab.YPanelManager.html#installeventfilter","text":"fontlab.YPanelManager.installEventFilter = unbound qt slot installEventFilter of YPanelManager type","title":"installEventFilter"},{"location":"fontlab.YPanelManager.html#issignalconnected","text":"fontlab.YPanelManager.isSignalConnected = unbound qt slot isSignalConnected of YPanelManager type","title":"isSignalConnected"},{"location":"fontlab.YPanelManager.html#iswidgettype","text":"fontlab.YPanelManager.isWidgetType = unbound qt slot isWidgetType of YPanelManager type","title":"isWidgetType"},{"location":"fontlab.YPanelManager.html#iswindowtype","text":"fontlab.YPanelManager.isWindowType = unbound qt slot isWindowType of YPanelManager type","title":"isWindowType"},{"location":"fontlab.YPanelManager.html#killtimer","text":"fontlab.YPanelManager.killTimer = unbound qt slot killTimer of YPanelManager type","title":"killTimer"},{"location":"fontlab.YPanelManager.html#metaobject","text":"fontlab.YPanelManager.metaObject = unbound qt slot metaObject of YPanelManager type","title":"metaObject"},{"location":"fontlab.YPanelManager.html#movetothread","text":"fontlab.YPanelManager.moveToThread = unbound qt slot moveToThread of YPanelManager type","title":"moveToThread"},{"location":"fontlab.YPanelManager.html#parent","text":"fontlab.YPanelManager.parent = unbound qt slot parent of YPanelManager type","title":"parent"},{"location":"fontlab.YPanelManager.html#property","text":"fontlab.YPanelManager.property = unbound qt slot property of YPanelManager type","title":"property"},{"location":"fontlab.YPanelManager.html#removeeventfilter","text":"fontlab.YPanelManager.removeEventFilter = unbound qt slot removeEventFilter of YPanelManager type","title":"removeEventFilter"},{"location":"fontlab.YPanelManager.html#sender","text":"fontlab.YPanelManager.sender = unbound qt slot sender of YPanelManager type","title":"sender"},{"location":"fontlab.YPanelManager.html#sendersignalindex","text":"fontlab.YPanelManager.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelManager type","title":"senderSignalIndex"},{"location":"fontlab.YPanelManager.html#setobjectname","text":"fontlab.YPanelManager.setObjectName = unbound qt slot setObjectName of YPanelManager type","title":"setObjectName"},{"location":"fontlab.YPanelManager.html#setparent","text":"fontlab.YPanelManager.setParent = unbound qt slot setParent of YPanelManager type","title":"setParent"},{"location":"fontlab.YPanelManager.html#setproperty","text":"fontlab.YPanelManager.setProperty = unbound qt slot setProperty of YPanelManager type","title":"setProperty"},{"location":"fontlab.YPanelManager.html#signalsblocked","text":"fontlab.YPanelManager.signalsBlocked = unbound qt slot signalsBlocked of YPanelManager type","title":"signalsBlocked"},{"location":"fontlab.YPanelManager.html#starttimer","text":"fontlab.YPanelManager.startTimer = unbound qt slot startTimer of YPanelManager type","title":"startTimer"},{"location":"fontlab.YPanelManager.html#thread","text":"fontlab.YPanelManager.thread = unbound qt slot thread of YPanelManager type","title":"thread"},{"location":"fontlab.YPanelManager.html#timerevent","text":"fontlab.YPanelManager.timerEvent = unbound qt slot py_q_timerEvent of YPanelManager type","title":"timerEvent"},{"location":"fontlab.YPanelManager.html#tr","text":"fontlab.YPanelManager.tr = unbound qt slot tr of YPanelManager type","title":"tr"},{"location":"fontlab.YPanelWidget.html","text":"YPanelWidget fontlab.YPanelWidget = class YPanelWidget (PythonQt.PythonQtInstanceWrapper) Method resolution order: YPanelWidget PythonQt.PythonQtInstanceWrapper __builtin__.object Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes DrawChildren = 2 DrawWindowBackground = 1 IgnoreMask = 4 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of YPanelWidget type X. actionEvent (a, b) actions = unbound qt slot actions of YPanelWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of YPanelWidget type X. activateWindow (a) addAction = unbound qt slot addAction of YPanelWidget type X. addAction (a, b) addActions = unbound qt slot addActions of YPanelWidget type X. addActions (a, b) adjustSize = unbound qt slot adjustSize of YPanelWidget type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of YPanelWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of YPanelWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of YPanelWidget type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of YPanelWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of YPanelWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of YPanelWidget type X. childEvent (a, b) children = unbound qt slot children of YPanelWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clearFocus = unbound qt slot clearFocus of YPanelWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of YPanelWidget type X. clearMask (a) close = unbound qt slot close of YPanelWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of YPanelWidget type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of YPanelWidget type X. colorCount (a) -> int connect = unbound qt slot connect of YPanelWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of YPanelWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of YPanelWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of YPanelWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None createWinId = unbound qt slot createWinId of YPanelWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of YPanelWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of YPanelWidget type customEvent = unbound qt slot py_q_customEvent of YPanelWidget type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of YPanelWidget type X. deleteLater () depth = unbound qt slot depth of YPanelWidget type X. depth (a) -> int destroy = unbound qt slot destroy of YPanelWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of YPanelWidget type devType = unbound qt slot py_q_devType of YPanelWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of YPanelWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of YPanelWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of YPanelWidget type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of YPanelWidget type X. disconnect (a, b, c, d) -> bool dragEnterEvent = unbound qt slot py_q_dragEnterEvent of YPanelWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of YPanelWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of YPanelWidget type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of YPanelWidget type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of YPanelWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelWidget type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of YPanelWidget type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of YPanelWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of YPanelWidget type X. enterEvent (a, b) event = unbound qt slot py_q_event of YPanelWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of YPanelWidget type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of YPanelWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of YPanelWidget type X. findChildren (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of YPanelWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of YPanelWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of YPanelWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of YPanelWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of YPanelWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of YPanelWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of YPanelWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of YPanelWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of YPanelWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of YPanelWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of YPanelWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of YPanelWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of YPanelWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of YPanelWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of YPanelWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of YPanelWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of YPanelWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of YPanelWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of YPanelWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of YPanelWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of YPanelWidget type X. hide () hideEvent = unbound qt slot py_q_hideEvent of YPanelWidget type X. hideEvent (a, b) inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of YPanelWidget type X. initPainter (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of YPanelWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of YPanelWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of YPanelWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of YPanelWidget type X. insertActions (a, b, c) installEventFilter = unbound qt slot installEventFilter of YPanelWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of YPanelWidget type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of YPanelWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of YPanelWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of YPanelWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of YPanelWidget type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of YPanelWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of YPanelWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of YPanelWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of YPanelWidget type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of YPanelWidget type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of YPanelWidget type X. isSignalConnected (a, b) -> bool isVisible = unbound qt slot isVisible of YPanelWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of YPanelWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of YPanelWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of YPanelWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of YPanelWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of YPanelWidget type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of YPanelWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of YPanelWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of YPanelWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of YPanelWidget type X. killTimer (a, b) layout = unbound qt slot layout of YPanelWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of YPanelWidget type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of YPanelWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of YPanelWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of YPanelWidget type X. lower () mapFrom = unbound qt slot mapFrom of YPanelWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of YPanelWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of YPanelWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of YPanelWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of YPanelWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of YPanelWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of YPanelWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of YPanelWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of YPanelWidget type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of YPanelWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of YPanelWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of YPanelWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of YPanelWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of YPanelWidget type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of YPanelWidget type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of YPanelWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of YPanelWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of YPanelWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of YPanelWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of YPanelWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of YPanelWidget type overrideWindowFlags = unbound qt slot overrideWindowFlags of YPanelWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of YPanelWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of YPanelWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of YPanelWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of YPanelWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of YPanelWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of YPanelWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of YPanelWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of YPanelWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of YPanelWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of YPanelWidget type X. property (a, b) -> object raise = unbound qt slot raise of YPanelWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of YPanelWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of YPanelWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of YPanelWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of YPanelWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of YPanelWidget type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of YPanelWidget type X. removeEventFilter (a, b) render = unbound qt slot render of YPanelWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of YPanelWidget type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of YPanelWidget type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of YPanelWidget type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of YPanelWidget type X. restoreGeometry (a, b) -> bool saveGeometry = unbound qt slot saveGeometry of YPanelWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of YPanelWidget type X. scroll (a, b, c, d) sender = unbound qt slot sender of YPanelWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of YPanelWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of YPanelWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of YPanelWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of YPanelWidget type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of YPanelWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of YPanelWidget type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of YPanelWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of YPanelWidget type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of YPanelWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of YPanelWidget type X. setContextMenuPolicy (a, b) setCursor = unbound qt slot setCursor of YPanelWidget type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of YPanelWidget type X. setDisabled (a) setEnabled = unbound qt slot setEnabled of YPanelWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of YPanelWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of YPanelWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of YPanelWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of YPanelWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of YPanelWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of YPanelWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of YPanelWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of YPanelWidget type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of YPanelWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of YPanelWidget type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of YPanelWidget type X. setHidden (a) setInputMethodHints = unbound qt slot setInputMethodHints of YPanelWidget type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of YPanelWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of YPanelWidget type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of YPanelWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of YPanelWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of YPanelWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of YPanelWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of YPanelWidget type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of YPanelWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of YPanelWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of YPanelWidget type X. setMinimumWidth (a, b) setMouseTracking = unbound qt slot setMouseTracking of YPanelWidget type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of YPanelWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of YPanelWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of YPanelWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of YPanelWidget type X. setProperty (a, b, c) -> bool setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of YPanelWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of YPanelWidget type X. setShortcutEnabled (a, b, c) setSizeIncrement = unbound qt slot setSizeIncrement of YPanelWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of YPanelWidget type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of YPanelWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of YPanelWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of YPanelWidget type X. setStyleSheet (a) setTabOrder = unbound qt slot static_QWidget_setTabOrder of YPanelWidget type X. setTabOrder (a, b) setToolTip = unbound qt slot setToolTip of YPanelWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of YPanelWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of YPanelWidget type X. setUpdatesEnabled (a, b) setVisible = unbound qt slot py_q_setVisible of YPanelWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of YPanelWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of YPanelWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of YPanelWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of YPanelWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of YPanelWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of YPanelWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of YPanelWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of YPanelWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of YPanelWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of YPanelWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of YPanelWidget type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of YPanelWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of YPanelWidget type X. show () showEvent = unbound qt slot py_q_showEvent of YPanelWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of YPanelWidget type X. showFullScreen () showMaximized = unbound qt slot showMaximized of YPanelWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of YPanelWidget type X. showMinimized () showNormal = unbound qt slot showNormal of YPanelWidget type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of YPanelWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of YPanelWidget type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of YPanelWidget type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of YPanelWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabletEvent = unbound qt slot py_q_tabletEvent of YPanelWidget type X. tabletEvent (a, b) tabletTracking = None testAttribute = unbound qt slot testAttribute of YPanelWidget type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of YPanelWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of YPanelWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of YPanelWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of YPanelWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of YPanelWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of YPanelWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of YPanelWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of YPanelWidget type X. unsetLocale (a) update = unbound qt slot update of YPanelWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of YPanelWidget type X. updateGeometry (a) updatesEnabled = None visible = None visibleRegion = unbound qt slot visibleRegion of YPanelWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of YPanelWidget type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of YPanelWidget type X. widthMM (a) -> int winId = unbound qt slot winId of YPanelWidget type X. winId (a) window = unbound qt slot window of YPanelWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of YPanelWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of YPanelWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of YPanelWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of YPanelWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of YPanelWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of YPanelWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of YPanelWidget type windowType = unbound qt slot windowType of YPanelWidget type X. windowType (a) x = None y = None Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __init__ (...) x. __init__ (...) initializes x; see help (type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T actionEvent fontlab.YPanelWidget.actionEvent = unbound qt slot py_q_actionEvent of YPanelWidget type actions fontlab.YPanelWidget.actions = unbound qt slot actions of YPanelWidget type activateWindow fontlab.YPanelWidget.activateWindow = unbound qt slot activateWindow of YPanelWidget type addAction fontlab.YPanelWidget.addAction = unbound qt slot addAction of YPanelWidget type addActions fontlab.YPanelWidget.addActions = unbound qt slot addActions of YPanelWidget type adjustSize fontlab.YPanelWidget.adjustSize = unbound qt slot adjustSize of YPanelWidget type backgroundRole fontlab.YPanelWidget.backgroundRole = unbound qt slot backgroundRole of YPanelWidget type backingStore fontlab.YPanelWidget.backingStore = unbound qt slot backingStore of YPanelWidget type blockSignals fontlab.YPanelWidget.blockSignals = unbound qt slot blockSignals of YPanelWidget type changeEvent fontlab.YPanelWidget.changeEvent = unbound qt slot py_q_changeEvent of YPanelWidget type childAt fontlab.YPanelWidget.childAt = unbound qt slot childAt of YPanelWidget type childEvent fontlab.YPanelWidget.childEvent = unbound qt slot py_q_childEvent of YPanelWidget type children fontlab.YPanelWidget.children = unbound qt slot children of YPanelWidget type className fontlab.YPanelWidget.className = className (...) Return the classname of the object clearFocus fontlab.YPanelWidget.clearFocus = unbound qt slot clearFocus of YPanelWidget type clearMask fontlab.YPanelWidget.clearMask = unbound qt slot clearMask of YPanelWidget type close fontlab.YPanelWidget.close = unbound qt slot close of YPanelWidget type closeEvent fontlab.YPanelWidget.closeEvent = unbound qt slot py_q_closeEvent of YPanelWidget type colorCount fontlab.YPanelWidget.colorCount = unbound qt slot colorCount of YPanelWidget type connect fontlab.YPanelWidget.connect = unbound qt slot connect of YPanelWidget type contentsMargins fontlab.YPanelWidget.contentsMargins = unbound qt slot contentsMargins of YPanelWidget type contentsRect fontlab.YPanelWidget.contentsRect = unbound qt slot contentsRect of YPanelWidget type contextMenuEvent fontlab.YPanelWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of YPanelWidget type createWindowContainer fontlab.YPanelWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of YPanelWidget type createWinId fontlab.YPanelWidget.createWinId = unbound qt slot createWinId of YPanelWidget type customEvent fontlab.YPanelWidget.customEvent = unbound qt slot py_q_customEvent of YPanelWidget type delete fontlab.YPanelWidget.delete = delete (...) Deletes the given C++ object deleteLater fontlab.YPanelWidget.deleteLater = unbound qt slot deleteLater of YPanelWidget type depth fontlab.YPanelWidget.depth = unbound qt slot depth of YPanelWidget type destroy fontlab.YPanelWidget.destroy = unbound qt slot destroy of YPanelWidget type devicePixelRatio fontlab.YPanelWidget.devicePixelRatio = unbound qt slot devicePixelRatio of YPanelWidget type devicePixelRatioF fontlab.YPanelWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of YPanelWidget type devicePixelRatioFScale fontlab.YPanelWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of YPanelWidget type devType fontlab.YPanelWidget.devType = unbound qt slot py_q_devType of YPanelWidget type disconnect fontlab.YPanelWidget.disconnect = unbound qt slot disconnect of YPanelWidget type dragEnterEvent fontlab.YPanelWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of YPanelWidget type dragLeaveEvent fontlab.YPanelWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of YPanelWidget type dragMoveEvent fontlab.YPanelWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of YPanelWidget type dropEvent fontlab.YPanelWidget.dropEvent = unbound qt slot py_q_dropEvent of YPanelWidget type dumpObjectInfo fontlab.YPanelWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelWidget type dumpObjectTree fontlab.YPanelWidget.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelWidget type dynamicPropertyNames fontlab.YPanelWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelWidget type effectiveWinId fontlab.YPanelWidget.effectiveWinId = unbound qt slot effectiveWinId of YPanelWidget type ensurePolished fontlab.YPanelWidget.ensurePolished = unbound qt slot ensurePolished of YPanelWidget type enterEvent fontlab.YPanelWidget.enterEvent = unbound qt slot py_q_enterEvent of YPanelWidget type event fontlab.YPanelWidget.event = unbound qt slot py_q_event of YPanelWidget type eventFilter fontlab.YPanelWidget.eventFilter = unbound qt slot py_q_eventFilter of YPanelWidget type findChild fontlab.YPanelWidget.findChild = unbound qt slot findChild of YPanelWidget type findChildren fontlab.YPanelWidget.findChildren = unbound qt slot findChildren of YPanelWidget type focusInEvent fontlab.YPanelWidget.focusInEvent = unbound qt slot py_q_focusInEvent of YPanelWidget type focusNextChild fontlab.YPanelWidget.focusNextChild = unbound qt slot focusNextChild of YPanelWidget type focusNextPrevChild fontlab.YPanelWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of YPanelWidget type focusOutEvent fontlab.YPanelWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of YPanelWidget type focusPreviousChild fontlab.YPanelWidget.focusPreviousChild = unbound qt slot focusPreviousChild of YPanelWidget type focusProxy fontlab.YPanelWidget.focusProxy = unbound qt slot focusProxy of YPanelWidget type focusWidget fontlab.YPanelWidget.focusWidget = unbound qt slot focusWidget of YPanelWidget type foregroundRole fontlab.YPanelWidget.foregroundRole = unbound qt slot foregroundRole of YPanelWidget type grab fontlab.YPanelWidget.grab = unbound qt slot grab of YPanelWidget type grabGesture fontlab.YPanelWidget.grabGesture = unbound qt slot grabGesture of YPanelWidget type grabKeyboard fontlab.YPanelWidget.grabKeyboard = unbound qt slot grabKeyboard of YPanelWidget type grabMouse fontlab.YPanelWidget.grabMouse = unbound qt slot grabMouse of YPanelWidget type grabShortcut fontlab.YPanelWidget.grabShortcut = unbound qt slot grabShortcut of YPanelWidget type graphicsEffect fontlab.YPanelWidget.graphicsEffect = unbound qt slot graphicsEffect of YPanelWidget type graphicsProxyWidget fontlab.YPanelWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of YPanelWidget type hasFocus fontlab.YPanelWidget.hasFocus = unbound qt slot hasFocus of YPanelWidget type hasHeightForWidth fontlab.YPanelWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of YPanelWidget type hasMouseTracking fontlab.YPanelWidget.hasMouseTracking = unbound qt slot hasMouseTracking of YPanelWidget type heightForWidth fontlab.YPanelWidget.heightForWidth = unbound qt slot py_q_heightForWidth of YPanelWidget type heightMM fontlab.YPanelWidget.heightMM = unbound qt slot heightMM of YPanelWidget type help fontlab.YPanelWidget.help = help (...) Shows the help of available methods for this class hide fontlab.YPanelWidget.hide = unbound qt slot hide of YPanelWidget type hideEvent fontlab.YPanelWidget.hideEvent = unbound qt slot py_q_hideEvent of YPanelWidget type inherits fontlab.YPanelWidget.inherits = inherits (...) Returns if the class inherits or is of given type name initPainter fontlab.YPanelWidget.initPainter = unbound qt slot py_q_initPainter of YPanelWidget type inputMethodEvent fontlab.YPanelWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of YPanelWidget type inputMethodQuery fontlab.YPanelWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of YPanelWidget type insertAction fontlab.YPanelWidget.insertAction = unbound qt slot insertAction of YPanelWidget type insertActions fontlab.YPanelWidget.insertActions = unbound qt slot insertActions of YPanelWidget type installEventFilter fontlab.YPanelWidget.installEventFilter = unbound qt slot installEventFilter of YPanelWidget type isAncestorOf fontlab.YPanelWidget.isAncestorOf = unbound qt slot isAncestorOf of YPanelWidget type isEnabled fontlab.YPanelWidget.isEnabled = unbound qt slot isEnabled of YPanelWidget type isEnabledTo fontlab.YPanelWidget.isEnabledTo = unbound qt slot isEnabledTo of YPanelWidget type isFullScreen fontlab.YPanelWidget.isFullScreen = unbound qt slot isFullScreen of YPanelWidget type isHidden fontlab.YPanelWidget.isHidden = unbound qt slot isHidden of YPanelWidget type isLeftToRight fontlab.YPanelWidget.isLeftToRight = unbound qt slot isLeftToRight of YPanelWidget type isMaximized fontlab.YPanelWidget.isMaximized = unbound qt slot isMaximized of YPanelWidget type isMinimized fontlab.YPanelWidget.isMinimized = unbound qt slot isMinimized of YPanelWidget type isModal fontlab.YPanelWidget.isModal = unbound qt slot isModal of YPanelWidget type isRightToLeft fontlab.YPanelWidget.isRightToLeft = unbound qt slot isRightToLeft of YPanelWidget type isSignalConnected fontlab.YPanelWidget.isSignalConnected = unbound qt slot isSignalConnected of YPanelWidget type isVisible fontlab.YPanelWidget.isVisible = unbound qt slot isVisible of YPanelWidget type isVisibleTo fontlab.YPanelWidget.isVisibleTo = unbound qt slot isVisibleTo of YPanelWidget type isWidgetType fontlab.YPanelWidget.isWidgetType = unbound qt slot isWidgetType of YPanelWidget type isWindow fontlab.YPanelWidget.isWindow = unbound qt slot isWindow of YPanelWidget type isWindowModified fontlab.YPanelWidget.isWindowModified = unbound qt slot isWindowModified of YPanelWidget type isWindowType fontlab.YPanelWidget.isWindowType = unbound qt slot isWindowType of YPanelWidget type keyboardGrabber fontlab.YPanelWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of YPanelWidget type keyPressEvent fontlab.YPanelWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of YPanelWidget type keyReleaseEvent fontlab.YPanelWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of YPanelWidget type killTimer fontlab.YPanelWidget.killTimer = unbound qt slot killTimer of YPanelWidget type layout fontlab.YPanelWidget.layout = unbound qt slot layout of YPanelWidget type leaveEvent fontlab.YPanelWidget.leaveEvent = unbound qt slot py_q_leaveEvent of YPanelWidget type logicalDpiX fontlab.YPanelWidget.logicalDpiX = unbound qt slot logicalDpiX of YPanelWidget type logicalDpiY fontlab.YPanelWidget.logicalDpiY = unbound qt slot logicalDpiY of YPanelWidget type lower fontlab.YPanelWidget.lower = unbound qt slot lower of YPanelWidget type mapFrom fontlab.YPanelWidget.mapFrom = unbound qt slot mapFrom of YPanelWidget type mapFromGlobal fontlab.YPanelWidget.mapFromGlobal = unbound qt slot mapFromGlobal of YPanelWidget type mapFromParent fontlab.YPanelWidget.mapFromParent = unbound qt slot mapFromParent of YPanelWidget type mapTo fontlab.YPanelWidget.mapTo = unbound qt slot mapTo of YPanelWidget type mapToGlobal fontlab.YPanelWidget.mapToGlobal = unbound qt slot mapToGlobal of YPanelWidget type mapToParent fontlab.YPanelWidget.mapToParent = unbound qt slot mapToParent of YPanelWidget type mask fontlab.YPanelWidget.mask = unbound qt slot mask of YPanelWidget type metaObject fontlab.YPanelWidget.metaObject = unbound qt slot metaObject of YPanelWidget type metric fontlab.YPanelWidget.metric = unbound qt slot py_q_metric of YPanelWidget type mouseDoubleClickEvent fontlab.YPanelWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of YPanelWidget type mouseGrabber fontlab.YPanelWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of YPanelWidget type mouseMoveEvent fontlab.YPanelWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of YPanelWidget type mousePressEvent fontlab.YPanelWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of YPanelWidget type mouseReleaseEvent fontlab.YPanelWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of YPanelWidget type move fontlab.YPanelWidget.move = unbound qt slot move of YPanelWidget type moveEvent fontlab.YPanelWidget.moveEvent = unbound qt slot py_q_moveEvent of YPanelWidget type moveToThread fontlab.YPanelWidget.moveToThread = unbound qt slot moveToThread of YPanelWidget type nativeEvent fontlab.YPanelWidget.nativeEvent = unbound qt slot py_q_nativeEvent of YPanelWidget type nativeParentWidget fontlab.YPanelWidget.nativeParentWidget = unbound qt slot nativeParentWidget of YPanelWidget type nextInFocusChain fontlab.YPanelWidget.nextInFocusChain = unbound qt slot nextInFocusChain of YPanelWidget type overrideWindowFlags fontlab.YPanelWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of YPanelWidget type overrideWindowState fontlab.YPanelWidget.overrideWindowState = unbound qt slot overrideWindowState of YPanelWidget type paintEngine fontlab.YPanelWidget.paintEngine = unbound qt slot py_q_paintEngine of YPanelWidget type paintEvent fontlab.YPanelWidget.paintEvent = unbound qt slot py_q_paintEvent of YPanelWidget type paintingActive fontlab.YPanelWidget.paintingActive = unbound qt slot paintingActive of YPanelWidget type parent fontlab.YPanelWidget.parent = unbound qt slot parent of YPanelWidget type parentWidget fontlab.YPanelWidget.parentWidget = unbound qt slot parentWidget of YPanelWidget type physicalDpiX fontlab.YPanelWidget.physicalDpiX = unbound qt slot physicalDpiX of YPanelWidget type physicalDpiY fontlab.YPanelWidget.physicalDpiY = unbound qt slot physicalDpiY of YPanelWidget type previousInFocusChain fontlab.YPanelWidget.previousInFocusChain = unbound qt slot previousInFocusChain of YPanelWidget type property fontlab.YPanelWidget.property = unbound qt slot property of YPanelWidget type raise fontlab.YPanelWidget.raise = unbound qt slot raise of YPanelWidget type redirected fontlab.YPanelWidget.redirected = unbound qt slot py_q_redirected of YPanelWidget type releaseKeyboard fontlab.YPanelWidget.releaseKeyboard = unbound qt slot releaseKeyboard of YPanelWidget type releaseMouse fontlab.YPanelWidget.releaseMouse = unbound qt slot releaseMouse of YPanelWidget type releaseShortcut fontlab.YPanelWidget.releaseShortcut = unbound qt slot releaseShortcut of YPanelWidget type removeAction fontlab.YPanelWidget.removeAction = unbound qt slot removeAction of YPanelWidget type removeEventFilter fontlab.YPanelWidget.removeEventFilter = unbound qt slot removeEventFilter of YPanelWidget type render fontlab.YPanelWidget.render = unbound qt slot render of YPanelWidget type repaint fontlab.YPanelWidget.repaint = unbound qt slot repaint of YPanelWidget type resize fontlab.YPanelWidget.resize = unbound qt slot resize of YPanelWidget type resizeEvent fontlab.YPanelWidget.resizeEvent = unbound qt slot py_q_resizeEvent of YPanelWidget type restoreGeometry fontlab.YPanelWidget.restoreGeometry = unbound qt slot restoreGeometry of YPanelWidget type saveGeometry fontlab.YPanelWidget.saveGeometry = unbound qt slot saveGeometry of YPanelWidget type scroll fontlab.YPanelWidget.scroll = unbound qt slot scroll of YPanelWidget type sender fontlab.YPanelWidget.sender = unbound qt slot sender of YPanelWidget type senderSignalIndex fontlab.YPanelWidget.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelWidget type setAcceptDrops fontlab.YPanelWidget.setAcceptDrops = unbound qt slot setAcceptDrops of YPanelWidget type setAccessibleDescription fontlab.YPanelWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of YPanelWidget type setAccessibleName fontlab.YPanelWidget.setAccessibleName = unbound qt slot setAccessibleName of YPanelWidget type setAttribute fontlab.YPanelWidget.setAttribute = unbound qt slot setAttribute of YPanelWidget type setAutoFillBackground fontlab.YPanelWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of YPanelWidget type setBackgroundRole fontlab.YPanelWidget.setBackgroundRole = unbound qt slot setBackgroundRole of YPanelWidget type setBaseSize fontlab.YPanelWidget.setBaseSize = unbound qt slot setBaseSize of YPanelWidget type setContentsMargins fontlab.YPanelWidget.setContentsMargins = unbound qt slot setContentsMargins of YPanelWidget type setContextMenuPolicy fontlab.YPanelWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of YPanelWidget type setCursor fontlab.YPanelWidget.setCursor = unbound qt slot setCursor of YPanelWidget type setDisabled fontlab.YPanelWidget.setDisabled = unbound qt slot setDisabled of YPanelWidget type setEnabled fontlab.YPanelWidget.setEnabled = unbound qt slot setEnabled of YPanelWidget type setFixedHeight fontlab.YPanelWidget.setFixedHeight = unbound qt slot setFixedHeight of YPanelWidget type setFixedSize fontlab.YPanelWidget.setFixedSize = unbound qt slot setFixedSize of YPanelWidget type setFixedWidth fontlab.YPanelWidget.setFixedWidth = unbound qt slot setFixedWidth of YPanelWidget type setFocus fontlab.YPanelWidget.setFocus = unbound qt slot setFocus of YPanelWidget type setFocusPolicy fontlab.YPanelWidget.setFocusPolicy = unbound qt slot setFocusPolicy of YPanelWidget type setFocusProxy fontlab.YPanelWidget.setFocusProxy = unbound qt slot setFocusProxy of YPanelWidget type setFont fontlab.YPanelWidget.setFont = unbound qt slot setFont of YPanelWidget type setForegroundRole fontlab.YPanelWidget.setForegroundRole = unbound qt slot setForegroundRole of YPanelWidget type setGeometry fontlab.YPanelWidget.setGeometry = unbound qt slot setGeometry of YPanelWidget type setGraphicsEffect fontlab.YPanelWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of YPanelWidget type setHidden fontlab.YPanelWidget.setHidden = unbound qt slot setHidden of YPanelWidget type setInputMethodHints fontlab.YPanelWidget.setInputMethodHints = unbound qt slot setInputMethodHints of YPanelWidget type setLayout fontlab.YPanelWidget.setLayout = unbound qt slot setLayout of YPanelWidget type setLayoutDirection fontlab.YPanelWidget.setLayoutDirection = unbound qt slot setLayoutDirection of YPanelWidget type setLocale fontlab.YPanelWidget.setLocale = unbound qt slot setLocale of YPanelWidget type setMask fontlab.YPanelWidget.setMask = unbound qt slot setMask of YPanelWidget type setMaximumHeight fontlab.YPanelWidget.setMaximumHeight = unbound qt slot setMaximumHeight of YPanelWidget type setMaximumSize fontlab.YPanelWidget.setMaximumSize = unbound qt slot setMaximumSize of YPanelWidget type setMaximumWidth fontlab.YPanelWidget.setMaximumWidth = unbound qt slot setMaximumWidth of YPanelWidget type setMinimumHeight fontlab.YPanelWidget.setMinimumHeight = unbound qt slot setMinimumHeight of YPanelWidget type setMinimumSize fontlab.YPanelWidget.setMinimumSize = unbound qt slot setMinimumSize of YPanelWidget type setMinimumWidth fontlab.YPanelWidget.setMinimumWidth = unbound qt slot setMinimumWidth of YPanelWidget type setMouseTracking fontlab.YPanelWidget.setMouseTracking = unbound qt slot setMouseTracking of YPanelWidget type setObjectName fontlab.YPanelWidget.setObjectName = unbound qt slot setObjectName of YPanelWidget type setPalette fontlab.YPanelWidget.setPalette = unbound qt slot setPalette of YPanelWidget type setParent fontlab.YPanelWidget.setParent = unbound qt slot setParent of YPanelWidget type setProperty fontlab.YPanelWidget.setProperty = unbound qt slot setProperty of YPanelWidget type setShortcutAutoRepeat fontlab.YPanelWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of YPanelWidget type setShortcutEnabled fontlab.YPanelWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of YPanelWidget type setSizeIncrement fontlab.YPanelWidget.setSizeIncrement = unbound qt slot setSizeIncrement of YPanelWidget type setSizePolicy fontlab.YPanelWidget.setSizePolicy = unbound qt slot setSizePolicy of YPanelWidget type setStatusTip fontlab.YPanelWidget.setStatusTip = unbound qt slot setStatusTip of YPanelWidget type setStyle fontlab.YPanelWidget.setStyle = unbound qt slot setStyle of YPanelWidget type setStyleSheet fontlab.YPanelWidget.setStyleSheet = unbound qt slot setStyleSheet of YPanelWidget type setTabOrder fontlab.YPanelWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of YPanelWidget type setToolTip fontlab.YPanelWidget.setToolTip = unbound qt slot setToolTip of YPanelWidget type setToolTipDuration fontlab.YPanelWidget.setToolTipDuration = unbound qt slot setToolTipDuration of YPanelWidget type setUpdatesEnabled fontlab.YPanelWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of YPanelWidget type setVisible fontlab.YPanelWidget.setVisible = unbound qt slot py_q_setVisible of YPanelWidget type setWhatsThis fontlab.YPanelWidget.setWhatsThis = unbound qt slot setWhatsThis of YPanelWidget type setWindowFilePath fontlab.YPanelWidget.setWindowFilePath = unbound qt slot setWindowFilePath of YPanelWidget type setWindowFlags fontlab.YPanelWidget.setWindowFlags = unbound qt slot setWindowFlags of YPanelWidget type setWindowIcon fontlab.YPanelWidget.setWindowIcon = unbound qt slot setWindowIcon of YPanelWidget type setWindowIconText fontlab.YPanelWidget.setWindowIconText = unbound qt slot setWindowIconText of YPanelWidget type setWindowModality fontlab.YPanelWidget.setWindowModality = unbound qt slot setWindowModality of YPanelWidget type setWindowModified fontlab.YPanelWidget.setWindowModified = unbound qt slot setWindowModified of YPanelWidget type setWindowOpacity fontlab.YPanelWidget.setWindowOpacity = unbound qt slot setWindowOpacity of YPanelWidget type setWindowRole fontlab.YPanelWidget.setWindowRole = unbound qt slot setWindowRole of YPanelWidget type setWindowState fontlab.YPanelWidget.setWindowState = unbound qt slot setWindowState of YPanelWidget type setWindowTitle fontlab.YPanelWidget.setWindowTitle = unbound qt slot setWindowTitle of YPanelWidget type sharedPainter fontlab.YPanelWidget.sharedPainter = unbound qt slot py_q_sharedPainter of YPanelWidget type show fontlab.YPanelWidget.show = unbound qt slot show of YPanelWidget type showEvent fontlab.YPanelWidget.showEvent = unbound qt slot py_q_showEvent of YPanelWidget type showFullScreen fontlab.YPanelWidget.showFullScreen = unbound qt slot showFullScreen of YPanelWidget type showMaximized fontlab.YPanelWidget.showMaximized = unbound qt slot showMaximized of YPanelWidget type showMinimized fontlab.YPanelWidget.showMinimized = unbound qt slot showMinimized of YPanelWidget type showNormal fontlab.YPanelWidget.showNormal = unbound qt slot showNormal of YPanelWidget type signalsBlocked fontlab.YPanelWidget.signalsBlocked = unbound qt slot signalsBlocked of YPanelWidget type stackUnder fontlab.YPanelWidget.stackUnder = unbound qt slot stackUnder of YPanelWidget type startTimer fontlab.YPanelWidget.startTimer = unbound qt slot startTimer of YPanelWidget type style fontlab.YPanelWidget.style = unbound qt slot style of YPanelWidget type tabletEvent fontlab.YPanelWidget.tabletEvent = unbound qt slot py_q_tabletEvent of YPanelWidget type testAttribute fontlab.YPanelWidget.testAttribute = unbound qt slot testAttribute of YPanelWidget type thread fontlab.YPanelWidget.thread = unbound qt slot thread of YPanelWidget type timerEvent fontlab.YPanelWidget.timerEvent = unbound qt slot py_q_timerEvent of YPanelWidget type tr fontlab.YPanelWidget.tr = unbound qt slot tr of YPanelWidget type underMouse fontlab.YPanelWidget.underMouse = unbound qt slot underMouse of YPanelWidget type ungrabGesture fontlab.YPanelWidget.ungrabGesture = unbound qt slot ungrabGesture of YPanelWidget type unsetCursor fontlab.YPanelWidget.unsetCursor = unbound qt slot unsetCursor of YPanelWidget type unsetLayoutDirection fontlab.YPanelWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of YPanelWidget type unsetLocale fontlab.YPanelWidget.unsetLocale = unbound qt slot unsetLocale of YPanelWidget type update fontlab.YPanelWidget.update = unbound qt slot update of YPanelWidget type updateGeometry fontlab.YPanelWidget.updateGeometry = unbound qt slot updateGeometry of YPanelWidget type visibleRegion fontlab.YPanelWidget.visibleRegion = unbound qt slot visibleRegion of YPanelWidget type wheelEvent fontlab.YPanelWidget.wheelEvent = unbound qt slot py_q_wheelEvent of YPanelWidget type widthMM fontlab.YPanelWidget.widthMM = unbound qt slot widthMM of YPanelWidget type window fontlab.YPanelWidget.window = unbound qt slot window of YPanelWidget type windowFlags fontlab.YPanelWidget.windowFlags = unbound qt slot windowFlags of YPanelWidget type windowHandle fontlab.YPanelWidget.windowHandle = unbound qt slot windowHandle of YPanelWidget type windowRole fontlab.YPanelWidget.windowRole = unbound qt slot windowRole of YPanelWidget type windowState fontlab.YPanelWidget.windowState = unbound qt slot windowState of YPanelWidget type windowType fontlab.YPanelWidget.windowType = unbound qt slot windowType of YPanelWidget type winId fontlab.YPanelWidget.winId = unbound qt slot winId of YPanelWidget type","title":"YPanelWidget"},{"location":"fontlab.YPanelWidget.html#ypanelwidget","text":"","title":"YPanelWidget"},{"location":"fontlab.YPanelWidget.html#actionevent","text":"fontlab.YPanelWidget.actionEvent = unbound qt slot py_q_actionEvent of YPanelWidget type","title":"actionEvent"},{"location":"fontlab.YPanelWidget.html#actions","text":"fontlab.YPanelWidget.actions = unbound qt slot actions of YPanelWidget type","title":"actions"},{"location":"fontlab.YPanelWidget.html#activatewindow","text":"fontlab.YPanelWidget.activateWindow = unbound qt slot activateWindow of YPanelWidget type","title":"activateWindow"},{"location":"fontlab.YPanelWidget.html#addaction","text":"fontlab.YPanelWidget.addAction = unbound qt slot addAction of YPanelWidget type","title":"addAction"},{"location":"fontlab.YPanelWidget.html#addactions","text":"fontlab.YPanelWidget.addActions = unbound qt slot addActions of YPanelWidget type","title":"addActions"},{"location":"fontlab.YPanelWidget.html#adjustsize","text":"fontlab.YPanelWidget.adjustSize = unbound qt slot adjustSize of YPanelWidget type","title":"adjustSize"},{"location":"fontlab.YPanelWidget.html#backgroundrole","text":"fontlab.YPanelWidget.backgroundRole = unbound qt slot backgroundRole of YPanelWidget type","title":"backgroundRole"},{"location":"fontlab.YPanelWidget.html#backingstore","text":"fontlab.YPanelWidget.backingStore = unbound qt slot backingStore of YPanelWidget type","title":"backingStore"},{"location":"fontlab.YPanelWidget.html#blocksignals","text":"fontlab.YPanelWidget.blockSignals = unbound qt slot blockSignals of YPanelWidget type","title":"blockSignals"},{"location":"fontlab.YPanelWidget.html#changeevent","text":"fontlab.YPanelWidget.changeEvent = unbound qt slot py_q_changeEvent of YPanelWidget type","title":"changeEvent"},{"location":"fontlab.YPanelWidget.html#childat","text":"fontlab.YPanelWidget.childAt = unbound qt slot childAt of YPanelWidget type","title":"childAt"},{"location":"fontlab.YPanelWidget.html#childevent","text":"fontlab.YPanelWidget.childEvent = unbound qt slot py_q_childEvent of YPanelWidget type","title":"childEvent"},{"location":"fontlab.YPanelWidget.html#children","text":"fontlab.YPanelWidget.children = unbound qt slot children of YPanelWidget type","title":"children"},{"location":"fontlab.YPanelWidget.html#classname","text":"fontlab.YPanelWidget.className = className (...) Return the classname of the object","title":"className"},{"location":"fontlab.YPanelWidget.html#clearfocus","text":"fontlab.YPanelWidget.clearFocus = unbound qt slot clearFocus of YPanelWidget type","title":"clearFocus"},{"location":"fontlab.YPanelWidget.html#clearmask","text":"fontlab.YPanelWidget.clearMask = unbound qt slot clearMask of YPanelWidget type","title":"clearMask"},{"location":"fontlab.YPanelWidget.html#close","text":"fontlab.YPanelWidget.close = unbound qt slot close of YPanelWidget type","title":"close"},{"location":"fontlab.YPanelWidget.html#closeevent","text":"fontlab.YPanelWidget.closeEvent = unbound qt slot py_q_closeEvent of YPanelWidget type","title":"closeEvent"},{"location":"fontlab.YPanelWidget.html#colorcount","text":"fontlab.YPanelWidget.colorCount = unbound qt slot colorCount of YPanelWidget type","title":"colorCount"},{"location":"fontlab.YPanelWidget.html#connect","text":"fontlab.YPanelWidget.connect = unbound qt slot connect of YPanelWidget type","title":"connect"},{"location":"fontlab.YPanelWidget.html#contentsmargins","text":"fontlab.YPanelWidget.contentsMargins = unbound qt slot contentsMargins of YPanelWidget type","title":"contentsMargins"},{"location":"fontlab.YPanelWidget.html#contentsrect","text":"fontlab.YPanelWidget.contentsRect = unbound qt slot contentsRect of YPanelWidget type","title":"contentsRect"},{"location":"fontlab.YPanelWidget.html#contextmenuevent","text":"fontlab.YPanelWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of YPanelWidget type","title":"contextMenuEvent"},{"location":"fontlab.YPanelWidget.html#createwindowcontainer","text":"fontlab.YPanelWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of YPanelWidget type","title":"createWindowContainer"},{"location":"fontlab.YPanelWidget.html#createwinid","text":"fontlab.YPanelWidget.createWinId = unbound qt slot createWinId of YPanelWidget type","title":"createWinId"},{"location":"fontlab.YPanelWidget.html#customevent","text":"fontlab.YPanelWidget.customEvent = unbound qt slot py_q_customEvent of YPanelWidget type","title":"customEvent"},{"location":"fontlab.YPanelWidget.html#delete","text":"fontlab.YPanelWidget.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"fontlab.YPanelWidget.html#deletelater","text":"fontlab.YPanelWidget.deleteLater = unbound qt slot deleteLater of YPanelWidget type","title":"deleteLater"},{"location":"fontlab.YPanelWidget.html#depth","text":"fontlab.YPanelWidget.depth = unbound qt slot depth of YPanelWidget type","title":"depth"},{"location":"fontlab.YPanelWidget.html#destroy","text":"fontlab.YPanelWidget.destroy = unbound qt slot destroy of YPanelWidget type","title":"destroy"},{"location":"fontlab.YPanelWidget.html#devicepixelratio","text":"fontlab.YPanelWidget.devicePixelRatio = unbound qt slot devicePixelRatio of YPanelWidget type","title":"devicePixelRatio"},{"location":"fontlab.YPanelWidget.html#devicepixelratiof","text":"fontlab.YPanelWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of YPanelWidget type","title":"devicePixelRatioF"},{"location":"fontlab.YPanelWidget.html#devicepixelratiofscale","text":"fontlab.YPanelWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of YPanelWidget type","title":"devicePixelRatioFScale"},{"location":"fontlab.YPanelWidget.html#devtype","text":"fontlab.YPanelWidget.devType = unbound qt slot py_q_devType of YPanelWidget type","title":"devType"},{"location":"fontlab.YPanelWidget.html#disconnect","text":"fontlab.YPanelWidget.disconnect = unbound qt slot disconnect of YPanelWidget type","title":"disconnect"},{"location":"fontlab.YPanelWidget.html#dragenterevent","text":"fontlab.YPanelWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of YPanelWidget type","title":"dragEnterEvent"},{"location":"fontlab.YPanelWidget.html#dragleaveevent","text":"fontlab.YPanelWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of YPanelWidget type","title":"dragLeaveEvent"},{"location":"fontlab.YPanelWidget.html#dragmoveevent","text":"fontlab.YPanelWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of YPanelWidget type","title":"dragMoveEvent"},{"location":"fontlab.YPanelWidget.html#dropevent","text":"fontlab.YPanelWidget.dropEvent = unbound qt slot py_q_dropEvent of YPanelWidget type","title":"dropEvent"},{"location":"fontlab.YPanelWidget.html#dumpobjectinfo","text":"fontlab.YPanelWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelWidget type","title":"dumpObjectInfo"},{"location":"fontlab.YPanelWidget.html#dumpobjecttree","text":"fontlab.YPanelWidget.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelWidget type","title":"dumpObjectTree"},{"location":"fontlab.YPanelWidget.html#dynamicpropertynames","text":"fontlab.YPanelWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelWidget type","title":"dynamicPropertyNames"},{"location":"fontlab.YPanelWidget.html#effectivewinid","text":"fontlab.YPanelWidget.effectiveWinId = unbound qt slot effectiveWinId of YPanelWidget type","title":"effectiveWinId"},{"location":"fontlab.YPanelWidget.html#ensurepolished","text":"fontlab.YPanelWidget.ensurePolished = unbound qt slot ensurePolished of YPanelWidget type","title":"ensurePolished"},{"location":"fontlab.YPanelWidget.html#enterevent","text":"fontlab.YPanelWidget.enterEvent = unbound qt slot py_q_enterEvent of YPanelWidget type","title":"enterEvent"},{"location":"fontlab.YPanelWidget.html#event","text":"fontlab.YPanelWidget.event = unbound qt slot py_q_event of YPanelWidget type","title":"event"},{"location":"fontlab.YPanelWidget.html#eventfilter","text":"fontlab.YPanelWidget.eventFilter = unbound qt slot py_q_eventFilter of YPanelWidget type","title":"eventFilter"},{"location":"fontlab.YPanelWidget.html#findchild","text":"fontlab.YPanelWidget.findChild = unbound qt slot findChild of YPanelWidget type","title":"findChild"},{"location":"fontlab.YPanelWidget.html#findchildren","text":"fontlab.YPanelWidget.findChildren = unbound qt slot findChildren of YPanelWidget type","title":"findChildren"},{"location":"fontlab.YPanelWidget.html#focusinevent","text":"fontlab.YPanelWidget.focusInEvent = unbound qt slot py_q_focusInEvent of YPanelWidget type","title":"focusInEvent"},{"location":"fontlab.YPanelWidget.html#focusnextchild","text":"fontlab.YPanelWidget.focusNextChild = unbound qt slot focusNextChild of YPanelWidget type","title":"focusNextChild"},{"location":"fontlab.YPanelWidget.html#focusnextprevchild","text":"fontlab.YPanelWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of YPanelWidget type","title":"focusNextPrevChild"},{"location":"fontlab.YPanelWidget.html#focusoutevent","text":"fontlab.YPanelWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of YPanelWidget type","title":"focusOutEvent"},{"location":"fontlab.YPanelWidget.html#focuspreviouschild","text":"fontlab.YPanelWidget.focusPreviousChild = unbound qt slot focusPreviousChild of YPanelWidget type","title":"focusPreviousChild"},{"location":"fontlab.YPanelWidget.html#focusproxy","text":"fontlab.YPanelWidget.focusProxy = unbound qt slot focusProxy of YPanelWidget type","title":"focusProxy"},{"location":"fontlab.YPanelWidget.html#focuswidget","text":"fontlab.YPanelWidget.focusWidget = unbound qt slot focusWidget of YPanelWidget type","title":"focusWidget"},{"location":"fontlab.YPanelWidget.html#foregroundrole","text":"fontlab.YPanelWidget.foregroundRole = unbound qt slot foregroundRole of YPanelWidget type","title":"foregroundRole"},{"location":"fontlab.YPanelWidget.html#grab","text":"fontlab.YPanelWidget.grab = unbound qt slot grab of YPanelWidget type","title":"grab"},{"location":"fontlab.YPanelWidget.html#grabgesture","text":"fontlab.YPanelWidget.grabGesture = unbound qt slot grabGesture of YPanelWidget type","title":"grabGesture"},{"location":"fontlab.YPanelWidget.html#grabkeyboard","text":"fontlab.YPanelWidget.grabKeyboard = unbound qt slot grabKeyboard of YPanelWidget type","title":"grabKeyboard"},{"location":"fontlab.YPanelWidget.html#grabmouse","text":"fontlab.YPanelWidget.grabMouse = unbound qt slot grabMouse of YPanelWidget type","title":"grabMouse"},{"location":"fontlab.YPanelWidget.html#grabshortcut","text":"fontlab.YPanelWidget.grabShortcut = unbound qt slot grabShortcut of YPanelWidget type","title":"grabShortcut"},{"location":"fontlab.YPanelWidget.html#graphicseffect","text":"fontlab.YPanelWidget.graphicsEffect = unbound qt slot graphicsEffect of YPanelWidget type","title":"graphicsEffect"},{"location":"fontlab.YPanelWidget.html#graphicsproxywidget","text":"fontlab.YPanelWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of YPanelWidget type","title":"graphicsProxyWidget"},{"location":"fontlab.YPanelWidget.html#hasfocus","text":"fontlab.YPanelWidget.hasFocus = unbound qt slot hasFocus of YPanelWidget type","title":"hasFocus"},{"location":"fontlab.YPanelWidget.html#hasheightforwidth","text":"fontlab.YPanelWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of YPanelWidget type","title":"hasHeightForWidth"},{"location":"fontlab.YPanelWidget.html#hasmousetracking","text":"fontlab.YPanelWidget.hasMouseTracking = unbound qt slot hasMouseTracking of YPanelWidget type","title":"hasMouseTracking"},{"location":"fontlab.YPanelWidget.html#heightforwidth","text":"fontlab.YPanelWidget.heightForWidth = unbound qt slot py_q_heightForWidth of YPanelWidget type","title":"heightForWidth"},{"location":"fontlab.YPanelWidget.html#heightmm","text":"fontlab.YPanelWidget.heightMM = unbound qt slot heightMM of YPanelWidget type","title":"heightMM"},{"location":"fontlab.YPanelWidget.html#help","text":"fontlab.YPanelWidget.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"fontlab.YPanelWidget.html#hide","text":"fontlab.YPanelWidget.hide = unbound qt slot hide of YPanelWidget type","title":"hide"},{"location":"fontlab.YPanelWidget.html#hideevent","text":"fontlab.YPanelWidget.hideEvent = unbound qt slot py_q_hideEvent of YPanelWidget type","title":"hideEvent"},{"location":"fontlab.YPanelWidget.html#inherits","text":"fontlab.YPanelWidget.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"fontlab.YPanelWidget.html#initpainter","text":"fontlab.YPanelWidget.initPainter = unbound qt slot py_q_initPainter of YPanelWidget type","title":"initPainter"},{"location":"fontlab.YPanelWidget.html#inputmethodevent","text":"fontlab.YPanelWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of YPanelWidget type","title":"inputMethodEvent"},{"location":"fontlab.YPanelWidget.html#inputmethodquery","text":"fontlab.YPanelWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of YPanelWidget type","title":"inputMethodQuery"},{"location":"fontlab.YPanelWidget.html#insertaction","text":"fontlab.YPanelWidget.insertAction = unbound qt slot insertAction of YPanelWidget type","title":"insertAction"},{"location":"fontlab.YPanelWidget.html#insertactions","text":"fontlab.YPanelWidget.insertActions = unbound qt slot insertActions of YPanelWidget type","title":"insertActions"},{"location":"fontlab.YPanelWidget.html#installeventfilter","text":"fontlab.YPanelWidget.installEventFilter = unbound qt slot installEventFilter of YPanelWidget type","title":"installEventFilter"},{"location":"fontlab.YPanelWidget.html#isancestorof","text":"fontlab.YPanelWidget.isAncestorOf = unbound qt slot isAncestorOf of YPanelWidget type","title":"isAncestorOf"},{"location":"fontlab.YPanelWidget.html#isenabled","text":"fontlab.YPanelWidget.isEnabled = unbound qt slot isEnabled of YPanelWidget type","title":"isEnabled"},{"location":"fontlab.YPanelWidget.html#isenabledto","text":"fontlab.YPanelWidget.isEnabledTo = unbound qt slot isEnabledTo of YPanelWidget type","title":"isEnabledTo"},{"location":"fontlab.YPanelWidget.html#isfullscreen","text":"fontlab.YPanelWidget.isFullScreen = unbound qt slot isFullScreen of YPanelWidget type","title":"isFullScreen"},{"location":"fontlab.YPanelWidget.html#ishidden","text":"fontlab.YPanelWidget.isHidden = unbound qt slot isHidden of YPanelWidget type","title":"isHidden"},{"location":"fontlab.YPanelWidget.html#islefttoright","text":"fontlab.YPanelWidget.isLeftToRight = unbound qt slot isLeftToRight of YPanelWidget type","title":"isLeftToRight"},{"location":"fontlab.YPanelWidget.html#ismaximized","text":"fontlab.YPanelWidget.isMaximized = unbound qt slot isMaximized of YPanelWidget type","title":"isMaximized"},{"location":"fontlab.YPanelWidget.html#isminimized","text":"fontlab.YPanelWidget.isMinimized = unbound qt slot isMinimized of YPanelWidget type","title":"isMinimized"},{"location":"fontlab.YPanelWidget.html#ismodal","text":"fontlab.YPanelWidget.isModal = unbound qt slot isModal of YPanelWidget type","title":"isModal"},{"location":"fontlab.YPanelWidget.html#isrighttoleft","text":"fontlab.YPanelWidget.isRightToLeft = unbound qt slot isRightToLeft of YPanelWidget type","title":"isRightToLeft"},{"location":"fontlab.YPanelWidget.html#issignalconnected","text":"fontlab.YPanelWidget.isSignalConnected = unbound qt slot isSignalConnected of YPanelWidget type","title":"isSignalConnected"},{"location":"fontlab.YPanelWidget.html#isvisible","text":"fontlab.YPanelWidget.isVisible = unbound qt slot isVisible of YPanelWidget type","title":"isVisible"},{"location":"fontlab.YPanelWidget.html#isvisibleto","text":"fontlab.YPanelWidget.isVisibleTo = unbound qt slot isVisibleTo of YPanelWidget type","title":"isVisibleTo"},{"location":"fontlab.YPanelWidget.html#iswidgettype","text":"fontlab.YPanelWidget.isWidgetType = unbound qt slot isWidgetType of YPanelWidget type","title":"isWidgetType"},{"location":"fontlab.YPanelWidget.html#iswindow","text":"fontlab.YPanelWidget.isWindow = unbound qt slot isWindow of YPanelWidget type","title":"isWindow"},{"location":"fontlab.YPanelWidget.html#iswindowmodified","text":"fontlab.YPanelWidget.isWindowModified = unbound qt slot isWindowModified of YPanelWidget type","title":"isWindowModified"},{"location":"fontlab.YPanelWidget.html#iswindowtype","text":"fontlab.YPanelWidget.isWindowType = unbound qt slot isWindowType of YPanelWidget type","title":"isWindowType"},{"location":"fontlab.YPanelWidget.html#keyboardgrabber","text":"fontlab.YPanelWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of YPanelWidget type","title":"keyboardGrabber"},{"location":"fontlab.YPanelWidget.html#keypressevent","text":"fontlab.YPanelWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of YPanelWidget type","title":"keyPressEvent"},{"location":"fontlab.YPanelWidget.html#keyreleaseevent","text":"fontlab.YPanelWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of YPanelWidget type","title":"keyReleaseEvent"},{"location":"fontlab.YPanelWidget.html#killtimer","text":"fontlab.YPanelWidget.killTimer = unbound qt slot killTimer of YPanelWidget type","title":"killTimer"},{"location":"fontlab.YPanelWidget.html#layout","text":"fontlab.YPanelWidget.layout = unbound qt slot layout of YPanelWidget type","title":"layout"},{"location":"fontlab.YPanelWidget.html#leaveevent","text":"fontlab.YPanelWidget.leaveEvent = unbound qt slot py_q_leaveEvent of YPanelWidget type","title":"leaveEvent"},{"location":"fontlab.YPanelWidget.html#logicaldpix","text":"fontlab.YPanelWidget.logicalDpiX = unbound qt slot logicalDpiX of YPanelWidget type","title":"logicalDpiX"},{"location":"fontlab.YPanelWidget.html#logicaldpiy","text":"fontlab.YPanelWidget.logicalDpiY = unbound qt slot logicalDpiY of YPanelWidget type","title":"logicalDpiY"},{"location":"fontlab.YPanelWidget.html#lower","text":"fontlab.YPanelWidget.lower = unbound qt slot lower of YPanelWidget type","title":"lower"},{"location":"fontlab.YPanelWidget.html#mapfrom","text":"fontlab.YPanelWidget.mapFrom = unbound qt slot mapFrom of YPanelWidget type","title":"mapFrom"},{"location":"fontlab.YPanelWidget.html#mapfromglobal","text":"fontlab.YPanelWidget.mapFromGlobal = unbound qt slot mapFromGlobal of YPanelWidget type","title":"mapFromGlobal"},{"location":"fontlab.YPanelWidget.html#mapfromparent","text":"fontlab.YPanelWidget.mapFromParent = unbound qt slot mapFromParent of YPanelWidget type","title":"mapFromParent"},{"location":"fontlab.YPanelWidget.html#mapto","text":"fontlab.YPanelWidget.mapTo = unbound qt slot mapTo of YPanelWidget type","title":"mapTo"},{"location":"fontlab.YPanelWidget.html#maptoglobal","text":"fontlab.YPanelWidget.mapToGlobal = unbound qt slot mapToGlobal of YPanelWidget type","title":"mapToGlobal"},{"location":"fontlab.YPanelWidget.html#maptoparent","text":"fontlab.YPanelWidget.mapToParent = unbound qt slot mapToParent of YPanelWidget type","title":"mapToParent"},{"location":"fontlab.YPanelWidget.html#mask","text":"fontlab.YPanelWidget.mask = unbound qt slot mask of YPanelWidget type","title":"mask"},{"location":"fontlab.YPanelWidget.html#metaobject","text":"fontlab.YPanelWidget.metaObject = unbound qt slot metaObject of YPanelWidget type","title":"metaObject"},{"location":"fontlab.YPanelWidget.html#metric","text":"fontlab.YPanelWidget.metric = unbound qt slot py_q_metric of YPanelWidget type","title":"metric"},{"location":"fontlab.YPanelWidget.html#mousedoubleclickevent","text":"fontlab.YPanelWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of YPanelWidget type","title":"mouseDoubleClickEvent"},{"location":"fontlab.YPanelWidget.html#mousegrabber","text":"fontlab.YPanelWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of YPanelWidget type","title":"mouseGrabber"},{"location":"fontlab.YPanelWidget.html#mousemoveevent","text":"fontlab.YPanelWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of YPanelWidget type","title":"mouseMoveEvent"},{"location":"fontlab.YPanelWidget.html#mousepressevent","text":"fontlab.YPanelWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of YPanelWidget type","title":"mousePressEvent"},{"location":"fontlab.YPanelWidget.html#mousereleaseevent","text":"fontlab.YPanelWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of YPanelWidget type","title":"mouseReleaseEvent"},{"location":"fontlab.YPanelWidget.html#move","text":"fontlab.YPanelWidget.move = unbound qt slot move of YPanelWidget type","title":"move"},{"location":"fontlab.YPanelWidget.html#moveevent","text":"fontlab.YPanelWidget.moveEvent = unbound qt slot py_q_moveEvent of YPanelWidget type","title":"moveEvent"},{"location":"fontlab.YPanelWidget.html#movetothread","text":"fontlab.YPanelWidget.moveToThread = unbound qt slot moveToThread of YPanelWidget type","title":"moveToThread"},{"location":"fontlab.YPanelWidget.html#nativeevent","text":"fontlab.YPanelWidget.nativeEvent = unbound qt slot py_q_nativeEvent of YPanelWidget type","title":"nativeEvent"},{"location":"fontlab.YPanelWidget.html#nativeparentwidget","text":"fontlab.YPanelWidget.nativeParentWidget = unbound qt slot nativeParentWidget of YPanelWidget type","title":"nativeParentWidget"},{"location":"fontlab.YPanelWidget.html#nextinfocuschain","text":"fontlab.YPanelWidget.nextInFocusChain = unbound qt slot nextInFocusChain of YPanelWidget type","title":"nextInFocusChain"},{"location":"fontlab.YPanelWidget.html#overridewindowflags","text":"fontlab.YPanelWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of YPanelWidget type","title":"overrideWindowFlags"},{"location":"fontlab.YPanelWidget.html#overridewindowstate","text":"fontlab.YPanelWidget.overrideWindowState = unbound qt slot overrideWindowState of YPanelWidget type","title":"overrideWindowState"},{"location":"fontlab.YPanelWidget.html#paintengine","text":"fontlab.YPanelWidget.paintEngine = unbound qt slot py_q_paintEngine of YPanelWidget type","title":"paintEngine"},{"location":"fontlab.YPanelWidget.html#paintevent","text":"fontlab.YPanelWidget.paintEvent = unbound qt slot py_q_paintEvent of YPanelWidget type","title":"paintEvent"},{"location":"fontlab.YPanelWidget.html#paintingactive","text":"fontlab.YPanelWidget.paintingActive = unbound qt slot paintingActive of YPanelWidget type","title":"paintingActive"},{"location":"fontlab.YPanelWidget.html#parent","text":"fontlab.YPanelWidget.parent = unbound qt slot parent of YPanelWidget type","title":"parent"},{"location":"fontlab.YPanelWidget.html#parentwidget","text":"fontlab.YPanelWidget.parentWidget = unbound qt slot parentWidget of YPanelWidget type","title":"parentWidget"},{"location":"fontlab.YPanelWidget.html#physicaldpix","text":"fontlab.YPanelWidget.physicalDpiX = unbound qt slot physicalDpiX of YPanelWidget type","title":"physicalDpiX"},{"location":"fontlab.YPanelWidget.html#physicaldpiy","text":"fontlab.YPanelWidget.physicalDpiY = unbound qt slot physicalDpiY of YPanelWidget type","title":"physicalDpiY"},{"location":"fontlab.YPanelWidget.html#previousinfocuschain","text":"fontlab.YPanelWidget.previousInFocusChain = unbound qt slot previousInFocusChain of YPanelWidget type","title":"previousInFocusChain"},{"location":"fontlab.YPanelWidget.html#property","text":"fontlab.YPanelWidget.property = unbound qt slot property of YPanelWidget type","title":"property"},{"location":"fontlab.YPanelWidget.html#raise","text":"fontlab.YPanelWidget.raise = unbound qt slot raise of YPanelWidget type","title":"raise"},{"location":"fontlab.YPanelWidget.html#redirected","text":"fontlab.YPanelWidget.redirected = unbound qt slot py_q_redirected of YPanelWidget type","title":"redirected"},{"location":"fontlab.YPanelWidget.html#releasekeyboard","text":"fontlab.YPanelWidget.releaseKeyboard = unbound qt slot releaseKeyboard of YPanelWidget type","title":"releaseKeyboard"},{"location":"fontlab.YPanelWidget.html#releasemouse","text":"fontlab.YPanelWidget.releaseMouse = unbound qt slot releaseMouse of YPanelWidget type","title":"releaseMouse"},{"location":"fontlab.YPanelWidget.html#releaseshortcut","text":"fontlab.YPanelWidget.releaseShortcut = unbound qt slot releaseShortcut of YPanelWidget type","title":"releaseShortcut"},{"location":"fontlab.YPanelWidget.html#removeaction","text":"fontlab.YPanelWidget.removeAction = unbound qt slot removeAction of YPanelWidget type","title":"removeAction"},{"location":"fontlab.YPanelWidget.html#removeeventfilter","text":"fontlab.YPanelWidget.removeEventFilter = unbound qt slot removeEventFilter of YPanelWidget type","title":"removeEventFilter"},{"location":"fontlab.YPanelWidget.html#render","text":"fontlab.YPanelWidget.render = unbound qt slot render of YPanelWidget type","title":"render"},{"location":"fontlab.YPanelWidget.html#repaint","text":"fontlab.YPanelWidget.repaint = unbound qt slot repaint of YPanelWidget type","title":"repaint"},{"location":"fontlab.YPanelWidget.html#resize","text":"fontlab.YPanelWidget.resize = unbound qt slot resize of YPanelWidget type","title":"resize"},{"location":"fontlab.YPanelWidget.html#resizeevent","text":"fontlab.YPanelWidget.resizeEvent = unbound qt slot py_q_resizeEvent of YPanelWidget type","title":"resizeEvent"},{"location":"fontlab.YPanelWidget.html#restoregeometry","text":"fontlab.YPanelWidget.restoreGeometry = unbound qt slot restoreGeometry of YPanelWidget type","title":"restoreGeometry"},{"location":"fontlab.YPanelWidget.html#savegeometry","text":"fontlab.YPanelWidget.saveGeometry = unbound qt slot saveGeometry of YPanelWidget type","title":"saveGeometry"},{"location":"fontlab.YPanelWidget.html#scroll","text":"fontlab.YPanelWidget.scroll = unbound qt slot scroll of YPanelWidget type","title":"scroll"},{"location":"fontlab.YPanelWidget.html#sender","text":"fontlab.YPanelWidget.sender = unbound qt slot sender of YPanelWidget type","title":"sender"},{"location":"fontlab.YPanelWidget.html#sendersignalindex","text":"fontlab.YPanelWidget.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelWidget type","title":"senderSignalIndex"},{"location":"fontlab.YPanelWidget.html#setacceptdrops","text":"fontlab.YPanelWidget.setAcceptDrops = unbound qt slot setAcceptDrops of YPanelWidget type","title":"setAcceptDrops"},{"location":"fontlab.YPanelWidget.html#setaccessibledescription","text":"fontlab.YPanelWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of YPanelWidget type","title":"setAccessibleDescription"},{"location":"fontlab.YPanelWidget.html#setaccessiblename","text":"fontlab.YPanelWidget.setAccessibleName = unbound qt slot setAccessibleName of YPanelWidget type","title":"setAccessibleName"},{"location":"fontlab.YPanelWidget.html#setattribute","text":"fontlab.YPanelWidget.setAttribute = unbound qt slot setAttribute of YPanelWidget type","title":"setAttribute"},{"location":"fontlab.YPanelWidget.html#setautofillbackground","text":"fontlab.YPanelWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of YPanelWidget type","title":"setAutoFillBackground"},{"location":"fontlab.YPanelWidget.html#setbackgroundrole","text":"fontlab.YPanelWidget.setBackgroundRole = unbound qt slot setBackgroundRole of YPanelWidget type","title":"setBackgroundRole"},{"location":"fontlab.YPanelWidget.html#setbasesize","text":"fontlab.YPanelWidget.setBaseSize = unbound qt slot setBaseSize of YPanelWidget type","title":"setBaseSize"},{"location":"fontlab.YPanelWidget.html#setcontentsmargins","text":"fontlab.YPanelWidget.setContentsMargins = unbound qt slot setContentsMargins of YPanelWidget type","title":"setContentsMargins"},{"location":"fontlab.YPanelWidget.html#setcontextmenupolicy","text":"fontlab.YPanelWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of YPanelWidget type","title":"setContextMenuPolicy"},{"location":"fontlab.YPanelWidget.html#setcursor","text":"fontlab.YPanelWidget.setCursor = unbound qt slot setCursor of YPanelWidget type","title":"setCursor"},{"location":"fontlab.YPanelWidget.html#setdisabled","text":"fontlab.YPanelWidget.setDisabled = unbound qt slot setDisabled of YPanelWidget type","title":"setDisabled"},{"location":"fontlab.YPanelWidget.html#setenabled","text":"fontlab.YPanelWidget.setEnabled = unbound qt slot setEnabled of YPanelWidget type","title":"setEnabled"},{"location":"fontlab.YPanelWidget.html#setfixedheight","text":"fontlab.YPanelWidget.setFixedHeight = unbound qt slot setFixedHeight of YPanelWidget type","title":"setFixedHeight"},{"location":"fontlab.YPanelWidget.html#setfixedsize","text":"fontlab.YPanelWidget.setFixedSize = unbound qt slot setFixedSize of YPanelWidget type","title":"setFixedSize"},{"location":"fontlab.YPanelWidget.html#setfixedwidth","text":"fontlab.YPanelWidget.setFixedWidth = unbound qt slot setFixedWidth of YPanelWidget type","title":"setFixedWidth"},{"location":"fontlab.YPanelWidget.html#setfocus","text":"fontlab.YPanelWidget.setFocus = unbound qt slot setFocus of YPanelWidget type","title":"setFocus"},{"location":"fontlab.YPanelWidget.html#setfocuspolicy","text":"fontlab.YPanelWidget.setFocusPolicy = unbound qt slot setFocusPolicy of YPanelWidget type","title":"setFocusPolicy"},{"location":"fontlab.YPanelWidget.html#setfocusproxy","text":"fontlab.YPanelWidget.setFocusProxy = unbound qt slot setFocusProxy of YPanelWidget type","title":"setFocusProxy"},{"location":"fontlab.YPanelWidget.html#setfont","text":"fontlab.YPanelWidget.setFont = unbound qt slot setFont of YPanelWidget type","title":"setFont"},{"location":"fontlab.YPanelWidget.html#setforegroundrole","text":"fontlab.YPanelWidget.setForegroundRole = unbound qt slot setForegroundRole of YPanelWidget type","title":"setForegroundRole"},{"location":"fontlab.YPanelWidget.html#setgeometry","text":"fontlab.YPanelWidget.setGeometry = unbound qt slot setGeometry of YPanelWidget type","title":"setGeometry"},{"location":"fontlab.YPanelWidget.html#setgraphicseffect","text":"fontlab.YPanelWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of YPanelWidget type","title":"setGraphicsEffect"},{"location":"fontlab.YPanelWidget.html#sethidden","text":"fontlab.YPanelWidget.setHidden = unbound qt slot setHidden of YPanelWidget type","title":"setHidden"},{"location":"fontlab.YPanelWidget.html#setinputmethodhints","text":"fontlab.YPanelWidget.setInputMethodHints = unbound qt slot setInputMethodHints of YPanelWidget type","title":"setInputMethodHints"},{"location":"fontlab.YPanelWidget.html#setlayout","text":"fontlab.YPanelWidget.setLayout = unbound qt slot setLayout of YPanelWidget type","title":"setLayout"},{"location":"fontlab.YPanelWidget.html#setlayoutdirection","text":"fontlab.YPanelWidget.setLayoutDirection = unbound qt slot setLayoutDirection of YPanelWidget type","title":"setLayoutDirection"},{"location":"fontlab.YPanelWidget.html#setlocale","text":"fontlab.YPanelWidget.setLocale = unbound qt slot setLocale of YPanelWidget type","title":"setLocale"},{"location":"fontlab.YPanelWidget.html#setmask","text":"fontlab.YPanelWidget.setMask = unbound qt slot setMask of YPanelWidget type","title":"setMask"},{"location":"fontlab.YPanelWidget.html#setmaximumheight","text":"fontlab.YPanelWidget.setMaximumHeight = unbound qt slot setMaximumHeight of YPanelWidget type","title":"setMaximumHeight"},{"location":"fontlab.YPanelWidget.html#setmaximumsize","text":"fontlab.YPanelWidget.setMaximumSize = unbound qt slot setMaximumSize of YPanelWidget type","title":"setMaximumSize"},{"location":"fontlab.YPanelWidget.html#setmaximumwidth","text":"fontlab.YPanelWidget.setMaximumWidth = unbound qt slot setMaximumWidth of YPanelWidget type","title":"setMaximumWidth"},{"location":"fontlab.YPanelWidget.html#setminimumheight","text":"fontlab.YPanelWidget.setMinimumHeight = unbound qt slot setMinimumHeight of YPanelWidget type","title":"setMinimumHeight"},{"location":"fontlab.YPanelWidget.html#setminimumsize","text":"fontlab.YPanelWidget.setMinimumSize = unbound qt slot setMinimumSize of YPanelWidget type","title":"setMinimumSize"},{"location":"fontlab.YPanelWidget.html#setminimumwidth","text":"fontlab.YPanelWidget.setMinimumWidth = unbound qt slot setMinimumWidth of YPanelWidget type","title":"setMinimumWidth"},{"location":"fontlab.YPanelWidget.html#setmousetracking","text":"fontlab.YPanelWidget.setMouseTracking = unbound qt slot setMouseTracking of YPanelWidget type","title":"setMouseTracking"},{"location":"fontlab.YPanelWidget.html#setobjectname","text":"fontlab.YPanelWidget.setObjectName = unbound qt slot setObjectName of YPanelWidget type","title":"setObjectName"},{"location":"fontlab.YPanelWidget.html#setpalette","text":"fontlab.YPanelWidget.setPalette = unbound qt slot setPalette of YPanelWidget type","title":"setPalette"},{"location":"fontlab.YPanelWidget.html#setparent","text":"fontlab.YPanelWidget.setParent = unbound qt slot setParent of YPanelWidget type","title":"setParent"},{"location":"fontlab.YPanelWidget.html#setproperty","text":"fontlab.YPanelWidget.setProperty = unbound qt slot setProperty of YPanelWidget type","title":"setProperty"},{"location":"fontlab.YPanelWidget.html#setshortcutautorepeat","text":"fontlab.YPanelWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of YPanelWidget type","title":"setShortcutAutoRepeat"},{"location":"fontlab.YPanelWidget.html#setshortcutenabled","text":"fontlab.YPanelWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of YPanelWidget type","title":"setShortcutEnabled"},{"location":"fontlab.YPanelWidget.html#setsizeincrement","text":"fontlab.YPanelWidget.setSizeIncrement = unbound qt slot setSizeIncrement of YPanelWidget type","title":"setSizeIncrement"},{"location":"fontlab.YPanelWidget.html#setsizepolicy","text":"fontlab.YPanelWidget.setSizePolicy = unbound qt slot setSizePolicy of YPanelWidget type","title":"setSizePolicy"},{"location":"fontlab.YPanelWidget.html#setstatustip","text":"fontlab.YPanelWidget.setStatusTip = unbound qt slot setStatusTip of YPanelWidget type","title":"setStatusTip"},{"location":"fontlab.YPanelWidget.html#setstyle","text":"fontlab.YPanelWidget.setStyle = unbound qt slot setStyle of YPanelWidget type","title":"setStyle"},{"location":"fontlab.YPanelWidget.html#setstylesheet","text":"fontlab.YPanelWidget.setStyleSheet = unbound qt slot setStyleSheet of YPanelWidget type","title":"setStyleSheet"},{"location":"fontlab.YPanelWidget.html#settaborder","text":"fontlab.YPanelWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of YPanelWidget type","title":"setTabOrder"},{"location":"fontlab.YPanelWidget.html#settooltip","text":"fontlab.YPanelWidget.setToolTip = unbound qt slot setToolTip of YPanelWidget type","title":"setToolTip"},{"location":"fontlab.YPanelWidget.html#settooltipduration","text":"fontlab.YPanelWidget.setToolTipDuration = unbound qt slot setToolTipDuration of YPanelWidget type","title":"setToolTipDuration"},{"location":"fontlab.YPanelWidget.html#setupdatesenabled","text":"fontlab.YPanelWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of YPanelWidget type","title":"setUpdatesEnabled"},{"location":"fontlab.YPanelWidget.html#setvisible","text":"fontlab.YPanelWidget.setVisible = unbound qt slot py_q_setVisible of YPanelWidget type","title":"setVisible"},{"location":"fontlab.YPanelWidget.html#setwhatsthis","text":"fontlab.YPanelWidget.setWhatsThis = unbound qt slot setWhatsThis of YPanelWidget type","title":"setWhatsThis"},{"location":"fontlab.YPanelWidget.html#setwindowfilepath","text":"fontlab.YPanelWidget.setWindowFilePath = unbound qt slot setWindowFilePath of YPanelWidget type","title":"setWindowFilePath"},{"location":"fontlab.YPanelWidget.html#setwindowflags","text":"fontlab.YPanelWidget.setWindowFlags = unbound qt slot setWindowFlags of YPanelWidget type","title":"setWindowFlags"},{"location":"fontlab.YPanelWidget.html#setwindowicon","text":"fontlab.YPanelWidget.setWindowIcon = unbound qt slot setWindowIcon of YPanelWidget type","title":"setWindowIcon"},{"location":"fontlab.YPanelWidget.html#setwindowicontext","text":"fontlab.YPanelWidget.setWindowIconText = unbound qt slot setWindowIconText of YPanelWidget type","title":"setWindowIconText"},{"location":"fontlab.YPanelWidget.html#setwindowmodality","text":"fontlab.YPanelWidget.setWindowModality = unbound qt slot setWindowModality of YPanelWidget type","title":"setWindowModality"},{"location":"fontlab.YPanelWidget.html#setwindowmodified","text":"fontlab.YPanelWidget.setWindowModified = unbound qt slot setWindowModified of YPanelWidget type","title":"setWindowModified"},{"location":"fontlab.YPanelWidget.html#setwindowopacity","text":"fontlab.YPanelWidget.setWindowOpacity = unbound qt slot setWindowOpacity of YPanelWidget type","title":"setWindowOpacity"},{"location":"fontlab.YPanelWidget.html#setwindowrole","text":"fontlab.YPanelWidget.setWindowRole = unbound qt slot setWindowRole of YPanelWidget type","title":"setWindowRole"},{"location":"fontlab.YPanelWidget.html#setwindowstate","text":"fontlab.YPanelWidget.setWindowState = unbound qt slot setWindowState of YPanelWidget type","title":"setWindowState"},{"location":"fontlab.YPanelWidget.html#setwindowtitle","text":"fontlab.YPanelWidget.setWindowTitle = unbound qt slot setWindowTitle of YPanelWidget type","title":"setWindowTitle"},{"location":"fontlab.YPanelWidget.html#sharedpainter","text":"fontlab.YPanelWidget.sharedPainter = unbound qt slot py_q_sharedPainter of YPanelWidget type","title":"sharedPainter"},{"location":"fontlab.YPanelWidget.html#show","text":"fontlab.YPanelWidget.show = unbound qt slot show of YPanelWidget type","title":"show"},{"location":"fontlab.YPanelWidget.html#showevent","text":"fontlab.YPanelWidget.showEvent = unbound qt slot py_q_showEvent of YPanelWidget type","title":"showEvent"},{"location":"fontlab.YPanelWidget.html#showfullscreen","text":"fontlab.YPanelWidget.showFullScreen = unbound qt slot showFullScreen of YPanelWidget type","title":"showFullScreen"},{"location":"fontlab.YPanelWidget.html#showmaximized","text":"fontlab.YPanelWidget.showMaximized = unbound qt slot showMaximized of YPanelWidget type","title":"showMaximized"},{"location":"fontlab.YPanelWidget.html#showminimized","text":"fontlab.YPanelWidget.showMinimized = unbound qt slot showMinimized of YPanelWidget type","title":"showMinimized"},{"location":"fontlab.YPanelWidget.html#shownormal","text":"fontlab.YPanelWidget.showNormal = unbound qt slot showNormal of YPanelWidget type","title":"showNormal"},{"location":"fontlab.YPanelWidget.html#signalsblocked","text":"fontlab.YPanelWidget.signalsBlocked = unbound qt slot signalsBlocked of YPanelWidget type","title":"signalsBlocked"},{"location":"fontlab.YPanelWidget.html#stackunder","text":"fontlab.YPanelWidget.stackUnder = unbound qt slot stackUnder of YPanelWidget type","title":"stackUnder"},{"location":"fontlab.YPanelWidget.html#starttimer","text":"fontlab.YPanelWidget.startTimer = unbound qt slot startTimer of YPanelWidget type","title":"startTimer"},{"location":"fontlab.YPanelWidget.html#style","text":"fontlab.YPanelWidget.style = unbound qt slot style of YPanelWidget type","title":"style"},{"location":"fontlab.YPanelWidget.html#tabletevent","text":"fontlab.YPanelWidget.tabletEvent = unbound qt slot py_q_tabletEvent of YPanelWidget type","title":"tabletEvent"},{"location":"fontlab.YPanelWidget.html#testattribute","text":"fontlab.YPanelWidget.testAttribute = unbound qt slot testAttribute of YPanelWidget type","title":"testAttribute"},{"location":"fontlab.YPanelWidget.html#thread","text":"fontlab.YPanelWidget.thread = unbound qt slot thread of YPanelWidget type","title":"thread"},{"location":"fontlab.YPanelWidget.html#timerevent","text":"fontlab.YPanelWidget.timerEvent = unbound qt slot py_q_timerEvent of YPanelWidget type","title":"timerEvent"},{"location":"fontlab.YPanelWidget.html#tr","text":"fontlab.YPanelWidget.tr = unbound qt slot tr of YPanelWidget type","title":"tr"},{"location":"fontlab.YPanelWidget.html#undermouse","text":"fontlab.YPanelWidget.underMouse = unbound qt slot underMouse of YPanelWidget type","title":"underMouse"},{"location":"fontlab.YPanelWidget.html#ungrabgesture","text":"fontlab.YPanelWidget.ungrabGesture = unbound qt slot ungrabGesture of YPanelWidget type","title":"ungrabGesture"},{"location":"fontlab.YPanelWidget.html#unsetcursor","text":"fontlab.YPanelWidget.unsetCursor = unbound qt slot unsetCursor of YPanelWidget type","title":"unsetCursor"},{"location":"fontlab.YPanelWidget.html#unsetlayoutdirection","text":"fontlab.YPanelWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of YPanelWidget type","title":"unsetLayoutDirection"},{"location":"fontlab.YPanelWidget.html#unsetlocale","text":"fontlab.YPanelWidget.unsetLocale = unbound qt slot unsetLocale of YPanelWidget type","title":"unsetLocale"},{"location":"fontlab.YPanelWidget.html#update","text":"fontlab.YPanelWidget.update = unbound qt slot update of YPanelWidget type","title":"update"},{"location":"fontlab.YPanelWidget.html#updategeometry","text":"fontlab.YPanelWidget.updateGeometry = unbound qt slot updateGeometry of YPanelWidget type","title":"updateGeometry"},{"location":"fontlab.YPanelWidget.html#visibleregion","text":"fontlab.YPanelWidget.visibleRegion = unbound qt slot visibleRegion of YPanelWidget type","title":"visibleRegion"},{"location":"fontlab.YPanelWidget.html#wheelevent","text":"fontlab.YPanelWidget.wheelEvent = unbound qt slot py_q_wheelEvent of YPanelWidget type","title":"wheelEvent"},{"location":"fontlab.YPanelWidget.html#widthmm","text":"fontlab.YPanelWidget.widthMM = unbound qt slot widthMM of YPanelWidget type","title":"widthMM"},{"location":"fontlab.YPanelWidget.html#window","text":"fontlab.YPanelWidget.window = unbound qt slot window of YPanelWidget type","title":"window"},{"location":"fontlab.YPanelWidget.html#windowflags","text":"fontlab.YPanelWidget.windowFlags = unbound qt slot windowFlags of YPanelWidget type","title":"windowFlags"},{"location":"fontlab.YPanelWidget.html#windowhandle","text":"fontlab.YPanelWidget.windowHandle = unbound qt slot windowHandle of YPanelWidget type","title":"windowHandle"},{"location":"fontlab.YPanelWidget.html#windowrole","text":"fontlab.YPanelWidget.windowRole = unbound qt slot windowRole of YPanelWidget type","title":"windowRole"},{"location":"fontlab.YPanelWidget.html#windowstate","text":"fontlab.YPanelWidget.windowState = unbound qt slot windowState of YPanelWidget type","title":"windowState"},{"location":"fontlab.YPanelWidget.html#windowtype","text":"fontlab.YPanelWidget.windowType = unbound qt slot windowType of YPanelWidget type","title":"windowType"},{"location":"fontlab.YPanelWidget.html#winid","text":"fontlab.YPanelWidget.winId = unbound qt slot winId of YPanelWidget type","title":"winId"},{"location":"fontlab.fgSymbol.html","text":"fgSymbol fontlab.fgSymbol = class fgSymbol ( object ) fgSymbol representation Constructors: fgSymbol() - default fgSymbol(fgSymbol) - copy fgSymbol(unicode) fgSymbol('name') fgSymbol(id, fgFont) fgSymbol(glyph_id, package_id) fgSymbol(unicode, 'name', id) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value clear (...) clear () clearData (...) clearData (DataCode) clearID (...) clearID () compare (...) bool compare (fgSymbol) computeID (...) bool computeID (fgFont) containsData (...) bool containsData (DataCode) data (...) QVariant data (DataCode) glyph (...) fgGlyph glyph (fgFont, bool setId) init (...) init () setData (...) setData (DataCode, QVariant d) setSterile (...) setSterile () Descriptors cr bool empty bool glyphIndex int hasName bool hasUnicode bool id unsigned long layerName string ligatureIndex int name QString pid unsigned long space bool unicode uint unicodeEnsure uint Attributes DataCode = {'Active': 9, 'ColorMark': 10, 'DoFeatures': 6, 'DoLayout': 5, 'Features': 7, 'FontSize': 3, 'GlyphIndex': 0, 'LigatureIndex': 1, 'Locked': 2, 'PackageID': 4, ...} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T clear fontlab.fgSymbol.clear = clear (...) clear() clearData fontlab.fgSymbol.clearData = clearData (...) clearData(DataCode) clearID fontlab.fgSymbol.clearID = clearID (...) clearID() compare fontlab.fgSymbol.compare = compare (...) bool compare(fgSymbol) computeID fontlab.fgSymbol.computeID = computeID (...) bool computeID(fgFont) containsData fontlab.fgSymbol.containsData = containsData (...) bool containsData(DataCode) cr fontlab.fgSymbol.cr bool data fontlab.fgSymbol.data = data (...) QVariant data(DataCode) DataCode fontlab.fgSymbol.DataCode = {'Active': 9, 'ColorMark': 10, 'DoFeatures': 6, 'DoLayout': 5, 'Features': 7, 'FontSize': 3, 'GlyphIndex': 0, 'LigatureIndex': 1, 'Locked': 2, 'PackageID': 4, ...} empty fontlab.fgSymbol.empty bool glyph fontlab.fgSymbol.glyph = glyph (...) fgGlyph glyph(fgFont, bool setId) glyphIndex fontlab.fgSymbol.glyphIndex int hasName fontlab.fgSymbol.hasName bool hasUnicode fontlab.fgSymbol.hasUnicode bool id fontlab.fgSymbol.id unsigned long init fontlab.fgSymbol.init = init (...) init() layerName fontlab.fgSymbol.layerName string ligatureIndex fontlab.fgSymbol.ligatureIndex int name fontlab.fgSymbol.name QString pid fontlab.fgSymbol.pid unsigned long setData fontlab.fgSymbol.setData = setData (...) setData(DataCode, QVariant d) setSterile fontlab.fgSymbol.setSterile = setSterile (...) setSterile() space fontlab.fgSymbol.space bool unicode fontlab.fgSymbol.unicode uint unicodeEnsure fontlab.fgSymbol.unicodeEnsure uint","title":"fgSymbol"},{"location":"fontlab.fgSymbol.html#fgsymbol","text":"","title":"fgSymbol"},{"location":"fontlab.fgSymbol.html#clear","text":"fontlab.fgSymbol.clear = clear (...) clear()","title":"clear"},{"location":"fontlab.fgSymbol.html#cleardata","text":"fontlab.fgSymbol.clearData = clearData (...) clearData(DataCode)","title":"clearData"},{"location":"fontlab.fgSymbol.html#clearid","text":"fontlab.fgSymbol.clearID = clearID (...) clearID()","title":"clearID"},{"location":"fontlab.fgSymbol.html#compare","text":"fontlab.fgSymbol.compare = compare (...) bool compare(fgSymbol)","title":"compare"},{"location":"fontlab.fgSymbol.html#computeid","text":"fontlab.fgSymbol.computeID = computeID (...) bool computeID(fgFont)","title":"computeID"},{"location":"fontlab.fgSymbol.html#containsdata","text":"fontlab.fgSymbol.containsData = containsData (...) bool containsData(DataCode)","title":"containsData"},{"location":"fontlab.fgSymbol.html#cr","text":"fontlab.fgSymbol.cr bool","title":"cr"},{"location":"fontlab.fgSymbol.html#data","text":"fontlab.fgSymbol.data = data (...) QVariant data(DataCode)","title":"data"},{"location":"fontlab.fgSymbol.html#datacode","text":"fontlab.fgSymbol.DataCode = {'Active': 9, 'ColorMark': 10, 'DoFeatures': 6, 'DoLayout': 5, 'Features': 7, 'FontSize': 3, 'GlyphIndex': 0, 'LigatureIndex': 1, 'Locked': 2, 'PackageID': 4, ...}","title":"DataCode"},{"location":"fontlab.fgSymbol.html#empty","text":"fontlab.fgSymbol.empty bool","title":"empty"},{"location":"fontlab.fgSymbol.html#glyph","text":"fontlab.fgSymbol.glyph = glyph (...) fgGlyph glyph(fgFont, bool setId)","title":"glyph"},{"location":"fontlab.fgSymbol.html#glyphindex","text":"fontlab.fgSymbol.glyphIndex int","title":"glyphIndex"},{"location":"fontlab.fgSymbol.html#hasname","text":"fontlab.fgSymbol.hasName bool","title":"hasName"},{"location":"fontlab.fgSymbol.html#hasunicode","text":"fontlab.fgSymbol.hasUnicode bool","title":"hasUnicode"},{"location":"fontlab.fgSymbol.html#id","text":"fontlab.fgSymbol.id unsigned long","title":"id"},{"location":"fontlab.fgSymbol.html#init","text":"fontlab.fgSymbol.init = init (...) init()","title":"init"},{"location":"fontlab.fgSymbol.html#layername","text":"fontlab.fgSymbol.layerName string","title":"layerName"},{"location":"fontlab.fgSymbol.html#ligatureindex","text":"fontlab.fgSymbol.ligatureIndex int","title":"ligatureIndex"},{"location":"fontlab.fgSymbol.html#name","text":"fontlab.fgSymbol.name QString","title":"name"},{"location":"fontlab.fgSymbol.html#pid","text":"fontlab.fgSymbol.pid unsigned long","title":"pid"},{"location":"fontlab.fgSymbol.html#setdata","text":"fontlab.fgSymbol.setData = setData (...) setData(DataCode, QVariant d)","title":"setData"},{"location":"fontlab.fgSymbol.html#setsterile","text":"fontlab.fgSymbol.setSterile = setSterile (...) setSterile()","title":"setSterile"},{"location":"fontlab.fgSymbol.html#space","text":"fontlab.fgSymbol.space bool","title":"space"},{"location":"fontlab.fgSymbol.html#unicode","text":"fontlab.fgSymbol.unicode uint","title":"unicode"},{"location":"fontlab.fgSymbol.html#unicodeensure","text":"fontlab.fgSymbol.unicodeEnsure uint","title":"unicodeEnsure"},{"location":"fontlab.fgSymbolList.html","text":"fgSymbolList fontlab.fgSymbolList = class fgSymbolList ( object ) fgSymbolList representation Constructors: fgSymbolList() - default fgSymbolList(fgSymbolList) - copy fgSymbolList(list(fgSymbol)) fgSymbolList(string[, bool advancedProcessing = false]) fgSymbolList(fgSymbolList, int len) fgSymbolList(fgFont, fgGlyphIDsSet) fgSymbolList(fgFont, list(glyph_id)) Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append (fgSymbol | fgSymbolList) assign (...) assign (fgFont, list(glyphsId)) at (...) fgSymbol at (index) clear (...) clear () clearData (...) clearData (int dataCode) clearString (...) clearString () compare (...) bool compare (fgSymbolList) computeString (...) computeString (bool advancedProcessing) data (...) QVariant data (int index, int dataCode[, QVariant v = QVariant()]) empty (...) bool empty () equals (...) bool equals (fgSymbolList) insert (...) insert (index, fgSymbol) last (...) fgSymbol last () limitLineLength (...) bool limitLineLength (int len) mid (...) fgSymbolList mid (int index[, int count=-1]) remove (...) remove (index, count) replace (...) replace (index, count, fgSymbolList) reserve (...) reserve (int count) restore (...) bool restore (QByteArray, list(fgFont)) set (...) set (index, fgSymbol) setData (...) setData (index, DataCode, QVariant) setGlyphsList (...) setGlyphsList (list(fgGlyph), fgFont) setIdList (...) setIdList (list(id), fgFont) setList (...) setList (fgSymbols list) setNamesList (...) setNamesList (string | QStringList) setSterile (...) setSterile () setString (...) setString (string[, bool advancedProcessing = true]) setUnicodeList (...) setUnicodeList ( list(unicodes) ) size (...) int size () store (...) QByteArray store (packageID) string (...) QString string (bool advancedProcessing) symbols (...) list(fgSymbol) symbols () Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T append fontlab.fgSymbolList.append = append (...) append(fgSymbol | fgSymbolList) assign fontlab.fgSymbolList.assign = assign (...) assign(fgFont, list(glyphsId)) at fontlab.fgSymbolList.at = at (...) fgSymbol at(index) clear fontlab.fgSymbolList.clear = clear (...) clear() clearData fontlab.fgSymbolList.clearData = clearData (...) clearData(int dataCode) clearString fontlab.fgSymbolList.clearString = clearString (...) clearString() compare fontlab.fgSymbolList.compare = compare (...) bool compare(fgSymbolList) computeString fontlab.fgSymbolList.computeString = computeString (...) computeString(bool advancedProcessing) data fontlab.fgSymbolList.data = data (...) QVariant data(int index, int dataCode[, QVariant v = QVariant()]) empty fontlab.fgSymbolList.empty = empty (...) bool empty() equals fontlab.fgSymbolList.equals = equals (...) bool equals(fgSymbolList) insert fontlab.fgSymbolList.insert = insert (...) insert(index, fgSymbol) last fontlab.fgSymbolList.last = last (...) fgSymbol last() limitLineLength fontlab.fgSymbolList.limitLineLength = limitLineLength (...) bool limitLineLength(int len) mid fontlab.fgSymbolList.mid = mid (...) fgSymbolList mid(int index[, int count=-1]) remove fontlab.fgSymbolList.remove = remove (...) remove(index, count) replace fontlab.fgSymbolList.replace = replace (...) replace(index, count, fgSymbolList) reserve fontlab.fgSymbolList.reserve = reserve (...) reserve(int count) restore fontlab.fgSymbolList.restore = restore (...) bool restore(QByteArray, list(fgFont)) set fontlab.fgSymbolList.set = set (...) set(index, fgSymbol) setData fontlab.fgSymbolList.setData = setData (...) setData(index, DataCode, QVariant) setGlyphsList fontlab.fgSymbolList.setGlyphsList = setGlyphsList (...) setGlyphsList(list(fgGlyph), fgFont) setIdList fontlab.fgSymbolList.setIdList = setIdList (...) setIdList(list(id), fgFont) setList fontlab.fgSymbolList.setList = setList (...) setList(fgSymbols list) setNamesList fontlab.fgSymbolList.setNamesList = setNamesList (...) setNamesList(string | QStringList) setSterile fontlab.fgSymbolList.setSterile = setSterile (...) setSterile() setString fontlab.fgSymbolList.setString = setString (...) setString(string[, bool advancedProcessing = true]) setUnicodeList fontlab.fgSymbolList.setUnicodeList = setUnicodeList (...) setUnicodeList( list(unicodes) ) size fontlab.fgSymbolList.size = size (...) int size() store fontlab.fgSymbolList.store = store (...) QByteArray store(packageID) string fontlab.fgSymbolList.string = string (...) QString string(bool advancedProcessing) symbols fontlab.fgSymbolList.symbols = symbols (...) list(fgSymbol) symbols()","title":"fgSymbolList"},{"location":"fontlab.fgSymbolList.html#fgsymbollist","text":"","title":"fgSymbolList"},{"location":"fontlab.fgSymbolList.html#append","text":"fontlab.fgSymbolList.append = append (...) append(fgSymbol | fgSymbolList)","title":"append"},{"location":"fontlab.fgSymbolList.html#assign","text":"fontlab.fgSymbolList.assign = assign (...) assign(fgFont, list(glyphsId))","title":"assign"},{"location":"fontlab.fgSymbolList.html#at","text":"fontlab.fgSymbolList.at = at (...) fgSymbol at(index)","title":"at"},{"location":"fontlab.fgSymbolList.html#clear","text":"fontlab.fgSymbolList.clear = clear (...) clear()","title":"clear"},{"location":"fontlab.fgSymbolList.html#cleardata","text":"fontlab.fgSymbolList.clearData = clearData (...) clearData(int dataCode)","title":"clearData"},{"location":"fontlab.fgSymbolList.html#clearstring","text":"fontlab.fgSymbolList.clearString = clearString (...) clearString()","title":"clearString"},{"location":"fontlab.fgSymbolList.html#compare","text":"fontlab.fgSymbolList.compare = compare (...) bool compare(fgSymbolList)","title":"compare"},{"location":"fontlab.fgSymbolList.html#computestring","text":"fontlab.fgSymbolList.computeString = computeString (...) computeString(bool advancedProcessing)","title":"computeString"},{"location":"fontlab.fgSymbolList.html#data","text":"fontlab.fgSymbolList.data = data (...) QVariant data(int index, int dataCode[, QVariant v = QVariant()])","title":"data"},{"location":"fontlab.fgSymbolList.html#empty","text":"fontlab.fgSymbolList.empty = empty (...) bool empty()","title":"empty"},{"location":"fontlab.fgSymbolList.html#equals","text":"fontlab.fgSymbolList.equals = equals (...) bool equals(fgSymbolList)","title":"equals"},{"location":"fontlab.fgSymbolList.html#insert","text":"fontlab.fgSymbolList.insert = insert (...) insert(index, fgSymbol)","title":"insert"},{"location":"fontlab.fgSymbolList.html#last","text":"fontlab.fgSymbolList.last = last (...) fgSymbol last()","title":"last"},{"location":"fontlab.fgSymbolList.html#limitlinelength","text":"fontlab.fgSymbolList.limitLineLength = limitLineLength (...) bool limitLineLength(int len)","title":"limitLineLength"},{"location":"fontlab.fgSymbolList.html#mid","text":"fontlab.fgSymbolList.mid = mid (...) fgSymbolList mid(int index[, int count=-1])","title":"mid"},{"location":"fontlab.fgSymbolList.html#remove","text":"fontlab.fgSymbolList.remove = remove (...) remove(index, count)","title":"remove"},{"location":"fontlab.fgSymbolList.html#replace","text":"fontlab.fgSymbolList.replace = replace (...) replace(index, count, fgSymbolList)","title":"replace"},{"location":"fontlab.fgSymbolList.html#reserve","text":"fontlab.fgSymbolList.reserve = reserve (...) reserve(int count)","title":"reserve"},{"location":"fontlab.fgSymbolList.html#restore","text":"fontlab.fgSymbolList.restore = restore (...) bool restore(QByteArray, list(fgFont))","title":"restore"},{"location":"fontlab.fgSymbolList.html#set","text":"fontlab.fgSymbolList.set = set (...) set(index, fgSymbol)","title":"set"},{"location":"fontlab.fgSymbolList.html#setdata","text":"fontlab.fgSymbolList.setData = setData (...) setData(index, DataCode, QVariant)","title":"setData"},{"location":"fontlab.fgSymbolList.html#setglyphslist","text":"fontlab.fgSymbolList.setGlyphsList = setGlyphsList (...) setGlyphsList(list(fgGlyph), fgFont)","title":"setGlyphsList"},{"location":"fontlab.fgSymbolList.html#setidlist","text":"fontlab.fgSymbolList.setIdList = setIdList (...) setIdList(list(id), fgFont)","title":"setIdList"},{"location":"fontlab.fgSymbolList.html#setlist","text":"fontlab.fgSymbolList.setList = setList (...) setList(fgSymbols list)","title":"setList"},{"location":"fontlab.fgSymbolList.html#setnameslist","text":"fontlab.fgSymbolList.setNamesList = setNamesList (...) setNamesList(string | QStringList)","title":"setNamesList"},{"location":"fontlab.fgSymbolList.html#setsterile","text":"fontlab.fgSymbolList.setSterile = setSterile (...) setSterile()","title":"setSterile"},{"location":"fontlab.fgSymbolList.html#setstring","text":"fontlab.fgSymbolList.setString = setString (...) setString(string[, bool advancedProcessing = true])","title":"setString"},{"location":"fontlab.fgSymbolList.html#setunicodelist","text":"fontlab.fgSymbolList.setUnicodeList = setUnicodeList (...) setUnicodeList( list(unicodes) )","title":"setUnicodeList"},{"location":"fontlab.fgSymbolList.html#size","text":"fontlab.fgSymbolList.size = size (...) int size()","title":"size"},{"location":"fontlab.fgSymbolList.html#store","text":"fontlab.fgSymbolList.store = store (...) QByteArray store(packageID)","title":"store"},{"location":"fontlab.fgSymbolList.html#string","text":"fontlab.fgSymbolList.string = string (...) QString string(bool advancedProcessing)","title":"string"},{"location":"fontlab.fgSymbolList.html#symbols","text":"fontlab.fgSymbolList.symbols = symbols (...) list(fgSymbol) symbols()","title":"symbols"},{"location":"fontlab.flAbstractEditor.html","text":"flAbstractEditor fontlab.flAbstractEditor = class flAbstractEditor ( object ) flAbstractEditor representation Constructors: flAbstractEditor() flAbstractEditor(flObject) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value activate (...) activate () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivate (...) deactivate () flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type widget QWidget* Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activate fontlab.flAbstractEditor.activate = activate (...) activate() changed fontlab.flAbstractEditor.changed = changed (...) changed() checkInitHistoryState fontlab.flAbstractEditor.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flAbstractEditor.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flAbstractEditor.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flAbstractEditor.clearFlags = clearFlags (...) clearFlags() clone fontlab.flAbstractEditor.clone = clone (...) Clone the object cloneObject fontlab.flAbstractEditor.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flAbstractEditor.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flAbstractEditor.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flAbstractEditor.currentHistoryState = currentHistoryState (...) currentHistoryIx() deactivate fontlab.flAbstractEditor.deactivate = deactivate (...) deactivate() flag fontlab.flAbstractEditor.flag = flag (...) flag(uint f) flObjectFlags fontlab.flAbstractEditor.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flAbstractEditor.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flAbstractEditor.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flAbstractEditor.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flAbstractEditor.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flAbstractEditor.hasChanges bool hasHistoryState fontlab.flAbstractEditor.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flAbstractEditor.hasHistoryStates bool haveObject fontlab.flAbstractEditor.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flAbstractEditor.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flAbstractEditor.id object id independedAll fontlab.flAbstractEditor.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flAbstractEditor.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flAbstractEditor.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flAbstractEditor.isChanged bool isEqual fontlab.flAbstractEditor.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flAbstractEditor.isNull bool isPresent fontlab.flAbstractEditor.isPresent bool isReleased fontlab.flAbstractEditor.isReleased bool isValid fontlab.flAbstractEditor.isValid bool name fontlab.flAbstractEditor.name object name refCnt fontlab.flAbstractEditor.refCnt object references count release fontlab.flAbstractEditor.release = release (...) release() remove fontlab.flAbstractEditor.remove = remove (...) remove([flObject]) removeChild fontlab.flAbstractEditor.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flAbstractEditor.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flAbstractEditor.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flAbstractEditor.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flAbstractEditor.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flAbstractEditor.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flAbstractEditor.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flAbstractEditor.tag = tag (...) tag([string]) type fontlab.flAbstractEditor.type object type update fontlab.flAbstractEditor.update = update (...) update() widget fontlab.flAbstractEditor.widget QWidget*","title":"flAbstractEditor"},{"location":"fontlab.flAbstractEditor.html#flabstracteditor","text":"","title":"flAbstractEditor"},{"location":"fontlab.flAbstractEditor.html#activate","text":"fontlab.flAbstractEditor.activate = activate (...) activate()","title":"activate"},{"location":"fontlab.flAbstractEditor.html#changed","text":"fontlab.flAbstractEditor.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flAbstractEditor.html#checkinithistorystate","text":"fontlab.flAbstractEditor.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flAbstractEditor.html#clearabovehistory","text":"fontlab.flAbstractEditor.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flAbstractEditor.html#clearflag","text":"fontlab.flAbstractEditor.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flAbstractEditor.html#clearflags","text":"fontlab.flAbstractEditor.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flAbstractEditor.html#clone","text":"fontlab.flAbstractEditor.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flAbstractEditor.html#cloneobject","text":"fontlab.flAbstractEditor.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flAbstractEditor.html#createhistorystate","text":"fontlab.flAbstractEditor.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flAbstractEditor.html#createobject","text":"fontlab.flAbstractEditor.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flAbstractEditor.html#currenthistorystate","text":"fontlab.flAbstractEditor.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flAbstractEditor.html#deactivate","text":"fontlab.flAbstractEditor.deactivate = deactivate (...) deactivate()","title":"deactivate"},{"location":"fontlab.flAbstractEditor.html#flag","text":"fontlab.flAbstractEditor.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flAbstractEditor.html#flobjectflags","text":"fontlab.flAbstractEditor.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flAbstractEditor.html#getproperties","text":"fontlab.flAbstractEditor.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flAbstractEditor.html#getproperty","text":"fontlab.flAbstractEditor.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flAbstractEditor.html#getpropertyfloat","text":"fontlab.flAbstractEditor.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flAbstractEditor.html#getpropertyint","text":"fontlab.flAbstractEditor.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flAbstractEditor.html#haschanges","text":"fontlab.flAbstractEditor.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flAbstractEditor.html#hashistorystate","text":"fontlab.flAbstractEditor.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flAbstractEditor.html#hashistorystates","text":"fontlab.flAbstractEditor.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flAbstractEditor.html#haveobject","text":"fontlab.flAbstractEditor.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flAbstractEditor.html#historystates","text":"fontlab.flAbstractEditor.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flAbstractEditor.html#id","text":"fontlab.flAbstractEditor.id object id","title":"id"},{"location":"fontlab.flAbstractEditor.html#independedall","text":"fontlab.flAbstractEditor.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flAbstractEditor.html#initialhistorystate","text":"fontlab.flAbstractEditor.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flAbstractEditor.html#instancetype","text":"fontlab.flAbstractEditor.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flAbstractEditor.html#ischanged","text":"fontlab.flAbstractEditor.isChanged bool","title":"isChanged"},{"location":"fontlab.flAbstractEditor.html#isequal","text":"fontlab.flAbstractEditor.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flAbstractEditor.html#isnull","text":"fontlab.flAbstractEditor.isNull bool","title":"isNull"},{"location":"fontlab.flAbstractEditor.html#ispresent","text":"fontlab.flAbstractEditor.isPresent bool","title":"isPresent"},{"location":"fontlab.flAbstractEditor.html#isreleased","text":"fontlab.flAbstractEditor.isReleased bool","title":"isReleased"},{"location":"fontlab.flAbstractEditor.html#isvalid","text":"fontlab.flAbstractEditor.isValid bool","title":"isValid"},{"location":"fontlab.flAbstractEditor.html#name","text":"fontlab.flAbstractEditor.name object name","title":"name"},{"location":"fontlab.flAbstractEditor.html#refcnt","text":"fontlab.flAbstractEditor.refCnt object references count","title":"refCnt"},{"location":"fontlab.flAbstractEditor.html#release","text":"fontlab.flAbstractEditor.release = release (...) release()","title":"release"},{"location":"fontlab.flAbstractEditor.html#remove","text":"fontlab.flAbstractEditor.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flAbstractEditor.html#removechild","text":"fontlab.flAbstractEditor.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flAbstractEditor.html#removeproperty","text":"fontlab.flAbstractEditor.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flAbstractEditor.html#restorehistorystate","text":"fontlab.flAbstractEditor.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flAbstractEditor.html#setflag","text":"fontlab.flAbstractEditor.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flAbstractEditor.html#setproperty","text":"fontlab.flAbstractEditor.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flAbstractEditor.html#setpropertyfloat","text":"fontlab.flAbstractEditor.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flAbstractEditor.html#setpropertyint","text":"fontlab.flAbstractEditor.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flAbstractEditor.html#tag","text":"fontlab.flAbstractEditor.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flAbstractEditor.html#type","text":"fontlab.flAbstractEditor.type object type","title":"type"},{"location":"fontlab.flAbstractEditor.html#update","text":"fontlab.flAbstractEditor.update = update (...) update()","title":"update"},{"location":"fontlab.flAbstractEditor.html#widget","text":"fontlab.flAbstractEditor.widget QWidget*","title":"widget"},{"location":"fontlab.flAbstractVectorNode.html","text":"flAbstractVectorNode fontlab.flAbstractVectorNode = class flAbstractVectorNode ( object ) flAbstractVectorNode representation Constructors: flAbstractVectorNode(flAbstractVectorNode) flAbstractVectorNode(flObject) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value angleTo (...) double angleTo (QPointF p) applyTransform (...) applyTransform (QTransform) canBeHobby (...) bool canBeHobby () canBeSmooth (...) bool canBeSmooth () canCollapse (...) bool canCollapse () canImprove (...) bool canImprove () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVectors (...) bool checkVectors () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearStored (...) clearStored () clone (...) Clone the object cloneMapped (...) flNode cloneMapped (QTransform) collapseHandles (...) bool collapseHandles () convertToCurve (...) bool convertToCurve ([bool smooth = false]) convertToCurves (...) bool convertToCurves () convertToLine (...) bool convertToLine () copyFrom (...) copyFrom (Node[, withSelected=False]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (Node/QPointF) flag (...) flag (uint f) getLines (...) (QLineF, QLineF)/None getLines () getOn (...) Node/None getOn () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isCorner (...) bool isCorner ([double a = 10.]) isCurve (...) bool isCurve () isEqual (...) isEqual (flObject) isEqualTo (...) bool isEqualTo (Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme (...) bool isExtreme (bool x[, bool open = true[, double limit = 0]]) isFirst (...) bool isFirst () isG2 (...) bool isG2 (double tolerance) isInternal (...) bool isInternal (bool clockwise) isInterpolated (...) bool isInterpolated (bool x) isLast (...) bool isLast () isOff (...) bool isOff () isOn (...) bool isOn () isSmartAngle (...) bool isSmartAngle () makeStart (...) bool makeStart () moveBy (...) moveBy (float dx, float dy[, bool round=false] nextNode (...) Node/None nextNode ([string nodeType= [, int searchDepth=1]]) pointG2 (...) QPointF/None pointG2 () prevNode (...) Node/None prevNode ([string nodeType= [, int searchDepth=1]]) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreCoordinates (...) restoreCoordinates () restoreHistoryState (...) restoreHistoryState (uint history_ix) rotateBy (...) rotateBy (valueDegree[, QPointF origin=(0, 0)]) round (...) round () - Round the node's coordinate scaleBy (...) scaleBy (valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) setExtraLast (...) setExtraLast (bool) setFlag (...) setFlag (uint f [, bool value]) setNextSmooth (...) setNextSmooth (QPointF base) setPosition (...) void setPosition (QPointF) setPrevSmooth (...) setPrevSmooth (QPointF base) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSmartAngleEnbl (...) bool setSmartAngleEnbl (bool) setSmartSharp (...) bool setSmartSharp ([double tension = 0.6]) skewBy (...) skewBy (valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartMove (...) list(uint) smartMove (offset) smartSetXY (...) smartSetXY (QPointF) storeCoordinates (...) storeCoordinates () storeTestParameters (...) storeTestParameters () tag (...) tag ([string]) transformBy (...) transformBy (QTransform tx[, QPointF origin=(0, 0)]) update (...) update () updateG2 (...) bool updateG2 () updateSmooth (...) updateSmooth ([bool extended_neibh=true]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors angle angle contour The parent Contour or None if not present g2 g2 hasChanges bool hasHistoryStates bool hobby hobby id object id index The index of the node in parent's contour (if present, otherwise -1) interpolated interpolated interpolatedX interpolatedX interpolatedY interpolatedY isChanged bool isNull bool isPresent bool isReleased bool isSelectedAlone bool isTerminal bool isValid bool name object name nodeState nodeState position Coordinates of the node as QPointF preview preview refCnt object references count scv scv selected The selected flag smartAngleR smartAngleR smooth The smooth flag state state type The node type x The x coordinate of the node y The y coordinate of the node Attributes NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} angle fontlab.flAbstractVectorNode.angle angle angleTo fontlab.flAbstractVectorNode.angleTo = angleTo (...) double angleTo(QPointF p) applyTransform fontlab.flAbstractVectorNode.applyTransform = applyTransform (...) applyTransform(QTransform) canBeHobby fontlab.flAbstractVectorNode.canBeHobby = canBeHobby (...) bool canBeHobby() canBeSmooth fontlab.flAbstractVectorNode.canBeSmooth = canBeSmooth (...) bool canBeSmooth() canCollapse fontlab.flAbstractVectorNode.canCollapse = canCollapse (...) bool canCollapse() canImprove fontlab.flAbstractVectorNode.canImprove = canImprove (...) bool canImprove() changed fontlab.flAbstractVectorNode.changed = changed (...) changed() checkInitHistoryState fontlab.flAbstractVectorNode.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) checkVectors fontlab.flAbstractVectorNode.checkVectors = checkVectors (...) bool checkVectors() clearAboveHistory fontlab.flAbstractVectorNode.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flAbstractVectorNode.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flAbstractVectorNode.clearFlags = clearFlags (...) clearFlags() clearStored fontlab.flAbstractVectorNode.clearStored = clearStored (...) clearStored() clone fontlab.flAbstractVectorNode.clone = clone (...) Clone the object cloneMapped fontlab.flAbstractVectorNode.cloneMapped = cloneMapped (...) flNode cloneMapped(QTransform) cloneObject fontlab.flAbstractVectorNode.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); collapseHandles fontlab.flAbstractVectorNode.collapseHandles = collapseHandles (...) bool collapseHandles() contour fontlab.flAbstractVectorNode.contour The parent Contour or None if not present convertToCurve fontlab.flAbstractVectorNode.convertToCurve = convertToCurve (...) bool convertToCurve([bool smooth = false]) convertToCurves fontlab.flAbstractVectorNode.convertToCurves = convertToCurves (...) bool convertToCurves() convertToLine fontlab.flAbstractVectorNode.convertToLine = convertToLine (...) bool convertToLine() copyFrom fontlab.flAbstractVectorNode.copyFrom = copyFrom (...) copyFrom(Node[, withSelected=False]) createHistoryState fontlab.flAbstractVectorNode.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flAbstractVectorNode.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flAbstractVectorNode.currentHistoryState = currentHistoryState (...) currentHistoryIx() distanceTo fontlab.flAbstractVectorNode.distanceTo = distanceTo (...) double distanceTo(Node/QPointF) flag fontlab.flAbstractVectorNode.flag = flag (...) flag(uint f) flObjectFlags fontlab.flAbstractVectorNode.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} g2 fontlab.flAbstractVectorNode.g2 g2 getLines fontlab.flAbstractVectorNode.getLines = getLines (...) (QLineF, QLineF)/None getLines() getOn fontlab.flAbstractVectorNode.getOn = getOn (...) Node/None getOn() getProperties fontlab.flAbstractVectorNode.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flAbstractVectorNode.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flAbstractVectorNode.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flAbstractVectorNode.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flAbstractVectorNode.hasChanges bool hasHistoryState fontlab.flAbstractVectorNode.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flAbstractVectorNode.hasHistoryStates bool haveObject fontlab.flAbstractVectorNode.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flAbstractVectorNode.historyStates = historyStates (...) historyStates(bool accepted_state) hobby fontlab.flAbstractVectorNode.hobby hobby id fontlab.flAbstractVectorNode.id object id improve fontlab.flAbstractVectorNode.improve = improve (...) bool improve() independedAll fontlab.flAbstractVectorNode.independedAll = independedAll (...) independedAll() index fontlab.flAbstractVectorNode.index The index of the node in parent's contour (if present, otherwise -1) initialHistoryState fontlab.flAbstractVectorNode.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flAbstractVectorNode.instanceType = instanceType (...) int instanceType(); interpolated fontlab.flAbstractVectorNode.interpolated interpolated interpolatedX fontlab.flAbstractVectorNode.interpolatedX interpolatedX interpolatedY fontlab.flAbstractVectorNode.interpolatedY interpolatedY isChanged fontlab.flAbstractVectorNode.isChanged bool isCorner fontlab.flAbstractVectorNode.isCorner = isCorner (...) bool isCorner([double a = 10.]) isCurve fontlab.flAbstractVectorNode.isCurve = isCurve (...) bool isCurve() isEqual fontlab.flAbstractVectorNode.isEqual = isEqual (...) isEqual(flObject) isEqualTo fontlab.flAbstractVectorNode.isEqualTo = isEqualTo (...) bool isEqualTo(Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme fontlab.flAbstractVectorNode.isExtreme = isExtreme (...) bool isExtreme(bool x[, bool open = true[, double limit = 0]]) isFirst fontlab.flAbstractVectorNode.isFirst = isFirst (...) bool isFirst() isG2 fontlab.flAbstractVectorNode.isG2 = isG2 (...) bool isG2(double tolerance) isInternal fontlab.flAbstractVectorNode.isInternal = isInternal (...) bool isInternal(bool clockwise) isInterpolated fontlab.flAbstractVectorNode.isInterpolated = isInterpolated (...) bool isInterpolated(bool x) isLast fontlab.flAbstractVectorNode.isLast = isLast (...) bool isLast() isNull fontlab.flAbstractVectorNode.isNull bool isOff fontlab.flAbstractVectorNode.isOff = isOff (...) bool isOff() isOn fontlab.flAbstractVectorNode.isOn = isOn (...) bool isOn() isPresent fontlab.flAbstractVectorNode.isPresent bool isReleased fontlab.flAbstractVectorNode.isReleased bool isSelectedAlone fontlab.flAbstractVectorNode.isSelectedAlone bool isSmartAngle fontlab.flAbstractVectorNode.isSmartAngle = isSmartAngle (...) bool isSmartAngle() isTerminal fontlab.flAbstractVectorNode.isTerminal bool isValid fontlab.flAbstractVectorNode.isValid bool makeStart fontlab.flAbstractVectorNode.makeStart = makeStart (...) bool makeStart() moveBy fontlab.flAbstractVectorNode.moveBy = moveBy (...) moveBy(float dx, float dy[, bool round=false] name fontlab.flAbstractVectorNode.name object name nextNode fontlab.flAbstractVectorNode.nextNode = nextNode (...) Node/None nextNode([string nodeType= [, int searchDepth=1]]) NodeKind fontlab.flAbstractVectorNode.NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} nodeState fontlab.flAbstractVectorNode.nodeState nodeState NodeType fontlab.flAbstractVectorNode.NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} pointG2 fontlab.flAbstractVectorNode.pointG2 = pointG2 (...) QPointF/None pointG2() position fontlab.flAbstractVectorNode.position Coordinates of the node as QPointF preview fontlab.flAbstractVectorNode.preview preview prevNode fontlab.flAbstractVectorNode.prevNode = prevNode (...) Node/None prevNode([string nodeType= [, int searchDepth=1]]) refCnt fontlab.flAbstractVectorNode.refCnt object references count release fontlab.flAbstractVectorNode.release = release (...) release() remove fontlab.flAbstractVectorNode.remove = remove (...) remove([flObject]) removeChild fontlab.flAbstractVectorNode.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flAbstractVectorNode.removeProperty = removeProperty (...) removeProperty('key') restoreCoordinates fontlab.flAbstractVectorNode.restoreCoordinates = restoreCoordinates (...) restoreCoordinates() restoreHistoryState fontlab.flAbstractVectorNode.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) rotateBy fontlab.flAbstractVectorNode.rotateBy = rotateBy (...) rotateBy(valueDegree[, QPointF origin=(0, 0)]) round fontlab.flAbstractVectorNode.round = round (...) round() - Round the node's coordinate scaleBy fontlab.flAbstractVectorNode.scaleBy = scaleBy (...) scaleBy(valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) scv fontlab.flAbstractVectorNode.scv scv selected fontlab.flAbstractVectorNode.selected The selected flag setExtraLast fontlab.flAbstractVectorNode.setExtraLast = setExtraLast (...) setExtraLast(bool) setFlag fontlab.flAbstractVectorNode.setFlag = setFlag (...) setFlag(uint f [, bool value]) setNextSmooth fontlab.flAbstractVectorNode.setNextSmooth = setNextSmooth (...) setNextSmooth(QPointF base) setPosition fontlab.flAbstractVectorNode.setPosition = setPosition (...) void setPosition(QPointF) setPrevSmooth fontlab.flAbstractVectorNode.setPrevSmooth = setPrevSmooth (...) setPrevSmooth(QPointF base) setProperty fontlab.flAbstractVectorNode.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flAbstractVectorNode.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flAbstractVectorNode.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSmartAngleEnbl fontlab.flAbstractVectorNode.setSmartAngleEnbl = setSmartAngleEnbl (...) bool setSmartAngleEnbl(bool) setSmartSharp fontlab.flAbstractVectorNode.setSmartSharp = setSmartSharp (...) bool setSmartSharp([double tension = 0.6]) skewBy fontlab.flAbstractVectorNode.skewBy = skewBy (...) skewBy(valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartAngleR fontlab.flAbstractVectorNode.smartAngleR smartAngleR smartMove fontlab.flAbstractVectorNode.smartMove = smartMove (...) list(uint) smartMove(offset) smartSetXY fontlab.flAbstractVectorNode.smartSetXY = smartSetXY (...) smartSetXY(QPointF) smooth fontlab.flAbstractVectorNode.smooth The smooth flag state fontlab.flAbstractVectorNode.state state storeCoordinates fontlab.flAbstractVectorNode.storeCoordinates = storeCoordinates (...) storeCoordinates() storeTestParameters fontlab.flAbstractVectorNode.storeTestParameters = storeTestParameters (...) storeTestParameters() tag fontlab.flAbstractVectorNode.tag = tag (...) tag([string]) transformBy fontlab.flAbstractVectorNode.transformBy = transformBy (...) transformBy(QTransform tx[, QPointF origin=(0, 0)]) type fontlab.flAbstractVectorNode.type The node type update fontlab.flAbstractVectorNode.update = update (...) update() updateG2 fontlab.flAbstractVectorNode.updateG2 = updateG2 (...) bool updateG2() updateSmooth fontlab.flAbstractVectorNode.updateSmooth = updateSmooth (...) updateSmooth([bool extended_neibh=true]) x fontlab.flAbstractVectorNode.x The x coordinate of the node y fontlab.flAbstractVectorNode.y The y coordinate of the node","title":"flAbstractVectorNode"},{"location":"fontlab.flAbstractVectorNode.html#flabstractvectornode","text":"","title":"flAbstractVectorNode"},{"location":"fontlab.flAbstractVectorNode.html#angle","text":"fontlab.flAbstractVectorNode.angle angle","title":"angle"},{"location":"fontlab.flAbstractVectorNode.html#angleto","text":"fontlab.flAbstractVectorNode.angleTo = angleTo (...) double angleTo(QPointF p)","title":"angleTo"},{"location":"fontlab.flAbstractVectorNode.html#applytransform","text":"fontlab.flAbstractVectorNode.applyTransform = applyTransform (...) applyTransform(QTransform)","title":"applyTransform"},{"location":"fontlab.flAbstractVectorNode.html#canbehobby","text":"fontlab.flAbstractVectorNode.canBeHobby = canBeHobby (...) bool canBeHobby()","title":"canBeHobby"},{"location":"fontlab.flAbstractVectorNode.html#canbesmooth","text":"fontlab.flAbstractVectorNode.canBeSmooth = canBeSmooth (...) bool canBeSmooth()","title":"canBeSmooth"},{"location":"fontlab.flAbstractVectorNode.html#cancollapse","text":"fontlab.flAbstractVectorNode.canCollapse = canCollapse (...) bool canCollapse()","title":"canCollapse"},{"location":"fontlab.flAbstractVectorNode.html#canimprove","text":"fontlab.flAbstractVectorNode.canImprove = canImprove (...) bool canImprove()","title":"canImprove"},{"location":"fontlab.flAbstractVectorNode.html#changed","text":"fontlab.flAbstractVectorNode.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flAbstractVectorNode.html#checkinithistorystate","text":"fontlab.flAbstractVectorNode.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flAbstractVectorNode.html#checkvectors","text":"fontlab.flAbstractVectorNode.checkVectors = checkVectors (...) bool checkVectors()","title":"checkVectors"},{"location":"fontlab.flAbstractVectorNode.html#clearabovehistory","text":"fontlab.flAbstractVectorNode.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flAbstractVectorNode.html#clearflag","text":"fontlab.flAbstractVectorNode.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flAbstractVectorNode.html#clearflags","text":"fontlab.flAbstractVectorNode.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flAbstractVectorNode.html#clearstored","text":"fontlab.flAbstractVectorNode.clearStored = clearStored (...) clearStored()","title":"clearStored"},{"location":"fontlab.flAbstractVectorNode.html#clone","text":"fontlab.flAbstractVectorNode.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flAbstractVectorNode.html#clonemapped","text":"fontlab.flAbstractVectorNode.cloneMapped = cloneMapped (...) flNode cloneMapped(QTransform)","title":"cloneMapped"},{"location":"fontlab.flAbstractVectorNode.html#cloneobject","text":"fontlab.flAbstractVectorNode.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flAbstractVectorNode.html#collapsehandles","text":"fontlab.flAbstractVectorNode.collapseHandles = collapseHandles (...) bool collapseHandles()","title":"collapseHandles"},{"location":"fontlab.flAbstractVectorNode.html#contour","text":"fontlab.flAbstractVectorNode.contour The parent Contour or None if not present","title":"contour"},{"location":"fontlab.flAbstractVectorNode.html#converttocurve","text":"fontlab.flAbstractVectorNode.convertToCurve = convertToCurve (...) bool convertToCurve([bool smooth = false])","title":"convertToCurve"},{"location":"fontlab.flAbstractVectorNode.html#converttocurves","text":"fontlab.flAbstractVectorNode.convertToCurves = convertToCurves (...) bool convertToCurves()","title":"convertToCurves"},{"location":"fontlab.flAbstractVectorNode.html#converttoline","text":"fontlab.flAbstractVectorNode.convertToLine = convertToLine (...) bool convertToLine()","title":"convertToLine"},{"location":"fontlab.flAbstractVectorNode.html#copyfrom","text":"fontlab.flAbstractVectorNode.copyFrom = copyFrom (...) copyFrom(Node[, withSelected=False])","title":"copyFrom"},{"location":"fontlab.flAbstractVectorNode.html#createhistorystate","text":"fontlab.flAbstractVectorNode.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flAbstractVectorNode.html#createobject","text":"fontlab.flAbstractVectorNode.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flAbstractVectorNode.html#currenthistorystate","text":"fontlab.flAbstractVectorNode.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flAbstractVectorNode.html#distanceto","text":"fontlab.flAbstractVectorNode.distanceTo = distanceTo (...) double distanceTo(Node/QPointF)","title":"distanceTo"},{"location":"fontlab.flAbstractVectorNode.html#flag","text":"fontlab.flAbstractVectorNode.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flAbstractVectorNode.html#flobjectflags","text":"fontlab.flAbstractVectorNode.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flAbstractVectorNode.html#g2","text":"fontlab.flAbstractVectorNode.g2 g2","title":"g2"},{"location":"fontlab.flAbstractVectorNode.html#getlines","text":"fontlab.flAbstractVectorNode.getLines = getLines (...) (QLineF, QLineF)/None getLines()","title":"getLines"},{"location":"fontlab.flAbstractVectorNode.html#geton","text":"fontlab.flAbstractVectorNode.getOn = getOn (...) Node/None getOn()","title":"getOn"},{"location":"fontlab.flAbstractVectorNode.html#getproperties","text":"fontlab.flAbstractVectorNode.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flAbstractVectorNode.html#getproperty","text":"fontlab.flAbstractVectorNode.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flAbstractVectorNode.html#getpropertyfloat","text":"fontlab.flAbstractVectorNode.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flAbstractVectorNode.html#getpropertyint","text":"fontlab.flAbstractVectorNode.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flAbstractVectorNode.html#haschanges","text":"fontlab.flAbstractVectorNode.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flAbstractVectorNode.html#hashistorystate","text":"fontlab.flAbstractVectorNode.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flAbstractVectorNode.html#hashistorystates","text":"fontlab.flAbstractVectorNode.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flAbstractVectorNode.html#haveobject","text":"fontlab.flAbstractVectorNode.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flAbstractVectorNode.html#historystates","text":"fontlab.flAbstractVectorNode.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flAbstractVectorNode.html#hobby","text":"fontlab.flAbstractVectorNode.hobby hobby","title":"hobby"},{"location":"fontlab.flAbstractVectorNode.html#id","text":"fontlab.flAbstractVectorNode.id object id","title":"id"},{"location":"fontlab.flAbstractVectorNode.html#improve","text":"fontlab.flAbstractVectorNode.improve = improve (...) bool improve()","title":"improve"},{"location":"fontlab.flAbstractVectorNode.html#independedall","text":"fontlab.flAbstractVectorNode.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flAbstractVectorNode.html#index","text":"fontlab.flAbstractVectorNode.index The index of the node in parent's contour (if present, otherwise -1)","title":"index"},{"location":"fontlab.flAbstractVectorNode.html#initialhistorystate","text":"fontlab.flAbstractVectorNode.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flAbstractVectorNode.html#instancetype","text":"fontlab.flAbstractVectorNode.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flAbstractVectorNode.html#interpolated","text":"fontlab.flAbstractVectorNode.interpolated interpolated","title":"interpolated"},{"location":"fontlab.flAbstractVectorNode.html#interpolatedx","text":"fontlab.flAbstractVectorNode.interpolatedX interpolatedX","title":"interpolatedX"},{"location":"fontlab.flAbstractVectorNode.html#interpolatedy","text":"fontlab.flAbstractVectorNode.interpolatedY interpolatedY","title":"interpolatedY"},{"location":"fontlab.flAbstractVectorNode.html#ischanged","text":"fontlab.flAbstractVectorNode.isChanged bool","title":"isChanged"},{"location":"fontlab.flAbstractVectorNode.html#iscorner","text":"fontlab.flAbstractVectorNode.isCorner = isCorner (...) bool isCorner([double a = 10.])","title":"isCorner"},{"location":"fontlab.flAbstractVectorNode.html#iscurve","text":"fontlab.flAbstractVectorNode.isCurve = isCurve (...) bool isCurve()","title":"isCurve"},{"location":"fontlab.flAbstractVectorNode.html#isequal","text":"fontlab.flAbstractVectorNode.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flAbstractVectorNode.html#isequalto","text":"fontlab.flAbstractVectorNode.isEqualTo = isEqualTo (...) bool isEqualTo(Node[, tolerance=0.1[, offset=QPointF(0, 0)]])","title":"isEqualTo"},{"location":"fontlab.flAbstractVectorNode.html#isextreme","text":"fontlab.flAbstractVectorNode.isExtreme = isExtreme (...) bool isExtreme(bool x[, bool open = true[, double limit = 0]])","title":"isExtreme"},{"location":"fontlab.flAbstractVectorNode.html#isfirst","text":"fontlab.flAbstractVectorNode.isFirst = isFirst (...) bool isFirst()","title":"isFirst"},{"location":"fontlab.flAbstractVectorNode.html#isg2","text":"fontlab.flAbstractVectorNode.isG2 = isG2 (...) bool isG2(double tolerance)","title":"isG2"},{"location":"fontlab.flAbstractVectorNode.html#isinternal","text":"fontlab.flAbstractVectorNode.isInternal = isInternal (...) bool isInternal(bool clockwise)","title":"isInternal"},{"location":"fontlab.flAbstractVectorNode.html#isinterpolated","text":"fontlab.flAbstractVectorNode.isInterpolated = isInterpolated (...) bool isInterpolated(bool x)","title":"isInterpolated"},{"location":"fontlab.flAbstractVectorNode.html#islast","text":"fontlab.flAbstractVectorNode.isLast = isLast (...) bool isLast()","title":"isLast"},{"location":"fontlab.flAbstractVectorNode.html#isnull","text":"fontlab.flAbstractVectorNode.isNull bool","title":"isNull"},{"location":"fontlab.flAbstractVectorNode.html#isoff","text":"fontlab.flAbstractVectorNode.isOff = isOff (...) bool isOff()","title":"isOff"},{"location":"fontlab.flAbstractVectorNode.html#ison","text":"fontlab.flAbstractVectorNode.isOn = isOn (...) bool isOn()","title":"isOn"},{"location":"fontlab.flAbstractVectorNode.html#ispresent","text":"fontlab.flAbstractVectorNode.isPresent bool","title":"isPresent"},{"location":"fontlab.flAbstractVectorNode.html#isreleased","text":"fontlab.flAbstractVectorNode.isReleased bool","title":"isReleased"},{"location":"fontlab.flAbstractVectorNode.html#isselectedalone","text":"fontlab.flAbstractVectorNode.isSelectedAlone bool","title":"isSelectedAlone"},{"location":"fontlab.flAbstractVectorNode.html#issmartangle","text":"fontlab.flAbstractVectorNode.isSmartAngle = isSmartAngle (...) bool isSmartAngle()","title":"isSmartAngle"},{"location":"fontlab.flAbstractVectorNode.html#isterminal","text":"fontlab.flAbstractVectorNode.isTerminal bool","title":"isTerminal"},{"location":"fontlab.flAbstractVectorNode.html#isvalid","text":"fontlab.flAbstractVectorNode.isValid bool","title":"isValid"},{"location":"fontlab.flAbstractVectorNode.html#makestart","text":"fontlab.flAbstractVectorNode.makeStart = makeStart (...) bool makeStart()","title":"makeStart"},{"location":"fontlab.flAbstractVectorNode.html#moveby","text":"fontlab.flAbstractVectorNode.moveBy = moveBy (...) moveBy(float dx, float dy[, bool round=false]","title":"moveBy"},{"location":"fontlab.flAbstractVectorNode.html#name","text":"fontlab.flAbstractVectorNode.name object name","title":"name"},{"location":"fontlab.flAbstractVectorNode.html#nextnode","text":"fontlab.flAbstractVectorNode.nextNode = nextNode (...) Node/None nextNode([string nodeType= [, int searchDepth=1]])","title":"nextNode"},{"location":"fontlab.flAbstractVectorNode.html#nodekind","text":"fontlab.flAbstractVectorNode.NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...}","title":"NodeKind"},{"location":"fontlab.flAbstractVectorNode.html#nodestate","text":"fontlab.flAbstractVectorNode.nodeState nodeState","title":"nodeState"},{"location":"fontlab.flAbstractVectorNode.html#nodetype","text":"fontlab.flAbstractVectorNode.NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1}","title":"NodeType"},{"location":"fontlab.flAbstractVectorNode.html#pointg2","text":"fontlab.flAbstractVectorNode.pointG2 = pointG2 (...) QPointF/None pointG2()","title":"pointG2"},{"location":"fontlab.flAbstractVectorNode.html#position","text":"fontlab.flAbstractVectorNode.position Coordinates of the node as QPointF","title":"position"},{"location":"fontlab.flAbstractVectorNode.html#preview","text":"fontlab.flAbstractVectorNode.preview preview","title":"preview"},{"location":"fontlab.flAbstractVectorNode.html#prevnode","text":"fontlab.flAbstractVectorNode.prevNode = prevNode (...) Node/None prevNode([string nodeType= [, int searchDepth=1]])","title":"prevNode"},{"location":"fontlab.flAbstractVectorNode.html#refcnt","text":"fontlab.flAbstractVectorNode.refCnt object references count","title":"refCnt"},{"location":"fontlab.flAbstractVectorNode.html#release","text":"fontlab.flAbstractVectorNode.release = release (...) release()","title":"release"},{"location":"fontlab.flAbstractVectorNode.html#remove","text":"fontlab.flAbstractVectorNode.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flAbstractVectorNode.html#removechild","text":"fontlab.flAbstractVectorNode.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flAbstractVectorNode.html#removeproperty","text":"fontlab.flAbstractVectorNode.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flAbstractVectorNode.html#restorecoordinates","text":"fontlab.flAbstractVectorNode.restoreCoordinates = restoreCoordinates (...) restoreCoordinates()","title":"restoreCoordinates"},{"location":"fontlab.flAbstractVectorNode.html#restorehistorystate","text":"fontlab.flAbstractVectorNode.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flAbstractVectorNode.html#rotateby","text":"fontlab.flAbstractVectorNode.rotateBy = rotateBy (...) rotateBy(valueDegree[, QPointF origin=(0, 0)])","title":"rotateBy"},{"location":"fontlab.flAbstractVectorNode.html#round","text":"fontlab.flAbstractVectorNode.round = round (...) round() - Round the node's coordinate","title":"round"},{"location":"fontlab.flAbstractVectorNode.html#scaleby","text":"fontlab.flAbstractVectorNode.scaleBy = scaleBy (...) scaleBy(valueXY | (valueX, valueY)[, QPointF origin=(0, 0)])","title":"scaleBy"},{"location":"fontlab.flAbstractVectorNode.html#scv","text":"fontlab.flAbstractVectorNode.scv scv","title":"scv"},{"location":"fontlab.flAbstractVectorNode.html#selected","text":"fontlab.flAbstractVectorNode.selected The selected flag","title":"selected"},{"location":"fontlab.flAbstractVectorNode.html#setextralast","text":"fontlab.flAbstractVectorNode.setExtraLast = setExtraLast (...) setExtraLast(bool)","title":"setExtraLast"},{"location":"fontlab.flAbstractVectorNode.html#setflag","text":"fontlab.flAbstractVectorNode.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flAbstractVectorNode.html#setnextsmooth","text":"fontlab.flAbstractVectorNode.setNextSmooth = setNextSmooth (...) setNextSmooth(QPointF base)","title":"setNextSmooth"},{"location":"fontlab.flAbstractVectorNode.html#setposition","text":"fontlab.flAbstractVectorNode.setPosition = setPosition (...) void setPosition(QPointF)","title":"setPosition"},{"location":"fontlab.flAbstractVectorNode.html#setprevsmooth","text":"fontlab.flAbstractVectorNode.setPrevSmooth = setPrevSmooth (...) setPrevSmooth(QPointF base)","title":"setPrevSmooth"},{"location":"fontlab.flAbstractVectorNode.html#setproperty","text":"fontlab.flAbstractVectorNode.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flAbstractVectorNode.html#setpropertyfloat","text":"fontlab.flAbstractVectorNode.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flAbstractVectorNode.html#setpropertyint","text":"fontlab.flAbstractVectorNode.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flAbstractVectorNode.html#setsmartangleenbl","text":"fontlab.flAbstractVectorNode.setSmartAngleEnbl = setSmartAngleEnbl (...) bool setSmartAngleEnbl(bool)","title":"setSmartAngleEnbl"},{"location":"fontlab.flAbstractVectorNode.html#setsmartsharp","text":"fontlab.flAbstractVectorNode.setSmartSharp = setSmartSharp (...) bool setSmartSharp([double tension = 0.6])","title":"setSmartSharp"},{"location":"fontlab.flAbstractVectorNode.html#skewby","text":"fontlab.flAbstractVectorNode.skewBy = skewBy (...) skewBy(valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)])","title":"skewBy"},{"location":"fontlab.flAbstractVectorNode.html#smartangler","text":"fontlab.flAbstractVectorNode.smartAngleR smartAngleR","title":"smartAngleR"},{"location":"fontlab.flAbstractVectorNode.html#smartmove","text":"fontlab.flAbstractVectorNode.smartMove = smartMove (...) list(uint) smartMove(offset)","title":"smartMove"},{"location":"fontlab.flAbstractVectorNode.html#smartsetxy","text":"fontlab.flAbstractVectorNode.smartSetXY = smartSetXY (...) smartSetXY(QPointF)","title":"smartSetXY"},{"location":"fontlab.flAbstractVectorNode.html#smooth","text":"fontlab.flAbstractVectorNode.smooth The smooth flag","title":"smooth"},{"location":"fontlab.flAbstractVectorNode.html#state","text":"fontlab.flAbstractVectorNode.state state","title":"state"},{"location":"fontlab.flAbstractVectorNode.html#storecoordinates","text":"fontlab.flAbstractVectorNode.storeCoordinates = storeCoordinates (...) storeCoordinates()","title":"storeCoordinates"},{"location":"fontlab.flAbstractVectorNode.html#storetestparameters","text":"fontlab.flAbstractVectorNode.storeTestParameters = storeTestParameters (...) storeTestParameters()","title":"storeTestParameters"},{"location":"fontlab.flAbstractVectorNode.html#tag","text":"fontlab.flAbstractVectorNode.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flAbstractVectorNode.html#transformby","text":"fontlab.flAbstractVectorNode.transformBy = transformBy (...) transformBy(QTransform tx[, QPointF origin=(0, 0)])","title":"transformBy"},{"location":"fontlab.flAbstractVectorNode.html#type","text":"fontlab.flAbstractVectorNode.type The node type","title":"type"},{"location":"fontlab.flAbstractVectorNode.html#update","text":"fontlab.flAbstractVectorNode.update = update (...) update()","title":"update"},{"location":"fontlab.flAbstractVectorNode.html#updateg2","text":"fontlab.flAbstractVectorNode.updateG2 = updateG2 (...) bool updateG2()","title":"updateG2"},{"location":"fontlab.flAbstractVectorNode.html#updatesmooth","text":"fontlab.flAbstractVectorNode.updateSmooth = updateSmooth (...) updateSmooth([bool extended_neibh=true])","title":"updateSmooth"},{"location":"fontlab.flAbstractVectorNode.html#x","text":"fontlab.flAbstractVectorNode.x The x coordinate of the node","title":"x"},{"location":"fontlab.flAbstractVectorNode.html#y","text":"fontlab.flAbstractVectorNode.y The y coordinate of the node","title":"y"},{"location":"fontlab.flAnchor.html","text":"flAnchor fontlab.flAnchor = class flAnchor ( object ) flAnchor representation Constructors: flAnchor() - default flAnchor(flAnchor) - copy flAnchor(flObject) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value added (...) added () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) hasObject (...) bool hasObject (flObject) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') removed (...) removed () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors anchorCode quint64 anchorPoint QPointF fixHorzDirection bool fixVertDirection bool hasChanges bool hasHistoryStates bool id object id isChanged bool isGlobal bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes ModeSnap = {'CoordSnap': 256, 'SnapToHorz': 64, 'SnapToVert': 128} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} added fontlab.flAnchor.added = added (...) added() anchorCode fontlab.flAnchor.anchorCode quint64 anchorPoint fontlab.flAnchor.anchorPoint QPointF changed fontlab.flAnchor.changed = changed (...) changed() checkInitHistoryState fontlab.flAnchor.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flAnchor.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flAnchor.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flAnchor.clearFlags = clearFlags (...) clearFlags() clone fontlab.flAnchor.clone = clone (...) Clone the object cloneObject fontlab.flAnchor.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flAnchor.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flAnchor.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flAnchor.currentHistoryState = currentHistoryState (...) currentHistoryIx() fixHorzDirection fontlab.flAnchor.fixHorzDirection bool fixVertDirection fontlab.flAnchor.fixVertDirection bool flag fontlab.flAnchor.flag = flag (...) flag(uint f) flObjectFlags fontlab.flAnchor.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flAnchor.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flAnchor.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flAnchor.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flAnchor.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flAnchor.hasChanges bool hasHistoryState fontlab.flAnchor.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flAnchor.hasHistoryStates bool hasObject fontlab.flAnchor.hasObject = hasObject (...) bool hasObject(flObject) haveObject fontlab.flAnchor.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flAnchor.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flAnchor.id object id independedAll fontlab.flAnchor.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flAnchor.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flAnchor.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flAnchor.isChanged bool isEqual fontlab.flAnchor.isEqual = isEqual (...) isEqual(flObject) isGlobal fontlab.flAnchor.isGlobal bool isNull fontlab.flAnchor.isNull bool isPresent fontlab.flAnchor.isPresent bool isReleased fontlab.flAnchor.isReleased bool isValid fontlab.flAnchor.isValid bool ModeSnap fontlab.flAnchor.ModeSnap = {'CoordSnap': 256, 'SnapToHorz': 64, 'SnapToVert': 128} name fontlab.flAnchor.name object name refCnt fontlab.flAnchor.refCnt object references count release fontlab.flAnchor.release = release (...) release() remove fontlab.flAnchor.remove = remove (...) remove([flObject]) removeChild fontlab.flAnchor.removeChild = removeChild (...) removeChild(flObject) removed fontlab.flAnchor.removed = removed (...) removed() removeProperty fontlab.flAnchor.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flAnchor.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flAnchor.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flAnchor.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flAnchor.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flAnchor.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flAnchor.tag = tag (...) tag([string]) type fontlab.flAnchor.type object type update fontlab.flAnchor.update = update (...) update()","title":"flAnchor"},{"location":"fontlab.flAnchor.html#flanchor","text":"","title":"flAnchor"},{"location":"fontlab.flAnchor.html#added","text":"fontlab.flAnchor.added = added (...) added()","title":"added"},{"location":"fontlab.flAnchor.html#anchorcode","text":"fontlab.flAnchor.anchorCode quint64","title":"anchorCode"},{"location":"fontlab.flAnchor.html#anchorpoint","text":"fontlab.flAnchor.anchorPoint QPointF","title":"anchorPoint"},{"location":"fontlab.flAnchor.html#changed","text":"fontlab.flAnchor.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flAnchor.html#checkinithistorystate","text":"fontlab.flAnchor.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flAnchor.html#clearabovehistory","text":"fontlab.flAnchor.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flAnchor.html#clearflag","text":"fontlab.flAnchor.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flAnchor.html#clearflags","text":"fontlab.flAnchor.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flAnchor.html#clone","text":"fontlab.flAnchor.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flAnchor.html#cloneobject","text":"fontlab.flAnchor.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flAnchor.html#createhistorystate","text":"fontlab.flAnchor.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flAnchor.html#createobject","text":"fontlab.flAnchor.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flAnchor.html#currenthistorystate","text":"fontlab.flAnchor.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flAnchor.html#fixhorzdirection","text":"fontlab.flAnchor.fixHorzDirection bool","title":"fixHorzDirection"},{"location":"fontlab.flAnchor.html#fixvertdirection","text":"fontlab.flAnchor.fixVertDirection bool","title":"fixVertDirection"},{"location":"fontlab.flAnchor.html#flag","text":"fontlab.flAnchor.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flAnchor.html#flobjectflags","text":"fontlab.flAnchor.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flAnchor.html#getproperties","text":"fontlab.flAnchor.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flAnchor.html#getproperty","text":"fontlab.flAnchor.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flAnchor.html#getpropertyfloat","text":"fontlab.flAnchor.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flAnchor.html#getpropertyint","text":"fontlab.flAnchor.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flAnchor.html#haschanges","text":"fontlab.flAnchor.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flAnchor.html#hashistorystate","text":"fontlab.flAnchor.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flAnchor.html#hashistorystates","text":"fontlab.flAnchor.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flAnchor.html#hasobject","text":"fontlab.flAnchor.hasObject = hasObject (...) bool hasObject(flObject)","title":"hasObject"},{"location":"fontlab.flAnchor.html#haveobject","text":"fontlab.flAnchor.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flAnchor.html#historystates","text":"fontlab.flAnchor.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flAnchor.html#id","text":"fontlab.flAnchor.id object id","title":"id"},{"location":"fontlab.flAnchor.html#independedall","text":"fontlab.flAnchor.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flAnchor.html#initialhistorystate","text":"fontlab.flAnchor.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flAnchor.html#instancetype","text":"fontlab.flAnchor.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flAnchor.html#ischanged","text":"fontlab.flAnchor.isChanged bool","title":"isChanged"},{"location":"fontlab.flAnchor.html#isequal","text":"fontlab.flAnchor.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flAnchor.html#isglobal","text":"fontlab.flAnchor.isGlobal bool","title":"isGlobal"},{"location":"fontlab.flAnchor.html#isnull","text":"fontlab.flAnchor.isNull bool","title":"isNull"},{"location":"fontlab.flAnchor.html#ispresent","text":"fontlab.flAnchor.isPresent bool","title":"isPresent"},{"location":"fontlab.flAnchor.html#isreleased","text":"fontlab.flAnchor.isReleased bool","title":"isReleased"},{"location":"fontlab.flAnchor.html#isvalid","text":"fontlab.flAnchor.isValid bool","title":"isValid"},{"location":"fontlab.flAnchor.html#modesnap","text":"fontlab.flAnchor.ModeSnap = {'CoordSnap': 256, 'SnapToHorz': 64, 'SnapToVert': 128}","title":"ModeSnap"},{"location":"fontlab.flAnchor.html#name","text":"fontlab.flAnchor.name object name","title":"name"},{"location":"fontlab.flAnchor.html#refcnt","text":"fontlab.flAnchor.refCnt object references count","title":"refCnt"},{"location":"fontlab.flAnchor.html#release","text":"fontlab.flAnchor.release = release (...) release()","title":"release"},{"location":"fontlab.flAnchor.html#remove","text":"fontlab.flAnchor.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flAnchor.html#removechild","text":"fontlab.flAnchor.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flAnchor.html#removed","text":"fontlab.flAnchor.removed = removed (...) removed()","title":"removed"},{"location":"fontlab.flAnchor.html#removeproperty","text":"fontlab.flAnchor.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flAnchor.html#restorehistorystate","text":"fontlab.flAnchor.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flAnchor.html#setflag","text":"fontlab.flAnchor.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flAnchor.html#setproperty","text":"fontlab.flAnchor.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flAnchor.html#setpropertyfloat","text":"fontlab.flAnchor.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flAnchor.html#setpropertyint","text":"fontlab.flAnchor.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flAnchor.html#tag","text":"fontlab.flAnchor.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flAnchor.html#type","text":"fontlab.flAnchor.type object type","title":"type"},{"location":"fontlab.flAnchor.html#update","text":"fontlab.flAnchor.update = update (...) update()","title":"update"},{"location":"fontlab.flAuditInfo.html","text":"flAuditInfo fontlab.flAuditInfo = class flAuditInfo ( object ) flAuditInfo representation Constructors: flAuditInfo() flAuditInfo(flObject) flAuditInfo(flAuditInfo) flAuditInfo(FaBasic, QTransform) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' glyphLocation (...) QPointF glyphLocation ([QPointF]) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors basic FaBasic hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool item flObject name object name refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} basic fontlab.flAuditInfo.basic FaBasic changed fontlab.flAuditInfo.changed = changed (...) changed() checkInitHistoryState fontlab.flAuditInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flAuditInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flAuditInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flAuditInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flAuditInfo.clone = clone (...) Clone the object cloneObject fontlab.flAuditInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flAuditInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flAuditInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flAuditInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flAuditInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flAuditInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flAuditInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flAuditInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flAuditInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flAuditInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' glyphLocation fontlab.flAuditInfo.glyphLocation = glyphLocation (...) QPointF glyphLocation([QPointF]) hasChanges fontlab.flAuditInfo.hasChanges bool hasHistoryState fontlab.flAuditInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flAuditInfo.hasHistoryStates bool haveObject fontlab.flAuditInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flAuditInfo.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flAuditInfo.id object id independedAll fontlab.flAuditInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flAuditInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flAuditInfo.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flAuditInfo.isChanged bool isEqual fontlab.flAuditInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flAuditInfo.isNull bool isPresent fontlab.flAuditInfo.isPresent bool isReleased fontlab.flAuditInfo.isReleased bool isValid fontlab.flAuditInfo.isValid bool item fontlab.flAuditInfo.item flObject name fontlab.flAuditInfo.name object name refCnt fontlab.flAuditInfo.refCnt object references count release fontlab.flAuditInfo.release = release (...) release() remove fontlab.flAuditInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flAuditInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flAuditInfo.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flAuditInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flAuditInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flAuditInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flAuditInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flAuditInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flAuditInfo.tag = tag (...) tag([string]) type fontlab.flAuditInfo.type object type update fontlab.flAuditInfo.update = update (...) update()","title":"flAuditInfo"},{"location":"fontlab.flAuditInfo.html#flauditinfo","text":"","title":"flAuditInfo"},{"location":"fontlab.flAuditInfo.html#basic","text":"fontlab.flAuditInfo.basic FaBasic","title":"basic"},{"location":"fontlab.flAuditInfo.html#changed","text":"fontlab.flAuditInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flAuditInfo.html#checkinithistorystate","text":"fontlab.flAuditInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flAuditInfo.html#clearabovehistory","text":"fontlab.flAuditInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flAuditInfo.html#clearflag","text":"fontlab.flAuditInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flAuditInfo.html#clearflags","text":"fontlab.flAuditInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flAuditInfo.html#clone","text":"fontlab.flAuditInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flAuditInfo.html#cloneobject","text":"fontlab.flAuditInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flAuditInfo.html#createhistorystate","text":"fontlab.flAuditInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flAuditInfo.html#createobject","text":"fontlab.flAuditInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flAuditInfo.html#currenthistorystate","text":"fontlab.flAuditInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flAuditInfo.html#flag","text":"fontlab.flAuditInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flAuditInfo.html#flobjectflags","text":"fontlab.flAuditInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flAuditInfo.html#getproperties","text":"fontlab.flAuditInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flAuditInfo.html#getproperty","text":"fontlab.flAuditInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flAuditInfo.html#getpropertyfloat","text":"fontlab.flAuditInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flAuditInfo.html#getpropertyint","text":"fontlab.flAuditInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flAuditInfo.html#glyphlocation","text":"fontlab.flAuditInfo.glyphLocation = glyphLocation (...) QPointF glyphLocation([QPointF])","title":"glyphLocation"},{"location":"fontlab.flAuditInfo.html#haschanges","text":"fontlab.flAuditInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flAuditInfo.html#hashistorystate","text":"fontlab.flAuditInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flAuditInfo.html#hashistorystates","text":"fontlab.flAuditInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flAuditInfo.html#haveobject","text":"fontlab.flAuditInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flAuditInfo.html#historystates","text":"fontlab.flAuditInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flAuditInfo.html#id","text":"fontlab.flAuditInfo.id object id","title":"id"},{"location":"fontlab.flAuditInfo.html#independedall","text":"fontlab.flAuditInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flAuditInfo.html#initialhistorystate","text":"fontlab.flAuditInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flAuditInfo.html#instancetype","text":"fontlab.flAuditInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flAuditInfo.html#ischanged","text":"fontlab.flAuditInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flAuditInfo.html#isequal","text":"fontlab.flAuditInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flAuditInfo.html#isnull","text":"fontlab.flAuditInfo.isNull bool","title":"isNull"},{"location":"fontlab.flAuditInfo.html#ispresent","text":"fontlab.flAuditInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flAuditInfo.html#isreleased","text":"fontlab.flAuditInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flAuditInfo.html#isvalid","text":"fontlab.flAuditInfo.isValid bool","title":"isValid"},{"location":"fontlab.flAuditInfo.html#item","text":"fontlab.flAuditInfo.item flObject","title":"item"},{"location":"fontlab.flAuditInfo.html#name","text":"fontlab.flAuditInfo.name object name","title":"name"},{"location":"fontlab.flAuditInfo.html#refcnt","text":"fontlab.flAuditInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flAuditInfo.html#release","text":"fontlab.flAuditInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flAuditInfo.html#remove","text":"fontlab.flAuditInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flAuditInfo.html#removechild","text":"fontlab.flAuditInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flAuditInfo.html#removeproperty","text":"fontlab.flAuditInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flAuditInfo.html#restorehistorystate","text":"fontlab.flAuditInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flAuditInfo.html#setflag","text":"fontlab.flAuditInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flAuditInfo.html#setproperty","text":"fontlab.flAuditInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flAuditInfo.html#setpropertyfloat","text":"fontlab.flAuditInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flAuditInfo.html#setpropertyint","text":"fontlab.flAuditInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flAuditInfo.html#tag","text":"fontlab.flAuditInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flAuditInfo.html#type","text":"fontlab.flAuditInfo.type object type","title":"type"},{"location":"fontlab.flAuditInfo.html#update","text":"fontlab.flAuditInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flAxis.html","text":"flAxis fontlab.flAxis = class flAxis ( object ) flAxis representation Constructors: flAxis() - default flAxis(string name) flAxis(string name, string tag, string short_name) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value checkValue (...) double checkValue (double v) getRange (...) double getRange () instanceIndex (...) int instanceIndex (double v) instances2map (...) bool instances2map () instances2string (...) string instances2string () map2instances (...) bool map2instances () mappedValue (...) double mappedValue (double v) normalize (...) double normalize (double userValue) onEdge (...) bool onEdge (double v) string2instances (...) bool string2instances (string s) styleName (...) string styleName (double v) styleValue (...) double styleValue (string style_name) updateInstances (...) void updateInstances () updateShortName (...) void updateShortName () updateTag (...) void updateTag () Static methods isWeight (...) bool isWeight (string s) isWidth (...) bool isWidth (string s) locationName (...) QString locationName (QList axes, flLocation location) valueWeight (...) double valueWeight (flLocation location, double value) valueWidth (...) double valueWidth (flLocation location, double value) Descriptors default double designDef double designMax double designMin double hidden bool map QMap maximum double minimal double name string playRange (double, double) shortName string tag string Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T checkValue fontlab.flAxis.checkValue = checkValue (...) double checkValue(double v) default fontlab.flAxis.default double designDef fontlab.flAxis.designDef double designMax fontlab.flAxis.designMax double designMin fontlab.flAxis.designMin double getRange fontlab.flAxis.getRange = getRange (...) double getRange() hidden fontlab.flAxis.hidden bool instanceIndex fontlab.flAxis.instanceIndex = instanceIndex (...) int instanceIndex(double v) instances2map fontlab.flAxis.instances2map = instances2map (...) bool instances2map() instances2string fontlab.flAxis.instances2string = instances2string (...) string instances2string() isWeight fontlab.flAxis.isWeight = isWeight (...) bool isWeight(string s) isWidth fontlab.flAxis.isWidth = isWidth (...) bool isWidth(string s) locationName fontlab.flAxis.locationName = locationName (...) QString locationName(QList axes, flLocation location) map fontlab.flAxis.map QMap map2instances fontlab.flAxis.map2instances = map2instances (...) bool map2instances() mappedValue fontlab.flAxis.mappedValue = mappedValue (...) double mappedValue(double v) maximum fontlab.flAxis.maximum double minimal fontlab.flAxis.minimal double name fontlab.flAxis.name string normalize fontlab.flAxis.normalize = normalize (...) double normalize(double userValue) onEdge fontlab.flAxis.onEdge = onEdge (...) bool onEdge(double v) playRange fontlab.flAxis.playRange (double, double) shortName fontlab.flAxis.shortName string string2instances fontlab.flAxis.string2instances = string2instances (...) bool string2instances(string s) styleName fontlab.flAxis.styleName = styleName (...) string styleName(double v) styleValue fontlab.flAxis.styleValue = styleValue (...) double styleValue(string style_name) tag fontlab.flAxis.tag string updateInstances fontlab.flAxis.updateInstances = updateInstances (...) void updateInstances() updateShortName fontlab.flAxis.updateShortName = updateShortName (...) void updateShortName() updateTag fontlab.flAxis.updateTag = updateTag (...) void updateTag() valueWeight fontlab.flAxis.valueWeight = valueWeight (...) double valueWeight(flLocation location, double value) valueWidth fontlab.flAxis.valueWidth = valueWidth (...) double valueWidth(flLocation location, double value)","title":"flAxis"},{"location":"fontlab.flAxis.html#flaxis","text":"","title":"flAxis"},{"location":"fontlab.flAxis.html#checkvalue","text":"fontlab.flAxis.checkValue = checkValue (...) double checkValue(double v)","title":"checkValue"},{"location":"fontlab.flAxis.html#default","text":"fontlab.flAxis.default double","title":"default"},{"location":"fontlab.flAxis.html#designdef","text":"fontlab.flAxis.designDef double","title":"designDef"},{"location":"fontlab.flAxis.html#designmax","text":"fontlab.flAxis.designMax double","title":"designMax"},{"location":"fontlab.flAxis.html#designmin","text":"fontlab.flAxis.designMin double","title":"designMin"},{"location":"fontlab.flAxis.html#getrange","text":"fontlab.flAxis.getRange = getRange (...) double getRange()","title":"getRange"},{"location":"fontlab.flAxis.html#hidden","text":"fontlab.flAxis.hidden bool","title":"hidden"},{"location":"fontlab.flAxis.html#instanceindex","text":"fontlab.flAxis.instanceIndex = instanceIndex (...) int instanceIndex(double v)","title":"instanceIndex"},{"location":"fontlab.flAxis.html#instances2map","text":"fontlab.flAxis.instances2map = instances2map (...) bool instances2map()","title":"instances2map"},{"location":"fontlab.flAxis.html#instances2string","text":"fontlab.flAxis.instances2string = instances2string (...) string instances2string()","title":"instances2string"},{"location":"fontlab.flAxis.html#isweight","text":"fontlab.flAxis.isWeight = isWeight (...) bool isWeight(string s)","title":"isWeight"},{"location":"fontlab.flAxis.html#iswidth","text":"fontlab.flAxis.isWidth = isWidth (...) bool isWidth(string s)","title":"isWidth"},{"location":"fontlab.flAxis.html#locationname","text":"fontlab.flAxis.locationName = locationName (...) QString locationName(QList axes, flLocation location)","title":"locationName"},{"location":"fontlab.flAxis.html#map","text":"fontlab.flAxis.map QMap","title":"map"},{"location":"fontlab.flAxis.html#map2instances","text":"fontlab.flAxis.map2instances = map2instances (...) bool map2instances()","title":"map2instances"},{"location":"fontlab.flAxis.html#mappedvalue","text":"fontlab.flAxis.mappedValue = mappedValue (...) double mappedValue(double v)","title":"mappedValue"},{"location":"fontlab.flAxis.html#maximum","text":"fontlab.flAxis.maximum double","title":"maximum"},{"location":"fontlab.flAxis.html#minimal","text":"fontlab.flAxis.minimal double","title":"minimal"},{"location":"fontlab.flAxis.html#name","text":"fontlab.flAxis.name string","title":"name"},{"location":"fontlab.flAxis.html#normalize","text":"fontlab.flAxis.normalize = normalize (...) double normalize(double userValue)","title":"normalize"},{"location":"fontlab.flAxis.html#onedge","text":"fontlab.flAxis.onEdge = onEdge (...) bool onEdge(double v)","title":"onEdge"},{"location":"fontlab.flAxis.html#playrange","text":"fontlab.flAxis.playRange (double, double)","title":"playRange"},{"location":"fontlab.flAxis.html#shortname","text":"fontlab.flAxis.shortName string","title":"shortName"},{"location":"fontlab.flAxis.html#string2instances","text":"fontlab.flAxis.string2instances = string2instances (...) bool string2instances(string s)","title":"string2instances"},{"location":"fontlab.flAxis.html#stylename","text":"fontlab.flAxis.styleName = styleName (...) string styleName(double v)","title":"styleName"},{"location":"fontlab.flAxis.html#stylevalue","text":"fontlab.flAxis.styleValue = styleValue (...) double styleValue(string style_name)","title":"styleValue"},{"location":"fontlab.flAxis.html#tag","text":"fontlab.flAxis.tag string","title":"tag"},{"location":"fontlab.flAxis.html#updateinstances","text":"fontlab.flAxis.updateInstances = updateInstances (...) void updateInstances()","title":"updateInstances"},{"location":"fontlab.flAxis.html#updateshortname","text":"fontlab.flAxis.updateShortName = updateShortName (...) void updateShortName()","title":"updateShortName"},{"location":"fontlab.flAxis.html#updatetag","text":"fontlab.flAxis.updateTag = updateTag (...) void updateTag()","title":"updateTag"},{"location":"fontlab.flAxis.html#valueweight","text":"fontlab.flAxis.valueWeight = valueWeight (...) double valueWeight(flLocation location, double value)","title":"valueWeight"},{"location":"fontlab.flAxis.html#valuewidth","text":"fontlab.flAxis.valueWidth = valueWidth (...) double valueWidth(flLocation location, double value)","title":"valueWidth"},{"location":"fontlab.flBasicTool.html","text":"flBasicTool fontlab.flBasicTool = class flBasicTool ( object ) flBasicTool representation Constructors: flBasicTool() flBasicTool(flObject) flBasicTool(flBasicTool) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value activateTool (...) activateTool () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateTool (...) deactivateTool () flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors cursorId CursorId hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name needDeactivateParent bool refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activateTool fontlab.flBasicTool.activateTool = activateTool (...) activateTool() changed fontlab.flBasicTool.changed = changed (...) changed() checkInitHistoryState fontlab.flBasicTool.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flBasicTool.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flBasicTool.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flBasicTool.clearFlags = clearFlags (...) clearFlags() clone fontlab.flBasicTool.clone = clone (...) Clone the object cloneObject fontlab.flBasicTool.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flBasicTool.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flBasicTool.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flBasicTool.currentHistoryState = currentHistoryState (...) currentHistoryIx() cursorId fontlab.flBasicTool.cursorId CursorId deactivateTool fontlab.flBasicTool.deactivateTool = deactivateTool (...) deactivateTool() flag fontlab.flBasicTool.flag = flag (...) flag(uint f) flObjectFlags fontlab.flBasicTool.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flBasicTool.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flBasicTool.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flBasicTool.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flBasicTool.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flBasicTool.hasChanges bool hasHistoryState fontlab.flBasicTool.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flBasicTool.hasHistoryStates bool haveObject fontlab.flBasicTool.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flBasicTool.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flBasicTool.id object id independedAll fontlab.flBasicTool.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flBasicTool.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flBasicTool.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flBasicTool.isChanged bool isEqual fontlab.flBasicTool.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flBasicTool.isNull bool isPresent fontlab.flBasicTool.isPresent bool isReleased fontlab.flBasicTool.isReleased bool isValid fontlab.flBasicTool.isValid bool name fontlab.flBasicTool.name object name needDeactivateParent fontlab.flBasicTool.needDeactivateParent bool refCnt fontlab.flBasicTool.refCnt object references count release fontlab.flBasicTool.release = release (...) release() remove fontlab.flBasicTool.remove = remove (...) remove([flObject]) removeChild fontlab.flBasicTool.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flBasicTool.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flBasicTool.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flBasicTool.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flBasicTool.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flBasicTool.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flBasicTool.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flBasicTool.tag = tag (...) tag([string]) type fontlab.flBasicTool.type object type update fontlab.flBasicTool.update = update (...) update()","title":"flBasicTool"},{"location":"fontlab.flBasicTool.html#flbasictool","text":"","title":"flBasicTool"},{"location":"fontlab.flBasicTool.html#activatetool","text":"fontlab.flBasicTool.activateTool = activateTool (...) activateTool()","title":"activateTool"},{"location":"fontlab.flBasicTool.html#changed","text":"fontlab.flBasicTool.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flBasicTool.html#checkinithistorystate","text":"fontlab.flBasicTool.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flBasicTool.html#clearabovehistory","text":"fontlab.flBasicTool.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flBasicTool.html#clearflag","text":"fontlab.flBasicTool.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flBasicTool.html#clearflags","text":"fontlab.flBasicTool.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flBasicTool.html#clone","text":"fontlab.flBasicTool.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flBasicTool.html#cloneobject","text":"fontlab.flBasicTool.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flBasicTool.html#createhistorystate","text":"fontlab.flBasicTool.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flBasicTool.html#createobject","text":"fontlab.flBasicTool.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flBasicTool.html#currenthistorystate","text":"fontlab.flBasicTool.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flBasicTool.html#cursorid","text":"fontlab.flBasicTool.cursorId CursorId","title":"cursorId"},{"location":"fontlab.flBasicTool.html#deactivatetool","text":"fontlab.flBasicTool.deactivateTool = deactivateTool (...) deactivateTool()","title":"deactivateTool"},{"location":"fontlab.flBasicTool.html#flag","text":"fontlab.flBasicTool.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flBasicTool.html#flobjectflags","text":"fontlab.flBasicTool.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flBasicTool.html#getproperties","text":"fontlab.flBasicTool.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flBasicTool.html#getproperty","text":"fontlab.flBasicTool.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flBasicTool.html#getpropertyfloat","text":"fontlab.flBasicTool.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flBasicTool.html#getpropertyint","text":"fontlab.flBasicTool.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flBasicTool.html#haschanges","text":"fontlab.flBasicTool.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flBasicTool.html#hashistorystate","text":"fontlab.flBasicTool.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flBasicTool.html#hashistorystates","text":"fontlab.flBasicTool.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flBasicTool.html#haveobject","text":"fontlab.flBasicTool.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flBasicTool.html#historystates","text":"fontlab.flBasicTool.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flBasicTool.html#id","text":"fontlab.flBasicTool.id object id","title":"id"},{"location":"fontlab.flBasicTool.html#independedall","text":"fontlab.flBasicTool.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flBasicTool.html#initialhistorystate","text":"fontlab.flBasicTool.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flBasicTool.html#instancetype","text":"fontlab.flBasicTool.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flBasicTool.html#ischanged","text":"fontlab.flBasicTool.isChanged bool","title":"isChanged"},{"location":"fontlab.flBasicTool.html#isequal","text":"fontlab.flBasicTool.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flBasicTool.html#isnull","text":"fontlab.flBasicTool.isNull bool","title":"isNull"},{"location":"fontlab.flBasicTool.html#ispresent","text":"fontlab.flBasicTool.isPresent bool","title":"isPresent"},{"location":"fontlab.flBasicTool.html#isreleased","text":"fontlab.flBasicTool.isReleased bool","title":"isReleased"},{"location":"fontlab.flBasicTool.html#isvalid","text":"fontlab.flBasicTool.isValid bool","title":"isValid"},{"location":"fontlab.flBasicTool.html#name","text":"fontlab.flBasicTool.name object name","title":"name"},{"location":"fontlab.flBasicTool.html#needdeactivateparent","text":"fontlab.flBasicTool.needDeactivateParent bool","title":"needDeactivateParent"},{"location":"fontlab.flBasicTool.html#refcnt","text":"fontlab.flBasicTool.refCnt object references count","title":"refCnt"},{"location":"fontlab.flBasicTool.html#release","text":"fontlab.flBasicTool.release = release (...) release()","title":"release"},{"location":"fontlab.flBasicTool.html#remove","text":"fontlab.flBasicTool.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flBasicTool.html#removechild","text":"fontlab.flBasicTool.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flBasicTool.html#removeproperty","text":"fontlab.flBasicTool.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flBasicTool.html#restorehistorystate","text":"fontlab.flBasicTool.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flBasicTool.html#setflag","text":"fontlab.flBasicTool.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flBasicTool.html#setproperty","text":"fontlab.flBasicTool.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flBasicTool.html#setpropertyfloat","text":"fontlab.flBasicTool.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flBasicTool.html#setpropertyint","text":"fontlab.flBasicTool.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flBasicTool.html#tag","text":"fontlab.flBasicTool.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flBasicTool.html#type","text":"fontlab.flBasicTool.type object type","title":"type"},{"location":"fontlab.flBasicTool.html#update","text":"fontlab.flBasicTool.update = update (...) update()","title":"update"},{"location":"fontlab.flCanvas.html","text":"flCanvas fontlab.flCanvas = class flCanvas ( object ) flCanvas representation Constructors: flCanvas() flCanvas(flCanvas) flCanvas(flObject) flCanvas(id) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value acceptEvents (...) int acceptEvents () activateEditor (...) void activateEditor (QPointF canvas_pos) activatePreviewNodes (...) activatePreviewNodes () addTextBlock (...) addTextBlock (flTextBlock) addedToCanvas (...) void addedToCanvas (flCanvas) addedToWorkspace (...) addedToWorkspace (flWorkspace) adjustCanvasPosition (...) QPointF adjustCanvasPosition (QPointF) adjustPosition (...) QPointF | double adjustPosition (QPointF | double) appendDecorator (...) void appendDecorator (flVisualItem, DecoratorOrder) availableRect (...) QRectF availableRect () boundingRectOnCanvas (...) QRectF boundingRectOnCanvas ( canvas (...) flCanvas canvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clear (...) clear () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearDecorators (...) clearDecorators () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearItems (...) clearItems () clearSurfaces (...) clearSurfaces () clearTextBlocks (...) clearTextBlocks () clone (...) Clone the object collectChangedRects (...) collectChangedRects () contain (...) bool contain (QPointF canvas_pos) containsItem (...) bool containsItem (flVisualItem) createFrame (...) fgSymbolList createFrame (fgSymbolList list, QPointF position) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateEditor (...) deactivateEditor () deactivatePreviewNodes (...) deactivatePreviewNodes () distanceTo (...) double distanceTo (QPointF) ensureVisible (...) ensureVisible (QPointF | QRectF canvas_rect[, bool total_cover = true]) flag (...) flag (uint f) getHighlight (...) QRectF/Nothing getHighlight () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getScaleTo (...) double getScaleTo (flShapeInfo) hasHistoryState (...) hasHistoryState (uint history_ix) haveCanvas (...) bool haveCanvas () haveEditor (...) bool haveEditor (QPointF canvas_pos) haveHoveredItem (...) bool haveHoveredItem () haveSelectedNodes (...) bool haveSelectedNodes () hide (...) hide () highlight (...) highlight (QRectF) historyStates (...) historyStates (bool accepted_state) hoveredItem (...) flVisualItem hoveredItem () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() invertSelectedNodes (...) invertSelectedNodes (QList ) invselect (...) invselect () isActiveCanvas (...) bool isActiveCanvas () isEqual (...) isEqual (flObject) isFocusedCanvas (...) bool isFocusedCanvas () isSelectable (...) bool isSelectable () isStableSelect (...) bool isStableSelect () itemScale (...) double itemScale () mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem (QPointF) mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem (QPointF | QRectF) mapDeltaFromGlobalToCanvas (...) QPointF mapDeltaFromGlobalToCanvas (QPoint) mapFromGlobal (...) QRectF | QPointF mapFromGlobal (QRect | QPoint) mapFromViewport (...) QRectF | QLineF | QPointF mapFromViewport (QRectF | QRect | QLineF | QPointF | QPoint) mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas (QPointF | QRectF) mapToGlobal (...) QPointF mapToGlobal (QPointF) mapToViewport (...) QPolygonF | QRect | QPoint mapToViewport (QPolygonF | QRect | QPoint) mapToViewportF (...) QPointF | QLineF mapToViewportF (QPointF | QLineF) metricStep (...) double metricStep () mousePosition (...) QPointF mousePosition () mousePressed (...) bool mousePressed () move (...) void move (QPointF) operationAdjustMetrics (...) operationAdjustMetrics (double delta, bool percent) operationAlign (...) operationAlign (Qt::Alignment) operationBeauty (...) operationBeauty (bool) operationBreak (...) bool operationBreak (bool notify, bool alone_selected) operationCopyToMask (...) operationCopyToMask (bool global = false) operationDecompose (...) bool operationDecompose () operationFlipHorizontal (...) operationFlipHorizontal () operationFlipVertical (...) operationFlipVertical () operationGenius (...) operationGenius (bool) operationHarmonize (...) operationHarmonize () operationImprove (...) operationImprove () operationJoin (...) operationJoin () operationNoServant (...) operationNoServant () operationPrepare (...) (flModelProducer, QList selection, flShapeInfo, flGlyphInfo)/Nothing operationPrepare (bool allow_all_contours, bool allow_all_nodes = false) operationReverseContours (...) operationReverseContours () operationRotate180 (...) operationRotate180 () operationRotate90 (...) operationRotate90 () operationServantX (...) operationServantX (bool) operationServantY (...) operationServantY (bool) operationSetMetrics (...) operationSetMetrics (int mode) operationSimplify (...) operationSimplify () operationSmartAngle (...) operationSmartAngle (bool) operationSmooth (...) operationSmooth (bool) operationToBeziers (...) operationToBeziers () operationToCurve (...) operationToCurve () operationToLine (...) operationToLine () operationToSplines (...) operationToSplines () paint (...) void paint (QPainter*) placeAICB (...) bool placeAICB (QPointF position, QString filename | QMimeData mime_data) placeArtwork (...) bool placeArtwork (QPointF position, QList urls_list) popupHost (...) YPopupHost* popupHost () preview (...) preview () producer (...) flObject producer () rectToUpdate (...) QRect & rectToUpdate () referencePoint (...) QPointF referencePoint () regionToUpdate (...) QRegion & regionToUpdate () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeDeadSmartAngles (...) removeDeadSmartAngles () removeDecorator (...) void removeDecorator (flVisualItem) removeItem (...) removeItem (flVisualItem) removeProperty (...) removeProperty ('key') removeTextBlock (...) removeTextBlock (flTextBlock) removedFromCanvas (...) removedFromCanvas () removedFromWorkspace (...) removedFromWorkspace (flWorkspace) resetHighlight (...) resetHighlight () restoreHistoryState (...) restoreHistoryState (uint history_ix) scale (...) double scale () scaled (...) double scaled (double d) select (...) select () selectNode (...) selectNode (flNodeInfo) selectNodes (...) selectNodes (QList ) selectedNodes (...) QList selectedNodes () selection (...) QList selection () setCursor (...) setCursor (QCursor) setCursorId (...) setCursorId (CursorId) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSelectedNodes (...) setSelectedNodes (QList , bool ) show (...) show () slantTransform (...) QTransform slantTransform (flGlyphInfo glyph_info) tag (...) tag ([string]) textBlocks (...) QList textBlocks () unselect (...) unselect () unselectAll (...) bool unselectAll () unselectAllNodes (...) bool unselectAllNodes () update (...) update () updateCanvasRectA (...) updateCanvasRectA (QRectF) updateMousePos (...) updateMousePos (QPoint) updateScreenRect (...) updateScreenRect (QRectF) updateScreenRegion (...) updateScreenRegion (QRegion) updateViewRect (...) updateViewRect () updateViewport (...) updateViewport () viewPortHasFocus (...) bool viewPortHasFocus () viewPortRect (...) QRect viewPortRect () viewRect (...) QRectF viewRect () zoomTo (...) zoomTo (QPointF canvas_point, double scale, ViewPointAlignment=vpCenter) | zoomTo (QRectF canvas_rect) zoomToReaded (...) zoomToReaded () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flCanvas createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceAcceptEvents (...) int instanceAcceptEvents () instanceType (...) int instanceType () Descriptors hasChanges bool hasHistoryStates bool hovered bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool locked bool modelProducer flModelProducer name object name opacity double owner flVisualItem paper flPaper refCnt object references count selected bool transform QTransform type object type viewPoint QPointF viewPort QWidget* viewTransform flTransform visible bool workspace flWorkspace Attributes Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2} SetMetricsAuto = 2 SetMetricsDefault = 1 SetMetricsZero = 0 __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} acceptEvents fontlab.flCanvas.acceptEvents = acceptEvents (...) int acceptEvents() activateEditor fontlab.flCanvas.activateEditor = activateEditor (...) void activateEditor(QPointF canvas_pos) activatePreviewNodes fontlab.flCanvas.activatePreviewNodes = activatePreviewNodes (...) activatePreviewNodes() addedToCanvas fontlab.flCanvas.addedToCanvas = addedToCanvas (...) void addedToCanvas(flCanvas) addedToWorkspace fontlab.flCanvas.addedToWorkspace = addedToWorkspace (...) addedToWorkspace(flWorkspace) addTextBlock fontlab.flCanvas.addTextBlock = addTextBlock (...) addTextBlock(flTextBlock) adjustCanvasPosition fontlab.flCanvas.adjustCanvasPosition = adjustCanvasPosition (...) QPointF adjustCanvasPosition(QPointF) adjustPosition fontlab.flCanvas.adjustPosition = adjustPosition (...) QPointF | double adjustPosition(QPointF | double) appendDecorator fontlab.flCanvas.appendDecorator = appendDecorator (...) void appendDecorator(flVisualItem, DecoratorOrder) availableRect fontlab.flCanvas.availableRect = availableRect (...) QRectF availableRect() boundingRectOnCanvas fontlab.flCanvas.boundingRectOnCanvas = boundingRectOnCanvas (...) QRectF boundingRectOnCanvas( canvas fontlab.flCanvas.canvas = canvas (...) flCanvas canvas() changed fontlab.flCanvas.changed = changed (...) changed() checkInitHistoryState fontlab.flCanvas.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clear fontlab.flCanvas.clear = clear (...) clear() clearAboveHistory fontlab.flCanvas.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearDecorators fontlab.flCanvas.clearDecorators = clearDecorators (...) clearDecorators() clearFlag fontlab.flCanvas.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flCanvas.clearFlags = clearFlags (...) clearFlags() clearItems fontlab.flCanvas.clearItems = clearItems (...) clearItems() clearSurfaces fontlab.flCanvas.clearSurfaces = clearSurfaces (...) clearSurfaces() clearTextBlocks fontlab.flCanvas.clearTextBlocks = clearTextBlocks (...) clearTextBlocks() clone fontlab.flCanvas.clone = clone (...) Clone the object cloneObject fontlab.flCanvas.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); collectChangedRects fontlab.flCanvas.collectChangedRects = collectChangedRects (...) collectChangedRects() contain fontlab.flCanvas.contain = contain (...) bool contain(QPointF canvas_pos) containsItem fontlab.flCanvas.containsItem = containsItem (...) bool containsItem(flVisualItem) createFrame fontlab.flCanvas.createFrame = createFrame (...) fgSymbolList createFrame(fgSymbolList list, QPointF position) createHistoryState fontlab.flCanvas.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flCanvas.createInstance = createInstance (...) flCanvas createInstance() createObject fontlab.flCanvas.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flCanvas.currentHistoryState = currentHistoryState (...) currentHistoryIx() deactivateEditor fontlab.flCanvas.deactivateEditor = deactivateEditor (...) deactivateEditor() deactivatePreviewNodes fontlab.flCanvas.deactivatePreviewNodes = deactivatePreviewNodes (...) deactivatePreviewNodes() distanceTo fontlab.flCanvas.distanceTo = distanceTo (...) double distanceTo(QPointF) ensureVisible fontlab.flCanvas.ensureVisible = ensureVisible (...) ensureVisible(QPointF | QRectF canvas_rect[, bool total_cover = true]) flag fontlab.flCanvas.flag = flag (...) flag(uint f) flObjectFlags fontlab.flCanvas.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getHighlight fontlab.flCanvas.getHighlight = getHighlight (...) QRectF/Nothing getHighlight() getProperties fontlab.flCanvas.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flCanvas.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flCanvas.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flCanvas.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getScaleTo fontlab.flCanvas.getScaleTo = getScaleTo (...) double getScaleTo(flShapeInfo) hasChanges fontlab.flCanvas.hasChanges bool hasHistoryState fontlab.flCanvas.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flCanvas.hasHistoryStates bool haveCanvas fontlab.flCanvas.haveCanvas = haveCanvas (...) bool haveCanvas() haveEditor fontlab.flCanvas.haveEditor = haveEditor (...) bool haveEditor(QPointF canvas_pos) haveHoveredItem fontlab.flCanvas.haveHoveredItem = haveHoveredItem (...) bool haveHoveredItem() haveObject fontlab.flCanvas.haveObject = haveObject (...) bool haveObject(uint); haveSelectedNodes fontlab.flCanvas.haveSelectedNodes = haveSelectedNodes (...) bool haveSelectedNodes() hide fontlab.flCanvas.hide = hide (...) hide() highlight fontlab.flCanvas.highlight = highlight (...) highlight(QRectF) historyStates fontlab.flCanvas.historyStates = historyStates (...) historyStates(bool accepted_state) hovered fontlab.flCanvas.hovered bool hoveredItem fontlab.flCanvas.hoveredItem = hoveredItem (...) flVisualItem hoveredItem() id fontlab.flCanvas.id object id independedAll fontlab.flCanvas.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flCanvas.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceAcceptEvents fontlab.flCanvas.instanceAcceptEvents = instanceAcceptEvents (...) int instanceAcceptEvents() instanceType fontlab.flCanvas.instanceType = instanceType (...) int instanceType() invertSelectedNodes fontlab.flCanvas.invertSelectedNodes = invertSelectedNodes (...) invertSelectedNodes(QList ) invselect fontlab.flCanvas.invselect = invselect (...) invselect() isActiveCanvas fontlab.flCanvas.isActiveCanvas = isActiveCanvas (...) bool isActiveCanvas() isChanged fontlab.flCanvas.isChanged bool isEqual fontlab.flCanvas.isEqual = isEqual (...) isEqual(flObject) isFocusedCanvas fontlab.flCanvas.isFocusedCanvas = isFocusedCanvas (...) bool isFocusedCanvas() isNull fontlab.flCanvas.isNull bool isPresent fontlab.flCanvas.isPresent bool isReleased fontlab.flCanvas.isReleased bool isSelectable fontlab.flCanvas.isSelectable = isSelectable (...) bool isSelectable() isStableSelect fontlab.flCanvas.isStableSelect = isStableSelect (...) bool isStableSelect() isValid fontlab.flCanvas.isValid bool itemScale fontlab.flCanvas.itemScale = itemScale (...) double itemScale() Listeners fontlab.flCanvas.Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2} locked fontlab.flCanvas.locked bool mapCanvasDistanceToItem fontlab.flCanvas.mapCanvasDistanceToItem = mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem(QPointF) mapCanvasToItem fontlab.flCanvas.mapCanvasToItem = mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem(QPointF | QRectF) mapDeltaFromGlobalToCanvas fontlab.flCanvas.mapDeltaFromGlobalToCanvas = mapDeltaFromGlobalToCanvas (...) QPointF mapDeltaFromGlobalToCanvas(QPoint) mapFromGlobal fontlab.flCanvas.mapFromGlobal = mapFromGlobal (...) QRectF | QPointF mapFromGlobal(QRect | QPoint) mapFromViewport fontlab.flCanvas.mapFromViewport = mapFromViewport (...) QRectF | QLineF | QPointF mapFromViewport(QRectF | QRect | QLineF | QPointF | QPoint) mapItemToCanvas fontlab.flCanvas.mapItemToCanvas = mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas(QPointF | QRectF) mapToGlobal fontlab.flCanvas.mapToGlobal = mapToGlobal (...) QPointF mapToGlobal(QPointF) mapToViewport fontlab.flCanvas.mapToViewport = mapToViewport (...) QPolygonF | QRect | QPoint mapToViewport(QPolygonF | QRect | QPoint) mapToViewportF fontlab.flCanvas.mapToViewportF = mapToViewportF (...) QPointF | QLineF mapToViewportF(QPointF | QLineF) metricStep fontlab.flCanvas.metricStep = metricStep (...) double metricStep() modelProducer fontlab.flCanvas.modelProducer flModelProducer mousePosition fontlab.flCanvas.mousePosition = mousePosition (...) QPointF mousePosition() mousePressed fontlab.flCanvas.mousePressed = mousePressed (...) bool mousePressed() move fontlab.flCanvas.move = move (...) void move(QPointF) name fontlab.flCanvas.name object name opacity fontlab.flCanvas.opacity double operationAdjustMetrics fontlab.flCanvas.operationAdjustMetrics = operationAdjustMetrics (...) operationAdjustMetrics(double delta, bool percent) operationAlign fontlab.flCanvas.operationAlign = operationAlign (...) operationAlign(Qt::Alignment) operationBeauty fontlab.flCanvas.operationBeauty = operationBeauty (...) operationBeauty(bool) operationBreak fontlab.flCanvas.operationBreak = operationBreak (...) bool operationBreak(bool notify, bool alone_selected) operationCopyToMask fontlab.flCanvas.operationCopyToMask = operationCopyToMask (...) operationCopyToMask(bool global = false) operationDecompose fontlab.flCanvas.operationDecompose = operationDecompose (...) bool operationDecompose() operationFlipHorizontal fontlab.flCanvas.operationFlipHorizontal = operationFlipHorizontal (...) operationFlipHorizontal() operationFlipVertical fontlab.flCanvas.operationFlipVertical = operationFlipVertical (...) operationFlipVertical() operationGenius fontlab.flCanvas.operationGenius = operationGenius (...) operationGenius(bool) operationHarmonize fontlab.flCanvas.operationHarmonize = operationHarmonize (...) operationHarmonize() operationImprove fontlab.flCanvas.operationImprove = operationImprove (...) operationImprove() operationJoin fontlab.flCanvas.operationJoin = operationJoin (...) operationJoin() operationNoServant fontlab.flCanvas.operationNoServant = operationNoServant (...) operationNoServant() operationPrepare fontlab.flCanvas.operationPrepare = operationPrepare (...) (flModelProducer, QList selection, flShapeInfo, flGlyphInfo)/Nothing operationPrepare(bool allow_all_contours, bool allow_all_nodes = false) operationReverseContours fontlab.flCanvas.operationReverseContours = operationReverseContours (...) operationReverseContours() operationRotate180 fontlab.flCanvas.operationRotate180 = operationRotate180 (...) operationRotate180() operationRotate90 fontlab.flCanvas.operationRotate90 = operationRotate90 (...) operationRotate90() operationServantX fontlab.flCanvas.operationServantX = operationServantX (...) operationServantX(bool) operationServantY fontlab.flCanvas.operationServantY = operationServantY (...) operationServantY(bool) operationSetMetrics fontlab.flCanvas.operationSetMetrics = operationSetMetrics (...) operationSetMetrics(int mode) operationSimplify fontlab.flCanvas.operationSimplify = operationSimplify (...) operationSimplify() operationSmartAngle fontlab.flCanvas.operationSmartAngle = operationSmartAngle (...) operationSmartAngle(bool) operationSmooth fontlab.flCanvas.operationSmooth = operationSmooth (...) operationSmooth(bool) operationToBeziers fontlab.flCanvas.operationToBeziers = operationToBeziers (...) operationToBeziers() operationToCurve fontlab.flCanvas.operationToCurve = operationToCurve (...) operationToCurve() operationToLine fontlab.flCanvas.operationToLine = operationToLine (...) operationToLine() operationToSplines fontlab.flCanvas.operationToSplines = operationToSplines (...) operationToSplines() owner fontlab.flCanvas.owner flVisualItem paint fontlab.flCanvas.paint = paint (...) void paint(QPainter*) paper fontlab.flCanvas.paper flPaper placeAICB fontlab.flCanvas.placeAICB = placeAICB (...) bool placeAICB(QPointF position, QString filename | QMimeData mime_data) placeArtwork fontlab.flCanvas.placeArtwork = placeArtwork (...) bool placeArtwork(QPointF position, QList urls_list) popupHost fontlab.flCanvas.popupHost = popupHost (...) YPopupHost* popupHost() preview fontlab.flCanvas.preview = preview (...) preview() producer fontlab.flCanvas.producer = producer (...) flObject producer() rectToUpdate fontlab.flCanvas.rectToUpdate = rectToUpdate (...) QRect & rectToUpdate() refCnt fontlab.flCanvas.refCnt object references count referencePoint fontlab.flCanvas.referencePoint = referencePoint (...) QPointF referencePoint() regionToUpdate fontlab.flCanvas.regionToUpdate = regionToUpdate (...) QRegion & regionToUpdate() release fontlab.flCanvas.release = release (...) release() remove fontlab.flCanvas.remove = remove (...) remove([flObject]) removeChild fontlab.flCanvas.removeChild = removeChild (...) removeChild(flObject) removeDeadSmartAngles fontlab.flCanvas.removeDeadSmartAngles = removeDeadSmartAngles (...) removeDeadSmartAngles() removeDecorator fontlab.flCanvas.removeDecorator = removeDecorator (...) void removeDecorator(flVisualItem) removedFromCanvas fontlab.flCanvas.removedFromCanvas = removedFromCanvas (...) removedFromCanvas() removedFromWorkspace fontlab.flCanvas.removedFromWorkspace = removedFromWorkspace (...) removedFromWorkspace(flWorkspace) removeItem fontlab.flCanvas.removeItem = removeItem (...) removeItem(flVisualItem) removeProperty fontlab.flCanvas.removeProperty = removeProperty (...) removeProperty('key') removeTextBlock fontlab.flCanvas.removeTextBlock = removeTextBlock (...) removeTextBlock(flTextBlock) resetHighlight fontlab.flCanvas.resetHighlight = resetHighlight (...) resetHighlight() restoreHistoryState fontlab.flCanvas.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) scale fontlab.flCanvas.scale = scale (...) double scale() scaled fontlab.flCanvas.scaled = scaled (...) double scaled(double d) select fontlab.flCanvas.select = select (...) select() selected fontlab.flCanvas.selected bool selectedNodes fontlab.flCanvas.selectedNodes = selectedNodes (...) QList selectedNodes() selection fontlab.flCanvas.selection = selection (...) QList selection() selectNode fontlab.flCanvas.selectNode = selectNode (...) selectNode(flNodeInfo) selectNodes fontlab.flCanvas.selectNodes = selectNodes (...) selectNodes(QList ) setCursor fontlab.flCanvas.setCursor = setCursor (...) setCursor(QCursor) setCursorId fontlab.flCanvas.setCursorId = setCursorId (...) setCursorId(CursorId) setFlag fontlab.flCanvas.setFlag = setFlag (...) setFlag(uint f [, bool value]) SetMetricsAuto fontlab.flCanvas.SetMetricsAuto = 2 SetMetricsDefault fontlab.flCanvas.SetMetricsDefault = 1 SetMetricsZero fontlab.flCanvas.SetMetricsZero = 0 setProperty fontlab.flCanvas.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flCanvas.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flCanvas.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSelectedNodes fontlab.flCanvas.setSelectedNodes = setSelectedNodes (...) setSelectedNodes(QList , bool ) show fontlab.flCanvas.show = show (...) show() slantTransform fontlab.flCanvas.slantTransform = slantTransform (...) QTransform slantTransform(flGlyphInfo glyph_info) tag fontlab.flCanvas.tag = tag (...) tag([string]) textBlocks fontlab.flCanvas.textBlocks = textBlocks (...) QList textBlocks() transform fontlab.flCanvas.transform QTransform type fontlab.flCanvas.type object type unselect fontlab.flCanvas.unselect = unselect (...) unselect() unselectAll fontlab.flCanvas.unselectAll = unselectAll (...) bool unselectAll() unselectAllNodes fontlab.flCanvas.unselectAllNodes = unselectAllNodes (...) bool unselectAllNodes() update fontlab.flCanvas.update = update (...) update() updateCanvasRectA fontlab.flCanvas.updateCanvasRectA = updateCanvasRectA (...) updateCanvasRectA(QRectF) updateMousePos fontlab.flCanvas.updateMousePos = updateMousePos (...) updateMousePos(QPoint) updateScreenRect fontlab.flCanvas.updateScreenRect = updateScreenRect (...) updateScreenRect(QRectF) updateScreenRegion fontlab.flCanvas.updateScreenRegion = updateScreenRegion (...) updateScreenRegion(QRegion) updateViewport fontlab.flCanvas.updateViewport = updateViewport (...) updateViewport() updateViewRect fontlab.flCanvas.updateViewRect = updateViewRect (...) updateViewRect() viewPoint fontlab.flCanvas.viewPoint QPointF viewPort fontlab.flCanvas.viewPort QWidget* viewPortHasFocus fontlab.flCanvas.viewPortHasFocus = viewPortHasFocus (...) bool viewPortHasFocus() viewPortRect fontlab.flCanvas.viewPortRect = viewPortRect (...) QRect viewPortRect() viewRect fontlab.flCanvas.viewRect = viewRect (...) QRectF viewRect() viewTransform fontlab.flCanvas.viewTransform flTransform visible fontlab.flCanvas.visible bool workspace fontlab.flCanvas.workspace flWorkspace zoomTo fontlab.flCanvas.zoomTo = zoomTo (...) zoomTo(QPointF canvas_point, double scale, ViewPointAlignment=vpCenter) | zoomTo(QRectF canvas_rect) zoomToReaded fontlab.flCanvas.zoomToReaded = zoomToReaded (...) zoomToReaded()","title":"flCanvas"},{"location":"fontlab.flCanvas.html#flcanvas","text":"","title":"flCanvas"},{"location":"fontlab.flCanvas.html#acceptevents","text":"fontlab.flCanvas.acceptEvents = acceptEvents (...) int acceptEvents()","title":"acceptEvents"},{"location":"fontlab.flCanvas.html#activateeditor","text":"fontlab.flCanvas.activateEditor = activateEditor (...) void activateEditor(QPointF canvas_pos)","title":"activateEditor"},{"location":"fontlab.flCanvas.html#activatepreviewnodes","text":"fontlab.flCanvas.activatePreviewNodes = activatePreviewNodes (...) activatePreviewNodes()","title":"activatePreviewNodes"},{"location":"fontlab.flCanvas.html#addedtocanvas","text":"fontlab.flCanvas.addedToCanvas = addedToCanvas (...) void addedToCanvas(flCanvas)","title":"addedToCanvas"},{"location":"fontlab.flCanvas.html#addedtoworkspace","text":"fontlab.flCanvas.addedToWorkspace = addedToWorkspace (...) addedToWorkspace(flWorkspace)","title":"addedToWorkspace"},{"location":"fontlab.flCanvas.html#addtextblock","text":"fontlab.flCanvas.addTextBlock = addTextBlock (...) addTextBlock(flTextBlock)","title":"addTextBlock"},{"location":"fontlab.flCanvas.html#adjustcanvasposition","text":"fontlab.flCanvas.adjustCanvasPosition = adjustCanvasPosition (...) QPointF adjustCanvasPosition(QPointF)","title":"adjustCanvasPosition"},{"location":"fontlab.flCanvas.html#adjustposition","text":"fontlab.flCanvas.adjustPosition = adjustPosition (...) QPointF | double adjustPosition(QPointF | double)","title":"adjustPosition"},{"location":"fontlab.flCanvas.html#appenddecorator","text":"fontlab.flCanvas.appendDecorator = appendDecorator (...) void appendDecorator(flVisualItem, DecoratorOrder)","title":"appendDecorator"},{"location":"fontlab.flCanvas.html#availablerect","text":"fontlab.flCanvas.availableRect = availableRect (...) QRectF availableRect()","title":"availableRect"},{"location":"fontlab.flCanvas.html#boundingrectoncanvas","text":"fontlab.flCanvas.boundingRectOnCanvas = boundingRectOnCanvas (...) QRectF boundingRectOnCanvas(","title":"boundingRectOnCanvas"},{"location":"fontlab.flCanvas.html#canvas","text":"fontlab.flCanvas.canvas = canvas (...) flCanvas canvas()","title":"canvas"},{"location":"fontlab.flCanvas.html#changed","text":"fontlab.flCanvas.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flCanvas.html#checkinithistorystate","text":"fontlab.flCanvas.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flCanvas.html#clear","text":"fontlab.flCanvas.clear = clear (...) clear()","title":"clear"},{"location":"fontlab.flCanvas.html#clearabovehistory","text":"fontlab.flCanvas.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flCanvas.html#cleardecorators","text":"fontlab.flCanvas.clearDecorators = clearDecorators (...) clearDecorators()","title":"clearDecorators"},{"location":"fontlab.flCanvas.html#clearflag","text":"fontlab.flCanvas.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flCanvas.html#clearflags","text":"fontlab.flCanvas.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flCanvas.html#clearitems","text":"fontlab.flCanvas.clearItems = clearItems (...) clearItems()","title":"clearItems"},{"location":"fontlab.flCanvas.html#clearsurfaces","text":"fontlab.flCanvas.clearSurfaces = clearSurfaces (...) clearSurfaces()","title":"clearSurfaces"},{"location":"fontlab.flCanvas.html#cleartextblocks","text":"fontlab.flCanvas.clearTextBlocks = clearTextBlocks (...) clearTextBlocks()","title":"clearTextBlocks"},{"location":"fontlab.flCanvas.html#clone","text":"fontlab.flCanvas.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flCanvas.html#cloneobject","text":"fontlab.flCanvas.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flCanvas.html#collectchangedrects","text":"fontlab.flCanvas.collectChangedRects = collectChangedRects (...) collectChangedRects()","title":"collectChangedRects"},{"location":"fontlab.flCanvas.html#contain","text":"fontlab.flCanvas.contain = contain (...) bool contain(QPointF canvas_pos)","title":"contain"},{"location":"fontlab.flCanvas.html#containsitem","text":"fontlab.flCanvas.containsItem = containsItem (...) bool containsItem(flVisualItem)","title":"containsItem"},{"location":"fontlab.flCanvas.html#createframe","text":"fontlab.flCanvas.createFrame = createFrame (...) fgSymbolList createFrame(fgSymbolList list, QPointF position)","title":"createFrame"},{"location":"fontlab.flCanvas.html#createhistorystate","text":"fontlab.flCanvas.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flCanvas.html#createinstance","text":"fontlab.flCanvas.createInstance = createInstance (...) flCanvas createInstance()","title":"createInstance"},{"location":"fontlab.flCanvas.html#createobject","text":"fontlab.flCanvas.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flCanvas.html#currenthistorystate","text":"fontlab.flCanvas.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flCanvas.html#deactivateeditor","text":"fontlab.flCanvas.deactivateEditor = deactivateEditor (...) deactivateEditor()","title":"deactivateEditor"},{"location":"fontlab.flCanvas.html#deactivatepreviewnodes","text":"fontlab.flCanvas.deactivatePreviewNodes = deactivatePreviewNodes (...) deactivatePreviewNodes()","title":"deactivatePreviewNodes"},{"location":"fontlab.flCanvas.html#distanceto","text":"fontlab.flCanvas.distanceTo = distanceTo (...) double distanceTo(QPointF)","title":"distanceTo"},{"location":"fontlab.flCanvas.html#ensurevisible","text":"fontlab.flCanvas.ensureVisible = ensureVisible (...) ensureVisible(QPointF | QRectF canvas_rect[, bool total_cover = true])","title":"ensureVisible"},{"location":"fontlab.flCanvas.html#flag","text":"fontlab.flCanvas.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flCanvas.html#flobjectflags","text":"fontlab.flCanvas.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flCanvas.html#gethighlight","text":"fontlab.flCanvas.getHighlight = getHighlight (...) QRectF/Nothing getHighlight()","title":"getHighlight"},{"location":"fontlab.flCanvas.html#getproperties","text":"fontlab.flCanvas.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flCanvas.html#getproperty","text":"fontlab.flCanvas.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flCanvas.html#getpropertyfloat","text":"fontlab.flCanvas.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flCanvas.html#getpropertyint","text":"fontlab.flCanvas.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flCanvas.html#getscaleto","text":"fontlab.flCanvas.getScaleTo = getScaleTo (...) double getScaleTo(flShapeInfo)","title":"getScaleTo"},{"location":"fontlab.flCanvas.html#haschanges","text":"fontlab.flCanvas.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flCanvas.html#hashistorystate","text":"fontlab.flCanvas.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flCanvas.html#hashistorystates","text":"fontlab.flCanvas.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flCanvas.html#havecanvas","text":"fontlab.flCanvas.haveCanvas = haveCanvas (...) bool haveCanvas()","title":"haveCanvas"},{"location":"fontlab.flCanvas.html#haveeditor","text":"fontlab.flCanvas.haveEditor = haveEditor (...) bool haveEditor(QPointF canvas_pos)","title":"haveEditor"},{"location":"fontlab.flCanvas.html#havehovereditem","text":"fontlab.flCanvas.haveHoveredItem = haveHoveredItem (...) bool haveHoveredItem()","title":"haveHoveredItem"},{"location":"fontlab.flCanvas.html#haveobject","text":"fontlab.flCanvas.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flCanvas.html#haveselectednodes","text":"fontlab.flCanvas.haveSelectedNodes = haveSelectedNodes (...) bool haveSelectedNodes()","title":"haveSelectedNodes"},{"location":"fontlab.flCanvas.html#hide","text":"fontlab.flCanvas.hide = hide (...) hide()","title":"hide"},{"location":"fontlab.flCanvas.html#highlight","text":"fontlab.flCanvas.highlight = highlight (...) highlight(QRectF)","title":"highlight"},{"location":"fontlab.flCanvas.html#historystates","text":"fontlab.flCanvas.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flCanvas.html#hovered","text":"fontlab.flCanvas.hovered bool","title":"hovered"},{"location":"fontlab.flCanvas.html#hovereditem","text":"fontlab.flCanvas.hoveredItem = hoveredItem (...) flVisualItem hoveredItem()","title":"hoveredItem"},{"location":"fontlab.flCanvas.html#id","text":"fontlab.flCanvas.id object id","title":"id"},{"location":"fontlab.flCanvas.html#independedall","text":"fontlab.flCanvas.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flCanvas.html#initialhistorystate","text":"fontlab.flCanvas.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flCanvas.html#instanceacceptevents","text":"fontlab.flCanvas.instanceAcceptEvents = instanceAcceptEvents (...) int instanceAcceptEvents()","title":"instanceAcceptEvents"},{"location":"fontlab.flCanvas.html#instancetype","text":"fontlab.flCanvas.instanceType = instanceType (...) int instanceType()","title":"instanceType"},{"location":"fontlab.flCanvas.html#invertselectednodes","text":"fontlab.flCanvas.invertSelectedNodes = invertSelectedNodes (...) invertSelectedNodes(QList )","title":"invertSelectedNodes"},{"location":"fontlab.flCanvas.html#invselect","text":"fontlab.flCanvas.invselect = invselect (...) invselect()","title":"invselect"},{"location":"fontlab.flCanvas.html#isactivecanvas","text":"fontlab.flCanvas.isActiveCanvas = isActiveCanvas (...) bool isActiveCanvas()","title":"isActiveCanvas"},{"location":"fontlab.flCanvas.html#ischanged","text":"fontlab.flCanvas.isChanged bool","title":"isChanged"},{"location":"fontlab.flCanvas.html#isequal","text":"fontlab.flCanvas.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flCanvas.html#isfocusedcanvas","text":"fontlab.flCanvas.isFocusedCanvas = isFocusedCanvas (...) bool isFocusedCanvas()","title":"isFocusedCanvas"},{"location":"fontlab.flCanvas.html#isnull","text":"fontlab.flCanvas.isNull bool","title":"isNull"},{"location":"fontlab.flCanvas.html#ispresent","text":"fontlab.flCanvas.isPresent bool","title":"isPresent"},{"location":"fontlab.flCanvas.html#isreleased","text":"fontlab.flCanvas.isReleased bool","title":"isReleased"},{"location":"fontlab.flCanvas.html#isselectable","text":"fontlab.flCanvas.isSelectable = isSelectable (...) bool isSelectable()","title":"isSelectable"},{"location":"fontlab.flCanvas.html#isstableselect","text":"fontlab.flCanvas.isStableSelect = isStableSelect (...) bool isStableSelect()","title":"isStableSelect"},{"location":"fontlab.flCanvas.html#isvalid","text":"fontlab.flCanvas.isValid bool","title":"isValid"},{"location":"fontlab.flCanvas.html#itemscale","text":"fontlab.flCanvas.itemScale = itemScale (...) double itemScale()","title":"itemScale"},{"location":"fontlab.flCanvas.html#listeners","text":"fontlab.flCanvas.Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2}","title":"Listeners"},{"location":"fontlab.flCanvas.html#locked","text":"fontlab.flCanvas.locked bool","title":"locked"},{"location":"fontlab.flCanvas.html#mapcanvasdistancetoitem","text":"fontlab.flCanvas.mapCanvasDistanceToItem = mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem(QPointF)","title":"mapCanvasDistanceToItem"},{"location":"fontlab.flCanvas.html#mapcanvastoitem","text":"fontlab.flCanvas.mapCanvasToItem = mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem(QPointF | QRectF)","title":"mapCanvasToItem"},{"location":"fontlab.flCanvas.html#mapdeltafromglobaltocanvas","text":"fontlab.flCanvas.mapDeltaFromGlobalToCanvas = mapDeltaFromGlobalToCanvas (...) QPointF mapDeltaFromGlobalToCanvas(QPoint)","title":"mapDeltaFromGlobalToCanvas"},{"location":"fontlab.flCanvas.html#mapfromglobal","text":"fontlab.flCanvas.mapFromGlobal = mapFromGlobal (...) QRectF | QPointF mapFromGlobal(QRect | QPoint)","title":"mapFromGlobal"},{"location":"fontlab.flCanvas.html#mapfromviewport","text":"fontlab.flCanvas.mapFromViewport = mapFromViewport (...) QRectF | QLineF | QPointF mapFromViewport(QRectF | QRect | QLineF | QPointF | QPoint)","title":"mapFromViewport"},{"location":"fontlab.flCanvas.html#mapitemtocanvas","text":"fontlab.flCanvas.mapItemToCanvas = mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas(QPointF | QRectF)","title":"mapItemToCanvas"},{"location":"fontlab.flCanvas.html#maptoglobal","text":"fontlab.flCanvas.mapToGlobal = mapToGlobal (...) QPointF mapToGlobal(QPointF)","title":"mapToGlobal"},{"location":"fontlab.flCanvas.html#maptoviewport","text":"fontlab.flCanvas.mapToViewport = mapToViewport (...) QPolygonF | QRect | QPoint mapToViewport(QPolygonF | QRect | QPoint)","title":"mapToViewport"},{"location":"fontlab.flCanvas.html#maptoviewportf","text":"fontlab.flCanvas.mapToViewportF = mapToViewportF (...) QPointF | QLineF mapToViewportF(QPointF | QLineF)","title":"mapToViewportF"},{"location":"fontlab.flCanvas.html#metricstep","text":"fontlab.flCanvas.metricStep = metricStep (...) double metricStep()","title":"metricStep"},{"location":"fontlab.flCanvas.html#modelproducer","text":"fontlab.flCanvas.modelProducer flModelProducer","title":"modelProducer"},{"location":"fontlab.flCanvas.html#mouseposition","text":"fontlab.flCanvas.mousePosition = mousePosition (...) QPointF mousePosition()","title":"mousePosition"},{"location":"fontlab.flCanvas.html#mousepressed","text":"fontlab.flCanvas.mousePressed = mousePressed (...) bool mousePressed()","title":"mousePressed"},{"location":"fontlab.flCanvas.html#move","text":"fontlab.flCanvas.move = move (...) void move(QPointF)","title":"move"},{"location":"fontlab.flCanvas.html#name","text":"fontlab.flCanvas.name object name","title":"name"},{"location":"fontlab.flCanvas.html#opacity","text":"fontlab.flCanvas.opacity double","title":"opacity"},{"location":"fontlab.flCanvas.html#operationadjustmetrics","text":"fontlab.flCanvas.operationAdjustMetrics = operationAdjustMetrics (...) operationAdjustMetrics(double delta, bool percent)","title":"operationAdjustMetrics"},{"location":"fontlab.flCanvas.html#operationalign","text":"fontlab.flCanvas.operationAlign = operationAlign (...) operationAlign(Qt::Alignment)","title":"operationAlign"},{"location":"fontlab.flCanvas.html#operationbeauty","text":"fontlab.flCanvas.operationBeauty = operationBeauty (...) operationBeauty(bool)","title":"operationBeauty"},{"location":"fontlab.flCanvas.html#operationbreak","text":"fontlab.flCanvas.operationBreak = operationBreak (...) bool operationBreak(bool notify, bool alone_selected)","title":"operationBreak"},{"location":"fontlab.flCanvas.html#operationcopytomask","text":"fontlab.flCanvas.operationCopyToMask = operationCopyToMask (...) operationCopyToMask(bool global = false)","title":"operationCopyToMask"},{"location":"fontlab.flCanvas.html#operationdecompose","text":"fontlab.flCanvas.operationDecompose = operationDecompose (...) bool operationDecompose()","title":"operationDecompose"},{"location":"fontlab.flCanvas.html#operationfliphorizontal","text":"fontlab.flCanvas.operationFlipHorizontal = operationFlipHorizontal (...) operationFlipHorizontal()","title":"operationFlipHorizontal"},{"location":"fontlab.flCanvas.html#operationflipvertical","text":"fontlab.flCanvas.operationFlipVertical = operationFlipVertical (...) operationFlipVertical()","title":"operationFlipVertical"},{"location":"fontlab.flCanvas.html#operationgenius","text":"fontlab.flCanvas.operationGenius = operationGenius (...) operationGenius(bool)","title":"operationGenius"},{"location":"fontlab.flCanvas.html#operationharmonize","text":"fontlab.flCanvas.operationHarmonize = operationHarmonize (...) operationHarmonize()","title":"operationHarmonize"},{"location":"fontlab.flCanvas.html#operationimprove","text":"fontlab.flCanvas.operationImprove = operationImprove (...) operationImprove()","title":"operationImprove"},{"location":"fontlab.flCanvas.html#operationjoin","text":"fontlab.flCanvas.operationJoin = operationJoin (...) operationJoin()","title":"operationJoin"},{"location":"fontlab.flCanvas.html#operationnoservant","text":"fontlab.flCanvas.operationNoServant = operationNoServant (...) operationNoServant()","title":"operationNoServant"},{"location":"fontlab.flCanvas.html#operationprepare","text":"fontlab.flCanvas.operationPrepare = operationPrepare (...) (flModelProducer, QList selection, flShapeInfo, flGlyphInfo)/Nothing operationPrepare(bool allow_all_contours, bool allow_all_nodes = false)","title":"operationPrepare"},{"location":"fontlab.flCanvas.html#operationreversecontours","text":"fontlab.flCanvas.operationReverseContours = operationReverseContours (...) operationReverseContours()","title":"operationReverseContours"},{"location":"fontlab.flCanvas.html#operationrotate180","text":"fontlab.flCanvas.operationRotate180 = operationRotate180 (...) operationRotate180()","title":"operationRotate180"},{"location":"fontlab.flCanvas.html#operationrotate90","text":"fontlab.flCanvas.operationRotate90 = operationRotate90 (...) operationRotate90()","title":"operationRotate90"},{"location":"fontlab.flCanvas.html#operationservantx","text":"fontlab.flCanvas.operationServantX = operationServantX (...) operationServantX(bool)","title":"operationServantX"},{"location":"fontlab.flCanvas.html#operationservanty","text":"fontlab.flCanvas.operationServantY = operationServantY (...) operationServantY(bool)","title":"operationServantY"},{"location":"fontlab.flCanvas.html#operationsetmetrics","text":"fontlab.flCanvas.operationSetMetrics = operationSetMetrics (...) operationSetMetrics(int mode)","title":"operationSetMetrics"},{"location":"fontlab.flCanvas.html#operationsimplify","text":"fontlab.flCanvas.operationSimplify = operationSimplify (...) operationSimplify()","title":"operationSimplify"},{"location":"fontlab.flCanvas.html#operationsmartangle","text":"fontlab.flCanvas.operationSmartAngle = operationSmartAngle (...) operationSmartAngle(bool)","title":"operationSmartAngle"},{"location":"fontlab.flCanvas.html#operationsmooth","text":"fontlab.flCanvas.operationSmooth = operationSmooth (...) operationSmooth(bool)","title":"operationSmooth"},{"location":"fontlab.flCanvas.html#operationtobeziers","text":"fontlab.flCanvas.operationToBeziers = operationToBeziers (...) operationToBeziers()","title":"operationToBeziers"},{"location":"fontlab.flCanvas.html#operationtocurve","text":"fontlab.flCanvas.operationToCurve = operationToCurve (...) operationToCurve()","title":"operationToCurve"},{"location":"fontlab.flCanvas.html#operationtoline","text":"fontlab.flCanvas.operationToLine = operationToLine (...) operationToLine()","title":"operationToLine"},{"location":"fontlab.flCanvas.html#operationtosplines","text":"fontlab.flCanvas.operationToSplines = operationToSplines (...) operationToSplines()","title":"operationToSplines"},{"location":"fontlab.flCanvas.html#owner","text":"fontlab.flCanvas.owner flVisualItem","title":"owner"},{"location":"fontlab.flCanvas.html#paint","text":"fontlab.flCanvas.paint = paint (...) void paint(QPainter*)","title":"paint"},{"location":"fontlab.flCanvas.html#paper","text":"fontlab.flCanvas.paper flPaper","title":"paper"},{"location":"fontlab.flCanvas.html#placeaicb","text":"fontlab.flCanvas.placeAICB = placeAICB (...) bool placeAICB(QPointF position, QString filename | QMimeData mime_data)","title":"placeAICB"},{"location":"fontlab.flCanvas.html#placeartwork","text":"fontlab.flCanvas.placeArtwork = placeArtwork (...) bool placeArtwork(QPointF position, QList urls_list)","title":"placeArtwork"},{"location":"fontlab.flCanvas.html#popuphost","text":"fontlab.flCanvas.popupHost = popupHost (...) YPopupHost* popupHost()","title":"popupHost"},{"location":"fontlab.flCanvas.html#preview","text":"fontlab.flCanvas.preview = preview (...) preview()","title":"preview"},{"location":"fontlab.flCanvas.html#producer","text":"fontlab.flCanvas.producer = producer (...) flObject producer()","title":"producer"},{"location":"fontlab.flCanvas.html#recttoupdate","text":"fontlab.flCanvas.rectToUpdate = rectToUpdate (...) QRect & rectToUpdate()","title":"rectToUpdate"},{"location":"fontlab.flCanvas.html#refcnt","text":"fontlab.flCanvas.refCnt object references count","title":"refCnt"},{"location":"fontlab.flCanvas.html#referencepoint","text":"fontlab.flCanvas.referencePoint = referencePoint (...) QPointF referencePoint()","title":"referencePoint"},{"location":"fontlab.flCanvas.html#regiontoupdate","text":"fontlab.flCanvas.regionToUpdate = regionToUpdate (...) QRegion & regionToUpdate()","title":"regionToUpdate"},{"location":"fontlab.flCanvas.html#release","text":"fontlab.flCanvas.release = release (...) release()","title":"release"},{"location":"fontlab.flCanvas.html#remove","text":"fontlab.flCanvas.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flCanvas.html#removechild","text":"fontlab.flCanvas.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flCanvas.html#removedeadsmartangles","text":"fontlab.flCanvas.removeDeadSmartAngles = removeDeadSmartAngles (...) removeDeadSmartAngles()","title":"removeDeadSmartAngles"},{"location":"fontlab.flCanvas.html#removedecorator","text":"fontlab.flCanvas.removeDecorator = removeDecorator (...) void removeDecorator(flVisualItem)","title":"removeDecorator"},{"location":"fontlab.flCanvas.html#removedfromcanvas","text":"fontlab.flCanvas.removedFromCanvas = removedFromCanvas (...) removedFromCanvas()","title":"removedFromCanvas"},{"location":"fontlab.flCanvas.html#removedfromworkspace","text":"fontlab.flCanvas.removedFromWorkspace = removedFromWorkspace (...) removedFromWorkspace(flWorkspace)","title":"removedFromWorkspace"},{"location":"fontlab.flCanvas.html#removeitem","text":"fontlab.flCanvas.removeItem = removeItem (...) removeItem(flVisualItem)","title":"removeItem"},{"location":"fontlab.flCanvas.html#removeproperty","text":"fontlab.flCanvas.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flCanvas.html#removetextblock","text":"fontlab.flCanvas.removeTextBlock = removeTextBlock (...) removeTextBlock(flTextBlock)","title":"removeTextBlock"},{"location":"fontlab.flCanvas.html#resethighlight","text":"fontlab.flCanvas.resetHighlight = resetHighlight (...) resetHighlight()","title":"resetHighlight"},{"location":"fontlab.flCanvas.html#restorehistorystate","text":"fontlab.flCanvas.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flCanvas.html#scale","text":"fontlab.flCanvas.scale = scale (...) double scale()","title":"scale"},{"location":"fontlab.flCanvas.html#scaled","text":"fontlab.flCanvas.scaled = scaled (...) double scaled(double d)","title":"scaled"},{"location":"fontlab.flCanvas.html#select","text":"fontlab.flCanvas.select = select (...) select()","title":"select"},{"location":"fontlab.flCanvas.html#selected","text":"fontlab.flCanvas.selected bool","title":"selected"},{"location":"fontlab.flCanvas.html#selectednodes","text":"fontlab.flCanvas.selectedNodes = selectedNodes (...) QList selectedNodes()","title":"selectedNodes"},{"location":"fontlab.flCanvas.html#selection","text":"fontlab.flCanvas.selection = selection (...) QList selection()","title":"selection"},{"location":"fontlab.flCanvas.html#selectnode","text":"fontlab.flCanvas.selectNode = selectNode (...) selectNode(flNodeInfo)","title":"selectNode"},{"location":"fontlab.flCanvas.html#selectnodes","text":"fontlab.flCanvas.selectNodes = selectNodes (...) selectNodes(QList )","title":"selectNodes"},{"location":"fontlab.flCanvas.html#setcursor","text":"fontlab.flCanvas.setCursor = setCursor (...) setCursor(QCursor)","title":"setCursor"},{"location":"fontlab.flCanvas.html#setcursorid","text":"fontlab.flCanvas.setCursorId = setCursorId (...) setCursorId(CursorId)","title":"setCursorId"},{"location":"fontlab.flCanvas.html#setflag","text":"fontlab.flCanvas.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flCanvas.html#setmetricsauto","text":"fontlab.flCanvas.SetMetricsAuto = 2","title":"SetMetricsAuto"},{"location":"fontlab.flCanvas.html#setmetricsdefault","text":"fontlab.flCanvas.SetMetricsDefault = 1","title":"SetMetricsDefault"},{"location":"fontlab.flCanvas.html#setmetricszero","text":"fontlab.flCanvas.SetMetricsZero = 0","title":"SetMetricsZero"},{"location":"fontlab.flCanvas.html#setproperty","text":"fontlab.flCanvas.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flCanvas.html#setpropertyfloat","text":"fontlab.flCanvas.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flCanvas.html#setpropertyint","text":"fontlab.flCanvas.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flCanvas.html#setselectednodes","text":"fontlab.flCanvas.setSelectedNodes = setSelectedNodes (...) setSelectedNodes(QList , bool )","title":"setSelectedNodes"},{"location":"fontlab.flCanvas.html#show","text":"fontlab.flCanvas.show = show (...) show()","title":"show"},{"location":"fontlab.flCanvas.html#slanttransform","text":"fontlab.flCanvas.slantTransform = slantTransform (...) QTransform slantTransform(flGlyphInfo glyph_info)","title":"slantTransform"},{"location":"fontlab.flCanvas.html#tag","text":"fontlab.flCanvas.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flCanvas.html#textblocks","text":"fontlab.flCanvas.textBlocks = textBlocks (...) QList textBlocks()","title":"textBlocks"},{"location":"fontlab.flCanvas.html#transform","text":"fontlab.flCanvas.transform QTransform","title":"transform"},{"location":"fontlab.flCanvas.html#type","text":"fontlab.flCanvas.type object type","title":"type"},{"location":"fontlab.flCanvas.html#unselect","text":"fontlab.flCanvas.unselect = unselect (...) unselect()","title":"unselect"},{"location":"fontlab.flCanvas.html#unselectall","text":"fontlab.flCanvas.unselectAll = unselectAll (...) bool unselectAll()","title":"unselectAll"},{"location":"fontlab.flCanvas.html#unselectallnodes","text":"fontlab.flCanvas.unselectAllNodes = unselectAllNodes (...) bool unselectAllNodes()","title":"unselectAllNodes"},{"location":"fontlab.flCanvas.html#update","text":"fontlab.flCanvas.update = update (...) update()","title":"update"},{"location":"fontlab.flCanvas.html#updatecanvasrecta","text":"fontlab.flCanvas.updateCanvasRectA = updateCanvasRectA (...) updateCanvasRectA(QRectF)","title":"updateCanvasRectA"},{"location":"fontlab.flCanvas.html#updatemousepos","text":"fontlab.flCanvas.updateMousePos = updateMousePos (...) updateMousePos(QPoint)","title":"updateMousePos"},{"location":"fontlab.flCanvas.html#updatescreenrect","text":"fontlab.flCanvas.updateScreenRect = updateScreenRect (...) updateScreenRect(QRectF)","title":"updateScreenRect"},{"location":"fontlab.flCanvas.html#updatescreenregion","text":"fontlab.flCanvas.updateScreenRegion = updateScreenRegion (...) updateScreenRegion(QRegion)","title":"updateScreenRegion"},{"location":"fontlab.flCanvas.html#updateviewport","text":"fontlab.flCanvas.updateViewport = updateViewport (...) updateViewport()","title":"updateViewport"},{"location":"fontlab.flCanvas.html#updateviewrect","text":"fontlab.flCanvas.updateViewRect = updateViewRect (...) updateViewRect()","title":"updateViewRect"},{"location":"fontlab.flCanvas.html#viewpoint","text":"fontlab.flCanvas.viewPoint QPointF","title":"viewPoint"},{"location":"fontlab.flCanvas.html#viewport","text":"fontlab.flCanvas.viewPort QWidget*","title":"viewPort"},{"location":"fontlab.flCanvas.html#viewporthasfocus","text":"fontlab.flCanvas.viewPortHasFocus = viewPortHasFocus (...) bool viewPortHasFocus()","title":"viewPortHasFocus"},{"location":"fontlab.flCanvas.html#viewportrect","text":"fontlab.flCanvas.viewPortRect = viewPortRect (...) QRect viewPortRect()","title":"viewPortRect"},{"location":"fontlab.flCanvas.html#viewrect","text":"fontlab.flCanvas.viewRect = viewRect (...) QRectF viewRect()","title":"viewRect"},{"location":"fontlab.flCanvas.html#viewtransform","text":"fontlab.flCanvas.viewTransform flTransform","title":"viewTransform"},{"location":"fontlab.flCanvas.html#visible","text":"fontlab.flCanvas.visible bool","title":"visible"},{"location":"fontlab.flCanvas.html#workspace","text":"fontlab.flCanvas.workspace flWorkspace","title":"workspace"},{"location":"fontlab.flCanvas.html#zoomto","text":"fontlab.flCanvas.zoomTo = zoomTo (...) zoomTo(QPointF canvas_point, double scale, ViewPointAlignment=vpCenter) | zoomTo(QRectF canvas_rect)","title":"zoomTo"},{"location":"fontlab.flCanvas.html#zoomtoreaded","text":"fontlab.flCanvas.zoomToReaded = zoomToReaded (...) zoomToReaded()","title":"zoomToReaded"},{"location":"fontlab.flContour.html","text":"flContour fontlab.flContour = class flContour ( object ) flContour representation Constructors: flContour() flContour(flObject) flContour(flContour) flContour(fgContour) flContour(id) flContour(list(Node)[, bool closed=false]) flContour(list(QPointF)[, flNode::NodeType=flNode::On[, bool closed=false]]) flContour(QRectF) flContour(QLineF) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value add (...) add (flNode | QPointF) addInterval (...) addInterval (Interval) addMarker (...) addMarker ( flContourMarker) addMarkers (...) addMarkers ( list(flContourMarker) ) append (...) append (list(flNode) | flContour) appendMapped (...) appendMapped (list(flNode) | flContour, QTransform) appendMarkers (...) appendMarkers (list(flContourMarker)) applyTransform (...) applyTransform () assign (...) assign (flContour | fgContour | list(flNode)) assignOwner (...) assignOwner () at (...) flNode at (int index) autoG2 (...) autoG2 (float tolerance) beautify (...) bool beautify ([int precision = 1]) bindDependencies (...) bindDependencies () boundingBox (...) QRectF boundingBox ([QTransform]) breakContour (...) (flContour, flNode, flNode)/Nothing breakContour (flNode) | flContour/Nothing breakContour (int node_ix) breakContourExpanded (...) flContour/Nothing breakContourExpanded (int node_ix | flNode [, float extrapolate_d] calculate (...) QPointF calculate (float t[, QTransform tx]) changed (...) changed () checkFa (...) list(FaBasic) checkFa (list(int) tests) checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkSmooth (...) checkSmooth () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearIntervals (...) clearIntervals ([uint key]) clearMarkers (...) clearMarkers () clearNodes (...) clearNodes () clone (...) Clone the object cloneMapped (...) flContour cloneMapped (QTransform[, float ex_t0, float ex_t1]) cloneMappedByT (...) flContour cloneMappedByT (QTransform tx, float t0, float t1) cloneSelected (...) list(flContour)/Nothing cloneSelected ([QTransform, [bool ignore_alone=true]]) compare (...) (bool result, QPointF offset) compare (flContour, float error) contains (...) bool contains (flContour knife | QPointF) convertClToT (...) float convertClToT (float) convertExToCl (...) float convertExToCl (float) convertExToT (...) float convertExToT (float) convertTTtoCurve (...) convertTTtoCurve () convertToFgContour (...) fgContour convertToFgContour ([QTransform tx]) convertTtoCl (...) float convertTtoCl (float) convertTtoEx (...) float convertTtoEx (float) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() curvature (...) float curvature (float) derivative (...) QPointF derivative (float) distanceBetween (...) float distanceBetween (float t0, float t1[, float step =0.1]) draw (...) draw (pen) - Draw the contour\u2019s outline data to the given type-pen drawPoints (...) drawPoints (point-pen) - Draw the contour\u2019s outline data to the given type-point-pen extrapolateFirst (...) extrapolateFirst (float) extrapolateLast (...) extrapolateLast (float) fastAppend (...) fastAppend ( list(flNode) ) fastClone (...) flContour fastClone (float ex_t0, float ex_t1) fastCloneByT (...) flContour fastCloneByT (float t0, float t1) find (...) flNode find (QPointF, float, flNode::NodeType) findNearest (...) (float out_nearest_t, float dist)/Nothing findNearest (QPointF shape_p[, int orientation=0]) findNearestNode (...) (flNode, float new_maxd)/Nothing findNearestNode (QPointF p, flNode::NodeType node_type, float maxd) findNearestOn (...) float out_nearest_t/Nothing findNearestOn (QPointF p, float base_t) findNode (...) flNode/Nothing findNode (uint id | string name) flag (...) flag (uint f) getBoundedT (...) float getBoundedT (float param_t, float radius) getChangesRect (...) QRectF getChangesRect () getFirstPoint (...) QPointF/Nothing getFirstPoint ([int =0]) getIntervals (...) list(Interval) getIntervals (uint key) getLastPoint (...) QPointF/Nothing getLastPoint ([int =0]) getLength (...) float getLength ([float t0, float t1,] int =10) getLengthSquareBRect (...) (float square, float length, QRectF brect) getLengthSquareBRect (float t0, float t1[, int step=10]) getNext (...) flNode/Nothing getNext (index[, flNode::NodeType=flNode::On]) getNextT (...) (bool, float) getNextT (float base_t, float offset) getNodeAt (...) flNode/Nothing getNodeAt (int idx[, flNode::NodeType = flNode::AnyNodeMask]) getPoint (...) QPointF/Nothing getPoint (int idx[, flNode::NodeType = flNode::On]) getPrev (...) flNode/Nothing getPrev (index[, flNode::NodeType=flNode::On]) getPrevT (...) (bool, float) getPrevT (float base_t, float offset) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSegment (...) list(flNode) getSegment (int i0, int i1, bool left) getSelectedBoundingBox (...) QRectF getSelectedBoundingBox () getSelectedNodes (...) list(flNode)/Nothing getSelectedNodes () getSideOf (...) float getSideOf (QPointF p) getSquare (...) double getSquare () getT (...) float getT (flNode) getUpdateRect (...) QRectF getUpdateRect (float ex_t) hasHistoryState (...) hasHistoryState (uint history_ix) hasIntersPoints (...) bool hasIntersPoints (flContour) hasSelected (...) bool hasSelected (SelectionMode) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () indentParamT (...) float indentParamT (float base_t, float indent[, float step =0.1]) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx]) insert (...) insert (index, flNode | list(flNode) ) insertNodeTo (...) flNode insertNodeTo (float t) insertSafeNodeTo (...) flNode insertSafeNodeTo (float t, float dst) intervals (...) list(Interval) intervals () isAllNodesSelected (...) bool isAllNodesSelected () isCompatible (...) bool isCompatible (flContour, bool strong) isEqual (...) isEqual (flObject) isFirst (...) bool isFirst (flNode) isLast (...) bool isLast (flNode) isSelected (...) bool isSelected (float) mapParamT (...) float mapParamT (float, float, float) markers (...) list(flContourMarker) markers () move (...) move (QPointF) nodes (...) list(flNode) nodes () normalAt (...) float normalAt (float t[, QTransform]) normalPoint (...) QPointF normalPoint (float t, float length) normalizeExT (...) float normalizeExT (float) path (...) QPainterPath path () pointInside (...) pointInside (QPointF pt) - Bool indicating if the point pt in the black area of the contour pointf (...) QPointF pointf (int index) release (...) release () remove (...) remove ([flObject]) removeAt (...) removeAt (int index) removeChild (...) removeChild (flObject) removeLast (...) removeLast () removeMarker (...) removeMarker ( flContourMarker ) removeNodesBetween (...) removeNodesBetween (flNode prev, flNode next) removeOne (...) removeOne (flNode) removeProperty (...) removeProperty ('key') replace (...) replace (flNode old_node, flNode new_node) restoreHistoryState (...) restoreHistoryState (uint history_ix) reverse (...) reverse () - Reverse the direction of the contour secondDerivative (...) QPointF secondDerivative (float) segment (...) CurveEx/Nothing segment (float t) segments (...) list(CurveEx) segments () selectedPath (...) QPainterPath selectedPath () selectionChanged (...) selectionChanged () setFlag (...) setFlag (uint f [, bool value]) setNext (...) flNode setNext (int, QPointF) setPoint (...) flNode setPoint (int index, QPointF p) setPrev (...) flNode setPrev (int, QPointF) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSelectedNodes (...) setSelectedNodes (bool) setStartPoint (...) bool setStartPoint (int i) simplify (...) simplify (float precision, bool lossy, bool extremes) tag (...) tag ([string]) takeNodes (...) list(flNode) takeNodes () tangent (...) float tangent (float t) toBeziers (...) toBeziers (float tolerance) toSplines (...) toSplines (float tolerance, bool short_splines) unselectAll (...) unselectAll () unselectedPath (...) QPainterPath unselectedPath () update (...) update () updateG2 (...) updateG2 (bool all_nodes) updateHobby (...) updateHobby (bool all_nodes) updateIndices (...) updateIndices () validateExT (...) (new_ex_t, bool) validateExT (float ex_t) validateIndex (...) (new_inx, bool) validateIndex (int inx) validateSmartR (...) (new_r, max_available_r, bool) validateSmartR (int node_ix, float r) validateT (...) (new_t, bool) validateT (float t) validatedT (...) float validatedT (float t) verifySmooth (...) verifySmooth () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors bounds The bounds of the contour as tuple (xMin, yMin, xMax, yMax) or None clockwise Bool indicating if the contour\u2019s winding direction is clockwise closed closed attribute closedT0 closedT0 attr closedT1 closedT1 attr first first node font The contour\u2019s parent font glyph The contour\u2019s parent glyph hasChanges bool hasCorners hasCorners hasHistoryStates bool hasSmartAngle hasSmartAngle id object id isChanged bool isComplete isComplete isNull bool isPresent bool isReleased bool isTT is truetype isValid bool last last node layer The contour\u2019s parent layer name object name nodesCount nodes count paramT0 paramT0 attr paramT1 paramT1 attr paramsClosed paramsClosed attribute prevLast last but one node refCnt object references count reversed reversed selection selection list (list ) transform transform matrix type object type Attributes FigureType = {'figureEllipse': 1, 'figureRectangle': 2} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} add fontlab.flContour.add = add (...) add(flNode | QPointF) addInterval fontlab.flContour.addInterval = addInterval (...) addInterval(Interval) addMarker fontlab.flContour.addMarker = addMarker (...) addMarker( flContourMarker) addMarkers fontlab.flContour.addMarkers = addMarkers (...) addMarkers( list(flContourMarker) ) append fontlab.flContour.append = append (...) append(list(flNode) | flContour) appendMapped fontlab.flContour.appendMapped = appendMapped (...) appendMapped(list(flNode) | flContour, QTransform) appendMarkers fontlab.flContour.appendMarkers = appendMarkers (...) appendMarkers(list(flContourMarker)) applyTransform fontlab.flContour.applyTransform = applyTransform (...) applyTransform() assign fontlab.flContour.assign = assign (...) assign(flContour | fgContour | list(flNode)) assignOwner fontlab.flContour.assignOwner = assignOwner (...) assignOwner() at fontlab.flContour.at = at (...) flNode at(int index) autoG2 fontlab.flContour.autoG2 = autoG2 (...) autoG2(float tolerance) beautify fontlab.flContour.beautify = beautify (...) bool beautify([int precision = 1]) bindDependencies fontlab.flContour.bindDependencies = bindDependencies (...) bindDependencies() boundingBox fontlab.flContour.boundingBox = boundingBox (...) QRectF boundingBox([QTransform]) bounds fontlab.flContour.bounds The bounds of the contour as tuple (xMin, yMin, xMax, yMax) or None breakContour fontlab.flContour.breakContour = breakContour (...) (flContour, flNode, flNode)/Nothing breakContour(flNode) | flContour/Nothing breakContour(int node_ix) breakContourExpanded fontlab.flContour.breakContourExpanded = breakContourExpanded (...) flContour/Nothing breakContourExpanded(int node_ix | flNode [, float extrapolate_d] calculate fontlab.flContour.calculate = calculate (...) QPointF calculate(float t[, QTransform tx]) changed fontlab.flContour.changed = changed (...) changed() checkFa fontlab.flContour.checkFa = checkFa (...) list(FaBasic) checkFa(list(int) tests) checkInitHistoryState fontlab.flContour.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) checkSmooth fontlab.flContour.checkSmooth = checkSmooth (...) checkSmooth() clearAboveHistory fontlab.flContour.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flContour.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flContour.clearFlags = clearFlags (...) clearFlags() clearIntervals fontlab.flContour.clearIntervals = clearIntervals (...) clearIntervals([uint key]) clearMarkers fontlab.flContour.clearMarkers = clearMarkers (...) clearMarkers() clearNodes fontlab.flContour.clearNodes = clearNodes (...) clearNodes() clockwise fontlab.flContour.clockwise Bool indicating if the contour\u2019s winding direction is clockwise clone fontlab.flContour.clone = clone (...) Clone the object cloneMapped fontlab.flContour.cloneMapped = cloneMapped (...) flContour cloneMapped(QTransform[, float ex_t0, float ex_t1]) cloneMappedByT fontlab.flContour.cloneMappedByT = cloneMappedByT (...) flContour cloneMappedByT(QTransform tx, float t0, float t1) cloneObject fontlab.flContour.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); cloneSelected fontlab.flContour.cloneSelected = cloneSelected (...) list(flContour)/Nothing cloneSelected([QTransform, [bool ignore_alone=true]]) closed fontlab.flContour.closed closed attribute closedT0 fontlab.flContour.closedT0 closedT0 attr closedT1 fontlab.flContour.closedT1 closedT1 attr compare fontlab.flContour.compare = compare (...) (bool result, QPointF offset) compare(flContour, float error) contains fontlab.flContour.contains = contains (...) bool contains(flContour knife | QPointF) convertClToT fontlab.flContour.convertClToT = convertClToT (...) float convertClToT(float) convertExToCl fontlab.flContour.convertExToCl = convertExToCl (...) float convertExToCl(float) convertExToT fontlab.flContour.convertExToT = convertExToT (...) float convertExToT(float) convertToFgContour fontlab.flContour.convertToFgContour = convertToFgContour (...) fgContour convertToFgContour([QTransform tx]) convertTtoCl fontlab.flContour.convertTtoCl = convertTtoCl (...) float convertTtoCl(float) convertTtoEx fontlab.flContour.convertTtoEx = convertTtoEx (...) float convertTtoEx(float) convertTTtoCurve fontlab.flContour.convertTTtoCurve = convertTTtoCurve (...) convertTTtoCurve() createHistoryState fontlab.flContour.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flContour.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flContour.currentHistoryState = currentHistoryState (...) currentHistoryIx() curvature fontlab.flContour.curvature = curvature (...) float curvature(float) derivative fontlab.flContour.derivative = derivative (...) QPointF derivative(float) distanceBetween fontlab.flContour.distanceBetween = distanceBetween (...) float distanceBetween(float t0, float t1[, float step =0.1]) draw fontlab.flContour.draw = draw (...) draw(pen) - Draw the contour\u2019s outline data to the given type-pen drawPoints fontlab.flContour.drawPoints = drawPoints (...) drawPoints(point-pen) - Draw the contour\u2019s outline data to the given type-point-pen extrapolateFirst fontlab.flContour.extrapolateFirst = extrapolateFirst (...) extrapolateFirst(float) extrapolateLast fontlab.flContour.extrapolateLast = extrapolateLast (...) extrapolateLast(float) fastAppend fontlab.flContour.fastAppend = fastAppend (...) fastAppend( list(flNode) ) fastClone fontlab.flContour.fastClone = fastClone (...) flContour fastClone(float ex_t0, float ex_t1) fastCloneByT fontlab.flContour.fastCloneByT = fastCloneByT (...) flContour fastCloneByT(float t0, float t1) FigureType fontlab.flContour.FigureType = {'figureEllipse': 1, 'figureRectangle': 2} find fontlab.flContour.find = find (...) flNode find(QPointF, float, flNode::NodeType) findNearest fontlab.flContour.findNearest = findNearest (...) (float out_nearest_t, float dist)/Nothing findNearest(QPointF shape_p[, int orientation=0]) findNearestNode fontlab.flContour.findNearestNode = findNearestNode (...) (flNode, float new_maxd)/Nothing findNearestNode(QPointF p, flNode::NodeType node_type, float maxd) findNearestOn fontlab.flContour.findNearestOn = findNearestOn (...) float out_nearest_t/Nothing findNearestOn(QPointF p, float base_t) findNode fontlab.flContour.findNode = findNode (...) flNode/Nothing findNode(uint id | string name) first fontlab.flContour.first first node flag fontlab.flContour.flag = flag (...) flag(uint f) flObjectFlags fontlab.flContour.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} font fontlab.flContour.font The contour\u2019s parent font getBoundedT fontlab.flContour.getBoundedT = getBoundedT (...) float getBoundedT(float param_t, float radius) getChangesRect fontlab.flContour.getChangesRect = getChangesRect (...) QRectF getChangesRect() getFirstPoint fontlab.flContour.getFirstPoint = getFirstPoint (...) QPointF/Nothing getFirstPoint([int =0]) getIntervals fontlab.flContour.getIntervals = getIntervals (...) list(Interval) getIntervals(uint key) getLastPoint fontlab.flContour.getLastPoint = getLastPoint (...) QPointF/Nothing getLastPoint([int =0]) getLength fontlab.flContour.getLength = getLength (...) float getLength([float t0, float t1,] int =10) getLengthSquareBRect fontlab.flContour.getLengthSquareBRect = getLengthSquareBRect (...) (float square, float length, QRectF brect) getLengthSquareBRect(float t0, float t1[, int step=10]) getNext fontlab.flContour.getNext = getNext (...) flNode/Nothing getNext(index[, flNode::NodeType=flNode::On]) getNextT fontlab.flContour.getNextT = getNextT (...) (bool, float) getNextT(float base_t, float offset) getNodeAt fontlab.flContour.getNodeAt = getNodeAt (...) flNode/Nothing getNodeAt(int idx[, flNode::NodeType = flNode::AnyNodeMask]) getPoint fontlab.flContour.getPoint = getPoint (...) QPointF/Nothing getPoint(int idx[, flNode::NodeType = flNode::On]) getPrev fontlab.flContour.getPrev = getPrev (...) flNode/Nothing getPrev(index[, flNode::NodeType=flNode::On]) getPrevT fontlab.flContour.getPrevT = getPrevT (...) (bool, float) getPrevT(float base_t, float offset) getProperties fontlab.flContour.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flContour.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flContour.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flContour.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getSegment fontlab.flContour.getSegment = getSegment (...) list(flNode) getSegment(int i0, int i1, bool left) getSelectedBoundingBox fontlab.flContour.getSelectedBoundingBox = getSelectedBoundingBox (...) QRectF getSelectedBoundingBox() getSelectedNodes fontlab.flContour.getSelectedNodes = getSelectedNodes (...) list(flNode)/Nothing getSelectedNodes() getSideOf fontlab.flContour.getSideOf = getSideOf (...) float getSideOf(QPointF p) getSquare fontlab.flContour.getSquare = getSquare (...) double getSquare() getT fontlab.flContour.getT = getT (...) float getT(flNode) getUpdateRect fontlab.flContour.getUpdateRect = getUpdateRect (...) QRectF getUpdateRect(float ex_t) glyph fontlab.flContour.glyph The contour\u2019s parent glyph hasChanges fontlab.flContour.hasChanges bool hasCorners fontlab.flContour.hasCorners hasCorners hasHistoryState fontlab.flContour.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flContour.hasHistoryStates bool hasIntersPoints fontlab.flContour.hasIntersPoints = hasIntersPoints (...) bool hasIntersPoints(flContour) hasSelected fontlab.flContour.hasSelected = hasSelected (...) bool hasSelected(SelectionMode) hasSmartAngle fontlab.flContour.hasSmartAngle hasSmartAngle haveObject fontlab.flContour.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flContour.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flContour.id object id improve fontlab.flContour.improve = improve (...) bool improve() indentParamT fontlab.flContour.indentParamT = indentParamT (...) float indentParamT(float base_t, float indent[, float step =0.1]) independedAll fontlab.flContour.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flContour.initialHistoryState = initialHistoryState (...) initialHistoryIx() inkBox fontlab.flContour.inkBox = inkBox (...) QRectF inkBox([QTransform tx]) insert fontlab.flContour.insert = insert (...) insert(index, flNode | list(flNode) ) insertNodeTo fontlab.flContour.insertNodeTo = insertNodeTo (...) flNode insertNodeTo(float t) insertSafeNodeTo fontlab.flContour.insertSafeNodeTo = insertSafeNodeTo (...) flNode insertSafeNodeTo(float t, float dst) instanceType fontlab.flContour.instanceType = instanceType (...) int instanceType(); intervals fontlab.flContour.intervals = intervals (...) list(Interval) intervals() isAllNodesSelected fontlab.flContour.isAllNodesSelected = isAllNodesSelected (...) bool isAllNodesSelected() isChanged fontlab.flContour.isChanged bool isCompatible fontlab.flContour.isCompatible = isCompatible (...) bool isCompatible(flContour, bool strong) isComplete fontlab.flContour.isComplete isComplete isEqual fontlab.flContour.isEqual = isEqual (...) isEqual(flObject) isFirst fontlab.flContour.isFirst = isFirst (...) bool isFirst(flNode) isLast fontlab.flContour.isLast = isLast (...) bool isLast(flNode) isNull fontlab.flContour.isNull bool isPresent fontlab.flContour.isPresent bool isReleased fontlab.flContour.isReleased bool isSelected fontlab.flContour.isSelected = isSelected (...) bool isSelected(float) isTT fontlab.flContour.isTT is truetype isValid fontlab.flContour.isValid bool last fontlab.flContour.last last node layer fontlab.flContour.layer The contour\u2019s parent layer mapParamT fontlab.flContour.mapParamT = mapParamT (...) float mapParamT(float, float, float) markers fontlab.flContour.markers = markers (...) list(flContourMarker) markers() move fontlab.flContour.move = move (...) move(QPointF) name fontlab.flContour.name object name nodes fontlab.flContour.nodes = nodes (...) list(flNode) nodes() nodesCount fontlab.flContour.nodesCount nodes count normalAt fontlab.flContour.normalAt = normalAt (...) float normalAt(float t[, QTransform]) normalizeExT fontlab.flContour.normalizeExT = normalizeExT (...) float normalizeExT(float) normalPoint fontlab.flContour.normalPoint = normalPoint (...) QPointF normalPoint(float t, float length) paramsClosed fontlab.flContour.paramsClosed paramsClosed attribute paramT0 fontlab.flContour.paramT0 paramT0 attr paramT1 fontlab.flContour.paramT1 paramT1 attr path fontlab.flContour.path = path (...) QPainterPath path() pointf fontlab.flContour.pointf = pointf (...) QPointF pointf(int index) pointInside fontlab.flContour.pointInside = pointInside (...) pointInside(QPointF pt) - Bool indicating if the point pt in the black area of the contour prevLast fontlab.flContour.prevLast last but one node refCnt fontlab.flContour.refCnt object references count release fontlab.flContour.release = release (...) release() remove fontlab.flContour.remove = remove (...) remove([flObject]) removeAt fontlab.flContour.removeAt = removeAt (...) removeAt(int index) removeChild fontlab.flContour.removeChild = removeChild (...) removeChild(flObject) removeLast fontlab.flContour.removeLast = removeLast (...) removeLast() removeMarker fontlab.flContour.removeMarker = removeMarker (...) removeMarker( flContourMarker ) removeNodesBetween fontlab.flContour.removeNodesBetween = removeNodesBetween (...) removeNodesBetween(flNode prev, flNode next) removeOne fontlab.flContour.removeOne = removeOne (...) removeOne(flNode) removeProperty fontlab.flContour.removeProperty = removeProperty (...) removeProperty('key') replace fontlab.flContour.replace = replace (...) replace(flNode old_node, flNode new_node) restoreHistoryState fontlab.flContour.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) reverse fontlab.flContour.reverse = reverse (...) reverse() - Reverse the direction of the contour reversed fontlab.flContour.reversed reversed secondDerivative fontlab.flContour.secondDerivative = secondDerivative (...) QPointF secondDerivative(float) segment fontlab.flContour.segment = segment (...) CurveEx/Nothing segment(float t) segments fontlab.flContour.segments = segments (...) list(CurveEx) segments() selectedPath fontlab.flContour.selectedPath = selectedPath (...) QPainterPath selectedPath() selection fontlab.flContour.selection selection list (list ) selectionChanged fontlab.flContour.selectionChanged = selectionChanged (...) selectionChanged() setFlag fontlab.flContour.setFlag = setFlag (...) setFlag(uint f [, bool value]) setNext fontlab.flContour.setNext = setNext (...) flNode setNext(int, QPointF) setPoint fontlab.flContour.setPoint = setPoint (...) flNode setPoint(int index, QPointF p) setPrev fontlab.flContour.setPrev = setPrev (...) flNode setPrev(int, QPointF) setProperty fontlab.flContour.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flContour.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flContour.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSelectedNodes fontlab.flContour.setSelectedNodes = setSelectedNodes (...) setSelectedNodes(bool) setStartPoint fontlab.flContour.setStartPoint = setStartPoint (...) bool setStartPoint(int i) simplify fontlab.flContour.simplify = simplify (...) simplify(float precision, bool lossy, bool extremes) tag fontlab.flContour.tag = tag (...) tag([string]) takeNodes fontlab.flContour.takeNodes = takeNodes (...) list(flNode) takeNodes() tangent fontlab.flContour.tangent = tangent (...) float tangent(float t) toBeziers fontlab.flContour.toBeziers = toBeziers (...) toBeziers(float tolerance) toSplines fontlab.flContour.toSplines = toSplines (...) toSplines(float tolerance, bool short_splines) transform fontlab.flContour.transform transform matrix type fontlab.flContour.type object type unselectAll fontlab.flContour.unselectAll = unselectAll (...) unselectAll() unselectedPath fontlab.flContour.unselectedPath = unselectedPath (...) QPainterPath unselectedPath() update fontlab.flContour.update = update (...) update() updateG2 fontlab.flContour.updateG2 = updateG2 (...) updateG2(bool all_nodes) updateHobby fontlab.flContour.updateHobby = updateHobby (...) updateHobby(bool all_nodes) updateIndices fontlab.flContour.updateIndices = updateIndices (...) updateIndices() validatedT fontlab.flContour.validatedT = validatedT (...) float validatedT(float t) validateExT fontlab.flContour.validateExT = validateExT (...) (new_ex_t, bool) validateExT(float ex_t) validateIndex fontlab.flContour.validateIndex = validateIndex (...) (new_inx, bool) validateIndex(int inx) validateSmartR fontlab.flContour.validateSmartR = validateSmartR (...) (new_r, max_available_r, bool) validateSmartR(int node_ix, float r) validateT fontlab.flContour.validateT = validateT (...) (new_t, bool) validateT(float t) verifySmooth fontlab.flContour.verifySmooth = verifySmooth (...) verifySmooth()","title":"flContour"},{"location":"fontlab.flContour.html#flcontour","text":"","title":"flContour"},{"location":"fontlab.flContour.html#add","text":"fontlab.flContour.add = add (...) add(flNode | QPointF)","title":"add"},{"location":"fontlab.flContour.html#addinterval","text":"fontlab.flContour.addInterval = addInterval (...) addInterval(Interval)","title":"addInterval"},{"location":"fontlab.flContour.html#addmarker","text":"fontlab.flContour.addMarker = addMarker (...) addMarker( flContourMarker)","title":"addMarker"},{"location":"fontlab.flContour.html#addmarkers","text":"fontlab.flContour.addMarkers = addMarkers (...) addMarkers( list(flContourMarker) )","title":"addMarkers"},{"location":"fontlab.flContour.html#append","text":"fontlab.flContour.append = append (...) append(list(flNode) | flContour)","title":"append"},{"location":"fontlab.flContour.html#appendmapped","text":"fontlab.flContour.appendMapped = appendMapped (...) appendMapped(list(flNode) | flContour, QTransform)","title":"appendMapped"},{"location":"fontlab.flContour.html#appendmarkers","text":"fontlab.flContour.appendMarkers = appendMarkers (...) appendMarkers(list(flContourMarker))","title":"appendMarkers"},{"location":"fontlab.flContour.html#applytransform","text":"fontlab.flContour.applyTransform = applyTransform (...) applyTransform()","title":"applyTransform"},{"location":"fontlab.flContour.html#assign","text":"fontlab.flContour.assign = assign (...) assign(flContour | fgContour | list(flNode))","title":"assign"},{"location":"fontlab.flContour.html#assignowner","text":"fontlab.flContour.assignOwner = assignOwner (...) assignOwner()","title":"assignOwner"},{"location":"fontlab.flContour.html#at","text":"fontlab.flContour.at = at (...) flNode at(int index)","title":"at"},{"location":"fontlab.flContour.html#autog2","text":"fontlab.flContour.autoG2 = autoG2 (...) autoG2(float tolerance)","title":"autoG2"},{"location":"fontlab.flContour.html#beautify","text":"fontlab.flContour.beautify = beautify (...) bool beautify([int precision = 1])","title":"beautify"},{"location":"fontlab.flContour.html#binddependencies","text":"fontlab.flContour.bindDependencies = bindDependencies (...) bindDependencies()","title":"bindDependencies"},{"location":"fontlab.flContour.html#boundingbox","text":"fontlab.flContour.boundingBox = boundingBox (...) QRectF boundingBox([QTransform])","title":"boundingBox"},{"location":"fontlab.flContour.html#bounds","text":"fontlab.flContour.bounds The bounds of the contour as tuple (xMin, yMin, xMax, yMax) or None","title":"bounds"},{"location":"fontlab.flContour.html#breakcontour","text":"fontlab.flContour.breakContour = breakContour (...) (flContour, flNode, flNode)/Nothing breakContour(flNode) | flContour/Nothing breakContour(int node_ix)","title":"breakContour"},{"location":"fontlab.flContour.html#breakcontourexpanded","text":"fontlab.flContour.breakContourExpanded = breakContourExpanded (...) flContour/Nothing breakContourExpanded(int node_ix | flNode [, float extrapolate_d]","title":"breakContourExpanded"},{"location":"fontlab.flContour.html#calculate","text":"fontlab.flContour.calculate = calculate (...) QPointF calculate(float t[, QTransform tx])","title":"calculate"},{"location":"fontlab.flContour.html#changed","text":"fontlab.flContour.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flContour.html#checkfa","text":"fontlab.flContour.checkFa = checkFa (...) list(FaBasic) checkFa(list(int) tests)","title":"checkFa"},{"location":"fontlab.flContour.html#checkinithistorystate","text":"fontlab.flContour.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flContour.html#checksmooth","text":"fontlab.flContour.checkSmooth = checkSmooth (...) checkSmooth()","title":"checkSmooth"},{"location":"fontlab.flContour.html#clearabovehistory","text":"fontlab.flContour.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flContour.html#clearflag","text":"fontlab.flContour.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flContour.html#clearflags","text":"fontlab.flContour.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flContour.html#clearintervals","text":"fontlab.flContour.clearIntervals = clearIntervals (...) clearIntervals([uint key])","title":"clearIntervals"},{"location":"fontlab.flContour.html#clearmarkers","text":"fontlab.flContour.clearMarkers = clearMarkers (...) clearMarkers()","title":"clearMarkers"},{"location":"fontlab.flContour.html#clearnodes","text":"fontlab.flContour.clearNodes = clearNodes (...) clearNodes()","title":"clearNodes"},{"location":"fontlab.flContour.html#clockwise","text":"fontlab.flContour.clockwise Bool indicating if the contour\u2019s winding direction is clockwise","title":"clockwise"},{"location":"fontlab.flContour.html#clone","text":"fontlab.flContour.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flContour.html#clonemapped","text":"fontlab.flContour.cloneMapped = cloneMapped (...) flContour cloneMapped(QTransform[, float ex_t0, float ex_t1])","title":"cloneMapped"},{"location":"fontlab.flContour.html#clonemappedbyt","text":"fontlab.flContour.cloneMappedByT = cloneMappedByT (...) flContour cloneMappedByT(QTransform tx, float t0, float t1)","title":"cloneMappedByT"},{"location":"fontlab.flContour.html#cloneobject","text":"fontlab.flContour.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flContour.html#cloneselected","text":"fontlab.flContour.cloneSelected = cloneSelected (...) list(flContour)/Nothing cloneSelected([QTransform, [bool ignore_alone=true]])","title":"cloneSelected"},{"location":"fontlab.flContour.html#closed","text":"fontlab.flContour.closed closed attribute","title":"closed"},{"location":"fontlab.flContour.html#closedt0","text":"fontlab.flContour.closedT0 closedT0 attr","title":"closedT0"},{"location":"fontlab.flContour.html#closedt1","text":"fontlab.flContour.closedT1 closedT1 attr","title":"closedT1"},{"location":"fontlab.flContour.html#compare","text":"fontlab.flContour.compare = compare (...) (bool result, QPointF offset) compare(flContour, float error)","title":"compare"},{"location":"fontlab.flContour.html#contains","text":"fontlab.flContour.contains = contains (...) bool contains(flContour knife | QPointF)","title":"contains"},{"location":"fontlab.flContour.html#convertcltot","text":"fontlab.flContour.convertClToT = convertClToT (...) float convertClToT(float)","title":"convertClToT"},{"location":"fontlab.flContour.html#convertextocl","text":"fontlab.flContour.convertExToCl = convertExToCl (...) float convertExToCl(float)","title":"convertExToCl"},{"location":"fontlab.flContour.html#convertextot","text":"fontlab.flContour.convertExToT = convertExToT (...) float convertExToT(float)","title":"convertExToT"},{"location":"fontlab.flContour.html#converttofgcontour","text":"fontlab.flContour.convertToFgContour = convertToFgContour (...) fgContour convertToFgContour([QTransform tx])","title":"convertToFgContour"},{"location":"fontlab.flContour.html#convertttocl","text":"fontlab.flContour.convertTtoCl = convertTtoCl (...) float convertTtoCl(float)","title":"convertTtoCl"},{"location":"fontlab.flContour.html#convertttoex","text":"fontlab.flContour.convertTtoEx = convertTtoEx (...) float convertTtoEx(float)","title":"convertTtoEx"},{"location":"fontlab.flContour.html#converttttocurve","text":"fontlab.flContour.convertTTtoCurve = convertTTtoCurve (...) convertTTtoCurve()","title":"convertTTtoCurve"},{"location":"fontlab.flContour.html#createhistorystate","text":"fontlab.flContour.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flContour.html#createobject","text":"fontlab.flContour.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flContour.html#currenthistorystate","text":"fontlab.flContour.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flContour.html#curvature","text":"fontlab.flContour.curvature = curvature (...) float curvature(float)","title":"curvature"},{"location":"fontlab.flContour.html#derivative","text":"fontlab.flContour.derivative = derivative (...) QPointF derivative(float)","title":"derivative"},{"location":"fontlab.flContour.html#distancebetween","text":"fontlab.flContour.distanceBetween = distanceBetween (...) float distanceBetween(float t0, float t1[, float step =0.1])","title":"distanceBetween"},{"location":"fontlab.flContour.html#draw","text":"fontlab.flContour.draw = draw (...) draw(pen) - Draw the contour\u2019s outline data to the given type-pen","title":"draw"},{"location":"fontlab.flContour.html#drawpoints","text":"fontlab.flContour.drawPoints = drawPoints (...) drawPoints(point-pen) - Draw the contour\u2019s outline data to the given type-point-pen","title":"drawPoints"},{"location":"fontlab.flContour.html#extrapolatefirst","text":"fontlab.flContour.extrapolateFirst = extrapolateFirst (...) extrapolateFirst(float)","title":"extrapolateFirst"},{"location":"fontlab.flContour.html#extrapolatelast","text":"fontlab.flContour.extrapolateLast = extrapolateLast (...) extrapolateLast(float)","title":"extrapolateLast"},{"location":"fontlab.flContour.html#fastappend","text":"fontlab.flContour.fastAppend = fastAppend (...) fastAppend( list(flNode) )","title":"fastAppend"},{"location":"fontlab.flContour.html#fastclone","text":"fontlab.flContour.fastClone = fastClone (...) flContour fastClone(float ex_t0, float ex_t1)","title":"fastClone"},{"location":"fontlab.flContour.html#fastclonebyt","text":"fontlab.flContour.fastCloneByT = fastCloneByT (...) flContour fastCloneByT(float t0, float t1)","title":"fastCloneByT"},{"location":"fontlab.flContour.html#figuretype","text":"fontlab.flContour.FigureType = {'figureEllipse': 1, 'figureRectangle': 2}","title":"FigureType"},{"location":"fontlab.flContour.html#find","text":"fontlab.flContour.find = find (...) flNode find(QPointF, float, flNode::NodeType)","title":"find"},{"location":"fontlab.flContour.html#findnearest","text":"fontlab.flContour.findNearest = findNearest (...) (float out_nearest_t, float dist)/Nothing findNearest(QPointF shape_p[, int orientation=0])","title":"findNearest"},{"location":"fontlab.flContour.html#findnearestnode","text":"fontlab.flContour.findNearestNode = findNearestNode (...) (flNode, float new_maxd)/Nothing findNearestNode(QPointF p, flNode::NodeType node_type, float maxd)","title":"findNearestNode"},{"location":"fontlab.flContour.html#findneareston","text":"fontlab.flContour.findNearestOn = findNearestOn (...) float out_nearest_t/Nothing findNearestOn(QPointF p, float base_t)","title":"findNearestOn"},{"location":"fontlab.flContour.html#findnode","text":"fontlab.flContour.findNode = findNode (...) flNode/Nothing findNode(uint id | string name)","title":"findNode"},{"location":"fontlab.flContour.html#first","text":"fontlab.flContour.first first node","title":"first"},{"location":"fontlab.flContour.html#flag","text":"fontlab.flContour.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flContour.html#flobjectflags","text":"fontlab.flContour.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flContour.html#font","text":"fontlab.flContour.font The contour\u2019s parent font","title":"font"},{"location":"fontlab.flContour.html#getboundedt","text":"fontlab.flContour.getBoundedT = getBoundedT (...) float getBoundedT(float param_t, float radius)","title":"getBoundedT"},{"location":"fontlab.flContour.html#getchangesrect","text":"fontlab.flContour.getChangesRect = getChangesRect (...) QRectF getChangesRect()","title":"getChangesRect"},{"location":"fontlab.flContour.html#getfirstpoint","text":"fontlab.flContour.getFirstPoint = getFirstPoint (...) QPointF/Nothing getFirstPoint([int =0])","title":"getFirstPoint"},{"location":"fontlab.flContour.html#getintervals","text":"fontlab.flContour.getIntervals = getIntervals (...) list(Interval) getIntervals(uint key)","title":"getIntervals"},{"location":"fontlab.flContour.html#getlastpoint","text":"fontlab.flContour.getLastPoint = getLastPoint (...) QPointF/Nothing getLastPoint([int =0])","title":"getLastPoint"},{"location":"fontlab.flContour.html#getlength","text":"fontlab.flContour.getLength = getLength (...) float getLength([float t0, float t1,] int =10)","title":"getLength"},{"location":"fontlab.flContour.html#getlengthsquarebrect","text":"fontlab.flContour.getLengthSquareBRect = getLengthSquareBRect (...) (float square, float length, QRectF brect) getLengthSquareBRect(float t0, float t1[, int step=10])","title":"getLengthSquareBRect"},{"location":"fontlab.flContour.html#getnext","text":"fontlab.flContour.getNext = getNext (...) flNode/Nothing getNext(index[, flNode::NodeType=flNode::On])","title":"getNext"},{"location":"fontlab.flContour.html#getnextt","text":"fontlab.flContour.getNextT = getNextT (...) (bool, float) getNextT(float base_t, float offset)","title":"getNextT"},{"location":"fontlab.flContour.html#getnodeat","text":"fontlab.flContour.getNodeAt = getNodeAt (...) flNode/Nothing getNodeAt(int idx[, flNode::NodeType = flNode::AnyNodeMask])","title":"getNodeAt"},{"location":"fontlab.flContour.html#getpoint","text":"fontlab.flContour.getPoint = getPoint (...) QPointF/Nothing getPoint(int idx[, flNode::NodeType = flNode::On])","title":"getPoint"},{"location":"fontlab.flContour.html#getprev","text":"fontlab.flContour.getPrev = getPrev (...) flNode/Nothing getPrev(index[, flNode::NodeType=flNode::On])","title":"getPrev"},{"location":"fontlab.flContour.html#getprevt","text":"fontlab.flContour.getPrevT = getPrevT (...) (bool, float) getPrevT(float base_t, float offset)","title":"getPrevT"},{"location":"fontlab.flContour.html#getproperties","text":"fontlab.flContour.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flContour.html#getproperty","text":"fontlab.flContour.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flContour.html#getpropertyfloat","text":"fontlab.flContour.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flContour.html#getpropertyint","text":"fontlab.flContour.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flContour.html#getsegment","text":"fontlab.flContour.getSegment = getSegment (...) list(flNode) getSegment(int i0, int i1, bool left)","title":"getSegment"},{"location":"fontlab.flContour.html#getselectedboundingbox","text":"fontlab.flContour.getSelectedBoundingBox = getSelectedBoundingBox (...) QRectF getSelectedBoundingBox()","title":"getSelectedBoundingBox"},{"location":"fontlab.flContour.html#getselectednodes","text":"fontlab.flContour.getSelectedNodes = getSelectedNodes (...) list(flNode)/Nothing getSelectedNodes()","title":"getSelectedNodes"},{"location":"fontlab.flContour.html#getsideof","text":"fontlab.flContour.getSideOf = getSideOf (...) float getSideOf(QPointF p)","title":"getSideOf"},{"location":"fontlab.flContour.html#getsquare","text":"fontlab.flContour.getSquare = getSquare (...) double getSquare()","title":"getSquare"},{"location":"fontlab.flContour.html#gett","text":"fontlab.flContour.getT = getT (...) float getT(flNode)","title":"getT"},{"location":"fontlab.flContour.html#getupdaterect","text":"fontlab.flContour.getUpdateRect = getUpdateRect (...) QRectF getUpdateRect(float ex_t)","title":"getUpdateRect"},{"location":"fontlab.flContour.html#glyph","text":"fontlab.flContour.glyph The contour\u2019s parent glyph","title":"glyph"},{"location":"fontlab.flContour.html#haschanges","text":"fontlab.flContour.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flContour.html#hascorners","text":"fontlab.flContour.hasCorners hasCorners","title":"hasCorners"},{"location":"fontlab.flContour.html#hashistorystate","text":"fontlab.flContour.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flContour.html#hashistorystates","text":"fontlab.flContour.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flContour.html#hasinterspoints","text":"fontlab.flContour.hasIntersPoints = hasIntersPoints (...) bool hasIntersPoints(flContour)","title":"hasIntersPoints"},{"location":"fontlab.flContour.html#hasselected","text":"fontlab.flContour.hasSelected = hasSelected (...) bool hasSelected(SelectionMode)","title":"hasSelected"},{"location":"fontlab.flContour.html#hassmartangle","text":"fontlab.flContour.hasSmartAngle hasSmartAngle","title":"hasSmartAngle"},{"location":"fontlab.flContour.html#haveobject","text":"fontlab.flContour.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flContour.html#historystates","text":"fontlab.flContour.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flContour.html#id","text":"fontlab.flContour.id object id","title":"id"},{"location":"fontlab.flContour.html#improve","text":"fontlab.flContour.improve = improve (...) bool improve()","title":"improve"},{"location":"fontlab.flContour.html#indentparamt","text":"fontlab.flContour.indentParamT = indentParamT (...) float indentParamT(float base_t, float indent[, float step =0.1])","title":"indentParamT"},{"location":"fontlab.flContour.html#independedall","text":"fontlab.flContour.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flContour.html#initialhistorystate","text":"fontlab.flContour.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flContour.html#inkbox","text":"fontlab.flContour.inkBox = inkBox (...) QRectF inkBox([QTransform tx])","title":"inkBox"},{"location":"fontlab.flContour.html#insert","text":"fontlab.flContour.insert = insert (...) insert(index, flNode | list(flNode) )","title":"insert"},{"location":"fontlab.flContour.html#insertnodeto","text":"fontlab.flContour.insertNodeTo = insertNodeTo (...) flNode insertNodeTo(float t)","title":"insertNodeTo"},{"location":"fontlab.flContour.html#insertsafenodeto","text":"fontlab.flContour.insertSafeNodeTo = insertSafeNodeTo (...) flNode insertSafeNodeTo(float t, float dst)","title":"insertSafeNodeTo"},{"location":"fontlab.flContour.html#instancetype","text":"fontlab.flContour.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flContour.html#intervals","text":"fontlab.flContour.intervals = intervals (...) list(Interval) intervals()","title":"intervals"},{"location":"fontlab.flContour.html#isallnodesselected","text":"fontlab.flContour.isAllNodesSelected = isAllNodesSelected (...) bool isAllNodesSelected()","title":"isAllNodesSelected"},{"location":"fontlab.flContour.html#ischanged","text":"fontlab.flContour.isChanged bool","title":"isChanged"},{"location":"fontlab.flContour.html#iscompatible","text":"fontlab.flContour.isCompatible = isCompatible (...) bool isCompatible(flContour, bool strong)","title":"isCompatible"},{"location":"fontlab.flContour.html#iscomplete","text":"fontlab.flContour.isComplete isComplete","title":"isComplete"},{"location":"fontlab.flContour.html#isequal","text":"fontlab.flContour.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flContour.html#isfirst","text":"fontlab.flContour.isFirst = isFirst (...) bool isFirst(flNode)","title":"isFirst"},{"location":"fontlab.flContour.html#islast","text":"fontlab.flContour.isLast = isLast (...) bool isLast(flNode)","title":"isLast"},{"location":"fontlab.flContour.html#isnull","text":"fontlab.flContour.isNull bool","title":"isNull"},{"location":"fontlab.flContour.html#ispresent","text":"fontlab.flContour.isPresent bool","title":"isPresent"},{"location":"fontlab.flContour.html#isreleased","text":"fontlab.flContour.isReleased bool","title":"isReleased"},{"location":"fontlab.flContour.html#isselected","text":"fontlab.flContour.isSelected = isSelected (...) bool isSelected(float)","title":"isSelected"},{"location":"fontlab.flContour.html#istt","text":"fontlab.flContour.isTT is truetype","title":"isTT"},{"location":"fontlab.flContour.html#isvalid","text":"fontlab.flContour.isValid bool","title":"isValid"},{"location":"fontlab.flContour.html#last","text":"fontlab.flContour.last last node","title":"last"},{"location":"fontlab.flContour.html#layer","text":"fontlab.flContour.layer The contour\u2019s parent layer","title":"layer"},{"location":"fontlab.flContour.html#mapparamt","text":"fontlab.flContour.mapParamT = mapParamT (...) float mapParamT(float, float, float)","title":"mapParamT"},{"location":"fontlab.flContour.html#markers","text":"fontlab.flContour.markers = markers (...) list(flContourMarker) markers()","title":"markers"},{"location":"fontlab.flContour.html#move","text":"fontlab.flContour.move = move (...) move(QPointF)","title":"move"},{"location":"fontlab.flContour.html#name","text":"fontlab.flContour.name object name","title":"name"},{"location":"fontlab.flContour.html#nodes","text":"fontlab.flContour.nodes = nodes (...) list(flNode) nodes()","title":"nodes"},{"location":"fontlab.flContour.html#nodescount","text":"fontlab.flContour.nodesCount nodes count","title":"nodesCount"},{"location":"fontlab.flContour.html#normalat","text":"fontlab.flContour.normalAt = normalAt (...) float normalAt(float t[, QTransform])","title":"normalAt"},{"location":"fontlab.flContour.html#normalizeext","text":"fontlab.flContour.normalizeExT = normalizeExT (...) float normalizeExT(float)","title":"normalizeExT"},{"location":"fontlab.flContour.html#normalpoint","text":"fontlab.flContour.normalPoint = normalPoint (...) QPointF normalPoint(float t, float length)","title":"normalPoint"},{"location":"fontlab.flContour.html#paramsclosed","text":"fontlab.flContour.paramsClosed paramsClosed attribute","title":"paramsClosed"},{"location":"fontlab.flContour.html#paramt0","text":"fontlab.flContour.paramT0 paramT0 attr","title":"paramT0"},{"location":"fontlab.flContour.html#paramt1","text":"fontlab.flContour.paramT1 paramT1 attr","title":"paramT1"},{"location":"fontlab.flContour.html#path","text":"fontlab.flContour.path = path (...) QPainterPath path()","title":"path"},{"location":"fontlab.flContour.html#pointf","text":"fontlab.flContour.pointf = pointf (...) QPointF pointf(int index)","title":"pointf"},{"location":"fontlab.flContour.html#pointinside","text":"fontlab.flContour.pointInside = pointInside (...) pointInside(QPointF pt) - Bool indicating if the point pt in the black area of the contour","title":"pointInside"},{"location":"fontlab.flContour.html#prevlast","text":"fontlab.flContour.prevLast last but one node","title":"prevLast"},{"location":"fontlab.flContour.html#refcnt","text":"fontlab.flContour.refCnt object references count","title":"refCnt"},{"location":"fontlab.flContour.html#release","text":"fontlab.flContour.release = release (...) release()","title":"release"},{"location":"fontlab.flContour.html#remove","text":"fontlab.flContour.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flContour.html#removeat","text":"fontlab.flContour.removeAt = removeAt (...) removeAt(int index)","title":"removeAt"},{"location":"fontlab.flContour.html#removechild","text":"fontlab.flContour.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flContour.html#removelast","text":"fontlab.flContour.removeLast = removeLast (...) removeLast()","title":"removeLast"},{"location":"fontlab.flContour.html#removemarker","text":"fontlab.flContour.removeMarker = removeMarker (...) removeMarker( flContourMarker )","title":"removeMarker"},{"location":"fontlab.flContour.html#removenodesbetween","text":"fontlab.flContour.removeNodesBetween = removeNodesBetween (...) removeNodesBetween(flNode prev, flNode next)","title":"removeNodesBetween"},{"location":"fontlab.flContour.html#removeone","text":"fontlab.flContour.removeOne = removeOne (...) removeOne(flNode)","title":"removeOne"},{"location":"fontlab.flContour.html#removeproperty","text":"fontlab.flContour.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flContour.html#replace","text":"fontlab.flContour.replace = replace (...) replace(flNode old_node, flNode new_node)","title":"replace"},{"location":"fontlab.flContour.html#restorehistorystate","text":"fontlab.flContour.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flContour.html#reverse","text":"fontlab.flContour.reverse = reverse (...) reverse() - Reverse the direction of the contour","title":"reverse"},{"location":"fontlab.flContour.html#reversed","text":"fontlab.flContour.reversed reversed","title":"reversed"},{"location":"fontlab.flContour.html#secondderivative","text":"fontlab.flContour.secondDerivative = secondDerivative (...) QPointF secondDerivative(float)","title":"secondDerivative"},{"location":"fontlab.flContour.html#segment","text":"fontlab.flContour.segment = segment (...) CurveEx/Nothing segment(float t)","title":"segment"},{"location":"fontlab.flContour.html#segments","text":"fontlab.flContour.segments = segments (...) list(CurveEx) segments()","title":"segments"},{"location":"fontlab.flContour.html#selectedpath","text":"fontlab.flContour.selectedPath = selectedPath (...) QPainterPath selectedPath()","title":"selectedPath"},{"location":"fontlab.flContour.html#selection","text":"fontlab.flContour.selection selection list (list )","title":"selection"},{"location":"fontlab.flContour.html#selectionchanged","text":"fontlab.flContour.selectionChanged = selectionChanged (...) selectionChanged()","title":"selectionChanged"},{"location":"fontlab.flContour.html#setflag","text":"fontlab.flContour.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flContour.html#setnext","text":"fontlab.flContour.setNext = setNext (...) flNode setNext(int, QPointF)","title":"setNext"},{"location":"fontlab.flContour.html#setpoint","text":"fontlab.flContour.setPoint = setPoint (...) flNode setPoint(int index, QPointF p)","title":"setPoint"},{"location":"fontlab.flContour.html#setprev","text":"fontlab.flContour.setPrev = setPrev (...) flNode setPrev(int, QPointF)","title":"setPrev"},{"location":"fontlab.flContour.html#setproperty","text":"fontlab.flContour.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flContour.html#setpropertyfloat","text":"fontlab.flContour.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flContour.html#setpropertyint","text":"fontlab.flContour.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flContour.html#setselectednodes","text":"fontlab.flContour.setSelectedNodes = setSelectedNodes (...) setSelectedNodes(bool)","title":"setSelectedNodes"},{"location":"fontlab.flContour.html#setstartpoint","text":"fontlab.flContour.setStartPoint = setStartPoint (...) bool setStartPoint(int i)","title":"setStartPoint"},{"location":"fontlab.flContour.html#simplify","text":"fontlab.flContour.simplify = simplify (...) simplify(float precision, bool lossy, bool extremes)","title":"simplify"},{"location":"fontlab.flContour.html#tag","text":"fontlab.flContour.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flContour.html#takenodes","text":"fontlab.flContour.takeNodes = takeNodes (...) list(flNode) takeNodes()","title":"takeNodes"},{"location":"fontlab.flContour.html#tangent","text":"fontlab.flContour.tangent = tangent (...) float tangent(float t)","title":"tangent"},{"location":"fontlab.flContour.html#tobeziers","text":"fontlab.flContour.toBeziers = toBeziers (...) toBeziers(float tolerance)","title":"toBeziers"},{"location":"fontlab.flContour.html#tosplines","text":"fontlab.flContour.toSplines = toSplines (...) toSplines(float tolerance, bool short_splines)","title":"toSplines"},{"location":"fontlab.flContour.html#transform","text":"fontlab.flContour.transform transform matrix","title":"transform"},{"location":"fontlab.flContour.html#type","text":"fontlab.flContour.type object type","title":"type"},{"location":"fontlab.flContour.html#unselectall","text":"fontlab.flContour.unselectAll = unselectAll (...) unselectAll()","title":"unselectAll"},{"location":"fontlab.flContour.html#unselectedpath","text":"fontlab.flContour.unselectedPath = unselectedPath (...) QPainterPath unselectedPath()","title":"unselectedPath"},{"location":"fontlab.flContour.html#update","text":"fontlab.flContour.update = update (...) update()","title":"update"},{"location":"fontlab.flContour.html#updateg2","text":"fontlab.flContour.updateG2 = updateG2 (...) updateG2(bool all_nodes)","title":"updateG2"},{"location":"fontlab.flContour.html#updatehobby","text":"fontlab.flContour.updateHobby = updateHobby (...) updateHobby(bool all_nodes)","title":"updateHobby"},{"location":"fontlab.flContour.html#updateindices","text":"fontlab.flContour.updateIndices = updateIndices (...) updateIndices()","title":"updateIndices"},{"location":"fontlab.flContour.html#validatedt","text":"fontlab.flContour.validatedT = validatedT (...) float validatedT(float t)","title":"validatedT"},{"location":"fontlab.flContour.html#validateext","text":"fontlab.flContour.validateExT = validateExT (...) (new_ex_t, bool) validateExT(float ex_t)","title":"validateExT"},{"location":"fontlab.flContour.html#validateindex","text":"fontlab.flContour.validateIndex = validateIndex (...) (new_inx, bool) validateIndex(int inx)","title":"validateIndex"},{"location":"fontlab.flContour.html#validatesmartr","text":"fontlab.flContour.validateSmartR = validateSmartR (...) (new_r, max_available_r, bool) validateSmartR(int node_ix, float r)","title":"validateSmartR"},{"location":"fontlab.flContour.html#validatet","text":"fontlab.flContour.validateT = validateT (...) (new_t, bool) validateT(float t)","title":"validateT"},{"location":"fontlab.flContour.html#verifysmooth","text":"fontlab.flContour.verifySmooth = verifySmooth (...) verifySmooth()","title":"verifySmooth"},{"location":"fontlab.flContourInfo.html","text":"flContourInfo fontlab.flContourInfo = class flContourInfo ( object ) flContourInfo representation Constructors: flContourInfo() flContourInfo(flObject) flContourInfo(flContour, flSearchInfo) flContourInfo(flContour, flShapeInfo) flContourInfo(flContour, flContourInfo) flContourInfo(flContour, QTransform) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value brectOnCanvas (...) QRectF brectOnCanvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object cloneSelected (...) QList cloneSelected () combine (...) combine (QTransform transform) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getHitNode (...) flNodeInfo/Nothing getHitNode (QPointF canvas_pos, double dist[, int node_mask=flNode::AnyNodeMask]) getNodesInfo (...) QList getNodesInfo () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getUpdateRect (...) QRectF getUpdateRect (double ex_t) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) paramExT (...) double paramExT () paramT (...) double paramT () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setExT (...) setExT (double ex_t) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flContourInfo createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors contour flContour> dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count shapeInfo flShapeInfo transform transform matrix type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} brectOnCanvas fontlab.flContourInfo.brectOnCanvas = brectOnCanvas (...) QRectF brectOnCanvas() changed fontlab.flContourInfo.changed = changed (...) changed() checkInitHistoryState fontlab.flContourInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flContourInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flContourInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flContourInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flContourInfo.clone = clone (...) Clone the object cloneObject fontlab.flContourInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); cloneSelected fontlab.flContourInfo.cloneSelected = cloneSelected (...) QList cloneSelected() combine fontlab.flContourInfo.combine = combine (...) combine(QTransform transform) contour fontlab.flContourInfo.contour flContour> createHistoryState fontlab.flContourInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flContourInfo.createInstance = createInstance (...) flContourInfo createInstance() createObject fontlab.flContourInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flContourInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() dist fontlab.flContourInfo.dist double dist flag fontlab.flContourInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flContourInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getHitNode fontlab.flContourInfo.getHitNode = getHitNode (...) flNodeInfo/Nothing getHitNode(QPointF canvas_pos, double dist[, int node_mask=flNode::AnyNodeMask]) getNodesInfo fontlab.flContourInfo.getNodesInfo = getNodesInfo (...) QList getNodesInfo() getProperties fontlab.flContourInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flContourInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flContourInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flContourInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getUpdateRect fontlab.flContourInfo.getUpdateRect = getUpdateRect (...) QRectF getUpdateRect(double ex_t) glyphInfo fontlab.flContourInfo.glyphInfo flObject - glyph info hasChanges fontlab.flContourInfo.hasChanges bool hasHistoryState fontlab.flContourInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flContourInfo.hasHistoryStates bool haveObject fontlab.flContourInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flContourInfo.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flContourInfo.id object id independedAll fontlab.flContourInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flContourInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flContourInfo.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flContourInfo.isChanged bool isEqual fontlab.flContourInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flContourInfo.isNull bool isPresent fontlab.flContourInfo.isPresent bool isReleased fontlab.flContourInfo.isReleased bool isValid fontlab.flContourInfo.isValid bool name fontlab.flContourInfo.name object name paramExT fontlab.flContourInfo.paramExT = paramExT (...) double paramExT() paramT fontlab.flContourInfo.paramT = paramT (...) double paramT() refCnt fontlab.flContourInfo.refCnt object references count release fontlab.flContourInfo.release = release (...) release() remove fontlab.flContourInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flContourInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flContourInfo.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flContourInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setExT fontlab.flContourInfo.setExT = setExT (...) setExT(double ex_t) setFlag fontlab.flContourInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flContourInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flContourInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flContourInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' shapeInfo fontlab.flContourInfo.shapeInfo flShapeInfo tag fontlab.flContourInfo.tag = tag (...) tag([string]) transform fontlab.flContourInfo.transform transform matrix type fontlab.flContourInfo.type object type update fontlab.flContourInfo.update = update (...) update()","title":"flContourInfo"},{"location":"fontlab.flContourInfo.html#flcontourinfo","text":"","title":"flContourInfo"},{"location":"fontlab.flContourInfo.html#brectoncanvas","text":"fontlab.flContourInfo.brectOnCanvas = brectOnCanvas (...) QRectF brectOnCanvas()","title":"brectOnCanvas"},{"location":"fontlab.flContourInfo.html#changed","text":"fontlab.flContourInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flContourInfo.html#checkinithistorystate","text":"fontlab.flContourInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flContourInfo.html#clearabovehistory","text":"fontlab.flContourInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flContourInfo.html#clearflag","text":"fontlab.flContourInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flContourInfo.html#clearflags","text":"fontlab.flContourInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flContourInfo.html#clone","text":"fontlab.flContourInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flContourInfo.html#cloneobject","text":"fontlab.flContourInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flContourInfo.html#cloneselected","text":"fontlab.flContourInfo.cloneSelected = cloneSelected (...) QList cloneSelected()","title":"cloneSelected"},{"location":"fontlab.flContourInfo.html#combine","text":"fontlab.flContourInfo.combine = combine (...) combine(QTransform transform)","title":"combine"},{"location":"fontlab.flContourInfo.html#contour","text":"fontlab.flContourInfo.contour flContour>","title":"contour"},{"location":"fontlab.flContourInfo.html#createhistorystate","text":"fontlab.flContourInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flContourInfo.html#createinstance","text":"fontlab.flContourInfo.createInstance = createInstance (...) flContourInfo createInstance()","title":"createInstance"},{"location":"fontlab.flContourInfo.html#createobject","text":"fontlab.flContourInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flContourInfo.html#currenthistorystate","text":"fontlab.flContourInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flContourInfo.html#dist","text":"fontlab.flContourInfo.dist double dist","title":"dist"},{"location":"fontlab.flContourInfo.html#flag","text":"fontlab.flContourInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flContourInfo.html#flobjectflags","text":"fontlab.flContourInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flContourInfo.html#gethitnode","text":"fontlab.flContourInfo.getHitNode = getHitNode (...) flNodeInfo/Nothing getHitNode(QPointF canvas_pos, double dist[, int node_mask=flNode::AnyNodeMask])","title":"getHitNode"},{"location":"fontlab.flContourInfo.html#getnodesinfo","text":"fontlab.flContourInfo.getNodesInfo = getNodesInfo (...) QList getNodesInfo()","title":"getNodesInfo"},{"location":"fontlab.flContourInfo.html#getproperties","text":"fontlab.flContourInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flContourInfo.html#getproperty","text":"fontlab.flContourInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flContourInfo.html#getpropertyfloat","text":"fontlab.flContourInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flContourInfo.html#getpropertyint","text":"fontlab.flContourInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flContourInfo.html#getupdaterect","text":"fontlab.flContourInfo.getUpdateRect = getUpdateRect (...) QRectF getUpdateRect(double ex_t)","title":"getUpdateRect"},{"location":"fontlab.flContourInfo.html#glyphinfo","text":"fontlab.flContourInfo.glyphInfo flObject - glyph info","title":"glyphInfo"},{"location":"fontlab.flContourInfo.html#haschanges","text":"fontlab.flContourInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flContourInfo.html#hashistorystate","text":"fontlab.flContourInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flContourInfo.html#hashistorystates","text":"fontlab.flContourInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flContourInfo.html#haveobject","text":"fontlab.flContourInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flContourInfo.html#historystates","text":"fontlab.flContourInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flContourInfo.html#id","text":"fontlab.flContourInfo.id object id","title":"id"},{"location":"fontlab.flContourInfo.html#independedall","text":"fontlab.flContourInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flContourInfo.html#initialhistorystate","text":"fontlab.flContourInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flContourInfo.html#instancetype","text":"fontlab.flContourInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flContourInfo.html#ischanged","text":"fontlab.flContourInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flContourInfo.html#isequal","text":"fontlab.flContourInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flContourInfo.html#isnull","text":"fontlab.flContourInfo.isNull bool","title":"isNull"},{"location":"fontlab.flContourInfo.html#ispresent","text":"fontlab.flContourInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flContourInfo.html#isreleased","text":"fontlab.flContourInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flContourInfo.html#isvalid","text":"fontlab.flContourInfo.isValid bool","title":"isValid"},{"location":"fontlab.flContourInfo.html#name","text":"fontlab.flContourInfo.name object name","title":"name"},{"location":"fontlab.flContourInfo.html#paramext","text":"fontlab.flContourInfo.paramExT = paramExT (...) double paramExT()","title":"paramExT"},{"location":"fontlab.flContourInfo.html#paramt","text":"fontlab.flContourInfo.paramT = paramT (...) double paramT()","title":"paramT"},{"location":"fontlab.flContourInfo.html#refcnt","text":"fontlab.flContourInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flContourInfo.html#release","text":"fontlab.flContourInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flContourInfo.html#remove","text":"fontlab.flContourInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flContourInfo.html#removechild","text":"fontlab.flContourInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flContourInfo.html#removeproperty","text":"fontlab.flContourInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flContourInfo.html#restorehistorystate","text":"fontlab.flContourInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flContourInfo.html#setext","text":"fontlab.flContourInfo.setExT = setExT (...) setExT(double ex_t)","title":"setExT"},{"location":"fontlab.flContourInfo.html#setflag","text":"fontlab.flContourInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flContourInfo.html#setproperty","text":"fontlab.flContourInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flContourInfo.html#setpropertyfloat","text":"fontlab.flContourInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flContourInfo.html#setpropertyint","text":"fontlab.flContourInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flContourInfo.html#shapeinfo","text":"fontlab.flContourInfo.shapeInfo flShapeInfo","title":"shapeInfo"},{"location":"fontlab.flContourInfo.html#tag","text":"fontlab.flContourInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flContourInfo.html#transform","text":"fontlab.flContourInfo.transform transform matrix","title":"transform"},{"location":"fontlab.flContourInfo.html#type","text":"fontlab.flContourInfo.type object type","title":"type"},{"location":"fontlab.flContourInfo.html#update","text":"fontlab.flContourInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flContourMarker.html","text":"flContourMarker fontlab.flContourMarker = class flContourMarker ( object ) flContourMarker representation Constructors: flContourMarker() flContourMarker(flObject) flContourMarker(flContourMarker) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) point (...) QPointF point () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' shiftT (...) shiftT (float shift_d) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors contour flObject hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name outer bool paramT float refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flContourMarker.changed = changed (...) changed() checkInitHistoryState fontlab.flContourMarker.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flContourMarker.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flContourMarker.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flContourMarker.clearFlags = clearFlags (...) clearFlags() clone fontlab.flContourMarker.clone = clone (...) Clone the object cloneObject fontlab.flContourMarker.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); contour fontlab.flContourMarker.contour flObject createHistoryState fontlab.flContourMarker.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flContourMarker.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flContourMarker.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flContourMarker.flag = flag (...) flag(uint f) flObjectFlags fontlab.flContourMarker.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flContourMarker.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flContourMarker.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flContourMarker.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flContourMarker.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flContourMarker.hasChanges bool hasHistoryState fontlab.flContourMarker.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flContourMarker.hasHistoryStates bool haveObject fontlab.flContourMarker.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flContourMarker.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flContourMarker.id object id independedAll fontlab.flContourMarker.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flContourMarker.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flContourMarker.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flContourMarker.isChanged bool isEqual fontlab.flContourMarker.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flContourMarker.isNull bool isPresent fontlab.flContourMarker.isPresent bool isReleased fontlab.flContourMarker.isReleased bool isValid fontlab.flContourMarker.isValid bool name fontlab.flContourMarker.name object name outer fontlab.flContourMarker.outer bool paramT fontlab.flContourMarker.paramT float point fontlab.flContourMarker.point = point (...) QPointF point() refCnt fontlab.flContourMarker.refCnt object references count release fontlab.flContourMarker.release = release (...) release() remove fontlab.flContourMarker.remove = remove (...) remove([flObject]) removeChild fontlab.flContourMarker.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flContourMarker.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flContourMarker.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flContourMarker.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flContourMarker.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flContourMarker.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flContourMarker.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' shiftT fontlab.flContourMarker.shiftT = shiftT (...) shiftT(float shift_d) tag fontlab.flContourMarker.tag = tag (...) tag([string]) type fontlab.flContourMarker.type object type update fontlab.flContourMarker.update = update (...) update()","title":"flContourMarker"},{"location":"fontlab.flContourMarker.html#flcontourmarker","text":"","title":"flContourMarker"},{"location":"fontlab.flContourMarker.html#changed","text":"fontlab.flContourMarker.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flContourMarker.html#checkinithistorystate","text":"fontlab.flContourMarker.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flContourMarker.html#clearabovehistory","text":"fontlab.flContourMarker.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flContourMarker.html#clearflag","text":"fontlab.flContourMarker.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flContourMarker.html#clearflags","text":"fontlab.flContourMarker.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flContourMarker.html#clone","text":"fontlab.flContourMarker.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flContourMarker.html#cloneobject","text":"fontlab.flContourMarker.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flContourMarker.html#contour","text":"fontlab.flContourMarker.contour flObject","title":"contour"},{"location":"fontlab.flContourMarker.html#createhistorystate","text":"fontlab.flContourMarker.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flContourMarker.html#createobject","text":"fontlab.flContourMarker.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flContourMarker.html#currenthistorystate","text":"fontlab.flContourMarker.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flContourMarker.html#flag","text":"fontlab.flContourMarker.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flContourMarker.html#flobjectflags","text":"fontlab.flContourMarker.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flContourMarker.html#getproperties","text":"fontlab.flContourMarker.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flContourMarker.html#getproperty","text":"fontlab.flContourMarker.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flContourMarker.html#getpropertyfloat","text":"fontlab.flContourMarker.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flContourMarker.html#getpropertyint","text":"fontlab.flContourMarker.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flContourMarker.html#haschanges","text":"fontlab.flContourMarker.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flContourMarker.html#hashistorystate","text":"fontlab.flContourMarker.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flContourMarker.html#hashistorystates","text":"fontlab.flContourMarker.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flContourMarker.html#haveobject","text":"fontlab.flContourMarker.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flContourMarker.html#historystates","text":"fontlab.flContourMarker.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flContourMarker.html#id","text":"fontlab.flContourMarker.id object id","title":"id"},{"location":"fontlab.flContourMarker.html#independedall","text":"fontlab.flContourMarker.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flContourMarker.html#initialhistorystate","text":"fontlab.flContourMarker.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flContourMarker.html#instancetype","text":"fontlab.flContourMarker.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flContourMarker.html#ischanged","text":"fontlab.flContourMarker.isChanged bool","title":"isChanged"},{"location":"fontlab.flContourMarker.html#isequal","text":"fontlab.flContourMarker.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flContourMarker.html#isnull","text":"fontlab.flContourMarker.isNull bool","title":"isNull"},{"location":"fontlab.flContourMarker.html#ispresent","text":"fontlab.flContourMarker.isPresent bool","title":"isPresent"},{"location":"fontlab.flContourMarker.html#isreleased","text":"fontlab.flContourMarker.isReleased bool","title":"isReleased"},{"location":"fontlab.flContourMarker.html#isvalid","text":"fontlab.flContourMarker.isValid bool","title":"isValid"},{"location":"fontlab.flContourMarker.html#name","text":"fontlab.flContourMarker.name object name","title":"name"},{"location":"fontlab.flContourMarker.html#outer","text":"fontlab.flContourMarker.outer bool","title":"outer"},{"location":"fontlab.flContourMarker.html#paramt","text":"fontlab.flContourMarker.paramT float","title":"paramT"},{"location":"fontlab.flContourMarker.html#point","text":"fontlab.flContourMarker.point = point (...) QPointF point()","title":"point"},{"location":"fontlab.flContourMarker.html#refcnt","text":"fontlab.flContourMarker.refCnt object references count","title":"refCnt"},{"location":"fontlab.flContourMarker.html#release","text":"fontlab.flContourMarker.release = release (...) release()","title":"release"},{"location":"fontlab.flContourMarker.html#remove","text":"fontlab.flContourMarker.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flContourMarker.html#removechild","text":"fontlab.flContourMarker.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flContourMarker.html#removeproperty","text":"fontlab.flContourMarker.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flContourMarker.html#restorehistorystate","text":"fontlab.flContourMarker.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flContourMarker.html#setflag","text":"fontlab.flContourMarker.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flContourMarker.html#setproperty","text":"fontlab.flContourMarker.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flContourMarker.html#setpropertyfloat","text":"fontlab.flContourMarker.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flContourMarker.html#setpropertyint","text":"fontlab.flContourMarker.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flContourMarker.html#shiftt","text":"fontlab.flContourMarker.shiftT = shiftT (...) shiftT(float shift_d)","title":"shiftT"},{"location":"fontlab.flContourMarker.html#tag","text":"fontlab.flContourMarker.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flContourMarker.html#type","text":"fontlab.flContourMarker.type object type","title":"type"},{"location":"fontlab.flContourMarker.html#update","text":"fontlab.flContourMarker.update = update (...) update()","title":"update"},{"location":"fontlab.flEvent.html","text":"flEvent fontlab.flEvent = class flEvent ( object ) flEvent representation Constructors: flEvent(flEvent) flEvent(flEvent(EventType type[, int modifiers=-1]) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors modifiers int type EventType Attributes EventType = {'MouseEvent': 1, 'MovementEvent': 3, 'WheelEvent': 2} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T EventType fontlab.flEvent.EventType = {'MouseEvent': 1, 'MovementEvent': 3, 'WheelEvent': 2} modifiers fontlab.flEvent.modifiers int type fontlab.flEvent.type EventType","title":"flEvent"},{"location":"fontlab.flEvent.html#flevent","text":"","title":"flEvent"},{"location":"fontlab.flEvent.html#eventtype","text":"fontlab.flEvent.EventType = {'MouseEvent': 1, 'MovementEvent': 3, 'WheelEvent': 2}","title":"EventType"},{"location":"fontlab.flEvent.html#modifiers","text":"fontlab.flEvent.modifiers int","title":"modifiers"},{"location":"fontlab.flEvent.html#type","text":"fontlab.flEvent.type EventType","title":"type"},{"location":"fontlab.flExpression.html","text":"flExpression fontlab.flExpression = class flExpression ( object ) flExpression representation Constructors: flExpression() flExpression(flObject) flExpression(flExpression) flExpression(string) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearError (...) clearError () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() expression (...) QString expression (QMap aliases) flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasError (...) bool hasError () hasExpression (...) bool hasExpression () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) isNeedToComplete (...) bool isNeedToComplete () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') resetReady (...) resetReady () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () variables (...) QStringList variables ([QMap aliases]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors error int hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name ready bool refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flExpression.changed = changed (...) changed() checkInitHistoryState fontlab.flExpression.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flExpression.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearError fontlab.flExpression.clearError = clearError (...) clearError() clearFlag fontlab.flExpression.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flExpression.clearFlags = clearFlags (...) clearFlags() clone fontlab.flExpression.clone = clone (...) Clone the object cloneObject fontlab.flExpression.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flExpression.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flExpression.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flExpression.currentHistoryState = currentHistoryState (...) currentHistoryIx() error fontlab.flExpression.error int expression fontlab.flExpression.expression = expression (...) QString expression(QMap aliases) flag fontlab.flExpression.flag = flag (...) flag(uint f) flObjectFlags fontlab.flExpression.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flExpression.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flExpression.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flExpression.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flExpression.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flExpression.hasChanges bool hasError fontlab.flExpression.hasError = hasError (...) bool hasError() hasExpression fontlab.flExpression.hasExpression = hasExpression (...) bool hasExpression() hasHistoryState fontlab.flExpression.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flExpression.hasHistoryStates bool haveObject fontlab.flExpression.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flExpression.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flExpression.id object id independedAll fontlab.flExpression.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flExpression.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flExpression.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flExpression.isChanged bool isEqual fontlab.flExpression.isEqual = isEqual (...) isEqual(flObject) isNeedToComplete fontlab.flExpression.isNeedToComplete = isNeedToComplete (...) bool isNeedToComplete() isNull fontlab.flExpression.isNull bool isPresent fontlab.flExpression.isPresent bool isReleased fontlab.flExpression.isReleased bool isValid fontlab.flExpression.isValid bool name fontlab.flExpression.name object name ready fontlab.flExpression.ready bool refCnt fontlab.flExpression.refCnt object references count release fontlab.flExpression.release = release (...) release() remove fontlab.flExpression.remove = remove (...) remove([flObject]) removeChild fontlab.flExpression.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flExpression.removeProperty = removeProperty (...) removeProperty('key') resetReady fontlab.flExpression.resetReady = resetReady (...) resetReady() restoreHistoryState fontlab.flExpression.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flExpression.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flExpression.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flExpression.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flExpression.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flExpression.tag = tag (...) tag([string]) type fontlab.flExpression.type object type update fontlab.flExpression.update = update (...) update() variables fontlab.flExpression.variables = variables (...) QStringList variables([QMap aliases])","title":"flExpression"},{"location":"fontlab.flExpression.html#flexpression","text":"","title":"flExpression"},{"location":"fontlab.flExpression.html#changed","text":"fontlab.flExpression.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flExpression.html#checkinithistorystate","text":"fontlab.flExpression.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flExpression.html#clearabovehistory","text":"fontlab.flExpression.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flExpression.html#clearerror","text":"fontlab.flExpression.clearError = clearError (...) clearError()","title":"clearError"},{"location":"fontlab.flExpression.html#clearflag","text":"fontlab.flExpression.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flExpression.html#clearflags","text":"fontlab.flExpression.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flExpression.html#clone","text":"fontlab.flExpression.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flExpression.html#cloneobject","text":"fontlab.flExpression.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flExpression.html#createhistorystate","text":"fontlab.flExpression.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flExpression.html#createobject","text":"fontlab.flExpression.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flExpression.html#currenthistorystate","text":"fontlab.flExpression.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flExpression.html#error","text":"fontlab.flExpression.error int","title":"error"},{"location":"fontlab.flExpression.html#expression","text":"fontlab.flExpression.expression = expression (...) QString expression(QMap aliases)","title":"expression"},{"location":"fontlab.flExpression.html#flag","text":"fontlab.flExpression.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flExpression.html#flobjectflags","text":"fontlab.flExpression.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flExpression.html#getproperties","text":"fontlab.flExpression.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flExpression.html#getproperty","text":"fontlab.flExpression.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flExpression.html#getpropertyfloat","text":"fontlab.flExpression.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flExpression.html#getpropertyint","text":"fontlab.flExpression.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flExpression.html#haschanges","text":"fontlab.flExpression.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flExpression.html#haserror","text":"fontlab.flExpression.hasError = hasError (...) bool hasError()","title":"hasError"},{"location":"fontlab.flExpression.html#hasexpression","text":"fontlab.flExpression.hasExpression = hasExpression (...) bool hasExpression()","title":"hasExpression"},{"location":"fontlab.flExpression.html#hashistorystate","text":"fontlab.flExpression.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flExpression.html#hashistorystates","text":"fontlab.flExpression.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flExpression.html#haveobject","text":"fontlab.flExpression.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flExpression.html#historystates","text":"fontlab.flExpression.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flExpression.html#id","text":"fontlab.flExpression.id object id","title":"id"},{"location":"fontlab.flExpression.html#independedall","text":"fontlab.flExpression.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flExpression.html#initialhistorystate","text":"fontlab.flExpression.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flExpression.html#instancetype","text":"fontlab.flExpression.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flExpression.html#ischanged","text":"fontlab.flExpression.isChanged bool","title":"isChanged"},{"location":"fontlab.flExpression.html#isequal","text":"fontlab.flExpression.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flExpression.html#isneedtocomplete","text":"fontlab.flExpression.isNeedToComplete = isNeedToComplete (...) bool isNeedToComplete()","title":"isNeedToComplete"},{"location":"fontlab.flExpression.html#isnull","text":"fontlab.flExpression.isNull bool","title":"isNull"},{"location":"fontlab.flExpression.html#ispresent","text":"fontlab.flExpression.isPresent bool","title":"isPresent"},{"location":"fontlab.flExpression.html#isreleased","text":"fontlab.flExpression.isReleased bool","title":"isReleased"},{"location":"fontlab.flExpression.html#isvalid","text":"fontlab.flExpression.isValid bool","title":"isValid"},{"location":"fontlab.flExpression.html#name","text":"fontlab.flExpression.name object name","title":"name"},{"location":"fontlab.flExpression.html#ready","text":"fontlab.flExpression.ready bool","title":"ready"},{"location":"fontlab.flExpression.html#refcnt","text":"fontlab.flExpression.refCnt object references count","title":"refCnt"},{"location":"fontlab.flExpression.html#release","text":"fontlab.flExpression.release = release (...) release()","title":"release"},{"location":"fontlab.flExpression.html#remove","text":"fontlab.flExpression.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flExpression.html#removechild","text":"fontlab.flExpression.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flExpression.html#removeproperty","text":"fontlab.flExpression.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flExpression.html#resetready","text":"fontlab.flExpression.resetReady = resetReady (...) resetReady()","title":"resetReady"},{"location":"fontlab.flExpression.html#restorehistorystate","text":"fontlab.flExpression.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flExpression.html#setflag","text":"fontlab.flExpression.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flExpression.html#setproperty","text":"fontlab.flExpression.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flExpression.html#setpropertyfloat","text":"fontlab.flExpression.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flExpression.html#setpropertyint","text":"fontlab.flExpression.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flExpression.html#tag","text":"fontlab.flExpression.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flExpression.html#type","text":"fontlab.flExpression.type object type","title":"type"},{"location":"fontlab.flExpression.html#update","text":"fontlab.flExpression.update = update (...) update()","title":"update"},{"location":"fontlab.flExpression.html#variables","text":"fontlab.flExpression.variables = variables (...) QStringList variables([QMap aliases])","title":"variables"},{"location":"fontlab.flGlyph.html","text":"flGlyph fontlab.flGlyph = class flGlyph ( object ) flGlyph representation Constructors: flGlyph() flGlyph(flGlyph) flGlyph(flObject) flGlyph(fgGlyph, fgFont) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value addLayer (...) void addLayer (flLayer[, bool back = false]) addLayers (...) void addLayers (list(flLayer)) applyTransform (...) applyTransform ([QTransform transform]) assignFontGateData (...) void assignFontGateData (fgFontGateData, bool doGuide = true, bool doHints = true, bool doAnchors = true) bindDependencies (...) bindDependencies () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateAll (...) deactivateAll () ensureMaskLayer (...) flLayer ensureMaskLayer () fillFgData (...) fgFontGateData fillFgData (bool doGuides, bool doHints) findLayer (...) flLayer findLayer (QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findLayerCreate (...) flLayer findLayerCreate (QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findVerticalGuideline (...) double/Nothing findVerticalGuideline (QString) flag (...) flag (uint f) getAuditInfo (...) list(flAuditInfo) getAuditInfo () getFastFontGateData (...) fgFontGateData getFastFontGateData () getLSB (...) double getLSB (QTransform tr) getLayerByName (...) flLayer getLayerByName (QString[, bool create =false]) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getRSB (...) double getRSB (QTransform tr) getSB (...) (double l, double r) getSB (QTransform tr) glyphName (...) QString glyphName () hasFontAudit (...) bool hasFontAudit () hasHistoryState (...) hasHistoryState (uint history_ix) haveSelected (...) bool haveSelected (SelectionMode) historyStates (...) historyStates (bool accepted_state) horzReflection (...) bool horzReflection () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx = QTransform()]) isEqual (...) isEqual (flObject) isUnbindedDependecies (...) bool isUnbindedDependecies () issele (...) void issele (bool) measurementLine (...) double/Nothing measurementLine () prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeEmptyShapes (...) removeEmptyShapes () removeLayer (...) void removeLayer (flLayer) removeProperty (...) removeProperty ('key') resetInkBox (...) resetInkBox () resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) setAllShapesSelected (...) setAllShapesSelected (bool) setFlag (...) setFlag (uint f [, bool value]) setLSB (...) bool setLSB (double v, bool move_guidelines, QTransform tr) setLayers (...) void setLayers (list(flLayer)) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setRSB (...) bool setRSB (double v, QTransform tr) setReflected (...) setReflected (bool, bool) setSB (...) bool setSB (double l, double r, bool move_guidelines, bool all_layers, QTransform tr) tag (...) tag ([string]) unselectAllNodes (...) unselectAllNodes () update (...) update () updateActiveLayer (...) flLayer updateActiveLayer (bool) updateAudit (...) void updateAudit (list(int)) updateSidebearings (...) bool updateSidebearings (bool nofify) vertReflection (...) bool vertReflection () virtualTags (...) QSet /Nothing virtualTags () Static methods clearUpdateFgGlyphs (...) clearUpdateFgGlyphs () cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flGlyph createInstance () createObject (...) flObject/Nothing createObject (int); ensureFgData (...) fgFontGateData ensureFgData (fgGlyph) hasInstance (...) bool hasInstance (fgGlyph) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); linkInstances (...) bool linkInstances (flGlyph, fgGlyph) updateFgGlyph (...) updateFgGlyph (uint id) updatedFgGlyphs (...) list(uint32_t) updatedFgGlyphs () Descriptors activeLayer flLayer advanceWidth double ascender double bodyLayer flLayer bodyRect QRectF boundingBox QRectF descender double fgGlyph fgGlyph fgGlyphId FgTypeId fgPackage fgFont getStateObject flObject glyphRect QRectF hasBody bool hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool lastModified QDateTime layers list(flLayer) leftMetric QPointF mark int metricsLeft QString metricsRect QRectF metricsRight QString metricsWidth QString name QString nodesCount int note QString package flObject refCnt object references count rightMetric QPointF tags QStringList type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activeLayer fontlab.flGlyph.activeLayer flLayer addLayer fontlab.flGlyph.addLayer = addLayer (...) void addLayer(flLayer[, bool back = false]) addLayers fontlab.flGlyph.addLayers = addLayers (...) void addLayers(list(flLayer)) advanceWidth fontlab.flGlyph.advanceWidth double applyTransform fontlab.flGlyph.applyTransform = applyTransform (...) applyTransform([QTransform transform]) ascender fontlab.flGlyph.ascender double assignFontGateData fontlab.flGlyph.assignFontGateData = assignFontGateData (...) void assignFontGateData(fgFontGateData, bool doGuide = true, bool doHints = true, bool doAnchors = true) bindDependencies fontlab.flGlyph.bindDependencies = bindDependencies (...) bindDependencies() bodyLayer fontlab.flGlyph.bodyLayer flLayer bodyRect fontlab.flGlyph.bodyRect QRectF boundingBox fontlab.flGlyph.boundingBox QRectF changed fontlab.flGlyph.changed = changed (...) changed() checkInitHistoryState fontlab.flGlyph.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flGlyph.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flGlyph.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flGlyph.clearFlags = clearFlags (...) clearFlags() clearUpdateFgGlyphs fontlab.flGlyph.clearUpdateFgGlyphs = clearUpdateFgGlyphs (...) clearUpdateFgGlyphs() clone fontlab.flGlyph.clone = clone (...) Clone the object cloneObject fontlab.flGlyph.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flGlyph.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flGlyph.createInstance = createInstance (...) flGlyph createInstance() createObject fontlab.flGlyph.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flGlyph.currentHistoryState = currentHistoryState (...) currentHistoryIx() deactivateAll fontlab.flGlyph.deactivateAll = deactivateAll (...) deactivateAll() descender fontlab.flGlyph.descender double ensureFgData fontlab.flGlyph.ensureFgData = ensureFgData (...) fgFontGateData ensureFgData(fgGlyph) ensureMaskLayer fontlab.flGlyph.ensureMaskLayer = ensureMaskLayer (...) flLayer ensureMaskLayer() fgGlyph fontlab.flGlyph.fgGlyph fgGlyph fgGlyphId fontlab.flGlyph.fgGlyphId FgTypeId fgPackage fontlab.flGlyph.fgPackage fgFont fillFgData fontlab.flGlyph.fillFgData = fillFgData (...) fgFontGateData fillFgData(bool doGuides, bool doHints) findLayer fontlab.flGlyph.findLayer = findLayer (...) flLayer findLayer(QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findLayerCreate fontlab.flGlyph.findLayerCreate = findLayerCreate (...) flLayer findLayerCreate(QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findVerticalGuideline fontlab.flGlyph.findVerticalGuideline = findVerticalGuideline (...) double/Nothing findVerticalGuideline(QString) flag fontlab.flGlyph.flag = flag (...) flag(uint f) flObjectFlags fontlab.flGlyph.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getAuditInfo fontlab.flGlyph.getAuditInfo = getAuditInfo (...) list(flAuditInfo) getAuditInfo() getFastFontGateData fontlab.flGlyph.getFastFontGateData = getFastFontGateData (...) fgFontGateData getFastFontGateData() getLayerByName fontlab.flGlyph.getLayerByName = getLayerByName (...) flLayer getLayerByName(QString[, bool create =false]) getLSB fontlab.flGlyph.getLSB = getLSB (...) double getLSB(QTransform tr) getProperties fontlab.flGlyph.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flGlyph.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flGlyph.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flGlyph.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getRSB fontlab.flGlyph.getRSB = getRSB (...) double getRSB(QTransform tr) getSB fontlab.flGlyph.getSB = getSB (...) (double l, double r) getSB(QTransform tr) getStateObject fontlab.flGlyph.getStateObject flObject glyphName fontlab.flGlyph.glyphName = glyphName (...) QString glyphName() glyphRect fontlab.flGlyph.glyphRect QRectF hasBody fontlab.flGlyph.hasBody bool hasChanges fontlab.flGlyph.hasChanges bool hasFontAudit fontlab.flGlyph.hasFontAudit = hasFontAudit (...) bool hasFontAudit() hasHistoryState fontlab.flGlyph.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flGlyph.hasHistoryStates bool hasInstance fontlab.flGlyph.hasInstance = hasInstance (...) bool hasInstance(fgGlyph) haveObject fontlab.flGlyph.haveObject = haveObject (...) bool haveObject(uint); haveSelected fontlab.flGlyph.haveSelected = haveSelected (...) bool haveSelected(SelectionMode) historyStates fontlab.flGlyph.historyStates = historyStates (...) historyStates(bool accepted_state) horzReflection fontlab.flGlyph.horzReflection = horzReflection (...) bool horzReflection() id fontlab.flGlyph.id object id independedAll fontlab.flGlyph.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flGlyph.initialHistoryState = initialHistoryState (...) initialHistoryIx() inkBox fontlab.flGlyph.inkBox = inkBox (...) QRectF inkBox([QTransform tx = QTransform()]) instanceType fontlab.flGlyph.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flGlyph.isChanged bool isEqual fontlab.flGlyph.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flGlyph.isNull bool isPresent fontlab.flGlyph.isPresent bool isReleased fontlab.flGlyph.isReleased bool issele fontlab.flGlyph.issele = issele (...) void issele(bool) isUnbindedDependecies fontlab.flGlyph.isUnbindedDependecies = isUnbindedDependecies (...) bool isUnbindedDependecies() isValid fontlab.flGlyph.isValid bool lastModified fontlab.flGlyph.lastModified QDateTime layers fontlab.flGlyph.layers list(flLayer) leftMetric fontlab.flGlyph.leftMetric QPointF linkInstances fontlab.flGlyph.linkInstances = linkInstances (...) bool linkInstances(flGlyph, fgGlyph) mark fontlab.flGlyph.mark int measurementLine fontlab.flGlyph.measurementLine = measurementLine (...) double/Nothing measurementLine() metricsLeft fontlab.flGlyph.metricsLeft QString metricsRect fontlab.flGlyph.metricsRect QRectF metricsRight fontlab.flGlyph.metricsRight QString metricsWidth fontlab.flGlyph.metricsWidth QString name fontlab.flGlyph.name QString nodesCount fontlab.flGlyph.nodesCount int note fontlab.flGlyph.note QString package fontlab.flGlyph.package flObject prepareTransformationData fontlab.flGlyph.prepareTransformationData = prepareTransformationData (...) prepareTransformationData() refCnt fontlab.flGlyph.refCnt object references count release fontlab.flGlyph.release = release (...) release() remove fontlab.flGlyph.remove = remove (...) remove([flObject]) removeChild fontlab.flGlyph.removeChild = removeChild (...) removeChild(flObject) removeEmptyShapes fontlab.flGlyph.removeEmptyShapes = removeEmptyShapes (...) removeEmptyShapes() removeLayer fontlab.flGlyph.removeLayer = removeLayer (...) void removeLayer(flLayer) removeProperty fontlab.flGlyph.removeProperty = removeProperty (...) removeProperty('key') resetInkBox fontlab.flGlyph.resetInkBox = resetInkBox (...) resetInkBox() resetTransformationData fontlab.flGlyph.resetTransformationData = resetTransformationData (...) resetTransformationData() restoreHistoryState fontlab.flGlyph.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) rightMetric fontlab.flGlyph.rightMetric QPointF setAllShapesSelected fontlab.flGlyph.setAllShapesSelected = setAllShapesSelected (...) setAllShapesSelected(bool) setFlag fontlab.flGlyph.setFlag = setFlag (...) setFlag(uint f [, bool value]) setLayers fontlab.flGlyph.setLayers = setLayers (...) void setLayers(list(flLayer)) setLSB fontlab.flGlyph.setLSB = setLSB (...) bool setLSB(double v, bool move_guidelines, QTransform tr) setProperty fontlab.flGlyph.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flGlyph.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flGlyph.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setReflected fontlab.flGlyph.setReflected = setReflected (...) setReflected(bool, bool) setRSB fontlab.flGlyph.setRSB = setRSB (...) bool setRSB(double v, QTransform tr) setSB fontlab.flGlyph.setSB = setSB (...) bool setSB(double l, double r, bool move_guidelines, bool all_layers, QTransform tr) tag fontlab.flGlyph.tag = tag (...) tag([string]) tags fontlab.flGlyph.tags QStringList type fontlab.flGlyph.type object type unselectAllNodes fontlab.flGlyph.unselectAllNodes = unselectAllNodes (...) unselectAllNodes() update fontlab.flGlyph.update = update (...) update() updateActiveLayer fontlab.flGlyph.updateActiveLayer = updateActiveLayer (...) flLayer updateActiveLayer(bool) updateAudit fontlab.flGlyph.updateAudit = updateAudit (...) void updateAudit(list(int)) updatedFgGlyphs fontlab.flGlyph.updatedFgGlyphs = updatedFgGlyphs (...) list(uint32_t) updatedFgGlyphs() updateFgGlyph fontlab.flGlyph.updateFgGlyph = updateFgGlyph (...) updateFgGlyph(uint id) updateSidebearings fontlab.flGlyph.updateSidebearings = updateSidebearings (...) bool updateSidebearings(bool nofify) vertReflection fontlab.flGlyph.vertReflection = vertReflection (...) bool vertReflection() virtualTags fontlab.flGlyph.virtualTags = virtualTags (...) QSet /Nothing virtualTags()","title":"flGlyph"},{"location":"fontlab.flGlyph.html#flglyph","text":"","title":"flGlyph"},{"location":"fontlab.flGlyph.html#activelayer","text":"fontlab.flGlyph.activeLayer flLayer","title":"activeLayer"},{"location":"fontlab.flGlyph.html#addlayer","text":"fontlab.flGlyph.addLayer = addLayer (...) void addLayer(flLayer[, bool back = false])","title":"addLayer"},{"location":"fontlab.flGlyph.html#addlayers","text":"fontlab.flGlyph.addLayers = addLayers (...) void addLayers(list(flLayer))","title":"addLayers"},{"location":"fontlab.flGlyph.html#advancewidth","text":"fontlab.flGlyph.advanceWidth double","title":"advanceWidth"},{"location":"fontlab.flGlyph.html#applytransform","text":"fontlab.flGlyph.applyTransform = applyTransform (...) applyTransform([QTransform transform])","title":"applyTransform"},{"location":"fontlab.flGlyph.html#ascender","text":"fontlab.flGlyph.ascender double","title":"ascender"},{"location":"fontlab.flGlyph.html#assignfontgatedata","text":"fontlab.flGlyph.assignFontGateData = assignFontGateData (...) void assignFontGateData(fgFontGateData, bool doGuide = true, bool doHints = true, bool doAnchors = true)","title":"assignFontGateData"},{"location":"fontlab.flGlyph.html#binddependencies","text":"fontlab.flGlyph.bindDependencies = bindDependencies (...) bindDependencies()","title":"bindDependencies"},{"location":"fontlab.flGlyph.html#bodylayer","text":"fontlab.flGlyph.bodyLayer flLayer","title":"bodyLayer"},{"location":"fontlab.flGlyph.html#bodyrect","text":"fontlab.flGlyph.bodyRect QRectF","title":"bodyRect"},{"location":"fontlab.flGlyph.html#boundingbox","text":"fontlab.flGlyph.boundingBox QRectF","title":"boundingBox"},{"location":"fontlab.flGlyph.html#changed","text":"fontlab.flGlyph.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flGlyph.html#checkinithistorystate","text":"fontlab.flGlyph.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flGlyph.html#clearabovehistory","text":"fontlab.flGlyph.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flGlyph.html#clearflag","text":"fontlab.flGlyph.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flGlyph.html#clearflags","text":"fontlab.flGlyph.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flGlyph.html#clearupdatefgglyphs","text":"fontlab.flGlyph.clearUpdateFgGlyphs = clearUpdateFgGlyphs (...) clearUpdateFgGlyphs()","title":"clearUpdateFgGlyphs"},{"location":"fontlab.flGlyph.html#clone","text":"fontlab.flGlyph.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flGlyph.html#cloneobject","text":"fontlab.flGlyph.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flGlyph.html#createhistorystate","text":"fontlab.flGlyph.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flGlyph.html#createinstance","text":"fontlab.flGlyph.createInstance = createInstance (...) flGlyph createInstance()","title":"createInstance"},{"location":"fontlab.flGlyph.html#createobject","text":"fontlab.flGlyph.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flGlyph.html#currenthistorystate","text":"fontlab.flGlyph.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flGlyph.html#deactivateall","text":"fontlab.flGlyph.deactivateAll = deactivateAll (...) deactivateAll()","title":"deactivateAll"},{"location":"fontlab.flGlyph.html#descender","text":"fontlab.flGlyph.descender double","title":"descender"},{"location":"fontlab.flGlyph.html#ensurefgdata","text":"fontlab.flGlyph.ensureFgData = ensureFgData (...) fgFontGateData ensureFgData(fgGlyph)","title":"ensureFgData"},{"location":"fontlab.flGlyph.html#ensuremasklayer","text":"fontlab.flGlyph.ensureMaskLayer = ensureMaskLayer (...) flLayer ensureMaskLayer()","title":"ensureMaskLayer"},{"location":"fontlab.flGlyph.html#fgglyph","text":"fontlab.flGlyph.fgGlyph fgGlyph","title":"fgGlyph"},{"location":"fontlab.flGlyph.html#fgglyphid","text":"fontlab.flGlyph.fgGlyphId FgTypeId","title":"fgGlyphId"},{"location":"fontlab.flGlyph.html#fgpackage","text":"fontlab.flGlyph.fgPackage fgFont","title":"fgPackage"},{"location":"fontlab.flGlyph.html#fillfgdata","text":"fontlab.flGlyph.fillFgData = fillFgData (...) fgFontGateData fillFgData(bool doGuides, bool doHints)","title":"fillFgData"},{"location":"fontlab.flGlyph.html#findlayer","text":"fontlab.flGlyph.findLayer = findLayer (...) flLayer findLayer(QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive])","title":"findLayer"},{"location":"fontlab.flGlyph.html#findlayercreate","text":"fontlab.flGlyph.findLayerCreate = findLayerCreate (...) flLayer findLayerCreate(QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive])","title":"findLayerCreate"},{"location":"fontlab.flGlyph.html#findverticalguideline","text":"fontlab.flGlyph.findVerticalGuideline = findVerticalGuideline (...) double/Nothing findVerticalGuideline(QString)","title":"findVerticalGuideline"},{"location":"fontlab.flGlyph.html#flag","text":"fontlab.flGlyph.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flGlyph.html#flobjectflags","text":"fontlab.flGlyph.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flGlyph.html#getauditinfo","text":"fontlab.flGlyph.getAuditInfo = getAuditInfo (...) list(flAuditInfo) getAuditInfo()","title":"getAuditInfo"},{"location":"fontlab.flGlyph.html#getfastfontgatedata","text":"fontlab.flGlyph.getFastFontGateData = getFastFontGateData (...) fgFontGateData getFastFontGateData()","title":"getFastFontGateData"},{"location":"fontlab.flGlyph.html#getlayerbyname","text":"fontlab.flGlyph.getLayerByName = getLayerByName (...) flLayer getLayerByName(QString[, bool create =false])","title":"getLayerByName"},{"location":"fontlab.flGlyph.html#getlsb","text":"fontlab.flGlyph.getLSB = getLSB (...) double getLSB(QTransform tr)","title":"getLSB"},{"location":"fontlab.flGlyph.html#getproperties","text":"fontlab.flGlyph.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flGlyph.html#getproperty","text":"fontlab.flGlyph.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flGlyph.html#getpropertyfloat","text":"fontlab.flGlyph.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flGlyph.html#getpropertyint","text":"fontlab.flGlyph.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flGlyph.html#getrsb","text":"fontlab.flGlyph.getRSB = getRSB (...) double getRSB(QTransform tr)","title":"getRSB"},{"location":"fontlab.flGlyph.html#getsb","text":"fontlab.flGlyph.getSB = getSB (...) (double l, double r) getSB(QTransform tr)","title":"getSB"},{"location":"fontlab.flGlyph.html#getstateobject","text":"fontlab.flGlyph.getStateObject flObject","title":"getStateObject"},{"location":"fontlab.flGlyph.html#glyphname","text":"fontlab.flGlyph.glyphName = glyphName (...) QString glyphName()","title":"glyphName"},{"location":"fontlab.flGlyph.html#glyphrect","text":"fontlab.flGlyph.glyphRect QRectF","title":"glyphRect"},{"location":"fontlab.flGlyph.html#hasbody","text":"fontlab.flGlyph.hasBody bool","title":"hasBody"},{"location":"fontlab.flGlyph.html#haschanges","text":"fontlab.flGlyph.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flGlyph.html#hasfontaudit","text":"fontlab.flGlyph.hasFontAudit = hasFontAudit (...) bool hasFontAudit()","title":"hasFontAudit"},{"location":"fontlab.flGlyph.html#hashistorystate","text":"fontlab.flGlyph.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flGlyph.html#hashistorystates","text":"fontlab.flGlyph.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flGlyph.html#hasinstance","text":"fontlab.flGlyph.hasInstance = hasInstance (...) bool hasInstance(fgGlyph)","title":"hasInstance"},{"location":"fontlab.flGlyph.html#haveobject","text":"fontlab.flGlyph.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flGlyph.html#haveselected","text":"fontlab.flGlyph.haveSelected = haveSelected (...) bool haveSelected(SelectionMode)","title":"haveSelected"},{"location":"fontlab.flGlyph.html#historystates","text":"fontlab.flGlyph.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flGlyph.html#horzreflection","text":"fontlab.flGlyph.horzReflection = horzReflection (...) bool horzReflection()","title":"horzReflection"},{"location":"fontlab.flGlyph.html#id","text":"fontlab.flGlyph.id object id","title":"id"},{"location":"fontlab.flGlyph.html#independedall","text":"fontlab.flGlyph.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flGlyph.html#initialhistorystate","text":"fontlab.flGlyph.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flGlyph.html#inkbox","text":"fontlab.flGlyph.inkBox = inkBox (...) QRectF inkBox([QTransform tx = QTransform()])","title":"inkBox"},{"location":"fontlab.flGlyph.html#instancetype","text":"fontlab.flGlyph.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flGlyph.html#ischanged","text":"fontlab.flGlyph.isChanged bool","title":"isChanged"},{"location":"fontlab.flGlyph.html#isequal","text":"fontlab.flGlyph.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flGlyph.html#isnull","text":"fontlab.flGlyph.isNull bool","title":"isNull"},{"location":"fontlab.flGlyph.html#ispresent","text":"fontlab.flGlyph.isPresent bool","title":"isPresent"},{"location":"fontlab.flGlyph.html#isreleased","text":"fontlab.flGlyph.isReleased bool","title":"isReleased"},{"location":"fontlab.flGlyph.html#issele","text":"fontlab.flGlyph.issele = issele (...) void issele(bool)","title":"issele"},{"location":"fontlab.flGlyph.html#isunbindeddependecies","text":"fontlab.flGlyph.isUnbindedDependecies = isUnbindedDependecies (...) bool isUnbindedDependecies()","title":"isUnbindedDependecies"},{"location":"fontlab.flGlyph.html#isvalid","text":"fontlab.flGlyph.isValid bool","title":"isValid"},{"location":"fontlab.flGlyph.html#lastmodified","text":"fontlab.flGlyph.lastModified QDateTime","title":"lastModified"},{"location":"fontlab.flGlyph.html#layers","text":"fontlab.flGlyph.layers list(flLayer)","title":"layers"},{"location":"fontlab.flGlyph.html#leftmetric","text":"fontlab.flGlyph.leftMetric QPointF","title":"leftMetric"},{"location":"fontlab.flGlyph.html#linkinstances","text":"fontlab.flGlyph.linkInstances = linkInstances (...) bool linkInstances(flGlyph, fgGlyph)","title":"linkInstances"},{"location":"fontlab.flGlyph.html#mark","text":"fontlab.flGlyph.mark int","title":"mark"},{"location":"fontlab.flGlyph.html#measurementline","text":"fontlab.flGlyph.measurementLine = measurementLine (...) double/Nothing measurementLine()","title":"measurementLine"},{"location":"fontlab.flGlyph.html#metricsleft","text":"fontlab.flGlyph.metricsLeft QString","title":"metricsLeft"},{"location":"fontlab.flGlyph.html#metricsrect","text":"fontlab.flGlyph.metricsRect QRectF","title":"metricsRect"},{"location":"fontlab.flGlyph.html#metricsright","text":"fontlab.flGlyph.metricsRight QString","title":"metricsRight"},{"location":"fontlab.flGlyph.html#metricswidth","text":"fontlab.flGlyph.metricsWidth QString","title":"metricsWidth"},{"location":"fontlab.flGlyph.html#name","text":"fontlab.flGlyph.name QString","title":"name"},{"location":"fontlab.flGlyph.html#nodescount","text":"fontlab.flGlyph.nodesCount int","title":"nodesCount"},{"location":"fontlab.flGlyph.html#note","text":"fontlab.flGlyph.note QString","title":"note"},{"location":"fontlab.flGlyph.html#package","text":"fontlab.flGlyph.package flObject","title":"package"},{"location":"fontlab.flGlyph.html#preparetransformationdata","text":"fontlab.flGlyph.prepareTransformationData = prepareTransformationData (...) prepareTransformationData()","title":"prepareTransformationData"},{"location":"fontlab.flGlyph.html#refcnt","text":"fontlab.flGlyph.refCnt object references count","title":"refCnt"},{"location":"fontlab.flGlyph.html#release","text":"fontlab.flGlyph.release = release (...) release()","title":"release"},{"location":"fontlab.flGlyph.html#remove","text":"fontlab.flGlyph.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flGlyph.html#removechild","text":"fontlab.flGlyph.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flGlyph.html#removeemptyshapes","text":"fontlab.flGlyph.removeEmptyShapes = removeEmptyShapes (...) removeEmptyShapes()","title":"removeEmptyShapes"},{"location":"fontlab.flGlyph.html#removelayer","text":"fontlab.flGlyph.removeLayer = removeLayer (...) void removeLayer(flLayer)","title":"removeLayer"},{"location":"fontlab.flGlyph.html#removeproperty","text":"fontlab.flGlyph.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flGlyph.html#resetinkbox","text":"fontlab.flGlyph.resetInkBox = resetInkBox (...) resetInkBox()","title":"resetInkBox"},{"location":"fontlab.flGlyph.html#resettransformationdata","text":"fontlab.flGlyph.resetTransformationData = resetTransformationData (...) resetTransformationData()","title":"resetTransformationData"},{"location":"fontlab.flGlyph.html#restorehistorystate","text":"fontlab.flGlyph.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flGlyph.html#rightmetric","text":"fontlab.flGlyph.rightMetric QPointF","title":"rightMetric"},{"location":"fontlab.flGlyph.html#setallshapesselected","text":"fontlab.flGlyph.setAllShapesSelected = setAllShapesSelected (...) setAllShapesSelected(bool)","title":"setAllShapesSelected"},{"location":"fontlab.flGlyph.html#setflag","text":"fontlab.flGlyph.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flGlyph.html#setlayers","text":"fontlab.flGlyph.setLayers = setLayers (...) void setLayers(list(flLayer))","title":"setLayers"},{"location":"fontlab.flGlyph.html#setlsb","text":"fontlab.flGlyph.setLSB = setLSB (...) bool setLSB(double v, bool move_guidelines, QTransform tr)","title":"setLSB"},{"location":"fontlab.flGlyph.html#setproperty","text":"fontlab.flGlyph.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flGlyph.html#setpropertyfloat","text":"fontlab.flGlyph.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flGlyph.html#setpropertyint","text":"fontlab.flGlyph.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flGlyph.html#setreflected","text":"fontlab.flGlyph.setReflected = setReflected (...) setReflected(bool, bool)","title":"setReflected"},{"location":"fontlab.flGlyph.html#setrsb","text":"fontlab.flGlyph.setRSB = setRSB (...) bool setRSB(double v, QTransform tr)","title":"setRSB"},{"location":"fontlab.flGlyph.html#setsb","text":"fontlab.flGlyph.setSB = setSB (...) bool setSB(double l, double r, bool move_guidelines, bool all_layers, QTransform tr)","title":"setSB"},{"location":"fontlab.flGlyph.html#tag","text":"fontlab.flGlyph.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flGlyph.html#tags","text":"fontlab.flGlyph.tags QStringList","title":"tags"},{"location":"fontlab.flGlyph.html#type","text":"fontlab.flGlyph.type object type","title":"type"},{"location":"fontlab.flGlyph.html#unselectallnodes","text":"fontlab.flGlyph.unselectAllNodes = unselectAllNodes (...) unselectAllNodes()","title":"unselectAllNodes"},{"location":"fontlab.flGlyph.html#update","text":"fontlab.flGlyph.update = update (...) update()","title":"update"},{"location":"fontlab.flGlyph.html#updateactivelayer","text":"fontlab.flGlyph.updateActiveLayer = updateActiveLayer (...) flLayer updateActiveLayer(bool)","title":"updateActiveLayer"},{"location":"fontlab.flGlyph.html#updateaudit","text":"fontlab.flGlyph.updateAudit = updateAudit (...) void updateAudit(list(int))","title":"updateAudit"},{"location":"fontlab.flGlyph.html#updatedfgglyphs","text":"fontlab.flGlyph.updatedFgGlyphs = updatedFgGlyphs (...) list(uint32_t) updatedFgGlyphs()","title":"updatedFgGlyphs"},{"location":"fontlab.flGlyph.html#updatefgglyph","text":"fontlab.flGlyph.updateFgGlyph = updateFgGlyph (...) updateFgGlyph(uint id)","title":"updateFgGlyph"},{"location":"fontlab.flGlyph.html#updatesidebearings","text":"fontlab.flGlyph.updateSidebearings = updateSidebearings (...) bool updateSidebearings(bool nofify)","title":"updateSidebearings"},{"location":"fontlab.flGlyph.html#vertreflection","text":"fontlab.flGlyph.vertReflection = vertReflection (...) bool vertReflection()","title":"vertReflection"},{"location":"fontlab.flGlyph.html#virtualtags","text":"fontlab.flGlyph.virtualTags = virtualTags (...) QSet /Nothing virtualTags()","title":"virtualTags"},{"location":"fontlab.flGlyphInfo.html","text":"flGlyphInfo fontlab.flGlyphInfo = class flGlyphInfo ( object ) flGlyphInfo representation Constructors: flGlyphInfo() flGlyphInfo(flObject) flGlyphInfo(flGlyphInfo) flGlyphInfo(flGlyph, QTransform) flGlyphInfo(fgSymbol, fgGlyph, fgFont) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value applyTransform (...) applyTransform () applyTransformTo (...) applyTransformTo (uint type) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createBoundingBox (...) createBoundingBox () createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getNearbyContours (...) list(flContourInfo) getNearbyContours (QPointF, double max_dist, QString exclude_attr) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getTopHitShape (...) flShapeInfo/Nothing getTopHitShape (QPointF) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) hitToShape (...) bool hitToShape (QPointF) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) kerningOffset (...) double kerningOffset (bool useKerning) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setBoundAscender (...) setBoundAscender (double) setBoundDescender (...) setBoundDescender (double) setBoundLeft (...) setBoundLeft (double) setBoundRight (...) setBoundRight (double) setFlag (...) setFlag (uint f [, bool value]) setGlyphScale (...) setGlyphScale (double, double) setKerningOffset (...) setKerningOffset (double offs) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors bodyRectOnCanvas QRectF boundingBox QRectF brectOnCanvas QRectF changedRect QRectF dist double fontSize int glyph flGlyph glyphRectCanvas QRectF hasChanges bool hasHistoryStates bool id object id isActive bool isChanged bool isNull bool isNullGlyph bool isPresent bool isReleased bool isSelected bool isValid bool leftOffset double metricsRectOnCanvas QRectF name QString refCnt object references count rightOffset double shapesBoundingBoxOnCanvas QRectF state uint symbol fgSymbol textBlock flTextBlock, int transform transform matrix type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} applyTransform fontlab.flGlyphInfo.applyTransform = applyTransform (...) applyTransform() applyTransformTo fontlab.flGlyphInfo.applyTransformTo = applyTransformTo (...) applyTransformTo(uint type) bodyRectOnCanvas fontlab.flGlyphInfo.bodyRectOnCanvas QRectF boundingBox fontlab.flGlyphInfo.boundingBox QRectF brectOnCanvas fontlab.flGlyphInfo.brectOnCanvas QRectF changed fontlab.flGlyphInfo.changed = changed (...) changed() changedRect fontlab.flGlyphInfo.changedRect QRectF checkInitHistoryState fontlab.flGlyphInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flGlyphInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flGlyphInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flGlyphInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flGlyphInfo.clone = clone (...) Clone the object cloneObject fontlab.flGlyphInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createBoundingBox fontlab.flGlyphInfo.createBoundingBox = createBoundingBox (...) createBoundingBox() createHistoryState fontlab.flGlyphInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flGlyphInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flGlyphInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() dist fontlab.flGlyphInfo.dist double flag fontlab.flGlyphInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flGlyphInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} fontSize fontlab.flGlyphInfo.fontSize int getNearbyContours fontlab.flGlyphInfo.getNearbyContours = getNearbyContours (...) list(flContourInfo) getNearbyContours(QPointF, double max_dist, QString exclude_attr) getProperties fontlab.flGlyphInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flGlyphInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flGlyphInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flGlyphInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getTopHitShape fontlab.flGlyphInfo.getTopHitShape = getTopHitShape (...) flShapeInfo/Nothing getTopHitShape(QPointF) glyph fontlab.flGlyphInfo.glyph flGlyph glyphRectCanvas fontlab.flGlyphInfo.glyphRectCanvas QRectF hasChanges fontlab.flGlyphInfo.hasChanges bool hasHistoryState fontlab.flGlyphInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flGlyphInfo.hasHistoryStates bool haveObject fontlab.flGlyphInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flGlyphInfo.historyStates = historyStates (...) historyStates(bool accepted_state) hitToShape fontlab.flGlyphInfo.hitToShape = hitToShape (...) bool hitToShape(QPointF) id fontlab.flGlyphInfo.id object id independedAll fontlab.flGlyphInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flGlyphInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flGlyphInfo.instanceType = instanceType (...) int instanceType(); isActive fontlab.flGlyphInfo.isActive bool isChanged fontlab.flGlyphInfo.isChanged bool isEqual fontlab.flGlyphInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flGlyphInfo.isNull bool isNullGlyph fontlab.flGlyphInfo.isNullGlyph bool isPresent fontlab.flGlyphInfo.isPresent bool isReleased fontlab.flGlyphInfo.isReleased bool isSelected fontlab.flGlyphInfo.isSelected bool isValid fontlab.flGlyphInfo.isValid bool kerningOffset fontlab.flGlyphInfo.kerningOffset = kerningOffset (...) double kerningOffset(bool useKerning) leftOffset fontlab.flGlyphInfo.leftOffset double metricsRectOnCanvas fontlab.flGlyphInfo.metricsRectOnCanvas QRectF name fontlab.flGlyphInfo.name QString refCnt fontlab.flGlyphInfo.refCnt object references count release fontlab.flGlyphInfo.release = release (...) release() remove fontlab.flGlyphInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flGlyphInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flGlyphInfo.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flGlyphInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) rightOffset fontlab.flGlyphInfo.rightOffset double setBoundAscender fontlab.flGlyphInfo.setBoundAscender = setBoundAscender (...) setBoundAscender(double) setBoundDescender fontlab.flGlyphInfo.setBoundDescender = setBoundDescender (...) setBoundDescender(double) setBoundLeft fontlab.flGlyphInfo.setBoundLeft = setBoundLeft (...) setBoundLeft(double) setBoundRight fontlab.flGlyphInfo.setBoundRight = setBoundRight (...) setBoundRight(double) setFlag fontlab.flGlyphInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setGlyphScale fontlab.flGlyphInfo.setGlyphScale = setGlyphScale (...) setGlyphScale(double, double) setKerningOffset fontlab.flGlyphInfo.setKerningOffset = setKerningOffset (...) setKerningOffset(double offs) setProperty fontlab.flGlyphInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flGlyphInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flGlyphInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' shapesBoundingBoxOnCanvas fontlab.flGlyphInfo.shapesBoundingBoxOnCanvas QRectF state fontlab.flGlyphInfo.state uint symbol fontlab.flGlyphInfo.symbol fgSymbol tag fontlab.flGlyphInfo.tag = tag (...) tag([string]) textBlock fontlab.flGlyphInfo.textBlock flTextBlock, int transform fontlab.flGlyphInfo.transform transform matrix type fontlab.flGlyphInfo.type object type update fontlab.flGlyphInfo.update = update (...) update()","title":"flGlyphInfo"},{"location":"fontlab.flGlyphInfo.html#flglyphinfo","text":"","title":"flGlyphInfo"},{"location":"fontlab.flGlyphInfo.html#applytransform","text":"fontlab.flGlyphInfo.applyTransform = applyTransform (...) applyTransform()","title":"applyTransform"},{"location":"fontlab.flGlyphInfo.html#applytransformto","text":"fontlab.flGlyphInfo.applyTransformTo = applyTransformTo (...) applyTransformTo(uint type)","title":"applyTransformTo"},{"location":"fontlab.flGlyphInfo.html#bodyrectoncanvas","text":"fontlab.flGlyphInfo.bodyRectOnCanvas QRectF","title":"bodyRectOnCanvas"},{"location":"fontlab.flGlyphInfo.html#boundingbox","text":"fontlab.flGlyphInfo.boundingBox QRectF","title":"boundingBox"},{"location":"fontlab.flGlyphInfo.html#brectoncanvas","text":"fontlab.flGlyphInfo.brectOnCanvas QRectF","title":"brectOnCanvas"},{"location":"fontlab.flGlyphInfo.html#changed","text":"fontlab.flGlyphInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flGlyphInfo.html#changedrect","text":"fontlab.flGlyphInfo.changedRect QRectF","title":"changedRect"},{"location":"fontlab.flGlyphInfo.html#checkinithistorystate","text":"fontlab.flGlyphInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flGlyphInfo.html#clearabovehistory","text":"fontlab.flGlyphInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flGlyphInfo.html#clearflag","text":"fontlab.flGlyphInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flGlyphInfo.html#clearflags","text":"fontlab.flGlyphInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flGlyphInfo.html#clone","text":"fontlab.flGlyphInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flGlyphInfo.html#cloneobject","text":"fontlab.flGlyphInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flGlyphInfo.html#createboundingbox","text":"fontlab.flGlyphInfo.createBoundingBox = createBoundingBox (...) createBoundingBox()","title":"createBoundingBox"},{"location":"fontlab.flGlyphInfo.html#createhistorystate","text":"fontlab.flGlyphInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flGlyphInfo.html#createobject","text":"fontlab.flGlyphInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flGlyphInfo.html#currenthistorystate","text":"fontlab.flGlyphInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flGlyphInfo.html#dist","text":"fontlab.flGlyphInfo.dist double","title":"dist"},{"location":"fontlab.flGlyphInfo.html#flag","text":"fontlab.flGlyphInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flGlyphInfo.html#flobjectflags","text":"fontlab.flGlyphInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flGlyphInfo.html#fontsize","text":"fontlab.flGlyphInfo.fontSize int","title":"fontSize"},{"location":"fontlab.flGlyphInfo.html#getnearbycontours","text":"fontlab.flGlyphInfo.getNearbyContours = getNearbyContours (...) list(flContourInfo) getNearbyContours(QPointF, double max_dist, QString exclude_attr)","title":"getNearbyContours"},{"location":"fontlab.flGlyphInfo.html#getproperties","text":"fontlab.flGlyphInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flGlyphInfo.html#getproperty","text":"fontlab.flGlyphInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flGlyphInfo.html#getpropertyfloat","text":"fontlab.flGlyphInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flGlyphInfo.html#getpropertyint","text":"fontlab.flGlyphInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flGlyphInfo.html#gettophitshape","text":"fontlab.flGlyphInfo.getTopHitShape = getTopHitShape (...) flShapeInfo/Nothing getTopHitShape(QPointF)","title":"getTopHitShape"},{"location":"fontlab.flGlyphInfo.html#glyph","text":"fontlab.flGlyphInfo.glyph flGlyph","title":"glyph"},{"location":"fontlab.flGlyphInfo.html#glyphrectcanvas","text":"fontlab.flGlyphInfo.glyphRectCanvas QRectF","title":"glyphRectCanvas"},{"location":"fontlab.flGlyphInfo.html#haschanges","text":"fontlab.flGlyphInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flGlyphInfo.html#hashistorystate","text":"fontlab.flGlyphInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flGlyphInfo.html#hashistorystates","text":"fontlab.flGlyphInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flGlyphInfo.html#haveobject","text":"fontlab.flGlyphInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flGlyphInfo.html#historystates","text":"fontlab.flGlyphInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flGlyphInfo.html#hittoshape","text":"fontlab.flGlyphInfo.hitToShape = hitToShape (...) bool hitToShape(QPointF)","title":"hitToShape"},{"location":"fontlab.flGlyphInfo.html#id","text":"fontlab.flGlyphInfo.id object id","title":"id"},{"location":"fontlab.flGlyphInfo.html#independedall","text":"fontlab.flGlyphInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flGlyphInfo.html#initialhistorystate","text":"fontlab.flGlyphInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flGlyphInfo.html#instancetype","text":"fontlab.flGlyphInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flGlyphInfo.html#isactive","text":"fontlab.flGlyphInfo.isActive bool","title":"isActive"},{"location":"fontlab.flGlyphInfo.html#ischanged","text":"fontlab.flGlyphInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flGlyphInfo.html#isequal","text":"fontlab.flGlyphInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flGlyphInfo.html#isnull","text":"fontlab.flGlyphInfo.isNull bool","title":"isNull"},{"location":"fontlab.flGlyphInfo.html#isnullglyph","text":"fontlab.flGlyphInfo.isNullGlyph bool","title":"isNullGlyph"},{"location":"fontlab.flGlyphInfo.html#ispresent","text":"fontlab.flGlyphInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flGlyphInfo.html#isreleased","text":"fontlab.flGlyphInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flGlyphInfo.html#isselected","text":"fontlab.flGlyphInfo.isSelected bool","title":"isSelected"},{"location":"fontlab.flGlyphInfo.html#isvalid","text":"fontlab.flGlyphInfo.isValid bool","title":"isValid"},{"location":"fontlab.flGlyphInfo.html#kerningoffset","text":"fontlab.flGlyphInfo.kerningOffset = kerningOffset (...) double kerningOffset(bool useKerning)","title":"kerningOffset"},{"location":"fontlab.flGlyphInfo.html#leftoffset","text":"fontlab.flGlyphInfo.leftOffset double","title":"leftOffset"},{"location":"fontlab.flGlyphInfo.html#metricsrectoncanvas","text":"fontlab.flGlyphInfo.metricsRectOnCanvas QRectF","title":"metricsRectOnCanvas"},{"location":"fontlab.flGlyphInfo.html#name","text":"fontlab.flGlyphInfo.name QString","title":"name"},{"location":"fontlab.flGlyphInfo.html#refcnt","text":"fontlab.flGlyphInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flGlyphInfo.html#release","text":"fontlab.flGlyphInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flGlyphInfo.html#remove","text":"fontlab.flGlyphInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flGlyphInfo.html#removechild","text":"fontlab.flGlyphInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flGlyphInfo.html#removeproperty","text":"fontlab.flGlyphInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flGlyphInfo.html#restorehistorystate","text":"fontlab.flGlyphInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flGlyphInfo.html#rightoffset","text":"fontlab.flGlyphInfo.rightOffset double","title":"rightOffset"},{"location":"fontlab.flGlyphInfo.html#setboundascender","text":"fontlab.flGlyphInfo.setBoundAscender = setBoundAscender (...) setBoundAscender(double)","title":"setBoundAscender"},{"location":"fontlab.flGlyphInfo.html#setbounddescender","text":"fontlab.flGlyphInfo.setBoundDescender = setBoundDescender (...) setBoundDescender(double)","title":"setBoundDescender"},{"location":"fontlab.flGlyphInfo.html#setboundleft","text":"fontlab.flGlyphInfo.setBoundLeft = setBoundLeft (...) setBoundLeft(double)","title":"setBoundLeft"},{"location":"fontlab.flGlyphInfo.html#setboundright","text":"fontlab.flGlyphInfo.setBoundRight = setBoundRight (...) setBoundRight(double)","title":"setBoundRight"},{"location":"fontlab.flGlyphInfo.html#setflag","text":"fontlab.flGlyphInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flGlyphInfo.html#setglyphscale","text":"fontlab.flGlyphInfo.setGlyphScale = setGlyphScale (...) setGlyphScale(double, double)","title":"setGlyphScale"},{"location":"fontlab.flGlyphInfo.html#setkerningoffset","text":"fontlab.flGlyphInfo.setKerningOffset = setKerningOffset (...) setKerningOffset(double offs)","title":"setKerningOffset"},{"location":"fontlab.flGlyphInfo.html#setproperty","text":"fontlab.flGlyphInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flGlyphInfo.html#setpropertyfloat","text":"fontlab.flGlyphInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flGlyphInfo.html#setpropertyint","text":"fontlab.flGlyphInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flGlyphInfo.html#shapesboundingboxoncanvas","text":"fontlab.flGlyphInfo.shapesBoundingBoxOnCanvas QRectF","title":"shapesBoundingBoxOnCanvas"},{"location":"fontlab.flGlyphInfo.html#state","text":"fontlab.flGlyphInfo.state uint","title":"state"},{"location":"fontlab.flGlyphInfo.html#symbol","text":"fontlab.flGlyphInfo.symbol fgSymbol","title":"symbol"},{"location":"fontlab.flGlyphInfo.html#tag","text":"fontlab.flGlyphInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flGlyphInfo.html#textblock","text":"fontlab.flGlyphInfo.textBlock flTextBlock, int","title":"textBlock"},{"location":"fontlab.flGlyphInfo.html#transform","text":"fontlab.flGlyphInfo.transform transform matrix","title":"transform"},{"location":"fontlab.flGlyphInfo.html#type","text":"fontlab.flGlyphInfo.type object type","title":"type"},{"location":"fontlab.flGlyphInfo.html#update","text":"fontlab.flGlyphInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flGraphicsInfo.html","text":"flGraphicsInfo fontlab.flGraphicsInfo = class flGraphicsInfo ( object ) flGraphicsInfo representation Constructors: flGraphicsInfo() flGraphicsInfo(flObject) flGraphicsInfo(flGraphicsInfo) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count transform transform matrix type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flGraphicsInfo.changed = changed (...) changed() checkInitHistoryState fontlab.flGraphicsInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flGraphicsInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flGraphicsInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flGraphicsInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flGraphicsInfo.clone = clone (...) Clone the object cloneObject fontlab.flGraphicsInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flGraphicsInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flGraphicsInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flGraphicsInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flGraphicsInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flGraphicsInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flGraphicsInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flGraphicsInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flGraphicsInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flGraphicsInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flGraphicsInfo.hasChanges bool hasHistoryState fontlab.flGraphicsInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flGraphicsInfo.hasHistoryStates bool haveObject fontlab.flGraphicsInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flGraphicsInfo.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flGraphicsInfo.id object id independedAll fontlab.flGraphicsInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flGraphicsInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flGraphicsInfo.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flGraphicsInfo.isChanged bool isEqual fontlab.flGraphicsInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flGraphicsInfo.isNull bool isPresent fontlab.flGraphicsInfo.isPresent bool isReleased fontlab.flGraphicsInfo.isReleased bool isValid fontlab.flGraphicsInfo.isValid bool name fontlab.flGraphicsInfo.name object name refCnt fontlab.flGraphicsInfo.refCnt object references count release fontlab.flGraphicsInfo.release = release (...) release() remove fontlab.flGraphicsInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flGraphicsInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flGraphicsInfo.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flGraphicsInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flGraphicsInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flGraphicsInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flGraphicsInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flGraphicsInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flGraphicsInfo.tag = tag (...) tag([string]) transform fontlab.flGraphicsInfo.transform transform matrix type fontlab.flGraphicsInfo.type object type update fontlab.flGraphicsInfo.update = update (...) update()","title":"flGraphicsInfo"},{"location":"fontlab.flGraphicsInfo.html#flgraphicsinfo","text":"","title":"flGraphicsInfo"},{"location":"fontlab.flGraphicsInfo.html#changed","text":"fontlab.flGraphicsInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flGraphicsInfo.html#checkinithistorystate","text":"fontlab.flGraphicsInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flGraphicsInfo.html#clearabovehistory","text":"fontlab.flGraphicsInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flGraphicsInfo.html#clearflag","text":"fontlab.flGraphicsInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flGraphicsInfo.html#clearflags","text":"fontlab.flGraphicsInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flGraphicsInfo.html#clone","text":"fontlab.flGraphicsInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flGraphicsInfo.html#cloneobject","text":"fontlab.flGraphicsInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flGraphicsInfo.html#createhistorystate","text":"fontlab.flGraphicsInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flGraphicsInfo.html#createobject","text":"fontlab.flGraphicsInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flGraphicsInfo.html#currenthistorystate","text":"fontlab.flGraphicsInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flGraphicsInfo.html#flag","text":"fontlab.flGraphicsInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flGraphicsInfo.html#flobjectflags","text":"fontlab.flGraphicsInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flGraphicsInfo.html#getproperties","text":"fontlab.flGraphicsInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flGraphicsInfo.html#getproperty","text":"fontlab.flGraphicsInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flGraphicsInfo.html#getpropertyfloat","text":"fontlab.flGraphicsInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flGraphicsInfo.html#getpropertyint","text":"fontlab.flGraphicsInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flGraphicsInfo.html#haschanges","text":"fontlab.flGraphicsInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flGraphicsInfo.html#hashistorystate","text":"fontlab.flGraphicsInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flGraphicsInfo.html#hashistorystates","text":"fontlab.flGraphicsInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flGraphicsInfo.html#haveobject","text":"fontlab.flGraphicsInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flGraphicsInfo.html#historystates","text":"fontlab.flGraphicsInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flGraphicsInfo.html#id","text":"fontlab.flGraphicsInfo.id object id","title":"id"},{"location":"fontlab.flGraphicsInfo.html#independedall","text":"fontlab.flGraphicsInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flGraphicsInfo.html#initialhistorystate","text":"fontlab.flGraphicsInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flGraphicsInfo.html#instancetype","text":"fontlab.flGraphicsInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flGraphicsInfo.html#ischanged","text":"fontlab.flGraphicsInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flGraphicsInfo.html#isequal","text":"fontlab.flGraphicsInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flGraphicsInfo.html#isnull","text":"fontlab.flGraphicsInfo.isNull bool","title":"isNull"},{"location":"fontlab.flGraphicsInfo.html#ispresent","text":"fontlab.flGraphicsInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flGraphicsInfo.html#isreleased","text":"fontlab.flGraphicsInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flGraphicsInfo.html#isvalid","text":"fontlab.flGraphicsInfo.isValid bool","title":"isValid"},{"location":"fontlab.flGraphicsInfo.html#name","text":"fontlab.flGraphicsInfo.name object name","title":"name"},{"location":"fontlab.flGraphicsInfo.html#refcnt","text":"fontlab.flGraphicsInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flGraphicsInfo.html#release","text":"fontlab.flGraphicsInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flGraphicsInfo.html#remove","text":"fontlab.flGraphicsInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flGraphicsInfo.html#removechild","text":"fontlab.flGraphicsInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flGraphicsInfo.html#removeproperty","text":"fontlab.flGraphicsInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flGraphicsInfo.html#restorehistorystate","text":"fontlab.flGraphicsInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flGraphicsInfo.html#setflag","text":"fontlab.flGraphicsInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flGraphicsInfo.html#setproperty","text":"fontlab.flGraphicsInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flGraphicsInfo.html#setpropertyfloat","text":"fontlab.flGraphicsInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flGraphicsInfo.html#setpropertyint","text":"fontlab.flGraphicsInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flGraphicsInfo.html#tag","text":"fontlab.flGraphicsInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flGraphicsInfo.html#transform","text":"fontlab.flGraphicsInfo.transform transform matrix","title":"transform"},{"location":"fontlab.flGraphicsInfo.html#type","text":"fontlab.flGraphicsInfo.type object type","title":"type"},{"location":"fontlab.flGraphicsInfo.html#update","text":"fontlab.flGraphicsInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flGuideLine.html","text":"flGuideLine fontlab.flGuideLine = class flGuideLine ( object ) flGuideLine representation Constructors: flGuideLine() flGuideLine(flObject) flGuideLine(flGuideLine) flGuideLine(double angle, QPointF canvas_point, uint=flSnaps::Vector, SnapObjectsStyle=gsPageGuideline) flGuideLine(QLineF line, uint=flSnaps::Vector, SnapObjectsStyle=gsPageGuideline) flGuideLine(QPointF center, QPointF vector_point, uint =flSnaps::Vector, SnapObjectsStyle=gsPageGuideline) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value applyTransform (...) void applyTransform (QTransform) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() disconnectFromContour (...) disconnectFromContour () distanceTo (...) double distanceTo (QPointF, uint mode) flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) isHorizontal (...) bool isHorizontal ([double a=1]) isVertical (...) bool isVertical ([double a=1]) offsetTo (...) QPointF offsetTo (QPointF, uint mode) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') reset (...) reset () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSnapFlag (...) setSnapFlag (uint role, uint snapFlags) setSnapFlagValue (...) setSnapFlagValue (uint role, bool) snapFlag (...) uint snapFlag (uint role) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); counterPaper (...) int counterPaper () createInstance (...) flGuideLine createInstance () createObject (...) flObject/Nothing createObject (int); createPowerGuides (...) bool createPowerGuides (fgFont, flLayer, bool horizontal, bool vertical, bool diagonal[, bool use_glyph_guides=true[, bool use_font_guides = true]]) getHashCode (...) long getHashCode (QPointF, double angle) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isGuideLine (...) bool isGuideLine (flObject) isSnapLine (...) bool isSnapLine (flObject) sortGuideLines (...) list(flGuideLine) sortGuideLines (list(flGuideLine)[, bool ascending = true]) Descriptors angle double angleMode SnapAngleMode center flNode centerPoint QPointF color QColor constraints QRectF expression QString extLinef QLineF extPosition double hasChanges bool hasColor bool hasExpression bool hasHistoryStates bool hasTags bool haveExtLine bool id object id isAbsoluteMarkerPos bool isChanged bool isExluded bool isHint bool isInUse bool isMeasurementLine bool isNull bool isPassive bool isPresent bool isReleased bool isShortGuideline bool isValid bool isVerticalQuarter bool isZone bool length double linef QLineF markers list(flMarkerPoint) markersStructVersion int name object name refCnt object references count snapFlags uint style SnapObjectsStyle tags QSet type object type vector flNode vectorPoint QPointF Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} angle fontlab.flGuideLine.angle double angleMode fontlab.flGuideLine.angleMode SnapAngleMode applyTransform fontlab.flGuideLine.applyTransform = applyTransform (...) void applyTransform(QTransform) center fontlab.flGuideLine.center flNode centerPoint fontlab.flGuideLine.centerPoint QPointF changed fontlab.flGuideLine.changed = changed (...) changed() checkInitHistoryState fontlab.flGuideLine.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flGuideLine.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flGuideLine.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flGuideLine.clearFlags = clearFlags (...) clearFlags() clone fontlab.flGuideLine.clone = clone (...) Clone the object cloneObject fontlab.flGuideLine.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); color fontlab.flGuideLine.color QColor constraints fontlab.flGuideLine.constraints QRectF counterPaper fontlab.flGuideLine.counterPaper = counterPaper (...) int counterPaper() createHistoryState fontlab.flGuideLine.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flGuideLine.createInstance = createInstance (...) flGuideLine createInstance() createObject fontlab.flGuideLine.createObject = createObject (...) flObject/Nothing createObject(int); createPowerGuides fontlab.flGuideLine.createPowerGuides = createPowerGuides (...) bool createPowerGuides(fgFont, flLayer, bool horizontal, bool vertical, bool diagonal[, bool use_glyph_guides=true[, bool use_font_guides = true]]) currentHistoryState fontlab.flGuideLine.currentHistoryState = currentHistoryState (...) currentHistoryIx() disconnectFromContour fontlab.flGuideLine.disconnectFromContour = disconnectFromContour (...) disconnectFromContour() distanceTo fontlab.flGuideLine.distanceTo = distanceTo (...) double distanceTo(QPointF, uint mode) expression fontlab.flGuideLine.expression QString extLinef fontlab.flGuideLine.extLinef QLineF extPosition fontlab.flGuideLine.extPosition double flag fontlab.flGuideLine.flag = flag (...) flag(uint f) flObjectFlags fontlab.flGuideLine.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getHashCode fontlab.flGuideLine.getHashCode = getHashCode (...) long getHashCode(QPointF, double angle) getProperties fontlab.flGuideLine.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flGuideLine.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flGuideLine.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flGuideLine.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flGuideLine.hasChanges bool hasColor fontlab.flGuideLine.hasColor bool hasExpression fontlab.flGuideLine.hasExpression bool hasHistoryState fontlab.flGuideLine.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flGuideLine.hasHistoryStates bool hasTags fontlab.flGuideLine.hasTags bool haveExtLine fontlab.flGuideLine.haveExtLine bool haveObject fontlab.flGuideLine.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flGuideLine.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flGuideLine.id object id independedAll fontlab.flGuideLine.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flGuideLine.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flGuideLine.instanceType = instanceType (...) int instanceType(); isAbsoluteMarkerPos fontlab.flGuideLine.isAbsoluteMarkerPos bool isChanged fontlab.flGuideLine.isChanged bool isEqual fontlab.flGuideLine.isEqual = isEqual (...) isEqual(flObject) isExluded fontlab.flGuideLine.isExluded bool isGuideLine fontlab.flGuideLine.isGuideLine = isGuideLine (...) bool isGuideLine(flObject) isHint fontlab.flGuideLine.isHint bool isHorizontal fontlab.flGuideLine.isHorizontal = isHorizontal (...) bool isHorizontal([double a=1]) isInUse fontlab.flGuideLine.isInUse bool isMeasurementLine fontlab.flGuideLine.isMeasurementLine bool isNull fontlab.flGuideLine.isNull bool isPassive fontlab.flGuideLine.isPassive bool isPresent fontlab.flGuideLine.isPresent bool isReleased fontlab.flGuideLine.isReleased bool isShortGuideline fontlab.flGuideLine.isShortGuideline bool isSnapLine fontlab.flGuideLine.isSnapLine = isSnapLine (...) bool isSnapLine(flObject) isValid fontlab.flGuideLine.isValid bool isVertical fontlab.flGuideLine.isVertical = isVertical (...) bool isVertical([double a=1]) isVerticalQuarter fontlab.flGuideLine.isVerticalQuarter bool isZone fontlab.flGuideLine.isZone bool length fontlab.flGuideLine.length double linef fontlab.flGuideLine.linef QLineF markers fontlab.flGuideLine.markers list(flMarkerPoint) markersStructVersion fontlab.flGuideLine.markersStructVersion int name fontlab.flGuideLine.name object name offsetTo fontlab.flGuideLine.offsetTo = offsetTo (...) QPointF offsetTo(QPointF, uint mode) refCnt fontlab.flGuideLine.refCnt object references count release fontlab.flGuideLine.release = release (...) release() remove fontlab.flGuideLine.remove = remove (...) remove([flObject]) removeChild fontlab.flGuideLine.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flGuideLine.removeProperty = removeProperty (...) removeProperty('key') reset fontlab.flGuideLine.reset = reset (...) reset() restoreHistoryState fontlab.flGuideLine.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flGuideLine.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flGuideLine.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flGuideLine.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flGuideLine.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSnapFlag fontlab.flGuideLine.setSnapFlag = setSnapFlag (...) setSnapFlag(uint role, uint snapFlags) setSnapFlagValue fontlab.flGuideLine.setSnapFlagValue = setSnapFlagValue (...) setSnapFlagValue(uint role, bool) snapFlag fontlab.flGuideLine.snapFlag = snapFlag (...) uint snapFlag(uint role) snapFlags fontlab.flGuideLine.snapFlags uint sortGuideLines fontlab.flGuideLine.sortGuideLines = sortGuideLines (...) list(flGuideLine) sortGuideLines(list(flGuideLine)[, bool ascending = true]) style fontlab.flGuideLine.style SnapObjectsStyle tag fontlab.flGuideLine.tag = tag (...) tag([string]) tags fontlab.flGuideLine.tags QSet type fontlab.flGuideLine.type object type update fontlab.flGuideLine.update = update (...) update() vector fontlab.flGuideLine.vector flNode vectorPoint fontlab.flGuideLine.vectorPoint QPointF","title":"flGuideLine"},{"location":"fontlab.flGuideLine.html#flguideline","text":"","title":"flGuideLine"},{"location":"fontlab.flGuideLine.html#angle","text":"fontlab.flGuideLine.angle double","title":"angle"},{"location":"fontlab.flGuideLine.html#anglemode","text":"fontlab.flGuideLine.angleMode SnapAngleMode","title":"angleMode"},{"location":"fontlab.flGuideLine.html#applytransform","text":"fontlab.flGuideLine.applyTransform = applyTransform (...) void applyTransform(QTransform)","title":"applyTransform"},{"location":"fontlab.flGuideLine.html#center","text":"fontlab.flGuideLine.center flNode","title":"center"},{"location":"fontlab.flGuideLine.html#centerpoint","text":"fontlab.flGuideLine.centerPoint QPointF","title":"centerPoint"},{"location":"fontlab.flGuideLine.html#changed","text":"fontlab.flGuideLine.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flGuideLine.html#checkinithistorystate","text":"fontlab.flGuideLine.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flGuideLine.html#clearabovehistory","text":"fontlab.flGuideLine.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flGuideLine.html#clearflag","text":"fontlab.flGuideLine.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flGuideLine.html#clearflags","text":"fontlab.flGuideLine.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flGuideLine.html#clone","text":"fontlab.flGuideLine.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flGuideLine.html#cloneobject","text":"fontlab.flGuideLine.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flGuideLine.html#color","text":"fontlab.flGuideLine.color QColor","title":"color"},{"location":"fontlab.flGuideLine.html#constraints","text":"fontlab.flGuideLine.constraints QRectF","title":"constraints"},{"location":"fontlab.flGuideLine.html#counterpaper","text":"fontlab.flGuideLine.counterPaper = counterPaper (...) int counterPaper()","title":"counterPaper"},{"location":"fontlab.flGuideLine.html#createhistorystate","text":"fontlab.flGuideLine.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flGuideLine.html#createinstance","text":"fontlab.flGuideLine.createInstance = createInstance (...) flGuideLine createInstance()","title":"createInstance"},{"location":"fontlab.flGuideLine.html#createobject","text":"fontlab.flGuideLine.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flGuideLine.html#createpowerguides","text":"fontlab.flGuideLine.createPowerGuides = createPowerGuides (...) bool createPowerGuides(fgFont, flLayer, bool horizontal, bool vertical, bool diagonal[, bool use_glyph_guides=true[, bool use_font_guides = true]])","title":"createPowerGuides"},{"location":"fontlab.flGuideLine.html#currenthistorystate","text":"fontlab.flGuideLine.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flGuideLine.html#disconnectfromcontour","text":"fontlab.flGuideLine.disconnectFromContour = disconnectFromContour (...) disconnectFromContour()","title":"disconnectFromContour"},{"location":"fontlab.flGuideLine.html#distanceto","text":"fontlab.flGuideLine.distanceTo = distanceTo (...) double distanceTo(QPointF, uint mode)","title":"distanceTo"},{"location":"fontlab.flGuideLine.html#expression","text":"fontlab.flGuideLine.expression QString","title":"expression"},{"location":"fontlab.flGuideLine.html#extlinef","text":"fontlab.flGuideLine.extLinef QLineF","title":"extLinef"},{"location":"fontlab.flGuideLine.html#extposition","text":"fontlab.flGuideLine.extPosition double","title":"extPosition"},{"location":"fontlab.flGuideLine.html#flag","text":"fontlab.flGuideLine.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flGuideLine.html#flobjectflags","text":"fontlab.flGuideLine.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flGuideLine.html#gethashcode","text":"fontlab.flGuideLine.getHashCode = getHashCode (...) long getHashCode(QPointF, double angle)","title":"getHashCode"},{"location":"fontlab.flGuideLine.html#getproperties","text":"fontlab.flGuideLine.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flGuideLine.html#getproperty","text":"fontlab.flGuideLine.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flGuideLine.html#getpropertyfloat","text":"fontlab.flGuideLine.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flGuideLine.html#getpropertyint","text":"fontlab.flGuideLine.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flGuideLine.html#haschanges","text":"fontlab.flGuideLine.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flGuideLine.html#hascolor","text":"fontlab.flGuideLine.hasColor bool","title":"hasColor"},{"location":"fontlab.flGuideLine.html#hasexpression","text":"fontlab.flGuideLine.hasExpression bool","title":"hasExpression"},{"location":"fontlab.flGuideLine.html#hashistorystate","text":"fontlab.flGuideLine.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flGuideLine.html#hashistorystates","text":"fontlab.flGuideLine.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flGuideLine.html#hastags","text":"fontlab.flGuideLine.hasTags bool","title":"hasTags"},{"location":"fontlab.flGuideLine.html#haveextline","text":"fontlab.flGuideLine.haveExtLine bool","title":"haveExtLine"},{"location":"fontlab.flGuideLine.html#haveobject","text":"fontlab.flGuideLine.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flGuideLine.html#historystates","text":"fontlab.flGuideLine.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flGuideLine.html#id","text":"fontlab.flGuideLine.id object id","title":"id"},{"location":"fontlab.flGuideLine.html#independedall","text":"fontlab.flGuideLine.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flGuideLine.html#initialhistorystate","text":"fontlab.flGuideLine.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flGuideLine.html#instancetype","text":"fontlab.flGuideLine.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flGuideLine.html#isabsolutemarkerpos","text":"fontlab.flGuideLine.isAbsoluteMarkerPos bool","title":"isAbsoluteMarkerPos"},{"location":"fontlab.flGuideLine.html#ischanged","text":"fontlab.flGuideLine.isChanged bool","title":"isChanged"},{"location":"fontlab.flGuideLine.html#isequal","text":"fontlab.flGuideLine.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flGuideLine.html#isexluded","text":"fontlab.flGuideLine.isExluded bool","title":"isExluded"},{"location":"fontlab.flGuideLine.html#isguideline","text":"fontlab.flGuideLine.isGuideLine = isGuideLine (...) bool isGuideLine(flObject)","title":"isGuideLine"},{"location":"fontlab.flGuideLine.html#ishint","text":"fontlab.flGuideLine.isHint bool","title":"isHint"},{"location":"fontlab.flGuideLine.html#ishorizontal","text":"fontlab.flGuideLine.isHorizontal = isHorizontal (...) bool isHorizontal([double a=1])","title":"isHorizontal"},{"location":"fontlab.flGuideLine.html#isinuse","text":"fontlab.flGuideLine.isInUse bool","title":"isInUse"},{"location":"fontlab.flGuideLine.html#ismeasurementline","text":"fontlab.flGuideLine.isMeasurementLine bool","title":"isMeasurementLine"},{"location":"fontlab.flGuideLine.html#isnull","text":"fontlab.flGuideLine.isNull bool","title":"isNull"},{"location":"fontlab.flGuideLine.html#ispassive","text":"fontlab.flGuideLine.isPassive bool","title":"isPassive"},{"location":"fontlab.flGuideLine.html#ispresent","text":"fontlab.flGuideLine.isPresent bool","title":"isPresent"},{"location":"fontlab.flGuideLine.html#isreleased","text":"fontlab.flGuideLine.isReleased bool","title":"isReleased"},{"location":"fontlab.flGuideLine.html#isshortguideline","text":"fontlab.flGuideLine.isShortGuideline bool","title":"isShortGuideline"},{"location":"fontlab.flGuideLine.html#issnapline","text":"fontlab.flGuideLine.isSnapLine = isSnapLine (...) bool isSnapLine(flObject)","title":"isSnapLine"},{"location":"fontlab.flGuideLine.html#isvalid","text":"fontlab.flGuideLine.isValid bool","title":"isValid"},{"location":"fontlab.flGuideLine.html#isvertical","text":"fontlab.flGuideLine.isVertical = isVertical (...) bool isVertical([double a=1])","title":"isVertical"},{"location":"fontlab.flGuideLine.html#isverticalquarter","text":"fontlab.flGuideLine.isVerticalQuarter bool","title":"isVerticalQuarter"},{"location":"fontlab.flGuideLine.html#iszone","text":"fontlab.flGuideLine.isZone bool","title":"isZone"},{"location":"fontlab.flGuideLine.html#length","text":"fontlab.flGuideLine.length double","title":"length"},{"location":"fontlab.flGuideLine.html#linef","text":"fontlab.flGuideLine.linef QLineF","title":"linef"},{"location":"fontlab.flGuideLine.html#markers","text":"fontlab.flGuideLine.markers list(flMarkerPoint)","title":"markers"},{"location":"fontlab.flGuideLine.html#markersstructversion","text":"fontlab.flGuideLine.markersStructVersion int","title":"markersStructVersion"},{"location":"fontlab.flGuideLine.html#name","text":"fontlab.flGuideLine.name object name","title":"name"},{"location":"fontlab.flGuideLine.html#offsetto","text":"fontlab.flGuideLine.offsetTo = offsetTo (...) QPointF offsetTo(QPointF, uint mode)","title":"offsetTo"},{"location":"fontlab.flGuideLine.html#refcnt","text":"fontlab.flGuideLine.refCnt object references count","title":"refCnt"},{"location":"fontlab.flGuideLine.html#release","text":"fontlab.flGuideLine.release = release (...) release()","title":"release"},{"location":"fontlab.flGuideLine.html#remove","text":"fontlab.flGuideLine.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flGuideLine.html#removechild","text":"fontlab.flGuideLine.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flGuideLine.html#removeproperty","text":"fontlab.flGuideLine.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flGuideLine.html#reset","text":"fontlab.flGuideLine.reset = reset (...) reset()","title":"reset"},{"location":"fontlab.flGuideLine.html#restorehistorystate","text":"fontlab.flGuideLine.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flGuideLine.html#setflag","text":"fontlab.flGuideLine.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flGuideLine.html#setproperty","text":"fontlab.flGuideLine.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flGuideLine.html#setpropertyfloat","text":"fontlab.flGuideLine.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flGuideLine.html#setpropertyint","text":"fontlab.flGuideLine.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flGuideLine.html#setsnapflag","text":"fontlab.flGuideLine.setSnapFlag = setSnapFlag (...) setSnapFlag(uint role, uint snapFlags)","title":"setSnapFlag"},{"location":"fontlab.flGuideLine.html#setsnapflagvalue","text":"fontlab.flGuideLine.setSnapFlagValue = setSnapFlagValue (...) setSnapFlagValue(uint role, bool)","title":"setSnapFlagValue"},{"location":"fontlab.flGuideLine.html#snapflag","text":"fontlab.flGuideLine.snapFlag = snapFlag (...) uint snapFlag(uint role)","title":"snapFlag"},{"location":"fontlab.flGuideLine.html#snapflags","text":"fontlab.flGuideLine.snapFlags uint","title":"snapFlags"},{"location":"fontlab.flGuideLine.html#sortguidelines","text":"fontlab.flGuideLine.sortGuideLines = sortGuideLines (...) list(flGuideLine) sortGuideLines(list(flGuideLine)[, bool ascending = true])","title":"sortGuideLines"},{"location":"fontlab.flGuideLine.html#style","text":"fontlab.flGuideLine.style SnapObjectsStyle","title":"style"},{"location":"fontlab.flGuideLine.html#tag","text":"fontlab.flGuideLine.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flGuideLine.html#tags","text":"fontlab.flGuideLine.tags QSet","title":"tags"},{"location":"fontlab.flGuideLine.html#type","text":"fontlab.flGuideLine.type object type","title":"type"},{"location":"fontlab.flGuideLine.html#update","text":"fontlab.flGuideLine.update = update (...) update()","title":"update"},{"location":"fontlab.flGuideLine.html#vector","text":"fontlab.flGuideLine.vector flNode","title":"vector"},{"location":"fontlab.flGuideLine.html#vectorpoint","text":"fontlab.flGuideLine.vectorPoint QPointF","title":"vectorPoint"},{"location":"fontlab.flHintingParameters.html","text":"flHintingParameters fontlab.flHintingParameters = class flHintingParameters ( object ) flHintingParameters representation Constructors: flHintingParameters() - default Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value init (...) init () Descriptors blueFuzz int blueScale double blueShift int codePPM int dropoutPPM int flex bool fontDirectionHint int forceBold bool forceBoldTreshold double lowestRecPPEM int maxFunctionDefs int maxInstructionDefs int maxStackElements int maxStorage int maxTwilightPoints int maxZones int stemSnapLimit int zonePPM int Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T blueFuzz fontlab.flHintingParameters.blueFuzz int blueScale fontlab.flHintingParameters.blueScale double blueShift fontlab.flHintingParameters.blueShift int codePPM fontlab.flHintingParameters.codePPM int dropoutPPM fontlab.flHintingParameters.dropoutPPM int flex fontlab.flHintingParameters.flex bool fontDirectionHint fontlab.flHintingParameters.fontDirectionHint int forceBold fontlab.flHintingParameters.forceBold bool forceBoldTreshold fontlab.flHintingParameters.forceBoldTreshold double init fontlab.flHintingParameters.init = init (...) init() lowestRecPPEM fontlab.flHintingParameters.lowestRecPPEM int maxFunctionDefs fontlab.flHintingParameters.maxFunctionDefs int maxInstructionDefs fontlab.flHintingParameters.maxInstructionDefs int maxStackElements fontlab.flHintingParameters.maxStackElements int maxStorage fontlab.flHintingParameters.maxStorage int maxTwilightPoints fontlab.flHintingParameters.maxTwilightPoints int maxZones fontlab.flHintingParameters.maxZones int stemSnapLimit fontlab.flHintingParameters.stemSnapLimit int zonePPM fontlab.flHintingParameters.zonePPM int","title":"flHintingParameters"},{"location":"fontlab.flHintingParameters.html#flhintingparameters","text":"","title":"flHintingParameters"},{"location":"fontlab.flHintingParameters.html#bluefuzz","text":"fontlab.flHintingParameters.blueFuzz int","title":"blueFuzz"},{"location":"fontlab.flHintingParameters.html#bluescale","text":"fontlab.flHintingParameters.blueScale double","title":"blueScale"},{"location":"fontlab.flHintingParameters.html#blueshift","text":"fontlab.flHintingParameters.blueShift int","title":"blueShift"},{"location":"fontlab.flHintingParameters.html#codeppm","text":"fontlab.flHintingParameters.codePPM int","title":"codePPM"},{"location":"fontlab.flHintingParameters.html#dropoutppm","text":"fontlab.flHintingParameters.dropoutPPM int","title":"dropoutPPM"},{"location":"fontlab.flHintingParameters.html#flex","text":"fontlab.flHintingParameters.flex bool","title":"flex"},{"location":"fontlab.flHintingParameters.html#fontdirectionhint","text":"fontlab.flHintingParameters.fontDirectionHint int","title":"fontDirectionHint"},{"location":"fontlab.flHintingParameters.html#forcebold","text":"fontlab.flHintingParameters.forceBold bool","title":"forceBold"},{"location":"fontlab.flHintingParameters.html#forceboldtreshold","text":"fontlab.flHintingParameters.forceBoldTreshold double","title":"forceBoldTreshold"},{"location":"fontlab.flHintingParameters.html#init","text":"fontlab.flHintingParameters.init = init (...) init()","title":"init"},{"location":"fontlab.flHintingParameters.html#lowestrecppem","text":"fontlab.flHintingParameters.lowestRecPPEM int","title":"lowestRecPPEM"},{"location":"fontlab.flHintingParameters.html#maxfunctiondefs","text":"fontlab.flHintingParameters.maxFunctionDefs int","title":"maxFunctionDefs"},{"location":"fontlab.flHintingParameters.html#maxinstructiondefs","text":"fontlab.flHintingParameters.maxInstructionDefs int","title":"maxInstructionDefs"},{"location":"fontlab.flHintingParameters.html#maxstackelements","text":"fontlab.flHintingParameters.maxStackElements int","title":"maxStackElements"},{"location":"fontlab.flHintingParameters.html#maxstorage","text":"fontlab.flHintingParameters.maxStorage int","title":"maxStorage"},{"location":"fontlab.flHintingParameters.html#maxtwilightpoints","text":"fontlab.flHintingParameters.maxTwilightPoints int","title":"maxTwilightPoints"},{"location":"fontlab.flHintingParameters.html#maxzones","text":"fontlab.flHintingParameters.maxZones int","title":"maxZones"},{"location":"fontlab.flHintingParameters.html#stemsnaplimit","text":"fontlab.flHintingParameters.stemSnapLimit int","title":"stemSnapLimit"},{"location":"fontlab.flHintingParameters.html#zoneppm","text":"fontlab.flHintingParameters.zonePPM int","title":"zonePPM"},{"location":"fontlab.flInstance.html","text":"flInstance fontlab.flInstance = class flInstance ( object ) flInstance representation Constructors: flInstance() flInstance(string name, string tsn, flLocation location) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value autoSGN (...) string autoSGN (const string ) autoSLV (...) int autoSLV () autoTSN (...) string autoTSN () setSLV (...) setSLV (bool bold, bool italic) Descriptors bold bool exportable bool italic bool location flLocation name string sgn string slv int tsn string weight string weightValue double width string Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T autoSGN fontlab.flInstance.autoSGN = autoSGN (...) string autoSGN(const string ) autoSLV fontlab.flInstance.autoSLV = autoSLV (...) int autoSLV() autoTSN fontlab.flInstance.autoTSN = autoTSN (...) string autoTSN() bold fontlab.flInstance.bold bool exportable fontlab.flInstance.exportable bool italic fontlab.flInstance.italic bool location fontlab.flInstance.location flLocation name fontlab.flInstance.name string setSLV fontlab.flInstance.setSLV = setSLV (...) setSLV(bool bold, bool italic) sgn fontlab.flInstance.sgn string slv fontlab.flInstance.slv int tsn fontlab.flInstance.tsn string weight fontlab.flInstance.weight string weightValue fontlab.flInstance.weightValue double width fontlab.flInstance.width string","title":"flInstance"},{"location":"fontlab.flInstance.html#flinstance","text":"","title":"flInstance"},{"location":"fontlab.flInstance.html#autosgn","text":"fontlab.flInstance.autoSGN = autoSGN (...) string autoSGN(const string )","title":"autoSGN"},{"location":"fontlab.flInstance.html#autoslv","text":"fontlab.flInstance.autoSLV = autoSLV (...) int autoSLV()","title":"autoSLV"},{"location":"fontlab.flInstance.html#autotsn","text":"fontlab.flInstance.autoTSN = autoTSN (...) string autoTSN()","title":"autoTSN"},{"location":"fontlab.flInstance.html#bold","text":"fontlab.flInstance.bold bool","title":"bold"},{"location":"fontlab.flInstance.html#exportable","text":"fontlab.flInstance.exportable bool","title":"exportable"},{"location":"fontlab.flInstance.html#italic","text":"fontlab.flInstance.italic bool","title":"italic"},{"location":"fontlab.flInstance.html#location","text":"fontlab.flInstance.location flLocation","title":"location"},{"location":"fontlab.flInstance.html#name","text":"fontlab.flInstance.name string","title":"name"},{"location":"fontlab.flInstance.html#setslv","text":"fontlab.flInstance.setSLV = setSLV (...) setSLV(bool bold, bool italic)","title":"setSLV"},{"location":"fontlab.flInstance.html#sgn","text":"fontlab.flInstance.sgn string","title":"sgn"},{"location":"fontlab.flInstance.html#slv","text":"fontlab.flInstance.slv int","title":"slv"},{"location":"fontlab.flInstance.html#tsn","text":"fontlab.flInstance.tsn string","title":"tsn"},{"location":"fontlab.flInstance.html#weight","text":"fontlab.flInstance.weight string","title":"weight"},{"location":"fontlab.flInstance.html#weightvalue","text":"fontlab.flInstance.weightValue double","title":"weightValue"},{"location":"fontlab.flInstance.html#width","text":"fontlab.flInstance.width string","title":"width"},{"location":"fontlab.flItems.html","text":"flItems fontlab.flItems = class flItems ( object ) flItems representation Constructors: flItems() Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value shapeBuilders (...) list(flObject) shapeBuilders () Static methods appendRecentFile (...) appendRecentFile (QString, QString file_name) buildRecentList (...) QStringList/Nothing buildRecentList (QString) clearRecentFiles (...) clearRecentFiles (QString ) createObject (...) flObject createObject (int type, flObject key) getCursor (...) QCursor getCursor (CursorId) getCursorId (...) CursorId getCursorId (QString, int hot_x, int hot_y) guidelinesEditingEnabled (...) bool guidelinesEditingEnabled () init (...) init () instance (...) flItems instance () notifyActivateGlyph (...) notifyActivateGlyph (flGlyphInfo) notifyAnchorsChanged (...) notifyAnchorsChanged () notifyApplyTranformFrame (...) notifyApplyTranformFrame () notifyAuditHovered (...) notifyAuditHovered (uint id) notifyAutoShapseChanges (...) notifyAutoShapseChanges (flLayer) notifyAvailableToSelectNodes (...) notifyAvailableToSelectNodes ( list(list(flNodeInfo)) ) notifyBrushModeSelected (...) notifyBrushModeSelected (bool smart) notifyBrushSelected (...) notifyBrushSelected (PaintBrush) notifyBrushSet (...) notifyBrushSet () notifyCancelTranformFrame (...) notifyCancelTranformFrame () notifyCanvasAttached (...) notifyCanvasAttached (flCanvas) notifyCanvasEnterFocus (...) notifyCanvasEnterFocus (flCanvas) notifyCanvasLeaveFocus (...) notifyCanvasLeaveFocus (flCanvas) notifyCanvasRemoved (...) notifyCanvasRemoved (flCanvas) notifyChangesApplied (...) notifyChangesApplied ([QString title, flObject object / list(flObject)[, bool recursive=false]]) notifyClipboardChanged (...) notifyClipboardChanged () notifyColorSet (...) notifyColorSet (QColor, bool b) notifyCommandSelected (...) notifyCommandSelected () notifyCurrentPaperChanged (...) notifyCurrentPaperChanged (flPaper) notifyDropDone (...) notifyDropDone (flCanvas & canvas) notifyEditActionFinished (...) notifyEditActionFinished () notifyEditActionStarted (...) notifyEditActionStarted () notifyEditModeChanged (...) notifyEditModeChanged (EditMode mode) notifyEditingChanged (...) notifyEditingChanged (flAbstractEditor) notifyEditingFinished (...) notifyEditingFinished () notifyFeaturesChanged (...) notifyFeaturesChanged (uint package_id, bool binary) notifyFontPanelActivated (...) notifyFontPanelActivated (bool b) notifyFontSelected (...) notifyFontSelected (uint id); notifyFrameSelected (...) notifyFrameSelected (list(flNodeInfo)) notifyGalleryChanged (...) notifyGalleryChanged (flObject) notifyGlyphActivated (...) notifyGlyphActivated (flGlyphInfo) notifyGlyphDeactivated (...) notifyGlyphDeactivated () notifyGlyphDoubleClick (...) notifyGlyphDoubleClick (flGlyphInfo) notifyGlyphIdSelected (...) notifyGlyphIdSelected (uint packageId, uint glyphId, bool replace) notifyGlyphMaximized (...) notifyGlyphMaximized (flGlyphInfo) notifyGlyphPinPointChanged (...) notifyGlyphPinPointChanged ([flPinPoint pin_point = flnull[, flGlyphInfo glyph_info = flnull]]) notifyGlyphPinPointCreated (...) notifyGlyphPinPointCreated (flGlyphInfo) notifyGlyphUpdated (...) notifyGlyphUpdated (uint packageId, uint glyphId) notifyGlyphWindowInactive (...) notifyGlyphWindowInactive () notifyGlyphsUpdated (...) notifyGlyphsUpdated (uint packageId, QSet glyphIds) notifyGraphEdgeSelectionChanged (...) notifyGraphEdgeSelectionChanged (flObject) notifyGuidelinesChanged (...) notifyGuidelinesChanged (flCanvas) notifyGuidelinesSelected (...) notifyGuidelinesSelected (list(flGuideLine)) notifyHidePanels (...) notifyHidePanels () notifyHistoryChanged (...) notifyHistoryChanged () notifyKeyHash (...) notifyKeyHash () notifyKeyRepeat (...) notifyKeyRepeat (int key) notifyKeySlash (...) notifyKeySlash () notifyLayerActivated (...) notifyLayerActivated (flLayer) notifyModelChanged (...) notifyModelChanged () notifyNodeChanged (...) notifyNodeChanged (flNodeInfo) notifyNodesSelected (...) notifyNodesSelected (list(flNodeInfo)) notifyPackageAdded (...) notifyPackageAdded (flPackage) notifyPackageClosed (...) notifyPackageClosed (flPackage) notifyPackageContentUpdated (...) notifyPackageContentUpdated (uint id) notifyPackageReaded (...) notifyPackageReaded (flPackage) notifyPackageRemoved (...) notifyPackageRemoved (flPackage) notifyPackageUpdated (...) notifyPackageUpdated (flPackage | uint id) notifyPackagesRemoved (...) notifyPackagesRemoved (list(flObject)) notifyPackagesUpdated (...) notifyPackagesUpdated () notifyPinPointChanged (...) notifyPinPointChanged ([flPinPoint pin_point = flnull[, flShapeInfo shape_info = flnull]]) notifyPinPointCreated (...) notifyPinPointCreated (flShapeInfo) notifyPinPointSelectionChanged (...) notifyPinPointSelectionChanged () notifyPinSelected (...) notifyPinSelected (uint id) notifyPreferencesChanged (...) notifyPreferencesChanged () notifyProjectClosed (...) notifyProjectClosed () notifyProjectReaded (...) notifyProjectReaded (QString file_name) notifyProjectSaved (...) notifyProjectSaved (QString file_name) notifyPropertiesChanged (...) notifyPropertiesChanged (flObject) notifyRenderingBegin (...) notifyRenderingBegin (QString info) notifyRenderingFinished (...) notifyRenderingFinished (bool success) notifyReplaceGlyphsByFgId (...) notifyReplaceGlyphsByFgId (list(unsigned long), int replace_count) notifyRequestChangeCurrentClipboard (...) notifyRequestChangeCurrentClipboard (QString xml) notifyRequestNewProject (...) notifyRequestNewProject () notifyRequestOpenProject (...) notifyRequestOpenProject (QString file_name) notifyRequestPasteAction (...) notifyRequestPasteAction () notifyRequestShowWelcome (...) notifyRequestShowWelcome () notifyRequestShowWorkspace (...) notifyRequestShowWorkspace () notifySCVItemsChanged (...) notifySCVItemsChanged () notifyScrollToGlyph (...) notifyScrollToGlyph (flGlyphInfo) notifySelectionChanged (...) notifySelectionChanged () notifyShapeActivated (...) notifyShapeActivated (flShapeInfo) notifyShapeDeactivated (...) notifyShapeDeactivated () notifyShowPanels (...) notifyShowPanels () notifySnapLineChanged (...) notifySnapLineChanged (flGuideLine) notifySnapLinesChanged (...) notifySnapLinesChanged (list(flGuideLine)) notifyStaplerPreviewEnabled (...) notifyStaplerPreviewEnabled (bool enbl) notifyStickerCreated (...) notifyStickerCreated () notifyStopButtonClicked (...) notifyStopButtonClicked () notifyTextBlockAdded (...) notifyTextBlockAdded (flTextBlock) notifyTextBlockItemActivated (...) notifyTextBlockItemActivated (flTextBlockItem[, bool check_tools = true]) notifyTextBlockItemChanged (...) notifyTextBlockItemChanged (flTextBlockItem) notifyTextBlockItemDeactivated (...) notifyTextBlockItemDeactivated (flTextBlockItem) notifyTextBlockItemMaximized (...) notifyTextBlockItemMaximized (flTextBlockItem) notifyTextBlockItemNormalized (...) notifyTextBlockItemNormalized (flTextBlockItem) notifyTextBlockItemsSelectionChanged (...) notifyTextBlockItemsSelectionChanged (flCanvas) notifyTextBlockRemoved (...) notifyTextBlockRemoved (flTextBlock) notifyToolChanged (...) notifyToolChanged (flBasicTool & tool) notifyTransformDataChanged (...) notifyTransformDataChanged (TransformFrame) notifyTransformFrameChanged (...) notifyTransformFrameChanged (flObject) notifyTransformFrameFinished (...) notifyTransformFrameFinished (flObject) notifyTransformFrameStarted (...) notifyTransformFrameStarted (flObject) notifyTransformStarted (...) notifyTransformStarted () notifyUpdateHistory (...) notifyUpdateHistory () notifyUpdateStaplers (...) notifyUpdateStaplers () notifyViewportChanged (...) notifyViewportChanged (QWidget* old_viewport, QWidget* new_viewport) notifyWorkspaceClosed (...) notifyWorkspaceClosed (flWorkspace) notifyWorkspaceHasChanges (...) notifyWorkspaceHasChanges (bool c) notifyWorkspaceInitialized (...) notifyWorkspaceInitialized (flWorkspace) notifyZoomChanged (...) notifyZoomChanged (flCanvas & canvas) requestActivateNodesTool (...) requestActivateNodesTool () requestActivateShapeTool (...) requestActivateShapeTool () requestActivateTransformTool (...) requestActivateTransformTool () requestCheckHistoryInitIndex (...) requestCheckHistoryInitIndex (flGlyphInfo) requestContent (...) requestContent (fgSymbolList characters, int cursorLocation requestFontInfoDlg (...) requestFontInfoDlg () requestGlyphActivate (...) requestGlyphActivate (uint pid, uint gid) requestGlyphDeactivate (...) requestGlyphDeactivate () requestGlyphReactivated (...) requestGlyphReactivated () requestLoadingFont (...) requestLoadingFont (QString font_source) requestPackageAcceptFonts (...) requestPackageAcceptFonts (flPackage) requestPackagePostProcess (...) requestPackagePostProcess (flPackage, QString encoding) requestPermissionsForDragGuidelineByNode (...) bool requestPermissionsForDragGuidelineByNode (QPointF canvas_pos, uint modifiers) requestProgressMessage (...) requestProgressMessage (QString message) requestProgressRange (...) requestProgressRange (int v) requestProgressShow (...) requestProgressShow (bool b) requestProgressValue (...) requestProgressValue (int v) requestSaveBar (...) requestSaveBar (bool b) requestSaveBarValue (...) requestSaveBarValue (int v) requestSubContent (...) requestSubContent (fgSymbolList characters, int cursorLocation requestUpdateActiveShape (...) requestUpdateActiveShape (flShapeInfo) resetToolCursor (...) resetToolCursor () setCursor (...) setCursor (CursorId cursor_id); setEllipseCurvature (...) setEllipseCurvature (double d) setEllipseData (...) setEllipseData (QPointF p0, QPointF p1) setGuidelinesEditingEnabled (...) setGuidelinesEditingEnabled (bool b) setMeterData (...) setMeterData (QPointF p0, QPointF p1) setParameterName (...) setParameterName (flObject, QString) setTransformation (...) setTransformation (int code, QPointF value) strToType (...) int strToType (QString) typeToStr (...) QString typeToStr (int type) Descriptors qobject QObject workspace flObject Attributes ItemStates = {'AutoUpdate': 2097152, 'Custom': 1048576, 'Hovered': 131072, 'Locked': 2, 'Normal': 0, 'Preview': 524288, 'Selected': 65536, 'Small': 262144, 'Visible': 1} ItemType = {} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T bBrush = 9 bCount = 14 bEllipse = 6 bGlyph = 3 bGuideline = 2 bMeter = 5 bMetrics = 0 bPen = 7 bPin = 4 bSingleNode = 1 bText = 10 bTransform = 8 transformRotate = 2 transformScale = 1 transformShift = 0 transformSlant = 3 appendRecentFile fontlab.flItems.appendRecentFile = appendRecentFile (...) appendRecentFile(QString, QString file_name) bBrush fontlab.flItems.bBrush = 9 bCount fontlab.flItems.bCount = 14 bEllipse fontlab.flItems.bEllipse = 6 bGlyph fontlab.flItems.bGlyph = 3 bGuideline fontlab.flItems.bGuideline = 2 bMeter fontlab.flItems.bMeter = 5 bMetrics fontlab.flItems.bMetrics = 0 bPen fontlab.flItems.bPen = 7 bPin fontlab.flItems.bPin = 4 bSingleNode fontlab.flItems.bSingleNode = 1 bText fontlab.flItems.bText = 10 bTransform fontlab.flItems.bTransform = 8 buildRecentList fontlab.flItems.buildRecentList = buildRecentList (...) QStringList/Nothing buildRecentList(QString) clearRecentFiles fontlab.flItems.clearRecentFiles = clearRecentFiles (...) clearRecentFiles(QString ) createObject fontlab.flItems.createObject = createObject (...) flObject createObject(int type, flObject key) getCursor fontlab.flItems.getCursor = getCursor (...) QCursor getCursor(CursorId) getCursorId fontlab.flItems.getCursorId = getCursorId (...) CursorId getCursorId(QString, int hot_x, int hot_y) guidelinesEditingEnabled fontlab.flItems.guidelinesEditingEnabled = guidelinesEditingEnabled (...) bool guidelinesEditingEnabled() init fontlab.flItems.init = init (...) init() instance fontlab.flItems.instance = instance (...) flItems instance() ItemStates fontlab.flItems.ItemStates = {'AutoUpdate': 2097152, 'Custom': 1048576, 'Hovered': 131072, 'Locked': 2, 'Normal': 0, 'Preview': 524288, 'Selected': 65536, 'Small': 262144, 'Visible': 1} ItemType fontlab.flItems.ItemType = {} notifyActivateGlyph fontlab.flItems.notifyActivateGlyph = notifyActivateGlyph (...) notifyActivateGlyph(flGlyphInfo) notifyAnchorsChanged fontlab.flItems.notifyAnchorsChanged = notifyAnchorsChanged (...) notifyAnchorsChanged() notifyApplyTranformFrame fontlab.flItems.notifyApplyTranformFrame = notifyApplyTranformFrame (...) notifyApplyTranformFrame() notifyAuditHovered fontlab.flItems.notifyAuditHovered = notifyAuditHovered (...) notifyAuditHovered(uint id) notifyAutoShapseChanges fontlab.flItems.notifyAutoShapseChanges = notifyAutoShapseChanges (...) notifyAutoShapseChanges(flLayer) notifyAvailableToSelectNodes fontlab.flItems.notifyAvailableToSelectNodes = notifyAvailableToSelectNodes (...) notifyAvailableToSelectNodes( list(list(flNodeInfo)) ) notifyBrushModeSelected fontlab.flItems.notifyBrushModeSelected = notifyBrushModeSelected (...) notifyBrushModeSelected(bool smart) notifyBrushSelected fontlab.flItems.notifyBrushSelected = notifyBrushSelected (...) notifyBrushSelected(PaintBrush) notifyBrushSet fontlab.flItems.notifyBrushSet = notifyBrushSet (...) notifyBrushSet() notifyCancelTranformFrame fontlab.flItems.notifyCancelTranformFrame = notifyCancelTranformFrame (...) notifyCancelTranformFrame() notifyCanvasAttached fontlab.flItems.notifyCanvasAttached = notifyCanvasAttached (...) notifyCanvasAttached(flCanvas) notifyCanvasEnterFocus fontlab.flItems.notifyCanvasEnterFocus = notifyCanvasEnterFocus (...) notifyCanvasEnterFocus(flCanvas) notifyCanvasLeaveFocus fontlab.flItems.notifyCanvasLeaveFocus = notifyCanvasLeaveFocus (...) notifyCanvasLeaveFocus(flCanvas) notifyCanvasRemoved fontlab.flItems.notifyCanvasRemoved = notifyCanvasRemoved (...) notifyCanvasRemoved(flCanvas) notifyChangesApplied fontlab.flItems.notifyChangesApplied = notifyChangesApplied (...) notifyChangesApplied([QString title, flObject object / list(flObject)[, bool recursive=false]]) notifyClipboardChanged fontlab.flItems.notifyClipboardChanged = notifyClipboardChanged (...) notifyClipboardChanged() notifyColorSet fontlab.flItems.notifyColorSet = notifyColorSet (...) notifyColorSet(QColor, bool b) notifyCommandSelected fontlab.flItems.notifyCommandSelected = notifyCommandSelected (...) notifyCommandSelected() notifyCurrentPaperChanged fontlab.flItems.notifyCurrentPaperChanged = notifyCurrentPaperChanged (...) notifyCurrentPaperChanged(flPaper) notifyDropDone fontlab.flItems.notifyDropDone = notifyDropDone (...) notifyDropDone(flCanvas & canvas) notifyEditActionFinished fontlab.flItems.notifyEditActionFinished = notifyEditActionFinished (...) notifyEditActionFinished() notifyEditActionStarted fontlab.flItems.notifyEditActionStarted = notifyEditActionStarted (...) notifyEditActionStarted() notifyEditingChanged fontlab.flItems.notifyEditingChanged = notifyEditingChanged (...) notifyEditingChanged(flAbstractEditor) notifyEditingFinished fontlab.flItems.notifyEditingFinished = notifyEditingFinished (...) notifyEditingFinished() notifyEditModeChanged fontlab.flItems.notifyEditModeChanged = notifyEditModeChanged (...) notifyEditModeChanged(EditMode mode) notifyFeaturesChanged fontlab.flItems.notifyFeaturesChanged = notifyFeaturesChanged (...) notifyFeaturesChanged(uint package_id, bool binary) notifyFontPanelActivated fontlab.flItems.notifyFontPanelActivated = notifyFontPanelActivated (...) notifyFontPanelActivated(bool b) notifyFontSelected fontlab.flItems.notifyFontSelected = notifyFontSelected (...) notifyFontSelected(uint id); notifyFrameSelected fontlab.flItems.notifyFrameSelected = notifyFrameSelected (...) notifyFrameSelected(list(flNodeInfo)) notifyGalleryChanged fontlab.flItems.notifyGalleryChanged = notifyGalleryChanged (...) notifyGalleryChanged(flObject) notifyGlyphActivated fontlab.flItems.notifyGlyphActivated = notifyGlyphActivated (...) notifyGlyphActivated(flGlyphInfo) notifyGlyphDeactivated fontlab.flItems.notifyGlyphDeactivated = notifyGlyphDeactivated (...) notifyGlyphDeactivated() notifyGlyphDoubleClick fontlab.flItems.notifyGlyphDoubleClick = notifyGlyphDoubleClick (...) notifyGlyphDoubleClick(flGlyphInfo) notifyGlyphIdSelected fontlab.flItems.notifyGlyphIdSelected = notifyGlyphIdSelected (...) notifyGlyphIdSelected(uint packageId, uint glyphId, bool replace) notifyGlyphMaximized fontlab.flItems.notifyGlyphMaximized = notifyGlyphMaximized (...) notifyGlyphMaximized(flGlyphInfo) notifyGlyphPinPointChanged fontlab.flItems.notifyGlyphPinPointChanged = notifyGlyphPinPointChanged (...) notifyGlyphPinPointChanged([flPinPoint pin_point = flnull[, flGlyphInfo glyph_info = flnull]]) notifyGlyphPinPointCreated fontlab.flItems.notifyGlyphPinPointCreated = notifyGlyphPinPointCreated (...) notifyGlyphPinPointCreated(flGlyphInfo) notifyGlyphsUpdated fontlab.flItems.notifyGlyphsUpdated = notifyGlyphsUpdated (...) notifyGlyphsUpdated(uint packageId, QSet glyphIds) notifyGlyphUpdated fontlab.flItems.notifyGlyphUpdated = notifyGlyphUpdated (...) notifyGlyphUpdated(uint packageId, uint glyphId) notifyGlyphWindowInactive fontlab.flItems.notifyGlyphWindowInactive = notifyGlyphWindowInactive (...) notifyGlyphWindowInactive() notifyGraphEdgeSelectionChanged fontlab.flItems.notifyGraphEdgeSelectionChanged = notifyGraphEdgeSelectionChanged (...) notifyGraphEdgeSelectionChanged(flObject) notifyGuidelinesChanged fontlab.flItems.notifyGuidelinesChanged = notifyGuidelinesChanged (...) notifyGuidelinesChanged(flCanvas) notifyGuidelinesSelected fontlab.flItems.notifyGuidelinesSelected = notifyGuidelinesSelected (...) notifyGuidelinesSelected(list(flGuideLine)) notifyHidePanels fontlab.flItems.notifyHidePanels = notifyHidePanels (...) notifyHidePanels() notifyHistoryChanged fontlab.flItems.notifyHistoryChanged = notifyHistoryChanged (...) notifyHistoryChanged() notifyKeyHash fontlab.flItems.notifyKeyHash = notifyKeyHash (...) notifyKeyHash() notifyKeyRepeat fontlab.flItems.notifyKeyRepeat = notifyKeyRepeat (...) notifyKeyRepeat(int key) notifyKeySlash fontlab.flItems.notifyKeySlash = notifyKeySlash (...) notifyKeySlash() notifyLayerActivated fontlab.flItems.notifyLayerActivated = notifyLayerActivated (...) notifyLayerActivated(flLayer) notifyModelChanged fontlab.flItems.notifyModelChanged = notifyModelChanged (...) notifyModelChanged() notifyNodeChanged fontlab.flItems.notifyNodeChanged = notifyNodeChanged (...) notifyNodeChanged(flNodeInfo) notifyNodesSelected fontlab.flItems.notifyNodesSelected = notifyNodesSelected (...) notifyNodesSelected(list(flNodeInfo)) notifyPackageAdded fontlab.flItems.notifyPackageAdded = notifyPackageAdded (...) notifyPackageAdded(flPackage) notifyPackageClosed fontlab.flItems.notifyPackageClosed = notifyPackageClosed (...) notifyPackageClosed(flPackage) notifyPackageContentUpdated fontlab.flItems.notifyPackageContentUpdated = notifyPackageContentUpdated (...) notifyPackageContentUpdated(uint id) notifyPackageReaded fontlab.flItems.notifyPackageReaded = notifyPackageReaded (...) notifyPackageReaded(flPackage) notifyPackageRemoved fontlab.flItems.notifyPackageRemoved = notifyPackageRemoved (...) notifyPackageRemoved(flPackage) notifyPackagesRemoved fontlab.flItems.notifyPackagesRemoved = notifyPackagesRemoved (...) notifyPackagesRemoved(list(flObject)) notifyPackagesUpdated fontlab.flItems.notifyPackagesUpdated = notifyPackagesUpdated (...) notifyPackagesUpdated() notifyPackageUpdated fontlab.flItems.notifyPackageUpdated = notifyPackageUpdated (...) notifyPackageUpdated(flPackage | uint id) notifyPinPointChanged fontlab.flItems.notifyPinPointChanged = notifyPinPointChanged (...) notifyPinPointChanged([flPinPoint pin_point = flnull[, flShapeInfo shape_info = flnull]]) notifyPinPointCreated fontlab.flItems.notifyPinPointCreated = notifyPinPointCreated (...) notifyPinPointCreated(flShapeInfo) notifyPinPointSelectionChanged fontlab.flItems.notifyPinPointSelectionChanged = notifyPinPointSelectionChanged (...) notifyPinPointSelectionChanged() notifyPinSelected fontlab.flItems.notifyPinSelected = notifyPinSelected (...) notifyPinSelected(uint id) notifyPreferencesChanged fontlab.flItems.notifyPreferencesChanged = notifyPreferencesChanged (...) notifyPreferencesChanged() notifyProjectClosed fontlab.flItems.notifyProjectClosed = notifyProjectClosed (...) notifyProjectClosed() notifyProjectReaded fontlab.flItems.notifyProjectReaded = notifyProjectReaded (...) notifyProjectReaded(QString file_name) notifyProjectSaved fontlab.flItems.notifyProjectSaved = notifyProjectSaved (...) notifyProjectSaved(QString file_name) notifyPropertiesChanged fontlab.flItems.notifyPropertiesChanged = notifyPropertiesChanged (...) notifyPropertiesChanged(flObject) notifyRenderingBegin fontlab.flItems.notifyRenderingBegin = notifyRenderingBegin (...) notifyRenderingBegin(QString info) notifyRenderingFinished fontlab.flItems.notifyRenderingFinished = notifyRenderingFinished (...) notifyRenderingFinished(bool success) notifyReplaceGlyphsByFgId fontlab.flItems.notifyReplaceGlyphsByFgId = notifyReplaceGlyphsByFgId (...) notifyReplaceGlyphsByFgId(list(unsigned long), int replace_count) notifyRequestChangeCurrentClipboard fontlab.flItems.notifyRequestChangeCurrentClipboard = notifyRequestChangeCurrentClipboard (...) notifyRequestChangeCurrentClipboard(QString xml) notifyRequestNewProject fontlab.flItems.notifyRequestNewProject = notifyRequestNewProject (...) notifyRequestNewProject() notifyRequestOpenProject fontlab.flItems.notifyRequestOpenProject = notifyRequestOpenProject (...) notifyRequestOpenProject(QString file_name) notifyRequestPasteAction fontlab.flItems.notifyRequestPasteAction = notifyRequestPasteAction (...) notifyRequestPasteAction() notifyRequestShowWelcome fontlab.flItems.notifyRequestShowWelcome = notifyRequestShowWelcome (...) notifyRequestShowWelcome() notifyRequestShowWorkspace fontlab.flItems.notifyRequestShowWorkspace = notifyRequestShowWorkspace (...) notifyRequestShowWorkspace() notifyScrollToGlyph fontlab.flItems.notifyScrollToGlyph = notifyScrollToGlyph (...) notifyScrollToGlyph(flGlyphInfo) notifySCVItemsChanged fontlab.flItems.notifySCVItemsChanged = notifySCVItemsChanged (...) notifySCVItemsChanged() notifySelectionChanged fontlab.flItems.notifySelectionChanged = notifySelectionChanged (...) notifySelectionChanged() notifyShapeActivated fontlab.flItems.notifyShapeActivated = notifyShapeActivated (...) notifyShapeActivated(flShapeInfo) notifyShapeDeactivated fontlab.flItems.notifyShapeDeactivated = notifyShapeDeactivated (...) notifyShapeDeactivated() notifyShowPanels fontlab.flItems.notifyShowPanels = notifyShowPanels (...) notifyShowPanels() notifySnapLineChanged fontlab.flItems.notifySnapLineChanged = notifySnapLineChanged (...) notifySnapLineChanged(flGuideLine) notifySnapLinesChanged fontlab.flItems.notifySnapLinesChanged = notifySnapLinesChanged (...) notifySnapLinesChanged(list(flGuideLine)) notifyStaplerPreviewEnabled fontlab.flItems.notifyStaplerPreviewEnabled = notifyStaplerPreviewEnabled (...) notifyStaplerPreviewEnabled(bool enbl) notifyStickerCreated fontlab.flItems.notifyStickerCreated = notifyStickerCreated (...) notifyStickerCreated() notifyStopButtonClicked fontlab.flItems.notifyStopButtonClicked = notifyStopButtonClicked (...) notifyStopButtonClicked() notifyTextBlockAdded fontlab.flItems.notifyTextBlockAdded = notifyTextBlockAdded (...) notifyTextBlockAdded(flTextBlock) notifyTextBlockItemActivated fontlab.flItems.notifyTextBlockItemActivated = notifyTextBlockItemActivated (...) notifyTextBlockItemActivated(flTextBlockItem[, bool check_tools = true]) notifyTextBlockItemChanged fontlab.flItems.notifyTextBlockItemChanged = notifyTextBlockItemChanged (...) notifyTextBlockItemChanged(flTextBlockItem) notifyTextBlockItemDeactivated fontlab.flItems.notifyTextBlockItemDeactivated = notifyTextBlockItemDeactivated (...) notifyTextBlockItemDeactivated(flTextBlockItem) notifyTextBlockItemMaximized fontlab.flItems.notifyTextBlockItemMaximized = notifyTextBlockItemMaximized (...) notifyTextBlockItemMaximized(flTextBlockItem) notifyTextBlockItemNormalized fontlab.flItems.notifyTextBlockItemNormalized = notifyTextBlockItemNormalized (...) notifyTextBlockItemNormalized(flTextBlockItem) notifyTextBlockItemsSelectionChanged fontlab.flItems.notifyTextBlockItemsSelectionChanged = notifyTextBlockItemsSelectionChanged (...) notifyTextBlockItemsSelectionChanged(flCanvas) notifyTextBlockRemoved fontlab.flItems.notifyTextBlockRemoved = notifyTextBlockRemoved (...) notifyTextBlockRemoved(flTextBlock) notifyToolChanged fontlab.flItems.notifyToolChanged = notifyToolChanged (...) notifyToolChanged(flBasicTool & tool) notifyTransformDataChanged fontlab.flItems.notifyTransformDataChanged = notifyTransformDataChanged (...) notifyTransformDataChanged(TransformFrame) notifyTransformFrameChanged fontlab.flItems.notifyTransformFrameChanged = notifyTransformFrameChanged (...) notifyTransformFrameChanged(flObject) notifyTransformFrameFinished fontlab.flItems.notifyTransformFrameFinished = notifyTransformFrameFinished (...) notifyTransformFrameFinished(flObject) notifyTransformFrameStarted fontlab.flItems.notifyTransformFrameStarted = notifyTransformFrameStarted (...) notifyTransformFrameStarted(flObject) notifyTransformStarted fontlab.flItems.notifyTransformStarted = notifyTransformStarted (...) notifyTransformStarted() notifyUpdateHistory fontlab.flItems.notifyUpdateHistory = notifyUpdateHistory (...) notifyUpdateHistory() notifyUpdateStaplers fontlab.flItems.notifyUpdateStaplers = notifyUpdateStaplers (...) notifyUpdateStaplers() notifyViewportChanged fontlab.flItems.notifyViewportChanged = notifyViewportChanged (...) notifyViewportChanged(QWidget* old_viewport, QWidget* new_viewport) notifyWorkspaceClosed fontlab.flItems.notifyWorkspaceClosed = notifyWorkspaceClosed (...) notifyWorkspaceClosed(flWorkspace) notifyWorkspaceHasChanges fontlab.flItems.notifyWorkspaceHasChanges = notifyWorkspaceHasChanges (...) notifyWorkspaceHasChanges(bool c) notifyWorkspaceInitialized fontlab.flItems.notifyWorkspaceInitialized = notifyWorkspaceInitialized (...) notifyWorkspaceInitialized(flWorkspace) notifyZoomChanged fontlab.flItems.notifyZoomChanged = notifyZoomChanged (...) notifyZoomChanged(flCanvas & canvas) qobject fontlab.flItems.qobject QObject requestActivateNodesTool fontlab.flItems.requestActivateNodesTool = requestActivateNodesTool (...) requestActivateNodesTool() requestActivateShapeTool fontlab.flItems.requestActivateShapeTool = requestActivateShapeTool (...) requestActivateShapeTool() requestActivateTransformTool fontlab.flItems.requestActivateTransformTool = requestActivateTransformTool (...) requestActivateTransformTool() requestCheckHistoryInitIndex fontlab.flItems.requestCheckHistoryInitIndex = requestCheckHistoryInitIndex (...) requestCheckHistoryInitIndex(flGlyphInfo) requestContent fontlab.flItems.requestContent = requestContent (...) requestContent(fgSymbolList characters, int cursorLocation requestFontInfoDlg fontlab.flItems.requestFontInfoDlg = requestFontInfoDlg (...) requestFontInfoDlg() requestGlyphActivate fontlab.flItems.requestGlyphActivate = requestGlyphActivate (...) requestGlyphActivate(uint pid, uint gid) requestGlyphDeactivate fontlab.flItems.requestGlyphDeactivate = requestGlyphDeactivate (...) requestGlyphDeactivate() requestGlyphReactivated fontlab.flItems.requestGlyphReactivated = requestGlyphReactivated (...) requestGlyphReactivated() requestLoadingFont fontlab.flItems.requestLoadingFont = requestLoadingFont (...) requestLoadingFont(QString font_source) requestPackageAcceptFonts fontlab.flItems.requestPackageAcceptFonts = requestPackageAcceptFonts (...) requestPackageAcceptFonts(flPackage) requestPackagePostProcess fontlab.flItems.requestPackagePostProcess = requestPackagePostProcess (...) requestPackagePostProcess(flPackage, QString encoding) requestPermissionsForDragGuidelineByNode fontlab.flItems.requestPermissionsForDragGuidelineByNode = requestPermissionsForDragGuidelineByNode (...) bool requestPermissionsForDragGuidelineByNode(QPointF canvas_pos, uint modifiers) requestProgressMessage fontlab.flItems.requestProgressMessage = requestProgressMessage (...) requestProgressMessage(QString message) requestProgressRange fontlab.flItems.requestProgressRange = requestProgressRange (...) requestProgressRange(int v) requestProgressShow fontlab.flItems.requestProgressShow = requestProgressShow (...) requestProgressShow(bool b) requestProgressValue fontlab.flItems.requestProgressValue = requestProgressValue (...) requestProgressValue(int v) requestSaveBar fontlab.flItems.requestSaveBar = requestSaveBar (...) requestSaveBar(bool b) requestSaveBarValue fontlab.flItems.requestSaveBarValue = requestSaveBarValue (...) requestSaveBarValue(int v) requestSubContent fontlab.flItems.requestSubContent = requestSubContent (...) requestSubContent(fgSymbolList characters, int cursorLocation requestUpdateActiveShape fontlab.flItems.requestUpdateActiveShape = requestUpdateActiveShape (...) requestUpdateActiveShape(flShapeInfo) resetToolCursor fontlab.flItems.resetToolCursor = resetToolCursor (...) resetToolCursor() setCursor fontlab.flItems.setCursor = setCursor (...) setCursor(CursorId cursor_id); setEllipseCurvature fontlab.flItems.setEllipseCurvature = setEllipseCurvature (...) setEllipseCurvature(double d) setEllipseData fontlab.flItems.setEllipseData = setEllipseData (...) setEllipseData(QPointF p0, QPointF p1) setGuidelinesEditingEnabled fontlab.flItems.setGuidelinesEditingEnabled = setGuidelinesEditingEnabled (...) setGuidelinesEditingEnabled(bool b) setMeterData fontlab.flItems.setMeterData = setMeterData (...) setMeterData(QPointF p0, QPointF p1) setParameterName fontlab.flItems.setParameterName = setParameterName (...) setParameterName(flObject, QString) setTransformation fontlab.flItems.setTransformation = setTransformation (...) setTransformation(int code, QPointF value) shapeBuilders fontlab.flItems.shapeBuilders = shapeBuilders (...) list(flObject) shapeBuilders() strToType fontlab.flItems.strToType = strToType (...) int strToType(QString) transformRotate fontlab.flItems.transformRotate = 2 transformScale fontlab.flItems.transformScale = 1 transformShift fontlab.flItems.transformShift = 0 transformSlant fontlab.flItems.transformSlant = 3 typeToStr fontlab.flItems.typeToStr = typeToStr (...) QString typeToStr(int type) workspace fontlab.flItems.workspace flObject","title":"flItems"},{"location":"fontlab.flItems.html#flitems","text":"","title":"flItems"},{"location":"fontlab.flItems.html#appendrecentfile","text":"fontlab.flItems.appendRecentFile = appendRecentFile (...) appendRecentFile(QString, QString file_name)","title":"appendRecentFile"},{"location":"fontlab.flItems.html#bbrush","text":"fontlab.flItems.bBrush = 9","title":"bBrush"},{"location":"fontlab.flItems.html#bcount","text":"fontlab.flItems.bCount = 14","title":"bCount"},{"location":"fontlab.flItems.html#bellipse","text":"fontlab.flItems.bEllipse = 6","title":"bEllipse"},{"location":"fontlab.flItems.html#bglyph","text":"fontlab.flItems.bGlyph = 3","title":"bGlyph"},{"location":"fontlab.flItems.html#bguideline","text":"fontlab.flItems.bGuideline = 2","title":"bGuideline"},{"location":"fontlab.flItems.html#bmeter","text":"fontlab.flItems.bMeter = 5","title":"bMeter"},{"location":"fontlab.flItems.html#bmetrics","text":"fontlab.flItems.bMetrics = 0","title":"bMetrics"},{"location":"fontlab.flItems.html#bpen","text":"fontlab.flItems.bPen = 7","title":"bPen"},{"location":"fontlab.flItems.html#bpin","text":"fontlab.flItems.bPin = 4","title":"bPin"},{"location":"fontlab.flItems.html#bsinglenode","text":"fontlab.flItems.bSingleNode = 1","title":"bSingleNode"},{"location":"fontlab.flItems.html#btext","text":"fontlab.flItems.bText = 10","title":"bText"},{"location":"fontlab.flItems.html#btransform","text":"fontlab.flItems.bTransform = 8","title":"bTransform"},{"location":"fontlab.flItems.html#buildrecentlist","text":"fontlab.flItems.buildRecentList = buildRecentList (...) QStringList/Nothing buildRecentList(QString)","title":"buildRecentList"},{"location":"fontlab.flItems.html#clearrecentfiles","text":"fontlab.flItems.clearRecentFiles = clearRecentFiles (...) clearRecentFiles(QString )","title":"clearRecentFiles"},{"location":"fontlab.flItems.html#createobject","text":"fontlab.flItems.createObject = createObject (...) flObject createObject(int type, flObject key)","title":"createObject"},{"location":"fontlab.flItems.html#getcursor","text":"fontlab.flItems.getCursor = getCursor (...) QCursor getCursor(CursorId)","title":"getCursor"},{"location":"fontlab.flItems.html#getcursorid","text":"fontlab.flItems.getCursorId = getCursorId (...) CursorId getCursorId(QString, int hot_x, int hot_y)","title":"getCursorId"},{"location":"fontlab.flItems.html#guidelineseditingenabled","text":"fontlab.flItems.guidelinesEditingEnabled = guidelinesEditingEnabled (...) bool guidelinesEditingEnabled()","title":"guidelinesEditingEnabled"},{"location":"fontlab.flItems.html#init","text":"fontlab.flItems.init = init (...) init()","title":"init"},{"location":"fontlab.flItems.html#instance","text":"fontlab.flItems.instance = instance (...) flItems instance()","title":"instance"},{"location":"fontlab.flItems.html#itemstates","text":"fontlab.flItems.ItemStates = {'AutoUpdate': 2097152, 'Custom': 1048576, 'Hovered': 131072, 'Locked': 2, 'Normal': 0, 'Preview': 524288, 'Selected': 65536, 'Small': 262144, 'Visible': 1}","title":"ItemStates"},{"location":"fontlab.flItems.html#itemtype","text":"fontlab.flItems.ItemType = {}","title":"ItemType"},{"location":"fontlab.flItems.html#notifyactivateglyph","text":"fontlab.flItems.notifyActivateGlyph = notifyActivateGlyph (...) notifyActivateGlyph(flGlyphInfo)","title":"notifyActivateGlyph"},{"location":"fontlab.flItems.html#notifyanchorschanged","text":"fontlab.flItems.notifyAnchorsChanged = notifyAnchorsChanged (...) notifyAnchorsChanged()","title":"notifyAnchorsChanged"},{"location":"fontlab.flItems.html#notifyapplytranformframe","text":"fontlab.flItems.notifyApplyTranformFrame = notifyApplyTranformFrame (...) notifyApplyTranformFrame()","title":"notifyApplyTranformFrame"},{"location":"fontlab.flItems.html#notifyaudithovered","text":"fontlab.flItems.notifyAuditHovered = notifyAuditHovered (...) notifyAuditHovered(uint id)","title":"notifyAuditHovered"},{"location":"fontlab.flItems.html#notifyautoshapsechanges","text":"fontlab.flItems.notifyAutoShapseChanges = notifyAutoShapseChanges (...) notifyAutoShapseChanges(flLayer)","title":"notifyAutoShapseChanges"},{"location":"fontlab.flItems.html#notifyavailabletoselectnodes","text":"fontlab.flItems.notifyAvailableToSelectNodes = notifyAvailableToSelectNodes (...) notifyAvailableToSelectNodes( list(list(flNodeInfo)) )","title":"notifyAvailableToSelectNodes"},{"location":"fontlab.flItems.html#notifybrushmodeselected","text":"fontlab.flItems.notifyBrushModeSelected = notifyBrushModeSelected (...) notifyBrushModeSelected(bool smart)","title":"notifyBrushModeSelected"},{"location":"fontlab.flItems.html#notifybrushselected","text":"fontlab.flItems.notifyBrushSelected = notifyBrushSelected (...) notifyBrushSelected(PaintBrush)","title":"notifyBrushSelected"},{"location":"fontlab.flItems.html#notifybrushset","text":"fontlab.flItems.notifyBrushSet = notifyBrushSet (...) notifyBrushSet()","title":"notifyBrushSet"},{"location":"fontlab.flItems.html#notifycanceltranformframe","text":"fontlab.flItems.notifyCancelTranformFrame = notifyCancelTranformFrame (...) notifyCancelTranformFrame()","title":"notifyCancelTranformFrame"},{"location":"fontlab.flItems.html#notifycanvasattached","text":"fontlab.flItems.notifyCanvasAttached = notifyCanvasAttached (...) notifyCanvasAttached(flCanvas)","title":"notifyCanvasAttached"},{"location":"fontlab.flItems.html#notifycanvasenterfocus","text":"fontlab.flItems.notifyCanvasEnterFocus = notifyCanvasEnterFocus (...) notifyCanvasEnterFocus(flCanvas)","title":"notifyCanvasEnterFocus"},{"location":"fontlab.flItems.html#notifycanvasleavefocus","text":"fontlab.flItems.notifyCanvasLeaveFocus = notifyCanvasLeaveFocus (...) notifyCanvasLeaveFocus(flCanvas)","title":"notifyCanvasLeaveFocus"},{"location":"fontlab.flItems.html#notifycanvasremoved","text":"fontlab.flItems.notifyCanvasRemoved = notifyCanvasRemoved (...) notifyCanvasRemoved(flCanvas)","title":"notifyCanvasRemoved"},{"location":"fontlab.flItems.html#notifychangesapplied","text":"fontlab.flItems.notifyChangesApplied = notifyChangesApplied (...) notifyChangesApplied([QString title, flObject object / list(flObject)[, bool recursive=false]])","title":"notifyChangesApplied"},{"location":"fontlab.flItems.html#notifyclipboardchanged","text":"fontlab.flItems.notifyClipboardChanged = notifyClipboardChanged (...) notifyClipboardChanged()","title":"notifyClipboardChanged"},{"location":"fontlab.flItems.html#notifycolorset","text":"fontlab.flItems.notifyColorSet = notifyColorSet (...) notifyColorSet(QColor, bool b)","title":"notifyColorSet"},{"location":"fontlab.flItems.html#notifycommandselected","text":"fontlab.flItems.notifyCommandSelected = notifyCommandSelected (...) notifyCommandSelected()","title":"notifyCommandSelected"},{"location":"fontlab.flItems.html#notifycurrentpaperchanged","text":"fontlab.flItems.notifyCurrentPaperChanged = notifyCurrentPaperChanged (...) notifyCurrentPaperChanged(flPaper)","title":"notifyCurrentPaperChanged"},{"location":"fontlab.flItems.html#notifydropdone","text":"fontlab.flItems.notifyDropDone = notifyDropDone (...) notifyDropDone(flCanvas & canvas)","title":"notifyDropDone"},{"location":"fontlab.flItems.html#notifyeditactionfinished","text":"fontlab.flItems.notifyEditActionFinished = notifyEditActionFinished (...) notifyEditActionFinished()","title":"notifyEditActionFinished"},{"location":"fontlab.flItems.html#notifyeditactionstarted","text":"fontlab.flItems.notifyEditActionStarted = notifyEditActionStarted (...) notifyEditActionStarted()","title":"notifyEditActionStarted"},{"location":"fontlab.flItems.html#notifyeditingchanged","text":"fontlab.flItems.notifyEditingChanged = notifyEditingChanged (...) notifyEditingChanged(flAbstractEditor)","title":"notifyEditingChanged"},{"location":"fontlab.flItems.html#notifyeditingfinished","text":"fontlab.flItems.notifyEditingFinished = notifyEditingFinished (...) notifyEditingFinished()","title":"notifyEditingFinished"},{"location":"fontlab.flItems.html#notifyeditmodechanged","text":"fontlab.flItems.notifyEditModeChanged = notifyEditModeChanged (...) notifyEditModeChanged(EditMode mode)","title":"notifyEditModeChanged"},{"location":"fontlab.flItems.html#notifyfeatureschanged","text":"fontlab.flItems.notifyFeaturesChanged = notifyFeaturesChanged (...) notifyFeaturesChanged(uint package_id, bool binary)","title":"notifyFeaturesChanged"},{"location":"fontlab.flItems.html#notifyfontpanelactivated","text":"fontlab.flItems.notifyFontPanelActivated = notifyFontPanelActivated (...) notifyFontPanelActivated(bool b)","title":"notifyFontPanelActivated"},{"location":"fontlab.flItems.html#notifyfontselected","text":"fontlab.flItems.notifyFontSelected = notifyFontSelected (...) notifyFontSelected(uint id);","title":"notifyFontSelected"},{"location":"fontlab.flItems.html#notifyframeselected","text":"fontlab.flItems.notifyFrameSelected = notifyFrameSelected (...) notifyFrameSelected(list(flNodeInfo))","title":"notifyFrameSelected"},{"location":"fontlab.flItems.html#notifygallerychanged","text":"fontlab.flItems.notifyGalleryChanged = notifyGalleryChanged (...) notifyGalleryChanged(flObject)","title":"notifyGalleryChanged"},{"location":"fontlab.flItems.html#notifyglyphactivated","text":"fontlab.flItems.notifyGlyphActivated = notifyGlyphActivated (...) notifyGlyphActivated(flGlyphInfo)","title":"notifyGlyphActivated"},{"location":"fontlab.flItems.html#notifyglyphdeactivated","text":"fontlab.flItems.notifyGlyphDeactivated = notifyGlyphDeactivated (...) notifyGlyphDeactivated()","title":"notifyGlyphDeactivated"},{"location":"fontlab.flItems.html#notifyglyphdoubleclick","text":"fontlab.flItems.notifyGlyphDoubleClick = notifyGlyphDoubleClick (...) notifyGlyphDoubleClick(flGlyphInfo)","title":"notifyGlyphDoubleClick"},{"location":"fontlab.flItems.html#notifyglyphidselected","text":"fontlab.flItems.notifyGlyphIdSelected = notifyGlyphIdSelected (...) notifyGlyphIdSelected(uint packageId, uint glyphId, bool replace)","title":"notifyGlyphIdSelected"},{"location":"fontlab.flItems.html#notifyglyphmaximized","text":"fontlab.flItems.notifyGlyphMaximized = notifyGlyphMaximized (...) notifyGlyphMaximized(flGlyphInfo)","title":"notifyGlyphMaximized"},{"location":"fontlab.flItems.html#notifyglyphpinpointchanged","text":"fontlab.flItems.notifyGlyphPinPointChanged = notifyGlyphPinPointChanged (...) notifyGlyphPinPointChanged([flPinPoint pin_point = flnull[, flGlyphInfo glyph_info = flnull]])","title":"notifyGlyphPinPointChanged"},{"location":"fontlab.flItems.html#notifyglyphpinpointcreated","text":"fontlab.flItems.notifyGlyphPinPointCreated = notifyGlyphPinPointCreated (...) notifyGlyphPinPointCreated(flGlyphInfo)","title":"notifyGlyphPinPointCreated"},{"location":"fontlab.flItems.html#notifyglyphsupdated","text":"fontlab.flItems.notifyGlyphsUpdated = notifyGlyphsUpdated (...) notifyGlyphsUpdated(uint packageId, QSet glyphIds)","title":"notifyGlyphsUpdated"},{"location":"fontlab.flItems.html#notifyglyphupdated","text":"fontlab.flItems.notifyGlyphUpdated = notifyGlyphUpdated (...) notifyGlyphUpdated(uint packageId, uint glyphId)","title":"notifyGlyphUpdated"},{"location":"fontlab.flItems.html#notifyglyphwindowinactive","text":"fontlab.flItems.notifyGlyphWindowInactive = notifyGlyphWindowInactive (...) notifyGlyphWindowInactive()","title":"notifyGlyphWindowInactive"},{"location":"fontlab.flItems.html#notifygraphedgeselectionchanged","text":"fontlab.flItems.notifyGraphEdgeSelectionChanged = notifyGraphEdgeSelectionChanged (...) notifyGraphEdgeSelectionChanged(flObject)","title":"notifyGraphEdgeSelectionChanged"},{"location":"fontlab.flItems.html#notifyguidelineschanged","text":"fontlab.flItems.notifyGuidelinesChanged = notifyGuidelinesChanged (...) notifyGuidelinesChanged(flCanvas)","title":"notifyGuidelinesChanged"},{"location":"fontlab.flItems.html#notifyguidelinesselected","text":"fontlab.flItems.notifyGuidelinesSelected = notifyGuidelinesSelected (...) notifyGuidelinesSelected(list(flGuideLine))","title":"notifyGuidelinesSelected"},{"location":"fontlab.flItems.html#notifyhidepanels","text":"fontlab.flItems.notifyHidePanels = notifyHidePanels (...) notifyHidePanels()","title":"notifyHidePanels"},{"location":"fontlab.flItems.html#notifyhistorychanged","text":"fontlab.flItems.notifyHistoryChanged = notifyHistoryChanged (...) notifyHistoryChanged()","title":"notifyHistoryChanged"},{"location":"fontlab.flItems.html#notifykeyhash","text":"fontlab.flItems.notifyKeyHash = notifyKeyHash (...) notifyKeyHash()","title":"notifyKeyHash"},{"location":"fontlab.flItems.html#notifykeyrepeat","text":"fontlab.flItems.notifyKeyRepeat = notifyKeyRepeat (...) notifyKeyRepeat(int key)","title":"notifyKeyRepeat"},{"location":"fontlab.flItems.html#notifykeyslash","text":"fontlab.flItems.notifyKeySlash = notifyKeySlash (...) notifyKeySlash()","title":"notifyKeySlash"},{"location":"fontlab.flItems.html#notifylayeractivated","text":"fontlab.flItems.notifyLayerActivated = notifyLayerActivated (...) notifyLayerActivated(flLayer)","title":"notifyLayerActivated"},{"location":"fontlab.flItems.html#notifymodelchanged","text":"fontlab.flItems.notifyModelChanged = notifyModelChanged (...) notifyModelChanged()","title":"notifyModelChanged"},{"location":"fontlab.flItems.html#notifynodechanged","text":"fontlab.flItems.notifyNodeChanged = notifyNodeChanged (...) notifyNodeChanged(flNodeInfo)","title":"notifyNodeChanged"},{"location":"fontlab.flItems.html#notifynodesselected","text":"fontlab.flItems.notifyNodesSelected = notifyNodesSelected (...) notifyNodesSelected(list(flNodeInfo))","title":"notifyNodesSelected"},{"location":"fontlab.flItems.html#notifypackageadded","text":"fontlab.flItems.notifyPackageAdded = notifyPackageAdded (...) notifyPackageAdded(flPackage)","title":"notifyPackageAdded"},{"location":"fontlab.flItems.html#notifypackageclosed","text":"fontlab.flItems.notifyPackageClosed = notifyPackageClosed (...) notifyPackageClosed(flPackage)","title":"notifyPackageClosed"},{"location":"fontlab.flItems.html#notifypackagecontentupdated","text":"fontlab.flItems.notifyPackageContentUpdated = notifyPackageContentUpdated (...) notifyPackageContentUpdated(uint id)","title":"notifyPackageContentUpdated"},{"location":"fontlab.flItems.html#notifypackagereaded","text":"fontlab.flItems.notifyPackageReaded = notifyPackageReaded (...) notifyPackageReaded(flPackage)","title":"notifyPackageReaded"},{"location":"fontlab.flItems.html#notifypackageremoved","text":"fontlab.flItems.notifyPackageRemoved = notifyPackageRemoved (...) notifyPackageRemoved(flPackage)","title":"notifyPackageRemoved"},{"location":"fontlab.flItems.html#notifypackagesremoved","text":"fontlab.flItems.notifyPackagesRemoved = notifyPackagesRemoved (...) notifyPackagesRemoved(list(flObject))","title":"notifyPackagesRemoved"},{"location":"fontlab.flItems.html#notifypackagesupdated","text":"fontlab.flItems.notifyPackagesUpdated = notifyPackagesUpdated (...) notifyPackagesUpdated()","title":"notifyPackagesUpdated"},{"location":"fontlab.flItems.html#notifypackageupdated","text":"fontlab.flItems.notifyPackageUpdated = notifyPackageUpdated (...) notifyPackageUpdated(flPackage | uint id)","title":"notifyPackageUpdated"},{"location":"fontlab.flItems.html#notifypinpointchanged","text":"fontlab.flItems.notifyPinPointChanged = notifyPinPointChanged (...) notifyPinPointChanged([flPinPoint pin_point = flnull[, flShapeInfo shape_info = flnull]])","title":"notifyPinPointChanged"},{"location":"fontlab.flItems.html#notifypinpointcreated","text":"fontlab.flItems.notifyPinPointCreated = notifyPinPointCreated (...) notifyPinPointCreated(flShapeInfo)","title":"notifyPinPointCreated"},{"location":"fontlab.flItems.html#notifypinpointselectionchanged","text":"fontlab.flItems.notifyPinPointSelectionChanged = notifyPinPointSelectionChanged (...) notifyPinPointSelectionChanged()","title":"notifyPinPointSelectionChanged"},{"location":"fontlab.flItems.html#notifypinselected","text":"fontlab.flItems.notifyPinSelected = notifyPinSelected (...) notifyPinSelected(uint id)","title":"notifyPinSelected"},{"location":"fontlab.flItems.html#notifypreferenceschanged","text":"fontlab.flItems.notifyPreferencesChanged = notifyPreferencesChanged (...) notifyPreferencesChanged()","title":"notifyPreferencesChanged"},{"location":"fontlab.flItems.html#notifyprojectclosed","text":"fontlab.flItems.notifyProjectClosed = notifyProjectClosed (...) notifyProjectClosed()","title":"notifyProjectClosed"},{"location":"fontlab.flItems.html#notifyprojectreaded","text":"fontlab.flItems.notifyProjectReaded = notifyProjectReaded (...) notifyProjectReaded(QString file_name)","title":"notifyProjectReaded"},{"location":"fontlab.flItems.html#notifyprojectsaved","text":"fontlab.flItems.notifyProjectSaved = notifyProjectSaved (...) notifyProjectSaved(QString file_name)","title":"notifyProjectSaved"},{"location":"fontlab.flItems.html#notifypropertieschanged","text":"fontlab.flItems.notifyPropertiesChanged = notifyPropertiesChanged (...) notifyPropertiesChanged(flObject)","title":"notifyPropertiesChanged"},{"location":"fontlab.flItems.html#notifyrenderingbegin","text":"fontlab.flItems.notifyRenderingBegin = notifyRenderingBegin (...) notifyRenderingBegin(QString info)","title":"notifyRenderingBegin"},{"location":"fontlab.flItems.html#notifyrenderingfinished","text":"fontlab.flItems.notifyRenderingFinished = notifyRenderingFinished (...) notifyRenderingFinished(bool success)","title":"notifyRenderingFinished"},{"location":"fontlab.flItems.html#notifyreplaceglyphsbyfgid","text":"fontlab.flItems.notifyReplaceGlyphsByFgId = notifyReplaceGlyphsByFgId (...) notifyReplaceGlyphsByFgId(list(unsigned long), int replace_count)","title":"notifyReplaceGlyphsByFgId"},{"location":"fontlab.flItems.html#notifyrequestchangecurrentclipboard","text":"fontlab.flItems.notifyRequestChangeCurrentClipboard = notifyRequestChangeCurrentClipboard (...) notifyRequestChangeCurrentClipboard(QString xml)","title":"notifyRequestChangeCurrentClipboard"},{"location":"fontlab.flItems.html#notifyrequestnewproject","text":"fontlab.flItems.notifyRequestNewProject = notifyRequestNewProject (...) notifyRequestNewProject()","title":"notifyRequestNewProject"},{"location":"fontlab.flItems.html#notifyrequestopenproject","text":"fontlab.flItems.notifyRequestOpenProject = notifyRequestOpenProject (...) notifyRequestOpenProject(QString file_name)","title":"notifyRequestOpenProject"},{"location":"fontlab.flItems.html#notifyrequestpasteaction","text":"fontlab.flItems.notifyRequestPasteAction = notifyRequestPasteAction (...) notifyRequestPasteAction()","title":"notifyRequestPasteAction"},{"location":"fontlab.flItems.html#notifyrequestshowwelcome","text":"fontlab.flItems.notifyRequestShowWelcome = notifyRequestShowWelcome (...) notifyRequestShowWelcome()","title":"notifyRequestShowWelcome"},{"location":"fontlab.flItems.html#notifyrequestshowworkspace","text":"fontlab.flItems.notifyRequestShowWorkspace = notifyRequestShowWorkspace (...) notifyRequestShowWorkspace()","title":"notifyRequestShowWorkspace"},{"location":"fontlab.flItems.html#notifyscrolltoglyph","text":"fontlab.flItems.notifyScrollToGlyph = notifyScrollToGlyph (...) notifyScrollToGlyph(flGlyphInfo)","title":"notifyScrollToGlyph"},{"location":"fontlab.flItems.html#notifyscvitemschanged","text":"fontlab.flItems.notifySCVItemsChanged = notifySCVItemsChanged (...) notifySCVItemsChanged()","title":"notifySCVItemsChanged"},{"location":"fontlab.flItems.html#notifyselectionchanged","text":"fontlab.flItems.notifySelectionChanged = notifySelectionChanged (...) notifySelectionChanged()","title":"notifySelectionChanged"},{"location":"fontlab.flItems.html#notifyshapeactivated","text":"fontlab.flItems.notifyShapeActivated = notifyShapeActivated (...) notifyShapeActivated(flShapeInfo)","title":"notifyShapeActivated"},{"location":"fontlab.flItems.html#notifyshapedeactivated","text":"fontlab.flItems.notifyShapeDeactivated = notifyShapeDeactivated (...) notifyShapeDeactivated()","title":"notifyShapeDeactivated"},{"location":"fontlab.flItems.html#notifyshowpanels","text":"fontlab.flItems.notifyShowPanels = notifyShowPanels (...) notifyShowPanels()","title":"notifyShowPanels"},{"location":"fontlab.flItems.html#notifysnaplinechanged","text":"fontlab.flItems.notifySnapLineChanged = notifySnapLineChanged (...) notifySnapLineChanged(flGuideLine)","title":"notifySnapLineChanged"},{"location":"fontlab.flItems.html#notifysnaplineschanged","text":"fontlab.flItems.notifySnapLinesChanged = notifySnapLinesChanged (...) notifySnapLinesChanged(list(flGuideLine))","title":"notifySnapLinesChanged"},{"location":"fontlab.flItems.html#notifystaplerpreviewenabled","text":"fontlab.flItems.notifyStaplerPreviewEnabled = notifyStaplerPreviewEnabled (...) notifyStaplerPreviewEnabled(bool enbl)","title":"notifyStaplerPreviewEnabled"},{"location":"fontlab.flItems.html#notifystickercreated","text":"fontlab.flItems.notifyStickerCreated = notifyStickerCreated (...) notifyStickerCreated()","title":"notifyStickerCreated"},{"location":"fontlab.flItems.html#notifystopbuttonclicked","text":"fontlab.flItems.notifyStopButtonClicked = notifyStopButtonClicked (...) notifyStopButtonClicked()","title":"notifyStopButtonClicked"},{"location":"fontlab.flItems.html#notifytextblockadded","text":"fontlab.flItems.notifyTextBlockAdded = notifyTextBlockAdded (...) notifyTextBlockAdded(flTextBlock)","title":"notifyTextBlockAdded"},{"location":"fontlab.flItems.html#notifytextblockitemactivated","text":"fontlab.flItems.notifyTextBlockItemActivated = notifyTextBlockItemActivated (...) notifyTextBlockItemActivated(flTextBlockItem[, bool check_tools = true])","title":"notifyTextBlockItemActivated"},{"location":"fontlab.flItems.html#notifytextblockitemchanged","text":"fontlab.flItems.notifyTextBlockItemChanged = notifyTextBlockItemChanged (...) notifyTextBlockItemChanged(flTextBlockItem)","title":"notifyTextBlockItemChanged"},{"location":"fontlab.flItems.html#notifytextblockitemdeactivated","text":"fontlab.flItems.notifyTextBlockItemDeactivated = notifyTextBlockItemDeactivated (...) notifyTextBlockItemDeactivated(flTextBlockItem)","title":"notifyTextBlockItemDeactivated"},{"location":"fontlab.flItems.html#notifytextblockitemmaximized","text":"fontlab.flItems.notifyTextBlockItemMaximized = notifyTextBlockItemMaximized (...) notifyTextBlockItemMaximized(flTextBlockItem)","title":"notifyTextBlockItemMaximized"},{"location":"fontlab.flItems.html#notifytextblockitemnormalized","text":"fontlab.flItems.notifyTextBlockItemNormalized = notifyTextBlockItemNormalized (...) notifyTextBlockItemNormalized(flTextBlockItem)","title":"notifyTextBlockItemNormalized"},{"location":"fontlab.flItems.html#notifytextblockitemsselectionchanged","text":"fontlab.flItems.notifyTextBlockItemsSelectionChanged = notifyTextBlockItemsSelectionChanged (...) notifyTextBlockItemsSelectionChanged(flCanvas)","title":"notifyTextBlockItemsSelectionChanged"},{"location":"fontlab.flItems.html#notifytextblockremoved","text":"fontlab.flItems.notifyTextBlockRemoved = notifyTextBlockRemoved (...) notifyTextBlockRemoved(flTextBlock)","title":"notifyTextBlockRemoved"},{"location":"fontlab.flItems.html#notifytoolchanged","text":"fontlab.flItems.notifyToolChanged = notifyToolChanged (...) notifyToolChanged(flBasicTool & tool)","title":"notifyToolChanged"},{"location":"fontlab.flItems.html#notifytransformdatachanged","text":"fontlab.flItems.notifyTransformDataChanged = notifyTransformDataChanged (...) notifyTransformDataChanged(TransformFrame)","title":"notifyTransformDataChanged"},{"location":"fontlab.flItems.html#notifytransformframechanged","text":"fontlab.flItems.notifyTransformFrameChanged = notifyTransformFrameChanged (...) notifyTransformFrameChanged(flObject)","title":"notifyTransformFrameChanged"},{"location":"fontlab.flItems.html#notifytransformframefinished","text":"fontlab.flItems.notifyTransformFrameFinished = notifyTransformFrameFinished (...) notifyTransformFrameFinished(flObject)","title":"notifyTransformFrameFinished"},{"location":"fontlab.flItems.html#notifytransformframestarted","text":"fontlab.flItems.notifyTransformFrameStarted = notifyTransformFrameStarted (...) notifyTransformFrameStarted(flObject)","title":"notifyTransformFrameStarted"},{"location":"fontlab.flItems.html#notifytransformstarted","text":"fontlab.flItems.notifyTransformStarted = notifyTransformStarted (...) notifyTransformStarted()","title":"notifyTransformStarted"},{"location":"fontlab.flItems.html#notifyupdatehistory","text":"fontlab.flItems.notifyUpdateHistory = notifyUpdateHistory (...) notifyUpdateHistory()","title":"notifyUpdateHistory"},{"location":"fontlab.flItems.html#notifyupdatestaplers","text":"fontlab.flItems.notifyUpdateStaplers = notifyUpdateStaplers (...) notifyUpdateStaplers()","title":"notifyUpdateStaplers"},{"location":"fontlab.flItems.html#notifyviewportchanged","text":"fontlab.flItems.notifyViewportChanged = notifyViewportChanged (...) notifyViewportChanged(QWidget* old_viewport, QWidget* new_viewport)","title":"notifyViewportChanged"},{"location":"fontlab.flItems.html#notifyworkspaceclosed","text":"fontlab.flItems.notifyWorkspaceClosed = notifyWorkspaceClosed (...) notifyWorkspaceClosed(flWorkspace)","title":"notifyWorkspaceClosed"},{"location":"fontlab.flItems.html#notifyworkspacehaschanges","text":"fontlab.flItems.notifyWorkspaceHasChanges = notifyWorkspaceHasChanges (...) notifyWorkspaceHasChanges(bool c)","title":"notifyWorkspaceHasChanges"},{"location":"fontlab.flItems.html#notifyworkspaceinitialized","text":"fontlab.flItems.notifyWorkspaceInitialized = notifyWorkspaceInitialized (...) notifyWorkspaceInitialized(flWorkspace)","title":"notifyWorkspaceInitialized"},{"location":"fontlab.flItems.html#notifyzoomchanged","text":"fontlab.flItems.notifyZoomChanged = notifyZoomChanged (...) notifyZoomChanged(flCanvas & canvas)","title":"notifyZoomChanged"},{"location":"fontlab.flItems.html#qobject","text":"fontlab.flItems.qobject QObject","title":"qobject"},{"location":"fontlab.flItems.html#requestactivatenodestool","text":"fontlab.flItems.requestActivateNodesTool = requestActivateNodesTool (...) requestActivateNodesTool()","title":"requestActivateNodesTool"},{"location":"fontlab.flItems.html#requestactivateshapetool","text":"fontlab.flItems.requestActivateShapeTool = requestActivateShapeTool (...) requestActivateShapeTool()","title":"requestActivateShapeTool"},{"location":"fontlab.flItems.html#requestactivatetransformtool","text":"fontlab.flItems.requestActivateTransformTool = requestActivateTransformTool (...) requestActivateTransformTool()","title":"requestActivateTransformTool"},{"location":"fontlab.flItems.html#requestcheckhistoryinitindex","text":"fontlab.flItems.requestCheckHistoryInitIndex = requestCheckHistoryInitIndex (...) requestCheckHistoryInitIndex(flGlyphInfo)","title":"requestCheckHistoryInitIndex"},{"location":"fontlab.flItems.html#requestcontent","text":"fontlab.flItems.requestContent = requestContent (...) requestContent(fgSymbolList characters, int cursorLocation","title":"requestContent"},{"location":"fontlab.flItems.html#requestfontinfodlg","text":"fontlab.flItems.requestFontInfoDlg = requestFontInfoDlg (...) requestFontInfoDlg()","title":"requestFontInfoDlg"},{"location":"fontlab.flItems.html#requestglyphactivate","text":"fontlab.flItems.requestGlyphActivate = requestGlyphActivate (...) requestGlyphActivate(uint pid, uint gid)","title":"requestGlyphActivate"},{"location":"fontlab.flItems.html#requestglyphdeactivate","text":"fontlab.flItems.requestGlyphDeactivate = requestGlyphDeactivate (...) requestGlyphDeactivate()","title":"requestGlyphDeactivate"},{"location":"fontlab.flItems.html#requestglyphreactivated","text":"fontlab.flItems.requestGlyphReactivated = requestGlyphReactivated (...) requestGlyphReactivated()","title":"requestGlyphReactivated"},{"location":"fontlab.flItems.html#requestloadingfont","text":"fontlab.flItems.requestLoadingFont = requestLoadingFont (...) requestLoadingFont(QString font_source)","title":"requestLoadingFont"},{"location":"fontlab.flItems.html#requestpackageacceptfonts","text":"fontlab.flItems.requestPackageAcceptFonts = requestPackageAcceptFonts (...) requestPackageAcceptFonts(flPackage)","title":"requestPackageAcceptFonts"},{"location":"fontlab.flItems.html#requestpackagepostprocess","text":"fontlab.flItems.requestPackagePostProcess = requestPackagePostProcess (...) requestPackagePostProcess(flPackage, QString encoding)","title":"requestPackagePostProcess"},{"location":"fontlab.flItems.html#requestpermissionsfordragguidelinebynode","text":"fontlab.flItems.requestPermissionsForDragGuidelineByNode = requestPermissionsForDragGuidelineByNode (...) bool requestPermissionsForDragGuidelineByNode(QPointF canvas_pos, uint modifiers)","title":"requestPermissionsForDragGuidelineByNode"},{"location":"fontlab.flItems.html#requestprogressmessage","text":"fontlab.flItems.requestProgressMessage = requestProgressMessage (...) requestProgressMessage(QString message)","title":"requestProgressMessage"},{"location":"fontlab.flItems.html#requestprogressrange","text":"fontlab.flItems.requestProgressRange = requestProgressRange (...) requestProgressRange(int v)","title":"requestProgressRange"},{"location":"fontlab.flItems.html#requestprogressshow","text":"fontlab.flItems.requestProgressShow = requestProgressShow (...) requestProgressShow(bool b)","title":"requestProgressShow"},{"location":"fontlab.flItems.html#requestprogressvalue","text":"fontlab.flItems.requestProgressValue = requestProgressValue (...) requestProgressValue(int v)","title":"requestProgressValue"},{"location":"fontlab.flItems.html#requestsavebar","text":"fontlab.flItems.requestSaveBar = requestSaveBar (...) requestSaveBar(bool b)","title":"requestSaveBar"},{"location":"fontlab.flItems.html#requestsavebarvalue","text":"fontlab.flItems.requestSaveBarValue = requestSaveBarValue (...) requestSaveBarValue(int v)","title":"requestSaveBarValue"},{"location":"fontlab.flItems.html#requestsubcontent","text":"fontlab.flItems.requestSubContent = requestSubContent (...) requestSubContent(fgSymbolList characters, int cursorLocation","title":"requestSubContent"},{"location":"fontlab.flItems.html#requestupdateactiveshape","text":"fontlab.flItems.requestUpdateActiveShape = requestUpdateActiveShape (...) requestUpdateActiveShape(flShapeInfo)","title":"requestUpdateActiveShape"},{"location":"fontlab.flItems.html#resettoolcursor","text":"fontlab.flItems.resetToolCursor = resetToolCursor (...) resetToolCursor()","title":"resetToolCursor"},{"location":"fontlab.flItems.html#setcursor","text":"fontlab.flItems.setCursor = setCursor (...) setCursor(CursorId cursor_id);","title":"setCursor"},{"location":"fontlab.flItems.html#setellipsecurvature","text":"fontlab.flItems.setEllipseCurvature = setEllipseCurvature (...) setEllipseCurvature(double d)","title":"setEllipseCurvature"},{"location":"fontlab.flItems.html#setellipsedata","text":"fontlab.flItems.setEllipseData = setEllipseData (...) setEllipseData(QPointF p0, QPointF p1)","title":"setEllipseData"},{"location":"fontlab.flItems.html#setguidelineseditingenabled","text":"fontlab.flItems.setGuidelinesEditingEnabled = setGuidelinesEditingEnabled (...) setGuidelinesEditingEnabled(bool b)","title":"setGuidelinesEditingEnabled"},{"location":"fontlab.flItems.html#setmeterdata","text":"fontlab.flItems.setMeterData = setMeterData (...) setMeterData(QPointF p0, QPointF p1)","title":"setMeterData"},{"location":"fontlab.flItems.html#setparametername","text":"fontlab.flItems.setParameterName = setParameterName (...) setParameterName(flObject, QString)","title":"setParameterName"},{"location":"fontlab.flItems.html#settransformation","text":"fontlab.flItems.setTransformation = setTransformation (...) setTransformation(int code, QPointF value)","title":"setTransformation"},{"location":"fontlab.flItems.html#shapebuilders","text":"fontlab.flItems.shapeBuilders = shapeBuilders (...) list(flObject) shapeBuilders()","title":"shapeBuilders"},{"location":"fontlab.flItems.html#strtotype","text":"fontlab.flItems.strToType = strToType (...) int strToType(QString)","title":"strToType"},{"location":"fontlab.flItems.html#transformrotate","text":"fontlab.flItems.transformRotate = 2","title":"transformRotate"},{"location":"fontlab.flItems.html#transformscale","text":"fontlab.flItems.transformScale = 1","title":"transformScale"},{"location":"fontlab.flItems.html#transformshift","text":"fontlab.flItems.transformShift = 0","title":"transformShift"},{"location":"fontlab.flItems.html#transformslant","text":"fontlab.flItems.transformSlant = 3","title":"transformSlant"},{"location":"fontlab.flItems.html#typetostr","text":"fontlab.flItems.typeToStr = typeToStr (...) QString typeToStr(int type)","title":"typeToStr"},{"location":"fontlab.flItems.html#workspace","text":"fontlab.flItems.workspace flObject","title":"workspace"},{"location":"fontlab.flLayer.html","text":"flLayer fontlab.flLayer = class flLayer ( object ) flLayer representation Constructors: flLayer() flLayer(flObject) flLayer(flGlyph) flLayer('title') Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value addAnchor (...) addAnchor (flPinPoint) addComponent (...) addComponent (flComponent component) addShape (...) flShape addShape (flShape) addShapes (...) addShapes (list(flShape)) appendGuidelines (...) appendGuidelines (list(flGuideLine)) applyTransform (...) applyTransform ([QTransform transform]) assignFgLayer (...) assignFgLayer (fgLayer, bool doGuides, bool doHints, bool doAnchors, bool doShapes, bool doTTH) assignStyle (...) assignStyle (flLayer layer) autohint (...) bool autohint () bindDependencies (...) bindDependencies () buildAuto (...) bool buildAuto () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) cleanEmptyShapes (...) cleanEmptyShapes () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearAnchors (...) clearAnchors () clearComponents (...) clearComponents () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object cloneCustom (...) (flLayer, list(flObject)) cloneCustom (uint) compare (...) bool compare (flLayer layer, double error) compoundMakeSelected (...) bool compoundMakeSelected (bool set_active, bool process_all) compoundMakeSelectedToShapes (...) bool compoundMakeSelectedToShapes ([bool set_active =true]) contourRect (...) QRectF contourRect () createAnchor (...) flPinPoint createAnchor (QPointF p, bool auto_positioning) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateAllShapes (...) deactivateAllShapes () fillFgAnchors (...) fillFgAnchors (fgLayer) fillFgGuides (...) fillFgGuides (fgLayer) fillFgHints (...) fillFgHints (fgLayer) findAnchor (...) flPinPoint findAnchor (QString name) findNearestNode (...) (flShape, flNode best_node, double maxd) findNearestNode (QPointF, flNode::NodeType node_type, double maxd) findNode (...) (flNode, QPointF)/Nothing findNode (string name) flag (...) flag (uint f) getActiveComposite (...) flShape/Nothing getActiveComposite () getActiveShape (...) (flShape, QTransform)/Nothing getActiveShape ([bool = true]) getContours (...) list(flContour) getContours () getImgLayer (...) flLayer getImgLayer (bool create) getMaskLayer (...) flLayer getMaskLayer (bool create) getMasterPosition (...) QMap /Nothing getMasterPosition () getOwnerComposite (...) flShapeInfo getOwnerComposite (flShape, QTransform) / flShapeData getOwnerComposite (flShape) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSelected (...) list(flContour)/Nothing getSelected (SelectionMode) getShapes (...) list(flShape) getShapes (ShapeType shape_type) getTthCode (...) bool getTthCode (fgLayer fg_layer, fgTTInterpreter itr) getTthData (...) list(bytes) / Nothing getTthData (fgLayer fg_layer, fgTTInterpreter itr) getTthProgram (...) QString getTthProgram (fgTTInterpreter itr) goDown (...) bool goDown (flShape) goUp (...) bool goUp (flShape) hasHistoryState (...) hasHistoryState (uint history_ix) hasShape (...) bool hasShape (flShape) hasShapeData (...) bool hasShapeData (flShapeData) haveSelected (...) bool haveSelected (SelectionMode) hints2links (...) bool hints2links () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx = QTransform()]) insertShape (...) flShape insertShape (int index, flShape shape) isBack (...) bool isBack (flShape) isCompatible (...) bool isCompatible (flLayer, bool strong) isEqual (...) isEqual (flObject) isFront (...) bool isFront (flShape) killAuto (...) killAuto () nodesCount (...) int nodesCount () prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([flObject]) removeAllShapes (...) removeAllShapes ([ShapeType shape_type=AnyShape]) removeAnchor (...) removeAnchor (flPinPoint) removeChild (...) removeChild (flObject) removeGuides (...) bool removeGuides (bool horizontal, bool vertical) removeHints (...) bool removeHints (bool horizontal, bool vertical) removeProperty (...) removeProperty ('key') removeShape (...) removeShape (flShape[, bool recursive=true]) reorderShapes (...) reorderShapes (QList ) replaceShape (...) replaceShape (flShape old_shape, flShape new_shape) resetInkBox (...) resetInkBox () resetMetricsLeft (...) resetMetricsLeft () resetMetricsRight (...) resetMetricsRight () resetMetricsWidth (...) resetMetricsWidth () resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) selectAll (...) selectAll () sendToBack (...) bool sendToBack (flShape) sendToFront (...) bool sendToFront (flShape) setActive (...) setActive () setActiveShape (...) setActiveShape (flShape) setAllShapesSelected (...) setAllShapesSelected (bool) setFlag (...) setFlag (uint f [, bool value]) setGlyphComponents (...) bool setGlyphComponents (QList result, double width, flPackage package, bool colorize) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setWireframeColorIx (...) setWireframeColorIx (int) sortShapes (...) sortShapes () tag (...) tag ([string]) takeShapes (...) QList takeShapes (ShapeType shape_type) transferNames (...) transferNames (flLayer layer) transferTTH (...) bool transferTTH (flLayer) tthAutohint (...) tthAutohint (bool make_hints, fgTTInterpreter itr) tthFixZones (...) tthFixZones (fgTTInterpreter itr) tthReassignStems (...) tthReassignStems (fgTTInterpreter itr) tthReassignZones (...) tthReassignZones (fgTTInterpreter itr, bool) tthRemoveCommands (...) tthRemoveCommands (bool vertical, bool horizontal) tthRemoveDeltas (...) tthRemoveDeltas (bool middle, bool final) unselectAllNodes (...) unselectAllNodes () update (...) update () updateAnchors (...) updateAnchors () updateGuidelineNode (...) flNode updateGuidelineNode (flNode node) Static methods checkTags (...) bool checkTags (QSet glyph_tags, QString item_tags) cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors advanceHeight double advanceWidth double anchors list(flPinPoint) anchors() autoLayer bool boundingBox QRectF boundingBox() components list(name, transform) componentsCount int componentsCount() compoundReleaseSelected bool compoundReleaseSelected(); counterAnchors int counterAnchors() glyph flGlyph guidelines list(flGuideLine) guidelines() hasAdvanceHeight bool hasAdvanceHeight() hasAdvanceWidth bool hasAdvanceWidth() hasBody bool hasBody() hasChanges bool hasComponents bool hasComponents() hasComposites bool hasComposites() hasGuides bool hasGuides() hasHints bool hasHints() hasHistoryStates bool hasNote bool hasNote() hasTTData bool hasTTData() hasTTH bool hasTTH() haveActiveComposite bool haveActiveComposite() id object id isActive bool isActive() isAllSelected bool isBodyLayer bool isBodyLayer() isChanged bool isImg bool isImg() isImgLayer bool isImgLayer() isLocked bool isLockedI bool isLockedI() isMask bool isMask() isMaskLayer bool isMaskLayer() isMasterLayer bool isMasterLayer() isNull bool isPresent bool isReleased bool isService bool isServiceMA bool isServiceMA() isValid bool isVisible bool isVisibleA bool isVisibleA() isWireframe bool mark double metricsLeft QString metricsRight QString metricsWidth QString name object name note QString opacity double recipe QString refCnt object references count shapes list(flShape) shapes() shapesCount int shapesCount() transform QTransform ttData fgTrueTypeData tthProgram QList type object type wireframeColor QColor Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} addAnchor fontlab.flLayer.addAnchor = addAnchor (...) addAnchor(flPinPoint) addComponent fontlab.flLayer.addComponent = addComponent (...) addComponent(flComponent component) addShape fontlab.flLayer.addShape = addShape (...) flShape addShape(flShape) addShapes fontlab.flLayer.addShapes = addShapes (...) addShapes(list(flShape)) advanceHeight fontlab.flLayer.advanceHeight double advanceWidth fontlab.flLayer.advanceWidth double anchors fontlab.flLayer.anchors list(flPinPoint) anchors() appendGuidelines fontlab.flLayer.appendGuidelines = appendGuidelines (...) appendGuidelines(list(flGuideLine)) applyTransform fontlab.flLayer.applyTransform = applyTransform (...) applyTransform([QTransform transform]) assignFgLayer fontlab.flLayer.assignFgLayer = assignFgLayer (...) assignFgLayer(fgLayer, bool doGuides, bool doHints, bool doAnchors, bool doShapes, bool doTTH) assignStyle fontlab.flLayer.assignStyle = assignStyle (...) assignStyle(flLayer layer) autohint fontlab.flLayer.autohint = autohint (...) bool autohint() autoLayer fontlab.flLayer.autoLayer bool bindDependencies fontlab.flLayer.bindDependencies = bindDependencies (...) bindDependencies() boundingBox fontlab.flLayer.boundingBox QRectF boundingBox() buildAuto fontlab.flLayer.buildAuto = buildAuto (...) bool buildAuto() changed fontlab.flLayer.changed = changed (...) changed() checkInitHistoryState fontlab.flLayer.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) checkTags fontlab.flLayer.checkTags = checkTags (...) bool checkTags(QSet glyph_tags, QString item_tags) cleanEmptyShapes fontlab.flLayer.cleanEmptyShapes = cleanEmptyShapes (...) cleanEmptyShapes() clearAboveHistory fontlab.flLayer.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearAnchors fontlab.flLayer.clearAnchors = clearAnchors (...) clearAnchors() clearComponents fontlab.flLayer.clearComponents = clearComponents (...) clearComponents() clearFlag fontlab.flLayer.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flLayer.clearFlags = clearFlags (...) clearFlags() clone fontlab.flLayer.clone = clone (...) Clone the object cloneCustom fontlab.flLayer.cloneCustom = cloneCustom (...) (flLayer, list(flObject)) cloneCustom(uint) cloneObject fontlab.flLayer.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); compare fontlab.flLayer.compare = compare (...) bool compare(flLayer layer, double error) components fontlab.flLayer.components list(name, transform) componentsCount fontlab.flLayer.componentsCount int componentsCount() compoundMakeSelected fontlab.flLayer.compoundMakeSelected = compoundMakeSelected (...) bool compoundMakeSelected(bool set_active, bool process_all) compoundMakeSelectedToShapes fontlab.flLayer.compoundMakeSelectedToShapes = compoundMakeSelectedToShapes (...) bool compoundMakeSelectedToShapes([bool set_active =true]) compoundReleaseSelected fontlab.flLayer.compoundReleaseSelected bool compoundReleaseSelected(); contourRect fontlab.flLayer.contourRect = contourRect (...) QRectF contourRect() counterAnchors fontlab.flLayer.counterAnchors int counterAnchors() createAnchor fontlab.flLayer.createAnchor = createAnchor (...) flPinPoint createAnchor(QPointF p, bool auto_positioning) createHistoryState fontlab.flLayer.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flLayer.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flLayer.currentHistoryState = currentHistoryState (...) currentHistoryIx() deactivateAllShapes fontlab.flLayer.deactivateAllShapes = deactivateAllShapes (...) deactivateAllShapes() fillFgAnchors fontlab.flLayer.fillFgAnchors = fillFgAnchors (...) fillFgAnchors(fgLayer) fillFgGuides fontlab.flLayer.fillFgGuides = fillFgGuides (...) fillFgGuides(fgLayer) fillFgHints fontlab.flLayer.fillFgHints = fillFgHints (...) fillFgHints(fgLayer) findAnchor fontlab.flLayer.findAnchor = findAnchor (...) flPinPoint findAnchor(QString name) findNearestNode fontlab.flLayer.findNearestNode = findNearestNode (...) (flShape, flNode best_node, double maxd) findNearestNode(QPointF, flNode::NodeType node_type, double maxd) findNode fontlab.flLayer.findNode = findNode (...) (flNode, QPointF)/Nothing findNode(string name) flag fontlab.flLayer.flag = flag (...) flag(uint f) flObjectFlags fontlab.flLayer.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getActiveComposite fontlab.flLayer.getActiveComposite = getActiveComposite (...) flShape/Nothing getActiveComposite() getActiveShape fontlab.flLayer.getActiveShape = getActiveShape (...) (flShape, QTransform)/Nothing getActiveShape([bool = true]) getContours fontlab.flLayer.getContours = getContours (...) list(flContour) getContours() getImgLayer fontlab.flLayer.getImgLayer = getImgLayer (...) flLayer getImgLayer(bool create) getMaskLayer fontlab.flLayer.getMaskLayer = getMaskLayer (...) flLayer getMaskLayer(bool create) getMasterPosition fontlab.flLayer.getMasterPosition = getMasterPosition (...) QMap /Nothing getMasterPosition() getOwnerComposite fontlab.flLayer.getOwnerComposite = getOwnerComposite (...) flShapeInfo getOwnerComposite(flShape, QTransform) / flShapeData getOwnerComposite(flShape) getProperties fontlab.flLayer.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flLayer.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flLayer.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flLayer.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getSelected fontlab.flLayer.getSelected = getSelected (...) list(flContour)/Nothing getSelected(SelectionMode) getShapes fontlab.flLayer.getShapes = getShapes (...) list(flShape) getShapes(ShapeType shape_type) getTthCode fontlab.flLayer.getTthCode = getTthCode (...) bool getTthCode(fgLayer fg_layer, fgTTInterpreter itr) getTthData fontlab.flLayer.getTthData = getTthData (...) list(bytes) / Nothing getTthData(fgLayer fg_layer, fgTTInterpreter itr) getTthProgram fontlab.flLayer.getTthProgram = getTthProgram (...) QString getTthProgram(fgTTInterpreter itr) glyph fontlab.flLayer.glyph flGlyph goDown fontlab.flLayer.goDown = goDown (...) bool goDown(flShape) goUp fontlab.flLayer.goUp = goUp (...) bool goUp(flShape) guidelines fontlab.flLayer.guidelines list(flGuideLine) guidelines() hasAdvanceHeight fontlab.flLayer.hasAdvanceHeight bool hasAdvanceHeight() hasAdvanceWidth fontlab.flLayer.hasAdvanceWidth bool hasAdvanceWidth() hasBody fontlab.flLayer.hasBody bool hasBody() hasChanges fontlab.flLayer.hasChanges bool hasComponents fontlab.flLayer.hasComponents bool hasComponents() hasComposites fontlab.flLayer.hasComposites bool hasComposites() hasGuides fontlab.flLayer.hasGuides bool hasGuides() hasHints fontlab.flLayer.hasHints bool hasHints() hasHistoryState fontlab.flLayer.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flLayer.hasHistoryStates bool hasNote fontlab.flLayer.hasNote bool hasNote() hasShape fontlab.flLayer.hasShape = hasShape (...) bool hasShape(flShape) hasShapeData fontlab.flLayer.hasShapeData = hasShapeData (...) bool hasShapeData(flShapeData) hasTTData fontlab.flLayer.hasTTData bool hasTTData() hasTTH fontlab.flLayer.hasTTH bool hasTTH() haveActiveComposite fontlab.flLayer.haveActiveComposite bool haveActiveComposite() haveObject fontlab.flLayer.haveObject = haveObject (...) bool haveObject(uint); haveSelected fontlab.flLayer.haveSelected = haveSelected (...) bool haveSelected(SelectionMode) hints2links fontlab.flLayer.hints2links = hints2links (...) bool hints2links() historyStates fontlab.flLayer.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flLayer.id object id independedAll fontlab.flLayer.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flLayer.initialHistoryState = initialHistoryState (...) initialHistoryIx() inkBox fontlab.flLayer.inkBox = inkBox (...) QRectF inkBox([QTransform tx = QTransform()]) insertShape fontlab.flLayer.insertShape = insertShape (...) flShape insertShape(int index, flShape shape) instanceType fontlab.flLayer.instanceType = instanceType (...) int instanceType(); isActive fontlab.flLayer.isActive bool isActive() isAllSelected fontlab.flLayer.isAllSelected bool isBack fontlab.flLayer.isBack = isBack (...) bool isBack(flShape) isBodyLayer fontlab.flLayer.isBodyLayer bool isBodyLayer() isChanged fontlab.flLayer.isChanged bool isCompatible fontlab.flLayer.isCompatible = isCompatible (...) bool isCompatible(flLayer, bool strong) isEqual fontlab.flLayer.isEqual = isEqual (...) isEqual(flObject) isFront fontlab.flLayer.isFront = isFront (...) bool isFront(flShape) isImg fontlab.flLayer.isImg bool isImg() isImgLayer fontlab.flLayer.isImgLayer bool isImgLayer() isLocked fontlab.flLayer.isLocked bool isLockedI fontlab.flLayer.isLockedI bool isLockedI() isMask fontlab.flLayer.isMask bool isMask() isMaskLayer fontlab.flLayer.isMaskLayer bool isMaskLayer() isMasterLayer fontlab.flLayer.isMasterLayer bool isMasterLayer() isNull fontlab.flLayer.isNull bool isPresent fontlab.flLayer.isPresent bool isReleased fontlab.flLayer.isReleased bool isService fontlab.flLayer.isService bool isServiceMA fontlab.flLayer.isServiceMA bool isServiceMA() isValid fontlab.flLayer.isValid bool isVisible fontlab.flLayer.isVisible bool isVisibleA fontlab.flLayer.isVisibleA bool isVisibleA() isWireframe fontlab.flLayer.isWireframe bool killAuto fontlab.flLayer.killAuto = killAuto (...) killAuto() mark fontlab.flLayer.mark double metricsLeft fontlab.flLayer.metricsLeft QString metricsRight fontlab.flLayer.metricsRight QString metricsWidth fontlab.flLayer.metricsWidth QString name fontlab.flLayer.name object name nodesCount fontlab.flLayer.nodesCount = nodesCount (...) int nodesCount() note fontlab.flLayer.note QString opacity fontlab.flLayer.opacity double prepareTransformationData fontlab.flLayer.prepareTransformationData = prepareTransformationData (...) prepareTransformationData() recipe fontlab.flLayer.recipe QString refCnt fontlab.flLayer.refCnt object references count release fontlab.flLayer.release = release (...) release() remove fontlab.flLayer.remove = remove (...) remove([flObject]) removeAllShapes fontlab.flLayer.removeAllShapes = removeAllShapes (...) removeAllShapes([ShapeType shape_type=AnyShape]) removeAnchor fontlab.flLayer.removeAnchor = removeAnchor (...) removeAnchor(flPinPoint) removeChild fontlab.flLayer.removeChild = removeChild (...) removeChild(flObject) removeGuides fontlab.flLayer.removeGuides = removeGuides (...) bool removeGuides(bool horizontal, bool vertical) removeHints fontlab.flLayer.removeHints = removeHints (...) bool removeHints(bool horizontal, bool vertical) removeProperty fontlab.flLayer.removeProperty = removeProperty (...) removeProperty('key') removeShape fontlab.flLayer.removeShape = removeShape (...) removeShape(flShape[, bool recursive=true]) reorderShapes fontlab.flLayer.reorderShapes = reorderShapes (...) reorderShapes(QList ) replaceShape fontlab.flLayer.replaceShape = replaceShape (...) replaceShape(flShape old_shape, flShape new_shape) resetInkBox fontlab.flLayer.resetInkBox = resetInkBox (...) resetInkBox() resetMetricsLeft fontlab.flLayer.resetMetricsLeft = resetMetricsLeft (...) resetMetricsLeft() resetMetricsRight fontlab.flLayer.resetMetricsRight = resetMetricsRight (...) resetMetricsRight() resetMetricsWidth fontlab.flLayer.resetMetricsWidth = resetMetricsWidth (...) resetMetricsWidth() resetTransformationData fontlab.flLayer.resetTransformationData = resetTransformationData (...) resetTransformationData() restoreHistoryState fontlab.flLayer.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) selectAll fontlab.flLayer.selectAll = selectAll (...) selectAll() sendToBack fontlab.flLayer.sendToBack = sendToBack (...) bool sendToBack(flShape) sendToFront fontlab.flLayer.sendToFront = sendToFront (...) bool sendToFront(flShape) setActive fontlab.flLayer.setActive = setActive (...) setActive() setActiveShape fontlab.flLayer.setActiveShape = setActiveShape (...) setActiveShape(flShape) setAllShapesSelected fontlab.flLayer.setAllShapesSelected = setAllShapesSelected (...) setAllShapesSelected(bool) setFlag fontlab.flLayer.setFlag = setFlag (...) setFlag(uint f [, bool value]) setGlyphComponents fontlab.flLayer.setGlyphComponents = setGlyphComponents (...) bool setGlyphComponents(QList result, double width, flPackage package, bool colorize) setProperty fontlab.flLayer.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flLayer.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flLayer.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setWireframeColorIx fontlab.flLayer.setWireframeColorIx = setWireframeColorIx (...) setWireframeColorIx(int) shapes fontlab.flLayer.shapes list(flShape) shapes() shapesCount fontlab.flLayer.shapesCount int shapesCount() sortShapes fontlab.flLayer.sortShapes = sortShapes (...) sortShapes() tag fontlab.flLayer.tag = tag (...) tag([string]) takeShapes fontlab.flLayer.takeShapes = takeShapes (...) QList takeShapes(ShapeType shape_type) transferNames fontlab.flLayer.transferNames = transferNames (...) transferNames(flLayer layer) transferTTH fontlab.flLayer.transferTTH = transferTTH (...) bool transferTTH(flLayer) transform fontlab.flLayer.transform QTransform ttData fontlab.flLayer.ttData fgTrueTypeData tthAutohint fontlab.flLayer.tthAutohint = tthAutohint (...) tthAutohint(bool make_hints, fgTTInterpreter itr) tthFixZones fontlab.flLayer.tthFixZones = tthFixZones (...) tthFixZones(fgTTInterpreter itr) tthProgram fontlab.flLayer.tthProgram QList tthReassignStems fontlab.flLayer.tthReassignStems = tthReassignStems (...) tthReassignStems(fgTTInterpreter itr) tthReassignZones fontlab.flLayer.tthReassignZones = tthReassignZones (...) tthReassignZones(fgTTInterpreter itr, bool) tthRemoveCommands fontlab.flLayer.tthRemoveCommands = tthRemoveCommands (...) tthRemoveCommands(bool vertical, bool horizontal) tthRemoveDeltas fontlab.flLayer.tthRemoveDeltas = tthRemoveDeltas (...) tthRemoveDeltas(bool middle, bool final) type fontlab.flLayer.type object type unselectAllNodes fontlab.flLayer.unselectAllNodes = unselectAllNodes (...) unselectAllNodes() update fontlab.flLayer.update = update (...) update() updateAnchors fontlab.flLayer.updateAnchors = updateAnchors (...) updateAnchors() updateGuidelineNode fontlab.flLayer.updateGuidelineNode = updateGuidelineNode (...) flNode updateGuidelineNode(flNode node) wireframeColor fontlab.flLayer.wireframeColor QColor","title":"flLayer"},{"location":"fontlab.flLayer.html#fllayer","text":"","title":"flLayer"},{"location":"fontlab.flLayer.html#addanchor","text":"fontlab.flLayer.addAnchor = addAnchor (...) addAnchor(flPinPoint)","title":"addAnchor"},{"location":"fontlab.flLayer.html#addcomponent","text":"fontlab.flLayer.addComponent = addComponent (...) addComponent(flComponent component)","title":"addComponent"},{"location":"fontlab.flLayer.html#addshape","text":"fontlab.flLayer.addShape = addShape (...) flShape addShape(flShape)","title":"addShape"},{"location":"fontlab.flLayer.html#addshapes","text":"fontlab.flLayer.addShapes = addShapes (...) addShapes(list(flShape))","title":"addShapes"},{"location":"fontlab.flLayer.html#advanceheight","text":"fontlab.flLayer.advanceHeight double","title":"advanceHeight"},{"location":"fontlab.flLayer.html#advancewidth","text":"fontlab.flLayer.advanceWidth double","title":"advanceWidth"},{"location":"fontlab.flLayer.html#anchors","text":"fontlab.flLayer.anchors list(flPinPoint) anchors()","title":"anchors"},{"location":"fontlab.flLayer.html#appendguidelines","text":"fontlab.flLayer.appendGuidelines = appendGuidelines (...) appendGuidelines(list(flGuideLine))","title":"appendGuidelines"},{"location":"fontlab.flLayer.html#applytransform","text":"fontlab.flLayer.applyTransform = applyTransform (...) applyTransform([QTransform transform])","title":"applyTransform"},{"location":"fontlab.flLayer.html#assignfglayer","text":"fontlab.flLayer.assignFgLayer = assignFgLayer (...) assignFgLayer(fgLayer, bool doGuides, bool doHints, bool doAnchors, bool doShapes, bool doTTH)","title":"assignFgLayer"},{"location":"fontlab.flLayer.html#assignstyle","text":"fontlab.flLayer.assignStyle = assignStyle (...) assignStyle(flLayer layer)","title":"assignStyle"},{"location":"fontlab.flLayer.html#autohint","text":"fontlab.flLayer.autohint = autohint (...) bool autohint()","title":"autohint"},{"location":"fontlab.flLayer.html#autolayer","text":"fontlab.flLayer.autoLayer bool","title":"autoLayer"},{"location":"fontlab.flLayer.html#binddependencies","text":"fontlab.flLayer.bindDependencies = bindDependencies (...) bindDependencies()","title":"bindDependencies"},{"location":"fontlab.flLayer.html#boundingbox","text":"fontlab.flLayer.boundingBox QRectF boundingBox()","title":"boundingBox"},{"location":"fontlab.flLayer.html#buildauto","text":"fontlab.flLayer.buildAuto = buildAuto (...) bool buildAuto()","title":"buildAuto"},{"location":"fontlab.flLayer.html#changed","text":"fontlab.flLayer.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flLayer.html#checkinithistorystate","text":"fontlab.flLayer.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flLayer.html#checktags","text":"fontlab.flLayer.checkTags = checkTags (...) bool checkTags(QSet glyph_tags, QString item_tags)","title":"checkTags"},{"location":"fontlab.flLayer.html#cleanemptyshapes","text":"fontlab.flLayer.cleanEmptyShapes = cleanEmptyShapes (...) cleanEmptyShapes()","title":"cleanEmptyShapes"},{"location":"fontlab.flLayer.html#clearabovehistory","text":"fontlab.flLayer.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flLayer.html#clearanchors","text":"fontlab.flLayer.clearAnchors = clearAnchors (...) clearAnchors()","title":"clearAnchors"},{"location":"fontlab.flLayer.html#clearcomponents","text":"fontlab.flLayer.clearComponents = clearComponents (...) clearComponents()","title":"clearComponents"},{"location":"fontlab.flLayer.html#clearflag","text":"fontlab.flLayer.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flLayer.html#clearflags","text":"fontlab.flLayer.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flLayer.html#clone","text":"fontlab.flLayer.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flLayer.html#clonecustom","text":"fontlab.flLayer.cloneCustom = cloneCustom (...) (flLayer, list(flObject)) cloneCustom(uint)","title":"cloneCustom"},{"location":"fontlab.flLayer.html#cloneobject","text":"fontlab.flLayer.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flLayer.html#compare","text":"fontlab.flLayer.compare = compare (...) bool compare(flLayer layer, double error)","title":"compare"},{"location":"fontlab.flLayer.html#components","text":"fontlab.flLayer.components list(name, transform)","title":"components"},{"location":"fontlab.flLayer.html#componentscount","text":"fontlab.flLayer.componentsCount int componentsCount()","title":"componentsCount"},{"location":"fontlab.flLayer.html#compoundmakeselected","text":"fontlab.flLayer.compoundMakeSelected = compoundMakeSelected (...) bool compoundMakeSelected(bool set_active, bool process_all)","title":"compoundMakeSelected"},{"location":"fontlab.flLayer.html#compoundmakeselectedtoshapes","text":"fontlab.flLayer.compoundMakeSelectedToShapes = compoundMakeSelectedToShapes (...) bool compoundMakeSelectedToShapes([bool set_active =true])","title":"compoundMakeSelectedToShapes"},{"location":"fontlab.flLayer.html#compoundreleaseselected","text":"fontlab.flLayer.compoundReleaseSelected bool compoundReleaseSelected();","title":"compoundReleaseSelected"},{"location":"fontlab.flLayer.html#contourrect","text":"fontlab.flLayer.contourRect = contourRect (...) QRectF contourRect()","title":"contourRect"},{"location":"fontlab.flLayer.html#counteranchors","text":"fontlab.flLayer.counterAnchors int counterAnchors()","title":"counterAnchors"},{"location":"fontlab.flLayer.html#createanchor","text":"fontlab.flLayer.createAnchor = createAnchor (...) flPinPoint createAnchor(QPointF p, bool auto_positioning)","title":"createAnchor"},{"location":"fontlab.flLayer.html#createhistorystate","text":"fontlab.flLayer.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flLayer.html#createobject","text":"fontlab.flLayer.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flLayer.html#currenthistorystate","text":"fontlab.flLayer.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flLayer.html#deactivateallshapes","text":"fontlab.flLayer.deactivateAllShapes = deactivateAllShapes (...) deactivateAllShapes()","title":"deactivateAllShapes"},{"location":"fontlab.flLayer.html#fillfganchors","text":"fontlab.flLayer.fillFgAnchors = fillFgAnchors (...) fillFgAnchors(fgLayer)","title":"fillFgAnchors"},{"location":"fontlab.flLayer.html#fillfgguides","text":"fontlab.flLayer.fillFgGuides = fillFgGuides (...) fillFgGuides(fgLayer)","title":"fillFgGuides"},{"location":"fontlab.flLayer.html#fillfghints","text":"fontlab.flLayer.fillFgHints = fillFgHints (...) fillFgHints(fgLayer)","title":"fillFgHints"},{"location":"fontlab.flLayer.html#findanchor","text":"fontlab.flLayer.findAnchor = findAnchor (...) flPinPoint findAnchor(QString name)","title":"findAnchor"},{"location":"fontlab.flLayer.html#findnearestnode","text":"fontlab.flLayer.findNearestNode = findNearestNode (...) (flShape, flNode best_node, double maxd) findNearestNode(QPointF, flNode::NodeType node_type, double maxd)","title":"findNearestNode"},{"location":"fontlab.flLayer.html#findnode","text":"fontlab.flLayer.findNode = findNode (...) (flNode, QPointF)/Nothing findNode(string name)","title":"findNode"},{"location":"fontlab.flLayer.html#flag","text":"fontlab.flLayer.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flLayer.html#flobjectflags","text":"fontlab.flLayer.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flLayer.html#getactivecomposite","text":"fontlab.flLayer.getActiveComposite = getActiveComposite (...) flShape/Nothing getActiveComposite()","title":"getActiveComposite"},{"location":"fontlab.flLayer.html#getactiveshape","text":"fontlab.flLayer.getActiveShape = getActiveShape (...) (flShape, QTransform)/Nothing getActiveShape([bool = true])","title":"getActiveShape"},{"location":"fontlab.flLayer.html#getcontours","text":"fontlab.flLayer.getContours = getContours (...) list(flContour) getContours()","title":"getContours"},{"location":"fontlab.flLayer.html#getimglayer","text":"fontlab.flLayer.getImgLayer = getImgLayer (...) flLayer getImgLayer(bool create)","title":"getImgLayer"},{"location":"fontlab.flLayer.html#getmasklayer","text":"fontlab.flLayer.getMaskLayer = getMaskLayer (...) flLayer getMaskLayer(bool create)","title":"getMaskLayer"},{"location":"fontlab.flLayer.html#getmasterposition","text":"fontlab.flLayer.getMasterPosition = getMasterPosition (...) QMap /Nothing getMasterPosition()","title":"getMasterPosition"},{"location":"fontlab.flLayer.html#getownercomposite","text":"fontlab.flLayer.getOwnerComposite = getOwnerComposite (...) flShapeInfo getOwnerComposite(flShape, QTransform) / flShapeData getOwnerComposite(flShape)","title":"getOwnerComposite"},{"location":"fontlab.flLayer.html#getproperties","text":"fontlab.flLayer.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flLayer.html#getproperty","text":"fontlab.flLayer.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flLayer.html#getpropertyfloat","text":"fontlab.flLayer.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flLayer.html#getpropertyint","text":"fontlab.flLayer.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flLayer.html#getselected","text":"fontlab.flLayer.getSelected = getSelected (...) list(flContour)/Nothing getSelected(SelectionMode)","title":"getSelected"},{"location":"fontlab.flLayer.html#getshapes","text":"fontlab.flLayer.getShapes = getShapes (...) list(flShape) getShapes(ShapeType shape_type)","title":"getShapes"},{"location":"fontlab.flLayer.html#gettthcode","text":"fontlab.flLayer.getTthCode = getTthCode (...) bool getTthCode(fgLayer fg_layer, fgTTInterpreter itr)","title":"getTthCode"},{"location":"fontlab.flLayer.html#gettthdata","text":"fontlab.flLayer.getTthData = getTthData (...) list(bytes) / Nothing getTthData(fgLayer fg_layer, fgTTInterpreter itr)","title":"getTthData"},{"location":"fontlab.flLayer.html#gettthprogram","text":"fontlab.flLayer.getTthProgram = getTthProgram (...) QString getTthProgram(fgTTInterpreter itr)","title":"getTthProgram"},{"location":"fontlab.flLayer.html#glyph","text":"fontlab.flLayer.glyph flGlyph","title":"glyph"},{"location":"fontlab.flLayer.html#godown","text":"fontlab.flLayer.goDown = goDown (...) bool goDown(flShape)","title":"goDown"},{"location":"fontlab.flLayer.html#goup","text":"fontlab.flLayer.goUp = goUp (...) bool goUp(flShape)","title":"goUp"},{"location":"fontlab.flLayer.html#guidelines","text":"fontlab.flLayer.guidelines list(flGuideLine) guidelines()","title":"guidelines"},{"location":"fontlab.flLayer.html#hasadvanceheight","text":"fontlab.flLayer.hasAdvanceHeight bool hasAdvanceHeight()","title":"hasAdvanceHeight"},{"location":"fontlab.flLayer.html#hasadvancewidth","text":"fontlab.flLayer.hasAdvanceWidth bool hasAdvanceWidth()","title":"hasAdvanceWidth"},{"location":"fontlab.flLayer.html#hasbody","text":"fontlab.flLayer.hasBody bool hasBody()","title":"hasBody"},{"location":"fontlab.flLayer.html#haschanges","text":"fontlab.flLayer.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flLayer.html#hascomponents","text":"fontlab.flLayer.hasComponents bool hasComponents()","title":"hasComponents"},{"location":"fontlab.flLayer.html#hascomposites","text":"fontlab.flLayer.hasComposites bool hasComposites()","title":"hasComposites"},{"location":"fontlab.flLayer.html#hasguides","text":"fontlab.flLayer.hasGuides bool hasGuides()","title":"hasGuides"},{"location":"fontlab.flLayer.html#hashints","text":"fontlab.flLayer.hasHints bool hasHints()","title":"hasHints"},{"location":"fontlab.flLayer.html#hashistorystate","text":"fontlab.flLayer.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flLayer.html#hashistorystates","text":"fontlab.flLayer.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flLayer.html#hasnote","text":"fontlab.flLayer.hasNote bool hasNote()","title":"hasNote"},{"location":"fontlab.flLayer.html#hasshape","text":"fontlab.flLayer.hasShape = hasShape (...) bool hasShape(flShape)","title":"hasShape"},{"location":"fontlab.flLayer.html#hasshapedata","text":"fontlab.flLayer.hasShapeData = hasShapeData (...) bool hasShapeData(flShapeData)","title":"hasShapeData"},{"location":"fontlab.flLayer.html#hasttdata","text":"fontlab.flLayer.hasTTData bool hasTTData()","title":"hasTTData"},{"location":"fontlab.flLayer.html#hastth","text":"fontlab.flLayer.hasTTH bool hasTTH()","title":"hasTTH"},{"location":"fontlab.flLayer.html#haveactivecomposite","text":"fontlab.flLayer.haveActiveComposite bool haveActiveComposite()","title":"haveActiveComposite"},{"location":"fontlab.flLayer.html#haveobject","text":"fontlab.flLayer.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flLayer.html#haveselected","text":"fontlab.flLayer.haveSelected = haveSelected (...) bool haveSelected(SelectionMode)","title":"haveSelected"},{"location":"fontlab.flLayer.html#hints2links","text":"fontlab.flLayer.hints2links = hints2links (...) bool hints2links()","title":"hints2links"},{"location":"fontlab.flLayer.html#historystates","text":"fontlab.flLayer.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flLayer.html#id","text":"fontlab.flLayer.id object id","title":"id"},{"location":"fontlab.flLayer.html#independedall","text":"fontlab.flLayer.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flLayer.html#initialhistorystate","text":"fontlab.flLayer.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flLayer.html#inkbox","text":"fontlab.flLayer.inkBox = inkBox (...) QRectF inkBox([QTransform tx = QTransform()])","title":"inkBox"},{"location":"fontlab.flLayer.html#insertshape","text":"fontlab.flLayer.insertShape = insertShape (...) flShape insertShape(int index, flShape shape)","title":"insertShape"},{"location":"fontlab.flLayer.html#instancetype","text":"fontlab.flLayer.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flLayer.html#isactive","text":"fontlab.flLayer.isActive bool isActive()","title":"isActive"},{"location":"fontlab.flLayer.html#isallselected","text":"fontlab.flLayer.isAllSelected bool","title":"isAllSelected"},{"location":"fontlab.flLayer.html#isback","text":"fontlab.flLayer.isBack = isBack (...) bool isBack(flShape)","title":"isBack"},{"location":"fontlab.flLayer.html#isbodylayer","text":"fontlab.flLayer.isBodyLayer bool isBodyLayer()","title":"isBodyLayer"},{"location":"fontlab.flLayer.html#ischanged","text":"fontlab.flLayer.isChanged bool","title":"isChanged"},{"location":"fontlab.flLayer.html#iscompatible","text":"fontlab.flLayer.isCompatible = isCompatible (...) bool isCompatible(flLayer, bool strong)","title":"isCompatible"},{"location":"fontlab.flLayer.html#isequal","text":"fontlab.flLayer.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flLayer.html#isfront","text":"fontlab.flLayer.isFront = isFront (...) bool isFront(flShape)","title":"isFront"},{"location":"fontlab.flLayer.html#isimg","text":"fontlab.flLayer.isImg bool isImg()","title":"isImg"},{"location":"fontlab.flLayer.html#isimglayer","text":"fontlab.flLayer.isImgLayer bool isImgLayer()","title":"isImgLayer"},{"location":"fontlab.flLayer.html#islocked","text":"fontlab.flLayer.isLocked bool","title":"isLocked"},{"location":"fontlab.flLayer.html#islockedi","text":"fontlab.flLayer.isLockedI bool isLockedI()","title":"isLockedI"},{"location":"fontlab.flLayer.html#ismask","text":"fontlab.flLayer.isMask bool isMask()","title":"isMask"},{"location":"fontlab.flLayer.html#ismasklayer","text":"fontlab.flLayer.isMaskLayer bool isMaskLayer()","title":"isMaskLayer"},{"location":"fontlab.flLayer.html#ismasterlayer","text":"fontlab.flLayer.isMasterLayer bool isMasterLayer()","title":"isMasterLayer"},{"location":"fontlab.flLayer.html#isnull","text":"fontlab.flLayer.isNull bool","title":"isNull"},{"location":"fontlab.flLayer.html#ispresent","text":"fontlab.flLayer.isPresent bool","title":"isPresent"},{"location":"fontlab.flLayer.html#isreleased","text":"fontlab.flLayer.isReleased bool","title":"isReleased"},{"location":"fontlab.flLayer.html#isservice","text":"fontlab.flLayer.isService bool","title":"isService"},{"location":"fontlab.flLayer.html#isservicema","text":"fontlab.flLayer.isServiceMA bool isServiceMA()","title":"isServiceMA"},{"location":"fontlab.flLayer.html#isvalid","text":"fontlab.flLayer.isValid bool","title":"isValid"},{"location":"fontlab.flLayer.html#isvisible","text":"fontlab.flLayer.isVisible bool","title":"isVisible"},{"location":"fontlab.flLayer.html#isvisiblea","text":"fontlab.flLayer.isVisibleA bool isVisibleA()","title":"isVisibleA"},{"location":"fontlab.flLayer.html#iswireframe","text":"fontlab.flLayer.isWireframe bool","title":"isWireframe"},{"location":"fontlab.flLayer.html#killauto","text":"fontlab.flLayer.killAuto = killAuto (...) killAuto()","title":"killAuto"},{"location":"fontlab.flLayer.html#mark","text":"fontlab.flLayer.mark double","title":"mark"},{"location":"fontlab.flLayer.html#metricsleft","text":"fontlab.flLayer.metricsLeft QString","title":"metricsLeft"},{"location":"fontlab.flLayer.html#metricsright","text":"fontlab.flLayer.metricsRight QString","title":"metricsRight"},{"location":"fontlab.flLayer.html#metricswidth","text":"fontlab.flLayer.metricsWidth QString","title":"metricsWidth"},{"location":"fontlab.flLayer.html#name","text":"fontlab.flLayer.name object name","title":"name"},{"location":"fontlab.flLayer.html#nodescount","text":"fontlab.flLayer.nodesCount = nodesCount (...) int nodesCount()","title":"nodesCount"},{"location":"fontlab.flLayer.html#note","text":"fontlab.flLayer.note QString","title":"note"},{"location":"fontlab.flLayer.html#opacity","text":"fontlab.flLayer.opacity double","title":"opacity"},{"location":"fontlab.flLayer.html#preparetransformationdata","text":"fontlab.flLayer.prepareTransformationData = prepareTransformationData (...) prepareTransformationData()","title":"prepareTransformationData"},{"location":"fontlab.flLayer.html#recipe","text":"fontlab.flLayer.recipe QString","title":"recipe"},{"location":"fontlab.flLayer.html#refcnt","text":"fontlab.flLayer.refCnt object references count","title":"refCnt"},{"location":"fontlab.flLayer.html#release","text":"fontlab.flLayer.release = release (...) release()","title":"release"},{"location":"fontlab.flLayer.html#remove","text":"fontlab.flLayer.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flLayer.html#removeallshapes","text":"fontlab.flLayer.removeAllShapes = removeAllShapes (...) removeAllShapes([ShapeType shape_type=AnyShape])","title":"removeAllShapes"},{"location":"fontlab.flLayer.html#removeanchor","text":"fontlab.flLayer.removeAnchor = removeAnchor (...) removeAnchor(flPinPoint)","title":"removeAnchor"},{"location":"fontlab.flLayer.html#removechild","text":"fontlab.flLayer.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flLayer.html#removeguides","text":"fontlab.flLayer.removeGuides = removeGuides (...) bool removeGuides(bool horizontal, bool vertical)","title":"removeGuides"},{"location":"fontlab.flLayer.html#removehints","text":"fontlab.flLayer.removeHints = removeHints (...) bool removeHints(bool horizontal, bool vertical)","title":"removeHints"},{"location":"fontlab.flLayer.html#removeproperty","text":"fontlab.flLayer.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flLayer.html#removeshape","text":"fontlab.flLayer.removeShape = removeShape (...) removeShape(flShape[, bool recursive=true])","title":"removeShape"},{"location":"fontlab.flLayer.html#reordershapes","text":"fontlab.flLayer.reorderShapes = reorderShapes (...) reorderShapes(QList )","title":"reorderShapes"},{"location":"fontlab.flLayer.html#replaceshape","text":"fontlab.flLayer.replaceShape = replaceShape (...) replaceShape(flShape old_shape, flShape new_shape)","title":"replaceShape"},{"location":"fontlab.flLayer.html#resetinkbox","text":"fontlab.flLayer.resetInkBox = resetInkBox (...) resetInkBox()","title":"resetInkBox"},{"location":"fontlab.flLayer.html#resetmetricsleft","text":"fontlab.flLayer.resetMetricsLeft = resetMetricsLeft (...) resetMetricsLeft()","title":"resetMetricsLeft"},{"location":"fontlab.flLayer.html#resetmetricsright","text":"fontlab.flLayer.resetMetricsRight = resetMetricsRight (...) resetMetricsRight()","title":"resetMetricsRight"},{"location":"fontlab.flLayer.html#resetmetricswidth","text":"fontlab.flLayer.resetMetricsWidth = resetMetricsWidth (...) resetMetricsWidth()","title":"resetMetricsWidth"},{"location":"fontlab.flLayer.html#resettransformationdata","text":"fontlab.flLayer.resetTransformationData = resetTransformationData (...) resetTransformationData()","title":"resetTransformationData"},{"location":"fontlab.flLayer.html#restorehistorystate","text":"fontlab.flLayer.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flLayer.html#selectall","text":"fontlab.flLayer.selectAll = selectAll (...) selectAll()","title":"selectAll"},{"location":"fontlab.flLayer.html#sendtoback","text":"fontlab.flLayer.sendToBack = sendToBack (...) bool sendToBack(flShape)","title":"sendToBack"},{"location":"fontlab.flLayer.html#sendtofront","text":"fontlab.flLayer.sendToFront = sendToFront (...) bool sendToFront(flShape)","title":"sendToFront"},{"location":"fontlab.flLayer.html#setactive","text":"fontlab.flLayer.setActive = setActive (...) setActive()","title":"setActive"},{"location":"fontlab.flLayer.html#setactiveshape","text":"fontlab.flLayer.setActiveShape = setActiveShape (...) setActiveShape(flShape)","title":"setActiveShape"},{"location":"fontlab.flLayer.html#setallshapesselected","text":"fontlab.flLayer.setAllShapesSelected = setAllShapesSelected (...) setAllShapesSelected(bool)","title":"setAllShapesSelected"},{"location":"fontlab.flLayer.html#setflag","text":"fontlab.flLayer.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flLayer.html#setglyphcomponents","text":"fontlab.flLayer.setGlyphComponents = setGlyphComponents (...) bool setGlyphComponents(QList result, double width, flPackage package, bool colorize)","title":"setGlyphComponents"},{"location":"fontlab.flLayer.html#setproperty","text":"fontlab.flLayer.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flLayer.html#setpropertyfloat","text":"fontlab.flLayer.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flLayer.html#setpropertyint","text":"fontlab.flLayer.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flLayer.html#setwireframecolorix","text":"fontlab.flLayer.setWireframeColorIx = setWireframeColorIx (...) setWireframeColorIx(int)","title":"setWireframeColorIx"},{"location":"fontlab.flLayer.html#shapes","text":"fontlab.flLayer.shapes list(flShape) shapes()","title":"shapes"},{"location":"fontlab.flLayer.html#shapescount","text":"fontlab.flLayer.shapesCount int shapesCount()","title":"shapesCount"},{"location":"fontlab.flLayer.html#sortshapes","text":"fontlab.flLayer.sortShapes = sortShapes (...) sortShapes()","title":"sortShapes"},{"location":"fontlab.flLayer.html#tag","text":"fontlab.flLayer.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flLayer.html#takeshapes","text":"fontlab.flLayer.takeShapes = takeShapes (...) QList takeShapes(ShapeType shape_type)","title":"takeShapes"},{"location":"fontlab.flLayer.html#transfernames","text":"fontlab.flLayer.transferNames = transferNames (...) transferNames(flLayer layer)","title":"transferNames"},{"location":"fontlab.flLayer.html#transfertth","text":"fontlab.flLayer.transferTTH = transferTTH (...) bool transferTTH(flLayer)","title":"transferTTH"},{"location":"fontlab.flLayer.html#transform","text":"fontlab.flLayer.transform QTransform","title":"transform"},{"location":"fontlab.flLayer.html#ttdata","text":"fontlab.flLayer.ttData fgTrueTypeData","title":"ttData"},{"location":"fontlab.flLayer.html#tthautohint","text":"fontlab.flLayer.tthAutohint = tthAutohint (...) tthAutohint(bool make_hints, fgTTInterpreter itr)","title":"tthAutohint"},{"location":"fontlab.flLayer.html#tthfixzones","text":"fontlab.flLayer.tthFixZones = tthFixZones (...) tthFixZones(fgTTInterpreter itr)","title":"tthFixZones"},{"location":"fontlab.flLayer.html#tthprogram","text":"fontlab.flLayer.tthProgram QList","title":"tthProgram"},{"location":"fontlab.flLayer.html#tthreassignstems","text":"fontlab.flLayer.tthReassignStems = tthReassignStems (...) tthReassignStems(fgTTInterpreter itr)","title":"tthReassignStems"},{"location":"fontlab.flLayer.html#tthreassignzones","text":"fontlab.flLayer.tthReassignZones = tthReassignZones (...) tthReassignZones(fgTTInterpreter itr, bool)","title":"tthReassignZones"},{"location":"fontlab.flLayer.html#tthremovecommands","text":"fontlab.flLayer.tthRemoveCommands = tthRemoveCommands (...) tthRemoveCommands(bool vertical, bool horizontal)","title":"tthRemoveCommands"},{"location":"fontlab.flLayer.html#tthremovedeltas","text":"fontlab.flLayer.tthRemoveDeltas = tthRemoveDeltas (...) tthRemoveDeltas(bool middle, bool final)","title":"tthRemoveDeltas"},{"location":"fontlab.flLayer.html#type","text":"fontlab.flLayer.type object type","title":"type"},{"location":"fontlab.flLayer.html#unselectallnodes","text":"fontlab.flLayer.unselectAllNodes = unselectAllNodes (...) unselectAllNodes()","title":"unselectAllNodes"},{"location":"fontlab.flLayer.html#update","text":"fontlab.flLayer.update = update (...) update()","title":"update"},{"location":"fontlab.flLayer.html#updateanchors","text":"fontlab.flLayer.updateAnchors = updateAnchors (...) updateAnchors()","title":"updateAnchors"},{"location":"fontlab.flLayer.html#updateguidelinenode","text":"fontlab.flLayer.updateGuidelineNode = updateGuidelineNode (...) flNode updateGuidelineNode(flNode node)","title":"updateGuidelineNode"},{"location":"fontlab.flLayer.html#wireframecolor","text":"fontlab.flLayer.wireframeColor QColor","title":"wireframeColor"},{"location":"fontlab.flLayerAttributes.html","text":"flLayerAttributes fontlab.flLayerAttributes = class flLayerAttributes ( object ) Data wrapper Methods __add__ (...) x. __add__ (y) < ==> x+y __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __getslice__ (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __mul__ (...) x. __mul__ (n) < ==> x*n __repr__ (...) x. __repr__ () < ==> repr(x) __rmul__ (...) x. __rmul__ (n) < ==> n*x __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __str__ (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors isActive isLocked isService isVisible isWireframe wireframeColor Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T asDict fontlab.flLayerAttributes.asDict = asDict (...) represent object as dictionary asTuple fontlab.flLayerAttributes.asTuple = asTuple (...) represent object as tuple","title":"flLayerAttributes"},{"location":"fontlab.flLayerAttributes.html#fllayerattributes","text":"","title":"flLayerAttributes"},{"location":"fontlab.flLayerAttributes.html#asdict","text":"fontlab.flLayerAttributes.asDict = asDict (...) represent object as dictionary","title":"asDict"},{"location":"fontlab.flLayerAttributes.html#astuple","text":"fontlab.flLayerAttributes.asTuple = asTuple (...) represent object as tuple","title":"asTuple"},{"location":"fontlab.flLayerInfo.html","text":"flLayerInfo fontlab.flLayerInfo = class flLayerInfo ( object ) flLayerInfo representation Constructors: flLayerInfo() flLayerInfo(flObject) flLayerInfo(flLayerInfo) flLayerInfo(flLayer, QTransform) flLayerInfo(flLayer, flObject glyph_info, QTransform) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value brectOnCanvas (...) QRectF brectOnCanvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flLayerInfo createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool layer flLayer name object name refCnt object references count transform transform matrix type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} brectOnCanvas fontlab.flLayerInfo.brectOnCanvas = brectOnCanvas (...) QRectF brectOnCanvas() changed fontlab.flLayerInfo.changed = changed (...) changed() checkInitHistoryState fontlab.flLayerInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flLayerInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flLayerInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flLayerInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flLayerInfo.clone = clone (...) Clone the object cloneObject fontlab.flLayerInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); combine fontlab.flLayerInfo.combine = combine (...) combine(QTransform transform) createHistoryState fontlab.flLayerInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flLayerInfo.createInstance = createInstance (...) flLayerInfo createInstance() createObject fontlab.flLayerInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flLayerInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() dist fontlab.flLayerInfo.dist double dist flag fontlab.flLayerInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flLayerInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flLayerInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flLayerInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flLayerInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flLayerInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' glyphInfo fontlab.flLayerInfo.glyphInfo flObject - glyph info hasChanges fontlab.flLayerInfo.hasChanges bool hasHistoryState fontlab.flLayerInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flLayerInfo.hasHistoryStates bool haveObject fontlab.flLayerInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flLayerInfo.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flLayerInfo.id object id independedAll fontlab.flLayerInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flLayerInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flLayerInfo.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flLayerInfo.isChanged bool isEqual fontlab.flLayerInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flLayerInfo.isNull bool isPresent fontlab.flLayerInfo.isPresent bool isReleased fontlab.flLayerInfo.isReleased bool isValid fontlab.flLayerInfo.isValid bool layer fontlab.flLayerInfo.layer flLayer name fontlab.flLayerInfo.name object name refCnt fontlab.flLayerInfo.refCnt object references count release fontlab.flLayerInfo.release = release (...) release() remove fontlab.flLayerInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flLayerInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flLayerInfo.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flLayerInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flLayerInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flLayerInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flLayerInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flLayerInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flLayerInfo.tag = tag (...) tag([string]) transform fontlab.flLayerInfo.transform transform matrix type fontlab.flLayerInfo.type object type update fontlab.flLayerInfo.update = update (...) update()","title":"flLayerInfo"},{"location":"fontlab.flLayerInfo.html#fllayerinfo","text":"","title":"flLayerInfo"},{"location":"fontlab.flLayerInfo.html#brectoncanvas","text":"fontlab.flLayerInfo.brectOnCanvas = brectOnCanvas (...) QRectF brectOnCanvas()","title":"brectOnCanvas"},{"location":"fontlab.flLayerInfo.html#changed","text":"fontlab.flLayerInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flLayerInfo.html#checkinithistorystate","text":"fontlab.flLayerInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flLayerInfo.html#clearabovehistory","text":"fontlab.flLayerInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flLayerInfo.html#clearflag","text":"fontlab.flLayerInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flLayerInfo.html#clearflags","text":"fontlab.flLayerInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flLayerInfo.html#clone","text":"fontlab.flLayerInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flLayerInfo.html#cloneobject","text":"fontlab.flLayerInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flLayerInfo.html#combine","text":"fontlab.flLayerInfo.combine = combine (...) combine(QTransform transform)","title":"combine"},{"location":"fontlab.flLayerInfo.html#createhistorystate","text":"fontlab.flLayerInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flLayerInfo.html#createinstance","text":"fontlab.flLayerInfo.createInstance = createInstance (...) flLayerInfo createInstance()","title":"createInstance"},{"location":"fontlab.flLayerInfo.html#createobject","text":"fontlab.flLayerInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flLayerInfo.html#currenthistorystate","text":"fontlab.flLayerInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flLayerInfo.html#dist","text":"fontlab.flLayerInfo.dist double dist","title":"dist"},{"location":"fontlab.flLayerInfo.html#flag","text":"fontlab.flLayerInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flLayerInfo.html#flobjectflags","text":"fontlab.flLayerInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flLayerInfo.html#getproperties","text":"fontlab.flLayerInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flLayerInfo.html#getproperty","text":"fontlab.flLayerInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flLayerInfo.html#getpropertyfloat","text":"fontlab.flLayerInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flLayerInfo.html#getpropertyint","text":"fontlab.flLayerInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flLayerInfo.html#glyphinfo","text":"fontlab.flLayerInfo.glyphInfo flObject - glyph info","title":"glyphInfo"},{"location":"fontlab.flLayerInfo.html#haschanges","text":"fontlab.flLayerInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flLayerInfo.html#hashistorystate","text":"fontlab.flLayerInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flLayerInfo.html#hashistorystates","text":"fontlab.flLayerInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flLayerInfo.html#haveobject","text":"fontlab.flLayerInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flLayerInfo.html#historystates","text":"fontlab.flLayerInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flLayerInfo.html#id","text":"fontlab.flLayerInfo.id object id","title":"id"},{"location":"fontlab.flLayerInfo.html#independedall","text":"fontlab.flLayerInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flLayerInfo.html#initialhistorystate","text":"fontlab.flLayerInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flLayerInfo.html#instancetype","text":"fontlab.flLayerInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flLayerInfo.html#ischanged","text":"fontlab.flLayerInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flLayerInfo.html#isequal","text":"fontlab.flLayerInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flLayerInfo.html#isnull","text":"fontlab.flLayerInfo.isNull bool","title":"isNull"},{"location":"fontlab.flLayerInfo.html#ispresent","text":"fontlab.flLayerInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flLayerInfo.html#isreleased","text":"fontlab.flLayerInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flLayerInfo.html#isvalid","text":"fontlab.flLayerInfo.isValid bool","title":"isValid"},{"location":"fontlab.flLayerInfo.html#layer","text":"fontlab.flLayerInfo.layer flLayer","title":"layer"},{"location":"fontlab.flLayerInfo.html#name","text":"fontlab.flLayerInfo.name object name","title":"name"},{"location":"fontlab.flLayerInfo.html#refcnt","text":"fontlab.flLayerInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flLayerInfo.html#release","text":"fontlab.flLayerInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flLayerInfo.html#remove","text":"fontlab.flLayerInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flLayerInfo.html#removechild","text":"fontlab.flLayerInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flLayerInfo.html#removeproperty","text":"fontlab.flLayerInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flLayerInfo.html#restorehistorystate","text":"fontlab.flLayerInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flLayerInfo.html#setflag","text":"fontlab.flLayerInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flLayerInfo.html#setproperty","text":"fontlab.flLayerInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flLayerInfo.html#setpropertyfloat","text":"fontlab.flLayerInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flLayerInfo.html#setpropertyint","text":"fontlab.flLayerInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flLayerInfo.html#tag","text":"fontlab.flLayerInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flLayerInfo.html#transform","text":"fontlab.flLayerInfo.transform transform matrix","title":"transform"},{"location":"fontlab.flLayerInfo.html#type","text":"fontlab.flLayerInfo.type object type","title":"type"},{"location":"fontlab.flLayerInfo.html#update","text":"fontlab.flLayerInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flLocation.html","text":"flLocation fontlab.flLocation = class flLocation ( object ) flLocation representation Constructors: flLocation(flLocation) flLocation() Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __len__ (...) x. __len__ () < ==> len(x) __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T","title":"flLocation"},{"location":"fontlab.flLocation.html#fllocation","text":"","title":"flLocation"},{"location":"fontlab.flMarkerPoint.html","text":"flMarkerPoint fontlab.flMarkerPoint = class flMarkerPoint ( object ) flMarkerPoint representation Constructors: flMarkerPoint() flMarkerPoint(flObject) flMarkerPoint(flMarkerPoint) flMarkerPoint(double marker_pos, uint markerFlags, flSnaps::MarkerKey key) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) markerFlag (...) uint markerFlag (uint role) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setMarkerFlag (...) setMarkerFlag (uint role, uint markerFlags) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flMarkerPoint createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isSelected bool isStem bool isValid bool key flSnaps::MarkerKey key() markerFlags uint name object name position double refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flMarkerPoint.changed = changed (...) changed() checkInitHistoryState fontlab.flMarkerPoint.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flMarkerPoint.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flMarkerPoint.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flMarkerPoint.clearFlags = clearFlags (...) clearFlags() clone fontlab.flMarkerPoint.clone = clone (...) Clone the object cloneObject fontlab.flMarkerPoint.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flMarkerPoint.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flMarkerPoint.createInstance = createInstance (...) flMarkerPoint createInstance() createObject fontlab.flMarkerPoint.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flMarkerPoint.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flMarkerPoint.flag = flag (...) flag(uint f) flObjectFlags fontlab.flMarkerPoint.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flMarkerPoint.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flMarkerPoint.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flMarkerPoint.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flMarkerPoint.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flMarkerPoint.hasChanges bool hasHistoryState fontlab.flMarkerPoint.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flMarkerPoint.hasHistoryStates bool haveObject fontlab.flMarkerPoint.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flMarkerPoint.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flMarkerPoint.id object id independedAll fontlab.flMarkerPoint.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flMarkerPoint.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flMarkerPoint.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flMarkerPoint.isChanged bool isEqual fontlab.flMarkerPoint.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flMarkerPoint.isNull bool isPresent fontlab.flMarkerPoint.isPresent bool isReleased fontlab.flMarkerPoint.isReleased bool isSelected fontlab.flMarkerPoint.isSelected bool isStem fontlab.flMarkerPoint.isStem bool isValid fontlab.flMarkerPoint.isValid bool key fontlab.flMarkerPoint.key flSnaps::MarkerKey key() markerFlag fontlab.flMarkerPoint.markerFlag = markerFlag (...) uint markerFlag(uint role) markerFlags fontlab.flMarkerPoint.markerFlags uint name fontlab.flMarkerPoint.name object name position fontlab.flMarkerPoint.position double refCnt fontlab.flMarkerPoint.refCnt object references count release fontlab.flMarkerPoint.release = release (...) release() remove fontlab.flMarkerPoint.remove = remove (...) remove([flObject]) removeChild fontlab.flMarkerPoint.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flMarkerPoint.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flMarkerPoint.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flMarkerPoint.setFlag = setFlag (...) setFlag(uint f [, bool value]) setMarkerFlag fontlab.flMarkerPoint.setMarkerFlag = setMarkerFlag (...) setMarkerFlag(uint role, uint markerFlags) setProperty fontlab.flMarkerPoint.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flMarkerPoint.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flMarkerPoint.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flMarkerPoint.tag = tag (...) tag([string]) type fontlab.flMarkerPoint.type object type update fontlab.flMarkerPoint.update = update (...) update()","title":"flMarkerPoint"},{"location":"fontlab.flMarkerPoint.html#flmarkerpoint","text":"","title":"flMarkerPoint"},{"location":"fontlab.flMarkerPoint.html#changed","text":"fontlab.flMarkerPoint.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flMarkerPoint.html#checkinithistorystate","text":"fontlab.flMarkerPoint.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flMarkerPoint.html#clearabovehistory","text":"fontlab.flMarkerPoint.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flMarkerPoint.html#clearflag","text":"fontlab.flMarkerPoint.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flMarkerPoint.html#clearflags","text":"fontlab.flMarkerPoint.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flMarkerPoint.html#clone","text":"fontlab.flMarkerPoint.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flMarkerPoint.html#cloneobject","text":"fontlab.flMarkerPoint.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flMarkerPoint.html#createhistorystate","text":"fontlab.flMarkerPoint.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flMarkerPoint.html#createinstance","text":"fontlab.flMarkerPoint.createInstance = createInstance (...) flMarkerPoint createInstance()","title":"createInstance"},{"location":"fontlab.flMarkerPoint.html#createobject","text":"fontlab.flMarkerPoint.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flMarkerPoint.html#currenthistorystate","text":"fontlab.flMarkerPoint.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flMarkerPoint.html#flag","text":"fontlab.flMarkerPoint.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flMarkerPoint.html#flobjectflags","text":"fontlab.flMarkerPoint.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flMarkerPoint.html#getproperties","text":"fontlab.flMarkerPoint.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flMarkerPoint.html#getproperty","text":"fontlab.flMarkerPoint.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flMarkerPoint.html#getpropertyfloat","text":"fontlab.flMarkerPoint.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flMarkerPoint.html#getpropertyint","text":"fontlab.flMarkerPoint.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flMarkerPoint.html#haschanges","text":"fontlab.flMarkerPoint.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flMarkerPoint.html#hashistorystate","text":"fontlab.flMarkerPoint.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flMarkerPoint.html#hashistorystates","text":"fontlab.flMarkerPoint.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flMarkerPoint.html#haveobject","text":"fontlab.flMarkerPoint.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flMarkerPoint.html#historystates","text":"fontlab.flMarkerPoint.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flMarkerPoint.html#id","text":"fontlab.flMarkerPoint.id object id","title":"id"},{"location":"fontlab.flMarkerPoint.html#independedall","text":"fontlab.flMarkerPoint.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flMarkerPoint.html#initialhistorystate","text":"fontlab.flMarkerPoint.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flMarkerPoint.html#instancetype","text":"fontlab.flMarkerPoint.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flMarkerPoint.html#ischanged","text":"fontlab.flMarkerPoint.isChanged bool","title":"isChanged"},{"location":"fontlab.flMarkerPoint.html#isequal","text":"fontlab.flMarkerPoint.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flMarkerPoint.html#isnull","text":"fontlab.flMarkerPoint.isNull bool","title":"isNull"},{"location":"fontlab.flMarkerPoint.html#ispresent","text":"fontlab.flMarkerPoint.isPresent bool","title":"isPresent"},{"location":"fontlab.flMarkerPoint.html#isreleased","text":"fontlab.flMarkerPoint.isReleased bool","title":"isReleased"},{"location":"fontlab.flMarkerPoint.html#isselected","text":"fontlab.flMarkerPoint.isSelected bool","title":"isSelected"},{"location":"fontlab.flMarkerPoint.html#isstem","text":"fontlab.flMarkerPoint.isStem bool","title":"isStem"},{"location":"fontlab.flMarkerPoint.html#isvalid","text":"fontlab.flMarkerPoint.isValid bool","title":"isValid"},{"location":"fontlab.flMarkerPoint.html#key","text":"fontlab.flMarkerPoint.key flSnaps::MarkerKey key()","title":"key"},{"location":"fontlab.flMarkerPoint.html#markerflag","text":"fontlab.flMarkerPoint.markerFlag = markerFlag (...) uint markerFlag(uint role)","title":"markerFlag"},{"location":"fontlab.flMarkerPoint.html#markerflags","text":"fontlab.flMarkerPoint.markerFlags uint","title":"markerFlags"},{"location":"fontlab.flMarkerPoint.html#name","text":"fontlab.flMarkerPoint.name object name","title":"name"},{"location":"fontlab.flMarkerPoint.html#position","text":"fontlab.flMarkerPoint.position double","title":"position"},{"location":"fontlab.flMarkerPoint.html#refcnt","text":"fontlab.flMarkerPoint.refCnt object references count","title":"refCnt"},{"location":"fontlab.flMarkerPoint.html#release","text":"fontlab.flMarkerPoint.release = release (...) release()","title":"release"},{"location":"fontlab.flMarkerPoint.html#remove","text":"fontlab.flMarkerPoint.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flMarkerPoint.html#removechild","text":"fontlab.flMarkerPoint.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flMarkerPoint.html#removeproperty","text":"fontlab.flMarkerPoint.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flMarkerPoint.html#restorehistorystate","text":"fontlab.flMarkerPoint.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flMarkerPoint.html#setflag","text":"fontlab.flMarkerPoint.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flMarkerPoint.html#setmarkerflag","text":"fontlab.flMarkerPoint.setMarkerFlag = setMarkerFlag (...) setMarkerFlag(uint role, uint markerFlags)","title":"setMarkerFlag"},{"location":"fontlab.flMarkerPoint.html#setproperty","text":"fontlab.flMarkerPoint.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flMarkerPoint.html#setpropertyfloat","text":"fontlab.flMarkerPoint.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flMarkerPoint.html#setpropertyint","text":"fontlab.flMarkerPoint.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flMarkerPoint.html#tag","text":"fontlab.flMarkerPoint.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flMarkerPoint.html#type","text":"fontlab.flMarkerPoint.type object type","title":"type"},{"location":"fontlab.flMarkerPoint.html#update","text":"fontlab.flMarkerPoint.update = update (...) update()","title":"update"},{"location":"fontlab.flModel.html","text":"flModel fontlab.flModel = class flModel ( object ) flModel representation Constructors: None, static only methods Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Static methods createObject (...) flObject/Nothing createObject (int type) getClassMask (...) int getClassMask (int type) instance (...) flModel instance () isClassMask (...) bool isClassMask (int type) notifyGlyphChanged (...) notifyGlyphChanged (unsigned long fg_glyphId) notifyGlyphUpdate (...) notifyGlyphUpdate (unsigned long fg_glyphId) notifyGlyphsChanged (...) notifyGlyphsChanged (QSet glyphs) typeToStr (...) QString typeToStr (int type | flObject) Attributes ModelType = {'Anchor': 185, 'AnchorNode': 186, 'AnchorNodeToGuidelineCoords': 187, 'AutoShape': 55, 'Bezier': 48, 'Container': 8, 'Contour': 47, 'ContourInfo': 181, 'Controls': 14, 'Edge': 101, ...} ObjectParameter = {'prmBrush': 2, 'prmPen': 3, 'prmStructure': 0, 'prmTransform': 1} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T createObject fontlab.flModel.createObject = createObject (...) flObject/Nothing createObject(int type) getClassMask fontlab.flModel.getClassMask = getClassMask (...) int getClassMask(int type) instance fontlab.flModel.instance = instance (...) flModel instance() isClassMask fontlab.flModel.isClassMask = isClassMask (...) bool isClassMask(int type) ModelType fontlab.flModel.ModelType = {'Anchor': 185, 'AnchorNode': 186, 'AnchorNodeToGuidelineCoords': 187, 'AutoShape': 55, 'Bezier': 48, 'Container': 8, 'Contour': 47, 'ContourInfo': 181, 'Controls': 14, 'Edge': 101, ...} notifyGlyphChanged fontlab.flModel.notifyGlyphChanged = notifyGlyphChanged (...) notifyGlyphChanged(unsigned long fg_glyphId) notifyGlyphsChanged fontlab.flModel.notifyGlyphsChanged = notifyGlyphsChanged (...) notifyGlyphsChanged(QSet glyphs) notifyGlyphUpdate fontlab.flModel.notifyGlyphUpdate = notifyGlyphUpdate (...) notifyGlyphUpdate(unsigned long fg_glyphId) ObjectParameter fontlab.flModel.ObjectParameter = {'prmBrush': 2, 'prmPen': 3, 'prmStructure': 0, 'prmTransform': 1} typeToStr fontlab.flModel.typeToStr = typeToStr (...) QString typeToStr(int type | flObject)","title":"flModel"},{"location":"fontlab.flModel.html#flmodel","text":"","title":"flModel"},{"location":"fontlab.flModel.html#createobject","text":"fontlab.flModel.createObject = createObject (...) flObject/Nothing createObject(int type)","title":"createObject"},{"location":"fontlab.flModel.html#getclassmask","text":"fontlab.flModel.getClassMask = getClassMask (...) int getClassMask(int type)","title":"getClassMask"},{"location":"fontlab.flModel.html#instance","text":"fontlab.flModel.instance = instance (...) flModel instance()","title":"instance"},{"location":"fontlab.flModel.html#isclassmask","text":"fontlab.flModel.isClassMask = isClassMask (...) bool isClassMask(int type)","title":"isClassMask"},{"location":"fontlab.flModel.html#modeltype","text":"fontlab.flModel.ModelType = {'Anchor': 185, 'AnchorNode': 186, 'AnchorNodeToGuidelineCoords': 187, 'AutoShape': 55, 'Bezier': 48, 'Container': 8, 'Contour': 47, 'ContourInfo': 181, 'Controls': 14, 'Edge': 101, ...}","title":"ModelType"},{"location":"fontlab.flModel.html#notifyglyphchanged","text":"fontlab.flModel.notifyGlyphChanged = notifyGlyphChanged (...) notifyGlyphChanged(unsigned long fg_glyphId)","title":"notifyGlyphChanged"},{"location":"fontlab.flModel.html#notifyglyphschanged","text":"fontlab.flModel.notifyGlyphsChanged = notifyGlyphsChanged (...) notifyGlyphsChanged(QSet glyphs)","title":"notifyGlyphsChanged"},{"location":"fontlab.flModel.html#notifyglyphupdate","text":"fontlab.flModel.notifyGlyphUpdate = notifyGlyphUpdate (...) notifyGlyphUpdate(unsigned long fg_glyphId)","title":"notifyGlyphUpdate"},{"location":"fontlab.flModel.html#objectparameter","text":"fontlab.flModel.ObjectParameter = {'prmBrush': 2, 'prmPen': 3, 'prmStructure': 0, 'prmTransform': 1}","title":"ObjectParameter"},{"location":"fontlab.flModel.html#typetostr","text":"fontlab.flModel.typeToStr = typeToStr (...) QString typeToStr(int type | flObject)","title":"typeToStr"},{"location":"fontlab.flModelProducer.html","text":"flModelProducer fontlab.flModelProducer = class flModelProducer ( object ) flModelProducer representation Constructors: flModelProducer() flModelProducer(flModelProducer) flModelProducer(flObject) flModelProducer(flCanvas) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); copyToClipboard (...) copyToClipboard (objId package_id, QList objects) countGlyphsInData (...) int countGlyphsInData (QByteArray *data) createObject (...) flObject/Nothing createObject (int); getClipboardData (...) QByteArray getClipboardData (objId package_id, QList ) getObjectsFromClipboard (...) flObjects/Nothing getObjectsFromClipboard () getObjectsFromData (...) flObjects/Nothing getObjectsFromData (QByteArray *data) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flModelProducer.changed = changed (...) changed() checkInitHistoryState fontlab.flModelProducer.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flModelProducer.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flModelProducer.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flModelProducer.clearFlags = clearFlags (...) clearFlags() clone fontlab.flModelProducer.clone = clone (...) Clone the object cloneObject fontlab.flModelProducer.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); copyToClipboard fontlab.flModelProducer.copyToClipboard = copyToClipboard (...) copyToClipboard(objId package_id, QList objects) countGlyphsInData fontlab.flModelProducer.countGlyphsInData = countGlyphsInData (...) int countGlyphsInData(QByteArray *data) createHistoryState fontlab.flModelProducer.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flModelProducer.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flModelProducer.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flModelProducer.flag = flag (...) flag(uint f) flObjectFlags fontlab.flModelProducer.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getClipboardData fontlab.flModelProducer.getClipboardData = getClipboardData (...) QByteArray getClipboardData(objId package_id, QList ) getObjectsFromClipboard fontlab.flModelProducer.getObjectsFromClipboard = getObjectsFromClipboard (...) flObjects/Nothing getObjectsFromClipboard() getObjectsFromData fontlab.flModelProducer.getObjectsFromData = getObjectsFromData (...) flObjects/Nothing getObjectsFromData(QByteArray *data) getProperties fontlab.flModelProducer.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flModelProducer.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flModelProducer.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flModelProducer.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flModelProducer.hasChanges bool hasHistoryState fontlab.flModelProducer.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flModelProducer.hasHistoryStates bool haveObject fontlab.flModelProducer.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flModelProducer.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flModelProducer.id object id independedAll fontlab.flModelProducer.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flModelProducer.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flModelProducer.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flModelProducer.isChanged bool isEqual fontlab.flModelProducer.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flModelProducer.isNull bool isPresent fontlab.flModelProducer.isPresent bool isReleased fontlab.flModelProducer.isReleased bool isValid fontlab.flModelProducer.isValid bool name fontlab.flModelProducer.name object name refCnt fontlab.flModelProducer.refCnt object references count release fontlab.flModelProducer.release = release (...) release() remove fontlab.flModelProducer.remove = remove (...) remove([flObject]) removeChild fontlab.flModelProducer.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flModelProducer.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flModelProducer.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flModelProducer.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flModelProducer.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flModelProducer.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flModelProducer.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flModelProducer.tag = tag (...) tag([string]) type fontlab.flModelProducer.type object type update fontlab.flModelProducer.update = update (...) update()","title":"flModelProducer"},{"location":"fontlab.flModelProducer.html#flmodelproducer","text":"","title":"flModelProducer"},{"location":"fontlab.flModelProducer.html#changed","text":"fontlab.flModelProducer.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flModelProducer.html#checkinithistorystate","text":"fontlab.flModelProducer.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flModelProducer.html#clearabovehistory","text":"fontlab.flModelProducer.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flModelProducer.html#clearflag","text":"fontlab.flModelProducer.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flModelProducer.html#clearflags","text":"fontlab.flModelProducer.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flModelProducer.html#clone","text":"fontlab.flModelProducer.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flModelProducer.html#cloneobject","text":"fontlab.flModelProducer.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flModelProducer.html#copytoclipboard","text":"fontlab.flModelProducer.copyToClipboard = copyToClipboard (...) copyToClipboard(objId package_id, QList objects)","title":"copyToClipboard"},{"location":"fontlab.flModelProducer.html#countglyphsindata","text":"fontlab.flModelProducer.countGlyphsInData = countGlyphsInData (...) int countGlyphsInData(QByteArray *data)","title":"countGlyphsInData"},{"location":"fontlab.flModelProducer.html#createhistorystate","text":"fontlab.flModelProducer.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flModelProducer.html#createobject","text":"fontlab.flModelProducer.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flModelProducer.html#currenthistorystate","text":"fontlab.flModelProducer.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flModelProducer.html#flag","text":"fontlab.flModelProducer.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flModelProducer.html#flobjectflags","text":"fontlab.flModelProducer.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flModelProducer.html#getclipboarddata","text":"fontlab.flModelProducer.getClipboardData = getClipboardData (...) QByteArray getClipboardData(objId package_id, QList )","title":"getClipboardData"},{"location":"fontlab.flModelProducer.html#getobjectsfromclipboard","text":"fontlab.flModelProducer.getObjectsFromClipboard = getObjectsFromClipboard (...) flObjects/Nothing getObjectsFromClipboard()","title":"getObjectsFromClipboard"},{"location":"fontlab.flModelProducer.html#getobjectsfromdata","text":"fontlab.flModelProducer.getObjectsFromData = getObjectsFromData (...) flObjects/Nothing getObjectsFromData(QByteArray *data)","title":"getObjectsFromData"},{"location":"fontlab.flModelProducer.html#getproperties","text":"fontlab.flModelProducer.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flModelProducer.html#getproperty","text":"fontlab.flModelProducer.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flModelProducer.html#getpropertyfloat","text":"fontlab.flModelProducer.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flModelProducer.html#getpropertyint","text":"fontlab.flModelProducer.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flModelProducer.html#haschanges","text":"fontlab.flModelProducer.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flModelProducer.html#hashistorystate","text":"fontlab.flModelProducer.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flModelProducer.html#hashistorystates","text":"fontlab.flModelProducer.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flModelProducer.html#haveobject","text":"fontlab.flModelProducer.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flModelProducer.html#historystates","text":"fontlab.flModelProducer.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flModelProducer.html#id","text":"fontlab.flModelProducer.id object id","title":"id"},{"location":"fontlab.flModelProducer.html#independedall","text":"fontlab.flModelProducer.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flModelProducer.html#initialhistorystate","text":"fontlab.flModelProducer.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flModelProducer.html#instancetype","text":"fontlab.flModelProducer.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flModelProducer.html#ischanged","text":"fontlab.flModelProducer.isChanged bool","title":"isChanged"},{"location":"fontlab.flModelProducer.html#isequal","text":"fontlab.flModelProducer.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flModelProducer.html#isnull","text":"fontlab.flModelProducer.isNull bool","title":"isNull"},{"location":"fontlab.flModelProducer.html#ispresent","text":"fontlab.flModelProducer.isPresent bool","title":"isPresent"},{"location":"fontlab.flModelProducer.html#isreleased","text":"fontlab.flModelProducer.isReleased bool","title":"isReleased"},{"location":"fontlab.flModelProducer.html#isvalid","text":"fontlab.flModelProducer.isValid bool","title":"isValid"},{"location":"fontlab.flModelProducer.html#name","text":"fontlab.flModelProducer.name object name","title":"name"},{"location":"fontlab.flModelProducer.html#refcnt","text":"fontlab.flModelProducer.refCnt object references count","title":"refCnt"},{"location":"fontlab.flModelProducer.html#release","text":"fontlab.flModelProducer.release = release (...) release()","title":"release"},{"location":"fontlab.flModelProducer.html#remove","text":"fontlab.flModelProducer.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flModelProducer.html#removechild","text":"fontlab.flModelProducer.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flModelProducer.html#removeproperty","text":"fontlab.flModelProducer.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flModelProducer.html#restorehistorystate","text":"fontlab.flModelProducer.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flModelProducer.html#setflag","text":"fontlab.flModelProducer.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flModelProducer.html#setproperty","text":"fontlab.flModelProducer.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flModelProducer.html#setpropertyfloat","text":"fontlab.flModelProducer.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flModelProducer.html#setpropertyint","text":"fontlab.flModelProducer.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flModelProducer.html#tag","text":"fontlab.flModelProducer.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flModelProducer.html#type","text":"fontlab.flModelProducer.type object type","title":"type"},{"location":"fontlab.flModelProducer.html#update","text":"fontlab.flModelProducer.update = update (...) update()","title":"update"},{"location":"fontlab.flMouseEvent.html","text":"flMouseEvent fontlab.flMouseEvent = class flMouseEvent ( object ) flMouseEvent representation Constructors: flMouseEvent(flMouseEvent) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors button Qt::MouseButton buttons Qt::MouseButtons delta QPointF firstPressed bool global QPoint modifiers int movement float origin QPoint prev QPoint type EventType Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T button fontlab.flMouseEvent.button Qt::MouseButton buttons fontlab.flMouseEvent.buttons Qt::MouseButtons delta fontlab.flMouseEvent.delta QPointF firstPressed fontlab.flMouseEvent.firstPressed bool global fontlab.flMouseEvent.global QPoint modifiers fontlab.flMouseEvent.modifiers int movement fontlab.flMouseEvent.movement float origin fontlab.flMouseEvent.origin QPoint prev fontlab.flMouseEvent.prev QPoint type fontlab.flMouseEvent.type EventType","title":"flMouseEvent"},{"location":"fontlab.flMouseEvent.html#flmouseevent","text":"","title":"flMouseEvent"},{"location":"fontlab.flMouseEvent.html#button","text":"fontlab.flMouseEvent.button Qt::MouseButton","title":"button"},{"location":"fontlab.flMouseEvent.html#buttons","text":"fontlab.flMouseEvent.buttons Qt::MouseButtons","title":"buttons"},{"location":"fontlab.flMouseEvent.html#delta","text":"fontlab.flMouseEvent.delta QPointF","title":"delta"},{"location":"fontlab.flMouseEvent.html#firstpressed","text":"fontlab.flMouseEvent.firstPressed bool","title":"firstPressed"},{"location":"fontlab.flMouseEvent.html#global","text":"fontlab.flMouseEvent.global QPoint","title":"global"},{"location":"fontlab.flMouseEvent.html#modifiers","text":"fontlab.flMouseEvent.modifiers int","title":"modifiers"},{"location":"fontlab.flMouseEvent.html#movement","text":"fontlab.flMouseEvent.movement float","title":"movement"},{"location":"fontlab.flMouseEvent.html#origin","text":"fontlab.flMouseEvent.origin QPoint","title":"origin"},{"location":"fontlab.flMouseEvent.html#prev","text":"fontlab.flMouseEvent.prev QPoint","title":"prev"},{"location":"fontlab.flMouseEvent.html#type","text":"fontlab.flMouseEvent.type EventType","title":"type"},{"location":"fontlab.flNode.html","text":"flNode fontlab.flNode = class flNode ( object ) flNode representation Constructors: flNode() flNode(Node) - make clone flNode(QPointF position[, string nodeType=\"on\"[, int nodeKind=None]]) flNode(double x, double y[, string nodeType=\"on\"[, int nodeKind=None]]) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value angleTo (...) double angleTo (QPointF p) applyTransform (...) applyTransform (QTransform) canBeHobby (...) bool canBeHobby () canBeSmooth (...) bool canBeSmooth () canCollapse (...) bool canCollapse () canImprove (...) bool canImprove () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVectors (...) bool checkVectors () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearStored (...) clearStored () clone (...) Clone the object cloneMapped (...) flNode cloneMapped (QTransform) collapseHandles (...) bool collapseHandles () convertToCurve (...) bool convertToCurve ([bool smooth = false]) convertToCurves (...) bool convertToCurves () convertToLine (...) bool convertToLine () copyFrom (...) copyFrom (Node[, withSelected=False]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (Node/QPointF) flag (...) flag (uint f) getLines (...) (QLineF, QLineF)/None getLines () getOn (...) Node/None getOn () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isCorner (...) bool isCorner ([double a = 10.]) isCurve (...) bool isCurve () isEqual (...) isEqual (flObject) isEqualTo (...) bool isEqualTo (Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme (...) bool isExtreme (bool x[, bool open = true[, double limit = 0]]) isFirst (...) bool isFirst () isG2 (...) bool isG2 (double tolerance) isInternal (...) bool isInternal (bool clockwise) isInterpolated (...) bool isInterpolated (bool x) isLast (...) bool isLast () isOff (...) bool isOff () isOn (...) bool isOn () isSmartAngle (...) bool isSmartAngle () makeStart (...) bool makeStart () moveBy (...) moveBy (float dx, float dy[, bool round=false] nextNode (...) Node/None nextNode ([string nodeType= [, int searchDepth=1]]) pointG2 (...) QPointF/None pointG2 () prevNode (...) Node/None prevNode ([string nodeType= [, int searchDepth=1]]) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreCoordinates (...) restoreCoordinates () restoreHistoryState (...) restoreHistoryState (uint history_ix) rotateBy (...) rotateBy (valueDegree[, QPointF origin=(0, 0)]) round (...) round () - Round the node's coordinate scaleBy (...) scaleBy (valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) setExtraLast (...) setExtraLast (bool) setFlag (...) setFlag (uint f [, bool value]) setNextSmooth (...) setNextSmooth (QPointF base) setPrevSmooth (...) setPrevSmooth (QPointF base) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSmartAngleEnbl (...) bool setSmartAngleEnbl (bool) setSmartSharp (...) bool setSmartSharp ([double tension = 0.6]) skewBy (...) skewBy (valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartMove (...) list(uint) smartMove (offset) smartSetXY (...) smartSetXY (QPointF) storeCoordinates (...) storeCoordinates () storeTestParameters (...) storeTestParameters () tag (...) tag ([string]) transformBy (...) transformBy (QTransform tx[, QPointF origin=(0, 0)]) update (...) update () updateG2 (...) bool updateG2 () updateSmooth (...) updateSmooth ([bool extended_neibh=true]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors angle angle contour The parent Contour or None if not present g2 g2 hasChanges bool hasHistoryStates bool hobby hobby id object id index The index of the node in parent's contour (if present, otherwise -1) interpolated interpolated interpolatedX interpolatedX interpolatedY interpolatedY isChanged bool isNull bool isPresent bool isReleased bool isSelectedAlone bool isTerminal bool isValid bool name object name nodeState nodeState position Coordinates of the node as QPointF preview preview refCnt object references count scv scv selected The selected flag smartAngleR smartAngleR smooth The smooth flag state state type The node type x The x coordinate of the node y The y coordinate of the node Attributes NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} angle fontlab.flNode.angle angle angleTo fontlab.flNode.angleTo = angleTo (...) double angleTo(QPointF p) applyTransform fontlab.flNode.applyTransform = applyTransform (...) applyTransform(QTransform) canBeHobby fontlab.flNode.canBeHobby = canBeHobby (...) bool canBeHobby() canBeSmooth fontlab.flNode.canBeSmooth = canBeSmooth (...) bool canBeSmooth() canCollapse fontlab.flNode.canCollapse = canCollapse (...) bool canCollapse() canImprove fontlab.flNode.canImprove = canImprove (...) bool canImprove() changed fontlab.flNode.changed = changed (...) changed() checkInitHistoryState fontlab.flNode.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) checkVectors fontlab.flNode.checkVectors = checkVectors (...) bool checkVectors() clearAboveHistory fontlab.flNode.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flNode.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flNode.clearFlags = clearFlags (...) clearFlags() clearStored fontlab.flNode.clearStored = clearStored (...) clearStored() clone fontlab.flNode.clone = clone (...) Clone the object cloneMapped fontlab.flNode.cloneMapped = cloneMapped (...) flNode cloneMapped(QTransform) cloneObject fontlab.flNode.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); collapseHandles fontlab.flNode.collapseHandles = collapseHandles (...) bool collapseHandles() contour fontlab.flNode.contour The parent Contour or None if not present convertToCurve fontlab.flNode.convertToCurve = convertToCurve (...) bool convertToCurve([bool smooth = false]) convertToCurves fontlab.flNode.convertToCurves = convertToCurves (...) bool convertToCurves() convertToLine fontlab.flNode.convertToLine = convertToLine (...) bool convertToLine() copyFrom fontlab.flNode.copyFrom = copyFrom (...) copyFrom(Node[, withSelected=False]) createHistoryState fontlab.flNode.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flNode.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flNode.currentHistoryState = currentHistoryState (...) currentHistoryIx() distanceTo fontlab.flNode.distanceTo = distanceTo (...) double distanceTo(Node/QPointF) flag fontlab.flNode.flag = flag (...) flag(uint f) flObjectFlags fontlab.flNode.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} g2 fontlab.flNode.g2 g2 getLines fontlab.flNode.getLines = getLines (...) (QLineF, QLineF)/None getLines() getOn fontlab.flNode.getOn = getOn (...) Node/None getOn() getProperties fontlab.flNode.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flNode.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flNode.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flNode.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flNode.hasChanges bool hasHistoryState fontlab.flNode.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flNode.hasHistoryStates bool haveObject fontlab.flNode.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flNode.historyStates = historyStates (...) historyStates(bool accepted_state) hobby fontlab.flNode.hobby hobby id fontlab.flNode.id object id improve fontlab.flNode.improve = improve (...) bool improve() independedAll fontlab.flNode.independedAll = independedAll (...) independedAll() index fontlab.flNode.index The index of the node in parent's contour (if present, otherwise -1) initialHistoryState fontlab.flNode.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flNode.instanceType = instanceType (...) int instanceType(); interpolated fontlab.flNode.interpolated interpolated interpolatedX fontlab.flNode.interpolatedX interpolatedX interpolatedY fontlab.flNode.interpolatedY interpolatedY isChanged fontlab.flNode.isChanged bool isCorner fontlab.flNode.isCorner = isCorner (...) bool isCorner([double a = 10.]) isCurve fontlab.flNode.isCurve = isCurve (...) bool isCurve() isEqual fontlab.flNode.isEqual = isEqual (...) isEqual(flObject) isEqualTo fontlab.flNode.isEqualTo = isEqualTo (...) bool isEqualTo(Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme fontlab.flNode.isExtreme = isExtreme (...) bool isExtreme(bool x[, bool open = true[, double limit = 0]]) isFirst fontlab.flNode.isFirst = isFirst (...) bool isFirst() isG2 fontlab.flNode.isG2 = isG2 (...) bool isG2(double tolerance) isInternal fontlab.flNode.isInternal = isInternal (...) bool isInternal(bool clockwise) isInterpolated fontlab.flNode.isInterpolated = isInterpolated (...) bool isInterpolated(bool x) isLast fontlab.flNode.isLast = isLast (...) bool isLast() isNull fontlab.flNode.isNull bool isOff fontlab.flNode.isOff = isOff (...) bool isOff() isOn fontlab.flNode.isOn = isOn (...) bool isOn() isPresent fontlab.flNode.isPresent bool isReleased fontlab.flNode.isReleased bool isSelectedAlone fontlab.flNode.isSelectedAlone bool isSmartAngle fontlab.flNode.isSmartAngle = isSmartAngle (...) bool isSmartAngle() isTerminal fontlab.flNode.isTerminal bool isValid fontlab.flNode.isValid bool makeStart fontlab.flNode.makeStart = makeStart (...) bool makeStart() moveBy fontlab.flNode.moveBy = moveBy (...) moveBy(float dx, float dy[, bool round=false] name fontlab.flNode.name object name nextNode fontlab.flNode.nextNode = nextNode (...) Node/None nextNode([string nodeType= [, int searchDepth=1]]) NodeKind fontlab.flNode.NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} nodeState fontlab.flNode.nodeState nodeState NodeType fontlab.flNode.NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} pointG2 fontlab.flNode.pointG2 = pointG2 (...) QPointF/None pointG2() position fontlab.flNode.position Coordinates of the node as QPointF preview fontlab.flNode.preview preview prevNode fontlab.flNode.prevNode = prevNode (...) Node/None prevNode([string nodeType= [, int searchDepth=1]]) refCnt fontlab.flNode.refCnt object references count release fontlab.flNode.release = release (...) release() remove fontlab.flNode.remove = remove (...) remove([flObject]) removeChild fontlab.flNode.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flNode.removeProperty = removeProperty (...) removeProperty('key') restoreCoordinates fontlab.flNode.restoreCoordinates = restoreCoordinates (...) restoreCoordinates() restoreHistoryState fontlab.flNode.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) rotateBy fontlab.flNode.rotateBy = rotateBy (...) rotateBy(valueDegree[, QPointF origin=(0, 0)]) round fontlab.flNode.round = round (...) round() - Round the node's coordinate scaleBy fontlab.flNode.scaleBy = scaleBy (...) scaleBy(valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) scv fontlab.flNode.scv scv selected fontlab.flNode.selected The selected flag setExtraLast fontlab.flNode.setExtraLast = setExtraLast (...) setExtraLast(bool) setFlag fontlab.flNode.setFlag = setFlag (...) setFlag(uint f [, bool value]) setNextSmooth fontlab.flNode.setNextSmooth = setNextSmooth (...) setNextSmooth(QPointF base) setPrevSmooth fontlab.flNode.setPrevSmooth = setPrevSmooth (...) setPrevSmooth(QPointF base) setProperty fontlab.flNode.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flNode.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flNode.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSmartAngleEnbl fontlab.flNode.setSmartAngleEnbl = setSmartAngleEnbl (...) bool setSmartAngleEnbl(bool) setSmartSharp fontlab.flNode.setSmartSharp = setSmartSharp (...) bool setSmartSharp([double tension = 0.6]) skewBy fontlab.flNode.skewBy = skewBy (...) skewBy(valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartAngleR fontlab.flNode.smartAngleR smartAngleR smartMove fontlab.flNode.smartMove = smartMove (...) list(uint) smartMove(offset) smartSetXY fontlab.flNode.smartSetXY = smartSetXY (...) smartSetXY(QPointF) smooth fontlab.flNode.smooth The smooth flag state fontlab.flNode.state state storeCoordinates fontlab.flNode.storeCoordinates = storeCoordinates (...) storeCoordinates() storeTestParameters fontlab.flNode.storeTestParameters = storeTestParameters (...) storeTestParameters() tag fontlab.flNode.tag = tag (...) tag([string]) transformBy fontlab.flNode.transformBy = transformBy (...) transformBy(QTransform tx[, QPointF origin=(0, 0)]) type fontlab.flNode.type The node type update fontlab.flNode.update = update (...) update() updateG2 fontlab.flNode.updateG2 = updateG2 (...) bool updateG2() updateSmooth fontlab.flNode.updateSmooth = updateSmooth (...) updateSmooth([bool extended_neibh=true]) x fontlab.flNode.x The x coordinate of the node y fontlab.flNode.y The y coordinate of the node","title":"flNode"},{"location":"fontlab.flNode.html#flnode","text":"","title":"flNode"},{"location":"fontlab.flNode.html#angle","text":"fontlab.flNode.angle angle","title":"angle"},{"location":"fontlab.flNode.html#angleto","text":"fontlab.flNode.angleTo = angleTo (...) double angleTo(QPointF p)","title":"angleTo"},{"location":"fontlab.flNode.html#applytransform","text":"fontlab.flNode.applyTransform = applyTransform (...) applyTransform(QTransform)","title":"applyTransform"},{"location":"fontlab.flNode.html#canbehobby","text":"fontlab.flNode.canBeHobby = canBeHobby (...) bool canBeHobby()","title":"canBeHobby"},{"location":"fontlab.flNode.html#canbesmooth","text":"fontlab.flNode.canBeSmooth = canBeSmooth (...) bool canBeSmooth()","title":"canBeSmooth"},{"location":"fontlab.flNode.html#cancollapse","text":"fontlab.flNode.canCollapse = canCollapse (...) bool canCollapse()","title":"canCollapse"},{"location":"fontlab.flNode.html#canimprove","text":"fontlab.flNode.canImprove = canImprove (...) bool canImprove()","title":"canImprove"},{"location":"fontlab.flNode.html#changed","text":"fontlab.flNode.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flNode.html#checkinithistorystate","text":"fontlab.flNode.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flNode.html#checkvectors","text":"fontlab.flNode.checkVectors = checkVectors (...) bool checkVectors()","title":"checkVectors"},{"location":"fontlab.flNode.html#clearabovehistory","text":"fontlab.flNode.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flNode.html#clearflag","text":"fontlab.flNode.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flNode.html#clearflags","text":"fontlab.flNode.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flNode.html#clearstored","text":"fontlab.flNode.clearStored = clearStored (...) clearStored()","title":"clearStored"},{"location":"fontlab.flNode.html#clone","text":"fontlab.flNode.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flNode.html#clonemapped","text":"fontlab.flNode.cloneMapped = cloneMapped (...) flNode cloneMapped(QTransform)","title":"cloneMapped"},{"location":"fontlab.flNode.html#cloneobject","text":"fontlab.flNode.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flNode.html#collapsehandles","text":"fontlab.flNode.collapseHandles = collapseHandles (...) bool collapseHandles()","title":"collapseHandles"},{"location":"fontlab.flNode.html#contour","text":"fontlab.flNode.contour The parent Contour or None if not present","title":"contour"},{"location":"fontlab.flNode.html#converttocurve","text":"fontlab.flNode.convertToCurve = convertToCurve (...) bool convertToCurve([bool smooth = false])","title":"convertToCurve"},{"location":"fontlab.flNode.html#converttocurves","text":"fontlab.flNode.convertToCurves = convertToCurves (...) bool convertToCurves()","title":"convertToCurves"},{"location":"fontlab.flNode.html#converttoline","text":"fontlab.flNode.convertToLine = convertToLine (...) bool convertToLine()","title":"convertToLine"},{"location":"fontlab.flNode.html#copyfrom","text":"fontlab.flNode.copyFrom = copyFrom (...) copyFrom(Node[, withSelected=False])","title":"copyFrom"},{"location":"fontlab.flNode.html#createhistorystate","text":"fontlab.flNode.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flNode.html#createobject","text":"fontlab.flNode.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flNode.html#currenthistorystate","text":"fontlab.flNode.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flNode.html#distanceto","text":"fontlab.flNode.distanceTo = distanceTo (...) double distanceTo(Node/QPointF)","title":"distanceTo"},{"location":"fontlab.flNode.html#flag","text":"fontlab.flNode.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flNode.html#flobjectflags","text":"fontlab.flNode.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flNode.html#g2","text":"fontlab.flNode.g2 g2","title":"g2"},{"location":"fontlab.flNode.html#getlines","text":"fontlab.flNode.getLines = getLines (...) (QLineF, QLineF)/None getLines()","title":"getLines"},{"location":"fontlab.flNode.html#geton","text":"fontlab.flNode.getOn = getOn (...) Node/None getOn()","title":"getOn"},{"location":"fontlab.flNode.html#getproperties","text":"fontlab.flNode.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flNode.html#getproperty","text":"fontlab.flNode.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flNode.html#getpropertyfloat","text":"fontlab.flNode.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flNode.html#getpropertyint","text":"fontlab.flNode.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flNode.html#haschanges","text":"fontlab.flNode.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flNode.html#hashistorystate","text":"fontlab.flNode.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flNode.html#hashistorystates","text":"fontlab.flNode.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flNode.html#haveobject","text":"fontlab.flNode.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flNode.html#historystates","text":"fontlab.flNode.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flNode.html#hobby","text":"fontlab.flNode.hobby hobby","title":"hobby"},{"location":"fontlab.flNode.html#id","text":"fontlab.flNode.id object id","title":"id"},{"location":"fontlab.flNode.html#improve","text":"fontlab.flNode.improve = improve (...) bool improve()","title":"improve"},{"location":"fontlab.flNode.html#independedall","text":"fontlab.flNode.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flNode.html#index","text":"fontlab.flNode.index The index of the node in parent's contour (if present, otherwise -1)","title":"index"},{"location":"fontlab.flNode.html#initialhistorystate","text":"fontlab.flNode.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flNode.html#instancetype","text":"fontlab.flNode.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flNode.html#interpolated","text":"fontlab.flNode.interpolated interpolated","title":"interpolated"},{"location":"fontlab.flNode.html#interpolatedx","text":"fontlab.flNode.interpolatedX interpolatedX","title":"interpolatedX"},{"location":"fontlab.flNode.html#interpolatedy","text":"fontlab.flNode.interpolatedY interpolatedY","title":"interpolatedY"},{"location":"fontlab.flNode.html#ischanged","text":"fontlab.flNode.isChanged bool","title":"isChanged"},{"location":"fontlab.flNode.html#iscorner","text":"fontlab.flNode.isCorner = isCorner (...) bool isCorner([double a = 10.])","title":"isCorner"},{"location":"fontlab.flNode.html#iscurve","text":"fontlab.flNode.isCurve = isCurve (...) bool isCurve()","title":"isCurve"},{"location":"fontlab.flNode.html#isequal","text":"fontlab.flNode.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flNode.html#isequalto","text":"fontlab.flNode.isEqualTo = isEqualTo (...) bool isEqualTo(Node[, tolerance=0.1[, offset=QPointF(0, 0)]])","title":"isEqualTo"},{"location":"fontlab.flNode.html#isextreme","text":"fontlab.flNode.isExtreme = isExtreme (...) bool isExtreme(bool x[, bool open = true[, double limit = 0]])","title":"isExtreme"},{"location":"fontlab.flNode.html#isfirst","text":"fontlab.flNode.isFirst = isFirst (...) bool isFirst()","title":"isFirst"},{"location":"fontlab.flNode.html#isg2","text":"fontlab.flNode.isG2 = isG2 (...) bool isG2(double tolerance)","title":"isG2"},{"location":"fontlab.flNode.html#isinternal","text":"fontlab.flNode.isInternal = isInternal (...) bool isInternal(bool clockwise)","title":"isInternal"},{"location":"fontlab.flNode.html#isinterpolated","text":"fontlab.flNode.isInterpolated = isInterpolated (...) bool isInterpolated(bool x)","title":"isInterpolated"},{"location":"fontlab.flNode.html#islast","text":"fontlab.flNode.isLast = isLast (...) bool isLast()","title":"isLast"},{"location":"fontlab.flNode.html#isnull","text":"fontlab.flNode.isNull bool","title":"isNull"},{"location":"fontlab.flNode.html#isoff","text":"fontlab.flNode.isOff = isOff (...) bool isOff()","title":"isOff"},{"location":"fontlab.flNode.html#ison","text":"fontlab.flNode.isOn = isOn (...) bool isOn()","title":"isOn"},{"location":"fontlab.flNode.html#ispresent","text":"fontlab.flNode.isPresent bool","title":"isPresent"},{"location":"fontlab.flNode.html#isreleased","text":"fontlab.flNode.isReleased bool","title":"isReleased"},{"location":"fontlab.flNode.html#isselectedalone","text":"fontlab.flNode.isSelectedAlone bool","title":"isSelectedAlone"},{"location":"fontlab.flNode.html#issmartangle","text":"fontlab.flNode.isSmartAngle = isSmartAngle (...) bool isSmartAngle()","title":"isSmartAngle"},{"location":"fontlab.flNode.html#isterminal","text":"fontlab.flNode.isTerminal bool","title":"isTerminal"},{"location":"fontlab.flNode.html#isvalid","text":"fontlab.flNode.isValid bool","title":"isValid"},{"location":"fontlab.flNode.html#makestart","text":"fontlab.flNode.makeStart = makeStart (...) bool makeStart()","title":"makeStart"},{"location":"fontlab.flNode.html#moveby","text":"fontlab.flNode.moveBy = moveBy (...) moveBy(float dx, float dy[, bool round=false]","title":"moveBy"},{"location":"fontlab.flNode.html#name","text":"fontlab.flNode.name object name","title":"name"},{"location":"fontlab.flNode.html#nextnode","text":"fontlab.flNode.nextNode = nextNode (...) Node/None nextNode([string nodeType= [, int searchDepth=1]])","title":"nextNode"},{"location":"fontlab.flNode.html#nodekind","text":"fontlab.flNode.NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...}","title":"NodeKind"},{"location":"fontlab.flNode.html#nodestate","text":"fontlab.flNode.nodeState nodeState","title":"nodeState"},{"location":"fontlab.flNode.html#nodetype","text":"fontlab.flNode.NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1}","title":"NodeType"},{"location":"fontlab.flNode.html#pointg2","text":"fontlab.flNode.pointG2 = pointG2 (...) QPointF/None pointG2()","title":"pointG2"},{"location":"fontlab.flNode.html#position","text":"fontlab.flNode.position Coordinates of the node as QPointF","title":"position"},{"location":"fontlab.flNode.html#preview","text":"fontlab.flNode.preview preview","title":"preview"},{"location":"fontlab.flNode.html#prevnode","text":"fontlab.flNode.prevNode = prevNode (...) Node/None prevNode([string nodeType= [, int searchDepth=1]])","title":"prevNode"},{"location":"fontlab.flNode.html#refcnt","text":"fontlab.flNode.refCnt object references count","title":"refCnt"},{"location":"fontlab.flNode.html#release","text":"fontlab.flNode.release = release (...) release()","title":"release"},{"location":"fontlab.flNode.html#remove","text":"fontlab.flNode.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flNode.html#removechild","text":"fontlab.flNode.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flNode.html#removeproperty","text":"fontlab.flNode.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flNode.html#restorecoordinates","text":"fontlab.flNode.restoreCoordinates = restoreCoordinates (...) restoreCoordinates()","title":"restoreCoordinates"},{"location":"fontlab.flNode.html#restorehistorystate","text":"fontlab.flNode.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flNode.html#rotateby","text":"fontlab.flNode.rotateBy = rotateBy (...) rotateBy(valueDegree[, QPointF origin=(0, 0)])","title":"rotateBy"},{"location":"fontlab.flNode.html#round","text":"fontlab.flNode.round = round (...) round() - Round the node's coordinate","title":"round"},{"location":"fontlab.flNode.html#scaleby","text":"fontlab.flNode.scaleBy = scaleBy (...) scaleBy(valueXY | (valueX, valueY)[, QPointF origin=(0, 0)])","title":"scaleBy"},{"location":"fontlab.flNode.html#scv","text":"fontlab.flNode.scv scv","title":"scv"},{"location":"fontlab.flNode.html#selected","text":"fontlab.flNode.selected The selected flag","title":"selected"},{"location":"fontlab.flNode.html#setextralast","text":"fontlab.flNode.setExtraLast = setExtraLast (...) setExtraLast(bool)","title":"setExtraLast"},{"location":"fontlab.flNode.html#setflag","text":"fontlab.flNode.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flNode.html#setnextsmooth","text":"fontlab.flNode.setNextSmooth = setNextSmooth (...) setNextSmooth(QPointF base)","title":"setNextSmooth"},{"location":"fontlab.flNode.html#setprevsmooth","text":"fontlab.flNode.setPrevSmooth = setPrevSmooth (...) setPrevSmooth(QPointF base)","title":"setPrevSmooth"},{"location":"fontlab.flNode.html#setproperty","text":"fontlab.flNode.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flNode.html#setpropertyfloat","text":"fontlab.flNode.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flNode.html#setpropertyint","text":"fontlab.flNode.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flNode.html#setsmartangleenbl","text":"fontlab.flNode.setSmartAngleEnbl = setSmartAngleEnbl (...) bool setSmartAngleEnbl(bool)","title":"setSmartAngleEnbl"},{"location":"fontlab.flNode.html#setsmartsharp","text":"fontlab.flNode.setSmartSharp = setSmartSharp (...) bool setSmartSharp([double tension = 0.6])","title":"setSmartSharp"},{"location":"fontlab.flNode.html#skewby","text":"fontlab.flNode.skewBy = skewBy (...) skewBy(valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)])","title":"skewBy"},{"location":"fontlab.flNode.html#smartangler","text":"fontlab.flNode.smartAngleR smartAngleR","title":"smartAngleR"},{"location":"fontlab.flNode.html#smartmove","text":"fontlab.flNode.smartMove = smartMove (...) list(uint) smartMove(offset)","title":"smartMove"},{"location":"fontlab.flNode.html#smartsetxy","text":"fontlab.flNode.smartSetXY = smartSetXY (...) smartSetXY(QPointF)","title":"smartSetXY"},{"location":"fontlab.flNode.html#smooth","text":"fontlab.flNode.smooth The smooth flag","title":"smooth"},{"location":"fontlab.flNode.html#state","text":"fontlab.flNode.state state","title":"state"},{"location":"fontlab.flNode.html#storecoordinates","text":"fontlab.flNode.storeCoordinates = storeCoordinates (...) storeCoordinates()","title":"storeCoordinates"},{"location":"fontlab.flNode.html#storetestparameters","text":"fontlab.flNode.storeTestParameters = storeTestParameters (...) storeTestParameters()","title":"storeTestParameters"},{"location":"fontlab.flNode.html#tag","text":"fontlab.flNode.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flNode.html#transformby","text":"fontlab.flNode.transformBy = transformBy (...) transformBy(QTransform tx[, QPointF origin=(0, 0)])","title":"transformBy"},{"location":"fontlab.flNode.html#type","text":"fontlab.flNode.type The node type","title":"type"},{"location":"fontlab.flNode.html#update","text":"fontlab.flNode.update = update (...) update()","title":"update"},{"location":"fontlab.flNode.html#updateg2","text":"fontlab.flNode.updateG2 = updateG2 (...) bool updateG2()","title":"updateG2"},{"location":"fontlab.flNode.html#updatesmooth","text":"fontlab.flNode.updateSmooth = updateSmooth (...) updateSmooth([bool extended_neibh=true])","title":"updateSmooth"},{"location":"fontlab.flNode.html#x","text":"fontlab.flNode.x The x coordinate of the node","title":"x"},{"location":"fontlab.flNode.html#y","text":"fontlab.flNode.y The y coordinate of the node","title":"y"},{"location":"fontlab.flNodeInfo.html","text":"flNodeInfo fontlab.flNodeInfo = class flNodeInfo ( object ) flNodeInfo representation Constructors: flNodeInfo() flNodeInfo(flObject) flNodeInfo(flNodeInfo) flNodeInfo(flNode, QTransform) flNodeInfo(flNode, flObject contour_info) flNodeInfo(flNode, flObject glyph_info, QTransform) flNodeInfo(flNode, flNodeInfo) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value breakContourExpanded (...) bool breakContourExpanded ([double extrapolate_d=0.5]) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) contour (...) flContour contour () createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getGlyphPoint (...) QPointF getGlyphPoint (bool round) getMappedNeighborsRect (...) QRectF getMappedNeighborsRect () getMappedPoint (...) QPointF getMappedPoint ([QPointF]) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getUpdateCanvasRect (...) QRectF getUpdateCanvasRect () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) isValid (...) bool isValid () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setGlyphPoint (...) setGlyphPoint (QPointF) setGlyphPointX (...) setGlyphPointX (double x) setGlyphPointY (...) setGlyphPointY (double y) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' shape (...) flShape shape () shapeInfo (...) flShapeInfo shapeInfo () tag (...) tag ([string]) toNodesInfo (...) list(flNodeInfo) toNodesInfo (list(flNode)) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flNodeInfo createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors contourInfo flObject dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool name object name node flNode refCnt object references count transform transform matrix type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} breakContourExpanded fontlab.flNodeInfo.breakContourExpanded = breakContourExpanded (...) bool breakContourExpanded([double extrapolate_d=0.5]) changed fontlab.flNodeInfo.changed = changed (...) changed() checkInitHistoryState fontlab.flNodeInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flNodeInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flNodeInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flNodeInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flNodeInfo.clone = clone (...) Clone the object cloneObject fontlab.flNodeInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); combine fontlab.flNodeInfo.combine = combine (...) combine(QTransform transform) contour fontlab.flNodeInfo.contour = contour (...) flContour contour() contourInfo fontlab.flNodeInfo.contourInfo flObject createHistoryState fontlab.flNodeInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flNodeInfo.createInstance = createInstance (...) flNodeInfo createInstance() createObject fontlab.flNodeInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flNodeInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() dist fontlab.flNodeInfo.dist double dist flag fontlab.flNodeInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flNodeInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getGlyphPoint fontlab.flNodeInfo.getGlyphPoint = getGlyphPoint (...) QPointF getGlyphPoint(bool round) getMappedNeighborsRect fontlab.flNodeInfo.getMappedNeighborsRect = getMappedNeighborsRect (...) QRectF getMappedNeighborsRect() getMappedPoint fontlab.flNodeInfo.getMappedPoint = getMappedPoint (...) QPointF getMappedPoint([QPointF]) getProperties fontlab.flNodeInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flNodeInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flNodeInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flNodeInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getUpdateCanvasRect fontlab.flNodeInfo.getUpdateCanvasRect = getUpdateCanvasRect (...) QRectF getUpdateCanvasRect() glyphInfo fontlab.flNodeInfo.glyphInfo flObject - glyph info hasChanges fontlab.flNodeInfo.hasChanges bool hasHistoryState fontlab.flNodeInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flNodeInfo.hasHistoryStates bool haveObject fontlab.flNodeInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flNodeInfo.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flNodeInfo.id object id independedAll fontlab.flNodeInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flNodeInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flNodeInfo.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flNodeInfo.isChanged bool isEqual fontlab.flNodeInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flNodeInfo.isNull bool isPresent fontlab.flNodeInfo.isPresent bool isReleased fontlab.flNodeInfo.isReleased bool isValid fontlab.flNodeInfo.isValid = isValid (...) bool isValid() name fontlab.flNodeInfo.name object name node fontlab.flNodeInfo.node flNode refCnt fontlab.flNodeInfo.refCnt object references count release fontlab.flNodeInfo.release = release (...) release() remove fontlab.flNodeInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flNodeInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flNodeInfo.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flNodeInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flNodeInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setGlyphPoint fontlab.flNodeInfo.setGlyphPoint = setGlyphPoint (...) setGlyphPoint(QPointF) setGlyphPointX fontlab.flNodeInfo.setGlyphPointX = setGlyphPointX (...) setGlyphPointX(double x) setGlyphPointY fontlab.flNodeInfo.setGlyphPointY = setGlyphPointY (...) setGlyphPointY(double y) setProperty fontlab.flNodeInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flNodeInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flNodeInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' shape fontlab.flNodeInfo.shape = shape (...) flShape shape() shapeInfo fontlab.flNodeInfo.shapeInfo = shapeInfo (...) flShapeInfo shapeInfo() tag fontlab.flNodeInfo.tag = tag (...) tag([string]) toNodesInfo fontlab.flNodeInfo.toNodesInfo = toNodesInfo (...) list(flNodeInfo) toNodesInfo(list(flNode)) transform fontlab.flNodeInfo.transform transform matrix type fontlab.flNodeInfo.type object type update fontlab.flNodeInfo.update = update (...) update()","title":"flNodeInfo"},{"location":"fontlab.flNodeInfo.html#flnodeinfo","text":"","title":"flNodeInfo"},{"location":"fontlab.flNodeInfo.html#breakcontourexpanded","text":"fontlab.flNodeInfo.breakContourExpanded = breakContourExpanded (...) bool breakContourExpanded([double extrapolate_d=0.5])","title":"breakContourExpanded"},{"location":"fontlab.flNodeInfo.html#changed","text":"fontlab.flNodeInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flNodeInfo.html#checkinithistorystate","text":"fontlab.flNodeInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flNodeInfo.html#clearabovehistory","text":"fontlab.flNodeInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flNodeInfo.html#clearflag","text":"fontlab.flNodeInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flNodeInfo.html#clearflags","text":"fontlab.flNodeInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flNodeInfo.html#clone","text":"fontlab.flNodeInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flNodeInfo.html#cloneobject","text":"fontlab.flNodeInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flNodeInfo.html#combine","text":"fontlab.flNodeInfo.combine = combine (...) combine(QTransform transform)","title":"combine"},{"location":"fontlab.flNodeInfo.html#contour","text":"fontlab.flNodeInfo.contour = contour (...) flContour contour()","title":"contour"},{"location":"fontlab.flNodeInfo.html#contourinfo","text":"fontlab.flNodeInfo.contourInfo flObject","title":"contourInfo"},{"location":"fontlab.flNodeInfo.html#createhistorystate","text":"fontlab.flNodeInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flNodeInfo.html#createinstance","text":"fontlab.flNodeInfo.createInstance = createInstance (...) flNodeInfo createInstance()","title":"createInstance"},{"location":"fontlab.flNodeInfo.html#createobject","text":"fontlab.flNodeInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flNodeInfo.html#currenthistorystate","text":"fontlab.flNodeInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flNodeInfo.html#dist","text":"fontlab.flNodeInfo.dist double dist","title":"dist"},{"location":"fontlab.flNodeInfo.html#flag","text":"fontlab.flNodeInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flNodeInfo.html#flobjectflags","text":"fontlab.flNodeInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flNodeInfo.html#getglyphpoint","text":"fontlab.flNodeInfo.getGlyphPoint = getGlyphPoint (...) QPointF getGlyphPoint(bool round)","title":"getGlyphPoint"},{"location":"fontlab.flNodeInfo.html#getmappedneighborsrect","text":"fontlab.flNodeInfo.getMappedNeighborsRect = getMappedNeighborsRect (...) QRectF getMappedNeighborsRect()","title":"getMappedNeighborsRect"},{"location":"fontlab.flNodeInfo.html#getmappedpoint","text":"fontlab.flNodeInfo.getMappedPoint = getMappedPoint (...) QPointF getMappedPoint([QPointF])","title":"getMappedPoint"},{"location":"fontlab.flNodeInfo.html#getproperties","text":"fontlab.flNodeInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flNodeInfo.html#getproperty","text":"fontlab.flNodeInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flNodeInfo.html#getpropertyfloat","text":"fontlab.flNodeInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flNodeInfo.html#getpropertyint","text":"fontlab.flNodeInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flNodeInfo.html#getupdatecanvasrect","text":"fontlab.flNodeInfo.getUpdateCanvasRect = getUpdateCanvasRect (...) QRectF getUpdateCanvasRect()","title":"getUpdateCanvasRect"},{"location":"fontlab.flNodeInfo.html#glyphinfo","text":"fontlab.flNodeInfo.glyphInfo flObject - glyph info","title":"glyphInfo"},{"location":"fontlab.flNodeInfo.html#haschanges","text":"fontlab.flNodeInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flNodeInfo.html#hashistorystate","text":"fontlab.flNodeInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flNodeInfo.html#hashistorystates","text":"fontlab.flNodeInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flNodeInfo.html#haveobject","text":"fontlab.flNodeInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flNodeInfo.html#historystates","text":"fontlab.flNodeInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flNodeInfo.html#id","text":"fontlab.flNodeInfo.id object id","title":"id"},{"location":"fontlab.flNodeInfo.html#independedall","text":"fontlab.flNodeInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flNodeInfo.html#initialhistorystate","text":"fontlab.flNodeInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flNodeInfo.html#instancetype","text":"fontlab.flNodeInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flNodeInfo.html#ischanged","text":"fontlab.flNodeInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flNodeInfo.html#isequal","text":"fontlab.flNodeInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flNodeInfo.html#isnull","text":"fontlab.flNodeInfo.isNull bool","title":"isNull"},{"location":"fontlab.flNodeInfo.html#ispresent","text":"fontlab.flNodeInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flNodeInfo.html#isreleased","text":"fontlab.flNodeInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flNodeInfo.html#isvalid","text":"fontlab.flNodeInfo.isValid = isValid (...) bool isValid()","title":"isValid"},{"location":"fontlab.flNodeInfo.html#name","text":"fontlab.flNodeInfo.name object name","title":"name"},{"location":"fontlab.flNodeInfo.html#node","text":"fontlab.flNodeInfo.node flNode","title":"node"},{"location":"fontlab.flNodeInfo.html#refcnt","text":"fontlab.flNodeInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flNodeInfo.html#release","text":"fontlab.flNodeInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flNodeInfo.html#remove","text":"fontlab.flNodeInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flNodeInfo.html#removechild","text":"fontlab.flNodeInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flNodeInfo.html#removeproperty","text":"fontlab.flNodeInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flNodeInfo.html#restorehistorystate","text":"fontlab.flNodeInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flNodeInfo.html#setflag","text":"fontlab.flNodeInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flNodeInfo.html#setglyphpoint","text":"fontlab.flNodeInfo.setGlyphPoint = setGlyphPoint (...) setGlyphPoint(QPointF)","title":"setGlyphPoint"},{"location":"fontlab.flNodeInfo.html#setglyphpointx","text":"fontlab.flNodeInfo.setGlyphPointX = setGlyphPointX (...) setGlyphPointX(double x)","title":"setGlyphPointX"},{"location":"fontlab.flNodeInfo.html#setglyphpointy","text":"fontlab.flNodeInfo.setGlyphPointY = setGlyphPointY (...) setGlyphPointY(double y)","title":"setGlyphPointY"},{"location":"fontlab.flNodeInfo.html#setproperty","text":"fontlab.flNodeInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flNodeInfo.html#setpropertyfloat","text":"fontlab.flNodeInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flNodeInfo.html#setpropertyint","text":"fontlab.flNodeInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flNodeInfo.html#shape","text":"fontlab.flNodeInfo.shape = shape (...) flShape shape()","title":"shape"},{"location":"fontlab.flNodeInfo.html#shapeinfo","text":"fontlab.flNodeInfo.shapeInfo = shapeInfo (...) flShapeInfo shapeInfo()","title":"shapeInfo"},{"location":"fontlab.flNodeInfo.html#tag","text":"fontlab.flNodeInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flNodeInfo.html#tonodesinfo","text":"fontlab.flNodeInfo.toNodesInfo = toNodesInfo (...) list(flNodeInfo) toNodesInfo(list(flNode))","title":"toNodesInfo"},{"location":"fontlab.flNodeInfo.html#transform","text":"fontlab.flNodeInfo.transform transform matrix","title":"transform"},{"location":"fontlab.flNodeInfo.html#type","text":"fontlab.flNodeInfo.type object type","title":"type"},{"location":"fontlab.flNodeInfo.html#update","text":"fontlab.flNodeInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flObject.html","text":"flObject fontlab.flObject = class flObject ( object ) flObject representation Constructors: flObject() flObject(flObject) flObject(uint id) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flObject.changed = changed (...) changed() checkInitHistoryState fontlab.flObject.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flObject.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flObject.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flObject.clearFlags = clearFlags (...) clearFlags() clone fontlab.flObject.clone = clone (...) Clone the object cloneObject fontlab.flObject.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flObject.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flObject.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flObject.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flObject.flag = flag (...) flag(uint f) flObjectFlags fontlab.flObject.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flObject.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flObject.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flObject.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flObject.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flObject.hasChanges bool hasHistoryState fontlab.flObject.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flObject.hasHistoryStates bool haveObject fontlab.flObject.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flObject.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flObject.id object id independedAll fontlab.flObject.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flObject.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flObject.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flObject.isChanged bool isEqual fontlab.flObject.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flObject.isNull bool isPresent fontlab.flObject.isPresent bool isReleased fontlab.flObject.isReleased bool isValid fontlab.flObject.isValid bool name fontlab.flObject.name object name refCnt fontlab.flObject.refCnt object references count release fontlab.flObject.release = release (...) release() remove fontlab.flObject.remove = remove (...) remove([flObject]) removeChild fontlab.flObject.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flObject.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flObject.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flObject.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flObject.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flObject.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flObject.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flObject.tag = tag (...) tag([string]) type fontlab.flObject.type object type update fontlab.flObject.update = update (...) update()","title":"flObject"},{"location":"fontlab.flObject.html#flobject","text":"","title":"flObject"},{"location":"fontlab.flObject.html#changed","text":"fontlab.flObject.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flObject.html#checkinithistorystate","text":"fontlab.flObject.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flObject.html#clearabovehistory","text":"fontlab.flObject.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flObject.html#clearflag","text":"fontlab.flObject.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flObject.html#clearflags","text":"fontlab.flObject.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flObject.html#clone","text":"fontlab.flObject.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flObject.html#cloneobject","text":"fontlab.flObject.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flObject.html#createhistorystate","text":"fontlab.flObject.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flObject.html#createobject","text":"fontlab.flObject.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flObject.html#currenthistorystate","text":"fontlab.flObject.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flObject.html#flag","text":"fontlab.flObject.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flObject.html#flobjectflags","text":"fontlab.flObject.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flObject.html#getproperties","text":"fontlab.flObject.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flObject.html#getproperty","text":"fontlab.flObject.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flObject.html#getpropertyfloat","text":"fontlab.flObject.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flObject.html#getpropertyint","text":"fontlab.flObject.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flObject.html#haschanges","text":"fontlab.flObject.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flObject.html#hashistorystate","text":"fontlab.flObject.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flObject.html#hashistorystates","text":"fontlab.flObject.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flObject.html#haveobject","text":"fontlab.flObject.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flObject.html#historystates","text":"fontlab.flObject.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flObject.html#id","text":"fontlab.flObject.id object id","title":"id"},{"location":"fontlab.flObject.html#independedall","text":"fontlab.flObject.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flObject.html#initialhistorystate","text":"fontlab.flObject.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flObject.html#instancetype","text":"fontlab.flObject.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flObject.html#ischanged","text":"fontlab.flObject.isChanged bool","title":"isChanged"},{"location":"fontlab.flObject.html#isequal","text":"fontlab.flObject.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flObject.html#isnull","text":"fontlab.flObject.isNull bool","title":"isNull"},{"location":"fontlab.flObject.html#ispresent","text":"fontlab.flObject.isPresent bool","title":"isPresent"},{"location":"fontlab.flObject.html#isreleased","text":"fontlab.flObject.isReleased bool","title":"isReleased"},{"location":"fontlab.flObject.html#isvalid","text":"fontlab.flObject.isValid bool","title":"isValid"},{"location":"fontlab.flObject.html#name","text":"fontlab.flObject.name object name","title":"name"},{"location":"fontlab.flObject.html#refcnt","text":"fontlab.flObject.refCnt object references count","title":"refCnt"},{"location":"fontlab.flObject.html#release","text":"fontlab.flObject.release = release (...) release()","title":"release"},{"location":"fontlab.flObject.html#remove","text":"fontlab.flObject.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flObject.html#removechild","text":"fontlab.flObject.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flObject.html#removeproperty","text":"fontlab.flObject.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flObject.html#restorehistorystate","text":"fontlab.flObject.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flObject.html#setflag","text":"fontlab.flObject.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flObject.html#setproperty","text":"fontlab.flObject.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flObject.html#setpropertyfloat","text":"fontlab.flObject.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flObject.html#setpropertyint","text":"fontlab.flObject.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flObject.html#tag","text":"fontlab.flObject.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flObject.html#type","text":"fontlab.flObject.type object type","title":"type"},{"location":"fontlab.flObject.html#update","text":"fontlab.flObject.update = update (...) update()","title":"update"},{"location":"fontlab.flPackage.html","text":"flPackage fontlab.flPackage = class flPackage ( object ) flPackage representation Constructors: flPackage() flPackage(flObject) flPackage(fgFont) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value activateGlyph (...) activateGlyph (flGlyph) addAxis (...) string addAxis (flAxis variable) addGlyph (...) addGlyph (fgGlyph / flGlyph ) addInstance (...) addInstance (const flInstance ) addMaster (...) string addMaster (string master_name, bool create_glyphs, flPackage source, string source_layer_name, bool copy_metrics, bool create_missing_glyphs[, flLocation location]) assignData (...) assignData (const flPackage ) autohintGlyphs (...) autohintGlyphs (QList glyphs, bool make_hints) buildShapeDataNames (...) QSet buildShapeDataNames (objId exclude[, string layer_name]) can_interpolate (...) bool can_interpolate ([string master_name]) changed (...) changed () checkAxisName (...) string checkAxisName (string name) checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVariableName (...) string checkVariableName (string name) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearActiveGlyphs (...) clearActiveGlyphs () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearInstances (...) clearInstances () clearMasters (...) clearMasters (bool release) clone (...) Clone the object close (...) close (save=False) - Close the font collectNames (...) collectNames (StorageInfo * storage) collectShapes (...) QList /Nothing collectShapes (flShape, string layer_name) completeData (...) completeData ([bool fg_data = false]) convertZonesToGuidelines (...) convertZonesToGuidelines (flZones zonesT, flZones zonesB) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deleteGlyph (...) bool deleteGlyph (fgGlyph / flGlyph ) deleteGroups (...) deleteGroups (QSet ids, bool deleteDependentContent) ensureProteusData (...) ensureProteusData () family_zones (...) list(flZone) & family_zones (bool top) featuresContainer (...) flObject featuresContainer () findAxis (...) flAxis/Nothing findAxis (string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findAxisShort (...) flAxis/Nothing findAxisShort (string short_name) findFgId (...) flGlyph findFgId (uint id) findGroup (...) fg::GlyphGroup* findGroup (int _id) findName (...) flGlyph findName (string name) findNameId (...) flGlyph findNameId (uint fg_id) findNewName (...) string findNewName (string name) findShapeRoot (...) flGlyph findShapeRoot (flShapeData shape_data) findStem (...) int findStem (string n, bool b, bool loose) findUnicode (...) flGlyph findUnicode (uint uni) findZone (...) int findZone (string n, bool b) flag (...) flag (uint f) generateGlyph (...) ( QList , double width )/Nothing generateGlyph (string recipe, string layer_name, FontMetrics metrics, bool rtl) getAccentsInfo (...) list(AccentInfo)/Nothing getAccentsInfo (flLayer, flPinPoint) getAllGroups (...) list( (bool kernGroup, string groupName, int id, int mark, list(string glyphName) )/Nothing getAllGroups () getAxisName (...) string getAxisName (string short_name) getAxisShortName (...) string getAxisShortName (string name) getLayerName (...) string getLayerName () getMarkOffset (...) QPointF/Nothing getMarkOffset (flGlyph g1, flGlyph g2) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getShapes (...) QList /Nothing getShapes (string filter[, string layer_name]) hasAxis (...) bool hasAxis (string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) hasAxisShort (...) bool hasAxisShort (string short_name) hasGuides (...) bool hasGuides () hasHistoryState (...) hasHistoryState (uint history_ix) hasMaster (...) bool hasMaster (string name) hasName (...) bool hasName (string name[, bool relaxed=false]) hasPackageHistoryStorages (...) bool hasPackageHistoryStorages (uint to_history_ix) hasZones (...) bool hasZones () historyStack (...) flObject historyStack () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initItr (...) initItr (fgTTInterpreter itr) initItrGlyph (...) initItrGlyph (fgTTInterpreter itr, flGlyph glyph) initialHistoryState (...) initialHistoryIx() isComponent (...) (flGlyph, QTransform) isComponent (flShapeData[, string layer_name]) isEqual (...) isEqual (flObject) kerning (...) fgKerning kerning ([string master_name]) kerningContainer (...) flObject kerningContainer () location (...) flLocation & location ([string master_name]) makeShapeDataName (...) string makeShapeDataName (string name, objId _id, string layer_name) mastersContainer (...) flObject mastersContainer () optimizeShapeTransformations (...) bool optimizeShapeTransformations (QList changes) optimizeStemData (...) (flStems stemsH, flStems stemsV) optimizeStemData (flStems stemsH, flStems stemsV) prepareAxes (...) QList /Nothing prepareAxes (QList packages, QList glyphs) prepareFontGateData (...) prepareFontGateData (bool prepare_tth) preparePropertiesData (...) preparePropertiesData () projectPackageName (...) string projectPackageName () referencesCount (...) int referencesCount (uint shapeDataId) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeMaster (...) removeMaster (string name, bool remove_glyph_masters) removeProperty (...) removeProperty ('key') renameGlyph (...) bool renameGlyph (fgGlyph glyph, string name, bool rename) renameMaster (...) string renameMaster (string old_name, string new_name) replaceGlyph (...) bool replaceGlyph (fgGlyph target, fgGlyph newGlyph, bool rename) replaceShapeWithReference (...) flShape/Nothing replaceShapeWithReference (flShape shape, bool process[, string layer_name]) resetPackage (...) resetPackage () resetStemData (...) (flStems stemsH, flStems stemsV) resetStemData (flStems stemsH, flStems stemsV) restoreHistoryState (...) restoreHistoryState (uint history_ix) setAxis (...) setAxis (const flAxis ) setFlag (...) setFlag (uint f [, bool value]) setLocation (...) setLocation (flLocation location[, string master_name]) setMaster (...) setMaster (string name[, bool notify = false]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setUpm (...) setUpm (int upm, bool scale) set_ascender_locked (...) set_ascender_locked (bool b) set_capsHeight_locked (...) set_capsHeight_locked (bool b) set_descender_locked (...) set_descender_locked (bool b) set_interpolate (...) set_interpolate (bool b[, string master_name]) set_measurement_locked (...) set_measurement_locked (bool b) set_xHeight_locked (...) set_xHeight_locked (bool b) stems (...) list(flStem) & stems (HintingDataType, bool top) store_font_info (...) store_font_info (fg::Package *package) store_hinting_data (...) store_hinting_data (fgPackage package) styleCode (...) unsigned char styleCode () tag (...) tag ([string]) title_name (...) string title_name ([bool force_full = true]) tthRenameStems (...) bool tthRenameStems (QMap map_h, QMap map_v) tthRenameZones (...) bool tthRenameZones (QMap map_top, QMap map_bottom) update (...) update () updateAxesMap (...) updateAxesMap () updateFontMetrics (...) updateFontMetrics () updateShapeReferenceCount (...) updateShapeReferenceCount () updateZonesFromGuidelines (...) updateZonesFromGuidelines ([flZones zonesT, flZones zonesB]) zones (...) list(flZone) & zones (HintingDataType, bool top) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); hasInstaceFor (...) bool hasInstaceFor (fgFont) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); readFromFile (...) flPackage/Nothing readFromFile (string[, StorageInfo*=0]) Descriptors allGuidelines QList ascender_value double axes QList bold bool capsHeight_value double caretOffset_value double cornerTension_value double counterAnchors int counterGuides int currentSearch QByteArray curveTension double curveTension_value double defaultMaster string descender_value double elidedName string family_zonesB list(flZone) family_zonesT list(flZone) ffn string fgId int fgPackage fgFont fileName string fontLayerOrder A list of layer names indicating order of the layers in the font glyphsCount int guidelines flObjectsList guidelinesHost GuidelinesHostIntf* hasChanges bool hasHistoryStates bool hasWeightAxis bool hasWidthAxis bool hinting flHintingParameters id object id info FontInfo inktrapLen_value double instanceAttributes flLayerAttributes instances QList interpolationCheckGeometry bool interpolationExtrapolate bool interpolationFlags int interpolationMutatorMath bool interpolationSortContours bool isChanged bool isKey bool isMaster bool isNull bool isPresent bool isReleased bool isValid bool italic bool italicAngle_value double keepShapeData bool lineGap_value double mask flLayer master string masters QList mastersCount int measurement_value double monospaced bool name object name note string other string panose string path The path to the source font file ps_stemsH list(flStem) ps_stemsV list(flStem) ps_zonesB list(flZone) ps_zonesT list(flZone) psn string refCnt object references count safeBottom_value double safeTop_value double sampleString string sgn string slantTransform QTransform slope string smartCornerParameters SmartCornerParameters stateObject flObject tfn string tsn string tt_stemsH list(flStem) tt_stemsV list(flStem) tt_zonesB list(flZone) tt_zonesT list(flZone) type object type underlinePosition_value double underlineThickness_value double upm float variables list(flPropertyDouble) variationPackages QList versionMajor int versionMinor int weight string weight_value double width string width_value double xHeight_value double Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activateGlyph fontlab.flPackage.activateGlyph = activateGlyph (...) activateGlyph(flGlyph) addAxis fontlab.flPackage.addAxis = addAxis (...) string addAxis(flAxis variable) addGlyph fontlab.flPackage.addGlyph = addGlyph (...) addGlyph(fgGlyph / flGlyph ) addInstance fontlab.flPackage.addInstance = addInstance (...) addInstance(const flInstance ) addMaster fontlab.flPackage.addMaster = addMaster (...) string addMaster(string master_name, bool create_glyphs, flPackage source, string source_layer_name, bool copy_metrics, bool create_missing_glyphs[, flLocation location]) allGuidelines fontlab.flPackage.allGuidelines QList ascender_value fontlab.flPackage.ascender_value double assignData fontlab.flPackage.assignData = assignData (...) assignData(const flPackage ) autohintGlyphs fontlab.flPackage.autohintGlyphs = autohintGlyphs (...) autohintGlyphs(QList glyphs, bool make_hints) axes fontlab.flPackage.axes QList bold fontlab.flPackage.bold bool buildShapeDataNames fontlab.flPackage.buildShapeDataNames = buildShapeDataNames (...) QSet buildShapeDataNames(objId exclude[, string layer_name]) can_interpolate fontlab.flPackage.can_interpolate = can_interpolate (...) bool can_interpolate([string master_name]) capsHeight_value fontlab.flPackage.capsHeight_value double caretOffset_value fontlab.flPackage.caretOffset_value double changed fontlab.flPackage.changed = changed (...) changed() checkAxisName fontlab.flPackage.checkAxisName = checkAxisName (...) string checkAxisName(string name) checkInitHistoryState fontlab.flPackage.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) checkVariableName fontlab.flPackage.checkVariableName = checkVariableName (...) string checkVariableName(string name) clearAboveHistory fontlab.flPackage.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearActiveGlyphs fontlab.flPackage.clearActiveGlyphs = clearActiveGlyphs (...) clearActiveGlyphs() clearFlag fontlab.flPackage.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flPackage.clearFlags = clearFlags (...) clearFlags() clearInstances fontlab.flPackage.clearInstances = clearInstances (...) clearInstances() clearMasters fontlab.flPackage.clearMasters = clearMasters (...) clearMasters(bool release) clone fontlab.flPackage.clone = clone (...) Clone the object cloneObject fontlab.flPackage.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); close fontlab.flPackage.close = close (...) close(save=False) - Close the font collectNames fontlab.flPackage.collectNames = collectNames (...) collectNames(StorageInfo * storage) collectShapes fontlab.flPackage.collectShapes = collectShapes (...) QList /Nothing collectShapes(flShape, string layer_name) completeData fontlab.flPackage.completeData = completeData (...) completeData([bool fg_data = false]) convertZonesToGuidelines fontlab.flPackage.convertZonesToGuidelines = convertZonesToGuidelines (...) convertZonesToGuidelines(flZones zonesT, flZones zonesB) cornerTension_value fontlab.flPackage.cornerTension_value double counterAnchors fontlab.flPackage.counterAnchors int counterGuides fontlab.flPackage.counterGuides int createHistoryState fontlab.flPackage.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flPackage.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flPackage.currentHistoryState = currentHistoryState (...) currentHistoryIx() currentSearch fontlab.flPackage.currentSearch QByteArray curveTension fontlab.flPackage.curveTension double curveTension_value fontlab.flPackage.curveTension_value double defaultMaster fontlab.flPackage.defaultMaster string deleteGlyph fontlab.flPackage.deleteGlyph = deleteGlyph (...) bool deleteGlyph(fgGlyph / flGlyph ) deleteGroups fontlab.flPackage.deleteGroups = deleteGroups (...) deleteGroups(QSet ids, bool deleteDependentContent) descender_value fontlab.flPackage.descender_value double elidedName fontlab.flPackage.elidedName string ensureProteusData fontlab.flPackage.ensureProteusData = ensureProteusData (...) ensureProteusData() family_zones fontlab.flPackage.family_zones = family_zones (...) list(flZone) & family_zones(bool top) family_zonesB fontlab.flPackage.family_zonesB list(flZone) family_zonesT fontlab.flPackage.family_zonesT list(flZone) featuresContainer fontlab.flPackage.featuresContainer = featuresContainer (...) flObject featuresContainer() ffn fontlab.flPackage.ffn string fgId fontlab.flPackage.fgId int fgPackage fontlab.flPackage.fgPackage fgFont fileName fontlab.flPackage.fileName string findAxis fontlab.flPackage.findAxis = findAxis (...) flAxis/Nothing findAxis(string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findAxisShort fontlab.flPackage.findAxisShort = findAxisShort (...) flAxis/Nothing findAxisShort(string short_name) findFgId fontlab.flPackage.findFgId = findFgId (...) flGlyph findFgId(uint id) findGroup fontlab.flPackage.findGroup = findGroup (...) fg::GlyphGroup* findGroup(int _id) findName fontlab.flPackage.findName = findName (...) flGlyph findName(string name) findNameId fontlab.flPackage.findNameId = findNameId (...) flGlyph findNameId(uint fg_id) findNewName fontlab.flPackage.findNewName = findNewName (...) string findNewName(string name) findShapeRoot fontlab.flPackage.findShapeRoot = findShapeRoot (...) flGlyph findShapeRoot(flShapeData shape_data) findStem fontlab.flPackage.findStem = findStem (...) int findStem(string n, bool b, bool loose) findUnicode fontlab.flPackage.findUnicode = findUnicode (...) flGlyph findUnicode(uint uni) findZone fontlab.flPackage.findZone = findZone (...) int findZone(string n, bool b) flag fontlab.flPackage.flag = flag (...) flag(uint f) flObjectFlags fontlab.flPackage.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} fontLayerOrder fontlab.flPackage.fontLayerOrder A list of layer names indicating order of the layers in the font generateGlyph fontlab.flPackage.generateGlyph = generateGlyph (...) ( QList , double width )/Nothing generateGlyph(string recipe, string layer_name, FontMetrics metrics, bool rtl) getAccentsInfo fontlab.flPackage.getAccentsInfo = getAccentsInfo (...) list(AccentInfo)/Nothing getAccentsInfo(flLayer, flPinPoint) getAllGroups fontlab.flPackage.getAllGroups = getAllGroups (...) list( (bool kernGroup, string groupName, int id, int mark, list(string glyphName) )/Nothing getAllGroups() getAxisName fontlab.flPackage.getAxisName = getAxisName (...) string getAxisName(string short_name) getAxisShortName fontlab.flPackage.getAxisShortName = getAxisShortName (...) string getAxisShortName(string name) getLayerName fontlab.flPackage.getLayerName = getLayerName (...) string getLayerName() getMarkOffset fontlab.flPackage.getMarkOffset = getMarkOffset (...) QPointF/Nothing getMarkOffset(flGlyph g1, flGlyph g2) getProperties fontlab.flPackage.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flPackage.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flPackage.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flPackage.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getShapes fontlab.flPackage.getShapes = getShapes (...) QList /Nothing getShapes(string filter[, string layer_name]) glyphsCount fontlab.flPackage.glyphsCount int guidelines fontlab.flPackage.guidelines flObjectsList guidelinesHost fontlab.flPackage.guidelinesHost GuidelinesHostIntf* hasAxis fontlab.flPackage.hasAxis = hasAxis (...) bool hasAxis(string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) hasAxisShort fontlab.flPackage.hasAxisShort = hasAxisShort (...) bool hasAxisShort(string short_name) hasChanges fontlab.flPackage.hasChanges bool hasGuides fontlab.flPackage.hasGuides = hasGuides (...) bool hasGuides() hasHistoryState fontlab.flPackage.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flPackage.hasHistoryStates bool hasInstaceFor fontlab.flPackage.hasInstaceFor = hasInstaceFor (...) bool hasInstaceFor(fgFont) hasMaster fontlab.flPackage.hasMaster = hasMaster (...) bool hasMaster(string name) hasName fontlab.flPackage.hasName = hasName (...) bool hasName(string name[, bool relaxed=false]) hasPackageHistoryStorages fontlab.flPackage.hasPackageHistoryStorages = hasPackageHistoryStorages (...) bool hasPackageHistoryStorages(uint to_history_ix) hasWeightAxis fontlab.flPackage.hasWeightAxis bool hasWidthAxis fontlab.flPackage.hasWidthAxis bool hasZones fontlab.flPackage.hasZones = hasZones (...) bool hasZones() haveObject fontlab.flPackage.haveObject = haveObject (...) bool haveObject(uint); hinting fontlab.flPackage.hinting flHintingParameters historyStack fontlab.flPackage.historyStack = historyStack (...) flObject historyStack() historyStates fontlab.flPackage.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flPackage.id object id independedAll fontlab.flPackage.independedAll = independedAll (...) independedAll() info fontlab.flPackage.info FontInfo initialHistoryState fontlab.flPackage.initialHistoryState = initialHistoryState (...) initialHistoryIx() initItr fontlab.flPackage.initItr = initItr (...) initItr(fgTTInterpreter itr) initItrGlyph fontlab.flPackage.initItrGlyph = initItrGlyph (...) initItrGlyph(fgTTInterpreter itr, flGlyph glyph) inktrapLen_value fontlab.flPackage.inktrapLen_value double instanceAttributes fontlab.flPackage.instanceAttributes flLayerAttributes instances fontlab.flPackage.instances QList instanceType fontlab.flPackage.instanceType = instanceType (...) int instanceType(); interpolationCheckGeometry fontlab.flPackage.interpolationCheckGeometry bool interpolationExtrapolate fontlab.flPackage.interpolationExtrapolate bool interpolationFlags fontlab.flPackage.interpolationFlags int interpolationMutatorMath fontlab.flPackage.interpolationMutatorMath bool interpolationSortContours fontlab.flPackage.interpolationSortContours bool isChanged fontlab.flPackage.isChanged bool isComponent fontlab.flPackage.isComponent = isComponent (...) (flGlyph, QTransform) isComponent(flShapeData[, string layer_name]) isEqual fontlab.flPackage.isEqual = isEqual (...) isEqual(flObject) isKey fontlab.flPackage.isKey bool isMaster fontlab.flPackage.isMaster bool isNull fontlab.flPackage.isNull bool isPresent fontlab.flPackage.isPresent bool isReleased fontlab.flPackage.isReleased bool isValid fontlab.flPackage.isValid bool italic fontlab.flPackage.italic bool italicAngle_value fontlab.flPackage.italicAngle_value double keepShapeData fontlab.flPackage.keepShapeData bool kerning fontlab.flPackage.kerning = kerning (...) fgKerning kerning([string master_name]) kerningContainer fontlab.flPackage.kerningContainer = kerningContainer (...) flObject kerningContainer() lineGap_value fontlab.flPackage.lineGap_value double location fontlab.flPackage.location = location (...) flLocation & location([string master_name]) makeShapeDataName fontlab.flPackage.makeShapeDataName = makeShapeDataName (...) string makeShapeDataName(string name, objId _id, string layer_name) mask fontlab.flPackage.mask flLayer master fontlab.flPackage.master string masters fontlab.flPackage.masters QList mastersContainer fontlab.flPackage.mastersContainer = mastersContainer (...) flObject mastersContainer() mastersCount fontlab.flPackage.mastersCount int measurement_value fontlab.flPackage.measurement_value double monospaced fontlab.flPackage.monospaced bool name fontlab.flPackage.name object name note fontlab.flPackage.note string optimizeShapeTransformations fontlab.flPackage.optimizeShapeTransformations = optimizeShapeTransformations (...) bool optimizeShapeTransformations(QList changes) optimizeStemData fontlab.flPackage.optimizeStemData = optimizeStemData (...) (flStems stemsH, flStems stemsV) optimizeStemData(flStems stemsH, flStems stemsV) other fontlab.flPackage.other string panose fontlab.flPackage.panose string path fontlab.flPackage.path The path to the source font file prepareAxes fontlab.flPackage.prepareAxes = prepareAxes (...) QList /Nothing prepareAxes(QList packages, QList glyphs) prepareFontGateData fontlab.flPackage.prepareFontGateData = prepareFontGateData (...) prepareFontGateData(bool prepare_tth) preparePropertiesData fontlab.flPackage.preparePropertiesData = preparePropertiesData (...) preparePropertiesData() projectPackageName fontlab.flPackage.projectPackageName = projectPackageName (...) string projectPackageName() ps_stemsH fontlab.flPackage.ps_stemsH list(flStem) ps_stemsV fontlab.flPackage.ps_stemsV list(flStem) ps_zonesB fontlab.flPackage.ps_zonesB list(flZone) ps_zonesT fontlab.flPackage.ps_zonesT list(flZone) psn fontlab.flPackage.psn string readFromFile fontlab.flPackage.readFromFile = readFromFile (...) flPackage/Nothing readFromFile(string[, StorageInfo*=0]) refCnt fontlab.flPackage.refCnt object references count referencesCount fontlab.flPackage.referencesCount = referencesCount (...) int referencesCount(uint shapeDataId) release fontlab.flPackage.release = release (...) release() remove fontlab.flPackage.remove = remove (...) remove([flObject]) removeChild fontlab.flPackage.removeChild = removeChild (...) removeChild(flObject) removeMaster fontlab.flPackage.removeMaster = removeMaster (...) removeMaster(string name, bool remove_glyph_masters) removeProperty fontlab.flPackage.removeProperty = removeProperty (...) removeProperty('key') renameGlyph fontlab.flPackage.renameGlyph = renameGlyph (...) bool renameGlyph(fgGlyph glyph, string name, bool rename) renameMaster fontlab.flPackage.renameMaster = renameMaster (...) string renameMaster(string old_name, string new_name) replaceGlyph fontlab.flPackage.replaceGlyph = replaceGlyph (...) bool replaceGlyph(fgGlyph target, fgGlyph newGlyph, bool rename) replaceShapeWithReference fontlab.flPackage.replaceShapeWithReference = replaceShapeWithReference (...) flShape/Nothing replaceShapeWithReference(flShape shape, bool process[, string layer_name]) resetPackage fontlab.flPackage.resetPackage = resetPackage (...) resetPackage() resetStemData fontlab.flPackage.resetStemData = resetStemData (...) (flStems stemsH, flStems stemsV) resetStemData(flStems stemsH, flStems stemsV) restoreHistoryState fontlab.flPackage.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) safeBottom_value fontlab.flPackage.safeBottom_value double safeTop_value fontlab.flPackage.safeTop_value double sampleString fontlab.flPackage.sampleString string set_ascender_locked fontlab.flPackage.set_ascender_locked = set_ascender_locked (...) set_ascender_locked(bool b) set_capsHeight_locked fontlab.flPackage.set_capsHeight_locked = set_capsHeight_locked (...) set_capsHeight_locked(bool b) set_descender_locked fontlab.flPackage.set_descender_locked = set_descender_locked (...) set_descender_locked(bool b) set_interpolate fontlab.flPackage.set_interpolate = set_interpolate (...) set_interpolate(bool b[, string master_name]) set_measurement_locked fontlab.flPackage.set_measurement_locked = set_measurement_locked (...) set_measurement_locked(bool b) set_xHeight_locked fontlab.flPackage.set_xHeight_locked = set_xHeight_locked (...) set_xHeight_locked(bool b) setAxis fontlab.flPackage.setAxis = setAxis (...) setAxis(const flAxis ) setFlag fontlab.flPackage.setFlag = setFlag (...) setFlag(uint f [, bool value]) setLocation fontlab.flPackage.setLocation = setLocation (...) setLocation(flLocation location[, string master_name]) setMaster fontlab.flPackage.setMaster = setMaster (...) setMaster(string name[, bool notify = false]) setProperty fontlab.flPackage.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flPackage.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flPackage.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setUpm fontlab.flPackage.setUpm = setUpm (...) setUpm(int upm, bool scale) sgn fontlab.flPackage.sgn string slantTransform fontlab.flPackage.slantTransform QTransform slope fontlab.flPackage.slope string smartCornerParameters fontlab.flPackage.smartCornerParameters SmartCornerParameters stateObject fontlab.flPackage.stateObject flObject stems fontlab.flPackage.stems = stems (...) list(flStem) & stems(HintingDataType, bool top) store_font_info fontlab.flPackage.store_font_info = store_font_info (...) store_font_info(fg::Package *package) store_hinting_data fontlab.flPackage.store_hinting_data = store_hinting_data (...) store_hinting_data(fgPackage package) styleCode fontlab.flPackage.styleCode = styleCode (...) unsigned char styleCode() tag fontlab.flPackage.tag = tag (...) tag([string]) tfn fontlab.flPackage.tfn string title_name fontlab.flPackage.title_name = title_name (...) string title_name([bool force_full = true]) tsn fontlab.flPackage.tsn string tt_stemsH fontlab.flPackage.tt_stemsH list(flStem) tt_stemsV fontlab.flPackage.tt_stemsV list(flStem) tt_zonesB fontlab.flPackage.tt_zonesB list(flZone) tt_zonesT fontlab.flPackage.tt_zonesT list(flZone) tthRenameStems fontlab.flPackage.tthRenameStems = tthRenameStems (...) bool tthRenameStems(QMap map_h, QMap map_v) tthRenameZones fontlab.flPackage.tthRenameZones = tthRenameZones (...) bool tthRenameZones(QMap map_top, QMap map_bottom) type fontlab.flPackage.type object type underlinePosition_value fontlab.flPackage.underlinePosition_value double underlineThickness_value fontlab.flPackage.underlineThickness_value double update fontlab.flPackage.update = update (...) update() updateAxesMap fontlab.flPackage.updateAxesMap = updateAxesMap (...) updateAxesMap() updateFontMetrics fontlab.flPackage.updateFontMetrics = updateFontMetrics (...) updateFontMetrics() updateShapeReferenceCount fontlab.flPackage.updateShapeReferenceCount = updateShapeReferenceCount (...) updateShapeReferenceCount() updateZonesFromGuidelines fontlab.flPackage.updateZonesFromGuidelines = updateZonesFromGuidelines (...) updateZonesFromGuidelines([flZones zonesT, flZones zonesB]) upm fontlab.flPackage.upm float variables fontlab.flPackage.variables list(flPropertyDouble) variationPackages fontlab.flPackage.variationPackages QList versionMajor fontlab.flPackage.versionMajor int versionMinor fontlab.flPackage.versionMinor int weight fontlab.flPackage.weight string weight_value fontlab.flPackage.weight_value double width fontlab.flPackage.width string width_value fontlab.flPackage.width_value double xHeight_value fontlab.flPackage.xHeight_value double zones fontlab.flPackage.zones = zones (...) list(flZone) & zones(HintingDataType, bool top)","title":"flPackage"},{"location":"fontlab.flPackage.html#flpackage","text":"","title":"flPackage"},{"location":"fontlab.flPackage.html#activateglyph","text":"fontlab.flPackage.activateGlyph = activateGlyph (...) activateGlyph(flGlyph)","title":"activateGlyph"},{"location":"fontlab.flPackage.html#addaxis","text":"fontlab.flPackage.addAxis = addAxis (...) string addAxis(flAxis variable)","title":"addAxis"},{"location":"fontlab.flPackage.html#addglyph","text":"fontlab.flPackage.addGlyph = addGlyph (...) addGlyph(fgGlyph / flGlyph )","title":"addGlyph"},{"location":"fontlab.flPackage.html#addinstance","text":"fontlab.flPackage.addInstance = addInstance (...) addInstance(const flInstance )","title":"addInstance"},{"location":"fontlab.flPackage.html#addmaster","text":"fontlab.flPackage.addMaster = addMaster (...) string addMaster(string master_name, bool create_glyphs, flPackage source, string source_layer_name, bool copy_metrics, bool create_missing_glyphs[, flLocation location])","title":"addMaster"},{"location":"fontlab.flPackage.html#allguidelines","text":"fontlab.flPackage.allGuidelines QList","title":"allGuidelines"},{"location":"fontlab.flPackage.html#ascender_value","text":"fontlab.flPackage.ascender_value double","title":"ascender_value"},{"location":"fontlab.flPackage.html#assigndata","text":"fontlab.flPackage.assignData = assignData (...) assignData(const flPackage )","title":"assignData"},{"location":"fontlab.flPackage.html#autohintglyphs","text":"fontlab.flPackage.autohintGlyphs = autohintGlyphs (...) autohintGlyphs(QList glyphs, bool make_hints)","title":"autohintGlyphs"},{"location":"fontlab.flPackage.html#axes","text":"fontlab.flPackage.axes QList","title":"axes"},{"location":"fontlab.flPackage.html#bold","text":"fontlab.flPackage.bold bool","title":"bold"},{"location":"fontlab.flPackage.html#buildshapedatanames","text":"fontlab.flPackage.buildShapeDataNames = buildShapeDataNames (...) QSet buildShapeDataNames(objId exclude[, string layer_name])","title":"buildShapeDataNames"},{"location":"fontlab.flPackage.html#can_interpolate","text":"fontlab.flPackage.can_interpolate = can_interpolate (...) bool can_interpolate([string master_name])","title":"can_interpolate"},{"location":"fontlab.flPackage.html#capsheight_value","text":"fontlab.flPackage.capsHeight_value double","title":"capsHeight_value"},{"location":"fontlab.flPackage.html#caretoffset_value","text":"fontlab.flPackage.caretOffset_value double","title":"caretOffset_value"},{"location":"fontlab.flPackage.html#changed","text":"fontlab.flPackage.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flPackage.html#checkaxisname","text":"fontlab.flPackage.checkAxisName = checkAxisName (...) string checkAxisName(string name)","title":"checkAxisName"},{"location":"fontlab.flPackage.html#checkinithistorystate","text":"fontlab.flPackage.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flPackage.html#checkvariablename","text":"fontlab.flPackage.checkVariableName = checkVariableName (...) string checkVariableName(string name)","title":"checkVariableName"},{"location":"fontlab.flPackage.html#clearabovehistory","text":"fontlab.flPackage.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flPackage.html#clearactiveglyphs","text":"fontlab.flPackage.clearActiveGlyphs = clearActiveGlyphs (...) clearActiveGlyphs()","title":"clearActiveGlyphs"},{"location":"fontlab.flPackage.html#clearflag","text":"fontlab.flPackage.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flPackage.html#clearflags","text":"fontlab.flPackage.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flPackage.html#clearinstances","text":"fontlab.flPackage.clearInstances = clearInstances (...) clearInstances()","title":"clearInstances"},{"location":"fontlab.flPackage.html#clearmasters","text":"fontlab.flPackage.clearMasters = clearMasters (...) clearMasters(bool release)","title":"clearMasters"},{"location":"fontlab.flPackage.html#clone","text":"fontlab.flPackage.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flPackage.html#cloneobject","text":"fontlab.flPackage.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flPackage.html#close","text":"fontlab.flPackage.close = close (...) close(save=False) - Close the font","title":"close"},{"location":"fontlab.flPackage.html#collectnames","text":"fontlab.flPackage.collectNames = collectNames (...) collectNames(StorageInfo * storage)","title":"collectNames"},{"location":"fontlab.flPackage.html#collectshapes","text":"fontlab.flPackage.collectShapes = collectShapes (...) QList /Nothing collectShapes(flShape, string layer_name)","title":"collectShapes"},{"location":"fontlab.flPackage.html#completedata","text":"fontlab.flPackage.completeData = completeData (...) completeData([bool fg_data = false])","title":"completeData"},{"location":"fontlab.flPackage.html#convertzonestoguidelines","text":"fontlab.flPackage.convertZonesToGuidelines = convertZonesToGuidelines (...) convertZonesToGuidelines(flZones zonesT, flZones zonesB)","title":"convertZonesToGuidelines"},{"location":"fontlab.flPackage.html#cornertension_value","text":"fontlab.flPackage.cornerTension_value double","title":"cornerTension_value"},{"location":"fontlab.flPackage.html#counteranchors","text":"fontlab.flPackage.counterAnchors int","title":"counterAnchors"},{"location":"fontlab.flPackage.html#counterguides","text":"fontlab.flPackage.counterGuides int","title":"counterGuides"},{"location":"fontlab.flPackage.html#createhistorystate","text":"fontlab.flPackage.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flPackage.html#createobject","text":"fontlab.flPackage.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flPackage.html#currenthistorystate","text":"fontlab.flPackage.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flPackage.html#currentsearch","text":"fontlab.flPackage.currentSearch QByteArray","title":"currentSearch"},{"location":"fontlab.flPackage.html#curvetension","text":"fontlab.flPackage.curveTension double","title":"curveTension"},{"location":"fontlab.flPackage.html#curvetension_value","text":"fontlab.flPackage.curveTension_value double","title":"curveTension_value"},{"location":"fontlab.flPackage.html#defaultmaster","text":"fontlab.flPackage.defaultMaster string","title":"defaultMaster"},{"location":"fontlab.flPackage.html#deleteglyph","text":"fontlab.flPackage.deleteGlyph = deleteGlyph (...) bool deleteGlyph(fgGlyph / flGlyph )","title":"deleteGlyph"},{"location":"fontlab.flPackage.html#deletegroups","text":"fontlab.flPackage.deleteGroups = deleteGroups (...) deleteGroups(QSet ids, bool deleteDependentContent)","title":"deleteGroups"},{"location":"fontlab.flPackage.html#descender_value","text":"fontlab.flPackage.descender_value double","title":"descender_value"},{"location":"fontlab.flPackage.html#elidedname","text":"fontlab.flPackage.elidedName string","title":"elidedName"},{"location":"fontlab.flPackage.html#ensureproteusdata","text":"fontlab.flPackage.ensureProteusData = ensureProteusData (...) ensureProteusData()","title":"ensureProteusData"},{"location":"fontlab.flPackage.html#family_zones","text":"fontlab.flPackage.family_zones = family_zones (...) list(flZone) & family_zones(bool top)","title":"family_zones"},{"location":"fontlab.flPackage.html#family_zonesb","text":"fontlab.flPackage.family_zonesB list(flZone)","title":"family_zonesB"},{"location":"fontlab.flPackage.html#family_zonest","text":"fontlab.flPackage.family_zonesT list(flZone)","title":"family_zonesT"},{"location":"fontlab.flPackage.html#featurescontainer","text":"fontlab.flPackage.featuresContainer = featuresContainer (...) flObject featuresContainer()","title":"featuresContainer"},{"location":"fontlab.flPackage.html#ffn","text":"fontlab.flPackage.ffn string","title":"ffn"},{"location":"fontlab.flPackage.html#fgid","text":"fontlab.flPackage.fgId int","title":"fgId"},{"location":"fontlab.flPackage.html#fgpackage","text":"fontlab.flPackage.fgPackage fgFont","title":"fgPackage"},{"location":"fontlab.flPackage.html#filename","text":"fontlab.flPackage.fileName string","title":"fileName"},{"location":"fontlab.flPackage.html#findaxis","text":"fontlab.flPackage.findAxis = findAxis (...) flAxis/Nothing findAxis(string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive])","title":"findAxis"},{"location":"fontlab.flPackage.html#findaxisshort","text":"fontlab.flPackage.findAxisShort = findAxisShort (...) flAxis/Nothing findAxisShort(string short_name)","title":"findAxisShort"},{"location":"fontlab.flPackage.html#findfgid","text":"fontlab.flPackage.findFgId = findFgId (...) flGlyph findFgId(uint id)","title":"findFgId"},{"location":"fontlab.flPackage.html#findgroup","text":"fontlab.flPackage.findGroup = findGroup (...) fg::GlyphGroup* findGroup(int _id)","title":"findGroup"},{"location":"fontlab.flPackage.html#findname","text":"fontlab.flPackage.findName = findName (...) flGlyph findName(string name)","title":"findName"},{"location":"fontlab.flPackage.html#findnameid","text":"fontlab.flPackage.findNameId = findNameId (...) flGlyph findNameId(uint fg_id)","title":"findNameId"},{"location":"fontlab.flPackage.html#findnewname","text":"fontlab.flPackage.findNewName = findNewName (...) string findNewName(string name)","title":"findNewName"},{"location":"fontlab.flPackage.html#findshaperoot","text":"fontlab.flPackage.findShapeRoot = findShapeRoot (...) flGlyph findShapeRoot(flShapeData shape_data)","title":"findShapeRoot"},{"location":"fontlab.flPackage.html#findstem","text":"fontlab.flPackage.findStem = findStem (...) int findStem(string n, bool b, bool loose)","title":"findStem"},{"location":"fontlab.flPackage.html#findunicode","text":"fontlab.flPackage.findUnicode = findUnicode (...) flGlyph findUnicode(uint uni)","title":"findUnicode"},{"location":"fontlab.flPackage.html#findzone","text":"fontlab.flPackage.findZone = findZone (...) int findZone(string n, bool b)","title":"findZone"},{"location":"fontlab.flPackage.html#flag","text":"fontlab.flPackage.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flPackage.html#flobjectflags","text":"fontlab.flPackage.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flPackage.html#fontlayerorder","text":"fontlab.flPackage.fontLayerOrder A list of layer names indicating order of the layers in the font","title":"fontLayerOrder"},{"location":"fontlab.flPackage.html#generateglyph","text":"fontlab.flPackage.generateGlyph = generateGlyph (...) ( QList , double width )/Nothing generateGlyph(string recipe, string layer_name, FontMetrics metrics, bool rtl)","title":"generateGlyph"},{"location":"fontlab.flPackage.html#getaccentsinfo","text":"fontlab.flPackage.getAccentsInfo = getAccentsInfo (...) list(AccentInfo)/Nothing getAccentsInfo(flLayer, flPinPoint)","title":"getAccentsInfo"},{"location":"fontlab.flPackage.html#getallgroups","text":"fontlab.flPackage.getAllGroups = getAllGroups (...) list( (bool kernGroup, string groupName, int id, int mark, list(string glyphName) )/Nothing getAllGroups()","title":"getAllGroups"},{"location":"fontlab.flPackage.html#getaxisname","text":"fontlab.flPackage.getAxisName = getAxisName (...) string getAxisName(string short_name)","title":"getAxisName"},{"location":"fontlab.flPackage.html#getaxisshortname","text":"fontlab.flPackage.getAxisShortName = getAxisShortName (...) string getAxisShortName(string name)","title":"getAxisShortName"},{"location":"fontlab.flPackage.html#getlayername","text":"fontlab.flPackage.getLayerName = getLayerName (...) string getLayerName()","title":"getLayerName"},{"location":"fontlab.flPackage.html#getmarkoffset","text":"fontlab.flPackage.getMarkOffset = getMarkOffset (...) QPointF/Nothing getMarkOffset(flGlyph g1, flGlyph g2)","title":"getMarkOffset"},{"location":"fontlab.flPackage.html#getproperties","text":"fontlab.flPackage.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flPackage.html#getproperty","text":"fontlab.flPackage.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flPackage.html#getpropertyfloat","text":"fontlab.flPackage.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flPackage.html#getpropertyint","text":"fontlab.flPackage.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flPackage.html#getshapes","text":"fontlab.flPackage.getShapes = getShapes (...) QList /Nothing getShapes(string filter[, string layer_name])","title":"getShapes"},{"location":"fontlab.flPackage.html#glyphscount","text":"fontlab.flPackage.glyphsCount int","title":"glyphsCount"},{"location":"fontlab.flPackage.html#guidelines","text":"fontlab.flPackage.guidelines flObjectsList","title":"guidelines"},{"location":"fontlab.flPackage.html#guidelineshost","text":"fontlab.flPackage.guidelinesHost GuidelinesHostIntf*","title":"guidelinesHost"},{"location":"fontlab.flPackage.html#hasaxis","text":"fontlab.flPackage.hasAxis = hasAxis (...) bool hasAxis(string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive])","title":"hasAxis"},{"location":"fontlab.flPackage.html#hasaxisshort","text":"fontlab.flPackage.hasAxisShort = hasAxisShort (...) bool hasAxisShort(string short_name)","title":"hasAxisShort"},{"location":"fontlab.flPackage.html#haschanges","text":"fontlab.flPackage.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flPackage.html#hasguides","text":"fontlab.flPackage.hasGuides = hasGuides (...) bool hasGuides()","title":"hasGuides"},{"location":"fontlab.flPackage.html#hashistorystate","text":"fontlab.flPackage.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flPackage.html#hashistorystates","text":"fontlab.flPackage.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flPackage.html#hasinstacefor","text":"fontlab.flPackage.hasInstaceFor = hasInstaceFor (...) bool hasInstaceFor(fgFont)","title":"hasInstaceFor"},{"location":"fontlab.flPackage.html#hasmaster","text":"fontlab.flPackage.hasMaster = hasMaster (...) bool hasMaster(string name)","title":"hasMaster"},{"location":"fontlab.flPackage.html#hasname","text":"fontlab.flPackage.hasName = hasName (...) bool hasName(string name[, bool relaxed=false])","title":"hasName"},{"location":"fontlab.flPackage.html#haspackagehistorystorages","text":"fontlab.flPackage.hasPackageHistoryStorages = hasPackageHistoryStorages (...) bool hasPackageHistoryStorages(uint to_history_ix)","title":"hasPackageHistoryStorages"},{"location":"fontlab.flPackage.html#hasweightaxis","text":"fontlab.flPackage.hasWeightAxis bool","title":"hasWeightAxis"},{"location":"fontlab.flPackage.html#haswidthaxis","text":"fontlab.flPackage.hasWidthAxis bool","title":"hasWidthAxis"},{"location":"fontlab.flPackage.html#haszones","text":"fontlab.flPackage.hasZones = hasZones (...) bool hasZones()","title":"hasZones"},{"location":"fontlab.flPackage.html#haveobject","text":"fontlab.flPackage.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flPackage.html#hinting","text":"fontlab.flPackage.hinting flHintingParameters","title":"hinting"},{"location":"fontlab.flPackage.html#historystack","text":"fontlab.flPackage.historyStack = historyStack (...) flObject historyStack()","title":"historyStack"},{"location":"fontlab.flPackage.html#historystates","text":"fontlab.flPackage.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flPackage.html#id","text":"fontlab.flPackage.id object id","title":"id"},{"location":"fontlab.flPackage.html#independedall","text":"fontlab.flPackage.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flPackage.html#info","text":"fontlab.flPackage.info FontInfo","title":"info"},{"location":"fontlab.flPackage.html#initialhistorystate","text":"fontlab.flPackage.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flPackage.html#inititr","text":"fontlab.flPackage.initItr = initItr (...) initItr(fgTTInterpreter itr)","title":"initItr"},{"location":"fontlab.flPackage.html#inititrglyph","text":"fontlab.flPackage.initItrGlyph = initItrGlyph (...) initItrGlyph(fgTTInterpreter itr, flGlyph glyph)","title":"initItrGlyph"},{"location":"fontlab.flPackage.html#inktraplen_value","text":"fontlab.flPackage.inktrapLen_value double","title":"inktrapLen_value"},{"location":"fontlab.flPackage.html#instanceattributes","text":"fontlab.flPackage.instanceAttributes flLayerAttributes","title":"instanceAttributes"},{"location":"fontlab.flPackage.html#instances","text":"fontlab.flPackage.instances QList","title":"instances"},{"location":"fontlab.flPackage.html#instancetype","text":"fontlab.flPackage.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flPackage.html#interpolationcheckgeometry","text":"fontlab.flPackage.interpolationCheckGeometry bool","title":"interpolationCheckGeometry"},{"location":"fontlab.flPackage.html#interpolationextrapolate","text":"fontlab.flPackage.interpolationExtrapolate bool","title":"interpolationExtrapolate"},{"location":"fontlab.flPackage.html#interpolationflags","text":"fontlab.flPackage.interpolationFlags int","title":"interpolationFlags"},{"location":"fontlab.flPackage.html#interpolationmutatormath","text":"fontlab.flPackage.interpolationMutatorMath bool","title":"interpolationMutatorMath"},{"location":"fontlab.flPackage.html#interpolationsortcontours","text":"fontlab.flPackage.interpolationSortContours bool","title":"interpolationSortContours"},{"location":"fontlab.flPackage.html#ischanged","text":"fontlab.flPackage.isChanged bool","title":"isChanged"},{"location":"fontlab.flPackage.html#iscomponent","text":"fontlab.flPackage.isComponent = isComponent (...) (flGlyph, QTransform) isComponent(flShapeData[, string layer_name])","title":"isComponent"},{"location":"fontlab.flPackage.html#isequal","text":"fontlab.flPackage.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flPackage.html#iskey","text":"fontlab.flPackage.isKey bool","title":"isKey"},{"location":"fontlab.flPackage.html#ismaster","text":"fontlab.flPackage.isMaster bool","title":"isMaster"},{"location":"fontlab.flPackage.html#isnull","text":"fontlab.flPackage.isNull bool","title":"isNull"},{"location":"fontlab.flPackage.html#ispresent","text":"fontlab.flPackage.isPresent bool","title":"isPresent"},{"location":"fontlab.flPackage.html#isreleased","text":"fontlab.flPackage.isReleased bool","title":"isReleased"},{"location":"fontlab.flPackage.html#isvalid","text":"fontlab.flPackage.isValid bool","title":"isValid"},{"location":"fontlab.flPackage.html#italic","text":"fontlab.flPackage.italic bool","title":"italic"},{"location":"fontlab.flPackage.html#italicangle_value","text":"fontlab.flPackage.italicAngle_value double","title":"italicAngle_value"},{"location":"fontlab.flPackage.html#keepshapedata","text":"fontlab.flPackage.keepShapeData bool","title":"keepShapeData"},{"location":"fontlab.flPackage.html#kerning","text":"fontlab.flPackage.kerning = kerning (...) fgKerning kerning([string master_name])","title":"kerning"},{"location":"fontlab.flPackage.html#kerningcontainer","text":"fontlab.flPackage.kerningContainer = kerningContainer (...) flObject kerningContainer()","title":"kerningContainer"},{"location":"fontlab.flPackage.html#linegap_value","text":"fontlab.flPackage.lineGap_value double","title":"lineGap_value"},{"location":"fontlab.flPackage.html#location","text":"fontlab.flPackage.location = location (...) flLocation & location([string master_name])","title":"location"},{"location":"fontlab.flPackage.html#makeshapedataname","text":"fontlab.flPackage.makeShapeDataName = makeShapeDataName (...) string makeShapeDataName(string name, objId _id, string layer_name)","title":"makeShapeDataName"},{"location":"fontlab.flPackage.html#mask","text":"fontlab.flPackage.mask flLayer","title":"mask"},{"location":"fontlab.flPackage.html#master","text":"fontlab.flPackage.master string","title":"master"},{"location":"fontlab.flPackage.html#masters","text":"fontlab.flPackage.masters QList","title":"masters"},{"location":"fontlab.flPackage.html#masterscontainer","text":"fontlab.flPackage.mastersContainer = mastersContainer (...) flObject mastersContainer()","title":"mastersContainer"},{"location":"fontlab.flPackage.html#masterscount","text":"fontlab.flPackage.mastersCount int","title":"mastersCount"},{"location":"fontlab.flPackage.html#measurement_value","text":"fontlab.flPackage.measurement_value double","title":"measurement_value"},{"location":"fontlab.flPackage.html#monospaced","text":"fontlab.flPackage.monospaced bool","title":"monospaced"},{"location":"fontlab.flPackage.html#name","text":"fontlab.flPackage.name object name","title":"name"},{"location":"fontlab.flPackage.html#note","text":"fontlab.flPackage.note string","title":"note"},{"location":"fontlab.flPackage.html#optimizeshapetransformations","text":"fontlab.flPackage.optimizeShapeTransformations = optimizeShapeTransformations (...) bool optimizeShapeTransformations(QList changes)","title":"optimizeShapeTransformations"},{"location":"fontlab.flPackage.html#optimizestemdata","text":"fontlab.flPackage.optimizeStemData = optimizeStemData (...) (flStems stemsH, flStems stemsV) optimizeStemData(flStems stemsH, flStems stemsV)","title":"optimizeStemData"},{"location":"fontlab.flPackage.html#other","text":"fontlab.flPackage.other string","title":"other"},{"location":"fontlab.flPackage.html#panose","text":"fontlab.flPackage.panose string","title":"panose"},{"location":"fontlab.flPackage.html#path","text":"fontlab.flPackage.path The path to the source font file","title":"path"},{"location":"fontlab.flPackage.html#prepareaxes","text":"fontlab.flPackage.prepareAxes = prepareAxes (...) QList /Nothing prepareAxes(QList packages, QList glyphs)","title":"prepareAxes"},{"location":"fontlab.flPackage.html#preparefontgatedata","text":"fontlab.flPackage.prepareFontGateData = prepareFontGateData (...) prepareFontGateData(bool prepare_tth)","title":"prepareFontGateData"},{"location":"fontlab.flPackage.html#preparepropertiesdata","text":"fontlab.flPackage.preparePropertiesData = preparePropertiesData (...) preparePropertiesData()","title":"preparePropertiesData"},{"location":"fontlab.flPackage.html#projectpackagename","text":"fontlab.flPackage.projectPackageName = projectPackageName (...) string projectPackageName()","title":"projectPackageName"},{"location":"fontlab.flPackage.html#ps_stemsh","text":"fontlab.flPackage.ps_stemsH list(flStem)","title":"ps_stemsH"},{"location":"fontlab.flPackage.html#ps_stemsv","text":"fontlab.flPackage.ps_stemsV list(flStem)","title":"ps_stemsV"},{"location":"fontlab.flPackage.html#ps_zonesb","text":"fontlab.flPackage.ps_zonesB list(flZone)","title":"ps_zonesB"},{"location":"fontlab.flPackage.html#ps_zonest","text":"fontlab.flPackage.ps_zonesT list(flZone)","title":"ps_zonesT"},{"location":"fontlab.flPackage.html#psn","text":"fontlab.flPackage.psn string","title":"psn"},{"location":"fontlab.flPackage.html#readfromfile","text":"fontlab.flPackage.readFromFile = readFromFile (...) flPackage/Nothing readFromFile(string[, StorageInfo*=0])","title":"readFromFile"},{"location":"fontlab.flPackage.html#refcnt","text":"fontlab.flPackage.refCnt object references count","title":"refCnt"},{"location":"fontlab.flPackage.html#referencescount","text":"fontlab.flPackage.referencesCount = referencesCount (...) int referencesCount(uint shapeDataId)","title":"referencesCount"},{"location":"fontlab.flPackage.html#release","text":"fontlab.flPackage.release = release (...) release()","title":"release"},{"location":"fontlab.flPackage.html#remove","text":"fontlab.flPackage.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flPackage.html#removechild","text":"fontlab.flPackage.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flPackage.html#removemaster","text":"fontlab.flPackage.removeMaster = removeMaster (...) removeMaster(string name, bool remove_glyph_masters)","title":"removeMaster"},{"location":"fontlab.flPackage.html#removeproperty","text":"fontlab.flPackage.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flPackage.html#renameglyph","text":"fontlab.flPackage.renameGlyph = renameGlyph (...) bool renameGlyph(fgGlyph glyph, string name, bool rename)","title":"renameGlyph"},{"location":"fontlab.flPackage.html#renamemaster","text":"fontlab.flPackage.renameMaster = renameMaster (...) string renameMaster(string old_name, string new_name)","title":"renameMaster"},{"location":"fontlab.flPackage.html#replaceglyph","text":"fontlab.flPackage.replaceGlyph = replaceGlyph (...) bool replaceGlyph(fgGlyph target, fgGlyph newGlyph, bool rename)","title":"replaceGlyph"},{"location":"fontlab.flPackage.html#replaceshapewithreference","text":"fontlab.flPackage.replaceShapeWithReference = replaceShapeWithReference (...) flShape/Nothing replaceShapeWithReference(flShape shape, bool process[, string layer_name])","title":"replaceShapeWithReference"},{"location":"fontlab.flPackage.html#resetpackage","text":"fontlab.flPackage.resetPackage = resetPackage (...) resetPackage()","title":"resetPackage"},{"location":"fontlab.flPackage.html#resetstemdata","text":"fontlab.flPackage.resetStemData = resetStemData (...) (flStems stemsH, flStems stemsV) resetStemData(flStems stemsH, flStems stemsV)","title":"resetStemData"},{"location":"fontlab.flPackage.html#restorehistorystate","text":"fontlab.flPackage.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flPackage.html#safebottom_value","text":"fontlab.flPackage.safeBottom_value double","title":"safeBottom_value"},{"location":"fontlab.flPackage.html#safetop_value","text":"fontlab.flPackage.safeTop_value double","title":"safeTop_value"},{"location":"fontlab.flPackage.html#samplestring","text":"fontlab.flPackage.sampleString string","title":"sampleString"},{"location":"fontlab.flPackage.html#set_ascender_locked","text":"fontlab.flPackage.set_ascender_locked = set_ascender_locked (...) set_ascender_locked(bool b)","title":"set_ascender_locked"},{"location":"fontlab.flPackage.html#set_capsheight_locked","text":"fontlab.flPackage.set_capsHeight_locked = set_capsHeight_locked (...) set_capsHeight_locked(bool b)","title":"set_capsHeight_locked"},{"location":"fontlab.flPackage.html#set_descender_locked","text":"fontlab.flPackage.set_descender_locked = set_descender_locked (...) set_descender_locked(bool b)","title":"set_descender_locked"},{"location":"fontlab.flPackage.html#set_interpolate","text":"fontlab.flPackage.set_interpolate = set_interpolate (...) set_interpolate(bool b[, string master_name])","title":"set_interpolate"},{"location":"fontlab.flPackage.html#set_measurement_locked","text":"fontlab.flPackage.set_measurement_locked = set_measurement_locked (...) set_measurement_locked(bool b)","title":"set_measurement_locked"},{"location":"fontlab.flPackage.html#set_xheight_locked","text":"fontlab.flPackage.set_xHeight_locked = set_xHeight_locked (...) set_xHeight_locked(bool b)","title":"set_xHeight_locked"},{"location":"fontlab.flPackage.html#setaxis","text":"fontlab.flPackage.setAxis = setAxis (...) setAxis(const flAxis )","title":"setAxis"},{"location":"fontlab.flPackage.html#setflag","text":"fontlab.flPackage.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flPackage.html#setlocation","text":"fontlab.flPackage.setLocation = setLocation (...) setLocation(flLocation location[, string master_name])","title":"setLocation"},{"location":"fontlab.flPackage.html#setmaster","text":"fontlab.flPackage.setMaster = setMaster (...) setMaster(string name[, bool notify = false])","title":"setMaster"},{"location":"fontlab.flPackage.html#setproperty","text":"fontlab.flPackage.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flPackage.html#setpropertyfloat","text":"fontlab.flPackage.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flPackage.html#setpropertyint","text":"fontlab.flPackage.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flPackage.html#setupm","text":"fontlab.flPackage.setUpm = setUpm (...) setUpm(int upm, bool scale)","title":"setUpm"},{"location":"fontlab.flPackage.html#sgn","text":"fontlab.flPackage.sgn string","title":"sgn"},{"location":"fontlab.flPackage.html#slanttransform","text":"fontlab.flPackage.slantTransform QTransform","title":"slantTransform"},{"location":"fontlab.flPackage.html#slope","text":"fontlab.flPackage.slope string","title":"slope"},{"location":"fontlab.flPackage.html#smartcornerparameters","text":"fontlab.flPackage.smartCornerParameters SmartCornerParameters","title":"smartCornerParameters"},{"location":"fontlab.flPackage.html#stateobject","text":"fontlab.flPackage.stateObject flObject","title":"stateObject"},{"location":"fontlab.flPackage.html#stems","text":"fontlab.flPackage.stems = stems (...) list(flStem) & stems(HintingDataType, bool top)","title":"stems"},{"location":"fontlab.flPackage.html#store_font_info","text":"fontlab.flPackage.store_font_info = store_font_info (...) store_font_info(fg::Package *package)","title":"store_font_info"},{"location":"fontlab.flPackage.html#store_hinting_data","text":"fontlab.flPackage.store_hinting_data = store_hinting_data (...) store_hinting_data(fgPackage package)","title":"store_hinting_data"},{"location":"fontlab.flPackage.html#stylecode","text":"fontlab.flPackage.styleCode = styleCode (...) unsigned char styleCode()","title":"styleCode"},{"location":"fontlab.flPackage.html#tag","text":"fontlab.flPackage.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flPackage.html#tfn","text":"fontlab.flPackage.tfn string","title":"tfn"},{"location":"fontlab.flPackage.html#title_name","text":"fontlab.flPackage.title_name = title_name (...) string title_name([bool force_full = true])","title":"title_name"},{"location":"fontlab.flPackage.html#tsn","text":"fontlab.flPackage.tsn string","title":"tsn"},{"location":"fontlab.flPackage.html#tt_stemsh","text":"fontlab.flPackage.tt_stemsH list(flStem)","title":"tt_stemsH"},{"location":"fontlab.flPackage.html#tt_stemsv","text":"fontlab.flPackage.tt_stemsV list(flStem)","title":"tt_stemsV"},{"location":"fontlab.flPackage.html#tt_zonesb","text":"fontlab.flPackage.tt_zonesB list(flZone)","title":"tt_zonesB"},{"location":"fontlab.flPackage.html#tt_zonest","text":"fontlab.flPackage.tt_zonesT list(flZone)","title":"tt_zonesT"},{"location":"fontlab.flPackage.html#tthrenamestems","text":"fontlab.flPackage.tthRenameStems = tthRenameStems (...) bool tthRenameStems(QMap map_h, QMap map_v)","title":"tthRenameStems"},{"location":"fontlab.flPackage.html#tthrenamezones","text":"fontlab.flPackage.tthRenameZones = tthRenameZones (...) bool tthRenameZones(QMap map_top, QMap map_bottom)","title":"tthRenameZones"},{"location":"fontlab.flPackage.html#type","text":"fontlab.flPackage.type object type","title":"type"},{"location":"fontlab.flPackage.html#underlineposition_value","text":"fontlab.flPackage.underlinePosition_value double","title":"underlinePosition_value"},{"location":"fontlab.flPackage.html#underlinethickness_value","text":"fontlab.flPackage.underlineThickness_value double","title":"underlineThickness_value"},{"location":"fontlab.flPackage.html#update","text":"fontlab.flPackage.update = update (...) update()","title":"update"},{"location":"fontlab.flPackage.html#updateaxesmap","text":"fontlab.flPackage.updateAxesMap = updateAxesMap (...) updateAxesMap()","title":"updateAxesMap"},{"location":"fontlab.flPackage.html#updatefontmetrics","text":"fontlab.flPackage.updateFontMetrics = updateFontMetrics (...) updateFontMetrics()","title":"updateFontMetrics"},{"location":"fontlab.flPackage.html#updateshapereferencecount","text":"fontlab.flPackage.updateShapeReferenceCount = updateShapeReferenceCount (...) updateShapeReferenceCount()","title":"updateShapeReferenceCount"},{"location":"fontlab.flPackage.html#updatezonesfromguidelines","text":"fontlab.flPackage.updateZonesFromGuidelines = updateZonesFromGuidelines (...) updateZonesFromGuidelines([flZones zonesT, flZones zonesB])","title":"updateZonesFromGuidelines"},{"location":"fontlab.flPackage.html#upm","text":"fontlab.flPackage.upm float","title":"upm"},{"location":"fontlab.flPackage.html#variables","text":"fontlab.flPackage.variables list(flPropertyDouble)","title":"variables"},{"location":"fontlab.flPackage.html#variationpackages","text":"fontlab.flPackage.variationPackages QList","title":"variationPackages"},{"location":"fontlab.flPackage.html#versionmajor","text":"fontlab.flPackage.versionMajor int","title":"versionMajor"},{"location":"fontlab.flPackage.html#versionminor","text":"fontlab.flPackage.versionMinor int","title":"versionMinor"},{"location":"fontlab.flPackage.html#weight","text":"fontlab.flPackage.weight string","title":"weight"},{"location":"fontlab.flPackage.html#weight_value","text":"fontlab.flPackage.weight_value double","title":"weight_value"},{"location":"fontlab.flPackage.html#width","text":"fontlab.flPackage.width string","title":"width"},{"location":"fontlab.flPackage.html#width_value","text":"fontlab.flPackage.width_value double","title":"width_value"},{"location":"fontlab.flPackage.html#xheight_value","text":"fontlab.flPackage.xHeight_value double","title":"xHeight_value"},{"location":"fontlab.flPackage.html#zones","text":"fontlab.flPackage.zones = zones (...) list(flZone) & zones(HintingDataType, bool top)","title":"zones"},{"location":"fontlab.flPaper.html","text":"flPaper fontlab.flPaper = class flPaper ( object ) flPaper representation Constructors: flPaper() flPaper(flPaper) flPaper(flObject) flPaper(QBrush) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value activeGlyphInfo (...) flObject activeGlyphInfo () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getGlyphInfo (...) flObject getGlyphInfo (flObject) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' glyph (...) flObject glyph () glyphInfoAt (...) flObject glyphInfoAt (int index) glyphsBoundRect (...) QRectF glyphsBoundRect () hasActive (...) bool hasActive () hasContent (...) bool hasContent () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) package (...) flObject package () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setActiveGlyph (...) flObject setActiveGlyph (flObject glyph) setFlag (...) setFlag (uint f [, bool value]) setPaperGlyph (...) flObject setPaperGlyph (flObject glyph) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flPaper createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activeGlyphInfo fontlab.flPaper.activeGlyphInfo = activeGlyphInfo (...) flObject activeGlyphInfo() changed fontlab.flPaper.changed = changed (...) changed() checkInitHistoryState fontlab.flPaper.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flPaper.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flPaper.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flPaper.clearFlags = clearFlags (...) clearFlags() clone fontlab.flPaper.clone = clone (...) Clone the object cloneObject fontlab.flPaper.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flPaper.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flPaper.createInstance = createInstance (...) flPaper createInstance() createObject fontlab.flPaper.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flPaper.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flPaper.flag = flag (...) flag(uint f) flObjectFlags fontlab.flPaper.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getGlyphInfo fontlab.flPaper.getGlyphInfo = getGlyphInfo (...) flObject getGlyphInfo(flObject) getProperties fontlab.flPaper.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flPaper.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flPaper.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flPaper.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' glyph fontlab.flPaper.glyph = glyph (...) flObject glyph() glyphInfoAt fontlab.flPaper.glyphInfoAt = glyphInfoAt (...) flObject glyphInfoAt(int index) glyphsBoundRect fontlab.flPaper.glyphsBoundRect = glyphsBoundRect (...) QRectF glyphsBoundRect() hasActive fontlab.flPaper.hasActive = hasActive (...) bool hasActive() hasChanges fontlab.flPaper.hasChanges bool hasContent fontlab.flPaper.hasContent = hasContent (...) bool hasContent() hasHistoryState fontlab.flPaper.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flPaper.hasHistoryStates bool haveObject fontlab.flPaper.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flPaper.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flPaper.id object id independedAll fontlab.flPaper.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flPaper.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flPaper.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flPaper.isChanged bool isEqual fontlab.flPaper.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flPaper.isNull bool isPresent fontlab.flPaper.isPresent bool isReleased fontlab.flPaper.isReleased bool isValid fontlab.flPaper.isValid bool name fontlab.flPaper.name object name package fontlab.flPaper.package = package (...) flObject package() refCnt fontlab.flPaper.refCnt object references count release fontlab.flPaper.release = release (...) release() remove fontlab.flPaper.remove = remove (...) remove([flObject]) removeChild fontlab.flPaper.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flPaper.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flPaper.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setActiveGlyph fontlab.flPaper.setActiveGlyph = setActiveGlyph (...) flObject setActiveGlyph(flObject glyph) setFlag fontlab.flPaper.setFlag = setFlag (...) setFlag(uint f [, bool value]) setPaperGlyph fontlab.flPaper.setPaperGlyph = setPaperGlyph (...) flObject setPaperGlyph(flObject glyph) setProperty fontlab.flPaper.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flPaper.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flPaper.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flPaper.tag = tag (...) tag([string]) type fontlab.flPaper.type object type update fontlab.flPaper.update = update (...) update()","title":"flPaper"},{"location":"fontlab.flPaper.html#flpaper","text":"","title":"flPaper"},{"location":"fontlab.flPaper.html#activeglyphinfo","text":"fontlab.flPaper.activeGlyphInfo = activeGlyphInfo (...) flObject activeGlyphInfo()","title":"activeGlyphInfo"},{"location":"fontlab.flPaper.html#changed","text":"fontlab.flPaper.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flPaper.html#checkinithistorystate","text":"fontlab.flPaper.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flPaper.html#clearabovehistory","text":"fontlab.flPaper.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flPaper.html#clearflag","text":"fontlab.flPaper.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flPaper.html#clearflags","text":"fontlab.flPaper.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flPaper.html#clone","text":"fontlab.flPaper.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flPaper.html#cloneobject","text":"fontlab.flPaper.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flPaper.html#createhistorystate","text":"fontlab.flPaper.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flPaper.html#createinstance","text":"fontlab.flPaper.createInstance = createInstance (...) flPaper createInstance()","title":"createInstance"},{"location":"fontlab.flPaper.html#createobject","text":"fontlab.flPaper.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flPaper.html#currenthistorystate","text":"fontlab.flPaper.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flPaper.html#flag","text":"fontlab.flPaper.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flPaper.html#flobjectflags","text":"fontlab.flPaper.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flPaper.html#getglyphinfo","text":"fontlab.flPaper.getGlyphInfo = getGlyphInfo (...) flObject getGlyphInfo(flObject)","title":"getGlyphInfo"},{"location":"fontlab.flPaper.html#getproperties","text":"fontlab.flPaper.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flPaper.html#getproperty","text":"fontlab.flPaper.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flPaper.html#getpropertyfloat","text":"fontlab.flPaper.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flPaper.html#getpropertyint","text":"fontlab.flPaper.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flPaper.html#glyph","text":"fontlab.flPaper.glyph = glyph (...) flObject glyph()","title":"glyph"},{"location":"fontlab.flPaper.html#glyphinfoat","text":"fontlab.flPaper.glyphInfoAt = glyphInfoAt (...) flObject glyphInfoAt(int index)","title":"glyphInfoAt"},{"location":"fontlab.flPaper.html#glyphsboundrect","text":"fontlab.flPaper.glyphsBoundRect = glyphsBoundRect (...) QRectF glyphsBoundRect()","title":"glyphsBoundRect"},{"location":"fontlab.flPaper.html#hasactive","text":"fontlab.flPaper.hasActive = hasActive (...) bool hasActive()","title":"hasActive"},{"location":"fontlab.flPaper.html#haschanges","text":"fontlab.flPaper.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flPaper.html#hascontent","text":"fontlab.flPaper.hasContent = hasContent (...) bool hasContent()","title":"hasContent"},{"location":"fontlab.flPaper.html#hashistorystate","text":"fontlab.flPaper.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flPaper.html#hashistorystates","text":"fontlab.flPaper.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flPaper.html#haveobject","text":"fontlab.flPaper.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flPaper.html#historystates","text":"fontlab.flPaper.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flPaper.html#id","text":"fontlab.flPaper.id object id","title":"id"},{"location":"fontlab.flPaper.html#independedall","text":"fontlab.flPaper.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flPaper.html#initialhistorystate","text":"fontlab.flPaper.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flPaper.html#instancetype","text":"fontlab.flPaper.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flPaper.html#ischanged","text":"fontlab.flPaper.isChanged bool","title":"isChanged"},{"location":"fontlab.flPaper.html#isequal","text":"fontlab.flPaper.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flPaper.html#isnull","text":"fontlab.flPaper.isNull bool","title":"isNull"},{"location":"fontlab.flPaper.html#ispresent","text":"fontlab.flPaper.isPresent bool","title":"isPresent"},{"location":"fontlab.flPaper.html#isreleased","text":"fontlab.flPaper.isReleased bool","title":"isReleased"},{"location":"fontlab.flPaper.html#isvalid","text":"fontlab.flPaper.isValid bool","title":"isValid"},{"location":"fontlab.flPaper.html#name","text":"fontlab.flPaper.name object name","title":"name"},{"location":"fontlab.flPaper.html#package","text":"fontlab.flPaper.package = package (...) flObject package()","title":"package"},{"location":"fontlab.flPaper.html#refcnt","text":"fontlab.flPaper.refCnt object references count","title":"refCnt"},{"location":"fontlab.flPaper.html#release","text":"fontlab.flPaper.release = release (...) release()","title":"release"},{"location":"fontlab.flPaper.html#remove","text":"fontlab.flPaper.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flPaper.html#removechild","text":"fontlab.flPaper.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flPaper.html#removeproperty","text":"fontlab.flPaper.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flPaper.html#restorehistorystate","text":"fontlab.flPaper.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flPaper.html#setactiveglyph","text":"fontlab.flPaper.setActiveGlyph = setActiveGlyph (...) flObject setActiveGlyph(flObject glyph)","title":"setActiveGlyph"},{"location":"fontlab.flPaper.html#setflag","text":"fontlab.flPaper.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flPaper.html#setpaperglyph","text":"fontlab.flPaper.setPaperGlyph = setPaperGlyph (...) flObject setPaperGlyph(flObject glyph)","title":"setPaperGlyph"},{"location":"fontlab.flPaper.html#setproperty","text":"fontlab.flPaper.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flPaper.html#setpropertyfloat","text":"fontlab.flPaper.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flPaper.html#setpropertyint","text":"fontlab.flPaper.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flPaper.html#tag","text":"fontlab.flPaper.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flPaper.html#type","text":"fontlab.flPaper.type object type","title":"type"},{"location":"fontlab.flPaper.html#update","text":"fontlab.flPaper.update = update (...) update()","title":"update"},{"location":"fontlab.flPinPoint.html","text":"flPinPoint fontlab.flPinPoint = class flPinPoint ( object ) flPinPoint representation Constructors: flPinPoint() flPinPoint(flPinPoint) flPinPoint(flObject) flPinPoint(QPointF[, PinPointStyle=FreePosition]) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) translate (...) translate (QPointF) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flPinPoint createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors anchor bool cloudEnabled bool hasChanges bool hasHistoryStates bool id object id isChanged bool isLatch bool isLatch() isNull bool isPresent bool isReleased bool isValid bool name object name point QPointF refCnt object references count style PinPointStyle style() type object type Attributes PinPointStyle = {'FreePosition': 1, 'ShapeBound': 2} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} anchor fontlab.flPinPoint.anchor bool changed fontlab.flPinPoint.changed = changed (...) changed() checkInitHistoryState fontlab.flPinPoint.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flPinPoint.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flPinPoint.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flPinPoint.clearFlags = clearFlags (...) clearFlags() clone fontlab.flPinPoint.clone = clone (...) Clone the object cloneObject fontlab.flPinPoint.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); cloudEnabled fontlab.flPinPoint.cloudEnabled bool createHistoryState fontlab.flPinPoint.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flPinPoint.createInstance = createInstance (...) flPinPoint createInstance() createObject fontlab.flPinPoint.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flPinPoint.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flPinPoint.flag = flag (...) flag(uint f) flObjectFlags fontlab.flPinPoint.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flPinPoint.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flPinPoint.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flPinPoint.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flPinPoint.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flPinPoint.hasChanges bool hasHistoryState fontlab.flPinPoint.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flPinPoint.hasHistoryStates bool haveObject fontlab.flPinPoint.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flPinPoint.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flPinPoint.id object id independedAll fontlab.flPinPoint.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flPinPoint.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flPinPoint.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flPinPoint.isChanged bool isEqual fontlab.flPinPoint.isEqual = isEqual (...) isEqual(flObject) isLatch fontlab.flPinPoint.isLatch bool isLatch() isNull fontlab.flPinPoint.isNull bool isPresent fontlab.flPinPoint.isPresent bool isReleased fontlab.flPinPoint.isReleased bool isValid fontlab.flPinPoint.isValid bool name fontlab.flPinPoint.name object name PinPointStyle fontlab.flPinPoint.PinPointStyle = {'FreePosition': 1, 'ShapeBound': 2} point fontlab.flPinPoint.point QPointF refCnt fontlab.flPinPoint.refCnt object references count release fontlab.flPinPoint.release = release (...) release() remove fontlab.flPinPoint.remove = remove (...) remove([flObject]) removeChild fontlab.flPinPoint.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flPinPoint.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flPinPoint.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flPinPoint.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flPinPoint.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flPinPoint.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flPinPoint.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' style fontlab.flPinPoint.style PinPointStyle style() tag fontlab.flPinPoint.tag = tag (...) tag([string]) translate fontlab.flPinPoint.translate = translate (...) translate(QPointF) type fontlab.flPinPoint.type object type update fontlab.flPinPoint.update = update (...) update()","title":"flPinPoint"},{"location":"fontlab.flPinPoint.html#flpinpoint","text":"","title":"flPinPoint"},{"location":"fontlab.flPinPoint.html#anchor","text":"fontlab.flPinPoint.anchor bool","title":"anchor"},{"location":"fontlab.flPinPoint.html#changed","text":"fontlab.flPinPoint.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flPinPoint.html#checkinithistorystate","text":"fontlab.flPinPoint.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flPinPoint.html#clearabovehistory","text":"fontlab.flPinPoint.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flPinPoint.html#clearflag","text":"fontlab.flPinPoint.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flPinPoint.html#clearflags","text":"fontlab.flPinPoint.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flPinPoint.html#clone","text":"fontlab.flPinPoint.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flPinPoint.html#cloneobject","text":"fontlab.flPinPoint.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flPinPoint.html#cloudenabled","text":"fontlab.flPinPoint.cloudEnabled bool","title":"cloudEnabled"},{"location":"fontlab.flPinPoint.html#createhistorystate","text":"fontlab.flPinPoint.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flPinPoint.html#createinstance","text":"fontlab.flPinPoint.createInstance = createInstance (...) flPinPoint createInstance()","title":"createInstance"},{"location":"fontlab.flPinPoint.html#createobject","text":"fontlab.flPinPoint.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flPinPoint.html#currenthistorystate","text":"fontlab.flPinPoint.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flPinPoint.html#flag","text":"fontlab.flPinPoint.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flPinPoint.html#flobjectflags","text":"fontlab.flPinPoint.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flPinPoint.html#getproperties","text":"fontlab.flPinPoint.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flPinPoint.html#getproperty","text":"fontlab.flPinPoint.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flPinPoint.html#getpropertyfloat","text":"fontlab.flPinPoint.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flPinPoint.html#getpropertyint","text":"fontlab.flPinPoint.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flPinPoint.html#haschanges","text":"fontlab.flPinPoint.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flPinPoint.html#hashistorystate","text":"fontlab.flPinPoint.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flPinPoint.html#hashistorystates","text":"fontlab.flPinPoint.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flPinPoint.html#haveobject","text":"fontlab.flPinPoint.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flPinPoint.html#historystates","text":"fontlab.flPinPoint.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flPinPoint.html#id","text":"fontlab.flPinPoint.id object id","title":"id"},{"location":"fontlab.flPinPoint.html#independedall","text":"fontlab.flPinPoint.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flPinPoint.html#initialhistorystate","text":"fontlab.flPinPoint.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flPinPoint.html#instancetype","text":"fontlab.flPinPoint.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flPinPoint.html#ischanged","text":"fontlab.flPinPoint.isChanged bool","title":"isChanged"},{"location":"fontlab.flPinPoint.html#isequal","text":"fontlab.flPinPoint.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flPinPoint.html#islatch","text":"fontlab.flPinPoint.isLatch bool isLatch()","title":"isLatch"},{"location":"fontlab.flPinPoint.html#isnull","text":"fontlab.flPinPoint.isNull bool","title":"isNull"},{"location":"fontlab.flPinPoint.html#ispresent","text":"fontlab.flPinPoint.isPresent bool","title":"isPresent"},{"location":"fontlab.flPinPoint.html#isreleased","text":"fontlab.flPinPoint.isReleased bool","title":"isReleased"},{"location":"fontlab.flPinPoint.html#isvalid","text":"fontlab.flPinPoint.isValid bool","title":"isValid"},{"location":"fontlab.flPinPoint.html#name","text":"fontlab.flPinPoint.name object name","title":"name"},{"location":"fontlab.flPinPoint.html#pinpointstyle","text":"fontlab.flPinPoint.PinPointStyle = {'FreePosition': 1, 'ShapeBound': 2}","title":"PinPointStyle"},{"location":"fontlab.flPinPoint.html#point","text":"fontlab.flPinPoint.point QPointF","title":"point"},{"location":"fontlab.flPinPoint.html#refcnt","text":"fontlab.flPinPoint.refCnt object references count","title":"refCnt"},{"location":"fontlab.flPinPoint.html#release","text":"fontlab.flPinPoint.release = release (...) release()","title":"release"},{"location":"fontlab.flPinPoint.html#remove","text":"fontlab.flPinPoint.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flPinPoint.html#removechild","text":"fontlab.flPinPoint.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flPinPoint.html#removeproperty","text":"fontlab.flPinPoint.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flPinPoint.html#restorehistorystate","text":"fontlab.flPinPoint.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flPinPoint.html#setflag","text":"fontlab.flPinPoint.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flPinPoint.html#setproperty","text":"fontlab.flPinPoint.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flPinPoint.html#setpropertyfloat","text":"fontlab.flPinPoint.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flPinPoint.html#setpropertyint","text":"fontlab.flPinPoint.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flPinPoint.html#style","text":"fontlab.flPinPoint.style PinPointStyle style()","title":"style"},{"location":"fontlab.flPinPoint.html#tag","text":"fontlab.flPinPoint.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flPinPoint.html#translate","text":"fontlab.flPinPoint.translate = translate (...) translate(QPointF)","title":"translate"},{"location":"fontlab.flPinPoint.html#type","text":"fontlab.flPinPoint.type object type","title":"type"},{"location":"fontlab.flPinPoint.html#update","text":"fontlab.flPinPoint.update = update (...) update()","title":"update"},{"location":"fontlab.flPreferences.html","text":"flPreferences fontlab.flPreferences = class flPreferences ( object ) flPreferences representation Constructors: flPreferences() Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Static methods doInterpolate (...) bool doInterpolate () fontAuditTests (...) list(int) fontAuditTests () instance (...) flPreferences instance () namecaptionFont (...) QFont namecaptionFont (bool condensed) namecaptionFontFamilyName (...) string namecaptionFontFamilyName (bool condensed) namecaptionFontId (...) int namecaptionFontId (bool condensed) options2tracer_precision (...) double options2tracer_precision () options2tracer_smoothness (...) int options2tracer_smoothness () saveView (...) saveView () setEnabledHorizontalTextBlockAlignment (...) setEnabledHorizontalTextBlockAlignment (bool) setFontAuditTest (...) setFontAuditTest (int id, bool value) setGridDistances (...) setGridDistances (double x, double y) sourceMetricsSamples (...) QString sourceMetricsSamples () textBlockAlignmentCenter (...) bool textBlockAlignmentCenter () tracer2options_precision (...) double tracer2options_precision (double curve_fit) tracer2options_smoothness (...) double tracer2options_smoothness (int straighten_angle) unicode2text (...) QString unicode2text (uint unc) Descriptors colorEncoding QColor colorFontCell QColor colorGrid QColor colorKerning QColor colorMask QColor colorMaskGlobal QColor colorMaskLocal QColor colorMetrics QColor colorMetricsLines QColor colorWorkspace QColor convertDetectZoneTags bool convertPostScriptPrecision double convertTrueTypePrecision double convertTrueTypeShortCurves bool dataPath string dataPathDefault string deactivateShapeByClick bool defaultTexts QStringList developerBacklightUpdate bool developerLargeQuickHelp bool developerNoParameters bool developerOpenGL bool developerShowKeys bool drawFocusRect int dsigAlgorithm int dsigAuthority int dsigCertificatePath string dsigPassword string dsigPrivateKeyPath string dsigTimestamp bool dsigTimestampUrl string dsigUrl string dsigWrite bool editorAcrossGlyphs bool editorAcrossLayers bool editorAcrossShapes bool editorAlternativePencil bool editorAutoNonSpacing bool editorCenterGlyph bool editorClickSelectsCurve bool editorCloseDistance int editorCommandSelector bool editorCommandToggle bool editorContrast bool editorCoordinatesEditable bool editorCopyText bool editorCross bool editorCurvatureOpacity double editorCurvatureSize int editorDeleteBreaksContour bool editorDeleteSingleNode int editorDirectKerning bool editorDirectedShift bool editorDoubleClickToggle bool editorDragInactiveShape bool editorFastPreview bool editorFeatures bool editorFillOpacity int editorFillOpenContours bool editorFixedBCP bool editorFocus bool editorFollowItalicAngle bool editorForcedGrid bool editorForcedSnap bool editorFrameSelectsOnNodes bool editorGestures bool editorGuideHitDistance int editorHideMetricsTable bool editorHidePlaceholders bool editorInactiveHandles bool editorInactiveNodes int editorInactiveWireframe bool editorInertion bool editorInstanceLayer bool editorInterpolate bool editorInterpolateModifier bool editorKerningExclusive bool editorLayerDoubleClick bool editorListMaskLayers bool editorMatch bool editorMetricsDoubleClick bool editorMinHandle int editorMissingGlyphs bool editorModalPen bool editorNodeColor int editorNodeFontDefault int editorNodeFontHovered int editorNodeHitDistance int editorNodeSize int editorNoteExpanded bool editorNudge1 double editorNudge10 double editorOffsetDuplicate QPointF editorOffsetPaste QPointF editorOutlineThickness int editorPantographCurve int editorPantographNode int editorPasteArtwork int editorPasteContourVisual bool editorPenCorrection bool editorRoundCoordinates int editorRoundKerning bool editorRoundMetrics bool editorScrollBars bool editorSetMetrics2Frame bool editorShiftConstrains bool editorShiftExtendsSelection bool editorShowAngle bool editorShowCoordinates int editorShowNodeName int editorShowSb bool editorSidebarInactive int editorSnapDistance int editorSortMasters bool editorStrongRound bool editorTaperMode int editorToolsLocalized bool editorTopBottom bool editorUndoSelection bool editorUpdateAutoLayers bool editorUpdateMetricLinks bool editorUseItalicAngle int editorZoneNodes bool editorZoomAscender bool exportConflictMode int exportContent int exportDestinationFolder string exportDestinationMode int exportFlatten bool exportJsonFormatting bool exportOrganizeMode int exportPPM int exportSaveFolder string exportSaveSketchboard bool exportSaveVFJ bool exportSaveWorkspaceVFC uint exportSaveWorkspaceVFJ uint exportSessionVFJ bool featuresAddKerningClasses bool featuresAddOpenTypeClasses bool featuresAddTags bool featuresAddVirtualTags bool fontAbsentGray bool fontAllGlyphs bool fontAskFileName int fontAuditStemTolerance double fontCaption QFont fontCaptionEditable bool fontCaptionHeight int fontCaptionTop bool fontClose bool fontColoredCaption bool fontColoredItems bool fontCreateBackground bool fontCreateDynamic bool fontCreateGenerate bool fontDefaultEncoding string fontDefaultMode int fontDefaultSorting int fontDoubleClick bool fontDrawLines bool fontExtraIcons bool fontMarkOpacity int fontMetricsLimit int fontNamFileName string fontNamFileNameDefault string fontNameUnicode bool fontNewNames int fontNewWindow bool fontNoteIcon bool fontNoteText bool fontPropertyIcon bool fontShowGlyphMetrics bool fontTemplate QFont fontUnicodeName bool fontUnicodeUppercase bool fontsAutoSaveTimeInterval int generalActivatePanels bool generalBeta bool generalCheckUpdates bool generalRightMargin int generalSketchboard bool generalTabs int generalVirtualKeys bool gridDistanceX double gridDistanceY double gridItalicAngle bool gridOpacity double gridPointOpacity double gridSlant double groupsAlign int groupsColor QColor groupsContent string groupsDoubleClick bool groupsFill int groupsMask int groupsMasters bool groupsMetrics bool groupsOpacity int groupsShiftX double groupsShiftY double hintMaxH int hintMaxV int hintMinH int hintMinV int historyStoreSelection bool historyStoreViewPoint bool importCompileFeatures bool importComponents bool importConvertCurves bool importConvertNames int importDecompileFeatures bool importDecompileTables bool importDecompose bool importDetectGenius bool importDetectServant bool importExcludeTables QStringList importLockComposites bool importOpenFontWindow bool importRenameCID bool importSeparateMasters bool importTrueTypeShortCurves bool interpolateSmartRound bool kerningAuditExceptions double kerningAutoToleranceNegative double kerningAutoTolerancePositive double kerningPairs string lockFontGuidelines bool lockFontMetrics bool lockGrid bool lockGuidelines bool lockHints bool lockMask bool lockMaskGlobal bool lockMetrics bool lockPinPoints bool lockZones bool mastersBackgroundBrightness int mastersBarThickness int mastersKeepCompatible int mastersPreviewColor int match uint metricsFreeKerning bool metricsFreeMetrics bool metricsNudge1 double metricsNudge10 double metricsSamples string metricsSmartNavigation bool metricsToStroke bool openRestorePanels bool openRestoreWindows bool operationsOCR bool operationsPowerGuides int operationsSeparateDetectStrings bool operationsSeparateMergeOverlapped bool operationsSeparateMergeStacked bool operationsTesseractLanguages string operationsTracePrecision double operationsTraceSmoothness double panelFontSize int panelTabs int pasteEPS bool pasteIgnoreAppearance bool pathAutoSave string pythonClearContext bool qobject QObject saveBackupFolder bool saveConflictMode int showAnchorCloudSelected bool showHoveredCoordinates bool showNodePositionLarge bool showNodeStyle int showPinName bool showSelectionGlow bool showStemThickness int showTapeLine bool sketchboardAutoSaveTimeInterval int smartGuides bool snapToBounds bool snapToFontGuidelines bool snapToFontMetrics bool snapToGrid bool snapToGuidelines bool snapToHints bool snapToMask bool snapToMaskGlobal bool snapToMetrics bool snapToOutline bool snapToPinPoints bool snapToStems bool snapToZones bool stringIconLong string stringIconShort string stringSizeGlyphWaterfall string stringSizeTextWaterfall string templateFont QFont templateFontFamilyName string templateFontId int texts QStringList tthHintingFlag uint tthHintingTolerance uint tthPPM int tthRender int tthSamples string variationsInterpretLayerName uint viewAlternative bool viewAntialiasing bool workFont QFont workFontFamilyName string workFontId int zoomAscender int zoomDescender int zoomFactorKeyboard double zoomFactorWheel double zoomMode int zoomSize int Attributes ConflictOverwrite = 1 ConflictRename = 0 ConflictSkip = 2 ConflictTrash = 3 ContentCurrent = 0 ContentInstances = 2 ContentMasters = 3 ContentVisible = 1 CoordinanesNone = 0 CoordinatesAll = 2 CoordinatesSelected = 1 CurvatureLarge = 3 CurvatureMedium = 2 CurvatureSmall = 1 CurvatureSmart = 0 DestinationAsk = 0 DestinationFolder = 3 DestinationSource = 1 DrawFocusAlways = 1 DrawFocusNever = 0 DrawFocusPanels = 2 DsigAlgorithmMD5 = 0 DsigAlgorithmSHA1 = 1 DsigAuthorityCommercial = 1 DsigAuthorityDefault = 0 DsigAuthorityIndividual = 1 FontCaptionAuto = 0 FontCaptionLarge = 3 FontCaptionMedium = 2 FontCaptionSmall = 1 GroupsAlignCenter = 1 GroupsAlignLeft = 0 GroupsAlignRight = 2 GroupsFillAlways = 1 GroupsFillAuto = 0 GroupsFillNever = 2 GroupsMaskMask = 2 GroupsMaskNone = 1 GroupsMaskOutline = 0 InactiveNodeNone = 2 InactiveNodeNormal = 0 InactiveNodeSmall = 1 InterpretName = 128 InterpretWeight = 1 InterpretWidth = 2 KeepDraw = 4 KeepGuidesHints = 2 KeepInsertDelete = 1 KeepNone = 0 MastersBackground = 2 MastersBar = 1 MastersNone = 0 MatchAll = -1 MatchConvertSegment = 8 MatchDeleteNode = 1 MatchGuides = 16 MatchHints = 32 MatchInsertNode = 2 MatchInsertShape = 128 MatchPins = 64 MatchRenameNode = 4 MetricsHideAnchors = 64 MetricsHideFontGuides = 128 MetricsHideFontMetrics = 16 MetricsHideGlyphMetrics = 32 MetricsHideGrid = 8 MetricsHideGuides = 1 MetricsHideHints = 2 MetricsHideZones = 4 ModeCategories = 3 ModeCodepages = 2 ModeIndex = 5 ModeNames = 0 ModeNone = -1 ModeRanges = 1 ModeScripts = 4 NiceGlyphs = 2 NiceNone = 0 NicePdf = 3 NiceRobo = 1 NiceUni = 4 NodeNameAlways = 2 NodeNameCoordinates = 1 NodeNameNever = 0 NodeStyleAuto = 2 NodeStyleFlat = 1 NodeStyleFrame = 0 OrganizeNone = 0 OrganizePSN = 2 OrganizeProfile = 4 OrganizeSGN = 1 OrganizeTFN = 3 OrganizeTFN_Profile = 5 PasteAlign = 1 PasteAscender_Descender = 3 PasteCapsHeight_Baseline = 4 PasteCapsHeight_Descender = 5 PasteUPM_Descender = 2 PasteUnscaled = 0 PowerAll = 15 PowerFont = 2 PowerGlyph = 1 PowerMetrics = 8 PowerZones = 4 RainbowNoCenterline = 4 RainbowNoEdges = 2 RainbowNoRainbow = 8 RainbowNone = 0 RainbowShow = 1 RoundAll = 1 RoundNone = 0 RoundOn = 2 SaveFolderAsk = 0 SaveFolderFolder = 2 SaveFolderSource = 1 SaveWorkspacePanels = 2 SaveWorkspaceWindows = 1 SingleBreak = 0 SingleRemove = 1 TaperBody = 1 TaperEdge = 2 TaperEverywhere = 3 TaperNone = 0 ThicknessNormal = 1 ThicknessThick = 2 ThicknessThin = 0 TransformModeRotate = 0 TransformModeScale = 1 TransformModeSlant = 2 UseItalicAll = 2 UseItalicMetrics = 1 UseItalicNone = 0 ViewAnchorGroups = 7 ViewAnchors = 5 ViewBackground = 29 ViewContourDirection = 31 ViewCoordinates = 32 ViewCount = 42 ViewCounters = 35 ViewCurvature = 18 ViewFilledPreview = 28 ViewFontAudit = 19 ViewFontGuides = 1 ViewFontMetrics = 4 ViewGlobalMask = 16 ViewGlyphBar = 37 ViewGlyphGuides = 0 ViewGlyphMetrics = 3 ViewGrid = 11 ViewGroups = 36 ViewHandles = 24 ViewHintShadows = 30 ViewHints = 9 ViewInactiveGlyphs = 41 ViewKerningGroups = 8 ViewLocalMask = 17 ViewMasterLinks = 33 ViewMeasurement = 25 ViewMetricsTable = 26 ViewModeKerning = 4 ViewModeMetrics = 2 ViewModeOutline = 1 ViewModePreview = 0 ViewModeText = 8 ViewNodeLinks = 14 ViewNodes = 23 ViewPins = 6 ViewRulers = 27 ViewSelectionFrame = 38 ViewShapeConnection = 13 ViewShapeFrame = 12 ViewShapeGuides = 2 ViewShapeLinks = 15 ViewStickers = 40 ViewString = 34 ViewTapeLine = 20 ViewThickness = 39 ViewTunni = 21 ViewZones = 10 WindowsFontTabs = 2 WindowsTabs = 0 WindowsWindows = 1 ZoomModeLines = 2 ZoomModeMetrics = 0 ZoomModeSafe = 3 ZoomModeSize = 1 __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T renderBlackWhite = 1 renderClearType = 0 renderGrayScale = 2 colorEncoding fontlab.flPreferences.colorEncoding QColor colorFontCell fontlab.flPreferences.colorFontCell QColor colorGrid fontlab.flPreferences.colorGrid QColor colorKerning fontlab.flPreferences.colorKerning QColor colorMask fontlab.flPreferences.colorMask QColor colorMaskGlobal fontlab.flPreferences.colorMaskGlobal QColor colorMaskLocal fontlab.flPreferences.colorMaskLocal QColor colorMetrics fontlab.flPreferences.colorMetrics QColor colorMetricsLines fontlab.flPreferences.colorMetricsLines QColor colorWorkspace fontlab.flPreferences.colorWorkspace QColor ConflictOverwrite fontlab.flPreferences.ConflictOverwrite = 1 ConflictRename fontlab.flPreferences.ConflictRename = 0 ConflictSkip fontlab.flPreferences.ConflictSkip = 2 ConflictTrash fontlab.flPreferences.ConflictTrash = 3 ContentCurrent fontlab.flPreferences.ContentCurrent = 0 ContentInstances fontlab.flPreferences.ContentInstances = 2 ContentMasters fontlab.flPreferences.ContentMasters = 3 ContentVisible fontlab.flPreferences.ContentVisible = 1 convertDetectZoneTags fontlab.flPreferences.convertDetectZoneTags bool convertPostScriptPrecision fontlab.flPreferences.convertPostScriptPrecision double convertTrueTypePrecision fontlab.flPreferences.convertTrueTypePrecision double convertTrueTypeShortCurves fontlab.flPreferences.convertTrueTypeShortCurves bool CoordinanesNone fontlab.flPreferences.CoordinanesNone = 0 CoordinatesAll fontlab.flPreferences.CoordinatesAll = 2 CoordinatesSelected fontlab.flPreferences.CoordinatesSelected = 1 CurvatureLarge fontlab.flPreferences.CurvatureLarge = 3 CurvatureMedium fontlab.flPreferences.CurvatureMedium = 2 CurvatureSmall fontlab.flPreferences.CurvatureSmall = 1 CurvatureSmart fontlab.flPreferences.CurvatureSmart = 0 dataPath fontlab.flPreferences.dataPath string dataPathDefault fontlab.flPreferences.dataPathDefault string deactivateShapeByClick fontlab.flPreferences.deactivateShapeByClick bool defaultTexts fontlab.flPreferences.defaultTexts QStringList DestinationAsk fontlab.flPreferences.DestinationAsk = 0 DestinationFolder fontlab.flPreferences.DestinationFolder = 3 DestinationSource fontlab.flPreferences.DestinationSource = 1 developerBacklightUpdate fontlab.flPreferences.developerBacklightUpdate bool developerLargeQuickHelp fontlab.flPreferences.developerLargeQuickHelp bool developerNoParameters fontlab.flPreferences.developerNoParameters bool developerOpenGL fontlab.flPreferences.developerOpenGL bool developerShowKeys fontlab.flPreferences.developerShowKeys bool doInterpolate fontlab.flPreferences.doInterpolate = doInterpolate (...) bool doInterpolate() DrawFocusAlways fontlab.flPreferences.DrawFocusAlways = 1 DrawFocusNever fontlab.flPreferences.DrawFocusNever = 0 DrawFocusPanels fontlab.flPreferences.DrawFocusPanels = 2 drawFocusRect fontlab.flPreferences.drawFocusRect int dsigAlgorithm fontlab.flPreferences.dsigAlgorithm int DsigAlgorithmMD5 fontlab.flPreferences.DsigAlgorithmMD5 = 0 DsigAlgorithmSHA1 fontlab.flPreferences.DsigAlgorithmSHA1 = 1 dsigAuthority fontlab.flPreferences.dsigAuthority int DsigAuthorityCommercial fontlab.flPreferences.DsigAuthorityCommercial = 1 DsigAuthorityDefault fontlab.flPreferences.DsigAuthorityDefault = 0 DsigAuthorityIndividual fontlab.flPreferences.DsigAuthorityIndividual = 1 dsigCertificatePath fontlab.flPreferences.dsigCertificatePath string dsigPassword fontlab.flPreferences.dsigPassword string dsigPrivateKeyPath fontlab.flPreferences.dsigPrivateKeyPath string dsigTimestamp fontlab.flPreferences.dsigTimestamp bool dsigTimestampUrl fontlab.flPreferences.dsigTimestampUrl string dsigUrl fontlab.flPreferences.dsigUrl string dsigWrite fontlab.flPreferences.dsigWrite bool editorAcrossGlyphs fontlab.flPreferences.editorAcrossGlyphs bool editorAcrossLayers fontlab.flPreferences.editorAcrossLayers bool editorAcrossShapes fontlab.flPreferences.editorAcrossShapes bool editorAlternativePencil fontlab.flPreferences.editorAlternativePencil bool editorAutoNonSpacing fontlab.flPreferences.editorAutoNonSpacing bool editorCenterGlyph fontlab.flPreferences.editorCenterGlyph bool editorClickSelectsCurve fontlab.flPreferences.editorClickSelectsCurve bool editorCloseDistance fontlab.flPreferences.editorCloseDistance int editorCommandSelector fontlab.flPreferences.editorCommandSelector bool editorCommandToggle fontlab.flPreferences.editorCommandToggle bool editorContrast fontlab.flPreferences.editorContrast bool editorCoordinatesEditable fontlab.flPreferences.editorCoordinatesEditable bool editorCopyText fontlab.flPreferences.editorCopyText bool editorCross fontlab.flPreferences.editorCross bool editorCurvatureOpacity fontlab.flPreferences.editorCurvatureOpacity double editorCurvatureSize fontlab.flPreferences.editorCurvatureSize int editorDeleteBreaksContour fontlab.flPreferences.editorDeleteBreaksContour bool editorDeleteSingleNode fontlab.flPreferences.editorDeleteSingleNode int editorDirectedShift fontlab.flPreferences.editorDirectedShift bool editorDirectKerning fontlab.flPreferences.editorDirectKerning bool editorDoubleClickToggle fontlab.flPreferences.editorDoubleClickToggle bool editorDragInactiveShape fontlab.flPreferences.editorDragInactiveShape bool editorFastPreview fontlab.flPreferences.editorFastPreview bool editorFeatures fontlab.flPreferences.editorFeatures bool editorFillOpacity fontlab.flPreferences.editorFillOpacity int editorFillOpenContours fontlab.flPreferences.editorFillOpenContours bool editorFixedBCP fontlab.flPreferences.editorFixedBCP bool editorFocus fontlab.flPreferences.editorFocus bool editorFollowItalicAngle fontlab.flPreferences.editorFollowItalicAngle bool editorForcedGrid fontlab.flPreferences.editorForcedGrid bool editorForcedSnap fontlab.flPreferences.editorForcedSnap bool editorFrameSelectsOnNodes fontlab.flPreferences.editorFrameSelectsOnNodes bool editorGestures fontlab.flPreferences.editorGestures bool editorGuideHitDistance fontlab.flPreferences.editorGuideHitDistance int editorHideMetricsTable fontlab.flPreferences.editorHideMetricsTable bool editorHidePlaceholders fontlab.flPreferences.editorHidePlaceholders bool editorInactiveHandles fontlab.flPreferences.editorInactiveHandles bool editorInactiveNodes fontlab.flPreferences.editorInactiveNodes int editorInactiveWireframe fontlab.flPreferences.editorInactiveWireframe bool editorInertion fontlab.flPreferences.editorInertion bool editorInstanceLayer fontlab.flPreferences.editorInstanceLayer bool editorInterpolate fontlab.flPreferences.editorInterpolate bool editorInterpolateModifier fontlab.flPreferences.editorInterpolateModifier bool editorKerningExclusive fontlab.flPreferences.editorKerningExclusive bool editorLayerDoubleClick fontlab.flPreferences.editorLayerDoubleClick bool editorListMaskLayers fontlab.flPreferences.editorListMaskLayers bool editorMatch fontlab.flPreferences.editorMatch bool editorMetricsDoubleClick fontlab.flPreferences.editorMetricsDoubleClick bool editorMinHandle fontlab.flPreferences.editorMinHandle int editorMissingGlyphs fontlab.flPreferences.editorMissingGlyphs bool editorModalPen fontlab.flPreferences.editorModalPen bool editorNodeColor fontlab.flPreferences.editorNodeColor int editorNodeFontDefault fontlab.flPreferences.editorNodeFontDefault int editorNodeFontHovered fontlab.flPreferences.editorNodeFontHovered int editorNodeHitDistance fontlab.flPreferences.editorNodeHitDistance int editorNodeSize fontlab.flPreferences.editorNodeSize int editorNoteExpanded fontlab.flPreferences.editorNoteExpanded bool editorNudge1 fontlab.flPreferences.editorNudge1 double editorNudge10 fontlab.flPreferences.editorNudge10 double editorOffsetDuplicate fontlab.flPreferences.editorOffsetDuplicate QPointF editorOffsetPaste fontlab.flPreferences.editorOffsetPaste QPointF editorOutlineThickness fontlab.flPreferences.editorOutlineThickness int editorPantographCurve fontlab.flPreferences.editorPantographCurve int editorPantographNode fontlab.flPreferences.editorPantographNode int editorPasteArtwork fontlab.flPreferences.editorPasteArtwork int editorPasteContourVisual fontlab.flPreferences.editorPasteContourVisual bool editorPenCorrection fontlab.flPreferences.editorPenCorrection bool editorRoundCoordinates fontlab.flPreferences.editorRoundCoordinates int editorRoundKerning fontlab.flPreferences.editorRoundKerning bool editorRoundMetrics fontlab.flPreferences.editorRoundMetrics bool editorScrollBars fontlab.flPreferences.editorScrollBars bool editorSetMetrics2Frame fontlab.flPreferences.editorSetMetrics2Frame bool editorShiftConstrains fontlab.flPreferences.editorShiftConstrains bool editorShiftExtendsSelection fontlab.flPreferences.editorShiftExtendsSelection bool editorShowAngle fontlab.flPreferences.editorShowAngle bool editorShowCoordinates fontlab.flPreferences.editorShowCoordinates int editorShowNodeName fontlab.flPreferences.editorShowNodeName int editorShowSb fontlab.flPreferences.editorShowSb bool editorSidebarInactive fontlab.flPreferences.editorSidebarInactive int editorSnapDistance fontlab.flPreferences.editorSnapDistance int editorSortMasters fontlab.flPreferences.editorSortMasters bool editorStrongRound fontlab.flPreferences.editorStrongRound bool editorTaperMode fontlab.flPreferences.editorTaperMode int editorToolsLocalized fontlab.flPreferences.editorToolsLocalized bool editorTopBottom fontlab.flPreferences.editorTopBottom bool editorUndoSelection fontlab.flPreferences.editorUndoSelection bool editorUpdateAutoLayers fontlab.flPreferences.editorUpdateAutoLayers bool editorUpdateMetricLinks fontlab.flPreferences.editorUpdateMetricLinks bool editorUseItalicAngle fontlab.flPreferences.editorUseItalicAngle int editorZoneNodes fontlab.flPreferences.editorZoneNodes bool editorZoomAscender fontlab.flPreferences.editorZoomAscender bool exportConflictMode fontlab.flPreferences.exportConflictMode int exportContent fontlab.flPreferences.exportContent int exportDestinationFolder fontlab.flPreferences.exportDestinationFolder string exportDestinationMode fontlab.flPreferences.exportDestinationMode int exportFlatten fontlab.flPreferences.exportFlatten bool exportJsonFormatting fontlab.flPreferences.exportJsonFormatting bool exportOrganizeMode fontlab.flPreferences.exportOrganizeMode int exportPPM fontlab.flPreferences.exportPPM int exportSaveFolder fontlab.flPreferences.exportSaveFolder string exportSaveSketchboard fontlab.flPreferences.exportSaveSketchboard bool exportSaveVFJ fontlab.flPreferences.exportSaveVFJ bool exportSaveWorkspaceVFC fontlab.flPreferences.exportSaveWorkspaceVFC uint exportSaveWorkspaceVFJ fontlab.flPreferences.exportSaveWorkspaceVFJ uint exportSessionVFJ fontlab.flPreferences.exportSessionVFJ bool featuresAddKerningClasses fontlab.flPreferences.featuresAddKerningClasses bool featuresAddOpenTypeClasses fontlab.flPreferences.featuresAddOpenTypeClasses bool featuresAddTags fontlab.flPreferences.featuresAddTags bool featuresAddVirtualTags fontlab.flPreferences.featuresAddVirtualTags bool fontAbsentGray fontlab.flPreferences.fontAbsentGray bool fontAllGlyphs fontlab.flPreferences.fontAllGlyphs bool fontAskFileName fontlab.flPreferences.fontAskFileName int fontAuditStemTolerance fontlab.flPreferences.fontAuditStemTolerance double fontAuditTests fontlab.flPreferences.fontAuditTests = fontAuditTests (...) list(int) fontAuditTests() fontCaption fontlab.flPreferences.fontCaption QFont FontCaptionAuto fontlab.flPreferences.FontCaptionAuto = 0 fontCaptionEditable fontlab.flPreferences.fontCaptionEditable bool fontCaptionHeight fontlab.flPreferences.fontCaptionHeight int FontCaptionLarge fontlab.flPreferences.FontCaptionLarge = 3 FontCaptionMedium fontlab.flPreferences.FontCaptionMedium = 2 FontCaptionSmall fontlab.flPreferences.FontCaptionSmall = 1 fontCaptionTop fontlab.flPreferences.fontCaptionTop bool fontClose fontlab.flPreferences.fontClose bool fontColoredCaption fontlab.flPreferences.fontColoredCaption bool fontColoredItems fontlab.flPreferences.fontColoredItems bool fontCreateBackground fontlab.flPreferences.fontCreateBackground bool fontCreateDynamic fontlab.flPreferences.fontCreateDynamic bool fontCreateGenerate fontlab.flPreferences.fontCreateGenerate bool fontDefaultEncoding fontlab.flPreferences.fontDefaultEncoding string fontDefaultMode fontlab.flPreferences.fontDefaultMode int fontDefaultSorting fontlab.flPreferences.fontDefaultSorting int fontDoubleClick fontlab.flPreferences.fontDoubleClick bool fontDrawLines fontlab.flPreferences.fontDrawLines bool fontExtraIcons fontlab.flPreferences.fontExtraIcons bool fontMarkOpacity fontlab.flPreferences.fontMarkOpacity int fontMetricsLimit fontlab.flPreferences.fontMetricsLimit int fontNameUnicode fontlab.flPreferences.fontNameUnicode bool fontNamFileName fontlab.flPreferences.fontNamFileName string fontNamFileNameDefault fontlab.flPreferences.fontNamFileNameDefault string fontNewNames fontlab.flPreferences.fontNewNames int fontNewWindow fontlab.flPreferences.fontNewWindow bool fontNoteIcon fontlab.flPreferences.fontNoteIcon bool fontNoteText fontlab.flPreferences.fontNoteText bool fontPropertyIcon fontlab.flPreferences.fontPropertyIcon bool fontsAutoSaveTimeInterval fontlab.flPreferences.fontsAutoSaveTimeInterval int fontShowGlyphMetrics fontlab.flPreferences.fontShowGlyphMetrics bool fontTemplate fontlab.flPreferences.fontTemplate QFont fontUnicodeName fontlab.flPreferences.fontUnicodeName bool fontUnicodeUppercase fontlab.flPreferences.fontUnicodeUppercase bool generalActivatePanels fontlab.flPreferences.generalActivatePanels bool generalBeta fontlab.flPreferences.generalBeta bool generalCheckUpdates fontlab.flPreferences.generalCheckUpdates bool generalRightMargin fontlab.flPreferences.generalRightMargin int generalSketchboard fontlab.flPreferences.generalSketchboard bool generalTabs fontlab.flPreferences.generalTabs int generalVirtualKeys fontlab.flPreferences.generalVirtualKeys bool gridDistanceX fontlab.flPreferences.gridDistanceX double gridDistanceY fontlab.flPreferences.gridDistanceY double gridItalicAngle fontlab.flPreferences.gridItalicAngle bool gridOpacity fontlab.flPreferences.gridOpacity double gridPointOpacity fontlab.flPreferences.gridPointOpacity double gridSlant fontlab.flPreferences.gridSlant double groupsAlign fontlab.flPreferences.groupsAlign int GroupsAlignCenter fontlab.flPreferences.GroupsAlignCenter = 1 GroupsAlignLeft fontlab.flPreferences.GroupsAlignLeft = 0 GroupsAlignRight fontlab.flPreferences.GroupsAlignRight = 2 groupsColor fontlab.flPreferences.groupsColor QColor groupsContent fontlab.flPreferences.groupsContent string groupsDoubleClick fontlab.flPreferences.groupsDoubleClick bool groupsFill fontlab.flPreferences.groupsFill int GroupsFillAlways fontlab.flPreferences.GroupsFillAlways = 1 GroupsFillAuto fontlab.flPreferences.GroupsFillAuto = 0 GroupsFillNever fontlab.flPreferences.GroupsFillNever = 2 groupsMask fontlab.flPreferences.groupsMask int GroupsMaskMask fontlab.flPreferences.GroupsMaskMask = 2 GroupsMaskNone fontlab.flPreferences.GroupsMaskNone = 1 GroupsMaskOutline fontlab.flPreferences.GroupsMaskOutline = 0 groupsMasters fontlab.flPreferences.groupsMasters bool groupsMetrics fontlab.flPreferences.groupsMetrics bool groupsOpacity fontlab.flPreferences.groupsOpacity int groupsShiftX fontlab.flPreferences.groupsShiftX double groupsShiftY fontlab.flPreferences.groupsShiftY double hintMaxH fontlab.flPreferences.hintMaxH int hintMaxV fontlab.flPreferences.hintMaxV int hintMinH fontlab.flPreferences.hintMinH int hintMinV fontlab.flPreferences.hintMinV int historyStoreSelection fontlab.flPreferences.historyStoreSelection bool historyStoreViewPoint fontlab.flPreferences.historyStoreViewPoint bool importCompileFeatures fontlab.flPreferences.importCompileFeatures bool importComponents fontlab.flPreferences.importComponents bool importConvertCurves fontlab.flPreferences.importConvertCurves bool importConvertNames fontlab.flPreferences.importConvertNames int importDecompileFeatures fontlab.flPreferences.importDecompileFeatures bool importDecompileTables fontlab.flPreferences.importDecompileTables bool importDecompose fontlab.flPreferences.importDecompose bool importDetectGenius fontlab.flPreferences.importDetectGenius bool importDetectServant fontlab.flPreferences.importDetectServant bool importExcludeTables fontlab.flPreferences.importExcludeTables QStringList importLockComposites fontlab.flPreferences.importLockComposites bool importOpenFontWindow fontlab.flPreferences.importOpenFontWindow bool importRenameCID fontlab.flPreferences.importRenameCID bool importSeparateMasters fontlab.flPreferences.importSeparateMasters bool importTrueTypeShortCurves fontlab.flPreferences.importTrueTypeShortCurves bool InactiveNodeNone fontlab.flPreferences.InactiveNodeNone = 2 InactiveNodeNormal fontlab.flPreferences.InactiveNodeNormal = 0 InactiveNodeSmall fontlab.flPreferences.InactiveNodeSmall = 1 instance fontlab.flPreferences.instance = instance (...) flPreferences instance() interpolateSmartRound fontlab.flPreferences.interpolateSmartRound bool InterpretName fontlab.flPreferences.InterpretName = 128 InterpretWeight fontlab.flPreferences.InterpretWeight = 1 InterpretWidth fontlab.flPreferences.InterpretWidth = 2 KeepDraw fontlab.flPreferences.KeepDraw = 4 KeepGuidesHints fontlab.flPreferences.KeepGuidesHints = 2 KeepInsertDelete fontlab.flPreferences.KeepInsertDelete = 1 KeepNone fontlab.flPreferences.KeepNone = 0 kerningAuditExceptions fontlab.flPreferences.kerningAuditExceptions double kerningAutoToleranceNegative fontlab.flPreferences.kerningAutoToleranceNegative double kerningAutoTolerancePositive fontlab.flPreferences.kerningAutoTolerancePositive double kerningPairs fontlab.flPreferences.kerningPairs string lockFontGuidelines fontlab.flPreferences.lockFontGuidelines bool lockFontMetrics fontlab.flPreferences.lockFontMetrics bool lockGrid fontlab.flPreferences.lockGrid bool lockGuidelines fontlab.flPreferences.lockGuidelines bool lockHints fontlab.flPreferences.lockHints bool lockMask fontlab.flPreferences.lockMask bool lockMaskGlobal fontlab.flPreferences.lockMaskGlobal bool lockMetrics fontlab.flPreferences.lockMetrics bool lockPinPoints fontlab.flPreferences.lockPinPoints bool lockZones fontlab.flPreferences.lockZones bool MastersBackground fontlab.flPreferences.MastersBackground = 2 mastersBackgroundBrightness fontlab.flPreferences.mastersBackgroundBrightness int MastersBar fontlab.flPreferences.MastersBar = 1 mastersBarThickness fontlab.flPreferences.mastersBarThickness int mastersKeepCompatible fontlab.flPreferences.mastersKeepCompatible int MastersNone fontlab.flPreferences.MastersNone = 0 mastersPreviewColor fontlab.flPreferences.mastersPreviewColor int match fontlab.flPreferences.match uint MatchAll fontlab.flPreferences.MatchAll = -1 MatchConvertSegment fontlab.flPreferences.MatchConvertSegment = 8 MatchDeleteNode fontlab.flPreferences.MatchDeleteNode = 1 MatchGuides fontlab.flPreferences.MatchGuides = 16 MatchHints fontlab.flPreferences.MatchHints = 32 MatchInsertNode fontlab.flPreferences.MatchInsertNode = 2 MatchInsertShape fontlab.flPreferences.MatchInsertShape = 128 MatchPins fontlab.flPreferences.MatchPins = 64 MatchRenameNode fontlab.flPreferences.MatchRenameNode = 4 metricsFreeKerning fontlab.flPreferences.metricsFreeKerning bool metricsFreeMetrics fontlab.flPreferences.metricsFreeMetrics bool MetricsHideAnchors fontlab.flPreferences.MetricsHideAnchors = 64 MetricsHideFontGuides fontlab.flPreferences.MetricsHideFontGuides = 128 MetricsHideFontMetrics fontlab.flPreferences.MetricsHideFontMetrics = 16 MetricsHideGlyphMetrics fontlab.flPreferences.MetricsHideGlyphMetrics = 32 MetricsHideGrid fontlab.flPreferences.MetricsHideGrid = 8 MetricsHideGuides fontlab.flPreferences.MetricsHideGuides = 1 MetricsHideHints fontlab.flPreferences.MetricsHideHints = 2 MetricsHideZones fontlab.flPreferences.MetricsHideZones = 4 metricsNudge1 fontlab.flPreferences.metricsNudge1 double metricsNudge10 fontlab.flPreferences.metricsNudge10 double metricsSamples fontlab.flPreferences.metricsSamples string metricsSmartNavigation fontlab.flPreferences.metricsSmartNavigation bool metricsToStroke fontlab.flPreferences.metricsToStroke bool ModeCategories fontlab.flPreferences.ModeCategories = 3 ModeCodepages fontlab.flPreferences.ModeCodepages = 2 ModeIndex fontlab.flPreferences.ModeIndex = 5 ModeNames fontlab.flPreferences.ModeNames = 0 ModeNone fontlab.flPreferences.ModeNone = -1 ModeRanges fontlab.flPreferences.ModeRanges = 1 ModeScripts fontlab.flPreferences.ModeScripts = 4 namecaptionFont fontlab.flPreferences.namecaptionFont = namecaptionFont (...) QFont namecaptionFont (bool condensed) namecaptionFontFamilyName fontlab.flPreferences.namecaptionFontFamilyName = namecaptionFontFamilyName (...) string namecaptionFontFamilyName (bool condensed) namecaptionFontId fontlab.flPreferences.namecaptionFontId = namecaptionFontId (...) int namecaptionFontId (bool condensed) NiceGlyphs fontlab.flPreferences.NiceGlyphs = 2 NiceNone fontlab.flPreferences.NiceNone = 0 NicePdf fontlab.flPreferences.NicePdf = 3 NiceRobo fontlab.flPreferences.NiceRobo = 1 NiceUni fontlab.flPreferences.NiceUni = 4 NodeNameAlways fontlab.flPreferences.NodeNameAlways = 2 NodeNameCoordinates fontlab.flPreferences.NodeNameCoordinates = 1 NodeNameNever fontlab.flPreferences.NodeNameNever = 0 NodeStyleAuto fontlab.flPreferences.NodeStyleAuto = 2 NodeStyleFlat fontlab.flPreferences.NodeStyleFlat = 1 NodeStyleFrame fontlab.flPreferences.NodeStyleFrame = 0 openRestorePanels fontlab.flPreferences.openRestorePanels bool openRestoreWindows fontlab.flPreferences.openRestoreWindows bool operationsOCR fontlab.flPreferences.operationsOCR bool operationsPowerGuides fontlab.flPreferences.operationsPowerGuides int operationsSeparateDetectStrings fontlab.flPreferences.operationsSeparateDetectStrings bool operationsSeparateMergeOverlapped fontlab.flPreferences.operationsSeparateMergeOverlapped bool operationsSeparateMergeStacked fontlab.flPreferences.operationsSeparateMergeStacked bool operationsTesseractLanguages fontlab.flPreferences.operationsTesseractLanguages string operationsTracePrecision fontlab.flPreferences.operationsTracePrecision double operationsTraceSmoothness fontlab.flPreferences.operationsTraceSmoothness double options2tracer_precision fontlab.flPreferences.options2tracer_precision = options2tracer_precision (...) double options2tracer_precision() options2tracer_smoothness fontlab.flPreferences.options2tracer_smoothness = options2tracer_smoothness (...) int options2tracer_smoothness() OrganizeNone fontlab.flPreferences.OrganizeNone = 0 OrganizeProfile fontlab.flPreferences.OrganizeProfile = 4 OrganizePSN fontlab.flPreferences.OrganizePSN = 2 OrganizeSGN fontlab.flPreferences.OrganizeSGN = 1 OrganizeTFN fontlab.flPreferences.OrganizeTFN = 3 OrganizeTFN_Profile fontlab.flPreferences.OrganizeTFN_Profile = 5 panelFontSize fontlab.flPreferences.panelFontSize int panelTabs fontlab.flPreferences.panelTabs int PasteAlign fontlab.flPreferences.PasteAlign = 1 PasteAscender_Descender fontlab.flPreferences.PasteAscender_Descender = 3 PasteCapsHeight_Baseline fontlab.flPreferences.PasteCapsHeight_Baseline = 4 PasteCapsHeight_Descender fontlab.flPreferences.PasteCapsHeight_Descender = 5 pasteEPS fontlab.flPreferences.pasteEPS bool pasteIgnoreAppearance fontlab.flPreferences.pasteIgnoreAppearance bool PasteUnscaled fontlab.flPreferences.PasteUnscaled = 0 PasteUPM_Descender fontlab.flPreferences.PasteUPM_Descender = 2 pathAutoSave fontlab.flPreferences.pathAutoSave string PowerAll fontlab.flPreferences.PowerAll = 15 PowerFont fontlab.flPreferences.PowerFont = 2 PowerGlyph fontlab.flPreferences.PowerGlyph = 1 PowerMetrics fontlab.flPreferences.PowerMetrics = 8 PowerZones fontlab.flPreferences.PowerZones = 4 pythonClearContext fontlab.flPreferences.pythonClearContext bool qobject fontlab.flPreferences.qobject QObject RainbowNoCenterline fontlab.flPreferences.RainbowNoCenterline = 4 RainbowNoEdges fontlab.flPreferences.RainbowNoEdges = 2 RainbowNone fontlab.flPreferences.RainbowNone = 0 RainbowNoRainbow fontlab.flPreferences.RainbowNoRainbow = 8 RainbowShow fontlab.flPreferences.RainbowShow = 1 renderBlackWhite fontlab.flPreferences.renderBlackWhite = 1 renderClearType fontlab.flPreferences.renderClearType = 0 renderGrayScale fontlab.flPreferences.renderGrayScale = 2 RoundAll fontlab.flPreferences.RoundAll = 1 RoundNone fontlab.flPreferences.RoundNone = 0 RoundOn fontlab.flPreferences.RoundOn = 2 saveBackupFolder fontlab.flPreferences.saveBackupFolder bool saveConflictMode fontlab.flPreferences.saveConflictMode int SaveFolderAsk fontlab.flPreferences.SaveFolderAsk = 0 SaveFolderFolder fontlab.flPreferences.SaveFolderFolder = 2 SaveFolderSource fontlab.flPreferences.SaveFolderSource = 1 saveView fontlab.flPreferences.saveView = saveView (...) saveView() SaveWorkspacePanels fontlab.flPreferences.SaveWorkspacePanels = 2 SaveWorkspaceWindows fontlab.flPreferences.SaveWorkspaceWindows = 1 setEnabledHorizontalTextBlockAlignment fontlab.flPreferences.setEnabledHorizontalTextBlockAlignment = setEnabledHorizontalTextBlockAlignment (...) setEnabledHorizontalTextBlockAlignment(bool) setFontAuditTest fontlab.flPreferences.setFontAuditTest = setFontAuditTest (...) setFontAuditTest(int id, bool value) setGridDistances fontlab.flPreferences.setGridDistances = setGridDistances (...) setGridDistances(double x, double y) showAnchorCloudSelected fontlab.flPreferences.showAnchorCloudSelected bool showHoveredCoordinates fontlab.flPreferences.showHoveredCoordinates bool showNodePositionLarge fontlab.flPreferences.showNodePositionLarge bool showNodeStyle fontlab.flPreferences.showNodeStyle int showPinName fontlab.flPreferences.showPinName bool showSelectionGlow fontlab.flPreferences.showSelectionGlow bool showStemThickness fontlab.flPreferences.showStemThickness int showTapeLine fontlab.flPreferences.showTapeLine bool SingleBreak fontlab.flPreferences.SingleBreak = 0 SingleRemove fontlab.flPreferences.SingleRemove = 1 sketchboardAutoSaveTimeInterval fontlab.flPreferences.sketchboardAutoSaveTimeInterval int smartGuides fontlab.flPreferences.smartGuides bool snapToBounds fontlab.flPreferences.snapToBounds bool snapToFontGuidelines fontlab.flPreferences.snapToFontGuidelines bool snapToFontMetrics fontlab.flPreferences.snapToFontMetrics bool snapToGrid fontlab.flPreferences.snapToGrid bool snapToGuidelines fontlab.flPreferences.snapToGuidelines bool snapToHints fontlab.flPreferences.snapToHints bool snapToMask fontlab.flPreferences.snapToMask bool snapToMaskGlobal fontlab.flPreferences.snapToMaskGlobal bool snapToMetrics fontlab.flPreferences.snapToMetrics bool snapToOutline fontlab.flPreferences.snapToOutline bool snapToPinPoints fontlab.flPreferences.snapToPinPoints bool snapToStems fontlab.flPreferences.snapToStems bool snapToZones fontlab.flPreferences.snapToZones bool sourceMetricsSamples fontlab.flPreferences.sourceMetricsSamples = sourceMetricsSamples (...) QString sourceMetricsSamples() stringIconLong fontlab.flPreferences.stringIconLong string stringIconShort fontlab.flPreferences.stringIconShort string stringSizeGlyphWaterfall fontlab.flPreferences.stringSizeGlyphWaterfall string stringSizeTextWaterfall fontlab.flPreferences.stringSizeTextWaterfall string TaperBody fontlab.flPreferences.TaperBody = 1 TaperEdge fontlab.flPreferences.TaperEdge = 2 TaperEverywhere fontlab.flPreferences.TaperEverywhere = 3 TaperNone fontlab.flPreferences.TaperNone = 0 templateFont fontlab.flPreferences.templateFont QFont templateFontFamilyName fontlab.flPreferences.templateFontFamilyName string templateFontId fontlab.flPreferences.templateFontId int textBlockAlignmentCenter fontlab.flPreferences.textBlockAlignmentCenter = textBlockAlignmentCenter (...) bool textBlockAlignmentCenter() texts fontlab.flPreferences.texts QStringList ThicknessNormal fontlab.flPreferences.ThicknessNormal = 1 ThicknessThick fontlab.flPreferences.ThicknessThick = 2 ThicknessThin fontlab.flPreferences.ThicknessThin = 0 tracer2options_precision fontlab.flPreferences.tracer2options_precision = tracer2options_precision (...) double tracer2options_precision(double curve_fit) tracer2options_smoothness fontlab.flPreferences.tracer2options_smoothness = tracer2options_smoothness (...) double tracer2options_smoothness(int straighten_angle) TransformModeRotate fontlab.flPreferences.TransformModeRotate = 0 TransformModeScale fontlab.flPreferences.TransformModeScale = 1 TransformModeSlant fontlab.flPreferences.TransformModeSlant = 2 tthHintingFlag fontlab.flPreferences.tthHintingFlag uint tthHintingTolerance fontlab.flPreferences.tthHintingTolerance uint tthPPM fontlab.flPreferences.tthPPM int tthRender fontlab.flPreferences.tthRender int tthSamples fontlab.flPreferences.tthSamples string unicode2text fontlab.flPreferences.unicode2text = unicode2text (...) QString unicode2text(uint unc) UseItalicAll fontlab.flPreferences.UseItalicAll = 2 UseItalicMetrics fontlab.flPreferences.UseItalicMetrics = 1 UseItalicNone fontlab.flPreferences.UseItalicNone = 0 variationsInterpretLayerName fontlab.flPreferences.variationsInterpretLayerName uint viewAlternative fontlab.flPreferences.viewAlternative bool ViewAnchorGroups fontlab.flPreferences.ViewAnchorGroups = 7 ViewAnchors fontlab.flPreferences.ViewAnchors = 5 viewAntialiasing fontlab.flPreferences.viewAntialiasing bool ViewBackground fontlab.flPreferences.ViewBackground = 29 ViewContourDirection fontlab.flPreferences.ViewContourDirection = 31 ViewCoordinates fontlab.flPreferences.ViewCoordinates = 32 ViewCount fontlab.flPreferences.ViewCount = 42 ViewCounters fontlab.flPreferences.ViewCounters = 35 ViewCurvature fontlab.flPreferences.ViewCurvature = 18 ViewFilledPreview fontlab.flPreferences.ViewFilledPreview = 28 ViewFontAudit fontlab.flPreferences.ViewFontAudit = 19 ViewFontGuides fontlab.flPreferences.ViewFontGuides = 1 ViewFontMetrics fontlab.flPreferences.ViewFontMetrics = 4 ViewGlobalMask fontlab.flPreferences.ViewGlobalMask = 16 ViewGlyphBar fontlab.flPreferences.ViewGlyphBar = 37 ViewGlyphGuides fontlab.flPreferences.ViewGlyphGuides = 0 ViewGlyphMetrics fontlab.flPreferences.ViewGlyphMetrics = 3 ViewGrid fontlab.flPreferences.ViewGrid = 11 ViewGroups fontlab.flPreferences.ViewGroups = 36 ViewHandles fontlab.flPreferences.ViewHandles = 24 ViewHints fontlab.flPreferences.ViewHints = 9 ViewHintShadows fontlab.flPreferences.ViewHintShadows = 30 ViewInactiveGlyphs fontlab.flPreferences.ViewInactiveGlyphs = 41 ViewKerningGroups fontlab.flPreferences.ViewKerningGroups = 8 ViewLocalMask fontlab.flPreferences.ViewLocalMask = 17 ViewMasterLinks fontlab.flPreferences.ViewMasterLinks = 33 ViewMeasurement fontlab.flPreferences.ViewMeasurement = 25 ViewMetricsTable fontlab.flPreferences.ViewMetricsTable = 26 ViewModeKerning fontlab.flPreferences.ViewModeKerning = 4 ViewModeMetrics fontlab.flPreferences.ViewModeMetrics = 2 ViewModeOutline fontlab.flPreferences.ViewModeOutline = 1 ViewModePreview fontlab.flPreferences.ViewModePreview = 0 ViewModeText fontlab.flPreferences.ViewModeText = 8 ViewNodeLinks fontlab.flPreferences.ViewNodeLinks = 14 ViewNodes fontlab.flPreferences.ViewNodes = 23 ViewPins fontlab.flPreferences.ViewPins = 6 ViewRulers fontlab.flPreferences.ViewRulers = 27 ViewSelectionFrame fontlab.flPreferences.ViewSelectionFrame = 38 ViewShapeConnection fontlab.flPreferences.ViewShapeConnection = 13 ViewShapeFrame fontlab.flPreferences.ViewShapeFrame = 12 ViewShapeGuides fontlab.flPreferences.ViewShapeGuides = 2 ViewShapeLinks fontlab.flPreferences.ViewShapeLinks = 15 ViewStickers fontlab.flPreferences.ViewStickers = 40 ViewString fontlab.flPreferences.ViewString = 34 ViewTapeLine fontlab.flPreferences.ViewTapeLine = 20 ViewThickness fontlab.flPreferences.ViewThickness = 39 ViewTunni fontlab.flPreferences.ViewTunni = 21 ViewZones fontlab.flPreferences.ViewZones = 10 WindowsFontTabs fontlab.flPreferences.WindowsFontTabs = 2 WindowsTabs fontlab.flPreferences.WindowsTabs = 0 WindowsWindows fontlab.flPreferences.WindowsWindows = 1 workFont fontlab.flPreferences.workFont QFont workFontFamilyName fontlab.flPreferences.workFontFamilyName string workFontId fontlab.flPreferences.workFontId int zoomAscender fontlab.flPreferences.zoomAscender int zoomDescender fontlab.flPreferences.zoomDescender int zoomFactorKeyboard fontlab.flPreferences.zoomFactorKeyboard double zoomFactorWheel fontlab.flPreferences.zoomFactorWheel double zoomMode fontlab.flPreferences.zoomMode int ZoomModeLines fontlab.flPreferences.ZoomModeLines = 2 ZoomModeMetrics fontlab.flPreferences.ZoomModeMetrics = 0 ZoomModeSafe fontlab.flPreferences.ZoomModeSafe = 3 ZoomModeSize fontlab.flPreferences.ZoomModeSize = 1 zoomSize fontlab.flPreferences.zoomSize int","title":"flPreferences"},{"location":"fontlab.flPreferences.html#flpreferences","text":"","title":"flPreferences"},{"location":"fontlab.flPreferences.html#colorencoding","text":"fontlab.flPreferences.colorEncoding QColor","title":"colorEncoding"},{"location":"fontlab.flPreferences.html#colorfontcell","text":"fontlab.flPreferences.colorFontCell QColor","title":"colorFontCell"},{"location":"fontlab.flPreferences.html#colorgrid","text":"fontlab.flPreferences.colorGrid QColor","title":"colorGrid"},{"location":"fontlab.flPreferences.html#colorkerning","text":"fontlab.flPreferences.colorKerning QColor","title":"colorKerning"},{"location":"fontlab.flPreferences.html#colormask","text":"fontlab.flPreferences.colorMask QColor","title":"colorMask"},{"location":"fontlab.flPreferences.html#colormaskglobal","text":"fontlab.flPreferences.colorMaskGlobal QColor","title":"colorMaskGlobal"},{"location":"fontlab.flPreferences.html#colormasklocal","text":"fontlab.flPreferences.colorMaskLocal QColor","title":"colorMaskLocal"},{"location":"fontlab.flPreferences.html#colormetrics","text":"fontlab.flPreferences.colorMetrics QColor","title":"colorMetrics"},{"location":"fontlab.flPreferences.html#colormetricslines","text":"fontlab.flPreferences.colorMetricsLines QColor","title":"colorMetricsLines"},{"location":"fontlab.flPreferences.html#colorworkspace","text":"fontlab.flPreferences.colorWorkspace QColor","title":"colorWorkspace"},{"location":"fontlab.flPreferences.html#conflictoverwrite","text":"fontlab.flPreferences.ConflictOverwrite = 1","title":"ConflictOverwrite"},{"location":"fontlab.flPreferences.html#conflictrename","text":"fontlab.flPreferences.ConflictRename = 0","title":"ConflictRename"},{"location":"fontlab.flPreferences.html#conflictskip","text":"fontlab.flPreferences.ConflictSkip = 2","title":"ConflictSkip"},{"location":"fontlab.flPreferences.html#conflicttrash","text":"fontlab.flPreferences.ConflictTrash = 3","title":"ConflictTrash"},{"location":"fontlab.flPreferences.html#contentcurrent","text":"fontlab.flPreferences.ContentCurrent = 0","title":"ContentCurrent"},{"location":"fontlab.flPreferences.html#contentinstances","text":"fontlab.flPreferences.ContentInstances = 2","title":"ContentInstances"},{"location":"fontlab.flPreferences.html#contentmasters","text":"fontlab.flPreferences.ContentMasters = 3","title":"ContentMasters"},{"location":"fontlab.flPreferences.html#contentvisible","text":"fontlab.flPreferences.ContentVisible = 1","title":"ContentVisible"},{"location":"fontlab.flPreferences.html#convertdetectzonetags","text":"fontlab.flPreferences.convertDetectZoneTags bool","title":"convertDetectZoneTags"},{"location":"fontlab.flPreferences.html#convertpostscriptprecision","text":"fontlab.flPreferences.convertPostScriptPrecision double","title":"convertPostScriptPrecision"},{"location":"fontlab.flPreferences.html#converttruetypeprecision","text":"fontlab.flPreferences.convertTrueTypePrecision double","title":"convertTrueTypePrecision"},{"location":"fontlab.flPreferences.html#converttruetypeshortcurves","text":"fontlab.flPreferences.convertTrueTypeShortCurves bool","title":"convertTrueTypeShortCurves"},{"location":"fontlab.flPreferences.html#coordinanesnone","text":"fontlab.flPreferences.CoordinanesNone = 0","title":"CoordinanesNone"},{"location":"fontlab.flPreferences.html#coordinatesall","text":"fontlab.flPreferences.CoordinatesAll = 2","title":"CoordinatesAll"},{"location":"fontlab.flPreferences.html#coordinatesselected","text":"fontlab.flPreferences.CoordinatesSelected = 1","title":"CoordinatesSelected"},{"location":"fontlab.flPreferences.html#curvaturelarge","text":"fontlab.flPreferences.CurvatureLarge = 3","title":"CurvatureLarge"},{"location":"fontlab.flPreferences.html#curvaturemedium","text":"fontlab.flPreferences.CurvatureMedium = 2","title":"CurvatureMedium"},{"location":"fontlab.flPreferences.html#curvaturesmall","text":"fontlab.flPreferences.CurvatureSmall = 1","title":"CurvatureSmall"},{"location":"fontlab.flPreferences.html#curvaturesmart","text":"fontlab.flPreferences.CurvatureSmart = 0","title":"CurvatureSmart"},{"location":"fontlab.flPreferences.html#datapath","text":"fontlab.flPreferences.dataPath string","title":"dataPath"},{"location":"fontlab.flPreferences.html#datapathdefault","text":"fontlab.flPreferences.dataPathDefault string","title":"dataPathDefault"},{"location":"fontlab.flPreferences.html#deactivateshapebyclick","text":"fontlab.flPreferences.deactivateShapeByClick bool","title":"deactivateShapeByClick"},{"location":"fontlab.flPreferences.html#defaulttexts","text":"fontlab.flPreferences.defaultTexts QStringList","title":"defaultTexts"},{"location":"fontlab.flPreferences.html#destinationask","text":"fontlab.flPreferences.DestinationAsk = 0","title":"DestinationAsk"},{"location":"fontlab.flPreferences.html#destinationfolder","text":"fontlab.flPreferences.DestinationFolder = 3","title":"DestinationFolder"},{"location":"fontlab.flPreferences.html#destinationsource","text":"fontlab.flPreferences.DestinationSource = 1","title":"DestinationSource"},{"location":"fontlab.flPreferences.html#developerbacklightupdate","text":"fontlab.flPreferences.developerBacklightUpdate bool","title":"developerBacklightUpdate"},{"location":"fontlab.flPreferences.html#developerlargequickhelp","text":"fontlab.flPreferences.developerLargeQuickHelp bool","title":"developerLargeQuickHelp"},{"location":"fontlab.flPreferences.html#developernoparameters","text":"fontlab.flPreferences.developerNoParameters bool","title":"developerNoParameters"},{"location":"fontlab.flPreferences.html#developeropengl","text":"fontlab.flPreferences.developerOpenGL bool","title":"developerOpenGL"},{"location":"fontlab.flPreferences.html#developershowkeys","text":"fontlab.flPreferences.developerShowKeys bool","title":"developerShowKeys"},{"location":"fontlab.flPreferences.html#dointerpolate","text":"fontlab.flPreferences.doInterpolate = doInterpolate (...) bool doInterpolate()","title":"doInterpolate"},{"location":"fontlab.flPreferences.html#drawfocusalways","text":"fontlab.flPreferences.DrawFocusAlways = 1","title":"DrawFocusAlways"},{"location":"fontlab.flPreferences.html#drawfocusnever","text":"fontlab.flPreferences.DrawFocusNever = 0","title":"DrawFocusNever"},{"location":"fontlab.flPreferences.html#drawfocuspanels","text":"fontlab.flPreferences.DrawFocusPanels = 2","title":"DrawFocusPanels"},{"location":"fontlab.flPreferences.html#drawfocusrect","text":"fontlab.flPreferences.drawFocusRect int","title":"drawFocusRect"},{"location":"fontlab.flPreferences.html#dsigalgorithm","text":"fontlab.flPreferences.dsigAlgorithm int","title":"dsigAlgorithm"},{"location":"fontlab.flPreferences.html#dsigalgorithmmd5","text":"fontlab.flPreferences.DsigAlgorithmMD5 = 0","title":"DsigAlgorithmMD5"},{"location":"fontlab.flPreferences.html#dsigalgorithmsha1","text":"fontlab.flPreferences.DsigAlgorithmSHA1 = 1","title":"DsigAlgorithmSHA1"},{"location":"fontlab.flPreferences.html#dsigauthority","text":"fontlab.flPreferences.dsigAuthority int","title":"dsigAuthority"},{"location":"fontlab.flPreferences.html#dsigauthoritycommercial","text":"fontlab.flPreferences.DsigAuthorityCommercial = 1","title":"DsigAuthorityCommercial"},{"location":"fontlab.flPreferences.html#dsigauthoritydefault","text":"fontlab.flPreferences.DsigAuthorityDefault = 0","title":"DsigAuthorityDefault"},{"location":"fontlab.flPreferences.html#dsigauthorityindividual","text":"fontlab.flPreferences.DsigAuthorityIndividual = 1","title":"DsigAuthorityIndividual"},{"location":"fontlab.flPreferences.html#dsigcertificatepath","text":"fontlab.flPreferences.dsigCertificatePath string","title":"dsigCertificatePath"},{"location":"fontlab.flPreferences.html#dsigpassword","text":"fontlab.flPreferences.dsigPassword string","title":"dsigPassword"},{"location":"fontlab.flPreferences.html#dsigprivatekeypath","text":"fontlab.flPreferences.dsigPrivateKeyPath string","title":"dsigPrivateKeyPath"},{"location":"fontlab.flPreferences.html#dsigtimestamp","text":"fontlab.flPreferences.dsigTimestamp bool","title":"dsigTimestamp"},{"location":"fontlab.flPreferences.html#dsigtimestampurl","text":"fontlab.flPreferences.dsigTimestampUrl string","title":"dsigTimestampUrl"},{"location":"fontlab.flPreferences.html#dsigurl","text":"fontlab.flPreferences.dsigUrl string","title":"dsigUrl"},{"location":"fontlab.flPreferences.html#dsigwrite","text":"fontlab.flPreferences.dsigWrite bool","title":"dsigWrite"},{"location":"fontlab.flPreferences.html#editoracrossglyphs","text":"fontlab.flPreferences.editorAcrossGlyphs bool","title":"editorAcrossGlyphs"},{"location":"fontlab.flPreferences.html#editoracrosslayers","text":"fontlab.flPreferences.editorAcrossLayers bool","title":"editorAcrossLayers"},{"location":"fontlab.flPreferences.html#editoracrossshapes","text":"fontlab.flPreferences.editorAcrossShapes bool","title":"editorAcrossShapes"},{"location":"fontlab.flPreferences.html#editoralternativepencil","text":"fontlab.flPreferences.editorAlternativePencil bool","title":"editorAlternativePencil"},{"location":"fontlab.flPreferences.html#editorautononspacing","text":"fontlab.flPreferences.editorAutoNonSpacing bool","title":"editorAutoNonSpacing"},{"location":"fontlab.flPreferences.html#editorcenterglyph","text":"fontlab.flPreferences.editorCenterGlyph bool","title":"editorCenterGlyph"},{"location":"fontlab.flPreferences.html#editorclickselectscurve","text":"fontlab.flPreferences.editorClickSelectsCurve bool","title":"editorClickSelectsCurve"},{"location":"fontlab.flPreferences.html#editorclosedistance","text":"fontlab.flPreferences.editorCloseDistance int","title":"editorCloseDistance"},{"location":"fontlab.flPreferences.html#editorcommandselector","text":"fontlab.flPreferences.editorCommandSelector bool","title":"editorCommandSelector"},{"location":"fontlab.flPreferences.html#editorcommandtoggle","text":"fontlab.flPreferences.editorCommandToggle bool","title":"editorCommandToggle"},{"location":"fontlab.flPreferences.html#editorcontrast","text":"fontlab.flPreferences.editorContrast bool","title":"editorContrast"},{"location":"fontlab.flPreferences.html#editorcoordinateseditable","text":"fontlab.flPreferences.editorCoordinatesEditable bool","title":"editorCoordinatesEditable"},{"location":"fontlab.flPreferences.html#editorcopytext","text":"fontlab.flPreferences.editorCopyText bool","title":"editorCopyText"},{"location":"fontlab.flPreferences.html#editorcross","text":"fontlab.flPreferences.editorCross bool","title":"editorCross"},{"location":"fontlab.flPreferences.html#editorcurvatureopacity","text":"fontlab.flPreferences.editorCurvatureOpacity double","title":"editorCurvatureOpacity"},{"location":"fontlab.flPreferences.html#editorcurvaturesize","text":"fontlab.flPreferences.editorCurvatureSize int","title":"editorCurvatureSize"},{"location":"fontlab.flPreferences.html#editordeletebreakscontour","text":"fontlab.flPreferences.editorDeleteBreaksContour bool","title":"editorDeleteBreaksContour"},{"location":"fontlab.flPreferences.html#editordeletesinglenode","text":"fontlab.flPreferences.editorDeleteSingleNode int","title":"editorDeleteSingleNode"},{"location":"fontlab.flPreferences.html#editordirectedshift","text":"fontlab.flPreferences.editorDirectedShift bool","title":"editorDirectedShift"},{"location":"fontlab.flPreferences.html#editordirectkerning","text":"fontlab.flPreferences.editorDirectKerning bool","title":"editorDirectKerning"},{"location":"fontlab.flPreferences.html#editordoubleclicktoggle","text":"fontlab.flPreferences.editorDoubleClickToggle bool","title":"editorDoubleClickToggle"},{"location":"fontlab.flPreferences.html#editordraginactiveshape","text":"fontlab.flPreferences.editorDragInactiveShape bool","title":"editorDragInactiveShape"},{"location":"fontlab.flPreferences.html#editorfastpreview","text":"fontlab.flPreferences.editorFastPreview bool","title":"editorFastPreview"},{"location":"fontlab.flPreferences.html#editorfeatures","text":"fontlab.flPreferences.editorFeatures bool","title":"editorFeatures"},{"location":"fontlab.flPreferences.html#editorfillopacity","text":"fontlab.flPreferences.editorFillOpacity int","title":"editorFillOpacity"},{"location":"fontlab.flPreferences.html#editorfillopencontours","text":"fontlab.flPreferences.editorFillOpenContours bool","title":"editorFillOpenContours"},{"location":"fontlab.flPreferences.html#editorfixedbcp","text":"fontlab.flPreferences.editorFixedBCP bool","title":"editorFixedBCP"},{"location":"fontlab.flPreferences.html#editorfocus","text":"fontlab.flPreferences.editorFocus bool","title":"editorFocus"},{"location":"fontlab.flPreferences.html#editorfollowitalicangle","text":"fontlab.flPreferences.editorFollowItalicAngle bool","title":"editorFollowItalicAngle"},{"location":"fontlab.flPreferences.html#editorforcedgrid","text":"fontlab.flPreferences.editorForcedGrid bool","title":"editorForcedGrid"},{"location":"fontlab.flPreferences.html#editorforcedsnap","text":"fontlab.flPreferences.editorForcedSnap bool","title":"editorForcedSnap"},{"location":"fontlab.flPreferences.html#editorframeselectsonnodes","text":"fontlab.flPreferences.editorFrameSelectsOnNodes bool","title":"editorFrameSelectsOnNodes"},{"location":"fontlab.flPreferences.html#editorgestures","text":"fontlab.flPreferences.editorGestures bool","title":"editorGestures"},{"location":"fontlab.flPreferences.html#editorguidehitdistance","text":"fontlab.flPreferences.editorGuideHitDistance int","title":"editorGuideHitDistance"},{"location":"fontlab.flPreferences.html#editorhidemetricstable","text":"fontlab.flPreferences.editorHideMetricsTable bool","title":"editorHideMetricsTable"},{"location":"fontlab.flPreferences.html#editorhideplaceholders","text":"fontlab.flPreferences.editorHidePlaceholders bool","title":"editorHidePlaceholders"},{"location":"fontlab.flPreferences.html#editorinactivehandles","text":"fontlab.flPreferences.editorInactiveHandles bool","title":"editorInactiveHandles"},{"location":"fontlab.flPreferences.html#editorinactivenodes","text":"fontlab.flPreferences.editorInactiveNodes int","title":"editorInactiveNodes"},{"location":"fontlab.flPreferences.html#editorinactivewireframe","text":"fontlab.flPreferences.editorInactiveWireframe bool","title":"editorInactiveWireframe"},{"location":"fontlab.flPreferences.html#editorinertion","text":"fontlab.flPreferences.editorInertion bool","title":"editorInertion"},{"location":"fontlab.flPreferences.html#editorinstancelayer","text":"fontlab.flPreferences.editorInstanceLayer bool","title":"editorInstanceLayer"},{"location":"fontlab.flPreferences.html#editorinterpolate","text":"fontlab.flPreferences.editorInterpolate bool","title":"editorInterpolate"},{"location":"fontlab.flPreferences.html#editorinterpolatemodifier","text":"fontlab.flPreferences.editorInterpolateModifier bool","title":"editorInterpolateModifier"},{"location":"fontlab.flPreferences.html#editorkerningexclusive","text":"fontlab.flPreferences.editorKerningExclusive bool","title":"editorKerningExclusive"},{"location":"fontlab.flPreferences.html#editorlayerdoubleclick","text":"fontlab.flPreferences.editorLayerDoubleClick bool","title":"editorLayerDoubleClick"},{"location":"fontlab.flPreferences.html#editorlistmasklayers","text":"fontlab.flPreferences.editorListMaskLayers bool","title":"editorListMaskLayers"},{"location":"fontlab.flPreferences.html#editormatch","text":"fontlab.flPreferences.editorMatch bool","title":"editorMatch"},{"location":"fontlab.flPreferences.html#editormetricsdoubleclick","text":"fontlab.flPreferences.editorMetricsDoubleClick bool","title":"editorMetricsDoubleClick"},{"location":"fontlab.flPreferences.html#editorminhandle","text":"fontlab.flPreferences.editorMinHandle int","title":"editorMinHandle"},{"location":"fontlab.flPreferences.html#editormissingglyphs","text":"fontlab.flPreferences.editorMissingGlyphs bool","title":"editorMissingGlyphs"},{"location":"fontlab.flPreferences.html#editormodalpen","text":"fontlab.flPreferences.editorModalPen bool","title":"editorModalPen"},{"location":"fontlab.flPreferences.html#editornodecolor","text":"fontlab.flPreferences.editorNodeColor int","title":"editorNodeColor"},{"location":"fontlab.flPreferences.html#editornodefontdefault","text":"fontlab.flPreferences.editorNodeFontDefault int","title":"editorNodeFontDefault"},{"location":"fontlab.flPreferences.html#editornodefonthovered","text":"fontlab.flPreferences.editorNodeFontHovered int","title":"editorNodeFontHovered"},{"location":"fontlab.flPreferences.html#editornodehitdistance","text":"fontlab.flPreferences.editorNodeHitDistance int","title":"editorNodeHitDistance"},{"location":"fontlab.flPreferences.html#editornodesize","text":"fontlab.flPreferences.editorNodeSize int","title":"editorNodeSize"},{"location":"fontlab.flPreferences.html#editornoteexpanded","text":"fontlab.flPreferences.editorNoteExpanded bool","title":"editorNoteExpanded"},{"location":"fontlab.flPreferences.html#editornudge1","text":"fontlab.flPreferences.editorNudge1 double","title":"editorNudge1"},{"location":"fontlab.flPreferences.html#editornudge10","text":"fontlab.flPreferences.editorNudge10 double","title":"editorNudge10"},{"location":"fontlab.flPreferences.html#editoroffsetduplicate","text":"fontlab.flPreferences.editorOffsetDuplicate QPointF","title":"editorOffsetDuplicate"},{"location":"fontlab.flPreferences.html#editoroffsetpaste","text":"fontlab.flPreferences.editorOffsetPaste QPointF","title":"editorOffsetPaste"},{"location":"fontlab.flPreferences.html#editoroutlinethickness","text":"fontlab.flPreferences.editorOutlineThickness int","title":"editorOutlineThickness"},{"location":"fontlab.flPreferences.html#editorpantographcurve","text":"fontlab.flPreferences.editorPantographCurve int","title":"editorPantographCurve"},{"location":"fontlab.flPreferences.html#editorpantographnode","text":"fontlab.flPreferences.editorPantographNode int","title":"editorPantographNode"},{"location":"fontlab.flPreferences.html#editorpasteartwork","text":"fontlab.flPreferences.editorPasteArtwork int","title":"editorPasteArtwork"},{"location":"fontlab.flPreferences.html#editorpastecontourvisual","text":"fontlab.flPreferences.editorPasteContourVisual bool","title":"editorPasteContourVisual"},{"location":"fontlab.flPreferences.html#editorpencorrection","text":"fontlab.flPreferences.editorPenCorrection bool","title":"editorPenCorrection"},{"location":"fontlab.flPreferences.html#editorroundcoordinates","text":"fontlab.flPreferences.editorRoundCoordinates int","title":"editorRoundCoordinates"},{"location":"fontlab.flPreferences.html#editorroundkerning","text":"fontlab.flPreferences.editorRoundKerning bool","title":"editorRoundKerning"},{"location":"fontlab.flPreferences.html#editorroundmetrics","text":"fontlab.flPreferences.editorRoundMetrics bool","title":"editorRoundMetrics"},{"location":"fontlab.flPreferences.html#editorscrollbars","text":"fontlab.flPreferences.editorScrollBars bool","title":"editorScrollBars"},{"location":"fontlab.flPreferences.html#editorsetmetrics2frame","text":"fontlab.flPreferences.editorSetMetrics2Frame bool","title":"editorSetMetrics2Frame"},{"location":"fontlab.flPreferences.html#editorshiftconstrains","text":"fontlab.flPreferences.editorShiftConstrains bool","title":"editorShiftConstrains"},{"location":"fontlab.flPreferences.html#editorshiftextendsselection","text":"fontlab.flPreferences.editorShiftExtendsSelection bool","title":"editorShiftExtendsSelection"},{"location":"fontlab.flPreferences.html#editorshowangle","text":"fontlab.flPreferences.editorShowAngle bool","title":"editorShowAngle"},{"location":"fontlab.flPreferences.html#editorshowcoordinates","text":"fontlab.flPreferences.editorShowCoordinates int","title":"editorShowCoordinates"},{"location":"fontlab.flPreferences.html#editorshownodename","text":"fontlab.flPreferences.editorShowNodeName int","title":"editorShowNodeName"},{"location":"fontlab.flPreferences.html#editorshowsb","text":"fontlab.flPreferences.editorShowSb bool","title":"editorShowSb"},{"location":"fontlab.flPreferences.html#editorsidebarinactive","text":"fontlab.flPreferences.editorSidebarInactive int","title":"editorSidebarInactive"},{"location":"fontlab.flPreferences.html#editorsnapdistance","text":"fontlab.flPreferences.editorSnapDistance int","title":"editorSnapDistance"},{"location":"fontlab.flPreferences.html#editorsortmasters","text":"fontlab.flPreferences.editorSortMasters bool","title":"editorSortMasters"},{"location":"fontlab.flPreferences.html#editorstronground","text":"fontlab.flPreferences.editorStrongRound bool","title":"editorStrongRound"},{"location":"fontlab.flPreferences.html#editortapermode","text":"fontlab.flPreferences.editorTaperMode int","title":"editorTaperMode"},{"location":"fontlab.flPreferences.html#editortoolslocalized","text":"fontlab.flPreferences.editorToolsLocalized bool","title":"editorToolsLocalized"},{"location":"fontlab.flPreferences.html#editortopbottom","text":"fontlab.flPreferences.editorTopBottom bool","title":"editorTopBottom"},{"location":"fontlab.flPreferences.html#editorundoselection","text":"fontlab.flPreferences.editorUndoSelection bool","title":"editorUndoSelection"},{"location":"fontlab.flPreferences.html#editorupdateautolayers","text":"fontlab.flPreferences.editorUpdateAutoLayers bool","title":"editorUpdateAutoLayers"},{"location":"fontlab.flPreferences.html#editorupdatemetriclinks","text":"fontlab.flPreferences.editorUpdateMetricLinks bool","title":"editorUpdateMetricLinks"},{"location":"fontlab.flPreferences.html#editoruseitalicangle","text":"fontlab.flPreferences.editorUseItalicAngle int","title":"editorUseItalicAngle"},{"location":"fontlab.flPreferences.html#editorzonenodes","text":"fontlab.flPreferences.editorZoneNodes bool","title":"editorZoneNodes"},{"location":"fontlab.flPreferences.html#editorzoomascender","text":"fontlab.flPreferences.editorZoomAscender bool","title":"editorZoomAscender"},{"location":"fontlab.flPreferences.html#exportconflictmode","text":"fontlab.flPreferences.exportConflictMode int","title":"exportConflictMode"},{"location":"fontlab.flPreferences.html#exportcontent","text":"fontlab.flPreferences.exportContent int","title":"exportContent"},{"location":"fontlab.flPreferences.html#exportdestinationfolder","text":"fontlab.flPreferences.exportDestinationFolder string","title":"exportDestinationFolder"},{"location":"fontlab.flPreferences.html#exportdestinationmode","text":"fontlab.flPreferences.exportDestinationMode int","title":"exportDestinationMode"},{"location":"fontlab.flPreferences.html#exportflatten","text":"fontlab.flPreferences.exportFlatten bool","title":"exportFlatten"},{"location":"fontlab.flPreferences.html#exportjsonformatting","text":"fontlab.flPreferences.exportJsonFormatting bool","title":"exportJsonFormatting"},{"location":"fontlab.flPreferences.html#exportorganizemode","text":"fontlab.flPreferences.exportOrganizeMode int","title":"exportOrganizeMode"},{"location":"fontlab.flPreferences.html#exportppm","text":"fontlab.flPreferences.exportPPM int","title":"exportPPM"},{"location":"fontlab.flPreferences.html#exportsavefolder","text":"fontlab.flPreferences.exportSaveFolder string","title":"exportSaveFolder"},{"location":"fontlab.flPreferences.html#exportsavesketchboard","text":"fontlab.flPreferences.exportSaveSketchboard bool","title":"exportSaveSketchboard"},{"location":"fontlab.flPreferences.html#exportsavevfj","text":"fontlab.flPreferences.exportSaveVFJ bool","title":"exportSaveVFJ"},{"location":"fontlab.flPreferences.html#exportsaveworkspacevfc","text":"fontlab.flPreferences.exportSaveWorkspaceVFC uint","title":"exportSaveWorkspaceVFC"},{"location":"fontlab.flPreferences.html#exportsaveworkspacevfj","text":"fontlab.flPreferences.exportSaveWorkspaceVFJ uint","title":"exportSaveWorkspaceVFJ"},{"location":"fontlab.flPreferences.html#exportsessionvfj","text":"fontlab.flPreferences.exportSessionVFJ bool","title":"exportSessionVFJ"},{"location":"fontlab.flPreferences.html#featuresaddkerningclasses","text":"fontlab.flPreferences.featuresAddKerningClasses bool","title":"featuresAddKerningClasses"},{"location":"fontlab.flPreferences.html#featuresaddopentypeclasses","text":"fontlab.flPreferences.featuresAddOpenTypeClasses bool","title":"featuresAddOpenTypeClasses"},{"location":"fontlab.flPreferences.html#featuresaddtags","text":"fontlab.flPreferences.featuresAddTags bool","title":"featuresAddTags"},{"location":"fontlab.flPreferences.html#featuresaddvirtualtags","text":"fontlab.flPreferences.featuresAddVirtualTags bool","title":"featuresAddVirtualTags"},{"location":"fontlab.flPreferences.html#fontabsentgray","text":"fontlab.flPreferences.fontAbsentGray bool","title":"fontAbsentGray"},{"location":"fontlab.flPreferences.html#fontallglyphs","text":"fontlab.flPreferences.fontAllGlyphs bool","title":"fontAllGlyphs"},{"location":"fontlab.flPreferences.html#fontaskfilename","text":"fontlab.flPreferences.fontAskFileName int","title":"fontAskFileName"},{"location":"fontlab.flPreferences.html#fontauditstemtolerance","text":"fontlab.flPreferences.fontAuditStemTolerance double","title":"fontAuditStemTolerance"},{"location":"fontlab.flPreferences.html#fontaudittests","text":"fontlab.flPreferences.fontAuditTests = fontAuditTests (...) list(int) fontAuditTests()","title":"fontAuditTests"},{"location":"fontlab.flPreferences.html#fontcaption","text":"fontlab.flPreferences.fontCaption QFont","title":"fontCaption"},{"location":"fontlab.flPreferences.html#fontcaptionauto","text":"fontlab.flPreferences.FontCaptionAuto = 0","title":"FontCaptionAuto"},{"location":"fontlab.flPreferences.html#fontcaptioneditable","text":"fontlab.flPreferences.fontCaptionEditable bool","title":"fontCaptionEditable"},{"location":"fontlab.flPreferences.html#fontcaptionheight","text":"fontlab.flPreferences.fontCaptionHeight int","title":"fontCaptionHeight"},{"location":"fontlab.flPreferences.html#fontcaptionlarge","text":"fontlab.flPreferences.FontCaptionLarge = 3","title":"FontCaptionLarge"},{"location":"fontlab.flPreferences.html#fontcaptionmedium","text":"fontlab.flPreferences.FontCaptionMedium = 2","title":"FontCaptionMedium"},{"location":"fontlab.flPreferences.html#fontcaptionsmall","text":"fontlab.flPreferences.FontCaptionSmall = 1","title":"FontCaptionSmall"},{"location":"fontlab.flPreferences.html#fontcaptiontop","text":"fontlab.flPreferences.fontCaptionTop bool","title":"fontCaptionTop"},{"location":"fontlab.flPreferences.html#fontclose","text":"fontlab.flPreferences.fontClose bool","title":"fontClose"},{"location":"fontlab.flPreferences.html#fontcoloredcaption","text":"fontlab.flPreferences.fontColoredCaption bool","title":"fontColoredCaption"},{"location":"fontlab.flPreferences.html#fontcoloreditems","text":"fontlab.flPreferences.fontColoredItems bool","title":"fontColoredItems"},{"location":"fontlab.flPreferences.html#fontcreatebackground","text":"fontlab.flPreferences.fontCreateBackground bool","title":"fontCreateBackground"},{"location":"fontlab.flPreferences.html#fontcreatedynamic","text":"fontlab.flPreferences.fontCreateDynamic bool","title":"fontCreateDynamic"},{"location":"fontlab.flPreferences.html#fontcreategenerate","text":"fontlab.flPreferences.fontCreateGenerate bool","title":"fontCreateGenerate"},{"location":"fontlab.flPreferences.html#fontdefaultencoding","text":"fontlab.flPreferences.fontDefaultEncoding string","title":"fontDefaultEncoding"},{"location":"fontlab.flPreferences.html#fontdefaultmode","text":"fontlab.flPreferences.fontDefaultMode int","title":"fontDefaultMode"},{"location":"fontlab.flPreferences.html#fontdefaultsorting","text":"fontlab.flPreferences.fontDefaultSorting int","title":"fontDefaultSorting"},{"location":"fontlab.flPreferences.html#fontdoubleclick","text":"fontlab.flPreferences.fontDoubleClick bool","title":"fontDoubleClick"},{"location":"fontlab.flPreferences.html#fontdrawlines","text":"fontlab.flPreferences.fontDrawLines bool","title":"fontDrawLines"},{"location":"fontlab.flPreferences.html#fontextraicons","text":"fontlab.flPreferences.fontExtraIcons bool","title":"fontExtraIcons"},{"location":"fontlab.flPreferences.html#fontmarkopacity","text":"fontlab.flPreferences.fontMarkOpacity int","title":"fontMarkOpacity"},{"location":"fontlab.flPreferences.html#fontmetricslimit","text":"fontlab.flPreferences.fontMetricsLimit int","title":"fontMetricsLimit"},{"location":"fontlab.flPreferences.html#fontnameunicode","text":"fontlab.flPreferences.fontNameUnicode bool","title":"fontNameUnicode"},{"location":"fontlab.flPreferences.html#fontnamfilename","text":"fontlab.flPreferences.fontNamFileName string","title":"fontNamFileName"},{"location":"fontlab.flPreferences.html#fontnamfilenamedefault","text":"fontlab.flPreferences.fontNamFileNameDefault string","title":"fontNamFileNameDefault"},{"location":"fontlab.flPreferences.html#fontnewnames","text":"fontlab.flPreferences.fontNewNames int","title":"fontNewNames"},{"location":"fontlab.flPreferences.html#fontnewwindow","text":"fontlab.flPreferences.fontNewWindow bool","title":"fontNewWindow"},{"location":"fontlab.flPreferences.html#fontnoteicon","text":"fontlab.flPreferences.fontNoteIcon bool","title":"fontNoteIcon"},{"location":"fontlab.flPreferences.html#fontnotetext","text":"fontlab.flPreferences.fontNoteText bool","title":"fontNoteText"},{"location":"fontlab.flPreferences.html#fontpropertyicon","text":"fontlab.flPreferences.fontPropertyIcon bool","title":"fontPropertyIcon"},{"location":"fontlab.flPreferences.html#fontsautosavetimeinterval","text":"fontlab.flPreferences.fontsAutoSaveTimeInterval int","title":"fontsAutoSaveTimeInterval"},{"location":"fontlab.flPreferences.html#fontshowglyphmetrics","text":"fontlab.flPreferences.fontShowGlyphMetrics bool","title":"fontShowGlyphMetrics"},{"location":"fontlab.flPreferences.html#fonttemplate","text":"fontlab.flPreferences.fontTemplate QFont","title":"fontTemplate"},{"location":"fontlab.flPreferences.html#fontunicodename","text":"fontlab.flPreferences.fontUnicodeName bool","title":"fontUnicodeName"},{"location":"fontlab.flPreferences.html#fontunicodeuppercase","text":"fontlab.flPreferences.fontUnicodeUppercase bool","title":"fontUnicodeUppercase"},{"location":"fontlab.flPreferences.html#generalactivatepanels","text":"fontlab.flPreferences.generalActivatePanels bool","title":"generalActivatePanels"},{"location":"fontlab.flPreferences.html#generalbeta","text":"fontlab.flPreferences.generalBeta bool","title":"generalBeta"},{"location":"fontlab.flPreferences.html#generalcheckupdates","text":"fontlab.flPreferences.generalCheckUpdates bool","title":"generalCheckUpdates"},{"location":"fontlab.flPreferences.html#generalrightmargin","text":"fontlab.flPreferences.generalRightMargin int","title":"generalRightMargin"},{"location":"fontlab.flPreferences.html#generalsketchboard","text":"fontlab.flPreferences.generalSketchboard bool","title":"generalSketchboard"},{"location":"fontlab.flPreferences.html#generaltabs","text":"fontlab.flPreferences.generalTabs int","title":"generalTabs"},{"location":"fontlab.flPreferences.html#generalvirtualkeys","text":"fontlab.flPreferences.generalVirtualKeys bool","title":"generalVirtualKeys"},{"location":"fontlab.flPreferences.html#griddistancex","text":"fontlab.flPreferences.gridDistanceX double","title":"gridDistanceX"},{"location":"fontlab.flPreferences.html#griddistancey","text":"fontlab.flPreferences.gridDistanceY double","title":"gridDistanceY"},{"location":"fontlab.flPreferences.html#griditalicangle","text":"fontlab.flPreferences.gridItalicAngle bool","title":"gridItalicAngle"},{"location":"fontlab.flPreferences.html#gridopacity","text":"fontlab.flPreferences.gridOpacity double","title":"gridOpacity"},{"location":"fontlab.flPreferences.html#gridpointopacity","text":"fontlab.flPreferences.gridPointOpacity double","title":"gridPointOpacity"},{"location":"fontlab.flPreferences.html#gridslant","text":"fontlab.flPreferences.gridSlant double","title":"gridSlant"},{"location":"fontlab.flPreferences.html#groupsalign","text":"fontlab.flPreferences.groupsAlign int","title":"groupsAlign"},{"location":"fontlab.flPreferences.html#groupsaligncenter","text":"fontlab.flPreferences.GroupsAlignCenter = 1","title":"GroupsAlignCenter"},{"location":"fontlab.flPreferences.html#groupsalignleft","text":"fontlab.flPreferences.GroupsAlignLeft = 0","title":"GroupsAlignLeft"},{"location":"fontlab.flPreferences.html#groupsalignright","text":"fontlab.flPreferences.GroupsAlignRight = 2","title":"GroupsAlignRight"},{"location":"fontlab.flPreferences.html#groupscolor","text":"fontlab.flPreferences.groupsColor QColor","title":"groupsColor"},{"location":"fontlab.flPreferences.html#groupscontent","text":"fontlab.flPreferences.groupsContent string","title":"groupsContent"},{"location":"fontlab.flPreferences.html#groupsdoubleclick","text":"fontlab.flPreferences.groupsDoubleClick bool","title":"groupsDoubleClick"},{"location":"fontlab.flPreferences.html#groupsfill","text":"fontlab.flPreferences.groupsFill int","title":"groupsFill"},{"location":"fontlab.flPreferences.html#groupsfillalways","text":"fontlab.flPreferences.GroupsFillAlways = 1","title":"GroupsFillAlways"},{"location":"fontlab.flPreferences.html#groupsfillauto","text":"fontlab.flPreferences.GroupsFillAuto = 0","title":"GroupsFillAuto"},{"location":"fontlab.flPreferences.html#groupsfillnever","text":"fontlab.flPreferences.GroupsFillNever = 2","title":"GroupsFillNever"},{"location":"fontlab.flPreferences.html#groupsmask","text":"fontlab.flPreferences.groupsMask int","title":"groupsMask"},{"location":"fontlab.flPreferences.html#groupsmaskmask","text":"fontlab.flPreferences.GroupsMaskMask = 2","title":"GroupsMaskMask"},{"location":"fontlab.flPreferences.html#groupsmasknone","text":"fontlab.flPreferences.GroupsMaskNone = 1","title":"GroupsMaskNone"},{"location":"fontlab.flPreferences.html#groupsmaskoutline","text":"fontlab.flPreferences.GroupsMaskOutline = 0","title":"GroupsMaskOutline"},{"location":"fontlab.flPreferences.html#groupsmasters","text":"fontlab.flPreferences.groupsMasters bool","title":"groupsMasters"},{"location":"fontlab.flPreferences.html#groupsmetrics","text":"fontlab.flPreferences.groupsMetrics bool","title":"groupsMetrics"},{"location":"fontlab.flPreferences.html#groupsopacity","text":"fontlab.flPreferences.groupsOpacity int","title":"groupsOpacity"},{"location":"fontlab.flPreferences.html#groupsshiftx","text":"fontlab.flPreferences.groupsShiftX double","title":"groupsShiftX"},{"location":"fontlab.flPreferences.html#groupsshifty","text":"fontlab.flPreferences.groupsShiftY double","title":"groupsShiftY"},{"location":"fontlab.flPreferences.html#hintmaxh","text":"fontlab.flPreferences.hintMaxH int","title":"hintMaxH"},{"location":"fontlab.flPreferences.html#hintmaxv","text":"fontlab.flPreferences.hintMaxV int","title":"hintMaxV"},{"location":"fontlab.flPreferences.html#hintminh","text":"fontlab.flPreferences.hintMinH int","title":"hintMinH"},{"location":"fontlab.flPreferences.html#hintminv","text":"fontlab.flPreferences.hintMinV int","title":"hintMinV"},{"location":"fontlab.flPreferences.html#historystoreselection","text":"fontlab.flPreferences.historyStoreSelection bool","title":"historyStoreSelection"},{"location":"fontlab.flPreferences.html#historystoreviewpoint","text":"fontlab.flPreferences.historyStoreViewPoint bool","title":"historyStoreViewPoint"},{"location":"fontlab.flPreferences.html#importcompilefeatures","text":"fontlab.flPreferences.importCompileFeatures bool","title":"importCompileFeatures"},{"location":"fontlab.flPreferences.html#importcomponents","text":"fontlab.flPreferences.importComponents bool","title":"importComponents"},{"location":"fontlab.flPreferences.html#importconvertcurves","text":"fontlab.flPreferences.importConvertCurves bool","title":"importConvertCurves"},{"location":"fontlab.flPreferences.html#importconvertnames","text":"fontlab.flPreferences.importConvertNames int","title":"importConvertNames"},{"location":"fontlab.flPreferences.html#importdecompilefeatures","text":"fontlab.flPreferences.importDecompileFeatures bool","title":"importDecompileFeatures"},{"location":"fontlab.flPreferences.html#importdecompiletables","text":"fontlab.flPreferences.importDecompileTables bool","title":"importDecompileTables"},{"location":"fontlab.flPreferences.html#importdecompose","text":"fontlab.flPreferences.importDecompose bool","title":"importDecompose"},{"location":"fontlab.flPreferences.html#importdetectgenius","text":"fontlab.flPreferences.importDetectGenius bool","title":"importDetectGenius"},{"location":"fontlab.flPreferences.html#importdetectservant","text":"fontlab.flPreferences.importDetectServant bool","title":"importDetectServant"},{"location":"fontlab.flPreferences.html#importexcludetables","text":"fontlab.flPreferences.importExcludeTables QStringList","title":"importExcludeTables"},{"location":"fontlab.flPreferences.html#importlockcomposites","text":"fontlab.flPreferences.importLockComposites bool","title":"importLockComposites"},{"location":"fontlab.flPreferences.html#importopenfontwindow","text":"fontlab.flPreferences.importOpenFontWindow bool","title":"importOpenFontWindow"},{"location":"fontlab.flPreferences.html#importrenamecid","text":"fontlab.flPreferences.importRenameCID bool","title":"importRenameCID"},{"location":"fontlab.flPreferences.html#importseparatemasters","text":"fontlab.flPreferences.importSeparateMasters bool","title":"importSeparateMasters"},{"location":"fontlab.flPreferences.html#importtruetypeshortcurves","text":"fontlab.flPreferences.importTrueTypeShortCurves bool","title":"importTrueTypeShortCurves"},{"location":"fontlab.flPreferences.html#inactivenodenone","text":"fontlab.flPreferences.InactiveNodeNone = 2","title":"InactiveNodeNone"},{"location":"fontlab.flPreferences.html#inactivenodenormal","text":"fontlab.flPreferences.InactiveNodeNormal = 0","title":"InactiveNodeNormal"},{"location":"fontlab.flPreferences.html#inactivenodesmall","text":"fontlab.flPreferences.InactiveNodeSmall = 1","title":"InactiveNodeSmall"},{"location":"fontlab.flPreferences.html#instance","text":"fontlab.flPreferences.instance = instance (...) flPreferences instance()","title":"instance"},{"location":"fontlab.flPreferences.html#interpolatesmartround","text":"fontlab.flPreferences.interpolateSmartRound bool","title":"interpolateSmartRound"},{"location":"fontlab.flPreferences.html#interpretname","text":"fontlab.flPreferences.InterpretName = 128","title":"InterpretName"},{"location":"fontlab.flPreferences.html#interpretweight","text":"fontlab.flPreferences.InterpretWeight = 1","title":"InterpretWeight"},{"location":"fontlab.flPreferences.html#interpretwidth","text":"fontlab.flPreferences.InterpretWidth = 2","title":"InterpretWidth"},{"location":"fontlab.flPreferences.html#keepdraw","text":"fontlab.flPreferences.KeepDraw = 4","title":"KeepDraw"},{"location":"fontlab.flPreferences.html#keepguideshints","text":"fontlab.flPreferences.KeepGuidesHints = 2","title":"KeepGuidesHints"},{"location":"fontlab.flPreferences.html#keepinsertdelete","text":"fontlab.flPreferences.KeepInsertDelete = 1","title":"KeepInsertDelete"},{"location":"fontlab.flPreferences.html#keepnone","text":"fontlab.flPreferences.KeepNone = 0","title":"KeepNone"},{"location":"fontlab.flPreferences.html#kerningauditexceptions","text":"fontlab.flPreferences.kerningAuditExceptions double","title":"kerningAuditExceptions"},{"location":"fontlab.flPreferences.html#kerningautotolerancenegative","text":"fontlab.flPreferences.kerningAutoToleranceNegative double","title":"kerningAutoToleranceNegative"},{"location":"fontlab.flPreferences.html#kerningautotolerancepositive","text":"fontlab.flPreferences.kerningAutoTolerancePositive double","title":"kerningAutoTolerancePositive"},{"location":"fontlab.flPreferences.html#kerningpairs","text":"fontlab.flPreferences.kerningPairs string","title":"kerningPairs"},{"location":"fontlab.flPreferences.html#lockfontguidelines","text":"fontlab.flPreferences.lockFontGuidelines bool","title":"lockFontGuidelines"},{"location":"fontlab.flPreferences.html#lockfontmetrics","text":"fontlab.flPreferences.lockFontMetrics bool","title":"lockFontMetrics"},{"location":"fontlab.flPreferences.html#lockgrid","text":"fontlab.flPreferences.lockGrid bool","title":"lockGrid"},{"location":"fontlab.flPreferences.html#lockguidelines","text":"fontlab.flPreferences.lockGuidelines bool","title":"lockGuidelines"},{"location":"fontlab.flPreferences.html#lockhints","text":"fontlab.flPreferences.lockHints bool","title":"lockHints"},{"location":"fontlab.flPreferences.html#lockmask","text":"fontlab.flPreferences.lockMask bool","title":"lockMask"},{"location":"fontlab.flPreferences.html#lockmaskglobal","text":"fontlab.flPreferences.lockMaskGlobal bool","title":"lockMaskGlobal"},{"location":"fontlab.flPreferences.html#lockmetrics","text":"fontlab.flPreferences.lockMetrics bool","title":"lockMetrics"},{"location":"fontlab.flPreferences.html#lockpinpoints","text":"fontlab.flPreferences.lockPinPoints bool","title":"lockPinPoints"},{"location":"fontlab.flPreferences.html#lockzones","text":"fontlab.flPreferences.lockZones bool","title":"lockZones"},{"location":"fontlab.flPreferences.html#mastersbackground","text":"fontlab.flPreferences.MastersBackground = 2","title":"MastersBackground"},{"location":"fontlab.flPreferences.html#mastersbackgroundbrightness","text":"fontlab.flPreferences.mastersBackgroundBrightness int","title":"mastersBackgroundBrightness"},{"location":"fontlab.flPreferences.html#mastersbar","text":"fontlab.flPreferences.MastersBar = 1","title":"MastersBar"},{"location":"fontlab.flPreferences.html#mastersbarthickness","text":"fontlab.flPreferences.mastersBarThickness int","title":"mastersBarThickness"},{"location":"fontlab.flPreferences.html#masterskeepcompatible","text":"fontlab.flPreferences.mastersKeepCompatible int","title":"mastersKeepCompatible"},{"location":"fontlab.flPreferences.html#mastersnone","text":"fontlab.flPreferences.MastersNone = 0","title":"MastersNone"},{"location":"fontlab.flPreferences.html#masterspreviewcolor","text":"fontlab.flPreferences.mastersPreviewColor int","title":"mastersPreviewColor"},{"location":"fontlab.flPreferences.html#match","text":"fontlab.flPreferences.match uint","title":"match"},{"location":"fontlab.flPreferences.html#matchall","text":"fontlab.flPreferences.MatchAll = -1","title":"MatchAll"},{"location":"fontlab.flPreferences.html#matchconvertsegment","text":"fontlab.flPreferences.MatchConvertSegment = 8","title":"MatchConvertSegment"},{"location":"fontlab.flPreferences.html#matchdeletenode","text":"fontlab.flPreferences.MatchDeleteNode = 1","title":"MatchDeleteNode"},{"location":"fontlab.flPreferences.html#matchguides","text":"fontlab.flPreferences.MatchGuides = 16","title":"MatchGuides"},{"location":"fontlab.flPreferences.html#matchhints","text":"fontlab.flPreferences.MatchHints = 32","title":"MatchHints"},{"location":"fontlab.flPreferences.html#matchinsertnode","text":"fontlab.flPreferences.MatchInsertNode = 2","title":"MatchInsertNode"},{"location":"fontlab.flPreferences.html#matchinsertshape","text":"fontlab.flPreferences.MatchInsertShape = 128","title":"MatchInsertShape"},{"location":"fontlab.flPreferences.html#matchpins","text":"fontlab.flPreferences.MatchPins = 64","title":"MatchPins"},{"location":"fontlab.flPreferences.html#matchrenamenode","text":"fontlab.flPreferences.MatchRenameNode = 4","title":"MatchRenameNode"},{"location":"fontlab.flPreferences.html#metricsfreekerning","text":"fontlab.flPreferences.metricsFreeKerning bool","title":"metricsFreeKerning"},{"location":"fontlab.flPreferences.html#metricsfreemetrics","text":"fontlab.flPreferences.metricsFreeMetrics bool","title":"metricsFreeMetrics"},{"location":"fontlab.flPreferences.html#metricshideanchors","text":"fontlab.flPreferences.MetricsHideAnchors = 64","title":"MetricsHideAnchors"},{"location":"fontlab.flPreferences.html#metricshidefontguides","text":"fontlab.flPreferences.MetricsHideFontGuides = 128","title":"MetricsHideFontGuides"},{"location":"fontlab.flPreferences.html#metricshidefontmetrics","text":"fontlab.flPreferences.MetricsHideFontMetrics = 16","title":"MetricsHideFontMetrics"},{"location":"fontlab.flPreferences.html#metricshideglyphmetrics","text":"fontlab.flPreferences.MetricsHideGlyphMetrics = 32","title":"MetricsHideGlyphMetrics"},{"location":"fontlab.flPreferences.html#metricshidegrid","text":"fontlab.flPreferences.MetricsHideGrid = 8","title":"MetricsHideGrid"},{"location":"fontlab.flPreferences.html#metricshideguides","text":"fontlab.flPreferences.MetricsHideGuides = 1","title":"MetricsHideGuides"},{"location":"fontlab.flPreferences.html#metricshidehints","text":"fontlab.flPreferences.MetricsHideHints = 2","title":"MetricsHideHints"},{"location":"fontlab.flPreferences.html#metricshidezones","text":"fontlab.flPreferences.MetricsHideZones = 4","title":"MetricsHideZones"},{"location":"fontlab.flPreferences.html#metricsnudge1","text":"fontlab.flPreferences.metricsNudge1 double","title":"metricsNudge1"},{"location":"fontlab.flPreferences.html#metricsnudge10","text":"fontlab.flPreferences.metricsNudge10 double","title":"metricsNudge10"},{"location":"fontlab.flPreferences.html#metricssamples","text":"fontlab.flPreferences.metricsSamples string","title":"metricsSamples"},{"location":"fontlab.flPreferences.html#metricssmartnavigation","text":"fontlab.flPreferences.metricsSmartNavigation bool","title":"metricsSmartNavigation"},{"location":"fontlab.flPreferences.html#metricstostroke","text":"fontlab.flPreferences.metricsToStroke bool","title":"metricsToStroke"},{"location":"fontlab.flPreferences.html#modecategories","text":"fontlab.flPreferences.ModeCategories = 3","title":"ModeCategories"},{"location":"fontlab.flPreferences.html#modecodepages","text":"fontlab.flPreferences.ModeCodepages = 2","title":"ModeCodepages"},{"location":"fontlab.flPreferences.html#modeindex","text":"fontlab.flPreferences.ModeIndex = 5","title":"ModeIndex"},{"location":"fontlab.flPreferences.html#modenames","text":"fontlab.flPreferences.ModeNames = 0","title":"ModeNames"},{"location":"fontlab.flPreferences.html#modenone","text":"fontlab.flPreferences.ModeNone = -1","title":"ModeNone"},{"location":"fontlab.flPreferences.html#moderanges","text":"fontlab.flPreferences.ModeRanges = 1","title":"ModeRanges"},{"location":"fontlab.flPreferences.html#modescripts","text":"fontlab.flPreferences.ModeScripts = 4","title":"ModeScripts"},{"location":"fontlab.flPreferences.html#namecaptionfont","text":"fontlab.flPreferences.namecaptionFont = namecaptionFont (...) QFont namecaptionFont (bool condensed)","title":"namecaptionFont"},{"location":"fontlab.flPreferences.html#namecaptionfontfamilyname","text":"fontlab.flPreferences.namecaptionFontFamilyName = namecaptionFontFamilyName (...) string namecaptionFontFamilyName (bool condensed)","title":"namecaptionFontFamilyName"},{"location":"fontlab.flPreferences.html#namecaptionfontid","text":"fontlab.flPreferences.namecaptionFontId = namecaptionFontId (...) int namecaptionFontId (bool condensed)","title":"namecaptionFontId"},{"location":"fontlab.flPreferences.html#niceglyphs","text":"fontlab.flPreferences.NiceGlyphs = 2","title":"NiceGlyphs"},{"location":"fontlab.flPreferences.html#nicenone","text":"fontlab.flPreferences.NiceNone = 0","title":"NiceNone"},{"location":"fontlab.flPreferences.html#nicepdf","text":"fontlab.flPreferences.NicePdf = 3","title":"NicePdf"},{"location":"fontlab.flPreferences.html#nicerobo","text":"fontlab.flPreferences.NiceRobo = 1","title":"NiceRobo"},{"location":"fontlab.flPreferences.html#niceuni","text":"fontlab.flPreferences.NiceUni = 4","title":"NiceUni"},{"location":"fontlab.flPreferences.html#nodenamealways","text":"fontlab.flPreferences.NodeNameAlways = 2","title":"NodeNameAlways"},{"location":"fontlab.flPreferences.html#nodenamecoordinates","text":"fontlab.flPreferences.NodeNameCoordinates = 1","title":"NodeNameCoordinates"},{"location":"fontlab.flPreferences.html#nodenamenever","text":"fontlab.flPreferences.NodeNameNever = 0","title":"NodeNameNever"},{"location":"fontlab.flPreferences.html#nodestyleauto","text":"fontlab.flPreferences.NodeStyleAuto = 2","title":"NodeStyleAuto"},{"location":"fontlab.flPreferences.html#nodestyleflat","text":"fontlab.flPreferences.NodeStyleFlat = 1","title":"NodeStyleFlat"},{"location":"fontlab.flPreferences.html#nodestyleframe","text":"fontlab.flPreferences.NodeStyleFrame = 0","title":"NodeStyleFrame"},{"location":"fontlab.flPreferences.html#openrestorepanels","text":"fontlab.flPreferences.openRestorePanels bool","title":"openRestorePanels"},{"location":"fontlab.flPreferences.html#openrestorewindows","text":"fontlab.flPreferences.openRestoreWindows bool","title":"openRestoreWindows"},{"location":"fontlab.flPreferences.html#operationsocr","text":"fontlab.flPreferences.operationsOCR bool","title":"operationsOCR"},{"location":"fontlab.flPreferences.html#operationspowerguides","text":"fontlab.flPreferences.operationsPowerGuides int","title":"operationsPowerGuides"},{"location":"fontlab.flPreferences.html#operationsseparatedetectstrings","text":"fontlab.flPreferences.operationsSeparateDetectStrings bool","title":"operationsSeparateDetectStrings"},{"location":"fontlab.flPreferences.html#operationsseparatemergeoverlapped","text":"fontlab.flPreferences.operationsSeparateMergeOverlapped bool","title":"operationsSeparateMergeOverlapped"},{"location":"fontlab.flPreferences.html#operationsseparatemergestacked","text":"fontlab.flPreferences.operationsSeparateMergeStacked bool","title":"operationsSeparateMergeStacked"},{"location":"fontlab.flPreferences.html#operationstesseractlanguages","text":"fontlab.flPreferences.operationsTesseractLanguages string","title":"operationsTesseractLanguages"},{"location":"fontlab.flPreferences.html#operationstraceprecision","text":"fontlab.flPreferences.operationsTracePrecision double","title":"operationsTracePrecision"},{"location":"fontlab.flPreferences.html#operationstracesmoothness","text":"fontlab.flPreferences.operationsTraceSmoothness double","title":"operationsTraceSmoothness"},{"location":"fontlab.flPreferences.html#options2tracer_precision","text":"fontlab.flPreferences.options2tracer_precision = options2tracer_precision (...) double options2tracer_precision()","title":"options2tracer_precision"},{"location":"fontlab.flPreferences.html#options2tracer_smoothness","text":"fontlab.flPreferences.options2tracer_smoothness = options2tracer_smoothness (...) int options2tracer_smoothness()","title":"options2tracer_smoothness"},{"location":"fontlab.flPreferences.html#organizenone","text":"fontlab.flPreferences.OrganizeNone = 0","title":"OrganizeNone"},{"location":"fontlab.flPreferences.html#organizeprofile","text":"fontlab.flPreferences.OrganizeProfile = 4","title":"OrganizeProfile"},{"location":"fontlab.flPreferences.html#organizepsn","text":"fontlab.flPreferences.OrganizePSN = 2","title":"OrganizePSN"},{"location":"fontlab.flPreferences.html#organizesgn","text":"fontlab.flPreferences.OrganizeSGN = 1","title":"OrganizeSGN"},{"location":"fontlab.flPreferences.html#organizetfn","text":"fontlab.flPreferences.OrganizeTFN = 3","title":"OrganizeTFN"},{"location":"fontlab.flPreferences.html#organizetfn_profile","text":"fontlab.flPreferences.OrganizeTFN_Profile = 5","title":"OrganizeTFN_Profile"},{"location":"fontlab.flPreferences.html#panelfontsize","text":"fontlab.flPreferences.panelFontSize int","title":"panelFontSize"},{"location":"fontlab.flPreferences.html#paneltabs","text":"fontlab.flPreferences.panelTabs int","title":"panelTabs"},{"location":"fontlab.flPreferences.html#pastealign","text":"fontlab.flPreferences.PasteAlign = 1","title":"PasteAlign"},{"location":"fontlab.flPreferences.html#pasteascender_descender","text":"fontlab.flPreferences.PasteAscender_Descender = 3","title":"PasteAscender_Descender"},{"location":"fontlab.flPreferences.html#pastecapsheight_baseline","text":"fontlab.flPreferences.PasteCapsHeight_Baseline = 4","title":"PasteCapsHeight_Baseline"},{"location":"fontlab.flPreferences.html#pastecapsheight_descender","text":"fontlab.flPreferences.PasteCapsHeight_Descender = 5","title":"PasteCapsHeight_Descender"},{"location":"fontlab.flPreferences.html#pasteeps","text":"fontlab.flPreferences.pasteEPS bool","title":"pasteEPS"},{"location":"fontlab.flPreferences.html#pasteignoreappearance","text":"fontlab.flPreferences.pasteIgnoreAppearance bool","title":"pasteIgnoreAppearance"},{"location":"fontlab.flPreferences.html#pasteunscaled","text":"fontlab.flPreferences.PasteUnscaled = 0","title":"PasteUnscaled"},{"location":"fontlab.flPreferences.html#pasteupm_descender","text":"fontlab.flPreferences.PasteUPM_Descender = 2","title":"PasteUPM_Descender"},{"location":"fontlab.flPreferences.html#pathautosave","text":"fontlab.flPreferences.pathAutoSave string","title":"pathAutoSave"},{"location":"fontlab.flPreferences.html#powerall","text":"fontlab.flPreferences.PowerAll = 15","title":"PowerAll"},{"location":"fontlab.flPreferences.html#powerfont","text":"fontlab.flPreferences.PowerFont = 2","title":"PowerFont"},{"location":"fontlab.flPreferences.html#powerglyph","text":"fontlab.flPreferences.PowerGlyph = 1","title":"PowerGlyph"},{"location":"fontlab.flPreferences.html#powermetrics","text":"fontlab.flPreferences.PowerMetrics = 8","title":"PowerMetrics"},{"location":"fontlab.flPreferences.html#powerzones","text":"fontlab.flPreferences.PowerZones = 4","title":"PowerZones"},{"location":"fontlab.flPreferences.html#pythonclearcontext","text":"fontlab.flPreferences.pythonClearContext bool","title":"pythonClearContext"},{"location":"fontlab.flPreferences.html#qobject","text":"fontlab.flPreferences.qobject QObject","title":"qobject"},{"location":"fontlab.flPreferences.html#rainbownocenterline","text":"fontlab.flPreferences.RainbowNoCenterline = 4","title":"RainbowNoCenterline"},{"location":"fontlab.flPreferences.html#rainbownoedges","text":"fontlab.flPreferences.RainbowNoEdges = 2","title":"RainbowNoEdges"},{"location":"fontlab.flPreferences.html#rainbownone","text":"fontlab.flPreferences.RainbowNone = 0","title":"RainbowNone"},{"location":"fontlab.flPreferences.html#rainbownorainbow","text":"fontlab.flPreferences.RainbowNoRainbow = 8","title":"RainbowNoRainbow"},{"location":"fontlab.flPreferences.html#rainbowshow","text":"fontlab.flPreferences.RainbowShow = 1","title":"RainbowShow"},{"location":"fontlab.flPreferences.html#renderblackwhite","text":"fontlab.flPreferences.renderBlackWhite = 1","title":"renderBlackWhite"},{"location":"fontlab.flPreferences.html#rendercleartype","text":"fontlab.flPreferences.renderClearType = 0","title":"renderClearType"},{"location":"fontlab.flPreferences.html#rendergrayscale","text":"fontlab.flPreferences.renderGrayScale = 2","title":"renderGrayScale"},{"location":"fontlab.flPreferences.html#roundall","text":"fontlab.flPreferences.RoundAll = 1","title":"RoundAll"},{"location":"fontlab.flPreferences.html#roundnone","text":"fontlab.flPreferences.RoundNone = 0","title":"RoundNone"},{"location":"fontlab.flPreferences.html#roundon","text":"fontlab.flPreferences.RoundOn = 2","title":"RoundOn"},{"location":"fontlab.flPreferences.html#savebackupfolder","text":"fontlab.flPreferences.saveBackupFolder bool","title":"saveBackupFolder"},{"location":"fontlab.flPreferences.html#saveconflictmode","text":"fontlab.flPreferences.saveConflictMode int","title":"saveConflictMode"},{"location":"fontlab.flPreferences.html#savefolderask","text":"fontlab.flPreferences.SaveFolderAsk = 0","title":"SaveFolderAsk"},{"location":"fontlab.flPreferences.html#savefolderfolder","text":"fontlab.flPreferences.SaveFolderFolder = 2","title":"SaveFolderFolder"},{"location":"fontlab.flPreferences.html#savefoldersource","text":"fontlab.flPreferences.SaveFolderSource = 1","title":"SaveFolderSource"},{"location":"fontlab.flPreferences.html#saveview","text":"fontlab.flPreferences.saveView = saveView (...) saveView()","title":"saveView"},{"location":"fontlab.flPreferences.html#saveworkspacepanels","text":"fontlab.flPreferences.SaveWorkspacePanels = 2","title":"SaveWorkspacePanels"},{"location":"fontlab.flPreferences.html#saveworkspacewindows","text":"fontlab.flPreferences.SaveWorkspaceWindows = 1","title":"SaveWorkspaceWindows"},{"location":"fontlab.flPreferences.html#setenabledhorizontaltextblockalignment","text":"fontlab.flPreferences.setEnabledHorizontalTextBlockAlignment = setEnabledHorizontalTextBlockAlignment (...) setEnabledHorizontalTextBlockAlignment(bool)","title":"setEnabledHorizontalTextBlockAlignment"},{"location":"fontlab.flPreferences.html#setfontaudittest","text":"fontlab.flPreferences.setFontAuditTest = setFontAuditTest (...) setFontAuditTest(int id, bool value)","title":"setFontAuditTest"},{"location":"fontlab.flPreferences.html#setgriddistances","text":"fontlab.flPreferences.setGridDistances = setGridDistances (...) setGridDistances(double x, double y)","title":"setGridDistances"},{"location":"fontlab.flPreferences.html#showanchorcloudselected","text":"fontlab.flPreferences.showAnchorCloudSelected bool","title":"showAnchorCloudSelected"},{"location":"fontlab.flPreferences.html#showhoveredcoordinates","text":"fontlab.flPreferences.showHoveredCoordinates bool","title":"showHoveredCoordinates"},{"location":"fontlab.flPreferences.html#shownodepositionlarge","text":"fontlab.flPreferences.showNodePositionLarge bool","title":"showNodePositionLarge"},{"location":"fontlab.flPreferences.html#shownodestyle","text":"fontlab.flPreferences.showNodeStyle int","title":"showNodeStyle"},{"location":"fontlab.flPreferences.html#showpinname","text":"fontlab.flPreferences.showPinName bool","title":"showPinName"},{"location":"fontlab.flPreferences.html#showselectionglow","text":"fontlab.flPreferences.showSelectionGlow bool","title":"showSelectionGlow"},{"location":"fontlab.flPreferences.html#showstemthickness","text":"fontlab.flPreferences.showStemThickness int","title":"showStemThickness"},{"location":"fontlab.flPreferences.html#showtapeline","text":"fontlab.flPreferences.showTapeLine bool","title":"showTapeLine"},{"location":"fontlab.flPreferences.html#singlebreak","text":"fontlab.flPreferences.SingleBreak = 0","title":"SingleBreak"},{"location":"fontlab.flPreferences.html#singleremove","text":"fontlab.flPreferences.SingleRemove = 1","title":"SingleRemove"},{"location":"fontlab.flPreferences.html#sketchboardautosavetimeinterval","text":"fontlab.flPreferences.sketchboardAutoSaveTimeInterval int","title":"sketchboardAutoSaveTimeInterval"},{"location":"fontlab.flPreferences.html#smartguides","text":"fontlab.flPreferences.smartGuides bool","title":"smartGuides"},{"location":"fontlab.flPreferences.html#snaptobounds","text":"fontlab.flPreferences.snapToBounds bool","title":"snapToBounds"},{"location":"fontlab.flPreferences.html#snaptofontguidelines","text":"fontlab.flPreferences.snapToFontGuidelines bool","title":"snapToFontGuidelines"},{"location":"fontlab.flPreferences.html#snaptofontmetrics","text":"fontlab.flPreferences.snapToFontMetrics bool","title":"snapToFontMetrics"},{"location":"fontlab.flPreferences.html#snaptogrid","text":"fontlab.flPreferences.snapToGrid bool","title":"snapToGrid"},{"location":"fontlab.flPreferences.html#snaptoguidelines","text":"fontlab.flPreferences.snapToGuidelines bool","title":"snapToGuidelines"},{"location":"fontlab.flPreferences.html#snaptohints","text":"fontlab.flPreferences.snapToHints bool","title":"snapToHints"},{"location":"fontlab.flPreferences.html#snaptomask","text":"fontlab.flPreferences.snapToMask bool","title":"snapToMask"},{"location":"fontlab.flPreferences.html#snaptomaskglobal","text":"fontlab.flPreferences.snapToMaskGlobal bool","title":"snapToMaskGlobal"},{"location":"fontlab.flPreferences.html#snaptometrics","text":"fontlab.flPreferences.snapToMetrics bool","title":"snapToMetrics"},{"location":"fontlab.flPreferences.html#snaptooutline","text":"fontlab.flPreferences.snapToOutline bool","title":"snapToOutline"},{"location":"fontlab.flPreferences.html#snaptopinpoints","text":"fontlab.flPreferences.snapToPinPoints bool","title":"snapToPinPoints"},{"location":"fontlab.flPreferences.html#snaptostems","text":"fontlab.flPreferences.snapToStems bool","title":"snapToStems"},{"location":"fontlab.flPreferences.html#snaptozones","text":"fontlab.flPreferences.snapToZones bool","title":"snapToZones"},{"location":"fontlab.flPreferences.html#sourcemetricssamples","text":"fontlab.flPreferences.sourceMetricsSamples = sourceMetricsSamples (...) QString sourceMetricsSamples()","title":"sourceMetricsSamples"},{"location":"fontlab.flPreferences.html#stringiconlong","text":"fontlab.flPreferences.stringIconLong string","title":"stringIconLong"},{"location":"fontlab.flPreferences.html#stringiconshort","text":"fontlab.flPreferences.stringIconShort string","title":"stringIconShort"},{"location":"fontlab.flPreferences.html#stringsizeglyphwaterfall","text":"fontlab.flPreferences.stringSizeGlyphWaterfall string","title":"stringSizeGlyphWaterfall"},{"location":"fontlab.flPreferences.html#stringsizetextwaterfall","text":"fontlab.flPreferences.stringSizeTextWaterfall string","title":"stringSizeTextWaterfall"},{"location":"fontlab.flPreferences.html#taperbody","text":"fontlab.flPreferences.TaperBody = 1","title":"TaperBody"},{"location":"fontlab.flPreferences.html#taperedge","text":"fontlab.flPreferences.TaperEdge = 2","title":"TaperEdge"},{"location":"fontlab.flPreferences.html#tapereverywhere","text":"fontlab.flPreferences.TaperEverywhere = 3","title":"TaperEverywhere"},{"location":"fontlab.flPreferences.html#tapernone","text":"fontlab.flPreferences.TaperNone = 0","title":"TaperNone"},{"location":"fontlab.flPreferences.html#templatefont","text":"fontlab.flPreferences.templateFont QFont","title":"templateFont"},{"location":"fontlab.flPreferences.html#templatefontfamilyname","text":"fontlab.flPreferences.templateFontFamilyName string","title":"templateFontFamilyName"},{"location":"fontlab.flPreferences.html#templatefontid","text":"fontlab.flPreferences.templateFontId int","title":"templateFontId"},{"location":"fontlab.flPreferences.html#textblockalignmentcenter","text":"fontlab.flPreferences.textBlockAlignmentCenter = textBlockAlignmentCenter (...) bool textBlockAlignmentCenter()","title":"textBlockAlignmentCenter"},{"location":"fontlab.flPreferences.html#texts","text":"fontlab.flPreferences.texts QStringList","title":"texts"},{"location":"fontlab.flPreferences.html#thicknessnormal","text":"fontlab.flPreferences.ThicknessNormal = 1","title":"ThicknessNormal"},{"location":"fontlab.flPreferences.html#thicknessthick","text":"fontlab.flPreferences.ThicknessThick = 2","title":"ThicknessThick"},{"location":"fontlab.flPreferences.html#thicknessthin","text":"fontlab.flPreferences.ThicknessThin = 0","title":"ThicknessThin"},{"location":"fontlab.flPreferences.html#tracer2options_precision","text":"fontlab.flPreferences.tracer2options_precision = tracer2options_precision (...) double tracer2options_precision(double curve_fit)","title":"tracer2options_precision"},{"location":"fontlab.flPreferences.html#tracer2options_smoothness","text":"fontlab.flPreferences.tracer2options_smoothness = tracer2options_smoothness (...) double tracer2options_smoothness(int straighten_angle)","title":"tracer2options_smoothness"},{"location":"fontlab.flPreferences.html#transformmoderotate","text":"fontlab.flPreferences.TransformModeRotate = 0","title":"TransformModeRotate"},{"location":"fontlab.flPreferences.html#transformmodescale","text":"fontlab.flPreferences.TransformModeScale = 1","title":"TransformModeScale"},{"location":"fontlab.flPreferences.html#transformmodeslant","text":"fontlab.flPreferences.TransformModeSlant = 2","title":"TransformModeSlant"},{"location":"fontlab.flPreferences.html#tthhintingflag","text":"fontlab.flPreferences.tthHintingFlag uint","title":"tthHintingFlag"},{"location":"fontlab.flPreferences.html#tthhintingtolerance","text":"fontlab.flPreferences.tthHintingTolerance uint","title":"tthHintingTolerance"},{"location":"fontlab.flPreferences.html#tthppm","text":"fontlab.flPreferences.tthPPM int","title":"tthPPM"},{"location":"fontlab.flPreferences.html#tthrender","text":"fontlab.flPreferences.tthRender int","title":"tthRender"},{"location":"fontlab.flPreferences.html#tthsamples","text":"fontlab.flPreferences.tthSamples string","title":"tthSamples"},{"location":"fontlab.flPreferences.html#unicode2text","text":"fontlab.flPreferences.unicode2text = unicode2text (...) QString unicode2text(uint unc)","title":"unicode2text"},{"location":"fontlab.flPreferences.html#useitalicall","text":"fontlab.flPreferences.UseItalicAll = 2","title":"UseItalicAll"},{"location":"fontlab.flPreferences.html#useitalicmetrics","text":"fontlab.flPreferences.UseItalicMetrics = 1","title":"UseItalicMetrics"},{"location":"fontlab.flPreferences.html#useitalicnone","text":"fontlab.flPreferences.UseItalicNone = 0","title":"UseItalicNone"},{"location":"fontlab.flPreferences.html#variationsinterpretlayername","text":"fontlab.flPreferences.variationsInterpretLayerName uint","title":"variationsInterpretLayerName"},{"location":"fontlab.flPreferences.html#viewalternative","text":"fontlab.flPreferences.viewAlternative bool","title":"viewAlternative"},{"location":"fontlab.flPreferences.html#viewanchorgroups","text":"fontlab.flPreferences.ViewAnchorGroups = 7","title":"ViewAnchorGroups"},{"location":"fontlab.flPreferences.html#viewanchors","text":"fontlab.flPreferences.ViewAnchors = 5","title":"ViewAnchors"},{"location":"fontlab.flPreferences.html#viewantialiasing","text":"fontlab.flPreferences.viewAntialiasing bool","title":"viewAntialiasing"},{"location":"fontlab.flPreferences.html#viewbackground","text":"fontlab.flPreferences.ViewBackground = 29","title":"ViewBackground"},{"location":"fontlab.flPreferences.html#viewcontourdirection","text":"fontlab.flPreferences.ViewContourDirection = 31","title":"ViewContourDirection"},{"location":"fontlab.flPreferences.html#viewcoordinates","text":"fontlab.flPreferences.ViewCoordinates = 32","title":"ViewCoordinates"},{"location":"fontlab.flPreferences.html#viewcount","text":"fontlab.flPreferences.ViewCount = 42","title":"ViewCount"},{"location":"fontlab.flPreferences.html#viewcounters","text":"fontlab.flPreferences.ViewCounters = 35","title":"ViewCounters"},{"location":"fontlab.flPreferences.html#viewcurvature","text":"fontlab.flPreferences.ViewCurvature = 18","title":"ViewCurvature"},{"location":"fontlab.flPreferences.html#viewfilledpreview","text":"fontlab.flPreferences.ViewFilledPreview = 28","title":"ViewFilledPreview"},{"location":"fontlab.flPreferences.html#viewfontaudit","text":"fontlab.flPreferences.ViewFontAudit = 19","title":"ViewFontAudit"},{"location":"fontlab.flPreferences.html#viewfontguides","text":"fontlab.flPreferences.ViewFontGuides = 1","title":"ViewFontGuides"},{"location":"fontlab.flPreferences.html#viewfontmetrics","text":"fontlab.flPreferences.ViewFontMetrics = 4","title":"ViewFontMetrics"},{"location":"fontlab.flPreferences.html#viewglobalmask","text":"fontlab.flPreferences.ViewGlobalMask = 16","title":"ViewGlobalMask"},{"location":"fontlab.flPreferences.html#viewglyphbar","text":"fontlab.flPreferences.ViewGlyphBar = 37","title":"ViewGlyphBar"},{"location":"fontlab.flPreferences.html#viewglyphguides","text":"fontlab.flPreferences.ViewGlyphGuides = 0","title":"ViewGlyphGuides"},{"location":"fontlab.flPreferences.html#viewglyphmetrics","text":"fontlab.flPreferences.ViewGlyphMetrics = 3","title":"ViewGlyphMetrics"},{"location":"fontlab.flPreferences.html#viewgrid","text":"fontlab.flPreferences.ViewGrid = 11","title":"ViewGrid"},{"location":"fontlab.flPreferences.html#viewgroups","text":"fontlab.flPreferences.ViewGroups = 36","title":"ViewGroups"},{"location":"fontlab.flPreferences.html#viewhandles","text":"fontlab.flPreferences.ViewHandles = 24","title":"ViewHandles"},{"location":"fontlab.flPreferences.html#viewhints","text":"fontlab.flPreferences.ViewHints = 9","title":"ViewHints"},{"location":"fontlab.flPreferences.html#viewhintshadows","text":"fontlab.flPreferences.ViewHintShadows = 30","title":"ViewHintShadows"},{"location":"fontlab.flPreferences.html#viewinactiveglyphs","text":"fontlab.flPreferences.ViewInactiveGlyphs = 41","title":"ViewInactiveGlyphs"},{"location":"fontlab.flPreferences.html#viewkerninggroups","text":"fontlab.flPreferences.ViewKerningGroups = 8","title":"ViewKerningGroups"},{"location":"fontlab.flPreferences.html#viewlocalmask","text":"fontlab.flPreferences.ViewLocalMask = 17","title":"ViewLocalMask"},{"location":"fontlab.flPreferences.html#viewmasterlinks","text":"fontlab.flPreferences.ViewMasterLinks = 33","title":"ViewMasterLinks"},{"location":"fontlab.flPreferences.html#viewmeasurement","text":"fontlab.flPreferences.ViewMeasurement = 25","title":"ViewMeasurement"},{"location":"fontlab.flPreferences.html#viewmetricstable","text":"fontlab.flPreferences.ViewMetricsTable = 26","title":"ViewMetricsTable"},{"location":"fontlab.flPreferences.html#viewmodekerning","text":"fontlab.flPreferences.ViewModeKerning = 4","title":"ViewModeKerning"},{"location":"fontlab.flPreferences.html#viewmodemetrics","text":"fontlab.flPreferences.ViewModeMetrics = 2","title":"ViewModeMetrics"},{"location":"fontlab.flPreferences.html#viewmodeoutline","text":"fontlab.flPreferences.ViewModeOutline = 1","title":"ViewModeOutline"},{"location":"fontlab.flPreferences.html#viewmodepreview","text":"fontlab.flPreferences.ViewModePreview = 0","title":"ViewModePreview"},{"location":"fontlab.flPreferences.html#viewmodetext","text":"fontlab.flPreferences.ViewModeText = 8","title":"ViewModeText"},{"location":"fontlab.flPreferences.html#viewnodelinks","text":"fontlab.flPreferences.ViewNodeLinks = 14","title":"ViewNodeLinks"},{"location":"fontlab.flPreferences.html#viewnodes","text":"fontlab.flPreferences.ViewNodes = 23","title":"ViewNodes"},{"location":"fontlab.flPreferences.html#viewpins","text":"fontlab.flPreferences.ViewPins = 6","title":"ViewPins"},{"location":"fontlab.flPreferences.html#viewrulers","text":"fontlab.flPreferences.ViewRulers = 27","title":"ViewRulers"},{"location":"fontlab.flPreferences.html#viewselectionframe","text":"fontlab.flPreferences.ViewSelectionFrame = 38","title":"ViewSelectionFrame"},{"location":"fontlab.flPreferences.html#viewshapeconnection","text":"fontlab.flPreferences.ViewShapeConnection = 13","title":"ViewShapeConnection"},{"location":"fontlab.flPreferences.html#viewshapeframe","text":"fontlab.flPreferences.ViewShapeFrame = 12","title":"ViewShapeFrame"},{"location":"fontlab.flPreferences.html#viewshapeguides","text":"fontlab.flPreferences.ViewShapeGuides = 2","title":"ViewShapeGuides"},{"location":"fontlab.flPreferences.html#viewshapelinks","text":"fontlab.flPreferences.ViewShapeLinks = 15","title":"ViewShapeLinks"},{"location":"fontlab.flPreferences.html#viewstickers","text":"fontlab.flPreferences.ViewStickers = 40","title":"ViewStickers"},{"location":"fontlab.flPreferences.html#viewstring","text":"fontlab.flPreferences.ViewString = 34","title":"ViewString"},{"location":"fontlab.flPreferences.html#viewtapeline","text":"fontlab.flPreferences.ViewTapeLine = 20","title":"ViewTapeLine"},{"location":"fontlab.flPreferences.html#viewthickness","text":"fontlab.flPreferences.ViewThickness = 39","title":"ViewThickness"},{"location":"fontlab.flPreferences.html#viewtunni","text":"fontlab.flPreferences.ViewTunni = 21","title":"ViewTunni"},{"location":"fontlab.flPreferences.html#viewzones","text":"fontlab.flPreferences.ViewZones = 10","title":"ViewZones"},{"location":"fontlab.flPreferences.html#windowsfonttabs","text":"fontlab.flPreferences.WindowsFontTabs = 2","title":"WindowsFontTabs"},{"location":"fontlab.flPreferences.html#windowstabs","text":"fontlab.flPreferences.WindowsTabs = 0","title":"WindowsTabs"},{"location":"fontlab.flPreferences.html#windowswindows","text":"fontlab.flPreferences.WindowsWindows = 1","title":"WindowsWindows"},{"location":"fontlab.flPreferences.html#workfont","text":"fontlab.flPreferences.workFont QFont","title":"workFont"},{"location":"fontlab.flPreferences.html#workfontfamilyname","text":"fontlab.flPreferences.workFontFamilyName string","title":"workFontFamilyName"},{"location":"fontlab.flPreferences.html#workfontid","text":"fontlab.flPreferences.workFontId int","title":"workFontId"},{"location":"fontlab.flPreferences.html#zoomascender","text":"fontlab.flPreferences.zoomAscender int","title":"zoomAscender"},{"location":"fontlab.flPreferences.html#zoomdescender","text":"fontlab.flPreferences.zoomDescender int","title":"zoomDescender"},{"location":"fontlab.flPreferences.html#zoomfactorkeyboard","text":"fontlab.flPreferences.zoomFactorKeyboard double","title":"zoomFactorKeyboard"},{"location":"fontlab.flPreferences.html#zoomfactorwheel","text":"fontlab.flPreferences.zoomFactorWheel double","title":"zoomFactorWheel"},{"location":"fontlab.flPreferences.html#zoommode","text":"fontlab.flPreferences.zoomMode int","title":"zoomMode"},{"location":"fontlab.flPreferences.html#zoommodelines","text":"fontlab.flPreferences.ZoomModeLines = 2","title":"ZoomModeLines"},{"location":"fontlab.flPreferences.html#zoommodemetrics","text":"fontlab.flPreferences.ZoomModeMetrics = 0","title":"ZoomModeMetrics"},{"location":"fontlab.flPreferences.html#zoommodesafe","text":"fontlab.flPreferences.ZoomModeSafe = 3","title":"ZoomModeSafe"},{"location":"fontlab.flPreferences.html#zoommodesize","text":"fontlab.flPreferences.ZoomModeSize = 1","title":"ZoomModeSize"},{"location":"fontlab.flPreferences.html#zoomsize","text":"fontlab.flPreferences.zoomSize int","title":"zoomSize"},{"location":"fontlab.flProperty.html","text":"flProperty fontlab.flProperty = class flProperty ( object ) flProperty representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name objectAttr QString refCnt object references count type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flProperty.changed = changed (...) changed() checkInitHistoryState fontlab.flProperty.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flProperty.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flProperty.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flProperty.clearFlags = clearFlags (...) clearFlags() clone fontlab.flProperty.clone = clone (...) Clone the object cloneObject fontlab.flProperty.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flProperty.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flProperty.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flProperty.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flProperty.flag = flag (...) flag(uint f) flObjectFlags fontlab.flProperty.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flProperty.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flProperty.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flProperty.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flProperty.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flProperty.hasChanges bool hasHistoryState fontlab.flProperty.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flProperty.hasHistoryStates bool haveObject fontlab.flProperty.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flProperty.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flProperty.id object id independedAll fontlab.flProperty.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flProperty.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flProperty.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flProperty.isChanged bool isEqual fontlab.flProperty.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flProperty.isNull bool isPresent fontlab.flProperty.isPresent bool isReleased fontlab.flProperty.isReleased bool isValid fontlab.flProperty.isValid bool name fontlab.flProperty.name object name objectAttr fontlab.flProperty.objectAttr QString refCnt fontlab.flProperty.refCnt object references count release fontlab.flProperty.release = release (...) release() remove fontlab.flProperty.remove = remove (...) remove([flObject]) removeChild fontlab.flProperty.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flProperty.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flProperty.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flProperty.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flProperty.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flProperty.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flProperty.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flProperty.tag = tag (...) tag([string]) type fontlab.flProperty.type object type update fontlab.flProperty.update = update (...) update()","title":"flProperty"},{"location":"fontlab.flProperty.html#flproperty","text":"","title":"flProperty"},{"location":"fontlab.flProperty.html#changed","text":"fontlab.flProperty.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flProperty.html#checkinithistorystate","text":"fontlab.flProperty.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flProperty.html#clearabovehistory","text":"fontlab.flProperty.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flProperty.html#clearflag","text":"fontlab.flProperty.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flProperty.html#clearflags","text":"fontlab.flProperty.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flProperty.html#clone","text":"fontlab.flProperty.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flProperty.html#cloneobject","text":"fontlab.flProperty.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flProperty.html#createhistorystate","text":"fontlab.flProperty.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flProperty.html#createobject","text":"fontlab.flProperty.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flProperty.html#currenthistorystate","text":"fontlab.flProperty.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flProperty.html#flag","text":"fontlab.flProperty.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flProperty.html#flobjectflags","text":"fontlab.flProperty.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flProperty.html#getproperties","text":"fontlab.flProperty.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flProperty.html#getproperty","text":"fontlab.flProperty.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flProperty.html#getpropertyfloat","text":"fontlab.flProperty.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flProperty.html#getpropertyint","text":"fontlab.flProperty.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flProperty.html#haschanges","text":"fontlab.flProperty.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flProperty.html#hashistorystate","text":"fontlab.flProperty.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flProperty.html#hashistorystates","text":"fontlab.flProperty.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flProperty.html#haveobject","text":"fontlab.flProperty.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flProperty.html#historystates","text":"fontlab.flProperty.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flProperty.html#id","text":"fontlab.flProperty.id object id","title":"id"},{"location":"fontlab.flProperty.html#independedall","text":"fontlab.flProperty.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flProperty.html#initialhistorystate","text":"fontlab.flProperty.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flProperty.html#instancetype","text":"fontlab.flProperty.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flProperty.html#ischanged","text":"fontlab.flProperty.isChanged bool","title":"isChanged"},{"location":"fontlab.flProperty.html#isequal","text":"fontlab.flProperty.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flProperty.html#isnull","text":"fontlab.flProperty.isNull bool","title":"isNull"},{"location":"fontlab.flProperty.html#ispresent","text":"fontlab.flProperty.isPresent bool","title":"isPresent"},{"location":"fontlab.flProperty.html#isreleased","text":"fontlab.flProperty.isReleased bool","title":"isReleased"},{"location":"fontlab.flProperty.html#isvalid","text":"fontlab.flProperty.isValid bool","title":"isValid"},{"location":"fontlab.flProperty.html#name","text":"fontlab.flProperty.name object name","title":"name"},{"location":"fontlab.flProperty.html#objectattr","text":"fontlab.flProperty.objectAttr QString","title":"objectAttr"},{"location":"fontlab.flProperty.html#refcnt","text":"fontlab.flProperty.refCnt object references count","title":"refCnt"},{"location":"fontlab.flProperty.html#release","text":"fontlab.flProperty.release = release (...) release()","title":"release"},{"location":"fontlab.flProperty.html#remove","text":"fontlab.flProperty.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flProperty.html#removechild","text":"fontlab.flProperty.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flProperty.html#removeproperty","text":"fontlab.flProperty.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flProperty.html#restorehistorystate","text":"fontlab.flProperty.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flProperty.html#setflag","text":"fontlab.flProperty.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flProperty.html#setproperty","text":"fontlab.flProperty.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flProperty.html#setpropertyfloat","text":"fontlab.flProperty.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flProperty.html#setpropertyint","text":"fontlab.flProperty.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flProperty.html#tag","text":"fontlab.flProperty.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flProperty.html#type","text":"fontlab.flProperty.type object type","title":"type"},{"location":"fontlab.flProperty.html#update","text":"fontlab.flProperty.update = update (...) update()","title":"update"},{"location":"fontlab.flPropertyDouble.html","text":"flPropertyDouble fontlab.flPropertyDouble = class flPropertyDouble ( object ) flPropertyDouble representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors expression flExpression hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type value double Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flPropertyDouble.changed = changed (...) changed() checkInitHistoryState fontlab.flPropertyDouble.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flPropertyDouble.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flPropertyDouble.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flPropertyDouble.clearFlags = clearFlags (...) clearFlags() clone fontlab.flPropertyDouble.clone = clone (...) Clone the object cloneObject fontlab.flPropertyDouble.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flPropertyDouble.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flPropertyDouble.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flPropertyDouble.currentHistoryState = currentHistoryState (...) currentHistoryIx() expression fontlab.flPropertyDouble.expression flExpression flag fontlab.flPropertyDouble.flag = flag (...) flag(uint f) flObjectFlags fontlab.flPropertyDouble.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flPropertyDouble.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flPropertyDouble.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flPropertyDouble.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flPropertyDouble.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flPropertyDouble.hasChanges bool hasHistoryState fontlab.flPropertyDouble.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flPropertyDouble.hasHistoryStates bool haveObject fontlab.flPropertyDouble.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flPropertyDouble.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flPropertyDouble.id object id independedAll fontlab.flPropertyDouble.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flPropertyDouble.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flPropertyDouble.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flPropertyDouble.isChanged bool isEqual fontlab.flPropertyDouble.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flPropertyDouble.isNull bool isPresent fontlab.flPropertyDouble.isPresent bool isReleased fontlab.flPropertyDouble.isReleased bool isValid fontlab.flPropertyDouble.isValid bool name fontlab.flPropertyDouble.name object name refCnt fontlab.flPropertyDouble.refCnt object references count release fontlab.flPropertyDouble.release = release (...) release() remove fontlab.flPropertyDouble.remove = remove (...) remove([flObject]) removeChild fontlab.flPropertyDouble.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flPropertyDouble.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flPropertyDouble.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flPropertyDouble.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flPropertyDouble.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flPropertyDouble.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flPropertyDouble.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flPropertyDouble.tag = tag (...) tag([string]) type fontlab.flPropertyDouble.type object type update fontlab.flPropertyDouble.update = update (...) update() value fontlab.flPropertyDouble.value double","title":"flPropertyDouble"},{"location":"fontlab.flPropertyDouble.html#flpropertydouble","text":"","title":"flPropertyDouble"},{"location":"fontlab.flPropertyDouble.html#changed","text":"fontlab.flPropertyDouble.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flPropertyDouble.html#checkinithistorystate","text":"fontlab.flPropertyDouble.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flPropertyDouble.html#clearabovehistory","text":"fontlab.flPropertyDouble.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flPropertyDouble.html#clearflag","text":"fontlab.flPropertyDouble.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flPropertyDouble.html#clearflags","text":"fontlab.flPropertyDouble.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flPropertyDouble.html#clone","text":"fontlab.flPropertyDouble.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flPropertyDouble.html#cloneobject","text":"fontlab.flPropertyDouble.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flPropertyDouble.html#createhistorystate","text":"fontlab.flPropertyDouble.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flPropertyDouble.html#createobject","text":"fontlab.flPropertyDouble.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flPropertyDouble.html#currenthistorystate","text":"fontlab.flPropertyDouble.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flPropertyDouble.html#expression","text":"fontlab.flPropertyDouble.expression flExpression","title":"expression"},{"location":"fontlab.flPropertyDouble.html#flag","text":"fontlab.flPropertyDouble.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flPropertyDouble.html#flobjectflags","text":"fontlab.flPropertyDouble.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flPropertyDouble.html#getproperties","text":"fontlab.flPropertyDouble.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flPropertyDouble.html#getproperty","text":"fontlab.flPropertyDouble.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flPropertyDouble.html#getpropertyfloat","text":"fontlab.flPropertyDouble.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flPropertyDouble.html#getpropertyint","text":"fontlab.flPropertyDouble.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flPropertyDouble.html#haschanges","text":"fontlab.flPropertyDouble.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flPropertyDouble.html#hashistorystate","text":"fontlab.flPropertyDouble.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flPropertyDouble.html#hashistorystates","text":"fontlab.flPropertyDouble.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flPropertyDouble.html#haveobject","text":"fontlab.flPropertyDouble.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flPropertyDouble.html#historystates","text":"fontlab.flPropertyDouble.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flPropertyDouble.html#id","text":"fontlab.flPropertyDouble.id object id","title":"id"},{"location":"fontlab.flPropertyDouble.html#independedall","text":"fontlab.flPropertyDouble.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flPropertyDouble.html#initialhistorystate","text":"fontlab.flPropertyDouble.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flPropertyDouble.html#instancetype","text":"fontlab.flPropertyDouble.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flPropertyDouble.html#ischanged","text":"fontlab.flPropertyDouble.isChanged bool","title":"isChanged"},{"location":"fontlab.flPropertyDouble.html#isequal","text":"fontlab.flPropertyDouble.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flPropertyDouble.html#isnull","text":"fontlab.flPropertyDouble.isNull bool","title":"isNull"},{"location":"fontlab.flPropertyDouble.html#ispresent","text":"fontlab.flPropertyDouble.isPresent bool","title":"isPresent"},{"location":"fontlab.flPropertyDouble.html#isreleased","text":"fontlab.flPropertyDouble.isReleased bool","title":"isReleased"},{"location":"fontlab.flPropertyDouble.html#isvalid","text":"fontlab.flPropertyDouble.isValid bool","title":"isValid"},{"location":"fontlab.flPropertyDouble.html#name","text":"fontlab.flPropertyDouble.name object name","title":"name"},{"location":"fontlab.flPropertyDouble.html#refcnt","text":"fontlab.flPropertyDouble.refCnt object references count","title":"refCnt"},{"location":"fontlab.flPropertyDouble.html#release","text":"fontlab.flPropertyDouble.release = release (...) release()","title":"release"},{"location":"fontlab.flPropertyDouble.html#remove","text":"fontlab.flPropertyDouble.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flPropertyDouble.html#removechild","text":"fontlab.flPropertyDouble.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flPropertyDouble.html#removeproperty","text":"fontlab.flPropertyDouble.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flPropertyDouble.html#restorehistorystate","text":"fontlab.flPropertyDouble.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flPropertyDouble.html#setflag","text":"fontlab.flPropertyDouble.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flPropertyDouble.html#setproperty","text":"fontlab.flPropertyDouble.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flPropertyDouble.html#setpropertyfloat","text":"fontlab.flPropertyDouble.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flPropertyDouble.html#setpropertyint","text":"fontlab.flPropertyDouble.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flPropertyDouble.html#tag","text":"fontlab.flPropertyDouble.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flPropertyDouble.html#type","text":"fontlab.flPropertyDouble.type object type","title":"type"},{"location":"fontlab.flPropertyDouble.html#update","text":"fontlab.flPropertyDouble.update = update (...) update()","title":"update"},{"location":"fontlab.flPropertyDouble.html#value","text":"fontlab.flPropertyDouble.value double","title":"value"},{"location":"fontlab.flPropertyPoint.html","text":"flPropertyPoint fontlab.flPropertyPoint = class flPropertyPoint ( object ) flPropertyPoint representation Constructors: Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasExpression (...) bool hasExpression () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors expressionX expressionY hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name paramType ParameterType point QPointF refCnt object references count type object type Attributes ParameterType = {'HorzLine': 0, 'Point': 2, 'VertLine': 1} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flPropertyPoint.changed = changed (...) changed() checkInitHistoryState fontlab.flPropertyPoint.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flPropertyPoint.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flPropertyPoint.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flPropertyPoint.clearFlags = clearFlags (...) clearFlags() clone fontlab.flPropertyPoint.clone = clone (...) Clone the object cloneObject fontlab.flPropertyPoint.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flPropertyPoint.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flPropertyPoint.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flPropertyPoint.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flPropertyPoint.flag = flag (...) flag(uint f) flObjectFlags fontlab.flPropertyPoint.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flPropertyPoint.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flPropertyPoint.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flPropertyPoint.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flPropertyPoint.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flPropertyPoint.hasChanges bool hasExpression fontlab.flPropertyPoint.hasExpression = hasExpression (...) bool hasExpression() hasHistoryState fontlab.flPropertyPoint.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flPropertyPoint.hasHistoryStates bool haveObject fontlab.flPropertyPoint.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flPropertyPoint.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flPropertyPoint.id object id independedAll fontlab.flPropertyPoint.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flPropertyPoint.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flPropertyPoint.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flPropertyPoint.isChanged bool isEqual fontlab.flPropertyPoint.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flPropertyPoint.isNull bool isPresent fontlab.flPropertyPoint.isPresent bool isReleased fontlab.flPropertyPoint.isReleased bool isValid fontlab.flPropertyPoint.isValid bool name fontlab.flPropertyPoint.name object name ParameterType fontlab.flPropertyPoint.ParameterType = {'HorzLine': 0, 'Point': 2, 'VertLine': 1} paramType fontlab.flPropertyPoint.paramType ParameterType point fontlab.flPropertyPoint.point QPointF refCnt fontlab.flPropertyPoint.refCnt object references count release fontlab.flPropertyPoint.release = release (...) release() remove fontlab.flPropertyPoint.remove = remove (...) remove([flObject]) removeChild fontlab.flPropertyPoint.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flPropertyPoint.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flPropertyPoint.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flPropertyPoint.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flPropertyPoint.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flPropertyPoint.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flPropertyPoint.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flPropertyPoint.tag = tag (...) tag([string]) type fontlab.flPropertyPoint.type object type update fontlab.flPropertyPoint.update = update (...) update()","title":"flPropertyPoint"},{"location":"fontlab.flPropertyPoint.html#flpropertypoint","text":"","title":"flPropertyPoint"},{"location":"fontlab.flPropertyPoint.html#changed","text":"fontlab.flPropertyPoint.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flPropertyPoint.html#checkinithistorystate","text":"fontlab.flPropertyPoint.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flPropertyPoint.html#clearabovehistory","text":"fontlab.flPropertyPoint.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flPropertyPoint.html#clearflag","text":"fontlab.flPropertyPoint.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flPropertyPoint.html#clearflags","text":"fontlab.flPropertyPoint.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flPropertyPoint.html#clone","text":"fontlab.flPropertyPoint.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flPropertyPoint.html#cloneobject","text":"fontlab.flPropertyPoint.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flPropertyPoint.html#createhistorystate","text":"fontlab.flPropertyPoint.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flPropertyPoint.html#createobject","text":"fontlab.flPropertyPoint.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flPropertyPoint.html#currenthistorystate","text":"fontlab.flPropertyPoint.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flPropertyPoint.html#flag","text":"fontlab.flPropertyPoint.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flPropertyPoint.html#flobjectflags","text":"fontlab.flPropertyPoint.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flPropertyPoint.html#getproperties","text":"fontlab.flPropertyPoint.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flPropertyPoint.html#getproperty","text":"fontlab.flPropertyPoint.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flPropertyPoint.html#getpropertyfloat","text":"fontlab.flPropertyPoint.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flPropertyPoint.html#getpropertyint","text":"fontlab.flPropertyPoint.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flPropertyPoint.html#haschanges","text":"fontlab.flPropertyPoint.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flPropertyPoint.html#hasexpression","text":"fontlab.flPropertyPoint.hasExpression = hasExpression (...) bool hasExpression()","title":"hasExpression"},{"location":"fontlab.flPropertyPoint.html#hashistorystate","text":"fontlab.flPropertyPoint.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flPropertyPoint.html#hashistorystates","text":"fontlab.flPropertyPoint.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flPropertyPoint.html#haveobject","text":"fontlab.flPropertyPoint.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flPropertyPoint.html#historystates","text":"fontlab.flPropertyPoint.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flPropertyPoint.html#id","text":"fontlab.flPropertyPoint.id object id","title":"id"},{"location":"fontlab.flPropertyPoint.html#independedall","text":"fontlab.flPropertyPoint.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flPropertyPoint.html#initialhistorystate","text":"fontlab.flPropertyPoint.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flPropertyPoint.html#instancetype","text":"fontlab.flPropertyPoint.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flPropertyPoint.html#ischanged","text":"fontlab.flPropertyPoint.isChanged bool","title":"isChanged"},{"location":"fontlab.flPropertyPoint.html#isequal","text":"fontlab.flPropertyPoint.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flPropertyPoint.html#isnull","text":"fontlab.flPropertyPoint.isNull bool","title":"isNull"},{"location":"fontlab.flPropertyPoint.html#ispresent","text":"fontlab.flPropertyPoint.isPresent bool","title":"isPresent"},{"location":"fontlab.flPropertyPoint.html#isreleased","text":"fontlab.flPropertyPoint.isReleased bool","title":"isReleased"},{"location":"fontlab.flPropertyPoint.html#isvalid","text":"fontlab.flPropertyPoint.isValid bool","title":"isValid"},{"location":"fontlab.flPropertyPoint.html#name","text":"fontlab.flPropertyPoint.name object name","title":"name"},{"location":"fontlab.flPropertyPoint.html#parametertype","text":"fontlab.flPropertyPoint.ParameterType = {'HorzLine': 0, 'Point': 2, 'VertLine': 1}","title":"ParameterType"},{"location":"fontlab.flPropertyPoint.html#paramtype","text":"fontlab.flPropertyPoint.paramType ParameterType","title":"paramType"},{"location":"fontlab.flPropertyPoint.html#point","text":"fontlab.flPropertyPoint.point QPointF","title":"point"},{"location":"fontlab.flPropertyPoint.html#refcnt","text":"fontlab.flPropertyPoint.refCnt object references count","title":"refCnt"},{"location":"fontlab.flPropertyPoint.html#release","text":"fontlab.flPropertyPoint.release = release (...) release()","title":"release"},{"location":"fontlab.flPropertyPoint.html#remove","text":"fontlab.flPropertyPoint.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flPropertyPoint.html#removechild","text":"fontlab.flPropertyPoint.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flPropertyPoint.html#removeproperty","text":"fontlab.flPropertyPoint.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flPropertyPoint.html#restorehistorystate","text":"fontlab.flPropertyPoint.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flPropertyPoint.html#setflag","text":"fontlab.flPropertyPoint.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flPropertyPoint.html#setproperty","text":"fontlab.flPropertyPoint.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flPropertyPoint.html#setpropertyfloat","text":"fontlab.flPropertyPoint.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flPropertyPoint.html#setpropertyint","text":"fontlab.flPropertyPoint.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flPropertyPoint.html#tag","text":"fontlab.flPropertyPoint.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flPropertyPoint.html#type","text":"fontlab.flPropertyPoint.type object type","title":"type"},{"location":"fontlab.flPropertyPoint.html#update","text":"fontlab.flPropertyPoint.update = update (...) update()","title":"update"},{"location":"fontlab.flSearchInfo.html","text":"flSearchInfo fontlab.flSearchInfo = class flSearchInfo ( object ) flSearchInfo representation Constructors: flSearchInfo() flSearchInfo(flObject) flSearchInfo(flSearchInfo) flSearchInfo(QTransform) flSearchInfo(QTransform, flObject glyph_info) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count transform transform matrix type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flSearchInfo.changed = changed (...) changed() checkInitHistoryState fontlab.flSearchInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flSearchInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flSearchInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flSearchInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flSearchInfo.clone = clone (...) Clone the object cloneObject fontlab.flSearchInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); combine fontlab.flSearchInfo.combine = combine (...) combine(QTransform transform) createHistoryState fontlab.flSearchInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flSearchInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flSearchInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() dist fontlab.flSearchInfo.dist double dist flag fontlab.flSearchInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flSearchInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flSearchInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flSearchInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flSearchInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flSearchInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' glyphInfo fontlab.flSearchInfo.glyphInfo flObject - glyph info hasChanges fontlab.flSearchInfo.hasChanges bool hasHistoryState fontlab.flSearchInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flSearchInfo.hasHistoryStates bool haveObject fontlab.flSearchInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flSearchInfo.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flSearchInfo.id object id independedAll fontlab.flSearchInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flSearchInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flSearchInfo.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flSearchInfo.isChanged bool isEqual fontlab.flSearchInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flSearchInfo.isNull bool isPresent fontlab.flSearchInfo.isPresent bool isReleased fontlab.flSearchInfo.isReleased bool isValid fontlab.flSearchInfo.isValid bool name fontlab.flSearchInfo.name object name refCnt fontlab.flSearchInfo.refCnt object references count release fontlab.flSearchInfo.release = release (...) release() remove fontlab.flSearchInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flSearchInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flSearchInfo.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flSearchInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flSearchInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flSearchInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flSearchInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flSearchInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flSearchInfo.tag = tag (...) tag([string]) transform fontlab.flSearchInfo.transform transform matrix type fontlab.flSearchInfo.type object type update fontlab.flSearchInfo.update = update (...) update()","title":"flSearchInfo"},{"location":"fontlab.flSearchInfo.html#flsearchinfo","text":"","title":"flSearchInfo"},{"location":"fontlab.flSearchInfo.html#changed","text":"fontlab.flSearchInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flSearchInfo.html#checkinithistorystate","text":"fontlab.flSearchInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flSearchInfo.html#clearabovehistory","text":"fontlab.flSearchInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flSearchInfo.html#clearflag","text":"fontlab.flSearchInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flSearchInfo.html#clearflags","text":"fontlab.flSearchInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flSearchInfo.html#clone","text":"fontlab.flSearchInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flSearchInfo.html#cloneobject","text":"fontlab.flSearchInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flSearchInfo.html#combine","text":"fontlab.flSearchInfo.combine = combine (...) combine(QTransform transform)","title":"combine"},{"location":"fontlab.flSearchInfo.html#createhistorystate","text":"fontlab.flSearchInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flSearchInfo.html#createobject","text":"fontlab.flSearchInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flSearchInfo.html#currenthistorystate","text":"fontlab.flSearchInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flSearchInfo.html#dist","text":"fontlab.flSearchInfo.dist double dist","title":"dist"},{"location":"fontlab.flSearchInfo.html#flag","text":"fontlab.flSearchInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flSearchInfo.html#flobjectflags","text":"fontlab.flSearchInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flSearchInfo.html#getproperties","text":"fontlab.flSearchInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flSearchInfo.html#getproperty","text":"fontlab.flSearchInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flSearchInfo.html#getpropertyfloat","text":"fontlab.flSearchInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flSearchInfo.html#getpropertyint","text":"fontlab.flSearchInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flSearchInfo.html#glyphinfo","text":"fontlab.flSearchInfo.glyphInfo flObject - glyph info","title":"glyphInfo"},{"location":"fontlab.flSearchInfo.html#haschanges","text":"fontlab.flSearchInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flSearchInfo.html#hashistorystate","text":"fontlab.flSearchInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flSearchInfo.html#hashistorystates","text":"fontlab.flSearchInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flSearchInfo.html#haveobject","text":"fontlab.flSearchInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flSearchInfo.html#historystates","text":"fontlab.flSearchInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flSearchInfo.html#id","text":"fontlab.flSearchInfo.id object id","title":"id"},{"location":"fontlab.flSearchInfo.html#independedall","text":"fontlab.flSearchInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flSearchInfo.html#initialhistorystate","text":"fontlab.flSearchInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flSearchInfo.html#instancetype","text":"fontlab.flSearchInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flSearchInfo.html#ischanged","text":"fontlab.flSearchInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flSearchInfo.html#isequal","text":"fontlab.flSearchInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flSearchInfo.html#isnull","text":"fontlab.flSearchInfo.isNull bool","title":"isNull"},{"location":"fontlab.flSearchInfo.html#ispresent","text":"fontlab.flSearchInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flSearchInfo.html#isreleased","text":"fontlab.flSearchInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flSearchInfo.html#isvalid","text":"fontlab.flSearchInfo.isValid bool","title":"isValid"},{"location":"fontlab.flSearchInfo.html#name","text":"fontlab.flSearchInfo.name object name","title":"name"},{"location":"fontlab.flSearchInfo.html#refcnt","text":"fontlab.flSearchInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flSearchInfo.html#release","text":"fontlab.flSearchInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flSearchInfo.html#remove","text":"fontlab.flSearchInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flSearchInfo.html#removechild","text":"fontlab.flSearchInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flSearchInfo.html#removeproperty","text":"fontlab.flSearchInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flSearchInfo.html#restorehistorystate","text":"fontlab.flSearchInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flSearchInfo.html#setflag","text":"fontlab.flSearchInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flSearchInfo.html#setproperty","text":"fontlab.flSearchInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flSearchInfo.html#setpropertyfloat","text":"fontlab.flSearchInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flSearchInfo.html#setpropertyint","text":"fontlab.flSearchInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flSearchInfo.html#tag","text":"fontlab.flSearchInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flSearchInfo.html#transform","text":"fontlab.flSearchInfo.transform transform matrix","title":"transform"},{"location":"fontlab.flSearchInfo.html#type","text":"fontlab.flSearchInfo.type object type","title":"type"},{"location":"fontlab.flSearchInfo.html#update","text":"fontlab.flSearchInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flShape.html","text":"flShape fontlab.flShape = class flShape ( object ) flShape representation Constructors: flShape() flShape(flObject) flShape(flShapeData) flShape(flSticker) flShape(QImage) flShape(fgShape) flShape(flShapeBuilder) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value activateBuilder (...) activateBuilder () addContour (...) addContour (flContour) addContours (...) addContours (list(flContour)) appendAnchor (...) appendAnchor (flAnchor) | void appendAnchor (flNode node, flObject guideline) applyTransform (...) applyTransform ([QTransform transform]) assign (...) assign (fgShape) assignStyle (...) assignStyle (flShape) bindDependencies (...) bindDependencies () canUngroup (...) bool canUngroup () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearContours (...) clearContours () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object cloneTopLevel (...) flShape cloneTopLevel () contains (...) bool contains (QPointF) containsInInclude (...) bool containsInInclude (flShape | uint id) convertToFgShape (...) convertToFgShape (fgShape) copyToFgShape (...) copyToFgShape (fgShape) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() cutContour (...) (list(flContour) inner, list(flContour) outer)/Nothing cutContour (flContour, QTransform) decomposite (...) decomposite () eject (...) eject (flShape) ejectTo (...) list(flShape) ejectTo ([bool clone =true[, bool apply_tx =true]]) ensurePaths (...) ensurePaths () findNode (...) flNode findNode (QString) flag (...) flag (uint f) getActiveComposite (...) flShape/Nothing getActiveComposite () getActiveIncludeShape (...) flShape/Nothing getActiveIncludeShape () getAnchorForObject (...) flAnchor/Nothing getAnchorForObject (flObject) getAnchors (...) list(flAnchor)/Nothing getAnchors () getCompositesBounding (...) QRectF getCompositesBounding () getContours (...) list(flContour) getContours () getNodeAt (...) flNode/Nothing getNodeAt (int index, flNode::NodeType nodetype) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSelected (...) list(flContour)/Nothing getSelected (SelectionMode) getSquare (...) double getSquare () getTransformationPermissions (...) (bool enbl_horz, bool enbl_vert, bool enbl_rotation) getTransformationPermissions () hasHistoryState (...) hasHistoryState (uint history_ix) hasImage (...) bool hasImage (bool bitmap_only) hasSelected (...) bool hasSelected (SelectionMode) historyStates (...) historyStates (bool accepted_state) horzReflection (...) bool horzReflection () include (...) include (list(flShape) | flShape, [ flLayer remove_from]) includeTo (...) includeTo (int ix, flShape) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx = QTransform()]) isCompatible (...) bool isCompatible (flShape, bool strong) isEqual (...) isEqual (flObject) mergeTopComposite (...) mergeTopComposite () prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([flObject]) removeAnchor (...) removeAnchor (flAnchor) removeAnchorsForObject (...) removeAnchorsForObject (flObject) removeBackContour (...) removeBackContour () removeChild (...) removeChild (flObject) removeContour (...) removeContour (flContour) removeContours (...) removeContours (list(flContour)) removeProperty (...) removeProperty ('key') replaceInclude (...) replaceInclude (flShape old_shape, flShape new_shape) resetInkBox (...) resetInkBox () resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) selectAllData (...) selectAllData () setFlag (...) setFlag (uint f [, bool value]) setIncludes (...) setIncludes (list(flShape)) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setReflected (...) setReflected (bool, bool) simpleShape (...) bool simpleShape () tag (...) tag ([string]) unselectAllNodes (...) unselectAllNodes () update (...) update () vertReflection (...) bool vertReflection () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flShape createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isShape (...) bool isShape (flObject) Descriptors active bool allSelectedData bool boundingBox QRectF brush QBrush closedPath QPainterPath contentLocked bool contours list(flContour) contoursCount int excluded bool fl_transform flTransform hasBody bool hasChanges bool hasComponents bool hasContours bool hasGlobalAnchoring bool hasHistoryStates bool hasPath bool hasSmartAngle bool haveActiveShape bool haveClosed bool haveData bool haveUnclosed bool id object id image QImage imagePtr QImage * includesList list(flShape) isChanged bool isComponent bool isComposite bool isEmpty bool isNull bool isPresent bool isReleased bool isUnbindedDependencies bool isUniform bool isValid bool name object name opacity double openedPath QPainterPath pen QPen refCnt object references count selected bool shapeBuilder flShapeBuilder shapeData flShapeData shapeType ShapeType sticker flSticker transform transform type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activateBuilder fontlab.flShape.activateBuilder = activateBuilder (...) activateBuilder() active fontlab.flShape.active bool addContour fontlab.flShape.addContour = addContour (...) addContour(flContour) addContours fontlab.flShape.addContours = addContours (...) addContours(list(flContour)) allSelectedData fontlab.flShape.allSelectedData bool appendAnchor fontlab.flShape.appendAnchor = appendAnchor (...) appendAnchor(flAnchor) | void appendAnchor(flNode node, flObject guideline) applyTransform fontlab.flShape.applyTransform = applyTransform (...) applyTransform([QTransform transform]) assign fontlab.flShape.assign = assign (...) assign(fgShape) assignStyle fontlab.flShape.assignStyle = assignStyle (...) assignStyle(flShape) bindDependencies fontlab.flShape.bindDependencies = bindDependencies (...) bindDependencies() boundingBox fontlab.flShape.boundingBox QRectF brush fontlab.flShape.brush QBrush canUngroup fontlab.flShape.canUngroup = canUngroup (...) bool canUngroup() changed fontlab.flShape.changed = changed (...) changed() checkInitHistoryState fontlab.flShape.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flShape.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearContours fontlab.flShape.clearContours = clearContours (...) clearContours() clearFlag fontlab.flShape.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flShape.clearFlags = clearFlags (...) clearFlags() clone fontlab.flShape.clone = clone (...) Clone the object cloneObject fontlab.flShape.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); cloneTopLevel fontlab.flShape.cloneTopLevel = cloneTopLevel (...) flShape cloneTopLevel() closedPath fontlab.flShape.closedPath QPainterPath contains fontlab.flShape.contains = contains (...) bool contains(QPointF) containsInInclude fontlab.flShape.containsInInclude = containsInInclude (...) bool containsInInclude(flShape | uint id) contentLocked fontlab.flShape.contentLocked bool contours fontlab.flShape.contours list(flContour) contoursCount fontlab.flShape.contoursCount int convertToFgShape fontlab.flShape.convertToFgShape = convertToFgShape (...) convertToFgShape(fgShape) copyToFgShape fontlab.flShape.copyToFgShape = copyToFgShape (...) copyToFgShape(fgShape) createHistoryState fontlab.flShape.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flShape.createInstance = createInstance (...) flShape createInstance() createObject fontlab.flShape.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flShape.currentHistoryState = currentHistoryState (...) currentHistoryIx() cutContour fontlab.flShape.cutContour = cutContour (...) (list(flContour) inner, list(flContour) outer)/Nothing cutContour(flContour, QTransform) decomposite fontlab.flShape.decomposite = decomposite (...) decomposite() eject fontlab.flShape.eject = eject (...) eject(flShape) ejectTo fontlab.flShape.ejectTo = ejectTo (...) list(flShape) ejectTo([bool clone =true[, bool apply_tx =true]]) ensurePaths fontlab.flShape.ensurePaths = ensurePaths (...) ensurePaths() excluded fontlab.flShape.excluded bool findNode fontlab.flShape.findNode = findNode (...) flNode findNode(QString) fl_transform fontlab.flShape.fl_transform flTransform flag fontlab.flShape.flag = flag (...) flag(uint f) flObjectFlags fontlab.flShape.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getActiveComposite fontlab.flShape.getActiveComposite = getActiveComposite (...) flShape/Nothing getActiveComposite() getActiveIncludeShape fontlab.flShape.getActiveIncludeShape = getActiveIncludeShape (...) flShape/Nothing getActiveIncludeShape() getAnchorForObject fontlab.flShape.getAnchorForObject = getAnchorForObject (...) flAnchor/Nothing getAnchorForObject(flObject) getAnchors fontlab.flShape.getAnchors = getAnchors (...) list(flAnchor)/Nothing getAnchors() getCompositesBounding fontlab.flShape.getCompositesBounding = getCompositesBounding (...) QRectF getCompositesBounding() getContours fontlab.flShape.getContours = getContours (...) list(flContour) getContours() getNodeAt fontlab.flShape.getNodeAt = getNodeAt (...) flNode/Nothing getNodeAt(int index, flNode::NodeType nodetype) getProperties fontlab.flShape.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flShape.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flShape.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flShape.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getSelected fontlab.flShape.getSelected = getSelected (...) list(flContour)/Nothing getSelected(SelectionMode) getSquare fontlab.flShape.getSquare = getSquare (...) double getSquare() getTransformationPermissions fontlab.flShape.getTransformationPermissions = getTransformationPermissions (...) (bool enbl_horz, bool enbl_vert, bool enbl_rotation) getTransformationPermissions() hasBody fontlab.flShape.hasBody bool hasChanges fontlab.flShape.hasChanges bool hasComponents fontlab.flShape.hasComponents bool hasContours fontlab.flShape.hasContours bool hasGlobalAnchoring fontlab.flShape.hasGlobalAnchoring bool hasHistoryState fontlab.flShape.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flShape.hasHistoryStates bool hasImage fontlab.flShape.hasImage = hasImage (...) bool hasImage(bool bitmap_only) hasPath fontlab.flShape.hasPath bool hasSelected fontlab.flShape.hasSelected = hasSelected (...) bool hasSelected(SelectionMode) hasSmartAngle fontlab.flShape.hasSmartAngle bool haveActiveShape fontlab.flShape.haveActiveShape bool haveClosed fontlab.flShape.haveClosed bool haveData fontlab.flShape.haveData bool haveObject fontlab.flShape.haveObject = haveObject (...) bool haveObject(uint); haveUnclosed fontlab.flShape.haveUnclosed bool historyStates fontlab.flShape.historyStates = historyStates (...) historyStates(bool accepted_state) horzReflection fontlab.flShape.horzReflection = horzReflection (...) bool horzReflection() id fontlab.flShape.id object id image fontlab.flShape.image QImage imagePtr fontlab.flShape.imagePtr QImage * include fontlab.flShape.include = include (...) include(list(flShape) | flShape, [ flLayer remove_from]) includesList fontlab.flShape.includesList list(flShape) includeTo fontlab.flShape.includeTo = includeTo (...) includeTo(int ix, flShape) independedAll fontlab.flShape.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flShape.initialHistoryState = initialHistoryState (...) initialHistoryIx() inkBox fontlab.flShape.inkBox = inkBox (...) QRectF inkBox([QTransform tx = QTransform()]) instanceType fontlab.flShape.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flShape.isChanged bool isCompatible fontlab.flShape.isCompatible = isCompatible (...) bool isCompatible(flShape, bool strong) isComponent fontlab.flShape.isComponent bool isComposite fontlab.flShape.isComposite bool isEmpty fontlab.flShape.isEmpty bool isEqual fontlab.flShape.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flShape.isNull bool isPresent fontlab.flShape.isPresent bool isReleased fontlab.flShape.isReleased bool isShape fontlab.flShape.isShape = isShape (...) bool isShape(flObject) isUnbindedDependencies fontlab.flShape.isUnbindedDependencies bool isUniform fontlab.flShape.isUniform bool isValid fontlab.flShape.isValid bool mergeTopComposite fontlab.flShape.mergeTopComposite = mergeTopComposite (...) mergeTopComposite() name fontlab.flShape.name object name opacity fontlab.flShape.opacity double openedPath fontlab.flShape.openedPath QPainterPath pen fontlab.flShape.pen QPen prepareTransformationData fontlab.flShape.prepareTransformationData = prepareTransformationData (...) prepareTransformationData() refCnt fontlab.flShape.refCnt object references count release fontlab.flShape.release = release (...) release() remove fontlab.flShape.remove = remove (...) remove([flObject]) removeAnchor fontlab.flShape.removeAnchor = removeAnchor (...) removeAnchor(flAnchor) removeAnchorsForObject fontlab.flShape.removeAnchorsForObject = removeAnchorsForObject (...) removeAnchorsForObject(flObject) removeBackContour fontlab.flShape.removeBackContour = removeBackContour (...) removeBackContour() removeChild fontlab.flShape.removeChild = removeChild (...) removeChild(flObject) removeContour fontlab.flShape.removeContour = removeContour (...) removeContour(flContour) removeContours fontlab.flShape.removeContours = removeContours (...) removeContours(list(flContour)) removeProperty fontlab.flShape.removeProperty = removeProperty (...) removeProperty('key') replaceInclude fontlab.flShape.replaceInclude = replaceInclude (...) replaceInclude(flShape old_shape, flShape new_shape) resetInkBox fontlab.flShape.resetInkBox = resetInkBox (...) resetInkBox() resetTransformationData fontlab.flShape.resetTransformationData = resetTransformationData (...) resetTransformationData() restoreHistoryState fontlab.flShape.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) selectAllData fontlab.flShape.selectAllData = selectAllData (...) selectAllData() selected fontlab.flShape.selected bool setFlag fontlab.flShape.setFlag = setFlag (...) setFlag(uint f [, bool value]) setIncludes fontlab.flShape.setIncludes = setIncludes (...) setIncludes(list(flShape)) setProperty fontlab.flShape.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flShape.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flShape.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setReflected fontlab.flShape.setReflected = setReflected (...) setReflected(bool, bool) shapeBuilder fontlab.flShape.shapeBuilder flShapeBuilder shapeData fontlab.flShape.shapeData flShapeData shapeType fontlab.flShape.shapeType ShapeType simpleShape fontlab.flShape.simpleShape = simpleShape (...) bool simpleShape() sticker fontlab.flShape.sticker flSticker tag fontlab.flShape.tag = tag (...) tag([string]) transform fontlab.flShape.transform transform type fontlab.flShape.type object type unselectAllNodes fontlab.flShape.unselectAllNodes = unselectAllNodes (...) unselectAllNodes() update fontlab.flShape.update = update (...) update() vertReflection fontlab.flShape.vertReflection = vertReflection (...) bool vertReflection()","title":"flShape"},{"location":"fontlab.flShape.html#flshape","text":"","title":"flShape"},{"location":"fontlab.flShape.html#activatebuilder","text":"fontlab.flShape.activateBuilder = activateBuilder (...) activateBuilder()","title":"activateBuilder"},{"location":"fontlab.flShape.html#active","text":"fontlab.flShape.active bool","title":"active"},{"location":"fontlab.flShape.html#addcontour","text":"fontlab.flShape.addContour = addContour (...) addContour(flContour)","title":"addContour"},{"location":"fontlab.flShape.html#addcontours","text":"fontlab.flShape.addContours = addContours (...) addContours(list(flContour))","title":"addContours"},{"location":"fontlab.flShape.html#allselecteddata","text":"fontlab.flShape.allSelectedData bool","title":"allSelectedData"},{"location":"fontlab.flShape.html#appendanchor","text":"fontlab.flShape.appendAnchor = appendAnchor (...) appendAnchor(flAnchor) | void appendAnchor(flNode node, flObject guideline)","title":"appendAnchor"},{"location":"fontlab.flShape.html#applytransform","text":"fontlab.flShape.applyTransform = applyTransform (...) applyTransform([QTransform transform])","title":"applyTransform"},{"location":"fontlab.flShape.html#assign","text":"fontlab.flShape.assign = assign (...) assign(fgShape)","title":"assign"},{"location":"fontlab.flShape.html#assignstyle","text":"fontlab.flShape.assignStyle = assignStyle (...) assignStyle(flShape)","title":"assignStyle"},{"location":"fontlab.flShape.html#binddependencies","text":"fontlab.flShape.bindDependencies = bindDependencies (...) bindDependencies()","title":"bindDependencies"},{"location":"fontlab.flShape.html#boundingbox","text":"fontlab.flShape.boundingBox QRectF","title":"boundingBox"},{"location":"fontlab.flShape.html#brush","text":"fontlab.flShape.brush QBrush","title":"brush"},{"location":"fontlab.flShape.html#canungroup","text":"fontlab.flShape.canUngroup = canUngroup (...) bool canUngroup()","title":"canUngroup"},{"location":"fontlab.flShape.html#changed","text":"fontlab.flShape.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flShape.html#checkinithistorystate","text":"fontlab.flShape.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flShape.html#clearabovehistory","text":"fontlab.flShape.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flShape.html#clearcontours","text":"fontlab.flShape.clearContours = clearContours (...) clearContours()","title":"clearContours"},{"location":"fontlab.flShape.html#clearflag","text":"fontlab.flShape.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flShape.html#clearflags","text":"fontlab.flShape.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flShape.html#clone","text":"fontlab.flShape.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flShape.html#cloneobject","text":"fontlab.flShape.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flShape.html#clonetoplevel","text":"fontlab.flShape.cloneTopLevel = cloneTopLevel (...) flShape cloneTopLevel()","title":"cloneTopLevel"},{"location":"fontlab.flShape.html#closedpath","text":"fontlab.flShape.closedPath QPainterPath","title":"closedPath"},{"location":"fontlab.flShape.html#contains","text":"fontlab.flShape.contains = contains (...) bool contains(QPointF)","title":"contains"},{"location":"fontlab.flShape.html#containsininclude","text":"fontlab.flShape.containsInInclude = containsInInclude (...) bool containsInInclude(flShape | uint id)","title":"containsInInclude"},{"location":"fontlab.flShape.html#contentlocked","text":"fontlab.flShape.contentLocked bool","title":"contentLocked"},{"location":"fontlab.flShape.html#contours","text":"fontlab.flShape.contours list(flContour)","title":"contours"},{"location":"fontlab.flShape.html#contourscount","text":"fontlab.flShape.contoursCount int","title":"contoursCount"},{"location":"fontlab.flShape.html#converttofgshape","text":"fontlab.flShape.convertToFgShape = convertToFgShape (...) convertToFgShape(fgShape)","title":"convertToFgShape"},{"location":"fontlab.flShape.html#copytofgshape","text":"fontlab.flShape.copyToFgShape = copyToFgShape (...) copyToFgShape(fgShape)","title":"copyToFgShape"},{"location":"fontlab.flShape.html#createhistorystate","text":"fontlab.flShape.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flShape.html#createinstance","text":"fontlab.flShape.createInstance = createInstance (...) flShape createInstance()","title":"createInstance"},{"location":"fontlab.flShape.html#createobject","text":"fontlab.flShape.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flShape.html#currenthistorystate","text":"fontlab.flShape.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flShape.html#cutcontour","text":"fontlab.flShape.cutContour = cutContour (...) (list(flContour) inner, list(flContour) outer)/Nothing cutContour(flContour, QTransform)","title":"cutContour"},{"location":"fontlab.flShape.html#decomposite","text":"fontlab.flShape.decomposite = decomposite (...) decomposite()","title":"decomposite"},{"location":"fontlab.flShape.html#eject","text":"fontlab.flShape.eject = eject (...) eject(flShape)","title":"eject"},{"location":"fontlab.flShape.html#ejectto","text":"fontlab.flShape.ejectTo = ejectTo (...) list(flShape) ejectTo([bool clone =true[, bool apply_tx =true]])","title":"ejectTo"},{"location":"fontlab.flShape.html#ensurepaths","text":"fontlab.flShape.ensurePaths = ensurePaths (...) ensurePaths()","title":"ensurePaths"},{"location":"fontlab.flShape.html#excluded","text":"fontlab.flShape.excluded bool","title":"excluded"},{"location":"fontlab.flShape.html#findnode","text":"fontlab.flShape.findNode = findNode (...) flNode findNode(QString)","title":"findNode"},{"location":"fontlab.flShape.html#fl_transform","text":"fontlab.flShape.fl_transform flTransform","title":"fl_transform"},{"location":"fontlab.flShape.html#flag","text":"fontlab.flShape.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flShape.html#flobjectflags","text":"fontlab.flShape.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flShape.html#getactivecomposite","text":"fontlab.flShape.getActiveComposite = getActiveComposite (...) flShape/Nothing getActiveComposite()","title":"getActiveComposite"},{"location":"fontlab.flShape.html#getactiveincludeshape","text":"fontlab.flShape.getActiveIncludeShape = getActiveIncludeShape (...) flShape/Nothing getActiveIncludeShape()","title":"getActiveIncludeShape"},{"location":"fontlab.flShape.html#getanchorforobject","text":"fontlab.flShape.getAnchorForObject = getAnchorForObject (...) flAnchor/Nothing getAnchorForObject(flObject)","title":"getAnchorForObject"},{"location":"fontlab.flShape.html#getanchors","text":"fontlab.flShape.getAnchors = getAnchors (...) list(flAnchor)/Nothing getAnchors()","title":"getAnchors"},{"location":"fontlab.flShape.html#getcompositesbounding","text":"fontlab.flShape.getCompositesBounding = getCompositesBounding (...) QRectF getCompositesBounding()","title":"getCompositesBounding"},{"location":"fontlab.flShape.html#getcontours","text":"fontlab.flShape.getContours = getContours (...) list(flContour) getContours()","title":"getContours"},{"location":"fontlab.flShape.html#getnodeat","text":"fontlab.flShape.getNodeAt = getNodeAt (...) flNode/Nothing getNodeAt(int index, flNode::NodeType nodetype)","title":"getNodeAt"},{"location":"fontlab.flShape.html#getproperties","text":"fontlab.flShape.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flShape.html#getproperty","text":"fontlab.flShape.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flShape.html#getpropertyfloat","text":"fontlab.flShape.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flShape.html#getpropertyint","text":"fontlab.flShape.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flShape.html#getselected","text":"fontlab.flShape.getSelected = getSelected (...) list(flContour)/Nothing getSelected(SelectionMode)","title":"getSelected"},{"location":"fontlab.flShape.html#getsquare","text":"fontlab.flShape.getSquare = getSquare (...) double getSquare()","title":"getSquare"},{"location":"fontlab.flShape.html#gettransformationpermissions","text":"fontlab.flShape.getTransformationPermissions = getTransformationPermissions (...) (bool enbl_horz, bool enbl_vert, bool enbl_rotation) getTransformationPermissions()","title":"getTransformationPermissions"},{"location":"fontlab.flShape.html#hasbody","text":"fontlab.flShape.hasBody bool","title":"hasBody"},{"location":"fontlab.flShape.html#haschanges","text":"fontlab.flShape.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flShape.html#hascomponents","text":"fontlab.flShape.hasComponents bool","title":"hasComponents"},{"location":"fontlab.flShape.html#hascontours","text":"fontlab.flShape.hasContours bool","title":"hasContours"},{"location":"fontlab.flShape.html#hasglobalanchoring","text":"fontlab.flShape.hasGlobalAnchoring bool","title":"hasGlobalAnchoring"},{"location":"fontlab.flShape.html#hashistorystate","text":"fontlab.flShape.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flShape.html#hashistorystates","text":"fontlab.flShape.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flShape.html#hasimage","text":"fontlab.flShape.hasImage = hasImage (...) bool hasImage(bool bitmap_only)","title":"hasImage"},{"location":"fontlab.flShape.html#haspath","text":"fontlab.flShape.hasPath bool","title":"hasPath"},{"location":"fontlab.flShape.html#hasselected","text":"fontlab.flShape.hasSelected = hasSelected (...) bool hasSelected(SelectionMode)","title":"hasSelected"},{"location":"fontlab.flShape.html#hassmartangle","text":"fontlab.flShape.hasSmartAngle bool","title":"hasSmartAngle"},{"location":"fontlab.flShape.html#haveactiveshape","text":"fontlab.flShape.haveActiveShape bool","title":"haveActiveShape"},{"location":"fontlab.flShape.html#haveclosed","text":"fontlab.flShape.haveClosed bool","title":"haveClosed"},{"location":"fontlab.flShape.html#havedata","text":"fontlab.flShape.haveData bool","title":"haveData"},{"location":"fontlab.flShape.html#haveobject","text":"fontlab.flShape.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flShape.html#haveunclosed","text":"fontlab.flShape.haveUnclosed bool","title":"haveUnclosed"},{"location":"fontlab.flShape.html#historystates","text":"fontlab.flShape.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flShape.html#horzreflection","text":"fontlab.flShape.horzReflection = horzReflection (...) bool horzReflection()","title":"horzReflection"},{"location":"fontlab.flShape.html#id","text":"fontlab.flShape.id object id","title":"id"},{"location":"fontlab.flShape.html#image","text":"fontlab.flShape.image QImage","title":"image"},{"location":"fontlab.flShape.html#imageptr","text":"fontlab.flShape.imagePtr QImage *","title":"imagePtr"},{"location":"fontlab.flShape.html#include","text":"fontlab.flShape.include = include (...) include(list(flShape) | flShape, [ flLayer remove_from])","title":"include"},{"location":"fontlab.flShape.html#includeslist","text":"fontlab.flShape.includesList list(flShape)","title":"includesList"},{"location":"fontlab.flShape.html#includeto","text":"fontlab.flShape.includeTo = includeTo (...) includeTo(int ix, flShape)","title":"includeTo"},{"location":"fontlab.flShape.html#independedall","text":"fontlab.flShape.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flShape.html#initialhistorystate","text":"fontlab.flShape.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flShape.html#inkbox","text":"fontlab.flShape.inkBox = inkBox (...) QRectF inkBox([QTransform tx = QTransform()])","title":"inkBox"},{"location":"fontlab.flShape.html#instancetype","text":"fontlab.flShape.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flShape.html#ischanged","text":"fontlab.flShape.isChanged bool","title":"isChanged"},{"location":"fontlab.flShape.html#iscompatible","text":"fontlab.flShape.isCompatible = isCompatible (...) bool isCompatible(flShape, bool strong)","title":"isCompatible"},{"location":"fontlab.flShape.html#iscomponent","text":"fontlab.flShape.isComponent bool","title":"isComponent"},{"location":"fontlab.flShape.html#iscomposite","text":"fontlab.flShape.isComposite bool","title":"isComposite"},{"location":"fontlab.flShape.html#isempty","text":"fontlab.flShape.isEmpty bool","title":"isEmpty"},{"location":"fontlab.flShape.html#isequal","text":"fontlab.flShape.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flShape.html#isnull","text":"fontlab.flShape.isNull bool","title":"isNull"},{"location":"fontlab.flShape.html#ispresent","text":"fontlab.flShape.isPresent bool","title":"isPresent"},{"location":"fontlab.flShape.html#isreleased","text":"fontlab.flShape.isReleased bool","title":"isReleased"},{"location":"fontlab.flShape.html#isshape","text":"fontlab.flShape.isShape = isShape (...) bool isShape(flObject)","title":"isShape"},{"location":"fontlab.flShape.html#isunbindeddependencies","text":"fontlab.flShape.isUnbindedDependencies bool","title":"isUnbindedDependencies"},{"location":"fontlab.flShape.html#isuniform","text":"fontlab.flShape.isUniform bool","title":"isUniform"},{"location":"fontlab.flShape.html#isvalid","text":"fontlab.flShape.isValid bool","title":"isValid"},{"location":"fontlab.flShape.html#mergetopcomposite","text":"fontlab.flShape.mergeTopComposite = mergeTopComposite (...) mergeTopComposite()","title":"mergeTopComposite"},{"location":"fontlab.flShape.html#name","text":"fontlab.flShape.name object name","title":"name"},{"location":"fontlab.flShape.html#opacity","text":"fontlab.flShape.opacity double","title":"opacity"},{"location":"fontlab.flShape.html#openedpath","text":"fontlab.flShape.openedPath QPainterPath","title":"openedPath"},{"location":"fontlab.flShape.html#pen","text":"fontlab.flShape.pen QPen","title":"pen"},{"location":"fontlab.flShape.html#preparetransformationdata","text":"fontlab.flShape.prepareTransformationData = prepareTransformationData (...) prepareTransformationData()","title":"prepareTransformationData"},{"location":"fontlab.flShape.html#refcnt","text":"fontlab.flShape.refCnt object references count","title":"refCnt"},{"location":"fontlab.flShape.html#release","text":"fontlab.flShape.release = release (...) release()","title":"release"},{"location":"fontlab.flShape.html#remove","text":"fontlab.flShape.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flShape.html#removeanchor","text":"fontlab.flShape.removeAnchor = removeAnchor (...) removeAnchor(flAnchor)","title":"removeAnchor"},{"location":"fontlab.flShape.html#removeanchorsforobject","text":"fontlab.flShape.removeAnchorsForObject = removeAnchorsForObject (...) removeAnchorsForObject(flObject)","title":"removeAnchorsForObject"},{"location":"fontlab.flShape.html#removebackcontour","text":"fontlab.flShape.removeBackContour = removeBackContour (...) removeBackContour()","title":"removeBackContour"},{"location":"fontlab.flShape.html#removechild","text":"fontlab.flShape.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flShape.html#removecontour","text":"fontlab.flShape.removeContour = removeContour (...) removeContour(flContour)","title":"removeContour"},{"location":"fontlab.flShape.html#removecontours","text":"fontlab.flShape.removeContours = removeContours (...) removeContours(list(flContour))","title":"removeContours"},{"location":"fontlab.flShape.html#removeproperty","text":"fontlab.flShape.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flShape.html#replaceinclude","text":"fontlab.flShape.replaceInclude = replaceInclude (...) replaceInclude(flShape old_shape, flShape new_shape)","title":"replaceInclude"},{"location":"fontlab.flShape.html#resetinkbox","text":"fontlab.flShape.resetInkBox = resetInkBox (...) resetInkBox()","title":"resetInkBox"},{"location":"fontlab.flShape.html#resettransformationdata","text":"fontlab.flShape.resetTransformationData = resetTransformationData (...) resetTransformationData()","title":"resetTransformationData"},{"location":"fontlab.flShape.html#restorehistorystate","text":"fontlab.flShape.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flShape.html#selectalldata","text":"fontlab.flShape.selectAllData = selectAllData (...) selectAllData()","title":"selectAllData"},{"location":"fontlab.flShape.html#selected","text":"fontlab.flShape.selected bool","title":"selected"},{"location":"fontlab.flShape.html#setflag","text":"fontlab.flShape.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flShape.html#setincludes","text":"fontlab.flShape.setIncludes = setIncludes (...) setIncludes(list(flShape))","title":"setIncludes"},{"location":"fontlab.flShape.html#setproperty","text":"fontlab.flShape.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flShape.html#setpropertyfloat","text":"fontlab.flShape.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flShape.html#setpropertyint","text":"fontlab.flShape.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flShape.html#setreflected","text":"fontlab.flShape.setReflected = setReflected (...) setReflected(bool, bool)","title":"setReflected"},{"location":"fontlab.flShape.html#shapebuilder","text":"fontlab.flShape.shapeBuilder flShapeBuilder","title":"shapeBuilder"},{"location":"fontlab.flShape.html#shapedata","text":"fontlab.flShape.shapeData flShapeData","title":"shapeData"},{"location":"fontlab.flShape.html#shapetype","text":"fontlab.flShape.shapeType ShapeType","title":"shapeType"},{"location":"fontlab.flShape.html#simpleshape","text":"fontlab.flShape.simpleShape = simpleShape (...) bool simpleShape()","title":"simpleShape"},{"location":"fontlab.flShape.html#sticker","text":"fontlab.flShape.sticker flSticker","title":"sticker"},{"location":"fontlab.flShape.html#tag","text":"fontlab.flShape.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flShape.html#transform","text":"fontlab.flShape.transform transform","title":"transform"},{"location":"fontlab.flShape.html#type","text":"fontlab.flShape.type object type","title":"type"},{"location":"fontlab.flShape.html#unselectallnodes","text":"fontlab.flShape.unselectAllNodes = unselectAllNodes (...) unselectAllNodes()","title":"unselectAllNodes"},{"location":"fontlab.flShape.html#update","text":"fontlab.flShape.update = update (...) update()","title":"update"},{"location":"fontlab.flShape.html#vertreflection","text":"fontlab.flShape.vertReflection = vertReflection (...) bool vertReflection()","title":"vertReflection"},{"location":"fontlab.flShapeBuilder.html","text":"flShapeBuilder fontlab.flShapeBuilder = class flShapeBuilder ( object ) flShapeBuilder representation Constructors: flShapeBuilder() flShapeBuilder(flShapeBuilder) flShapeBuilder(flObject) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivate (...) deactivate () flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSmartNodes (...) list(flNode)/Nothing getSmartNodes () hasFeature (...) bool hasFeature (BuilderFeatures) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () init (...) init () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) setDestShape (...) setDestShape (flShape) setDestShapeData (...) setDestShapeData (flShapeData) setFlag (...) setFlag (uint f [, bool value]) setOwnerLayer (...) setOwnerLayer (flObject) setOwnerShapeData (...) setOwnerShapeData (flObject) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors canUngroup bool canUngroup() hasChanges bool hasHistoryStates bool haveResult bool haveResult() id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count title QString title() type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} canUngroup fontlab.flShapeBuilder.canUngroup bool canUngroup() changed fontlab.flShapeBuilder.changed = changed (...) changed() checkInitHistoryState fontlab.flShapeBuilder.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flShapeBuilder.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flShapeBuilder.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flShapeBuilder.clearFlags = clearFlags (...) clearFlags() clone fontlab.flShapeBuilder.clone = clone (...) Clone the object cloneObject fontlab.flShapeBuilder.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flShapeBuilder.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flShapeBuilder.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flShapeBuilder.currentHistoryState = currentHistoryState (...) currentHistoryIx() deactivate fontlab.flShapeBuilder.deactivate = deactivate (...) deactivate() flag fontlab.flShapeBuilder.flag = flag (...) flag(uint f) flObjectFlags fontlab.flShapeBuilder.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flShapeBuilder.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flShapeBuilder.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flShapeBuilder.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flShapeBuilder.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getSmartNodes fontlab.flShapeBuilder.getSmartNodes = getSmartNodes (...) list(flNode)/Nothing getSmartNodes() hasChanges fontlab.flShapeBuilder.hasChanges bool hasFeature fontlab.flShapeBuilder.hasFeature = hasFeature (...) bool hasFeature(BuilderFeatures) hasHistoryState fontlab.flShapeBuilder.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flShapeBuilder.hasHistoryStates bool haveObject fontlab.flShapeBuilder.haveObject = haveObject (...) bool haveObject(uint); haveResult fontlab.flShapeBuilder.haveResult bool haveResult() historyStates fontlab.flShapeBuilder.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flShapeBuilder.id object id independedAll fontlab.flShapeBuilder.independedAll = independedAll (...) independedAll() init fontlab.flShapeBuilder.init = init (...) init() initialHistoryState fontlab.flShapeBuilder.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flShapeBuilder.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flShapeBuilder.isChanged bool isEqual fontlab.flShapeBuilder.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flShapeBuilder.isNull bool isPresent fontlab.flShapeBuilder.isPresent bool isReleased fontlab.flShapeBuilder.isReleased bool isValid fontlab.flShapeBuilder.isValid bool name fontlab.flShapeBuilder.name object name prepareTransformationData fontlab.flShapeBuilder.prepareTransformationData = prepareTransformationData (...) prepareTransformationData() refCnt fontlab.flShapeBuilder.refCnt object references count release fontlab.flShapeBuilder.release = release (...) release() remove fontlab.flShapeBuilder.remove = remove (...) remove([flObject]) removeChild fontlab.flShapeBuilder.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flShapeBuilder.removeProperty = removeProperty (...) removeProperty('key') resetTransformationData fontlab.flShapeBuilder.resetTransformationData = resetTransformationData (...) resetTransformationData() restoreHistoryState fontlab.flShapeBuilder.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setDestShape fontlab.flShapeBuilder.setDestShape = setDestShape (...) setDestShape(flShape) setDestShapeData fontlab.flShapeBuilder.setDestShapeData = setDestShapeData (...) setDestShapeData(flShapeData) setFlag fontlab.flShapeBuilder.setFlag = setFlag (...) setFlag(uint f [, bool value]) setOwnerLayer fontlab.flShapeBuilder.setOwnerLayer = setOwnerLayer (...) setOwnerLayer(flObject) setOwnerShapeData fontlab.flShapeBuilder.setOwnerShapeData = setOwnerShapeData (...) setOwnerShapeData(flObject) setProperty fontlab.flShapeBuilder.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flShapeBuilder.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flShapeBuilder.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flShapeBuilder.tag = tag (...) tag([string]) title fontlab.flShapeBuilder.title QString title() type fontlab.flShapeBuilder.type object type update fontlab.flShapeBuilder.update = update (...) update()","title":"flShapeBuilder"},{"location":"fontlab.flShapeBuilder.html#flshapebuilder","text":"","title":"flShapeBuilder"},{"location":"fontlab.flShapeBuilder.html#canungroup","text":"fontlab.flShapeBuilder.canUngroup bool canUngroup()","title":"canUngroup"},{"location":"fontlab.flShapeBuilder.html#changed","text":"fontlab.flShapeBuilder.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flShapeBuilder.html#checkinithistorystate","text":"fontlab.flShapeBuilder.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flShapeBuilder.html#clearabovehistory","text":"fontlab.flShapeBuilder.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flShapeBuilder.html#clearflag","text":"fontlab.flShapeBuilder.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flShapeBuilder.html#clearflags","text":"fontlab.flShapeBuilder.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flShapeBuilder.html#clone","text":"fontlab.flShapeBuilder.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flShapeBuilder.html#cloneobject","text":"fontlab.flShapeBuilder.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flShapeBuilder.html#createhistorystate","text":"fontlab.flShapeBuilder.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flShapeBuilder.html#createobject","text":"fontlab.flShapeBuilder.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flShapeBuilder.html#currenthistorystate","text":"fontlab.flShapeBuilder.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flShapeBuilder.html#deactivate","text":"fontlab.flShapeBuilder.deactivate = deactivate (...) deactivate()","title":"deactivate"},{"location":"fontlab.flShapeBuilder.html#flag","text":"fontlab.flShapeBuilder.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flShapeBuilder.html#flobjectflags","text":"fontlab.flShapeBuilder.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flShapeBuilder.html#getproperties","text":"fontlab.flShapeBuilder.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flShapeBuilder.html#getproperty","text":"fontlab.flShapeBuilder.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flShapeBuilder.html#getpropertyfloat","text":"fontlab.flShapeBuilder.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flShapeBuilder.html#getpropertyint","text":"fontlab.flShapeBuilder.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flShapeBuilder.html#getsmartnodes","text":"fontlab.flShapeBuilder.getSmartNodes = getSmartNodes (...) list(flNode)/Nothing getSmartNodes()","title":"getSmartNodes"},{"location":"fontlab.flShapeBuilder.html#haschanges","text":"fontlab.flShapeBuilder.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flShapeBuilder.html#hasfeature","text":"fontlab.flShapeBuilder.hasFeature = hasFeature (...) bool hasFeature(BuilderFeatures)","title":"hasFeature"},{"location":"fontlab.flShapeBuilder.html#hashistorystate","text":"fontlab.flShapeBuilder.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flShapeBuilder.html#hashistorystates","text":"fontlab.flShapeBuilder.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flShapeBuilder.html#haveobject","text":"fontlab.flShapeBuilder.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flShapeBuilder.html#haveresult","text":"fontlab.flShapeBuilder.haveResult bool haveResult()","title":"haveResult"},{"location":"fontlab.flShapeBuilder.html#historystates","text":"fontlab.flShapeBuilder.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flShapeBuilder.html#id","text":"fontlab.flShapeBuilder.id object id","title":"id"},{"location":"fontlab.flShapeBuilder.html#independedall","text":"fontlab.flShapeBuilder.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flShapeBuilder.html#init","text":"fontlab.flShapeBuilder.init = init (...) init()","title":"init"},{"location":"fontlab.flShapeBuilder.html#initialhistorystate","text":"fontlab.flShapeBuilder.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flShapeBuilder.html#instancetype","text":"fontlab.flShapeBuilder.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flShapeBuilder.html#ischanged","text":"fontlab.flShapeBuilder.isChanged bool","title":"isChanged"},{"location":"fontlab.flShapeBuilder.html#isequal","text":"fontlab.flShapeBuilder.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flShapeBuilder.html#isnull","text":"fontlab.flShapeBuilder.isNull bool","title":"isNull"},{"location":"fontlab.flShapeBuilder.html#ispresent","text":"fontlab.flShapeBuilder.isPresent bool","title":"isPresent"},{"location":"fontlab.flShapeBuilder.html#isreleased","text":"fontlab.flShapeBuilder.isReleased bool","title":"isReleased"},{"location":"fontlab.flShapeBuilder.html#isvalid","text":"fontlab.flShapeBuilder.isValid bool","title":"isValid"},{"location":"fontlab.flShapeBuilder.html#name","text":"fontlab.flShapeBuilder.name object name","title":"name"},{"location":"fontlab.flShapeBuilder.html#preparetransformationdata","text":"fontlab.flShapeBuilder.prepareTransformationData = prepareTransformationData (...) prepareTransformationData()","title":"prepareTransformationData"},{"location":"fontlab.flShapeBuilder.html#refcnt","text":"fontlab.flShapeBuilder.refCnt object references count","title":"refCnt"},{"location":"fontlab.flShapeBuilder.html#release","text":"fontlab.flShapeBuilder.release = release (...) release()","title":"release"},{"location":"fontlab.flShapeBuilder.html#remove","text":"fontlab.flShapeBuilder.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flShapeBuilder.html#removechild","text":"fontlab.flShapeBuilder.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flShapeBuilder.html#removeproperty","text":"fontlab.flShapeBuilder.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flShapeBuilder.html#resettransformationdata","text":"fontlab.flShapeBuilder.resetTransformationData = resetTransformationData (...) resetTransformationData()","title":"resetTransformationData"},{"location":"fontlab.flShapeBuilder.html#restorehistorystate","text":"fontlab.flShapeBuilder.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flShapeBuilder.html#setdestshape","text":"fontlab.flShapeBuilder.setDestShape = setDestShape (...) setDestShape(flShape)","title":"setDestShape"},{"location":"fontlab.flShapeBuilder.html#setdestshapedata","text":"fontlab.flShapeBuilder.setDestShapeData = setDestShapeData (...) setDestShapeData(flShapeData)","title":"setDestShapeData"},{"location":"fontlab.flShapeBuilder.html#setflag","text":"fontlab.flShapeBuilder.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flShapeBuilder.html#setownerlayer","text":"fontlab.flShapeBuilder.setOwnerLayer = setOwnerLayer (...) setOwnerLayer(flObject)","title":"setOwnerLayer"},{"location":"fontlab.flShapeBuilder.html#setownershapedata","text":"fontlab.flShapeBuilder.setOwnerShapeData = setOwnerShapeData (...) setOwnerShapeData(flObject)","title":"setOwnerShapeData"},{"location":"fontlab.flShapeBuilder.html#setproperty","text":"fontlab.flShapeBuilder.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flShapeBuilder.html#setpropertyfloat","text":"fontlab.flShapeBuilder.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flShapeBuilder.html#setpropertyint","text":"fontlab.flShapeBuilder.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flShapeBuilder.html#tag","text":"fontlab.flShapeBuilder.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flShapeBuilder.html#title","text":"fontlab.flShapeBuilder.title QString title()","title":"title"},{"location":"fontlab.flShapeBuilder.html#type","text":"fontlab.flShapeBuilder.type object type","title":"type"},{"location":"fontlab.flShapeBuilder.html#update","text":"fontlab.flShapeBuilder.update = update (...) update()","title":"update"},{"location":"fontlab.flShapeData.html","text":"flShapeData fontlab.flShapeData = class flShapeData ( object ) flShapeData representation Constructors: flShapeData() flShapeData(flObject) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value addContour (...) addContour (flContour) addContours (...) addContours (list(flContour)) arrangeContours (...) bool arrangeContours () assignContours (...) QMap assignContours (list(flContour)) | Nothing assignContours (fgShape) bindDependencies (...) bindDependencies () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearContours (...) clearContours () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearIncludesList (...) clearIncludesList () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' goDown (...) bool goDown (flShape) goUp (...) bool goUp (flShape) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) includesList (...) list(flShape) includesList () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([flObject]) removeAnchor (...) removeAnchor (flAnchor) removeChild (...) removeChild (flObject) removeContour (...) removeContour (flContour) removeProperty (...) removeProperty ('key') resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) sendToBack (...) bool sendToBack (flShape) sendToFront (...) bool sendToFront (flShape) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' sortContours (...) sortContours (bool desc) tag (...) tag ([string]) takeIncludesList (...) list(flShape) takeIncludesList () update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors builder flObject builder() componentGlyph string componentLayer string contours list(flContour) contours() hasChanges bool hasHistoryStates bool id object id includes flObjectsList includes() isChanged bool isComponent bool isComposite bool isNull bool isPresent bool isReleased bool isValid bool name object name note string refCnt object references count referenceCount int segments list(CurveEx) segments() shapeType ShapeType shapeType() type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} addContour fontlab.flShapeData.addContour = addContour (...) addContour(flContour) addContours fontlab.flShapeData.addContours = addContours (...) addContours(list(flContour)) arrangeContours fontlab.flShapeData.arrangeContours = arrangeContours (...) bool arrangeContours() assignContours fontlab.flShapeData.assignContours = assignContours (...) QMap assignContours(list(flContour)) | Nothing assignContours(fgShape) bindDependencies fontlab.flShapeData.bindDependencies = bindDependencies (...) bindDependencies() builder fontlab.flShapeData.builder flObject builder() changed fontlab.flShapeData.changed = changed (...) changed() checkInitHistoryState fontlab.flShapeData.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flShapeData.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearContours fontlab.flShapeData.clearContours = clearContours (...) clearContours() clearFlag fontlab.flShapeData.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flShapeData.clearFlags = clearFlags (...) clearFlags() clearIncludesList fontlab.flShapeData.clearIncludesList = clearIncludesList (...) clearIncludesList() clone fontlab.flShapeData.clone = clone (...) Clone the object cloneObject fontlab.flShapeData.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); componentGlyph fontlab.flShapeData.componentGlyph string componentLayer fontlab.flShapeData.componentLayer string contours fontlab.flShapeData.contours list(flContour) contours() createHistoryState fontlab.flShapeData.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flShapeData.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flShapeData.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flShapeData.flag = flag (...) flag(uint f) flObjectFlags fontlab.flShapeData.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flShapeData.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flShapeData.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flShapeData.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flShapeData.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' goDown fontlab.flShapeData.goDown = goDown (...) bool goDown(flShape) goUp fontlab.flShapeData.goUp = goUp (...) bool goUp(flShape) hasChanges fontlab.flShapeData.hasChanges bool hasHistoryState fontlab.flShapeData.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flShapeData.hasHistoryStates bool haveObject fontlab.flShapeData.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flShapeData.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flShapeData.id object id includes fontlab.flShapeData.includes flObjectsList includes() includesList fontlab.flShapeData.includesList = includesList (...) list(flShape) includesList() independedAll fontlab.flShapeData.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flShapeData.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flShapeData.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flShapeData.isChanged bool isComponent fontlab.flShapeData.isComponent bool isComposite fontlab.flShapeData.isComposite bool isEqual fontlab.flShapeData.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flShapeData.isNull bool isPresent fontlab.flShapeData.isPresent bool isReleased fontlab.flShapeData.isReleased bool isValid fontlab.flShapeData.isValid bool name fontlab.flShapeData.name object name note fontlab.flShapeData.note string prepareTransformationData fontlab.flShapeData.prepareTransformationData = prepareTransformationData (...) prepareTransformationData() refCnt fontlab.flShapeData.refCnt object references count referenceCount fontlab.flShapeData.referenceCount int release fontlab.flShapeData.release = release (...) release() remove fontlab.flShapeData.remove = remove (...) remove([flObject]) removeAnchor fontlab.flShapeData.removeAnchor = removeAnchor (...) removeAnchor(flAnchor) removeChild fontlab.flShapeData.removeChild = removeChild (...) removeChild(flObject) removeContour fontlab.flShapeData.removeContour = removeContour (...) removeContour(flContour) removeProperty fontlab.flShapeData.removeProperty = removeProperty (...) removeProperty('key') resetTransformationData fontlab.flShapeData.resetTransformationData = resetTransformationData (...) resetTransformationData() restoreHistoryState fontlab.flShapeData.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) segments fontlab.flShapeData.segments list(CurveEx) segments() sendToBack fontlab.flShapeData.sendToBack = sendToBack (...) bool sendToBack(flShape) sendToFront fontlab.flShapeData.sendToFront = sendToFront (...) bool sendToFront(flShape) setFlag fontlab.flShapeData.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flShapeData.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flShapeData.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flShapeData.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' shapeType fontlab.flShapeData.shapeType ShapeType shapeType() sortContours fontlab.flShapeData.sortContours = sortContours (...) sortContours(bool desc) tag fontlab.flShapeData.tag = tag (...) tag([string]) takeIncludesList fontlab.flShapeData.takeIncludesList = takeIncludesList (...) list(flShape) takeIncludesList() type fontlab.flShapeData.type object type update fontlab.flShapeData.update = update (...) update()","title":"flShapeData"},{"location":"fontlab.flShapeData.html#flshapedata","text":"","title":"flShapeData"},{"location":"fontlab.flShapeData.html#addcontour","text":"fontlab.flShapeData.addContour = addContour (...) addContour(flContour)","title":"addContour"},{"location":"fontlab.flShapeData.html#addcontours","text":"fontlab.flShapeData.addContours = addContours (...) addContours(list(flContour))","title":"addContours"},{"location":"fontlab.flShapeData.html#arrangecontours","text":"fontlab.flShapeData.arrangeContours = arrangeContours (...) bool arrangeContours()","title":"arrangeContours"},{"location":"fontlab.flShapeData.html#assigncontours","text":"fontlab.flShapeData.assignContours = assignContours (...) QMap assignContours(list(flContour)) | Nothing assignContours(fgShape)","title":"assignContours"},{"location":"fontlab.flShapeData.html#binddependencies","text":"fontlab.flShapeData.bindDependencies = bindDependencies (...) bindDependencies()","title":"bindDependencies"},{"location":"fontlab.flShapeData.html#builder","text":"fontlab.flShapeData.builder flObject builder()","title":"builder"},{"location":"fontlab.flShapeData.html#changed","text":"fontlab.flShapeData.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flShapeData.html#checkinithistorystate","text":"fontlab.flShapeData.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flShapeData.html#clearabovehistory","text":"fontlab.flShapeData.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flShapeData.html#clearcontours","text":"fontlab.flShapeData.clearContours = clearContours (...) clearContours()","title":"clearContours"},{"location":"fontlab.flShapeData.html#clearflag","text":"fontlab.flShapeData.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flShapeData.html#clearflags","text":"fontlab.flShapeData.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flShapeData.html#clearincludeslist","text":"fontlab.flShapeData.clearIncludesList = clearIncludesList (...) clearIncludesList()","title":"clearIncludesList"},{"location":"fontlab.flShapeData.html#clone","text":"fontlab.flShapeData.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flShapeData.html#cloneobject","text":"fontlab.flShapeData.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flShapeData.html#componentglyph","text":"fontlab.flShapeData.componentGlyph string","title":"componentGlyph"},{"location":"fontlab.flShapeData.html#componentlayer","text":"fontlab.flShapeData.componentLayer string","title":"componentLayer"},{"location":"fontlab.flShapeData.html#contours","text":"fontlab.flShapeData.contours list(flContour) contours()","title":"contours"},{"location":"fontlab.flShapeData.html#createhistorystate","text":"fontlab.flShapeData.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flShapeData.html#createobject","text":"fontlab.flShapeData.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flShapeData.html#currenthistorystate","text":"fontlab.flShapeData.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flShapeData.html#flag","text":"fontlab.flShapeData.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flShapeData.html#flobjectflags","text":"fontlab.flShapeData.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flShapeData.html#getproperties","text":"fontlab.flShapeData.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flShapeData.html#getproperty","text":"fontlab.flShapeData.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flShapeData.html#getpropertyfloat","text":"fontlab.flShapeData.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flShapeData.html#getpropertyint","text":"fontlab.flShapeData.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flShapeData.html#godown","text":"fontlab.flShapeData.goDown = goDown (...) bool goDown(flShape)","title":"goDown"},{"location":"fontlab.flShapeData.html#goup","text":"fontlab.flShapeData.goUp = goUp (...) bool goUp(flShape)","title":"goUp"},{"location":"fontlab.flShapeData.html#haschanges","text":"fontlab.flShapeData.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flShapeData.html#hashistorystate","text":"fontlab.flShapeData.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flShapeData.html#hashistorystates","text":"fontlab.flShapeData.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flShapeData.html#haveobject","text":"fontlab.flShapeData.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flShapeData.html#historystates","text":"fontlab.flShapeData.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flShapeData.html#id","text":"fontlab.flShapeData.id object id","title":"id"},{"location":"fontlab.flShapeData.html#includes","text":"fontlab.flShapeData.includes flObjectsList includes()","title":"includes"},{"location":"fontlab.flShapeData.html#includeslist","text":"fontlab.flShapeData.includesList = includesList (...) list(flShape) includesList()","title":"includesList"},{"location":"fontlab.flShapeData.html#independedall","text":"fontlab.flShapeData.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flShapeData.html#initialhistorystate","text":"fontlab.flShapeData.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flShapeData.html#instancetype","text":"fontlab.flShapeData.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flShapeData.html#ischanged","text":"fontlab.flShapeData.isChanged bool","title":"isChanged"},{"location":"fontlab.flShapeData.html#iscomponent","text":"fontlab.flShapeData.isComponent bool","title":"isComponent"},{"location":"fontlab.flShapeData.html#iscomposite","text":"fontlab.flShapeData.isComposite bool","title":"isComposite"},{"location":"fontlab.flShapeData.html#isequal","text":"fontlab.flShapeData.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flShapeData.html#isnull","text":"fontlab.flShapeData.isNull bool","title":"isNull"},{"location":"fontlab.flShapeData.html#ispresent","text":"fontlab.flShapeData.isPresent bool","title":"isPresent"},{"location":"fontlab.flShapeData.html#isreleased","text":"fontlab.flShapeData.isReleased bool","title":"isReleased"},{"location":"fontlab.flShapeData.html#isvalid","text":"fontlab.flShapeData.isValid bool","title":"isValid"},{"location":"fontlab.flShapeData.html#name","text":"fontlab.flShapeData.name object name","title":"name"},{"location":"fontlab.flShapeData.html#note","text":"fontlab.flShapeData.note string","title":"note"},{"location":"fontlab.flShapeData.html#preparetransformationdata","text":"fontlab.flShapeData.prepareTransformationData = prepareTransformationData (...) prepareTransformationData()","title":"prepareTransformationData"},{"location":"fontlab.flShapeData.html#refcnt","text":"fontlab.flShapeData.refCnt object references count","title":"refCnt"},{"location":"fontlab.flShapeData.html#referencecount","text":"fontlab.flShapeData.referenceCount int","title":"referenceCount"},{"location":"fontlab.flShapeData.html#release","text":"fontlab.flShapeData.release = release (...) release()","title":"release"},{"location":"fontlab.flShapeData.html#remove","text":"fontlab.flShapeData.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flShapeData.html#removeanchor","text":"fontlab.flShapeData.removeAnchor = removeAnchor (...) removeAnchor(flAnchor)","title":"removeAnchor"},{"location":"fontlab.flShapeData.html#removechild","text":"fontlab.flShapeData.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flShapeData.html#removecontour","text":"fontlab.flShapeData.removeContour = removeContour (...) removeContour(flContour)","title":"removeContour"},{"location":"fontlab.flShapeData.html#removeproperty","text":"fontlab.flShapeData.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flShapeData.html#resettransformationdata","text":"fontlab.flShapeData.resetTransformationData = resetTransformationData (...) resetTransformationData()","title":"resetTransformationData"},{"location":"fontlab.flShapeData.html#restorehistorystate","text":"fontlab.flShapeData.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flShapeData.html#segments","text":"fontlab.flShapeData.segments list(CurveEx) segments()","title":"segments"},{"location":"fontlab.flShapeData.html#sendtoback","text":"fontlab.flShapeData.sendToBack = sendToBack (...) bool sendToBack(flShape)","title":"sendToBack"},{"location":"fontlab.flShapeData.html#sendtofront","text":"fontlab.flShapeData.sendToFront = sendToFront (...) bool sendToFront(flShape)","title":"sendToFront"},{"location":"fontlab.flShapeData.html#setflag","text":"fontlab.flShapeData.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flShapeData.html#setproperty","text":"fontlab.flShapeData.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flShapeData.html#setpropertyfloat","text":"fontlab.flShapeData.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flShapeData.html#setpropertyint","text":"fontlab.flShapeData.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flShapeData.html#shapetype","text":"fontlab.flShapeData.shapeType ShapeType shapeType()","title":"shapeType"},{"location":"fontlab.flShapeData.html#sortcontours","text":"fontlab.flShapeData.sortContours = sortContours (...) sortContours(bool desc)","title":"sortContours"},{"location":"fontlab.flShapeData.html#tag","text":"fontlab.flShapeData.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flShapeData.html#takeincludeslist","text":"fontlab.flShapeData.takeIncludesList = takeIncludesList (...) list(flShape) takeIncludesList()","title":"takeIncludesList"},{"location":"fontlab.flShapeData.html#type","text":"fontlab.flShapeData.type object type","title":"type"},{"location":"fontlab.flShapeData.html#update","text":"fontlab.flShapeData.update = update (...) update()","title":"update"},{"location":"fontlab.flShapeInfo.html","text":"flShapeInfo fontlab.flShapeInfo = class flShapeInfo ( object ) flShapeInfo representation Constructors: flShapeInfo() flShapeInfo(flObject) flShapeInfo(flShapeInfo) flShapeInfo(flShape, flSearchInfo) flShapeInfo(flShape, QTransform) flShapeInfo(flShape, QTransform, QList composites) flShapeInfo(flShape, QTransform, flObject glyph_info, QList composites) flShapeInfo(flShape, flLayer, QTransform) flShapeInfo(flShape, flLayer, flObject glyph_info[, QTransform transform=QTransform()[, QList composites=QList ()]]) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value appendComposite (...) appendComposite (flShapeInfo) boundingBox (...) QRectF boundingBox () brectOnCanvas (...) QRectF brectOnCanvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) compositesTransform (...) QTransform compositesTransform () contains (...) bool contains (QPointF canvas_pos[, double s=1]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() findNode (...) flNode findNode (QPointF) flag (...) flag (uint f) getContoursInfo (...) QList getContoursInfo () getHitIncludedShape (...) flShapeInfo/Nothing getHitIncludedShape (QPointF canvas_pos, double scale[, bool to_bottom=false]) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasAboveComposites (...) bool hasAboveComposites () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isContentLockedSibling (...) bool isContentLockedSibling () isEqual (...) isEqual (flObject) move (...) QRectF move (QPointF) ownerComposite (...) flShape ownerComposite () ownerCompositeInfo (...) flShapeInfo ownerCompositeInfo () pushFrontComposite (...) pushFrontComposite (flShapeInfo) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') replaceShape (...) replaceShape (flShape) restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) takeFirstComposite (...) flShapeInfo takeFirstComposite () takeLastComposite (...) flShapeInfo takeLastComposite () toCanvasTransform (...) QTransform toCanvasTransform () toGlyphTransform (...) QTransform toGlyphTransform () update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flShapeInfo createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors composites QList dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool layer flLayer name object name refCnt object references count shape flShape transform transform matrix type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} appendComposite fontlab.flShapeInfo.appendComposite = appendComposite (...) appendComposite(flShapeInfo) boundingBox fontlab.flShapeInfo.boundingBox = boundingBox (...) QRectF boundingBox() brectOnCanvas fontlab.flShapeInfo.brectOnCanvas = brectOnCanvas (...) QRectF brectOnCanvas() changed fontlab.flShapeInfo.changed = changed (...) changed() checkInitHistoryState fontlab.flShapeInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flShapeInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flShapeInfo.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flShapeInfo.clearFlags = clearFlags (...) clearFlags() clone fontlab.flShapeInfo.clone = clone (...) Clone the object cloneObject fontlab.flShapeInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); combine fontlab.flShapeInfo.combine = combine (...) combine(QTransform transform) composites fontlab.flShapeInfo.composites QList compositesTransform fontlab.flShapeInfo.compositesTransform = compositesTransform (...) QTransform compositesTransform() contains fontlab.flShapeInfo.contains = contains (...) bool contains(QPointF canvas_pos[, double s=1]) createHistoryState fontlab.flShapeInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flShapeInfo.createInstance = createInstance (...) flShapeInfo createInstance() createObject fontlab.flShapeInfo.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flShapeInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx() dist fontlab.flShapeInfo.dist double dist findNode fontlab.flShapeInfo.findNode = findNode (...) flNode findNode(QPointF) flag fontlab.flShapeInfo.flag = flag (...) flag(uint f) flObjectFlags fontlab.flShapeInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getContoursInfo fontlab.flShapeInfo.getContoursInfo = getContoursInfo (...) QList getContoursInfo() getHitIncludedShape fontlab.flShapeInfo.getHitIncludedShape = getHitIncludedShape (...) flShapeInfo/Nothing getHitIncludedShape(QPointF canvas_pos, double scale[, bool to_bottom=false]) getProperties fontlab.flShapeInfo.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flShapeInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flShapeInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flShapeInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' glyphInfo fontlab.flShapeInfo.glyphInfo flObject - glyph info hasAboveComposites fontlab.flShapeInfo.hasAboveComposites = hasAboveComposites (...) bool hasAboveComposites() hasChanges fontlab.flShapeInfo.hasChanges bool hasHistoryState fontlab.flShapeInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flShapeInfo.hasHistoryStates bool haveObject fontlab.flShapeInfo.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flShapeInfo.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flShapeInfo.id object id independedAll fontlab.flShapeInfo.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flShapeInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flShapeInfo.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flShapeInfo.isChanged bool isContentLockedSibling fontlab.flShapeInfo.isContentLockedSibling = isContentLockedSibling (...) bool isContentLockedSibling() isEqual fontlab.flShapeInfo.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flShapeInfo.isNull bool isPresent fontlab.flShapeInfo.isPresent bool isReleased fontlab.flShapeInfo.isReleased bool isValid fontlab.flShapeInfo.isValid bool layer fontlab.flShapeInfo.layer flLayer move fontlab.flShapeInfo.move = move (...) QRectF move(QPointF) name fontlab.flShapeInfo.name object name ownerComposite fontlab.flShapeInfo.ownerComposite = ownerComposite (...) flShape ownerComposite() ownerCompositeInfo fontlab.flShapeInfo.ownerCompositeInfo = ownerCompositeInfo (...) flShapeInfo ownerCompositeInfo() pushFrontComposite fontlab.flShapeInfo.pushFrontComposite = pushFrontComposite (...) pushFrontComposite(flShapeInfo) refCnt fontlab.flShapeInfo.refCnt object references count release fontlab.flShapeInfo.release = release (...) release() remove fontlab.flShapeInfo.remove = remove (...) remove([flObject]) removeChild fontlab.flShapeInfo.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flShapeInfo.removeProperty = removeProperty (...) removeProperty('key') replaceShape fontlab.flShapeInfo.replaceShape = replaceShape (...) replaceShape(flShape) restoreHistoryState fontlab.flShapeInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flShapeInfo.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flShapeInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flShapeInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flShapeInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' shape fontlab.flShapeInfo.shape flShape tag fontlab.flShapeInfo.tag = tag (...) tag([string]) takeFirstComposite fontlab.flShapeInfo.takeFirstComposite = takeFirstComposite (...) flShapeInfo takeFirstComposite() takeLastComposite fontlab.flShapeInfo.takeLastComposite = takeLastComposite (...) flShapeInfo takeLastComposite() toCanvasTransform fontlab.flShapeInfo.toCanvasTransform = toCanvasTransform (...) QTransform toCanvasTransform() toGlyphTransform fontlab.flShapeInfo.toGlyphTransform = toGlyphTransform (...) QTransform toGlyphTransform() transform fontlab.flShapeInfo.transform transform matrix type fontlab.flShapeInfo.type object type update fontlab.flShapeInfo.update = update (...) update()","title":"flShapeInfo"},{"location":"fontlab.flShapeInfo.html#flshapeinfo","text":"","title":"flShapeInfo"},{"location":"fontlab.flShapeInfo.html#appendcomposite","text":"fontlab.flShapeInfo.appendComposite = appendComposite (...) appendComposite(flShapeInfo)","title":"appendComposite"},{"location":"fontlab.flShapeInfo.html#boundingbox","text":"fontlab.flShapeInfo.boundingBox = boundingBox (...) QRectF boundingBox()","title":"boundingBox"},{"location":"fontlab.flShapeInfo.html#brectoncanvas","text":"fontlab.flShapeInfo.brectOnCanvas = brectOnCanvas (...) QRectF brectOnCanvas()","title":"brectOnCanvas"},{"location":"fontlab.flShapeInfo.html#changed","text":"fontlab.flShapeInfo.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flShapeInfo.html#checkinithistorystate","text":"fontlab.flShapeInfo.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flShapeInfo.html#clearabovehistory","text":"fontlab.flShapeInfo.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flShapeInfo.html#clearflag","text":"fontlab.flShapeInfo.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flShapeInfo.html#clearflags","text":"fontlab.flShapeInfo.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flShapeInfo.html#clone","text":"fontlab.flShapeInfo.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flShapeInfo.html#cloneobject","text":"fontlab.flShapeInfo.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flShapeInfo.html#combine","text":"fontlab.flShapeInfo.combine = combine (...) combine(QTransform transform)","title":"combine"},{"location":"fontlab.flShapeInfo.html#composites","text":"fontlab.flShapeInfo.composites QList","title":"composites"},{"location":"fontlab.flShapeInfo.html#compositestransform","text":"fontlab.flShapeInfo.compositesTransform = compositesTransform (...) QTransform compositesTransform()","title":"compositesTransform"},{"location":"fontlab.flShapeInfo.html#contains","text":"fontlab.flShapeInfo.contains = contains (...) bool contains(QPointF canvas_pos[, double s=1])","title":"contains"},{"location":"fontlab.flShapeInfo.html#createhistorystate","text":"fontlab.flShapeInfo.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flShapeInfo.html#createinstance","text":"fontlab.flShapeInfo.createInstance = createInstance (...) flShapeInfo createInstance()","title":"createInstance"},{"location":"fontlab.flShapeInfo.html#createobject","text":"fontlab.flShapeInfo.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flShapeInfo.html#currenthistorystate","text":"fontlab.flShapeInfo.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flShapeInfo.html#dist","text":"fontlab.flShapeInfo.dist double dist","title":"dist"},{"location":"fontlab.flShapeInfo.html#findnode","text":"fontlab.flShapeInfo.findNode = findNode (...) flNode findNode(QPointF)","title":"findNode"},{"location":"fontlab.flShapeInfo.html#flag","text":"fontlab.flShapeInfo.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flShapeInfo.html#flobjectflags","text":"fontlab.flShapeInfo.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flShapeInfo.html#getcontoursinfo","text":"fontlab.flShapeInfo.getContoursInfo = getContoursInfo (...) QList getContoursInfo()","title":"getContoursInfo"},{"location":"fontlab.flShapeInfo.html#gethitincludedshape","text":"fontlab.flShapeInfo.getHitIncludedShape = getHitIncludedShape (...) flShapeInfo/Nothing getHitIncludedShape(QPointF canvas_pos, double scale[, bool to_bottom=false])","title":"getHitIncludedShape"},{"location":"fontlab.flShapeInfo.html#getproperties","text":"fontlab.flShapeInfo.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flShapeInfo.html#getproperty","text":"fontlab.flShapeInfo.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flShapeInfo.html#getpropertyfloat","text":"fontlab.flShapeInfo.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flShapeInfo.html#getpropertyint","text":"fontlab.flShapeInfo.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flShapeInfo.html#glyphinfo","text":"fontlab.flShapeInfo.glyphInfo flObject - glyph info","title":"glyphInfo"},{"location":"fontlab.flShapeInfo.html#hasabovecomposites","text":"fontlab.flShapeInfo.hasAboveComposites = hasAboveComposites (...) bool hasAboveComposites()","title":"hasAboveComposites"},{"location":"fontlab.flShapeInfo.html#haschanges","text":"fontlab.flShapeInfo.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flShapeInfo.html#hashistorystate","text":"fontlab.flShapeInfo.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flShapeInfo.html#hashistorystates","text":"fontlab.flShapeInfo.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flShapeInfo.html#haveobject","text":"fontlab.flShapeInfo.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flShapeInfo.html#historystates","text":"fontlab.flShapeInfo.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flShapeInfo.html#id","text":"fontlab.flShapeInfo.id object id","title":"id"},{"location":"fontlab.flShapeInfo.html#independedall","text":"fontlab.flShapeInfo.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flShapeInfo.html#initialhistorystate","text":"fontlab.flShapeInfo.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flShapeInfo.html#instancetype","text":"fontlab.flShapeInfo.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flShapeInfo.html#ischanged","text":"fontlab.flShapeInfo.isChanged bool","title":"isChanged"},{"location":"fontlab.flShapeInfo.html#iscontentlockedsibling","text":"fontlab.flShapeInfo.isContentLockedSibling = isContentLockedSibling (...) bool isContentLockedSibling()","title":"isContentLockedSibling"},{"location":"fontlab.flShapeInfo.html#isequal","text":"fontlab.flShapeInfo.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flShapeInfo.html#isnull","text":"fontlab.flShapeInfo.isNull bool","title":"isNull"},{"location":"fontlab.flShapeInfo.html#ispresent","text":"fontlab.flShapeInfo.isPresent bool","title":"isPresent"},{"location":"fontlab.flShapeInfo.html#isreleased","text":"fontlab.flShapeInfo.isReleased bool","title":"isReleased"},{"location":"fontlab.flShapeInfo.html#isvalid","text":"fontlab.flShapeInfo.isValid bool","title":"isValid"},{"location":"fontlab.flShapeInfo.html#layer","text":"fontlab.flShapeInfo.layer flLayer","title":"layer"},{"location":"fontlab.flShapeInfo.html#move","text":"fontlab.flShapeInfo.move = move (...) QRectF move(QPointF)","title":"move"},{"location":"fontlab.flShapeInfo.html#name","text":"fontlab.flShapeInfo.name object name","title":"name"},{"location":"fontlab.flShapeInfo.html#ownercomposite","text":"fontlab.flShapeInfo.ownerComposite = ownerComposite (...) flShape ownerComposite()","title":"ownerComposite"},{"location":"fontlab.flShapeInfo.html#ownercompositeinfo","text":"fontlab.flShapeInfo.ownerCompositeInfo = ownerCompositeInfo (...) flShapeInfo ownerCompositeInfo()","title":"ownerCompositeInfo"},{"location":"fontlab.flShapeInfo.html#pushfrontcomposite","text":"fontlab.flShapeInfo.pushFrontComposite = pushFrontComposite (...) pushFrontComposite(flShapeInfo)","title":"pushFrontComposite"},{"location":"fontlab.flShapeInfo.html#refcnt","text":"fontlab.flShapeInfo.refCnt object references count","title":"refCnt"},{"location":"fontlab.flShapeInfo.html#release","text":"fontlab.flShapeInfo.release = release (...) release()","title":"release"},{"location":"fontlab.flShapeInfo.html#remove","text":"fontlab.flShapeInfo.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flShapeInfo.html#removechild","text":"fontlab.flShapeInfo.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flShapeInfo.html#removeproperty","text":"fontlab.flShapeInfo.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flShapeInfo.html#replaceshape","text":"fontlab.flShapeInfo.replaceShape = replaceShape (...) replaceShape(flShape)","title":"replaceShape"},{"location":"fontlab.flShapeInfo.html#restorehistorystate","text":"fontlab.flShapeInfo.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flShapeInfo.html#setflag","text":"fontlab.flShapeInfo.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flShapeInfo.html#setproperty","text":"fontlab.flShapeInfo.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flShapeInfo.html#setpropertyfloat","text":"fontlab.flShapeInfo.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flShapeInfo.html#setpropertyint","text":"fontlab.flShapeInfo.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flShapeInfo.html#shape","text":"fontlab.flShapeInfo.shape flShape","title":"shape"},{"location":"fontlab.flShapeInfo.html#tag","text":"fontlab.flShapeInfo.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flShapeInfo.html#takefirstcomposite","text":"fontlab.flShapeInfo.takeFirstComposite = takeFirstComposite (...) flShapeInfo takeFirstComposite()","title":"takeFirstComposite"},{"location":"fontlab.flShapeInfo.html#takelastcomposite","text":"fontlab.flShapeInfo.takeLastComposite = takeLastComposite (...) flShapeInfo takeLastComposite()","title":"takeLastComposite"},{"location":"fontlab.flShapeInfo.html#tocanvastransform","text":"fontlab.flShapeInfo.toCanvasTransform = toCanvasTransform (...) QTransform toCanvasTransform()","title":"toCanvasTransform"},{"location":"fontlab.flShapeInfo.html#toglyphtransform","text":"fontlab.flShapeInfo.toGlyphTransform = toGlyphTransform (...) QTransform toGlyphTransform()","title":"toGlyphTransform"},{"location":"fontlab.flShapeInfo.html#transform","text":"fontlab.flShapeInfo.transform transform matrix","title":"transform"},{"location":"fontlab.flShapeInfo.html#type","text":"fontlab.flShapeInfo.type object type","title":"type"},{"location":"fontlab.flShapeInfo.html#update","text":"fontlab.flShapeInfo.update = update (...) update()","title":"update"},{"location":"fontlab.flSnapLine.html","text":"flSnapLine fontlab.flSnapLine = class flSnapLine ( object ) flSnapLine representation Constructors: flSnapLine() flSnapLine(flObject) flSnapLine(flSnapLine) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (QPointF, uint mode) flag (...) flag (uint f) getHashCode (...) SnapHashCode getHashCode () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) offsetTo (...) QPointF offsetTo (QPointF, uint mode) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') reset (...) reset () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSnapFlag (...) setSnapFlag (uint role, uint snapFlags) setSnapFlagValue (...) setSnapFlagValue (uint role, bool) snapFlag (...) uint snapFlag (uint role) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isSnapLine (...) bool isSnapLine (flObject) Descriptors angle double angleMode SnapAngleMode center flNode centerPoint QPointF color QColor constraints QRectF expression QString extLinef QLineF extPosition double hasChanges bool hasColor bool hasExpression bool hasHistoryStates bool haveExtLine bool id object id isAbsoluteMarkerPos bool isChanged bool isExluded bool isHint bool isInUse bool isMeasurementLine bool isNull bool isPassive bool isPresent bool isReleased bool isShortGuideline bool isValid bool isZone bool length double linef QLineF markers list(flMarkerPoint) markersStructVersion int name object name refCnt object references count snapFlags uint style SnapObjectsStyle type object type vector flNode vectorPoint QPointF Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} angle fontlab.flSnapLine.angle double angleMode fontlab.flSnapLine.angleMode SnapAngleMode center fontlab.flSnapLine.center flNode centerPoint fontlab.flSnapLine.centerPoint QPointF changed fontlab.flSnapLine.changed = changed (...) changed() checkInitHistoryState fontlab.flSnapLine.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flSnapLine.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flSnapLine.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flSnapLine.clearFlags = clearFlags (...) clearFlags() clone fontlab.flSnapLine.clone = clone (...) Clone the object cloneObject fontlab.flSnapLine.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); color fontlab.flSnapLine.color QColor constraints fontlab.flSnapLine.constraints QRectF createHistoryState fontlab.flSnapLine.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flSnapLine.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flSnapLine.currentHistoryState = currentHistoryState (...) currentHistoryIx() distanceTo fontlab.flSnapLine.distanceTo = distanceTo (...) double distanceTo(QPointF, uint mode) expression fontlab.flSnapLine.expression QString extLinef fontlab.flSnapLine.extLinef QLineF extPosition fontlab.flSnapLine.extPosition double flag fontlab.flSnapLine.flag = flag (...) flag(uint f) flObjectFlags fontlab.flSnapLine.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getHashCode fontlab.flSnapLine.getHashCode = getHashCode (...) SnapHashCode getHashCode() getProperties fontlab.flSnapLine.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flSnapLine.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flSnapLine.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flSnapLine.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flSnapLine.hasChanges bool hasColor fontlab.flSnapLine.hasColor bool hasExpression fontlab.flSnapLine.hasExpression bool hasHistoryState fontlab.flSnapLine.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flSnapLine.hasHistoryStates bool haveExtLine fontlab.flSnapLine.haveExtLine bool haveObject fontlab.flSnapLine.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flSnapLine.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flSnapLine.id object id independedAll fontlab.flSnapLine.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flSnapLine.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flSnapLine.instanceType = instanceType (...) int instanceType(); isAbsoluteMarkerPos fontlab.flSnapLine.isAbsoluteMarkerPos bool isChanged fontlab.flSnapLine.isChanged bool isEqual fontlab.flSnapLine.isEqual = isEqual (...) isEqual(flObject) isExluded fontlab.flSnapLine.isExluded bool isHint fontlab.flSnapLine.isHint bool isInUse fontlab.flSnapLine.isInUse bool isMeasurementLine fontlab.flSnapLine.isMeasurementLine bool isNull fontlab.flSnapLine.isNull bool isPassive fontlab.flSnapLine.isPassive bool isPresent fontlab.flSnapLine.isPresent bool isReleased fontlab.flSnapLine.isReleased bool isShortGuideline fontlab.flSnapLine.isShortGuideline bool isSnapLine fontlab.flSnapLine.isSnapLine = isSnapLine (...) bool isSnapLine(flObject) isValid fontlab.flSnapLine.isValid bool isZone fontlab.flSnapLine.isZone bool length fontlab.flSnapLine.length double linef fontlab.flSnapLine.linef QLineF markers fontlab.flSnapLine.markers list(flMarkerPoint) markersStructVersion fontlab.flSnapLine.markersStructVersion int name fontlab.flSnapLine.name object name offsetTo fontlab.flSnapLine.offsetTo = offsetTo (...) QPointF offsetTo(QPointF, uint mode) refCnt fontlab.flSnapLine.refCnt object references count release fontlab.flSnapLine.release = release (...) release() remove fontlab.flSnapLine.remove = remove (...) remove([flObject]) removeChild fontlab.flSnapLine.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flSnapLine.removeProperty = removeProperty (...) removeProperty('key') reset fontlab.flSnapLine.reset = reset (...) reset() restoreHistoryState fontlab.flSnapLine.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flSnapLine.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flSnapLine.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flSnapLine.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flSnapLine.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSnapFlag fontlab.flSnapLine.setSnapFlag = setSnapFlag (...) setSnapFlag(uint role, uint snapFlags) setSnapFlagValue fontlab.flSnapLine.setSnapFlagValue = setSnapFlagValue (...) setSnapFlagValue(uint role, bool) snapFlag fontlab.flSnapLine.snapFlag = snapFlag (...) uint snapFlag(uint role) snapFlags fontlab.flSnapLine.snapFlags uint style fontlab.flSnapLine.style SnapObjectsStyle tag fontlab.flSnapLine.tag = tag (...) tag([string]) type fontlab.flSnapLine.type object type update fontlab.flSnapLine.update = update (...) update() vector fontlab.flSnapLine.vector flNode vectorPoint fontlab.flSnapLine.vectorPoint QPointF","title":"flSnapLine"},{"location":"fontlab.flSnapLine.html#flsnapline","text":"","title":"flSnapLine"},{"location":"fontlab.flSnapLine.html#angle","text":"fontlab.flSnapLine.angle double","title":"angle"},{"location":"fontlab.flSnapLine.html#anglemode","text":"fontlab.flSnapLine.angleMode SnapAngleMode","title":"angleMode"},{"location":"fontlab.flSnapLine.html#center","text":"fontlab.flSnapLine.center flNode","title":"center"},{"location":"fontlab.flSnapLine.html#centerpoint","text":"fontlab.flSnapLine.centerPoint QPointF","title":"centerPoint"},{"location":"fontlab.flSnapLine.html#changed","text":"fontlab.flSnapLine.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flSnapLine.html#checkinithistorystate","text":"fontlab.flSnapLine.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flSnapLine.html#clearabovehistory","text":"fontlab.flSnapLine.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flSnapLine.html#clearflag","text":"fontlab.flSnapLine.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flSnapLine.html#clearflags","text":"fontlab.flSnapLine.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flSnapLine.html#clone","text":"fontlab.flSnapLine.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flSnapLine.html#cloneobject","text":"fontlab.flSnapLine.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flSnapLine.html#color","text":"fontlab.flSnapLine.color QColor","title":"color"},{"location":"fontlab.flSnapLine.html#constraints","text":"fontlab.flSnapLine.constraints QRectF","title":"constraints"},{"location":"fontlab.flSnapLine.html#createhistorystate","text":"fontlab.flSnapLine.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flSnapLine.html#createobject","text":"fontlab.flSnapLine.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flSnapLine.html#currenthistorystate","text":"fontlab.flSnapLine.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flSnapLine.html#distanceto","text":"fontlab.flSnapLine.distanceTo = distanceTo (...) double distanceTo(QPointF, uint mode)","title":"distanceTo"},{"location":"fontlab.flSnapLine.html#expression","text":"fontlab.flSnapLine.expression QString","title":"expression"},{"location":"fontlab.flSnapLine.html#extlinef","text":"fontlab.flSnapLine.extLinef QLineF","title":"extLinef"},{"location":"fontlab.flSnapLine.html#extposition","text":"fontlab.flSnapLine.extPosition double","title":"extPosition"},{"location":"fontlab.flSnapLine.html#flag","text":"fontlab.flSnapLine.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flSnapLine.html#flobjectflags","text":"fontlab.flSnapLine.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flSnapLine.html#gethashcode","text":"fontlab.flSnapLine.getHashCode = getHashCode (...) SnapHashCode getHashCode()","title":"getHashCode"},{"location":"fontlab.flSnapLine.html#getproperties","text":"fontlab.flSnapLine.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flSnapLine.html#getproperty","text":"fontlab.flSnapLine.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flSnapLine.html#getpropertyfloat","text":"fontlab.flSnapLine.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flSnapLine.html#getpropertyint","text":"fontlab.flSnapLine.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flSnapLine.html#haschanges","text":"fontlab.flSnapLine.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flSnapLine.html#hascolor","text":"fontlab.flSnapLine.hasColor bool","title":"hasColor"},{"location":"fontlab.flSnapLine.html#hasexpression","text":"fontlab.flSnapLine.hasExpression bool","title":"hasExpression"},{"location":"fontlab.flSnapLine.html#hashistorystate","text":"fontlab.flSnapLine.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flSnapLine.html#hashistorystates","text":"fontlab.flSnapLine.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flSnapLine.html#haveextline","text":"fontlab.flSnapLine.haveExtLine bool","title":"haveExtLine"},{"location":"fontlab.flSnapLine.html#haveobject","text":"fontlab.flSnapLine.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flSnapLine.html#historystates","text":"fontlab.flSnapLine.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flSnapLine.html#id","text":"fontlab.flSnapLine.id object id","title":"id"},{"location":"fontlab.flSnapLine.html#independedall","text":"fontlab.flSnapLine.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flSnapLine.html#initialhistorystate","text":"fontlab.flSnapLine.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flSnapLine.html#instancetype","text":"fontlab.flSnapLine.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flSnapLine.html#isabsolutemarkerpos","text":"fontlab.flSnapLine.isAbsoluteMarkerPos bool","title":"isAbsoluteMarkerPos"},{"location":"fontlab.flSnapLine.html#ischanged","text":"fontlab.flSnapLine.isChanged bool","title":"isChanged"},{"location":"fontlab.flSnapLine.html#isequal","text":"fontlab.flSnapLine.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flSnapLine.html#isexluded","text":"fontlab.flSnapLine.isExluded bool","title":"isExluded"},{"location":"fontlab.flSnapLine.html#ishint","text":"fontlab.flSnapLine.isHint bool","title":"isHint"},{"location":"fontlab.flSnapLine.html#isinuse","text":"fontlab.flSnapLine.isInUse bool","title":"isInUse"},{"location":"fontlab.flSnapLine.html#ismeasurementline","text":"fontlab.flSnapLine.isMeasurementLine bool","title":"isMeasurementLine"},{"location":"fontlab.flSnapLine.html#isnull","text":"fontlab.flSnapLine.isNull bool","title":"isNull"},{"location":"fontlab.flSnapLine.html#ispassive","text":"fontlab.flSnapLine.isPassive bool","title":"isPassive"},{"location":"fontlab.flSnapLine.html#ispresent","text":"fontlab.flSnapLine.isPresent bool","title":"isPresent"},{"location":"fontlab.flSnapLine.html#isreleased","text":"fontlab.flSnapLine.isReleased bool","title":"isReleased"},{"location":"fontlab.flSnapLine.html#isshortguideline","text":"fontlab.flSnapLine.isShortGuideline bool","title":"isShortGuideline"},{"location":"fontlab.flSnapLine.html#issnapline","text":"fontlab.flSnapLine.isSnapLine = isSnapLine (...) bool isSnapLine(flObject)","title":"isSnapLine"},{"location":"fontlab.flSnapLine.html#isvalid","text":"fontlab.flSnapLine.isValid bool","title":"isValid"},{"location":"fontlab.flSnapLine.html#iszone","text":"fontlab.flSnapLine.isZone bool","title":"isZone"},{"location":"fontlab.flSnapLine.html#length","text":"fontlab.flSnapLine.length double","title":"length"},{"location":"fontlab.flSnapLine.html#linef","text":"fontlab.flSnapLine.linef QLineF","title":"linef"},{"location":"fontlab.flSnapLine.html#markers","text":"fontlab.flSnapLine.markers list(flMarkerPoint)","title":"markers"},{"location":"fontlab.flSnapLine.html#markersstructversion","text":"fontlab.flSnapLine.markersStructVersion int","title":"markersStructVersion"},{"location":"fontlab.flSnapLine.html#name","text":"fontlab.flSnapLine.name object name","title":"name"},{"location":"fontlab.flSnapLine.html#offsetto","text":"fontlab.flSnapLine.offsetTo = offsetTo (...) QPointF offsetTo(QPointF, uint mode)","title":"offsetTo"},{"location":"fontlab.flSnapLine.html#refcnt","text":"fontlab.flSnapLine.refCnt object references count","title":"refCnt"},{"location":"fontlab.flSnapLine.html#release","text":"fontlab.flSnapLine.release = release (...) release()","title":"release"},{"location":"fontlab.flSnapLine.html#remove","text":"fontlab.flSnapLine.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flSnapLine.html#removechild","text":"fontlab.flSnapLine.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flSnapLine.html#removeproperty","text":"fontlab.flSnapLine.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flSnapLine.html#reset","text":"fontlab.flSnapLine.reset = reset (...) reset()","title":"reset"},{"location":"fontlab.flSnapLine.html#restorehistorystate","text":"fontlab.flSnapLine.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flSnapLine.html#setflag","text":"fontlab.flSnapLine.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flSnapLine.html#setproperty","text":"fontlab.flSnapLine.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flSnapLine.html#setpropertyfloat","text":"fontlab.flSnapLine.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flSnapLine.html#setpropertyint","text":"fontlab.flSnapLine.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flSnapLine.html#setsnapflag","text":"fontlab.flSnapLine.setSnapFlag = setSnapFlag (...) setSnapFlag(uint role, uint snapFlags)","title":"setSnapFlag"},{"location":"fontlab.flSnapLine.html#setsnapflagvalue","text":"fontlab.flSnapLine.setSnapFlagValue = setSnapFlagValue (...) setSnapFlagValue(uint role, bool)","title":"setSnapFlagValue"},{"location":"fontlab.flSnapLine.html#snapflag","text":"fontlab.flSnapLine.snapFlag = snapFlag (...) uint snapFlag(uint role)","title":"snapFlag"},{"location":"fontlab.flSnapLine.html#snapflags","text":"fontlab.flSnapLine.snapFlags uint","title":"snapFlags"},{"location":"fontlab.flSnapLine.html#style","text":"fontlab.flSnapLine.style SnapObjectsStyle","title":"style"},{"location":"fontlab.flSnapLine.html#tag","text":"fontlab.flSnapLine.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flSnapLine.html#type","text":"fontlab.flSnapLine.type object type","title":"type"},{"location":"fontlab.flSnapLine.html#update","text":"fontlab.flSnapLine.update = update (...) update()","title":"update"},{"location":"fontlab.flSnapLine.html#vector","text":"fontlab.flSnapLine.vector flNode","title":"vector"},{"location":"fontlab.flSnapLine.html#vectorpoint","text":"fontlab.flSnapLine.vectorPoint QPointF","title":"vectorPoint"},{"location":"fontlab.flSnapObject.html","text":"flSnapObject fontlab.flSnapObject = class flSnapObject ( object ) flSnapObject representation Constructors: flSnapObject() flSnapObject(flObject) flSnapObject(flSnapObject) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (QPointF, uint mode) flag (...) flag (uint f) getHashCode (...) SnapHashCode getHashCode () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) offsetTo (...) QPointF offsetTo (QPointF, uint mode) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') reset (...) reset () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSnapFlag (...) setSnapFlag (uint role, uint snapFlags) setSnapFlagValue (...) setSnapFlagValue (uint role, bool) snapFlag (...) uint snapFlag (uint role) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isExluded bool isHint bool isInUse bool isMeasurementLine bool isNull bool isPassive bool isPresent bool isReleased bool isValid bool isZone bool name object name refCnt object references count snapFlags uint style SnapObjectsStyle type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flSnapObject.changed = changed (...) changed() checkInitHistoryState fontlab.flSnapObject.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flSnapObject.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flSnapObject.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flSnapObject.clearFlags = clearFlags (...) clearFlags() clone fontlab.flSnapObject.clone = clone (...) Clone the object cloneObject fontlab.flSnapObject.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flSnapObject.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flSnapObject.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flSnapObject.currentHistoryState = currentHistoryState (...) currentHistoryIx() distanceTo fontlab.flSnapObject.distanceTo = distanceTo (...) double distanceTo(QPointF, uint mode) flag fontlab.flSnapObject.flag = flag (...) flag(uint f) flObjectFlags fontlab.flSnapObject.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getHashCode fontlab.flSnapObject.getHashCode = getHashCode (...) SnapHashCode getHashCode() getProperties fontlab.flSnapObject.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flSnapObject.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flSnapObject.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flSnapObject.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flSnapObject.hasChanges bool hasHistoryState fontlab.flSnapObject.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flSnapObject.hasHistoryStates bool haveObject fontlab.flSnapObject.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flSnapObject.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flSnapObject.id object id independedAll fontlab.flSnapObject.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flSnapObject.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flSnapObject.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flSnapObject.isChanged bool isEqual fontlab.flSnapObject.isEqual = isEqual (...) isEqual(flObject) isExluded fontlab.flSnapObject.isExluded bool isHint fontlab.flSnapObject.isHint bool isInUse fontlab.flSnapObject.isInUse bool isMeasurementLine fontlab.flSnapObject.isMeasurementLine bool isNull fontlab.flSnapObject.isNull bool isPassive fontlab.flSnapObject.isPassive bool isPresent fontlab.flSnapObject.isPresent bool isReleased fontlab.flSnapObject.isReleased bool isValid fontlab.flSnapObject.isValid bool isZone fontlab.flSnapObject.isZone bool name fontlab.flSnapObject.name object name offsetTo fontlab.flSnapObject.offsetTo = offsetTo (...) QPointF offsetTo(QPointF, uint mode) refCnt fontlab.flSnapObject.refCnt object references count release fontlab.flSnapObject.release = release (...) release() remove fontlab.flSnapObject.remove = remove (...) remove([flObject]) removeChild fontlab.flSnapObject.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flSnapObject.removeProperty = removeProperty (...) removeProperty('key') reset fontlab.flSnapObject.reset = reset (...) reset() restoreHistoryState fontlab.flSnapObject.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flSnapObject.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flSnapObject.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flSnapObject.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flSnapObject.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSnapFlag fontlab.flSnapObject.setSnapFlag = setSnapFlag (...) setSnapFlag(uint role, uint snapFlags) setSnapFlagValue fontlab.flSnapObject.setSnapFlagValue = setSnapFlagValue (...) setSnapFlagValue(uint role, bool) snapFlag fontlab.flSnapObject.snapFlag = snapFlag (...) uint snapFlag(uint role) snapFlags fontlab.flSnapObject.snapFlags uint style fontlab.flSnapObject.style SnapObjectsStyle tag fontlab.flSnapObject.tag = tag (...) tag([string]) type fontlab.flSnapObject.type object type update fontlab.flSnapObject.update = update (...) update()","title":"flSnapObject"},{"location":"fontlab.flSnapObject.html#flsnapobject","text":"","title":"flSnapObject"},{"location":"fontlab.flSnapObject.html#changed","text":"fontlab.flSnapObject.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flSnapObject.html#checkinithistorystate","text":"fontlab.flSnapObject.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flSnapObject.html#clearabovehistory","text":"fontlab.flSnapObject.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flSnapObject.html#clearflag","text":"fontlab.flSnapObject.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flSnapObject.html#clearflags","text":"fontlab.flSnapObject.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flSnapObject.html#clone","text":"fontlab.flSnapObject.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flSnapObject.html#cloneobject","text":"fontlab.flSnapObject.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flSnapObject.html#createhistorystate","text":"fontlab.flSnapObject.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flSnapObject.html#createobject","text":"fontlab.flSnapObject.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flSnapObject.html#currenthistorystate","text":"fontlab.flSnapObject.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flSnapObject.html#distanceto","text":"fontlab.flSnapObject.distanceTo = distanceTo (...) double distanceTo(QPointF, uint mode)","title":"distanceTo"},{"location":"fontlab.flSnapObject.html#flag","text":"fontlab.flSnapObject.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flSnapObject.html#flobjectflags","text":"fontlab.flSnapObject.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flSnapObject.html#gethashcode","text":"fontlab.flSnapObject.getHashCode = getHashCode (...) SnapHashCode getHashCode()","title":"getHashCode"},{"location":"fontlab.flSnapObject.html#getproperties","text":"fontlab.flSnapObject.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flSnapObject.html#getproperty","text":"fontlab.flSnapObject.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flSnapObject.html#getpropertyfloat","text":"fontlab.flSnapObject.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flSnapObject.html#getpropertyint","text":"fontlab.flSnapObject.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flSnapObject.html#haschanges","text":"fontlab.flSnapObject.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flSnapObject.html#hashistorystate","text":"fontlab.flSnapObject.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flSnapObject.html#hashistorystates","text":"fontlab.flSnapObject.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flSnapObject.html#haveobject","text":"fontlab.flSnapObject.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flSnapObject.html#historystates","text":"fontlab.flSnapObject.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flSnapObject.html#id","text":"fontlab.flSnapObject.id object id","title":"id"},{"location":"fontlab.flSnapObject.html#independedall","text":"fontlab.flSnapObject.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flSnapObject.html#initialhistorystate","text":"fontlab.flSnapObject.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flSnapObject.html#instancetype","text":"fontlab.flSnapObject.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flSnapObject.html#ischanged","text":"fontlab.flSnapObject.isChanged bool","title":"isChanged"},{"location":"fontlab.flSnapObject.html#isequal","text":"fontlab.flSnapObject.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flSnapObject.html#isexluded","text":"fontlab.flSnapObject.isExluded bool","title":"isExluded"},{"location":"fontlab.flSnapObject.html#ishint","text":"fontlab.flSnapObject.isHint bool","title":"isHint"},{"location":"fontlab.flSnapObject.html#isinuse","text":"fontlab.flSnapObject.isInUse bool","title":"isInUse"},{"location":"fontlab.flSnapObject.html#ismeasurementline","text":"fontlab.flSnapObject.isMeasurementLine bool","title":"isMeasurementLine"},{"location":"fontlab.flSnapObject.html#isnull","text":"fontlab.flSnapObject.isNull bool","title":"isNull"},{"location":"fontlab.flSnapObject.html#ispassive","text":"fontlab.flSnapObject.isPassive bool","title":"isPassive"},{"location":"fontlab.flSnapObject.html#ispresent","text":"fontlab.flSnapObject.isPresent bool","title":"isPresent"},{"location":"fontlab.flSnapObject.html#isreleased","text":"fontlab.flSnapObject.isReleased bool","title":"isReleased"},{"location":"fontlab.flSnapObject.html#isvalid","text":"fontlab.flSnapObject.isValid bool","title":"isValid"},{"location":"fontlab.flSnapObject.html#iszone","text":"fontlab.flSnapObject.isZone bool","title":"isZone"},{"location":"fontlab.flSnapObject.html#name","text":"fontlab.flSnapObject.name object name","title":"name"},{"location":"fontlab.flSnapObject.html#offsetto","text":"fontlab.flSnapObject.offsetTo = offsetTo (...) QPointF offsetTo(QPointF, uint mode)","title":"offsetTo"},{"location":"fontlab.flSnapObject.html#refcnt","text":"fontlab.flSnapObject.refCnt object references count","title":"refCnt"},{"location":"fontlab.flSnapObject.html#release","text":"fontlab.flSnapObject.release = release (...) release()","title":"release"},{"location":"fontlab.flSnapObject.html#remove","text":"fontlab.flSnapObject.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flSnapObject.html#removechild","text":"fontlab.flSnapObject.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flSnapObject.html#removeproperty","text":"fontlab.flSnapObject.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flSnapObject.html#reset","text":"fontlab.flSnapObject.reset = reset (...) reset()","title":"reset"},{"location":"fontlab.flSnapObject.html#restorehistorystate","text":"fontlab.flSnapObject.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flSnapObject.html#setflag","text":"fontlab.flSnapObject.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flSnapObject.html#setproperty","text":"fontlab.flSnapObject.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flSnapObject.html#setpropertyfloat","text":"fontlab.flSnapObject.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flSnapObject.html#setpropertyint","text":"fontlab.flSnapObject.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flSnapObject.html#setsnapflag","text":"fontlab.flSnapObject.setSnapFlag = setSnapFlag (...) setSnapFlag(uint role, uint snapFlags)","title":"setSnapFlag"},{"location":"fontlab.flSnapObject.html#setsnapflagvalue","text":"fontlab.flSnapObject.setSnapFlagValue = setSnapFlagValue (...) setSnapFlagValue(uint role, bool)","title":"setSnapFlagValue"},{"location":"fontlab.flSnapObject.html#snapflag","text":"fontlab.flSnapObject.snapFlag = snapFlag (...) uint snapFlag(uint role)","title":"snapFlag"},{"location":"fontlab.flSnapObject.html#snapflags","text":"fontlab.flSnapObject.snapFlags uint","title":"snapFlags"},{"location":"fontlab.flSnapObject.html#style","text":"fontlab.flSnapObject.style SnapObjectsStyle","title":"style"},{"location":"fontlab.flSnapObject.html#tag","text":"fontlab.flSnapObject.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flSnapObject.html#type","text":"fontlab.flSnapObject.type object type","title":"type"},{"location":"fontlab.flSnapObject.html#update","text":"fontlab.flSnapObject.update = update (...) update()","title":"update"},{"location":"fontlab.flSnaps.html","text":"flSnaps fontlab.flSnaps = class flSnaps ( object ) snap object constants Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes FastGuidelines = {'FastGuidelines_15': 15, 'FastGuidelines_45': 45, 'FastGuidelines_5': 5, 'FastGuidelines_90': 90} MarkerFlags = {'FillsShape': 16, 'LeftMetric': 32, 'RightMetric': 64} MarkerKey = {'AnyKeyMarker': 48, 'AutoMarker': 32, 'HandMarker': 16, 'UndefinedMarker': 0} SnapLineFlags = {'AbsoluteMarkersPos': 128, 'AscLine': 73792, 'Auto': 32, 'Basic': 0, 'Coordinate': 64, 'DscLine': 139328, 'Horizontal': 8192, 'HorzVert': 24576, 'NoOrdinates': 0, 'NullLine': 204864, ...} SnapMode = {'AllModes': 3, 'BeamAll': 2, 'NoMode': 0, 'Point': 1} SnapStyle = {'NoStyle': 0, 'StyleAutoSnapPoint': 1, 'StyleBackSnapPoint': 5, 'StyleBeamsSnapPoint': 6, 'StyleCloseSnapPoint': 3, 'StyleMetricSnapPoint': 4, 'StyleSnapPoint': 2} ViewMode = {'Hidden': 0, 'ShowAll': 3, 'ShowPermanent': 1, 'ShowTemporary': 2} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T FastGuidelines fontlab.flSnaps.FastGuidelines = {'FastGuidelines_15': 15, 'FastGuidelines_45': 45, 'FastGuidelines_5': 5, 'FastGuidelines_90': 90} MarkerFlags fontlab.flSnaps.MarkerFlags = {'FillsShape': 16, 'LeftMetric': 32, 'RightMetric': 64} MarkerKey fontlab.flSnaps.MarkerKey = {'AnyKeyMarker': 48, 'AutoMarker': 32, 'HandMarker': 16, 'UndefinedMarker': 0} SnapLineFlags fontlab.flSnaps.SnapLineFlags = {'AbsoluteMarkersPos': 128, 'AscLine': 73792, 'Auto': 32, 'Basic': 0, 'Coordinate': 64, 'DscLine': 139328, 'Horizontal': 8192, 'HorzVert': 24576, 'NoOrdinates': 0, 'NullLine': 204864, ...} SnapMode fontlab.flSnaps.SnapMode = {'AllModes': 3, 'BeamAll': 2, 'NoMode': 0, 'Point': 1} SnapStyle fontlab.flSnaps.SnapStyle = {'NoStyle': 0, 'StyleAutoSnapPoint': 1, 'StyleBackSnapPoint': 5, 'StyleBeamsSnapPoint': 6, 'StyleCloseSnapPoint': 3, 'StyleMetricSnapPoint': 4, 'StyleSnapPoint': 2} ViewMode fontlab.flSnaps.ViewMode = {'Hidden': 0, 'ShowAll': 3, 'ShowPermanent': 1, 'ShowTemporary': 2}","title":"flSnaps"},{"location":"fontlab.flSnaps.html#flsnaps","text":"","title":"flSnaps"},{"location":"fontlab.flSnaps.html#fastguidelines","text":"fontlab.flSnaps.FastGuidelines = {'FastGuidelines_15': 15, 'FastGuidelines_45': 45, 'FastGuidelines_5': 5, 'FastGuidelines_90': 90}","title":"FastGuidelines"},{"location":"fontlab.flSnaps.html#markerflags","text":"fontlab.flSnaps.MarkerFlags = {'FillsShape': 16, 'LeftMetric': 32, 'RightMetric': 64}","title":"MarkerFlags"},{"location":"fontlab.flSnaps.html#markerkey","text":"fontlab.flSnaps.MarkerKey = {'AnyKeyMarker': 48, 'AutoMarker': 32, 'HandMarker': 16, 'UndefinedMarker': 0}","title":"MarkerKey"},{"location":"fontlab.flSnaps.html#snaplineflags","text":"fontlab.flSnaps.SnapLineFlags = {'AbsoluteMarkersPos': 128, 'AscLine': 73792, 'Auto': 32, 'Basic': 0, 'Coordinate': 64, 'DscLine': 139328, 'Horizontal': 8192, 'HorzVert': 24576, 'NoOrdinates': 0, 'NullLine': 204864, ...}","title":"SnapLineFlags"},{"location":"fontlab.flSnaps.html#snapmode","text":"fontlab.flSnaps.SnapMode = {'AllModes': 3, 'BeamAll': 2, 'NoMode': 0, 'Point': 1}","title":"SnapMode"},{"location":"fontlab.flSnaps.html#snapstyle","text":"fontlab.flSnaps.SnapStyle = {'NoStyle': 0, 'StyleAutoSnapPoint': 1, 'StyleBackSnapPoint': 5, 'StyleBeamsSnapPoint': 6, 'StyleCloseSnapPoint': 3, 'StyleMetricSnapPoint': 4, 'StyleSnapPoint': 2}","title":"SnapStyle"},{"location":"fontlab.flSnaps.html#viewmode","text":"fontlab.flSnaps.ViewMode = {'Hidden': 0, 'ShowAll': 3, 'ShowPermanent': 1, 'ShowTemporary': 2}","title":"ViewMode"},{"location":"fontlab.flStem.html","text":"flStem fontlab.flStem = class flStem ( object ) flStem representation Constructors: flStem() flStem(double _v[, QString _n = ]) flStem(fgStem) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value guaranteeName (...) guaranteeName () linear (...) int linear (double upm, int k) ppm (...) int ppm (double upm, int k) tagsSet (...) QSet /Nothing tagsSet () toStem (...) toStem (fgStem) Descriptors name string program QSet programText QString tags string value double Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T guaranteeName fontlab.flStem.guaranteeName = guaranteeName (...) guaranteeName() linear fontlab.flStem.linear = linear (...) int linear(double upm, int k) name fontlab.flStem.name string ppm fontlab.flStem.ppm = ppm (...) int ppm(double upm, int k) program fontlab.flStem.program QSet programText fontlab.flStem.programText QString tags fontlab.flStem.tags string tagsSet fontlab.flStem.tagsSet = tagsSet (...) QSet /Nothing tagsSet() toStem fontlab.flStem.toStem = toStem (...) toStem(fgStem) value fontlab.flStem.value double","title":"flStem"},{"location":"fontlab.flStem.html#flstem","text":"","title":"flStem"},{"location":"fontlab.flStem.html#guaranteename","text":"fontlab.flStem.guaranteeName = guaranteeName (...) guaranteeName()","title":"guaranteeName"},{"location":"fontlab.flStem.html#linear","text":"fontlab.flStem.linear = linear (...) int linear(double upm, int k)","title":"linear"},{"location":"fontlab.flStem.html#name","text":"fontlab.flStem.name string","title":"name"},{"location":"fontlab.flStem.html#ppm","text":"fontlab.flStem.ppm = ppm (...) int ppm(double upm, int k)","title":"ppm"},{"location":"fontlab.flStem.html#program","text":"fontlab.flStem.program QSet","title":"program"},{"location":"fontlab.flStem.html#programtext","text":"fontlab.flStem.programText QString","title":"programText"},{"location":"fontlab.flStem.html#tags","text":"fontlab.flStem.tags string","title":"tags"},{"location":"fontlab.flStem.html#tagsset","text":"fontlab.flStem.tagsSet = tagsSet (...) QSet /Nothing tagsSet()","title":"tagsSet"},{"location":"fontlab.flStem.html#tostem","text":"fontlab.flStem.toStem = toStem (...) toStem(fgStem)","title":"toStem"},{"location":"fontlab.flStem.html#value","text":"fontlab.flStem.value double","title":"value"},{"location":"fontlab.flSticker.html","text":"flSticker fontlab.flSticker = class flSticker ( object ) flSticker representation Constructors: flSticker() flSticker(flObject) flSticker(flSticker) flSticker(QString) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) move (...) move (QPointF) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors boundingBox QRectF boundingBox() hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count shape flShape shape() text QString textRect QRectF type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} boundingBox fontlab.flSticker.boundingBox QRectF boundingBox() changed fontlab.flSticker.changed = changed (...) changed() checkInitHistoryState fontlab.flSticker.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flSticker.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flSticker.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flSticker.clearFlags = clearFlags (...) clearFlags() clone fontlab.flSticker.clone = clone (...) Clone the object cloneObject fontlab.flSticker.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flSticker.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flSticker.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flSticker.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flSticker.flag = flag (...) flag(uint f) flObjectFlags fontlab.flSticker.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flSticker.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flSticker.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flSticker.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flSticker.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flSticker.hasChanges bool hasHistoryState fontlab.flSticker.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flSticker.hasHistoryStates bool haveObject fontlab.flSticker.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flSticker.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flSticker.id object id independedAll fontlab.flSticker.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flSticker.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flSticker.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flSticker.isChanged bool isEqual fontlab.flSticker.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flSticker.isNull bool isPresent fontlab.flSticker.isPresent bool isReleased fontlab.flSticker.isReleased bool isValid fontlab.flSticker.isValid bool move fontlab.flSticker.move = move (...) move(QPointF) name fontlab.flSticker.name object name refCnt fontlab.flSticker.refCnt object references count release fontlab.flSticker.release = release (...) release() remove fontlab.flSticker.remove = remove (...) remove([flObject]) removeChild fontlab.flSticker.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flSticker.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flSticker.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) setFlag fontlab.flSticker.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flSticker.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flSticker.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flSticker.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' shape fontlab.flSticker.shape flShape shape() tag fontlab.flSticker.tag = tag (...) tag([string]) text fontlab.flSticker.text QString textRect fontlab.flSticker.textRect QRectF type fontlab.flSticker.type object type update fontlab.flSticker.update = update (...) update()","title":"flSticker"},{"location":"fontlab.flSticker.html#flsticker","text":"","title":"flSticker"},{"location":"fontlab.flSticker.html#boundingbox","text":"fontlab.flSticker.boundingBox QRectF boundingBox()","title":"boundingBox"},{"location":"fontlab.flSticker.html#changed","text":"fontlab.flSticker.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flSticker.html#checkinithistorystate","text":"fontlab.flSticker.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flSticker.html#clearabovehistory","text":"fontlab.flSticker.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flSticker.html#clearflag","text":"fontlab.flSticker.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flSticker.html#clearflags","text":"fontlab.flSticker.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flSticker.html#clone","text":"fontlab.flSticker.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flSticker.html#cloneobject","text":"fontlab.flSticker.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flSticker.html#createhistorystate","text":"fontlab.flSticker.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flSticker.html#createobject","text":"fontlab.flSticker.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flSticker.html#currenthistorystate","text":"fontlab.flSticker.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flSticker.html#flag","text":"fontlab.flSticker.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flSticker.html#flobjectflags","text":"fontlab.flSticker.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flSticker.html#getproperties","text":"fontlab.flSticker.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flSticker.html#getproperty","text":"fontlab.flSticker.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flSticker.html#getpropertyfloat","text":"fontlab.flSticker.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flSticker.html#getpropertyint","text":"fontlab.flSticker.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flSticker.html#haschanges","text":"fontlab.flSticker.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flSticker.html#hashistorystate","text":"fontlab.flSticker.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flSticker.html#hashistorystates","text":"fontlab.flSticker.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flSticker.html#haveobject","text":"fontlab.flSticker.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flSticker.html#historystates","text":"fontlab.flSticker.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flSticker.html#id","text":"fontlab.flSticker.id object id","title":"id"},{"location":"fontlab.flSticker.html#independedall","text":"fontlab.flSticker.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flSticker.html#initialhistorystate","text":"fontlab.flSticker.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flSticker.html#instancetype","text":"fontlab.flSticker.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flSticker.html#ischanged","text":"fontlab.flSticker.isChanged bool","title":"isChanged"},{"location":"fontlab.flSticker.html#isequal","text":"fontlab.flSticker.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flSticker.html#isnull","text":"fontlab.flSticker.isNull bool","title":"isNull"},{"location":"fontlab.flSticker.html#ispresent","text":"fontlab.flSticker.isPresent bool","title":"isPresent"},{"location":"fontlab.flSticker.html#isreleased","text":"fontlab.flSticker.isReleased bool","title":"isReleased"},{"location":"fontlab.flSticker.html#isvalid","text":"fontlab.flSticker.isValid bool","title":"isValid"},{"location":"fontlab.flSticker.html#move","text":"fontlab.flSticker.move = move (...) move(QPointF)","title":"move"},{"location":"fontlab.flSticker.html#name","text":"fontlab.flSticker.name object name","title":"name"},{"location":"fontlab.flSticker.html#refcnt","text":"fontlab.flSticker.refCnt object references count","title":"refCnt"},{"location":"fontlab.flSticker.html#release","text":"fontlab.flSticker.release = release (...) release()","title":"release"},{"location":"fontlab.flSticker.html#remove","text":"fontlab.flSticker.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flSticker.html#removechild","text":"fontlab.flSticker.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flSticker.html#removeproperty","text":"fontlab.flSticker.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flSticker.html#restorehistorystate","text":"fontlab.flSticker.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flSticker.html#setflag","text":"fontlab.flSticker.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flSticker.html#setproperty","text":"fontlab.flSticker.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flSticker.html#setpropertyfloat","text":"fontlab.flSticker.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flSticker.html#setpropertyint","text":"fontlab.flSticker.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flSticker.html#shape","text":"fontlab.flSticker.shape flShape shape()","title":"shape"},{"location":"fontlab.flSticker.html#tag","text":"fontlab.flSticker.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flSticker.html#text","text":"fontlab.flSticker.text QString","title":"text"},{"location":"fontlab.flSticker.html#textrect","text":"fontlab.flSticker.textRect QRectF","title":"textRect"},{"location":"fontlab.flSticker.html#type","text":"fontlab.flSticker.type object type","title":"type"},{"location":"fontlab.flSticker.html#update","text":"fontlab.flSticker.update = update (...) update()","title":"update"},{"location":"fontlab.flTTHCommand.html","text":"flTTHCommand fontlab.flTTHCommand = class flTTHCommand ( object ) flTTHCommand representation Constructors: flTTHCommand() - default Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value isDelta (...) bool isDelta () isFinal (...) bool isFinal () isHorizontal (...) bool isHorizontal () isVertical (...) bool isVertical () nodesCount (...) int nodesCount () parametersCount (...) int parametersCount () stemIndex (...) int stemIndex () zoneIndex (...) int zoneIndex () Descriptors code int parameters QList point_names QList Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T code fontlab.flTTHCommand.code int isDelta fontlab.flTTHCommand.isDelta = isDelta (...) bool isDelta() isFinal fontlab.flTTHCommand.isFinal = isFinal (...) bool isFinal() isHorizontal fontlab.flTTHCommand.isHorizontal = isHorizontal (...) bool isHorizontal() isVertical fontlab.flTTHCommand.isVertical = isVertical (...) bool isVertical() nodesCount fontlab.flTTHCommand.nodesCount = nodesCount (...) int nodesCount() parameters fontlab.flTTHCommand.parameters QList parametersCount fontlab.flTTHCommand.parametersCount = parametersCount (...) int parametersCount() point_names fontlab.flTTHCommand.point_names QList stemIndex fontlab.flTTHCommand.stemIndex = stemIndex (...) int stemIndex() zoneIndex fontlab.flTTHCommand.zoneIndex = zoneIndex (...) int zoneIndex()","title":"flTTHCommand"},{"location":"fontlab.flTTHCommand.html#fltthcommand","text":"","title":"flTTHCommand"},{"location":"fontlab.flTTHCommand.html#code","text":"fontlab.flTTHCommand.code int","title":"code"},{"location":"fontlab.flTTHCommand.html#isdelta","text":"fontlab.flTTHCommand.isDelta = isDelta (...) bool isDelta()","title":"isDelta"},{"location":"fontlab.flTTHCommand.html#isfinal","text":"fontlab.flTTHCommand.isFinal = isFinal (...) bool isFinal()","title":"isFinal"},{"location":"fontlab.flTTHCommand.html#ishorizontal","text":"fontlab.flTTHCommand.isHorizontal = isHorizontal (...) bool isHorizontal()","title":"isHorizontal"},{"location":"fontlab.flTTHCommand.html#isvertical","text":"fontlab.flTTHCommand.isVertical = isVertical (...) bool isVertical()","title":"isVertical"},{"location":"fontlab.flTTHCommand.html#nodescount","text":"fontlab.flTTHCommand.nodesCount = nodesCount (...) int nodesCount()","title":"nodesCount"},{"location":"fontlab.flTTHCommand.html#parameters","text":"fontlab.flTTHCommand.parameters QList","title":"parameters"},{"location":"fontlab.flTTHCommand.html#parameterscount","text":"fontlab.flTTHCommand.parametersCount = parametersCount (...) int parametersCount()","title":"parametersCount"},{"location":"fontlab.flTTHCommand.html#point_names","text":"fontlab.flTTHCommand.point_names QList","title":"point_names"},{"location":"fontlab.flTTHCommand.html#stemindex","text":"fontlab.flTTHCommand.stemIndex = stemIndex (...) int stemIndex()","title":"stemIndex"},{"location":"fontlab.flTTHCommand.html#zoneindex","text":"fontlab.flTTHCommand.zoneIndex = zoneIndex (...) int zoneIndex()","title":"zoneIndex"},{"location":"fontlab.flTextBlock.html","text":"flTextBlock fontlab.flTextBlock = class flTextBlock ( object ) flTextBlock representation Constructors: flTextBlock() flTextBlock(flObject) flTextBlock(flTextBlock) flTextBlock(flPackage, flTextObject[, int font_size=42[, int formatMode=tbfText[, QRectF canvas_rect=QRectF(0,0, 800,600)]]]) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value activeObjectChanged (...) flNotifier activeObjectChanged () activeRowRect (...) QRectF activeRowRect () addFeature (...) addFeature (QString feature) changed (...) changed () charsCount (...) int charsCount () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() drawContent (...) drawContent (QPainter*, flCanvas, QRectF painted_nodes_screen_rect) features (...) list(QString) features () flag (...) flag (uint f) formatChanged (...) flNotifier formatChanged () getActiveGlyph (...) flGlyphInfo/Nothing getActiveGlyph () getAllGlyphs (...) list(flGlyphInfo)/Nothing getAllGlyphs ([int line_index = -1]) getCurrentPosition (...) QPointF getCurrentPosition () getGlyphAt (...) flGlyphInfo/Nothinf getGlyphAt (int glyph_index) getGlyphInfo (...) flGlyphInfo/Nothing getGlyphInfo (fgSymbol, & ) getGlyphTransform (...) QTransform getGlyphTransform (int glyph_index) getGlyphsInLine (...) list(flGlyphInfo)/Nothing getGlyphsInLine (flGlyphInfo | int lineIndex) getHitGlyph (...) flGlyphInfo/Nothing getHitGlyph (QPointF canvas_pos) getHitToShapeGlyph (...) flGlyphInfo/Nothing getHitToShapeGlyph (QPointF canvas_pos) getHitToShapes (...) list(flContourInfo)/Nothing getHitToShapes (QPointF canvas_pos) getIntersectsGlyphs (...) list(flGlyphInfo)/Nothing getIntersectsGlyphs (QRectF canvas_rect) getLineIndex (...) int getLineIndex (int glyph_index) getLineLocation (...) int getLineLocation (flGlyphInfo glyph_info) getMouseHitNode (...) flNodeInfo/Nothing getMouseHitNode () getNearbyGlyphs (...) list(flGlyphInfo)/Nothing getNearbyGlyphs (QPointF text_block_point, double max_dist) getNextGlyphInLine (...) flGlyphInfo/Nothing getNextGlyphInLine (int glyph_index) getPrevGlyphInLine (...) flGlyphInfo/Nothing getPrevGlyphInLine (int glyph_index) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getScvNode (...) flNodeInfo/Nothing getScvNode () getSelectedCharacters (...) fgSymbolList/Nothing getSelectedCharacters () getSelectedGlyphs (...) list(flGlyphInfo)/Nothing getSelectedGlyphs () glyphsBoundsOnCanvas (...) QRectF glyphsBoundsOnCanvas (EditMode) glyphsChanged (...) glyphsChanged () glyphsCount (...) int glyphsCount () hasHistoryState (...) hasHistoryState (uint history_ix) hasHoveredNodeEdit (...) bool hasHoveredNodeEdit () haveText (...) bool haveText () historyStates (...) historyStates (bool accepted_state) hoveredNodeEdit (...) flNodeInfo hoveredNodeEdit () hoveredNodeEditDetails (...) HoveredInfoDetails hoveredNodeEditDetails () independedAll (...) independedAll () init (...) init (flCanvas & canvas) initialHistoryState (...) initialHistoryIx() isAltPressed (...) bool isAltPressed () isEqual (...) isEqual (flObject) isFramed (...) bool isFramed () isMetaPressed (...) bool isMetaPressed () keyPressEvent (...) bool keyPressEvent (QKeyEvent*) lastCharIndex (...) int lastCharIndex () lastIndex (...) int lastIndex () mouseDoubleClickEvent (...) bool mouseDoubleClickEvent (QMouseEvent*) mouseMoveEvent (...) bool mouseMoveEvent (QMouseEvent*) mousePressEvent (...) bool mousePressEvent (QMouseEvent*) mouseReleaseEvent (...) bool mouseReleaseEvent (QMouseEvent*) paintedNodesScreenRect (...) QRectF paintedNodesScreenRect () paragraphBlock (...) fgParagraphBlock paragraphBlock () parentTextBlock (...) flTextBlock parentTextBlock () reformat (...) reformat () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeFeature (...) removeFeature (QString feature) removeFeatures (...) removeFeatures () removeProperty (...) removeProperty ('key') removedFromCanvas (...) removedFromCanvas () restoreHistoryState (...) restoreHistoryState (uint history_ix) setActiveGlyph (...) setActiveGlyph (flGlyphInfo) setAltPressed (...) setAltPressed (bool b[, bool redraw = true]) setCheckMouseHoverNode (...) setCheckMouseHoverNode (bool) setExclusiveEditing (...) setExclusiveEditing (bool) setFeatures (...) setFeatures (list(QString), bool reformat) setFixedHeight (...) setFixedHeight (bool, bool) setFlag (...) setFlag (uint f [, bool value]) setFrameSize (...) setFrameSize (QSizeF canvas_size) setFrameWidth (...) setFrameWidth (double) setLeftMetric (...) setLeftMetric (flGlyphInfo glyph_info, bool measurement) setMetaPressed (...) setMetaPressed (bool b[, bool redraw = true]) setParentTextBlock (...) setParentTextBlock (flTextBlock) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setRightMetric (...) setRightMetric (QPointF, flGlyphInfo glyph_info, bool measurement) setShowCursor (...) setShowCursor (bool) setShowNodes (...) setShowNodes (bool) setTextBlockMode (...) setTextBlockMode (EditMode text_block_mode[, QPoint viewport_pos=QPoint()]) symbolList (...) fgSymbolList symbolList () tag (...) tag ([string]) textFits (...) bool textFits () update (...) update () updateSymbols (...) updateSymbols () visibleShapes (...) list(flShape)/Nothing visibleShapes () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flTextBlock createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors editMode EditMode fontSize int formatMode int frameRect QRectF hasChanges bool hasHistoryStates bool id object id initiallySelected bool isChanged bool isNull bool isPresent bool isReleased bool isValid bool kerningProcessing bool layoutProcessing bool locked bool marksProcessing bool name object name package flPackage refCnt object references count script uint textObject flTextObject transform QTransform type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activeObjectChanged fontlab.flTextBlock.activeObjectChanged = activeObjectChanged (...) flNotifier activeObjectChanged() activeRowRect fontlab.flTextBlock.activeRowRect = activeRowRect (...) QRectF activeRowRect() addFeature fontlab.flTextBlock.addFeature = addFeature (...) addFeature(QString feature) changed fontlab.flTextBlock.changed = changed (...) changed() charsCount fontlab.flTextBlock.charsCount = charsCount (...) int charsCount() checkInitHistoryState fontlab.flTextBlock.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flTextBlock.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flTextBlock.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flTextBlock.clearFlags = clearFlags (...) clearFlags() clone fontlab.flTextBlock.clone = clone (...) Clone the object cloneObject fontlab.flTextBlock.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flTextBlock.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flTextBlock.createInstance = createInstance (...) flTextBlock createInstance() createObject fontlab.flTextBlock.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flTextBlock.currentHistoryState = currentHistoryState (...) currentHistoryIx() drawContent fontlab.flTextBlock.drawContent = drawContent (...) drawContent(QPainter*, flCanvas, QRectF painted_nodes_screen_rect) editMode fontlab.flTextBlock.editMode EditMode features fontlab.flTextBlock.features = features (...) list(QString) features() flag fontlab.flTextBlock.flag = flag (...) flag(uint f) flObjectFlags fontlab.flTextBlock.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} fontSize fontlab.flTextBlock.fontSize int formatChanged fontlab.flTextBlock.formatChanged = formatChanged (...) flNotifier formatChanged() formatMode fontlab.flTextBlock.formatMode int frameRect fontlab.flTextBlock.frameRect QRectF getActiveGlyph fontlab.flTextBlock.getActiveGlyph = getActiveGlyph (...) flGlyphInfo/Nothing getActiveGlyph() getAllGlyphs fontlab.flTextBlock.getAllGlyphs = getAllGlyphs (...) list(flGlyphInfo)/Nothing getAllGlyphs([int line_index = -1]) getCurrentPosition fontlab.flTextBlock.getCurrentPosition = getCurrentPosition (...) QPointF getCurrentPosition() getGlyphAt fontlab.flTextBlock.getGlyphAt = getGlyphAt (...) flGlyphInfo/Nothinf getGlyphAt(int glyph_index) getGlyphInfo fontlab.flTextBlock.getGlyphInfo = getGlyphInfo (...) flGlyphInfo/Nothing getGlyphInfo(fgSymbol, & ) getGlyphsInLine fontlab.flTextBlock.getGlyphsInLine = getGlyphsInLine (...) list(flGlyphInfo)/Nothing getGlyphsInLine(flGlyphInfo | int lineIndex) getGlyphTransform fontlab.flTextBlock.getGlyphTransform = getGlyphTransform (...) QTransform getGlyphTransform(int glyph_index) getHitGlyph fontlab.flTextBlock.getHitGlyph = getHitGlyph (...) flGlyphInfo/Nothing getHitGlyph(QPointF canvas_pos) getHitToShapeGlyph fontlab.flTextBlock.getHitToShapeGlyph = getHitToShapeGlyph (...) flGlyphInfo/Nothing getHitToShapeGlyph(QPointF canvas_pos) getHitToShapes fontlab.flTextBlock.getHitToShapes = getHitToShapes (...) list(flContourInfo)/Nothing getHitToShapes(QPointF canvas_pos) getIntersectsGlyphs fontlab.flTextBlock.getIntersectsGlyphs = getIntersectsGlyphs (...) list(flGlyphInfo)/Nothing getIntersectsGlyphs(QRectF canvas_rect) getLineIndex fontlab.flTextBlock.getLineIndex = getLineIndex (...) int getLineIndex(int glyph_index) getLineLocation fontlab.flTextBlock.getLineLocation = getLineLocation (...) int getLineLocation(flGlyphInfo glyph_info) getMouseHitNode fontlab.flTextBlock.getMouseHitNode = getMouseHitNode (...) flNodeInfo/Nothing getMouseHitNode() getNearbyGlyphs fontlab.flTextBlock.getNearbyGlyphs = getNearbyGlyphs (...) list(flGlyphInfo)/Nothing getNearbyGlyphs(QPointF text_block_point, double max_dist) getNextGlyphInLine fontlab.flTextBlock.getNextGlyphInLine = getNextGlyphInLine (...) flGlyphInfo/Nothing getNextGlyphInLine(int glyph_index) getPrevGlyphInLine fontlab.flTextBlock.getPrevGlyphInLine = getPrevGlyphInLine (...) flGlyphInfo/Nothing getPrevGlyphInLine(int glyph_index) getProperties fontlab.flTextBlock.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flTextBlock.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flTextBlock.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flTextBlock.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' getScvNode fontlab.flTextBlock.getScvNode = getScvNode (...) flNodeInfo/Nothing getScvNode() getSelectedCharacters fontlab.flTextBlock.getSelectedCharacters = getSelectedCharacters (...) fgSymbolList/Nothing getSelectedCharacters() getSelectedGlyphs fontlab.flTextBlock.getSelectedGlyphs = getSelectedGlyphs (...) list(flGlyphInfo)/Nothing getSelectedGlyphs() glyphsBoundsOnCanvas fontlab.flTextBlock.glyphsBoundsOnCanvas = glyphsBoundsOnCanvas (...) QRectF glyphsBoundsOnCanvas(EditMode) glyphsChanged fontlab.flTextBlock.glyphsChanged = glyphsChanged (...) glyphsChanged() glyphsCount fontlab.flTextBlock.glyphsCount = glyphsCount (...) int glyphsCount() hasChanges fontlab.flTextBlock.hasChanges bool hasHistoryState fontlab.flTextBlock.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flTextBlock.hasHistoryStates bool hasHoveredNodeEdit fontlab.flTextBlock.hasHoveredNodeEdit = hasHoveredNodeEdit (...) bool hasHoveredNodeEdit() haveObject fontlab.flTextBlock.haveObject = haveObject (...) bool haveObject(uint); haveText fontlab.flTextBlock.haveText = haveText (...) bool haveText() historyStates fontlab.flTextBlock.historyStates = historyStates (...) historyStates(bool accepted_state) hoveredNodeEdit fontlab.flTextBlock.hoveredNodeEdit = hoveredNodeEdit (...) flNodeInfo hoveredNodeEdit() hoveredNodeEditDetails fontlab.flTextBlock.hoveredNodeEditDetails = hoveredNodeEditDetails (...) HoveredInfoDetails hoveredNodeEditDetails() id fontlab.flTextBlock.id object id independedAll fontlab.flTextBlock.independedAll = independedAll (...) independedAll() init fontlab.flTextBlock.init = init (...) init(flCanvas & canvas) initialHistoryState fontlab.flTextBlock.initialHistoryState = initialHistoryState (...) initialHistoryIx() initiallySelected fontlab.flTextBlock.initiallySelected bool instanceType fontlab.flTextBlock.instanceType = instanceType (...) int instanceType(); isAltPressed fontlab.flTextBlock.isAltPressed = isAltPressed (...) bool isAltPressed() isChanged fontlab.flTextBlock.isChanged bool isEqual fontlab.flTextBlock.isEqual = isEqual (...) isEqual(flObject) isFramed fontlab.flTextBlock.isFramed = isFramed (...) bool isFramed() isMetaPressed fontlab.flTextBlock.isMetaPressed = isMetaPressed (...) bool isMetaPressed() isNull fontlab.flTextBlock.isNull bool isPresent fontlab.flTextBlock.isPresent bool isReleased fontlab.flTextBlock.isReleased bool isValid fontlab.flTextBlock.isValid bool kerningProcessing fontlab.flTextBlock.kerningProcessing bool keyPressEvent fontlab.flTextBlock.keyPressEvent = keyPressEvent (...) bool keyPressEvent(QKeyEvent*) lastCharIndex fontlab.flTextBlock.lastCharIndex = lastCharIndex (...) int lastCharIndex() lastIndex fontlab.flTextBlock.lastIndex = lastIndex (...) int lastIndex() layoutProcessing fontlab.flTextBlock.layoutProcessing bool locked fontlab.flTextBlock.locked bool marksProcessing fontlab.flTextBlock.marksProcessing bool mouseDoubleClickEvent fontlab.flTextBlock.mouseDoubleClickEvent = mouseDoubleClickEvent (...) bool mouseDoubleClickEvent(QMouseEvent*) mouseMoveEvent fontlab.flTextBlock.mouseMoveEvent = mouseMoveEvent (...) bool mouseMoveEvent(QMouseEvent*) mousePressEvent fontlab.flTextBlock.mousePressEvent = mousePressEvent (...) bool mousePressEvent(QMouseEvent*) mouseReleaseEvent fontlab.flTextBlock.mouseReleaseEvent = mouseReleaseEvent (...) bool mouseReleaseEvent(QMouseEvent*) name fontlab.flTextBlock.name object name package fontlab.flTextBlock.package flPackage paintedNodesScreenRect fontlab.flTextBlock.paintedNodesScreenRect = paintedNodesScreenRect (...) QRectF paintedNodesScreenRect() paragraphBlock fontlab.flTextBlock.paragraphBlock = paragraphBlock (...) fgParagraphBlock paragraphBlock() parentTextBlock fontlab.flTextBlock.parentTextBlock = parentTextBlock (...) flTextBlock parentTextBlock() refCnt fontlab.flTextBlock.refCnt object references count reformat fontlab.flTextBlock.reformat = reformat (...) reformat() release fontlab.flTextBlock.release = release (...) release() remove fontlab.flTextBlock.remove = remove (...) remove([flObject]) removeChild fontlab.flTextBlock.removeChild = removeChild (...) removeChild(flObject) removedFromCanvas fontlab.flTextBlock.removedFromCanvas = removedFromCanvas (...) removedFromCanvas() removeFeature fontlab.flTextBlock.removeFeature = removeFeature (...) removeFeature(QString feature) removeFeatures fontlab.flTextBlock.removeFeatures = removeFeatures (...) removeFeatures() removeProperty fontlab.flTextBlock.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flTextBlock.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) script fontlab.flTextBlock.script uint setActiveGlyph fontlab.flTextBlock.setActiveGlyph = setActiveGlyph (...) setActiveGlyph(flGlyphInfo) setAltPressed fontlab.flTextBlock.setAltPressed = setAltPressed (...) setAltPressed(bool b[, bool redraw = true]) setCheckMouseHoverNode fontlab.flTextBlock.setCheckMouseHoverNode = setCheckMouseHoverNode (...) setCheckMouseHoverNode(bool) setExclusiveEditing fontlab.flTextBlock.setExclusiveEditing = setExclusiveEditing (...) setExclusiveEditing(bool) setFeatures fontlab.flTextBlock.setFeatures = setFeatures (...) setFeatures(list(QString), bool reformat) setFixedHeight fontlab.flTextBlock.setFixedHeight = setFixedHeight (...) setFixedHeight(bool, bool) setFlag fontlab.flTextBlock.setFlag = setFlag (...) setFlag(uint f [, bool value]) setFrameSize fontlab.flTextBlock.setFrameSize = setFrameSize (...) setFrameSize(QSizeF canvas_size) setFrameWidth fontlab.flTextBlock.setFrameWidth = setFrameWidth (...) setFrameWidth(double) setLeftMetric fontlab.flTextBlock.setLeftMetric = setLeftMetric (...) setLeftMetric(flGlyphInfo glyph_info, bool measurement) setMetaPressed fontlab.flTextBlock.setMetaPressed = setMetaPressed (...) setMetaPressed(bool b[, bool redraw = true]) setParentTextBlock fontlab.flTextBlock.setParentTextBlock = setParentTextBlock (...) setParentTextBlock(flTextBlock) setProperty fontlab.flTextBlock.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flTextBlock.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flTextBlock.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setRightMetric fontlab.flTextBlock.setRightMetric = setRightMetric (...) setRightMetric(QPointF, flGlyphInfo glyph_info, bool measurement) setShowCursor fontlab.flTextBlock.setShowCursor = setShowCursor (...) setShowCursor(bool) setShowNodes fontlab.flTextBlock.setShowNodes = setShowNodes (...) setShowNodes(bool) setTextBlockMode fontlab.flTextBlock.setTextBlockMode = setTextBlockMode (...) setTextBlockMode(EditMode text_block_mode[, QPoint viewport_pos=QPoint()]) symbolList fontlab.flTextBlock.symbolList = symbolList (...) fgSymbolList symbolList() tag fontlab.flTextBlock.tag = tag (...) tag([string]) textFits fontlab.flTextBlock.textFits = textFits (...) bool textFits() textObject fontlab.flTextBlock.textObject flTextObject transform fontlab.flTextBlock.transform QTransform type fontlab.flTextBlock.type object type update fontlab.flTextBlock.update = update (...) update() updateSymbols fontlab.flTextBlock.updateSymbols = updateSymbols (...) updateSymbols() visibleShapes fontlab.flTextBlock.visibleShapes = visibleShapes (...) list(flShape)/Nothing visibleShapes()","title":"flTextBlock"},{"location":"fontlab.flTextBlock.html#fltextblock","text":"","title":"flTextBlock"},{"location":"fontlab.flTextBlock.html#activeobjectchanged","text":"fontlab.flTextBlock.activeObjectChanged = activeObjectChanged (...) flNotifier activeObjectChanged()","title":"activeObjectChanged"},{"location":"fontlab.flTextBlock.html#activerowrect","text":"fontlab.flTextBlock.activeRowRect = activeRowRect (...) QRectF activeRowRect()","title":"activeRowRect"},{"location":"fontlab.flTextBlock.html#addfeature","text":"fontlab.flTextBlock.addFeature = addFeature (...) addFeature(QString feature)","title":"addFeature"},{"location":"fontlab.flTextBlock.html#changed","text":"fontlab.flTextBlock.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flTextBlock.html#charscount","text":"fontlab.flTextBlock.charsCount = charsCount (...) int charsCount()","title":"charsCount"},{"location":"fontlab.flTextBlock.html#checkinithistorystate","text":"fontlab.flTextBlock.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flTextBlock.html#clearabovehistory","text":"fontlab.flTextBlock.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flTextBlock.html#clearflag","text":"fontlab.flTextBlock.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flTextBlock.html#clearflags","text":"fontlab.flTextBlock.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flTextBlock.html#clone","text":"fontlab.flTextBlock.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flTextBlock.html#cloneobject","text":"fontlab.flTextBlock.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flTextBlock.html#createhistorystate","text":"fontlab.flTextBlock.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flTextBlock.html#createinstance","text":"fontlab.flTextBlock.createInstance = createInstance (...) flTextBlock createInstance()","title":"createInstance"},{"location":"fontlab.flTextBlock.html#createobject","text":"fontlab.flTextBlock.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flTextBlock.html#currenthistorystate","text":"fontlab.flTextBlock.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flTextBlock.html#drawcontent","text":"fontlab.flTextBlock.drawContent = drawContent (...) drawContent(QPainter*, flCanvas, QRectF painted_nodes_screen_rect)","title":"drawContent"},{"location":"fontlab.flTextBlock.html#editmode","text":"fontlab.flTextBlock.editMode EditMode","title":"editMode"},{"location":"fontlab.flTextBlock.html#features","text":"fontlab.flTextBlock.features = features (...) list(QString) features()","title":"features"},{"location":"fontlab.flTextBlock.html#flag","text":"fontlab.flTextBlock.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flTextBlock.html#flobjectflags","text":"fontlab.flTextBlock.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flTextBlock.html#fontsize","text":"fontlab.flTextBlock.fontSize int","title":"fontSize"},{"location":"fontlab.flTextBlock.html#formatchanged","text":"fontlab.flTextBlock.formatChanged = formatChanged (...) flNotifier formatChanged()","title":"formatChanged"},{"location":"fontlab.flTextBlock.html#formatmode","text":"fontlab.flTextBlock.formatMode int","title":"formatMode"},{"location":"fontlab.flTextBlock.html#framerect","text":"fontlab.flTextBlock.frameRect QRectF","title":"frameRect"},{"location":"fontlab.flTextBlock.html#getactiveglyph","text":"fontlab.flTextBlock.getActiveGlyph = getActiveGlyph (...) flGlyphInfo/Nothing getActiveGlyph()","title":"getActiveGlyph"},{"location":"fontlab.flTextBlock.html#getallglyphs","text":"fontlab.flTextBlock.getAllGlyphs = getAllGlyphs (...) list(flGlyphInfo)/Nothing getAllGlyphs([int line_index = -1])","title":"getAllGlyphs"},{"location":"fontlab.flTextBlock.html#getcurrentposition","text":"fontlab.flTextBlock.getCurrentPosition = getCurrentPosition (...) QPointF getCurrentPosition()","title":"getCurrentPosition"},{"location":"fontlab.flTextBlock.html#getglyphat","text":"fontlab.flTextBlock.getGlyphAt = getGlyphAt (...) flGlyphInfo/Nothinf getGlyphAt(int glyph_index)","title":"getGlyphAt"},{"location":"fontlab.flTextBlock.html#getglyphinfo","text":"fontlab.flTextBlock.getGlyphInfo = getGlyphInfo (...) flGlyphInfo/Nothing getGlyphInfo(fgSymbol, & )","title":"getGlyphInfo"},{"location":"fontlab.flTextBlock.html#getglyphsinline","text":"fontlab.flTextBlock.getGlyphsInLine = getGlyphsInLine (...) list(flGlyphInfo)/Nothing getGlyphsInLine(flGlyphInfo | int lineIndex)","title":"getGlyphsInLine"},{"location":"fontlab.flTextBlock.html#getglyphtransform","text":"fontlab.flTextBlock.getGlyphTransform = getGlyphTransform (...) QTransform getGlyphTransform(int glyph_index)","title":"getGlyphTransform"},{"location":"fontlab.flTextBlock.html#gethitglyph","text":"fontlab.flTextBlock.getHitGlyph = getHitGlyph (...) flGlyphInfo/Nothing getHitGlyph(QPointF canvas_pos)","title":"getHitGlyph"},{"location":"fontlab.flTextBlock.html#gethittoshapeglyph","text":"fontlab.flTextBlock.getHitToShapeGlyph = getHitToShapeGlyph (...) flGlyphInfo/Nothing getHitToShapeGlyph(QPointF canvas_pos)","title":"getHitToShapeGlyph"},{"location":"fontlab.flTextBlock.html#gethittoshapes","text":"fontlab.flTextBlock.getHitToShapes = getHitToShapes (...) list(flContourInfo)/Nothing getHitToShapes(QPointF canvas_pos)","title":"getHitToShapes"},{"location":"fontlab.flTextBlock.html#getintersectsglyphs","text":"fontlab.flTextBlock.getIntersectsGlyphs = getIntersectsGlyphs (...) list(flGlyphInfo)/Nothing getIntersectsGlyphs(QRectF canvas_rect)","title":"getIntersectsGlyphs"},{"location":"fontlab.flTextBlock.html#getlineindex","text":"fontlab.flTextBlock.getLineIndex = getLineIndex (...) int getLineIndex(int glyph_index)","title":"getLineIndex"},{"location":"fontlab.flTextBlock.html#getlinelocation","text":"fontlab.flTextBlock.getLineLocation = getLineLocation (...) int getLineLocation(flGlyphInfo glyph_info)","title":"getLineLocation"},{"location":"fontlab.flTextBlock.html#getmousehitnode","text":"fontlab.flTextBlock.getMouseHitNode = getMouseHitNode (...) flNodeInfo/Nothing getMouseHitNode()","title":"getMouseHitNode"},{"location":"fontlab.flTextBlock.html#getnearbyglyphs","text":"fontlab.flTextBlock.getNearbyGlyphs = getNearbyGlyphs (...) list(flGlyphInfo)/Nothing getNearbyGlyphs(QPointF text_block_point, double max_dist)","title":"getNearbyGlyphs"},{"location":"fontlab.flTextBlock.html#getnextglyphinline","text":"fontlab.flTextBlock.getNextGlyphInLine = getNextGlyphInLine (...) flGlyphInfo/Nothing getNextGlyphInLine(int glyph_index)","title":"getNextGlyphInLine"},{"location":"fontlab.flTextBlock.html#getprevglyphinline","text":"fontlab.flTextBlock.getPrevGlyphInLine = getPrevGlyphInLine (...) flGlyphInfo/Nothing getPrevGlyphInLine(int glyph_index)","title":"getPrevGlyphInLine"},{"location":"fontlab.flTextBlock.html#getproperties","text":"fontlab.flTextBlock.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flTextBlock.html#getproperty","text":"fontlab.flTextBlock.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flTextBlock.html#getpropertyfloat","text":"fontlab.flTextBlock.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flTextBlock.html#getpropertyint","text":"fontlab.flTextBlock.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flTextBlock.html#getscvnode","text":"fontlab.flTextBlock.getScvNode = getScvNode (...) flNodeInfo/Nothing getScvNode()","title":"getScvNode"},{"location":"fontlab.flTextBlock.html#getselectedcharacters","text":"fontlab.flTextBlock.getSelectedCharacters = getSelectedCharacters (...) fgSymbolList/Nothing getSelectedCharacters()","title":"getSelectedCharacters"},{"location":"fontlab.flTextBlock.html#getselectedglyphs","text":"fontlab.flTextBlock.getSelectedGlyphs = getSelectedGlyphs (...) list(flGlyphInfo)/Nothing getSelectedGlyphs()","title":"getSelectedGlyphs"},{"location":"fontlab.flTextBlock.html#glyphsboundsoncanvas","text":"fontlab.flTextBlock.glyphsBoundsOnCanvas = glyphsBoundsOnCanvas (...) QRectF glyphsBoundsOnCanvas(EditMode)","title":"glyphsBoundsOnCanvas"},{"location":"fontlab.flTextBlock.html#glyphschanged","text":"fontlab.flTextBlock.glyphsChanged = glyphsChanged (...) glyphsChanged()","title":"glyphsChanged"},{"location":"fontlab.flTextBlock.html#glyphscount","text":"fontlab.flTextBlock.glyphsCount = glyphsCount (...) int glyphsCount()","title":"glyphsCount"},{"location":"fontlab.flTextBlock.html#haschanges","text":"fontlab.flTextBlock.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flTextBlock.html#hashistorystate","text":"fontlab.flTextBlock.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flTextBlock.html#hashistorystates","text":"fontlab.flTextBlock.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flTextBlock.html#hashoverednodeedit","text":"fontlab.flTextBlock.hasHoveredNodeEdit = hasHoveredNodeEdit (...) bool hasHoveredNodeEdit()","title":"hasHoveredNodeEdit"},{"location":"fontlab.flTextBlock.html#haveobject","text":"fontlab.flTextBlock.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flTextBlock.html#havetext","text":"fontlab.flTextBlock.haveText = haveText (...) bool haveText()","title":"haveText"},{"location":"fontlab.flTextBlock.html#historystates","text":"fontlab.flTextBlock.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flTextBlock.html#hoverednodeedit","text":"fontlab.flTextBlock.hoveredNodeEdit = hoveredNodeEdit (...) flNodeInfo hoveredNodeEdit()","title":"hoveredNodeEdit"},{"location":"fontlab.flTextBlock.html#hoverednodeeditdetails","text":"fontlab.flTextBlock.hoveredNodeEditDetails = hoveredNodeEditDetails (...) HoveredInfoDetails hoveredNodeEditDetails()","title":"hoveredNodeEditDetails"},{"location":"fontlab.flTextBlock.html#id","text":"fontlab.flTextBlock.id object id","title":"id"},{"location":"fontlab.flTextBlock.html#independedall","text":"fontlab.flTextBlock.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flTextBlock.html#init","text":"fontlab.flTextBlock.init = init (...) init(flCanvas & canvas)","title":"init"},{"location":"fontlab.flTextBlock.html#initialhistorystate","text":"fontlab.flTextBlock.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flTextBlock.html#initiallyselected","text":"fontlab.flTextBlock.initiallySelected bool","title":"initiallySelected"},{"location":"fontlab.flTextBlock.html#instancetype","text":"fontlab.flTextBlock.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flTextBlock.html#isaltpressed","text":"fontlab.flTextBlock.isAltPressed = isAltPressed (...) bool isAltPressed()","title":"isAltPressed"},{"location":"fontlab.flTextBlock.html#ischanged","text":"fontlab.flTextBlock.isChanged bool","title":"isChanged"},{"location":"fontlab.flTextBlock.html#isequal","text":"fontlab.flTextBlock.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flTextBlock.html#isframed","text":"fontlab.flTextBlock.isFramed = isFramed (...) bool isFramed()","title":"isFramed"},{"location":"fontlab.flTextBlock.html#ismetapressed","text":"fontlab.flTextBlock.isMetaPressed = isMetaPressed (...) bool isMetaPressed()","title":"isMetaPressed"},{"location":"fontlab.flTextBlock.html#isnull","text":"fontlab.flTextBlock.isNull bool","title":"isNull"},{"location":"fontlab.flTextBlock.html#ispresent","text":"fontlab.flTextBlock.isPresent bool","title":"isPresent"},{"location":"fontlab.flTextBlock.html#isreleased","text":"fontlab.flTextBlock.isReleased bool","title":"isReleased"},{"location":"fontlab.flTextBlock.html#isvalid","text":"fontlab.flTextBlock.isValid bool","title":"isValid"},{"location":"fontlab.flTextBlock.html#kerningprocessing","text":"fontlab.flTextBlock.kerningProcessing bool","title":"kerningProcessing"},{"location":"fontlab.flTextBlock.html#keypressevent","text":"fontlab.flTextBlock.keyPressEvent = keyPressEvent (...) bool keyPressEvent(QKeyEvent*)","title":"keyPressEvent"},{"location":"fontlab.flTextBlock.html#lastcharindex","text":"fontlab.flTextBlock.lastCharIndex = lastCharIndex (...) int lastCharIndex()","title":"lastCharIndex"},{"location":"fontlab.flTextBlock.html#lastindex","text":"fontlab.flTextBlock.lastIndex = lastIndex (...) int lastIndex()","title":"lastIndex"},{"location":"fontlab.flTextBlock.html#layoutprocessing","text":"fontlab.flTextBlock.layoutProcessing bool","title":"layoutProcessing"},{"location":"fontlab.flTextBlock.html#locked","text":"fontlab.flTextBlock.locked bool","title":"locked"},{"location":"fontlab.flTextBlock.html#marksprocessing","text":"fontlab.flTextBlock.marksProcessing bool","title":"marksProcessing"},{"location":"fontlab.flTextBlock.html#mousedoubleclickevent","text":"fontlab.flTextBlock.mouseDoubleClickEvent = mouseDoubleClickEvent (...) bool mouseDoubleClickEvent(QMouseEvent*)","title":"mouseDoubleClickEvent"},{"location":"fontlab.flTextBlock.html#mousemoveevent","text":"fontlab.flTextBlock.mouseMoveEvent = mouseMoveEvent (...) bool mouseMoveEvent(QMouseEvent*)","title":"mouseMoveEvent"},{"location":"fontlab.flTextBlock.html#mousepressevent","text":"fontlab.flTextBlock.mousePressEvent = mousePressEvent (...) bool mousePressEvent(QMouseEvent*)","title":"mousePressEvent"},{"location":"fontlab.flTextBlock.html#mousereleaseevent","text":"fontlab.flTextBlock.mouseReleaseEvent = mouseReleaseEvent (...) bool mouseReleaseEvent(QMouseEvent*)","title":"mouseReleaseEvent"},{"location":"fontlab.flTextBlock.html#name","text":"fontlab.flTextBlock.name object name","title":"name"},{"location":"fontlab.flTextBlock.html#package","text":"fontlab.flTextBlock.package flPackage","title":"package"},{"location":"fontlab.flTextBlock.html#paintednodesscreenrect","text":"fontlab.flTextBlock.paintedNodesScreenRect = paintedNodesScreenRect (...) QRectF paintedNodesScreenRect()","title":"paintedNodesScreenRect"},{"location":"fontlab.flTextBlock.html#paragraphblock","text":"fontlab.flTextBlock.paragraphBlock = paragraphBlock (...) fgParagraphBlock paragraphBlock()","title":"paragraphBlock"},{"location":"fontlab.flTextBlock.html#parenttextblock","text":"fontlab.flTextBlock.parentTextBlock = parentTextBlock (...) flTextBlock parentTextBlock()","title":"parentTextBlock"},{"location":"fontlab.flTextBlock.html#refcnt","text":"fontlab.flTextBlock.refCnt object references count","title":"refCnt"},{"location":"fontlab.flTextBlock.html#reformat","text":"fontlab.flTextBlock.reformat = reformat (...) reformat()","title":"reformat"},{"location":"fontlab.flTextBlock.html#release","text":"fontlab.flTextBlock.release = release (...) release()","title":"release"},{"location":"fontlab.flTextBlock.html#remove","text":"fontlab.flTextBlock.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flTextBlock.html#removechild","text":"fontlab.flTextBlock.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flTextBlock.html#removedfromcanvas","text":"fontlab.flTextBlock.removedFromCanvas = removedFromCanvas (...) removedFromCanvas()","title":"removedFromCanvas"},{"location":"fontlab.flTextBlock.html#removefeature","text":"fontlab.flTextBlock.removeFeature = removeFeature (...) removeFeature(QString feature)","title":"removeFeature"},{"location":"fontlab.flTextBlock.html#removefeatures","text":"fontlab.flTextBlock.removeFeatures = removeFeatures (...) removeFeatures()","title":"removeFeatures"},{"location":"fontlab.flTextBlock.html#removeproperty","text":"fontlab.flTextBlock.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flTextBlock.html#restorehistorystate","text":"fontlab.flTextBlock.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flTextBlock.html#script","text":"fontlab.flTextBlock.script uint","title":"script"},{"location":"fontlab.flTextBlock.html#setactiveglyph","text":"fontlab.flTextBlock.setActiveGlyph = setActiveGlyph (...) setActiveGlyph(flGlyphInfo)","title":"setActiveGlyph"},{"location":"fontlab.flTextBlock.html#setaltpressed","text":"fontlab.flTextBlock.setAltPressed = setAltPressed (...) setAltPressed(bool b[, bool redraw = true])","title":"setAltPressed"},{"location":"fontlab.flTextBlock.html#setcheckmousehovernode","text":"fontlab.flTextBlock.setCheckMouseHoverNode = setCheckMouseHoverNode (...) setCheckMouseHoverNode(bool)","title":"setCheckMouseHoverNode"},{"location":"fontlab.flTextBlock.html#setexclusiveediting","text":"fontlab.flTextBlock.setExclusiveEditing = setExclusiveEditing (...) setExclusiveEditing(bool)","title":"setExclusiveEditing"},{"location":"fontlab.flTextBlock.html#setfeatures","text":"fontlab.flTextBlock.setFeatures = setFeatures (...) setFeatures(list(QString), bool reformat)","title":"setFeatures"},{"location":"fontlab.flTextBlock.html#setfixedheight","text":"fontlab.flTextBlock.setFixedHeight = setFixedHeight (...) setFixedHeight(bool, bool)","title":"setFixedHeight"},{"location":"fontlab.flTextBlock.html#setflag","text":"fontlab.flTextBlock.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flTextBlock.html#setframesize","text":"fontlab.flTextBlock.setFrameSize = setFrameSize (...) setFrameSize(QSizeF canvas_size)","title":"setFrameSize"},{"location":"fontlab.flTextBlock.html#setframewidth","text":"fontlab.flTextBlock.setFrameWidth = setFrameWidth (...) setFrameWidth(double)","title":"setFrameWidth"},{"location":"fontlab.flTextBlock.html#setleftmetric","text":"fontlab.flTextBlock.setLeftMetric = setLeftMetric (...) setLeftMetric(flGlyphInfo glyph_info, bool measurement)","title":"setLeftMetric"},{"location":"fontlab.flTextBlock.html#setmetapressed","text":"fontlab.flTextBlock.setMetaPressed = setMetaPressed (...) setMetaPressed(bool b[, bool redraw = true])","title":"setMetaPressed"},{"location":"fontlab.flTextBlock.html#setparenttextblock","text":"fontlab.flTextBlock.setParentTextBlock = setParentTextBlock (...) setParentTextBlock(flTextBlock)","title":"setParentTextBlock"},{"location":"fontlab.flTextBlock.html#setproperty","text":"fontlab.flTextBlock.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flTextBlock.html#setpropertyfloat","text":"fontlab.flTextBlock.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flTextBlock.html#setpropertyint","text":"fontlab.flTextBlock.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flTextBlock.html#setrightmetric","text":"fontlab.flTextBlock.setRightMetric = setRightMetric (...) setRightMetric(QPointF, flGlyphInfo glyph_info, bool measurement)","title":"setRightMetric"},{"location":"fontlab.flTextBlock.html#setshowcursor","text":"fontlab.flTextBlock.setShowCursor = setShowCursor (...) setShowCursor(bool)","title":"setShowCursor"},{"location":"fontlab.flTextBlock.html#setshownodes","text":"fontlab.flTextBlock.setShowNodes = setShowNodes (...) setShowNodes(bool)","title":"setShowNodes"},{"location":"fontlab.flTextBlock.html#settextblockmode","text":"fontlab.flTextBlock.setTextBlockMode = setTextBlockMode (...) setTextBlockMode(EditMode text_block_mode[, QPoint viewport_pos=QPoint()])","title":"setTextBlockMode"},{"location":"fontlab.flTextBlock.html#symbollist","text":"fontlab.flTextBlock.symbolList = symbolList (...) fgSymbolList symbolList()","title":"symbolList"},{"location":"fontlab.flTextBlock.html#tag","text":"fontlab.flTextBlock.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flTextBlock.html#textfits","text":"fontlab.flTextBlock.textFits = textFits (...) bool textFits()","title":"textFits"},{"location":"fontlab.flTextBlock.html#textobject","text":"fontlab.flTextBlock.textObject flTextObject","title":"textObject"},{"location":"fontlab.flTextBlock.html#transform","text":"fontlab.flTextBlock.transform QTransform","title":"transform"},{"location":"fontlab.flTextBlock.html#type","text":"fontlab.flTextBlock.type object type","title":"type"},{"location":"fontlab.flTextBlock.html#update","text":"fontlab.flTextBlock.update = update (...) update()","title":"update"},{"location":"fontlab.flTextBlock.html#updatesymbols","text":"fontlab.flTextBlock.updateSymbols = updateSymbols (...) updateSymbols()","title":"updateSymbols"},{"location":"fontlab.flTextBlock.html#visibleshapes","text":"fontlab.flTextBlock.visibleShapes = visibleShapes (...) list(flShape)/Nothing visibleShapes()","title":"visibleShapes"},{"location":"fontlab.flTransform.html","text":"flTransform fontlab.flTransform = class flTransform ( object ) flTransform representation Constructors: flTransform() flTransform(flTransform) flTransform(flObject) flTransform(QTransform) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual (flObject) map (...) QPointF map (QPointF) | QLineF map (QLineF) | double map (double) mapRect (...) QRectF mapRect (QRectF | QRect) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) translate (...) void translate (QPointF | double x, double y) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count scale double transform QTransform type object type Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} changed fontlab.flTransform.changed = changed (...) changed() checkInitHistoryState fontlab.flTransform.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flTransform.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flTransform.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flTransform.clearFlags = clearFlags (...) clearFlags() clone fontlab.flTransform.clone = clone (...) Clone the object cloneObject fontlab.flTransform.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); createHistoryState fontlab.flTransform.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flTransform.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flTransform.currentHistoryState = currentHistoryState (...) currentHistoryIx() flag fontlab.flTransform.flag = flag (...) flag(uint f) flObjectFlags fontlab.flTransform.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flTransform.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flTransform.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flTransform.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flTransform.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flTransform.hasChanges bool hasHistoryState fontlab.flTransform.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flTransform.hasHistoryStates bool haveObject fontlab.flTransform.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flTransform.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flTransform.id object id independedAll fontlab.flTransform.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flTransform.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flTransform.instanceType = instanceType (...) int instanceType(); isChanged fontlab.flTransform.isChanged bool isEqual fontlab.flTransform.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flTransform.isNull bool isPresent fontlab.flTransform.isPresent bool isReleased fontlab.flTransform.isReleased bool isValid fontlab.flTransform.isValid bool map fontlab.flTransform.map = map (...) QPointF map(QPointF) | QLineF map(QLineF) | double map(double) mapRect fontlab.flTransform.mapRect = mapRect (...) QRectF mapRect(QRectF | QRect) name fontlab.flTransform.name object name refCnt fontlab.flTransform.refCnt object references count release fontlab.flTransform.release = release (...) release() remove fontlab.flTransform.remove = remove (...) remove([flObject]) removeChild fontlab.flTransform.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flTransform.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flTransform.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) scale fontlab.flTransform.scale double setFlag fontlab.flTransform.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flTransform.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flTransform.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flTransform.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' tag fontlab.flTransform.tag = tag (...) tag([string]) transform fontlab.flTransform.transform QTransform translate fontlab.flTransform.translate = translate (...) void translate(QPointF | double x, double y) type fontlab.flTransform.type object type update fontlab.flTransform.update = update (...) update()","title":"flTransform"},{"location":"fontlab.flTransform.html#fltransform","text":"","title":"flTransform"},{"location":"fontlab.flTransform.html#changed","text":"fontlab.flTransform.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flTransform.html#checkinithistorystate","text":"fontlab.flTransform.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flTransform.html#clearabovehistory","text":"fontlab.flTransform.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flTransform.html#clearflag","text":"fontlab.flTransform.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flTransform.html#clearflags","text":"fontlab.flTransform.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flTransform.html#clone","text":"fontlab.flTransform.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flTransform.html#cloneobject","text":"fontlab.flTransform.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flTransform.html#createhistorystate","text":"fontlab.flTransform.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flTransform.html#createobject","text":"fontlab.flTransform.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flTransform.html#currenthistorystate","text":"fontlab.flTransform.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flTransform.html#flag","text":"fontlab.flTransform.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flTransform.html#flobjectflags","text":"fontlab.flTransform.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flTransform.html#getproperties","text":"fontlab.flTransform.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flTransform.html#getproperty","text":"fontlab.flTransform.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flTransform.html#getpropertyfloat","text":"fontlab.flTransform.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flTransform.html#getpropertyint","text":"fontlab.flTransform.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flTransform.html#haschanges","text":"fontlab.flTransform.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flTransform.html#hashistorystate","text":"fontlab.flTransform.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flTransform.html#hashistorystates","text":"fontlab.flTransform.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flTransform.html#haveobject","text":"fontlab.flTransform.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flTransform.html#historystates","text":"fontlab.flTransform.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flTransform.html#id","text":"fontlab.flTransform.id object id","title":"id"},{"location":"fontlab.flTransform.html#independedall","text":"fontlab.flTransform.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flTransform.html#initialhistorystate","text":"fontlab.flTransform.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flTransform.html#instancetype","text":"fontlab.flTransform.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flTransform.html#ischanged","text":"fontlab.flTransform.isChanged bool","title":"isChanged"},{"location":"fontlab.flTransform.html#isequal","text":"fontlab.flTransform.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flTransform.html#isnull","text":"fontlab.flTransform.isNull bool","title":"isNull"},{"location":"fontlab.flTransform.html#ispresent","text":"fontlab.flTransform.isPresent bool","title":"isPresent"},{"location":"fontlab.flTransform.html#isreleased","text":"fontlab.flTransform.isReleased bool","title":"isReleased"},{"location":"fontlab.flTransform.html#isvalid","text":"fontlab.flTransform.isValid bool","title":"isValid"},{"location":"fontlab.flTransform.html#map","text":"fontlab.flTransform.map = map (...) QPointF map(QPointF) | QLineF map(QLineF) | double map(double)","title":"map"},{"location":"fontlab.flTransform.html#maprect","text":"fontlab.flTransform.mapRect = mapRect (...) QRectF mapRect(QRectF | QRect)","title":"mapRect"},{"location":"fontlab.flTransform.html#name","text":"fontlab.flTransform.name object name","title":"name"},{"location":"fontlab.flTransform.html#refcnt","text":"fontlab.flTransform.refCnt object references count","title":"refCnt"},{"location":"fontlab.flTransform.html#release","text":"fontlab.flTransform.release = release (...) release()","title":"release"},{"location":"fontlab.flTransform.html#remove","text":"fontlab.flTransform.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flTransform.html#removechild","text":"fontlab.flTransform.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flTransform.html#removeproperty","text":"fontlab.flTransform.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flTransform.html#restorehistorystate","text":"fontlab.flTransform.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flTransform.html#scale","text":"fontlab.flTransform.scale double","title":"scale"},{"location":"fontlab.flTransform.html#setflag","text":"fontlab.flTransform.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flTransform.html#setproperty","text":"fontlab.flTransform.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flTransform.html#setpropertyfloat","text":"fontlab.flTransform.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flTransform.html#setpropertyint","text":"fontlab.flTransform.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flTransform.html#tag","text":"fontlab.flTransform.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flTransform.html#transform","text":"fontlab.flTransform.transform QTransform","title":"transform"},{"location":"fontlab.flTransform.html#translate","text":"fontlab.flTransform.translate = translate (...) void translate(QPointF | double x, double y)","title":"translate"},{"location":"fontlab.flTransform.html#type","text":"fontlab.flTransform.type object type","title":"type"},{"location":"fontlab.flTransform.html#update","text":"fontlab.flTransform.update = update (...) update()","title":"update"},{"location":"fontlab.flVectorNode.html","text":"flVectorNode fontlab.flVectorNode = class flVectorNode ( object ) flVectorNode representation Constructors: flVectorNode(flObject) flVectorNode(flVectorNode) flVectorNode(flGuideLine, QPointF) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value angleTo (...) double angleTo (QPointF p) applyTransform (...) applyTransform (QTransform) canBeHobby (...) bool canBeHobby () canBeSmooth (...) bool canBeSmooth () canCollapse (...) bool canCollapse () canImprove (...) bool canImprove () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVectors (...) bool checkVectors () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearStored (...) clearStored () clone (...) Clone the object cloneMapped (...) flNode cloneMapped (QTransform) collapseHandles (...) bool collapseHandles () convertToCurve (...) bool convertToCurve ([bool smooth = false]) convertToCurves (...) bool convertToCurves () convertToLine (...) bool convertToLine () copyFrom (...) copyFrom (Node[, withSelected=False]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (Node/QPointF) flag (...) flag (uint f) getLines (...) (QLineF, QLineF)/None getLines () getOn (...) Node/None getOn () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isCorner (...) bool isCorner ([double a = 10.]) isCurve (...) bool isCurve () isEqual (...) isEqual (flObject) isEqualTo (...) bool isEqualTo (Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme (...) bool isExtreme (bool x[, bool open = true[, double limit = 0]]) isFirst (...) bool isFirst () isG2 (...) bool isG2 (double tolerance) isInternal (...) bool isInternal (bool clockwise) isInterpolated (...) bool isInterpolated (bool x) isLast (...) bool isLast () isOff (...) bool isOff () isOn (...) bool isOn () isSmartAngle (...) bool isSmartAngle () makeStart (...) bool makeStart () moveBy (...) moveBy (float dx, float dy[, bool round=false] nextNode (...) Node/None nextNode ([string nodeType= [, int searchDepth=1]]) pointG2 (...) QPointF/None pointG2 () prevNode (...) Node/None prevNode ([string nodeType= [, int searchDepth=1]]) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') restoreCoordinates (...) restoreCoordinates () restoreHistoryState (...) restoreHistoryState (uint history_ix) rotateBy (...) rotateBy (valueDegree[, QPointF origin=(0, 0)]) round (...) round () - Round the node's coordinate scaleBy (...) scaleBy (valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) setExtraLast (...) setExtraLast (bool) setFlag (...) setFlag (uint f [, bool value]) setNextSmooth (...) setNextSmooth (QPointF base) setPosition (...) void setPosition (QPointF) setPositionMode (...) void setPositionMode (Mode m) setPrevSmooth (...) setPrevSmooth (QPointF base) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSmartAngleEnbl (...) bool setSmartAngleEnbl (bool) setSmartSharp (...) bool setSmartSharp ([double tension = 0.6]) skewBy (...) skewBy (valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartMove (...) list(uint) smartMove (offset) smartSetXY (...) smartSetXY (QPointF) storeCoordinates (...) storeCoordinates () storeTestParameters (...) storeTestParameters () tag (...) tag ([string]) transformBy (...) transformBy (QTransform tx[, QPointF origin=(0, 0)]) update (...) update () updateG2 (...) bool updateG2 () updateSmooth (...) updateSmooth ([bool extended_neibh=true]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flVectorNode createInstance () createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isVectorNode (...) bool isVectorNode (flObject) Descriptors angle angle contour The parent Contour or None if not present g2 g2 guideline flGuideLine hasChanges bool hasHistoryStates bool hobby hobby id object id index The index of the node in parent's contour (if present, otherwise -1) interpolated interpolated interpolatedX interpolatedX interpolatedY interpolatedY isChanged bool isNull bool isPresent bool isReleased bool isSelectedAlone bool isTerminal bool isValid bool mode uint name object name nodeState nodeState position Coordinates of the node as QPointF preview preview refCnt object references count scv scv selected The selected flag smartAngleR smartAngleR smooth The smooth flag state state type The node type x The x coordinate of the node y The y coordinate of the node Attributes Mode = {'PosAbsolute': 2, 'PosHorzDir': 4, 'PosMask': 15, 'PosParametric': 1, 'PosVertDir': 8} NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} angle fontlab.flVectorNode.angle angle angleTo fontlab.flVectorNode.angleTo = angleTo (...) double angleTo(QPointF p) applyTransform fontlab.flVectorNode.applyTransform = applyTransform (...) applyTransform(QTransform) canBeHobby fontlab.flVectorNode.canBeHobby = canBeHobby (...) bool canBeHobby() canBeSmooth fontlab.flVectorNode.canBeSmooth = canBeSmooth (...) bool canBeSmooth() canCollapse fontlab.flVectorNode.canCollapse = canCollapse (...) bool canCollapse() canImprove fontlab.flVectorNode.canImprove = canImprove (...) bool canImprove() changed fontlab.flVectorNode.changed = changed (...) changed() checkInitHistoryState fontlab.flVectorNode.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) checkVectors fontlab.flVectorNode.checkVectors = checkVectors (...) bool checkVectors() clearAboveHistory fontlab.flVectorNode.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flVectorNode.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flVectorNode.clearFlags = clearFlags (...) clearFlags() clearStored fontlab.flVectorNode.clearStored = clearStored (...) clearStored() clone fontlab.flVectorNode.clone = clone (...) Clone the object cloneMapped fontlab.flVectorNode.cloneMapped = cloneMapped (...) flNode cloneMapped(QTransform) cloneObject fontlab.flVectorNode.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); collapseHandles fontlab.flVectorNode.collapseHandles = collapseHandles (...) bool collapseHandles() contour fontlab.flVectorNode.contour The parent Contour or None if not present convertToCurve fontlab.flVectorNode.convertToCurve = convertToCurve (...) bool convertToCurve([bool smooth = false]) convertToCurves fontlab.flVectorNode.convertToCurves = convertToCurves (...) bool convertToCurves() convertToLine fontlab.flVectorNode.convertToLine = convertToLine (...) bool convertToLine() copyFrom fontlab.flVectorNode.copyFrom = copyFrom (...) copyFrom(Node[, withSelected=False]) createHistoryState fontlab.flVectorNode.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createInstance fontlab.flVectorNode.createInstance = createInstance (...) flVectorNode createInstance() createObject fontlab.flVectorNode.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flVectorNode.currentHistoryState = currentHistoryState (...) currentHistoryIx() distanceTo fontlab.flVectorNode.distanceTo = distanceTo (...) double distanceTo(Node/QPointF) flag fontlab.flVectorNode.flag = flag (...) flag(uint f) flObjectFlags fontlab.flVectorNode.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} g2 fontlab.flVectorNode.g2 g2 getLines fontlab.flVectorNode.getLines = getLines (...) (QLineF, QLineF)/None getLines() getOn fontlab.flVectorNode.getOn = getOn (...) Node/None getOn() getProperties fontlab.flVectorNode.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flVectorNode.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flVectorNode.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flVectorNode.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' guideline fontlab.flVectorNode.guideline flGuideLine hasChanges fontlab.flVectorNode.hasChanges bool hasHistoryState fontlab.flVectorNode.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flVectorNode.hasHistoryStates bool haveObject fontlab.flVectorNode.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flVectorNode.historyStates = historyStates (...) historyStates(bool accepted_state) hobby fontlab.flVectorNode.hobby hobby id fontlab.flVectorNode.id object id improve fontlab.flVectorNode.improve = improve (...) bool improve() independedAll fontlab.flVectorNode.independedAll = independedAll (...) independedAll() index fontlab.flVectorNode.index The index of the node in parent's contour (if present, otherwise -1) initialHistoryState fontlab.flVectorNode.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceType fontlab.flVectorNode.instanceType = instanceType (...) int instanceType(); interpolated fontlab.flVectorNode.interpolated interpolated interpolatedX fontlab.flVectorNode.interpolatedX interpolatedX interpolatedY fontlab.flVectorNode.interpolatedY interpolatedY isChanged fontlab.flVectorNode.isChanged bool isCorner fontlab.flVectorNode.isCorner = isCorner (...) bool isCorner([double a = 10.]) isCurve fontlab.flVectorNode.isCurve = isCurve (...) bool isCurve() isEqual fontlab.flVectorNode.isEqual = isEqual (...) isEqual(flObject) isEqualTo fontlab.flVectorNode.isEqualTo = isEqualTo (...) bool isEqualTo(Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme fontlab.flVectorNode.isExtreme = isExtreme (...) bool isExtreme(bool x[, bool open = true[, double limit = 0]]) isFirst fontlab.flVectorNode.isFirst = isFirst (...) bool isFirst() isG2 fontlab.flVectorNode.isG2 = isG2 (...) bool isG2(double tolerance) isInternal fontlab.flVectorNode.isInternal = isInternal (...) bool isInternal(bool clockwise) isInterpolated fontlab.flVectorNode.isInterpolated = isInterpolated (...) bool isInterpolated(bool x) isLast fontlab.flVectorNode.isLast = isLast (...) bool isLast() isNull fontlab.flVectorNode.isNull bool isOff fontlab.flVectorNode.isOff = isOff (...) bool isOff() isOn fontlab.flVectorNode.isOn = isOn (...) bool isOn() isPresent fontlab.flVectorNode.isPresent bool isReleased fontlab.flVectorNode.isReleased bool isSelectedAlone fontlab.flVectorNode.isSelectedAlone bool isSmartAngle fontlab.flVectorNode.isSmartAngle = isSmartAngle (...) bool isSmartAngle() isTerminal fontlab.flVectorNode.isTerminal bool isValid fontlab.flVectorNode.isValid bool isVectorNode fontlab.flVectorNode.isVectorNode = isVectorNode (...) bool isVectorNode(flObject) makeStart fontlab.flVectorNode.makeStart = makeStart (...) bool makeStart() mode fontlab.flVectorNode.mode uint Mode fontlab.flVectorNode.Mode = {'PosAbsolute': 2, 'PosHorzDir': 4, 'PosMask': 15, 'PosParametric': 1, 'PosVertDir': 8} moveBy fontlab.flVectorNode.moveBy = moveBy (...) moveBy(float dx, float dy[, bool round=false] name fontlab.flVectorNode.name object name nextNode fontlab.flVectorNode.nextNode = nextNode (...) Node/None nextNode([string nodeType= [, int searchDepth=1]]) NodeKind fontlab.flVectorNode.NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} nodeState fontlab.flVectorNode.nodeState nodeState NodeType fontlab.flVectorNode.NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} pointG2 fontlab.flVectorNode.pointG2 = pointG2 (...) QPointF/None pointG2() position fontlab.flVectorNode.position Coordinates of the node as QPointF preview fontlab.flVectorNode.preview preview prevNode fontlab.flVectorNode.prevNode = prevNode (...) Node/None prevNode([string nodeType= [, int searchDepth=1]]) refCnt fontlab.flVectorNode.refCnt object references count release fontlab.flVectorNode.release = release (...) release() remove fontlab.flVectorNode.remove = remove (...) remove([flObject]) removeChild fontlab.flVectorNode.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flVectorNode.removeProperty = removeProperty (...) removeProperty('key') restoreCoordinates fontlab.flVectorNode.restoreCoordinates = restoreCoordinates (...) restoreCoordinates() restoreHistoryState fontlab.flVectorNode.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) rotateBy fontlab.flVectorNode.rotateBy = rotateBy (...) rotateBy(valueDegree[, QPointF origin=(0, 0)]) round fontlab.flVectorNode.round = round (...) round() - Round the node's coordinate scaleBy fontlab.flVectorNode.scaleBy = scaleBy (...) scaleBy(valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) scv fontlab.flVectorNode.scv scv selected fontlab.flVectorNode.selected The selected flag setExtraLast fontlab.flVectorNode.setExtraLast = setExtraLast (...) setExtraLast(bool) setFlag fontlab.flVectorNode.setFlag = setFlag (...) setFlag(uint f [, bool value]) setNextSmooth fontlab.flVectorNode.setNextSmooth = setNextSmooth (...) setNextSmooth(QPointF base) setPosition fontlab.flVectorNode.setPosition = setPosition (...) void setPosition(QPointF) setPositionMode fontlab.flVectorNode.setPositionMode = setPositionMode (...) void setPositionMode(Mode m) setPrevSmooth fontlab.flVectorNode.setPrevSmooth = setPrevSmooth (...) setPrevSmooth(QPointF base) setProperty fontlab.flVectorNode.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flVectorNode.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flVectorNode.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setSmartAngleEnbl fontlab.flVectorNode.setSmartAngleEnbl = setSmartAngleEnbl (...) bool setSmartAngleEnbl(bool) setSmartSharp fontlab.flVectorNode.setSmartSharp = setSmartSharp (...) bool setSmartSharp([double tension = 0.6]) skewBy fontlab.flVectorNode.skewBy = skewBy (...) skewBy(valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartAngleR fontlab.flVectorNode.smartAngleR smartAngleR smartMove fontlab.flVectorNode.smartMove = smartMove (...) list(uint) smartMove(offset) smartSetXY fontlab.flVectorNode.smartSetXY = smartSetXY (...) smartSetXY(QPointF) smooth fontlab.flVectorNode.smooth The smooth flag state fontlab.flVectorNode.state state storeCoordinates fontlab.flVectorNode.storeCoordinates = storeCoordinates (...) storeCoordinates() storeTestParameters fontlab.flVectorNode.storeTestParameters = storeTestParameters (...) storeTestParameters() tag fontlab.flVectorNode.tag = tag (...) tag([string]) transformBy fontlab.flVectorNode.transformBy = transformBy (...) transformBy(QTransform tx[, QPointF origin=(0, 0)]) type fontlab.flVectorNode.type The node type update fontlab.flVectorNode.update = update (...) update() updateG2 fontlab.flVectorNode.updateG2 = updateG2 (...) bool updateG2() updateSmooth fontlab.flVectorNode.updateSmooth = updateSmooth (...) updateSmooth([bool extended_neibh=true]) x fontlab.flVectorNode.x The x coordinate of the node y fontlab.flVectorNode.y The y coordinate of the node","title":"flVectorNode"},{"location":"fontlab.flVectorNode.html#flvectornode","text":"","title":"flVectorNode"},{"location":"fontlab.flVectorNode.html#angle","text":"fontlab.flVectorNode.angle angle","title":"angle"},{"location":"fontlab.flVectorNode.html#angleto","text":"fontlab.flVectorNode.angleTo = angleTo (...) double angleTo(QPointF p)","title":"angleTo"},{"location":"fontlab.flVectorNode.html#applytransform","text":"fontlab.flVectorNode.applyTransform = applyTransform (...) applyTransform(QTransform)","title":"applyTransform"},{"location":"fontlab.flVectorNode.html#canbehobby","text":"fontlab.flVectorNode.canBeHobby = canBeHobby (...) bool canBeHobby()","title":"canBeHobby"},{"location":"fontlab.flVectorNode.html#canbesmooth","text":"fontlab.flVectorNode.canBeSmooth = canBeSmooth (...) bool canBeSmooth()","title":"canBeSmooth"},{"location":"fontlab.flVectorNode.html#cancollapse","text":"fontlab.flVectorNode.canCollapse = canCollapse (...) bool canCollapse()","title":"canCollapse"},{"location":"fontlab.flVectorNode.html#canimprove","text":"fontlab.flVectorNode.canImprove = canImprove (...) bool canImprove()","title":"canImprove"},{"location":"fontlab.flVectorNode.html#changed","text":"fontlab.flVectorNode.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flVectorNode.html#checkinithistorystate","text":"fontlab.flVectorNode.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flVectorNode.html#checkvectors","text":"fontlab.flVectorNode.checkVectors = checkVectors (...) bool checkVectors()","title":"checkVectors"},{"location":"fontlab.flVectorNode.html#clearabovehistory","text":"fontlab.flVectorNode.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flVectorNode.html#clearflag","text":"fontlab.flVectorNode.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flVectorNode.html#clearflags","text":"fontlab.flVectorNode.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flVectorNode.html#clearstored","text":"fontlab.flVectorNode.clearStored = clearStored (...) clearStored()","title":"clearStored"},{"location":"fontlab.flVectorNode.html#clone","text":"fontlab.flVectorNode.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flVectorNode.html#clonemapped","text":"fontlab.flVectorNode.cloneMapped = cloneMapped (...) flNode cloneMapped(QTransform)","title":"cloneMapped"},{"location":"fontlab.flVectorNode.html#cloneobject","text":"fontlab.flVectorNode.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flVectorNode.html#collapsehandles","text":"fontlab.flVectorNode.collapseHandles = collapseHandles (...) bool collapseHandles()","title":"collapseHandles"},{"location":"fontlab.flVectorNode.html#contour","text":"fontlab.flVectorNode.contour The parent Contour or None if not present","title":"contour"},{"location":"fontlab.flVectorNode.html#converttocurve","text":"fontlab.flVectorNode.convertToCurve = convertToCurve (...) bool convertToCurve([bool smooth = false])","title":"convertToCurve"},{"location":"fontlab.flVectorNode.html#converttocurves","text":"fontlab.flVectorNode.convertToCurves = convertToCurves (...) bool convertToCurves()","title":"convertToCurves"},{"location":"fontlab.flVectorNode.html#converttoline","text":"fontlab.flVectorNode.convertToLine = convertToLine (...) bool convertToLine()","title":"convertToLine"},{"location":"fontlab.flVectorNode.html#copyfrom","text":"fontlab.flVectorNode.copyFrom = copyFrom (...) copyFrom(Node[, withSelected=False])","title":"copyFrom"},{"location":"fontlab.flVectorNode.html#createhistorystate","text":"fontlab.flVectorNode.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flVectorNode.html#createinstance","text":"fontlab.flVectorNode.createInstance = createInstance (...) flVectorNode createInstance()","title":"createInstance"},{"location":"fontlab.flVectorNode.html#createobject","text":"fontlab.flVectorNode.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flVectorNode.html#currenthistorystate","text":"fontlab.flVectorNode.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flVectorNode.html#distanceto","text":"fontlab.flVectorNode.distanceTo = distanceTo (...) double distanceTo(Node/QPointF)","title":"distanceTo"},{"location":"fontlab.flVectorNode.html#flag","text":"fontlab.flVectorNode.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flVectorNode.html#flobjectflags","text":"fontlab.flVectorNode.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flVectorNode.html#g2","text":"fontlab.flVectorNode.g2 g2","title":"g2"},{"location":"fontlab.flVectorNode.html#getlines","text":"fontlab.flVectorNode.getLines = getLines (...) (QLineF, QLineF)/None getLines()","title":"getLines"},{"location":"fontlab.flVectorNode.html#geton","text":"fontlab.flVectorNode.getOn = getOn (...) Node/None getOn()","title":"getOn"},{"location":"fontlab.flVectorNode.html#getproperties","text":"fontlab.flVectorNode.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flVectorNode.html#getproperty","text":"fontlab.flVectorNode.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flVectorNode.html#getpropertyfloat","text":"fontlab.flVectorNode.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flVectorNode.html#getpropertyint","text":"fontlab.flVectorNode.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flVectorNode.html#guideline","text":"fontlab.flVectorNode.guideline flGuideLine","title":"guideline"},{"location":"fontlab.flVectorNode.html#haschanges","text":"fontlab.flVectorNode.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flVectorNode.html#hashistorystate","text":"fontlab.flVectorNode.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flVectorNode.html#hashistorystates","text":"fontlab.flVectorNode.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flVectorNode.html#haveobject","text":"fontlab.flVectorNode.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flVectorNode.html#historystates","text":"fontlab.flVectorNode.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flVectorNode.html#hobby","text":"fontlab.flVectorNode.hobby hobby","title":"hobby"},{"location":"fontlab.flVectorNode.html#id","text":"fontlab.flVectorNode.id object id","title":"id"},{"location":"fontlab.flVectorNode.html#improve","text":"fontlab.flVectorNode.improve = improve (...) bool improve()","title":"improve"},{"location":"fontlab.flVectorNode.html#independedall","text":"fontlab.flVectorNode.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flVectorNode.html#index","text":"fontlab.flVectorNode.index The index of the node in parent's contour (if present, otherwise -1)","title":"index"},{"location":"fontlab.flVectorNode.html#initialhistorystate","text":"fontlab.flVectorNode.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flVectorNode.html#instancetype","text":"fontlab.flVectorNode.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flVectorNode.html#interpolated","text":"fontlab.flVectorNode.interpolated interpolated","title":"interpolated"},{"location":"fontlab.flVectorNode.html#interpolatedx","text":"fontlab.flVectorNode.interpolatedX interpolatedX","title":"interpolatedX"},{"location":"fontlab.flVectorNode.html#interpolatedy","text":"fontlab.flVectorNode.interpolatedY interpolatedY","title":"interpolatedY"},{"location":"fontlab.flVectorNode.html#ischanged","text":"fontlab.flVectorNode.isChanged bool","title":"isChanged"},{"location":"fontlab.flVectorNode.html#iscorner","text":"fontlab.flVectorNode.isCorner = isCorner (...) bool isCorner([double a = 10.])","title":"isCorner"},{"location":"fontlab.flVectorNode.html#iscurve","text":"fontlab.flVectorNode.isCurve = isCurve (...) bool isCurve()","title":"isCurve"},{"location":"fontlab.flVectorNode.html#isequal","text":"fontlab.flVectorNode.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flVectorNode.html#isequalto","text":"fontlab.flVectorNode.isEqualTo = isEqualTo (...) bool isEqualTo(Node[, tolerance=0.1[, offset=QPointF(0, 0)]])","title":"isEqualTo"},{"location":"fontlab.flVectorNode.html#isextreme","text":"fontlab.flVectorNode.isExtreme = isExtreme (...) bool isExtreme(bool x[, bool open = true[, double limit = 0]])","title":"isExtreme"},{"location":"fontlab.flVectorNode.html#isfirst","text":"fontlab.flVectorNode.isFirst = isFirst (...) bool isFirst()","title":"isFirst"},{"location":"fontlab.flVectorNode.html#isg2","text":"fontlab.flVectorNode.isG2 = isG2 (...) bool isG2(double tolerance)","title":"isG2"},{"location":"fontlab.flVectorNode.html#isinternal","text":"fontlab.flVectorNode.isInternal = isInternal (...) bool isInternal(bool clockwise)","title":"isInternal"},{"location":"fontlab.flVectorNode.html#isinterpolated","text":"fontlab.flVectorNode.isInterpolated = isInterpolated (...) bool isInterpolated(bool x)","title":"isInterpolated"},{"location":"fontlab.flVectorNode.html#islast","text":"fontlab.flVectorNode.isLast = isLast (...) bool isLast()","title":"isLast"},{"location":"fontlab.flVectorNode.html#isnull","text":"fontlab.flVectorNode.isNull bool","title":"isNull"},{"location":"fontlab.flVectorNode.html#isoff","text":"fontlab.flVectorNode.isOff = isOff (...) bool isOff()","title":"isOff"},{"location":"fontlab.flVectorNode.html#ison","text":"fontlab.flVectorNode.isOn = isOn (...) bool isOn()","title":"isOn"},{"location":"fontlab.flVectorNode.html#ispresent","text":"fontlab.flVectorNode.isPresent bool","title":"isPresent"},{"location":"fontlab.flVectorNode.html#isreleased","text":"fontlab.flVectorNode.isReleased bool","title":"isReleased"},{"location":"fontlab.flVectorNode.html#isselectedalone","text":"fontlab.flVectorNode.isSelectedAlone bool","title":"isSelectedAlone"},{"location":"fontlab.flVectorNode.html#issmartangle","text":"fontlab.flVectorNode.isSmartAngle = isSmartAngle (...) bool isSmartAngle()","title":"isSmartAngle"},{"location":"fontlab.flVectorNode.html#isterminal","text":"fontlab.flVectorNode.isTerminal bool","title":"isTerminal"},{"location":"fontlab.flVectorNode.html#isvalid","text":"fontlab.flVectorNode.isValid bool","title":"isValid"},{"location":"fontlab.flVectorNode.html#isvectornode","text":"fontlab.flVectorNode.isVectorNode = isVectorNode (...) bool isVectorNode(flObject)","title":"isVectorNode"},{"location":"fontlab.flVectorNode.html#makestart","text":"fontlab.flVectorNode.makeStart = makeStart (...) bool makeStart()","title":"makeStart"},{"location":"fontlab.flVectorNode.html#mode","text":"fontlab.flVectorNode.mode uint","title":"mode"},{"location":"fontlab.flVectorNode.html#mode_1","text":"fontlab.flVectorNode.Mode = {'PosAbsolute': 2, 'PosHorzDir': 4, 'PosMask': 15, 'PosParametric': 1, 'PosVertDir': 8}","title":"Mode"},{"location":"fontlab.flVectorNode.html#moveby","text":"fontlab.flVectorNode.moveBy = moveBy (...) moveBy(float dx, float dy[, bool round=false]","title":"moveBy"},{"location":"fontlab.flVectorNode.html#name","text":"fontlab.flVectorNode.name object name","title":"name"},{"location":"fontlab.flVectorNode.html#nextnode","text":"fontlab.flVectorNode.nextNode = nextNode (...) Node/None nextNode([string nodeType= [, int searchDepth=1]])","title":"nextNode"},{"location":"fontlab.flVectorNode.html#nodekind","text":"fontlab.flVectorNode.NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...}","title":"NodeKind"},{"location":"fontlab.flVectorNode.html#nodestate","text":"fontlab.flVectorNode.nodeState nodeState","title":"nodeState"},{"location":"fontlab.flVectorNode.html#nodetype","text":"fontlab.flVectorNode.NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1}","title":"NodeType"},{"location":"fontlab.flVectorNode.html#pointg2","text":"fontlab.flVectorNode.pointG2 = pointG2 (...) QPointF/None pointG2()","title":"pointG2"},{"location":"fontlab.flVectorNode.html#position","text":"fontlab.flVectorNode.position Coordinates of the node as QPointF","title":"position"},{"location":"fontlab.flVectorNode.html#preview","text":"fontlab.flVectorNode.preview preview","title":"preview"},{"location":"fontlab.flVectorNode.html#prevnode","text":"fontlab.flVectorNode.prevNode = prevNode (...) Node/None prevNode([string nodeType= [, int searchDepth=1]])","title":"prevNode"},{"location":"fontlab.flVectorNode.html#refcnt","text":"fontlab.flVectorNode.refCnt object references count","title":"refCnt"},{"location":"fontlab.flVectorNode.html#release","text":"fontlab.flVectorNode.release = release (...) release()","title":"release"},{"location":"fontlab.flVectorNode.html#remove","text":"fontlab.flVectorNode.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flVectorNode.html#removechild","text":"fontlab.flVectorNode.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flVectorNode.html#removeproperty","text":"fontlab.flVectorNode.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flVectorNode.html#restorecoordinates","text":"fontlab.flVectorNode.restoreCoordinates = restoreCoordinates (...) restoreCoordinates()","title":"restoreCoordinates"},{"location":"fontlab.flVectorNode.html#restorehistorystate","text":"fontlab.flVectorNode.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flVectorNode.html#rotateby","text":"fontlab.flVectorNode.rotateBy = rotateBy (...) rotateBy(valueDegree[, QPointF origin=(0, 0)])","title":"rotateBy"},{"location":"fontlab.flVectorNode.html#round","text":"fontlab.flVectorNode.round = round (...) round() - Round the node's coordinate","title":"round"},{"location":"fontlab.flVectorNode.html#scaleby","text":"fontlab.flVectorNode.scaleBy = scaleBy (...) scaleBy(valueXY | (valueX, valueY)[, QPointF origin=(0, 0)])","title":"scaleBy"},{"location":"fontlab.flVectorNode.html#scv","text":"fontlab.flVectorNode.scv scv","title":"scv"},{"location":"fontlab.flVectorNode.html#selected","text":"fontlab.flVectorNode.selected The selected flag","title":"selected"},{"location":"fontlab.flVectorNode.html#setextralast","text":"fontlab.flVectorNode.setExtraLast = setExtraLast (...) setExtraLast(bool)","title":"setExtraLast"},{"location":"fontlab.flVectorNode.html#setflag","text":"fontlab.flVectorNode.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flVectorNode.html#setnextsmooth","text":"fontlab.flVectorNode.setNextSmooth = setNextSmooth (...) setNextSmooth(QPointF base)","title":"setNextSmooth"},{"location":"fontlab.flVectorNode.html#setposition","text":"fontlab.flVectorNode.setPosition = setPosition (...) void setPosition(QPointF)","title":"setPosition"},{"location":"fontlab.flVectorNode.html#setpositionmode","text":"fontlab.flVectorNode.setPositionMode = setPositionMode (...) void setPositionMode(Mode m)","title":"setPositionMode"},{"location":"fontlab.flVectorNode.html#setprevsmooth","text":"fontlab.flVectorNode.setPrevSmooth = setPrevSmooth (...) setPrevSmooth(QPointF base)","title":"setPrevSmooth"},{"location":"fontlab.flVectorNode.html#setproperty","text":"fontlab.flVectorNode.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flVectorNode.html#setpropertyfloat","text":"fontlab.flVectorNode.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flVectorNode.html#setpropertyint","text":"fontlab.flVectorNode.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flVectorNode.html#setsmartangleenbl","text":"fontlab.flVectorNode.setSmartAngleEnbl = setSmartAngleEnbl (...) bool setSmartAngleEnbl(bool)","title":"setSmartAngleEnbl"},{"location":"fontlab.flVectorNode.html#setsmartsharp","text":"fontlab.flVectorNode.setSmartSharp = setSmartSharp (...) bool setSmartSharp([double tension = 0.6])","title":"setSmartSharp"},{"location":"fontlab.flVectorNode.html#skewby","text":"fontlab.flVectorNode.skewBy = skewBy (...) skewBy(valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)])","title":"skewBy"},{"location":"fontlab.flVectorNode.html#smartangler","text":"fontlab.flVectorNode.smartAngleR smartAngleR","title":"smartAngleR"},{"location":"fontlab.flVectorNode.html#smartmove","text":"fontlab.flVectorNode.smartMove = smartMove (...) list(uint) smartMove(offset)","title":"smartMove"},{"location":"fontlab.flVectorNode.html#smartsetxy","text":"fontlab.flVectorNode.smartSetXY = smartSetXY (...) smartSetXY(QPointF)","title":"smartSetXY"},{"location":"fontlab.flVectorNode.html#smooth","text":"fontlab.flVectorNode.smooth The smooth flag","title":"smooth"},{"location":"fontlab.flVectorNode.html#state","text":"fontlab.flVectorNode.state state","title":"state"},{"location":"fontlab.flVectorNode.html#storecoordinates","text":"fontlab.flVectorNode.storeCoordinates = storeCoordinates (...) storeCoordinates()","title":"storeCoordinates"},{"location":"fontlab.flVectorNode.html#storetestparameters","text":"fontlab.flVectorNode.storeTestParameters = storeTestParameters (...) storeTestParameters()","title":"storeTestParameters"},{"location":"fontlab.flVectorNode.html#tag","text":"fontlab.flVectorNode.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flVectorNode.html#transformby","text":"fontlab.flVectorNode.transformBy = transformBy (...) transformBy(QTransform tx[, QPointF origin=(0, 0)])","title":"transformBy"},{"location":"fontlab.flVectorNode.html#type","text":"fontlab.flVectorNode.type The node type","title":"type"},{"location":"fontlab.flVectorNode.html#update","text":"fontlab.flVectorNode.update = update (...) update()","title":"update"},{"location":"fontlab.flVectorNode.html#updateg2","text":"fontlab.flVectorNode.updateG2 = updateG2 (...) bool updateG2()","title":"updateG2"},{"location":"fontlab.flVectorNode.html#updatesmooth","text":"fontlab.flVectorNode.updateSmooth = updateSmooth (...) updateSmooth([bool extended_neibh=true])","title":"updateSmooth"},{"location":"fontlab.flVectorNode.html#x","text":"fontlab.flVectorNode.x The x coordinate of the node","title":"x"},{"location":"fontlab.flVectorNode.html#y","text":"fontlab.flVectorNode.y The y coordinate of the node","title":"y"},{"location":"fontlab.flVisualItem.html","text":"flVisualItem fontlab.flVisualItem = class flVisualItem ( object ) flVisualItem representation Constructors: flVisualItem() flVisualItem(flVisualItem) flVisualItem(flObject) flVisualItem(objId id) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value acceptEvents (...) int acceptEvents () activateEditor (...) void activateEditor (QPointF canvas_pos) addedToCanvas (...) void addedToCanvas (flCanvas) adjustCanvasPosition (...) QPointF adjustCanvasPosition (QPointF) adjustPosition (...) QPointF | double adjustPosition (QPointF | double) appendDecorator (...) void appendDecorator (flVisualItem, DecoratorOrder) boundingRectOnCanvas (...) QRectF boundingRectOnCanvas ( canvas (...) flCanvas canvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearDecorators (...) clearDecorators () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearItems (...) clearItems () clone (...) Clone the object contain (...) bool contain (QPointF canvas_pos) containsItem (...) bool containsItem (flVisualItem) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateEditor (...) deactivateEditor () distanceTo (...) double distanceTo (QPointF) flag (...) flag (uint f) getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) haveCanvas (...) bool haveCanvas () haveEditor (...) bool haveEditor (QPointF canvas_pos) hide (...) hide () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() invselect (...) invselect () isEqual (...) isEqual (flObject) isSelectable (...) bool isSelectable () isStableSelect (...) bool isStableSelect () itemScale (...) double itemScale () mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem (QPointF) mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem (QPointF | QRectF) mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas (QPointF | QRectF) metricStep (...) double metricStep () move (...) void move (QPointF) paint (...) void paint (QPainter*) preview (...) preview () referencePoint (...) QPointF referencePoint () release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeDecorator (...) void removeDecorator (flVisualItem) removeItem (...) void removeItem (flVisualItem) removeProperty (...) removeProperty ('key') removedFromCanvas (...) removedFromCanvas () restoreHistoryState (...) restoreHistoryState (uint history_ix) select (...) select () setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' show (...) show () tag (...) tag ([string]) unselect (...) unselect () update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceAcceptEvents (...) int instanceAcceptEvents () instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool hovered bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool locked bool name object name opacity double owner flVisualItem refCnt object references count selected bool transform QTransform type object type visible bool Attributes Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} acceptEvents fontlab.flVisualItem.acceptEvents = acceptEvents (...) int acceptEvents() activateEditor fontlab.flVisualItem.activateEditor = activateEditor (...) void activateEditor(QPointF canvas_pos) addedToCanvas fontlab.flVisualItem.addedToCanvas = addedToCanvas (...) void addedToCanvas(flCanvas) adjustCanvasPosition fontlab.flVisualItem.adjustCanvasPosition = adjustCanvasPosition (...) QPointF adjustCanvasPosition(QPointF) adjustPosition fontlab.flVisualItem.adjustPosition = adjustPosition (...) QPointF | double adjustPosition(QPointF | double) appendDecorator fontlab.flVisualItem.appendDecorator = appendDecorator (...) void appendDecorator(flVisualItem, DecoratorOrder) boundingRectOnCanvas fontlab.flVisualItem.boundingRectOnCanvas = boundingRectOnCanvas (...) QRectF boundingRectOnCanvas( canvas fontlab.flVisualItem.canvas = canvas (...) flCanvas canvas() changed fontlab.flVisualItem.changed = changed (...) changed() checkInitHistoryState fontlab.flVisualItem.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flVisualItem.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearDecorators fontlab.flVisualItem.clearDecorators = clearDecorators (...) clearDecorators() clearFlag fontlab.flVisualItem.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flVisualItem.clearFlags = clearFlags (...) clearFlags() clearItems fontlab.flVisualItem.clearItems = clearItems (...) clearItems() clone fontlab.flVisualItem.clone = clone (...) Clone the object cloneObject fontlab.flVisualItem.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); contain fontlab.flVisualItem.contain = contain (...) bool contain(QPointF canvas_pos) containsItem fontlab.flVisualItem.containsItem = containsItem (...) bool containsItem(flVisualItem) createHistoryState fontlab.flVisualItem.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createObject fontlab.flVisualItem.createObject = createObject (...) flObject/Nothing createObject(int); currentHistoryState fontlab.flVisualItem.currentHistoryState = currentHistoryState (...) currentHistoryIx() deactivateEditor fontlab.flVisualItem.deactivateEditor = deactivateEditor (...) deactivateEditor() distanceTo fontlab.flVisualItem.distanceTo = distanceTo (...) double distanceTo(QPointF) flag fontlab.flVisualItem.flag = flag (...) flag(uint f) flObjectFlags fontlab.flVisualItem.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getProperties fontlab.flVisualItem.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flVisualItem.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flVisualItem.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flVisualItem.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' hasChanges fontlab.flVisualItem.hasChanges bool hasHistoryState fontlab.flVisualItem.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flVisualItem.hasHistoryStates bool haveCanvas fontlab.flVisualItem.haveCanvas = haveCanvas (...) bool haveCanvas() haveEditor fontlab.flVisualItem.haveEditor = haveEditor (...) bool haveEditor(QPointF canvas_pos) haveObject fontlab.flVisualItem.haveObject = haveObject (...) bool haveObject(uint); hide fontlab.flVisualItem.hide = hide (...) hide() historyStates fontlab.flVisualItem.historyStates = historyStates (...) historyStates(bool accepted_state) hovered fontlab.flVisualItem.hovered bool id fontlab.flVisualItem.id object id independedAll fontlab.flVisualItem.independedAll = independedAll (...) independedAll() initialHistoryState fontlab.flVisualItem.initialHistoryState = initialHistoryState (...) initialHistoryIx() instanceAcceptEvents fontlab.flVisualItem.instanceAcceptEvents = instanceAcceptEvents (...) int instanceAcceptEvents() instanceType fontlab.flVisualItem.instanceType = instanceType (...) int instanceType(); invselect fontlab.flVisualItem.invselect = invselect (...) invselect() isChanged fontlab.flVisualItem.isChanged bool isEqual fontlab.flVisualItem.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flVisualItem.isNull bool isPresent fontlab.flVisualItem.isPresent bool isReleased fontlab.flVisualItem.isReleased bool isSelectable fontlab.flVisualItem.isSelectable = isSelectable (...) bool isSelectable() isStableSelect fontlab.flVisualItem.isStableSelect = isStableSelect (...) bool isStableSelect() isValid fontlab.flVisualItem.isValid bool itemScale fontlab.flVisualItem.itemScale = itemScale (...) double itemScale() Listeners fontlab.flVisualItem.Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2} locked fontlab.flVisualItem.locked bool mapCanvasDistanceToItem fontlab.flVisualItem.mapCanvasDistanceToItem = mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem(QPointF) mapCanvasToItem fontlab.flVisualItem.mapCanvasToItem = mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem(QPointF | QRectF) mapItemToCanvas fontlab.flVisualItem.mapItemToCanvas = mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas(QPointF | QRectF) metricStep fontlab.flVisualItem.metricStep = metricStep (...) double metricStep() move fontlab.flVisualItem.move = move (...) void move(QPointF) name fontlab.flVisualItem.name object name opacity fontlab.flVisualItem.opacity double owner fontlab.flVisualItem.owner flVisualItem paint fontlab.flVisualItem.paint = paint (...) void paint(QPainter*) preview fontlab.flVisualItem.preview = preview (...) preview() refCnt fontlab.flVisualItem.refCnt object references count referencePoint fontlab.flVisualItem.referencePoint = referencePoint (...) QPointF referencePoint() release fontlab.flVisualItem.release = release (...) release() remove fontlab.flVisualItem.remove = remove (...) remove([flObject]) removeChild fontlab.flVisualItem.removeChild = removeChild (...) removeChild(flObject) removeDecorator fontlab.flVisualItem.removeDecorator = removeDecorator (...) void removeDecorator(flVisualItem) removedFromCanvas fontlab.flVisualItem.removedFromCanvas = removedFromCanvas (...) removedFromCanvas() removeItem fontlab.flVisualItem.removeItem = removeItem (...) void removeItem(flVisualItem) removeProperty fontlab.flVisualItem.removeProperty = removeProperty (...) removeProperty('key') restoreHistoryState fontlab.flVisualItem.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) select fontlab.flVisualItem.select = select (...) select() selected fontlab.flVisualItem.selected bool setFlag fontlab.flVisualItem.setFlag = setFlag (...) setFlag(uint f [, bool value]) setProperty fontlab.flVisualItem.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flVisualItem.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flVisualItem.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' show fontlab.flVisualItem.show = show (...) show() tag fontlab.flVisualItem.tag = tag (...) tag([string]) transform fontlab.flVisualItem.transform QTransform type fontlab.flVisualItem.type object type unselect fontlab.flVisualItem.unselect = unselect (...) unselect() update fontlab.flVisualItem.update = update (...) update() visible fontlab.flVisualItem.visible bool","title":"flVisualItem"},{"location":"fontlab.flVisualItem.html#flvisualitem","text":"","title":"flVisualItem"},{"location":"fontlab.flVisualItem.html#acceptevents","text":"fontlab.flVisualItem.acceptEvents = acceptEvents (...) int acceptEvents()","title":"acceptEvents"},{"location":"fontlab.flVisualItem.html#activateeditor","text":"fontlab.flVisualItem.activateEditor = activateEditor (...) void activateEditor(QPointF canvas_pos)","title":"activateEditor"},{"location":"fontlab.flVisualItem.html#addedtocanvas","text":"fontlab.flVisualItem.addedToCanvas = addedToCanvas (...) void addedToCanvas(flCanvas)","title":"addedToCanvas"},{"location":"fontlab.flVisualItem.html#adjustcanvasposition","text":"fontlab.flVisualItem.adjustCanvasPosition = adjustCanvasPosition (...) QPointF adjustCanvasPosition(QPointF)","title":"adjustCanvasPosition"},{"location":"fontlab.flVisualItem.html#adjustposition","text":"fontlab.flVisualItem.adjustPosition = adjustPosition (...) QPointF | double adjustPosition(QPointF | double)","title":"adjustPosition"},{"location":"fontlab.flVisualItem.html#appenddecorator","text":"fontlab.flVisualItem.appendDecorator = appendDecorator (...) void appendDecorator(flVisualItem, DecoratorOrder)","title":"appendDecorator"},{"location":"fontlab.flVisualItem.html#boundingrectoncanvas","text":"fontlab.flVisualItem.boundingRectOnCanvas = boundingRectOnCanvas (...) QRectF boundingRectOnCanvas(","title":"boundingRectOnCanvas"},{"location":"fontlab.flVisualItem.html#canvas","text":"fontlab.flVisualItem.canvas = canvas (...) flCanvas canvas()","title":"canvas"},{"location":"fontlab.flVisualItem.html#changed","text":"fontlab.flVisualItem.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flVisualItem.html#checkinithistorystate","text":"fontlab.flVisualItem.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flVisualItem.html#clearabovehistory","text":"fontlab.flVisualItem.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flVisualItem.html#cleardecorators","text":"fontlab.flVisualItem.clearDecorators = clearDecorators (...) clearDecorators()","title":"clearDecorators"},{"location":"fontlab.flVisualItem.html#clearflag","text":"fontlab.flVisualItem.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flVisualItem.html#clearflags","text":"fontlab.flVisualItem.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flVisualItem.html#clearitems","text":"fontlab.flVisualItem.clearItems = clearItems (...) clearItems()","title":"clearItems"},{"location":"fontlab.flVisualItem.html#clone","text":"fontlab.flVisualItem.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flVisualItem.html#cloneobject","text":"fontlab.flVisualItem.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flVisualItem.html#contain","text":"fontlab.flVisualItem.contain = contain (...) bool contain(QPointF canvas_pos)","title":"contain"},{"location":"fontlab.flVisualItem.html#containsitem","text":"fontlab.flVisualItem.containsItem = containsItem (...) bool containsItem(flVisualItem)","title":"containsItem"},{"location":"fontlab.flVisualItem.html#createhistorystate","text":"fontlab.flVisualItem.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flVisualItem.html#createobject","text":"fontlab.flVisualItem.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flVisualItem.html#currenthistorystate","text":"fontlab.flVisualItem.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flVisualItem.html#deactivateeditor","text":"fontlab.flVisualItem.deactivateEditor = deactivateEditor (...) deactivateEditor()","title":"deactivateEditor"},{"location":"fontlab.flVisualItem.html#distanceto","text":"fontlab.flVisualItem.distanceTo = distanceTo (...) double distanceTo(QPointF)","title":"distanceTo"},{"location":"fontlab.flVisualItem.html#flag","text":"fontlab.flVisualItem.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flVisualItem.html#flobjectflags","text":"fontlab.flVisualItem.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flVisualItem.html#getproperties","text":"fontlab.flVisualItem.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flVisualItem.html#getproperty","text":"fontlab.flVisualItem.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flVisualItem.html#getpropertyfloat","text":"fontlab.flVisualItem.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flVisualItem.html#getpropertyint","text":"fontlab.flVisualItem.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flVisualItem.html#haschanges","text":"fontlab.flVisualItem.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flVisualItem.html#hashistorystate","text":"fontlab.flVisualItem.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flVisualItem.html#hashistorystates","text":"fontlab.flVisualItem.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flVisualItem.html#havecanvas","text":"fontlab.flVisualItem.haveCanvas = haveCanvas (...) bool haveCanvas()","title":"haveCanvas"},{"location":"fontlab.flVisualItem.html#haveeditor","text":"fontlab.flVisualItem.haveEditor = haveEditor (...) bool haveEditor(QPointF canvas_pos)","title":"haveEditor"},{"location":"fontlab.flVisualItem.html#haveobject","text":"fontlab.flVisualItem.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flVisualItem.html#hide","text":"fontlab.flVisualItem.hide = hide (...) hide()","title":"hide"},{"location":"fontlab.flVisualItem.html#historystates","text":"fontlab.flVisualItem.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flVisualItem.html#hovered","text":"fontlab.flVisualItem.hovered bool","title":"hovered"},{"location":"fontlab.flVisualItem.html#id","text":"fontlab.flVisualItem.id object id","title":"id"},{"location":"fontlab.flVisualItem.html#independedall","text":"fontlab.flVisualItem.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flVisualItem.html#initialhistorystate","text":"fontlab.flVisualItem.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flVisualItem.html#instanceacceptevents","text":"fontlab.flVisualItem.instanceAcceptEvents = instanceAcceptEvents (...) int instanceAcceptEvents()","title":"instanceAcceptEvents"},{"location":"fontlab.flVisualItem.html#instancetype","text":"fontlab.flVisualItem.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flVisualItem.html#invselect","text":"fontlab.flVisualItem.invselect = invselect (...) invselect()","title":"invselect"},{"location":"fontlab.flVisualItem.html#ischanged","text":"fontlab.flVisualItem.isChanged bool","title":"isChanged"},{"location":"fontlab.flVisualItem.html#isequal","text":"fontlab.flVisualItem.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flVisualItem.html#isnull","text":"fontlab.flVisualItem.isNull bool","title":"isNull"},{"location":"fontlab.flVisualItem.html#ispresent","text":"fontlab.flVisualItem.isPresent bool","title":"isPresent"},{"location":"fontlab.flVisualItem.html#isreleased","text":"fontlab.flVisualItem.isReleased bool","title":"isReleased"},{"location":"fontlab.flVisualItem.html#isselectable","text":"fontlab.flVisualItem.isSelectable = isSelectable (...) bool isSelectable()","title":"isSelectable"},{"location":"fontlab.flVisualItem.html#isstableselect","text":"fontlab.flVisualItem.isStableSelect = isStableSelect (...) bool isStableSelect()","title":"isStableSelect"},{"location":"fontlab.flVisualItem.html#isvalid","text":"fontlab.flVisualItem.isValid bool","title":"isValid"},{"location":"fontlab.flVisualItem.html#itemscale","text":"fontlab.flVisualItem.itemScale = itemScale (...) double itemScale()","title":"itemScale"},{"location":"fontlab.flVisualItem.html#listeners","text":"fontlab.flVisualItem.Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2}","title":"Listeners"},{"location":"fontlab.flVisualItem.html#locked","text":"fontlab.flVisualItem.locked bool","title":"locked"},{"location":"fontlab.flVisualItem.html#mapcanvasdistancetoitem","text":"fontlab.flVisualItem.mapCanvasDistanceToItem = mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem(QPointF)","title":"mapCanvasDistanceToItem"},{"location":"fontlab.flVisualItem.html#mapcanvastoitem","text":"fontlab.flVisualItem.mapCanvasToItem = mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem(QPointF | QRectF)","title":"mapCanvasToItem"},{"location":"fontlab.flVisualItem.html#mapitemtocanvas","text":"fontlab.flVisualItem.mapItemToCanvas = mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas(QPointF | QRectF)","title":"mapItemToCanvas"},{"location":"fontlab.flVisualItem.html#metricstep","text":"fontlab.flVisualItem.metricStep = metricStep (...) double metricStep()","title":"metricStep"},{"location":"fontlab.flVisualItem.html#move","text":"fontlab.flVisualItem.move = move (...) void move(QPointF)","title":"move"},{"location":"fontlab.flVisualItem.html#name","text":"fontlab.flVisualItem.name object name","title":"name"},{"location":"fontlab.flVisualItem.html#opacity","text":"fontlab.flVisualItem.opacity double","title":"opacity"},{"location":"fontlab.flVisualItem.html#owner","text":"fontlab.flVisualItem.owner flVisualItem","title":"owner"},{"location":"fontlab.flVisualItem.html#paint","text":"fontlab.flVisualItem.paint = paint (...) void paint(QPainter*)","title":"paint"},{"location":"fontlab.flVisualItem.html#preview","text":"fontlab.flVisualItem.preview = preview (...) preview()","title":"preview"},{"location":"fontlab.flVisualItem.html#refcnt","text":"fontlab.flVisualItem.refCnt object references count","title":"refCnt"},{"location":"fontlab.flVisualItem.html#referencepoint","text":"fontlab.flVisualItem.referencePoint = referencePoint (...) QPointF referencePoint()","title":"referencePoint"},{"location":"fontlab.flVisualItem.html#release","text":"fontlab.flVisualItem.release = release (...) release()","title":"release"},{"location":"fontlab.flVisualItem.html#remove","text":"fontlab.flVisualItem.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flVisualItem.html#removechild","text":"fontlab.flVisualItem.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flVisualItem.html#removedecorator","text":"fontlab.flVisualItem.removeDecorator = removeDecorator (...) void removeDecorator(flVisualItem)","title":"removeDecorator"},{"location":"fontlab.flVisualItem.html#removedfromcanvas","text":"fontlab.flVisualItem.removedFromCanvas = removedFromCanvas (...) removedFromCanvas()","title":"removedFromCanvas"},{"location":"fontlab.flVisualItem.html#removeitem","text":"fontlab.flVisualItem.removeItem = removeItem (...) void removeItem(flVisualItem)","title":"removeItem"},{"location":"fontlab.flVisualItem.html#removeproperty","text":"fontlab.flVisualItem.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flVisualItem.html#restorehistorystate","text":"fontlab.flVisualItem.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flVisualItem.html#select","text":"fontlab.flVisualItem.select = select (...) select()","title":"select"},{"location":"fontlab.flVisualItem.html#selected","text":"fontlab.flVisualItem.selected bool","title":"selected"},{"location":"fontlab.flVisualItem.html#setflag","text":"fontlab.flVisualItem.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flVisualItem.html#setproperty","text":"fontlab.flVisualItem.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flVisualItem.html#setpropertyfloat","text":"fontlab.flVisualItem.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flVisualItem.html#setpropertyint","text":"fontlab.flVisualItem.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flVisualItem.html#show","text":"fontlab.flVisualItem.show = show (...) show()","title":"show"},{"location":"fontlab.flVisualItem.html#tag","text":"fontlab.flVisualItem.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flVisualItem.html#transform","text":"fontlab.flVisualItem.transform QTransform","title":"transform"},{"location":"fontlab.flVisualItem.html#type","text":"fontlab.flVisualItem.type object type","title":"type"},{"location":"fontlab.flVisualItem.html#unselect","text":"fontlab.flVisualItem.unselect = unselect (...) unselect()","title":"unselect"},{"location":"fontlab.flVisualItem.html#update","text":"fontlab.flVisualItem.update = update (...) update()","title":"update"},{"location":"fontlab.flVisualItem.html#visible","text":"fontlab.flVisualItem.visible bool","title":"visible"},{"location":"fontlab.flWorkspace.html","text":"flWorkspace fontlab.flWorkspace = class flWorkspace ( object ) flWorkspace representation Constructors: flWorkspace() flWorkspace(flWorkspace) flWorkspace(flObject) flWorkspace(objId id) flWorkspace(QString title) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __init__ (...) x. __init__ (...) initializes x; see help( type (x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value activateEditor (...) activateEditor (flVisualItem, QPointF canvas_pos) activateNext (...) activateNext () activatePrev (...) activatePrev () addFamilyMembers (...) bool addFamilyMembers (QList [, bool match_subfamily = false]) addPackage (...) addPackage (flPackage) attachCanvas (...) attachCanvas (flCanvas) blockUpdate (...) blockUpdate ([int time = 2000]) canvases (...) QList canvases () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object closePackage (...) closePackage (flPackage) closeProject (...) closeProject () convertMouseEvent (...) flMouseEvent convertMouseEvent (QEvent | QMouseEvent, QPoint) createHistoryState (...) createHistoryState (uint history_ix) createNewProject (...) createNewProject () currentHistoryState (...) currentHistoryIx() deactivateEditor (...) deactivateEditor () destroyCanvas (...) destroyCanvas (flCanvas) doZoomIn (...) doZoomIn ([double s = 2.0]) doZoomOut (...) doZoomOut ([double s = 0.5]) exportCurrentFont (...) exportCurrentFont () exportFont (...) exportFont (flPackage, ExportControl) exportTo (...) bool exportTo (QString filename, QString format=['EPS' | 'JPG' | 'PDF' | 'PNG' | 'SVG']) findPackageId (...) flPackage findPackageId (uint id) flag (...) flag (uint f) getActiveCanvas (...) flCanvas/Nothing getActiveCanvas () getActiveTextBlock (...) flTextBlockItem/Nothing getActiveTextBlock () getBoundingRect (...) QRectF getBoundingRect () getCanvasForViewport (...) flCanvas/Nothing getCanvasForViewport (QWidget*) getCanvasUnderCursor (...) flCanvas getCanvasUnderCursor () getProperties (...) Get object's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' guidelinesUpdater (...) flNotifier guidelinesUpdater () hasHistoryState (...) hasHistoryState (uint history_ix) hasPackage (...) bool hasPackage (const flPackage) haveActiveEditor (...) bool haveActiveEditor () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () init (...) init () initialHistoryState (...) initialHistoryIx() isActiveCanvas (...) bool isActiveCanvas (const flCanvas) isEqual (...) isEqual (flObject) isRulersEnabled (...) bool isRulersEnabled () packages (...) QList & packages () previewRender (...) bool previewRender () readProject (...) bool readProject (const QString) release (...) release () remove (...) remove ([flObject]) removeChild (...) removeChild (flObject) removeProperty (...) removeProperty ('key') resetToolCursor (...) resetToolCursor () restoreHistoryState (...) restoreHistoryState (uint history_ix) saveProject (...) saveProject ([QString]) | bool saveProject (QString, QList , QString ui_state setActiveCanvas (...) setActiveCanvas (flCanvas) setActiveSketchboard (...) setActiveSketchboard () setAutoMode (...) setAutoMode () setFlag (...) setFlag (uint f [, bool value]) setFocusToCanvas (...) setFocusToCanvas (flCanvas) setPreviewRender (...) setPreviewRender (bool) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setRenderMode (...) setRenderMode (RenderMode) setRulers (...) setRulers (bool enabled) setToolBrush (...) setToolBrush () setToolBucket (...) setToolBucket () setToolCursor (...) setToolCursor (CursorId) setToolEditor (...) setToolEditor () setToolEllipse (...) setToolEllipse () setToolGuidelines (...) setToolGuidelines () setToolKnife (...) setToolKnife () setToolMagnet (...) setToolMagnet () setToolMetrics (...) setToolMetrics () setToolOptimizer (...) setToolOptimizer () setToolPen (...) setToolPen () setToolPencil (...) setToolPencil () setToolRectangle (...) setToolRectangle () setToolRotate (...) setToolRotate () setToolScale (...) setToolScale () setToolScissors (...) setToolScissors () setToolShape (...) setToolShape () setToolSlant (...) setToolSlant () setToolSmartPen (...) setToolSmartPen () setToolText (...) setToolText () setToolTransform (...) setToolTransform () showFocus (...) bool showFocus () showSmallItems (...) bool showSmallItems () tag (...) tag ([string]) turnTextModeOff (...) turnTextModeOff () unblockUpdate (...) unblockUpdate () update (...) update () updateActiveViewport (...) updateActiveViewport () weAreOnPaper (...) bool weAreOnPaper () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject/Nothing createObject (int); haveObject (...) bool haveObject (uint); instance (...) flWorkspace instance () instanceType (...) int instanceType (); Descriptors activeFontPanel QWidget* activeTextMode EditMode currentFontPanel QWidget* currentGlyph flGlyphInfo currentPackage flPackage cursorId CursorId defaultFontSize int hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool mainWindow QWidget* name object name paintBrush PaintBrush paintColor QColor pen QPen penColor QColor refCnt object references count signedObjects QMap sketchboard flCanvas, bool new_paper type object type uiState QString Attributes RenderMode = {'RenderIfActive': 0, 'RenderIfMaximized': 1} __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} activateEditor fontlab.flWorkspace.activateEditor = activateEditor (...) activateEditor(flVisualItem, QPointF canvas_pos) activateNext fontlab.flWorkspace.activateNext = activateNext (...) activateNext() activatePrev fontlab.flWorkspace.activatePrev = activatePrev (...) activatePrev() activeFontPanel fontlab.flWorkspace.activeFontPanel QWidget* activeTextMode fontlab.flWorkspace.activeTextMode EditMode addFamilyMembers fontlab.flWorkspace.addFamilyMembers = addFamilyMembers (...) bool addFamilyMembers(QList [, bool match_subfamily = false]) addPackage fontlab.flWorkspace.addPackage = addPackage (...) addPackage(flPackage) attachCanvas fontlab.flWorkspace.attachCanvas = attachCanvas (...) attachCanvas(flCanvas) blockUpdate fontlab.flWorkspace.blockUpdate = blockUpdate (...) blockUpdate([int time = 2000]) canvases fontlab.flWorkspace.canvases = canvases (...) QList canvases() changed fontlab.flWorkspace.changed = changed (...) changed() checkInitHistoryState fontlab.flWorkspace.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix) clearAboveHistory fontlab.flWorkspace.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix) clearFlag fontlab.flWorkspace.clearFlag = clearFlag (...) clearFlag(uint f) clearFlags fontlab.flWorkspace.clearFlags = clearFlags (...) clearFlags() clone fontlab.flWorkspace.clone = clone (...) Clone the object cloneObject fontlab.flWorkspace.cloneObject = cloneObject (...) flObject cloneObject(const flObject & ); closePackage fontlab.flWorkspace.closePackage = closePackage (...) closePackage(flPackage) closeProject fontlab.flWorkspace.closeProject = closeProject (...) closeProject() convertMouseEvent fontlab.flWorkspace.convertMouseEvent = convertMouseEvent (...) flMouseEvent convertMouseEvent(QEvent | QMouseEvent, QPoint) createHistoryState fontlab.flWorkspace.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix) createNewProject fontlab.flWorkspace.createNewProject = createNewProject (...) createNewProject() createObject fontlab.flWorkspace.createObject = createObject (...) flObject/Nothing createObject(int); currentFontPanel fontlab.flWorkspace.currentFontPanel QWidget* currentGlyph fontlab.flWorkspace.currentGlyph flGlyphInfo currentHistoryState fontlab.flWorkspace.currentHistoryState = currentHistoryState (...) currentHistoryIx() currentPackage fontlab.flWorkspace.currentPackage flPackage cursorId fontlab.flWorkspace.cursorId CursorId deactivateEditor fontlab.flWorkspace.deactivateEditor = deactivateEditor (...) deactivateEditor() defaultFontSize fontlab.flWorkspace.defaultFontSize int destroyCanvas fontlab.flWorkspace.destroyCanvas = destroyCanvas (...) destroyCanvas(flCanvas) doZoomIn fontlab.flWorkspace.doZoomIn = doZoomIn (...) doZoomIn([double s = 2.0]) doZoomOut fontlab.flWorkspace.doZoomOut = doZoomOut (...) doZoomOut([double s = 0.5]) exportCurrentFont fontlab.flWorkspace.exportCurrentFont = exportCurrentFont (...) exportCurrentFont() exportFont fontlab.flWorkspace.exportFont = exportFont (...) exportFont(flPackage, ExportControl) exportTo fontlab.flWorkspace.exportTo = exportTo (...) bool exportTo(QString filename, QString format=['EPS' | 'JPG' | 'PDF' | 'PNG' | 'SVG']) findPackageId fontlab.flWorkspace.findPackageId = findPackageId (...) flPackage findPackageId(uint id) flag fontlab.flWorkspace.flag = flag (...) flag(uint f) flObjectFlags fontlab.flWorkspace.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} getActiveCanvas fontlab.flWorkspace.getActiveCanvas = getActiveCanvas (...) flCanvas/Nothing getActiveCanvas() getActiveTextBlock fontlab.flWorkspace.getActiveTextBlock = getActiveTextBlock (...) flTextBlockItem/Nothing getActiveTextBlock() getBoundingRect fontlab.flWorkspace.getBoundingRect = getBoundingRect (...) QRectF getBoundingRect() getCanvasForViewport fontlab.flWorkspace.getCanvasForViewport = getCanvasForViewport (...) flCanvas/Nothing getCanvasForViewport(QWidget*) getCanvasUnderCursor fontlab.flWorkspace.getCanvasUnderCursor = getCanvasUnderCursor (...) flCanvas getCanvasUnderCursor() getProperties fontlab.flWorkspace.getProperties = getProperties (...) Get object's properties list getProperty fontlab.flWorkspace.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number getPropertyFloat fontlab.flWorkspace.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key' getPropertyInt fontlab.flWorkspace.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key' guidelinesUpdater fontlab.flWorkspace.guidelinesUpdater = guidelinesUpdater (...) flNotifier guidelinesUpdater() hasChanges fontlab.flWorkspace.hasChanges bool hasHistoryState fontlab.flWorkspace.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix) hasHistoryStates fontlab.flWorkspace.hasHistoryStates bool hasPackage fontlab.flWorkspace.hasPackage = hasPackage (...) bool hasPackage(const flPackage) haveActiveEditor fontlab.flWorkspace.haveActiveEditor = haveActiveEditor (...) bool haveActiveEditor() haveObject fontlab.flWorkspace.haveObject = haveObject (...) bool haveObject(uint); historyStates fontlab.flWorkspace.historyStates = historyStates (...) historyStates(bool accepted_state) id fontlab.flWorkspace.id object id independedAll fontlab.flWorkspace.independedAll = independedAll (...) independedAll() init fontlab.flWorkspace.init = init (...) init() initialHistoryState fontlab.flWorkspace.initialHistoryState = initialHistoryState (...) initialHistoryIx() instance fontlab.flWorkspace.instance = instance (...) flWorkspace instance() instanceType fontlab.flWorkspace.instanceType = instanceType (...) int instanceType(); isActiveCanvas fontlab.flWorkspace.isActiveCanvas = isActiveCanvas (...) bool isActiveCanvas(const flCanvas) isChanged fontlab.flWorkspace.isChanged bool isEqual fontlab.flWorkspace.isEqual = isEqual (...) isEqual(flObject) isNull fontlab.flWorkspace.isNull bool isPresent fontlab.flWorkspace.isPresent bool isReleased fontlab.flWorkspace.isReleased bool isRulersEnabled fontlab.flWorkspace.isRulersEnabled = isRulersEnabled (...) bool isRulersEnabled() isValid fontlab.flWorkspace.isValid bool mainWindow fontlab.flWorkspace.mainWindow QWidget* name fontlab.flWorkspace.name object name packages fontlab.flWorkspace.packages = packages (...) QList & packages() paintBrush fontlab.flWorkspace.paintBrush PaintBrush paintColor fontlab.flWorkspace.paintColor QColor pen fontlab.flWorkspace.pen QPen penColor fontlab.flWorkspace.penColor QColor previewRender fontlab.flWorkspace.previewRender = previewRender (...) bool previewRender() readProject fontlab.flWorkspace.readProject = readProject (...) bool readProject(const QString) refCnt fontlab.flWorkspace.refCnt object references count release fontlab.flWorkspace.release = release (...) release() remove fontlab.flWorkspace.remove = remove (...) remove([flObject]) removeChild fontlab.flWorkspace.removeChild = removeChild (...) removeChild(flObject) removeProperty fontlab.flWorkspace.removeProperty = removeProperty (...) removeProperty('key') RenderMode fontlab.flWorkspace.RenderMode = {'RenderIfActive': 0, 'RenderIfMaximized': 1} resetToolCursor fontlab.flWorkspace.resetToolCursor = resetToolCursor (...) resetToolCursor() restoreHistoryState fontlab.flWorkspace.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix) saveProject fontlab.flWorkspace.saveProject = saveProject (...) saveProject([QString]) | bool saveProject(QString, QList , QString ui_state setActiveCanvas fontlab.flWorkspace.setActiveCanvas = setActiveCanvas (...) setActiveCanvas(flCanvas) setActiveSketchboard fontlab.flWorkspace.setActiveSketchboard = setActiveSketchboard (...) setActiveSketchboard() setAutoMode fontlab.flWorkspace.setAutoMode = setAutoMode (...) setAutoMode() setFlag fontlab.flWorkspace.setFlag = setFlag (...) setFlag(uint f [, bool value]) setFocusToCanvas fontlab.flWorkspace.setFocusToCanvas = setFocusToCanvas (...) setFocusToCanvas(flCanvas) setPreviewRender fontlab.flWorkspace.setPreviewRender = setPreviewRender (...) setPreviewRender(bool) setProperty fontlab.flWorkspace.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number setPropertyFloat fontlab.flWorkspace.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key' setPropertyInt fontlab.flWorkspace.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key' setRenderMode fontlab.flWorkspace.setRenderMode = setRenderMode (...) setRenderMode(RenderMode) setRulers fontlab.flWorkspace.setRulers = setRulers (...) setRulers(bool enabled) setToolBrush fontlab.flWorkspace.setToolBrush = setToolBrush (...) setToolBrush() setToolBucket fontlab.flWorkspace.setToolBucket = setToolBucket (...) setToolBucket() setToolCursor fontlab.flWorkspace.setToolCursor = setToolCursor (...) setToolCursor(CursorId) setToolEditor fontlab.flWorkspace.setToolEditor = setToolEditor (...) setToolEditor() setToolEllipse fontlab.flWorkspace.setToolEllipse = setToolEllipse (...) setToolEllipse() setToolGuidelines fontlab.flWorkspace.setToolGuidelines = setToolGuidelines (...) setToolGuidelines() setToolKnife fontlab.flWorkspace.setToolKnife = setToolKnife (...) setToolKnife() setToolMagnet fontlab.flWorkspace.setToolMagnet = setToolMagnet (...) setToolMagnet() setToolMetrics fontlab.flWorkspace.setToolMetrics = setToolMetrics (...) setToolMetrics() setToolOptimizer fontlab.flWorkspace.setToolOptimizer = setToolOptimizer (...) setToolOptimizer() setToolPen fontlab.flWorkspace.setToolPen = setToolPen (...) setToolPen() setToolPencil fontlab.flWorkspace.setToolPencil = setToolPencil (...) setToolPencil() setToolRectangle fontlab.flWorkspace.setToolRectangle = setToolRectangle (...) setToolRectangle() setToolRotate fontlab.flWorkspace.setToolRotate = setToolRotate (...) setToolRotate() setToolScale fontlab.flWorkspace.setToolScale = setToolScale (...) setToolScale() setToolScissors fontlab.flWorkspace.setToolScissors = setToolScissors (...) setToolScissors() setToolShape fontlab.flWorkspace.setToolShape = setToolShape (...) setToolShape() setToolSlant fontlab.flWorkspace.setToolSlant = setToolSlant (...) setToolSlant() setToolSmartPen fontlab.flWorkspace.setToolSmartPen = setToolSmartPen (...) setToolSmartPen() setToolText fontlab.flWorkspace.setToolText = setToolText (...) setToolText() setToolTransform fontlab.flWorkspace.setToolTransform = setToolTransform (...) setToolTransform() showFocus fontlab.flWorkspace.showFocus = showFocus (...) bool showFocus() showSmallItems fontlab.flWorkspace.showSmallItems = showSmallItems (...) bool showSmallItems() signedObjects fontlab.flWorkspace.signedObjects QMap sketchboard fontlab.flWorkspace.sketchboard flCanvas, bool new_paper tag fontlab.flWorkspace.tag = tag (...) tag([string]) turnTextModeOff fontlab.flWorkspace.turnTextModeOff = turnTextModeOff (...) turnTextModeOff() type fontlab.flWorkspace.type object type uiState fontlab.flWorkspace.uiState QString unblockUpdate fontlab.flWorkspace.unblockUpdate = unblockUpdate (...) unblockUpdate() update fontlab.flWorkspace.update = update (...) update() updateActiveViewport fontlab.flWorkspace.updateActiveViewport = updateActiveViewport (...) updateActiveViewport() weAreOnPaper fontlab.flWorkspace.weAreOnPaper = weAreOnPaper (...) bool weAreOnPaper() Example import os.path # Access the font-specific logic of FontLab 7 with # the `fontlab` package from fontlab import * # Access the entire Qt application framework that powers # FontLab 7 with the `PythonQt` package # `PythonQt.QtGui` exposes the full Qt GUI toolkit to build # simple and most complex UIs from PythonQt import QtGui # Checks if a `.vfc` file with the same file name as this # script file exists in the same folder loc = [os.path.dirname(__file__)] + list(os.path.splitext(os.path.basename(__file__))) fontPath = os.path.join(loc[0], loc[1] + '.vfc') # If there is no such file, opens a file open dialog with # `QtGui.QFileDialog`, so you can pick a font file or Cancel if not os.path.exists(fontPath): fontPath = QtGui.QFileDialog.getOpenFileName( None, 'Choose font', loc[0], '') # If there is a font file, export its instances as OTF if fontPath: # `fontlab.flWorkspace` instance is the FontLab 7 app # seen as the font editor ws = flWorkspace.instance() # `.mainWindow` is the graphical interface of FontLab 7 main = ws.mainWindow # `.loadFont` opens a file in the FontLab GUI main.loadFont(fontPath) # `.currentPackage` is the active `fontlab.flPackage`, # which is a font inside FontLab fp = ws.currentPackage # `fontlab.flPreferences` has the FL7 preferences # that hold numeric constants that represent values # in the Export Font As dialog settings pref = flPreferences() # New `fontlab.ExportControl` class corresponds to # the settings of File Export Font As... ec = ExportControl() ec.profileName = \"OpenType PS\" ec.destinationMode = pref.DestinationFolder ec.conflictMode = pref.ConflictOverwrite ec.contentMode = pref.ContentInstances ec.destinationFolder = os.path.dirname(fontPath) ec.groupProfiles = False ec.groupFamily = True # `flWorkspace.exportFont` exports the `flPackage` # with `ExportControl` settings ws.exportFont(fp, ec) # `QtGui.QApplication` instance is the FontLab 7 app # seen as a graphical app that uses the Qt framework qapp = QtGui.QApplication.instance() # Quit the FontLab 7 app qapp.quit()","title":"flWorkspace"},{"location":"fontlab.flWorkspace.html#flworkspace","text":"","title":"flWorkspace"},{"location":"fontlab.flWorkspace.html#activateeditor","text":"fontlab.flWorkspace.activateEditor = activateEditor (...) activateEditor(flVisualItem, QPointF canvas_pos)","title":"activateEditor"},{"location":"fontlab.flWorkspace.html#activatenext","text":"fontlab.flWorkspace.activateNext = activateNext (...) activateNext()","title":"activateNext"},{"location":"fontlab.flWorkspace.html#activateprev","text":"fontlab.flWorkspace.activatePrev = activatePrev (...) activatePrev()","title":"activatePrev"},{"location":"fontlab.flWorkspace.html#activefontpanel","text":"fontlab.flWorkspace.activeFontPanel QWidget*","title":"activeFontPanel"},{"location":"fontlab.flWorkspace.html#activetextmode","text":"fontlab.flWorkspace.activeTextMode EditMode","title":"activeTextMode"},{"location":"fontlab.flWorkspace.html#addfamilymembers","text":"fontlab.flWorkspace.addFamilyMembers = addFamilyMembers (...) bool addFamilyMembers(QList [, bool match_subfamily = false])","title":"addFamilyMembers"},{"location":"fontlab.flWorkspace.html#addpackage","text":"fontlab.flWorkspace.addPackage = addPackage (...) addPackage(flPackage)","title":"addPackage"},{"location":"fontlab.flWorkspace.html#attachcanvas","text":"fontlab.flWorkspace.attachCanvas = attachCanvas (...) attachCanvas(flCanvas)","title":"attachCanvas"},{"location":"fontlab.flWorkspace.html#blockupdate","text":"fontlab.flWorkspace.blockUpdate = blockUpdate (...) blockUpdate([int time = 2000])","title":"blockUpdate"},{"location":"fontlab.flWorkspace.html#canvases","text":"fontlab.flWorkspace.canvases = canvases (...) QList canvases()","title":"canvases"},{"location":"fontlab.flWorkspace.html#changed","text":"fontlab.flWorkspace.changed = changed (...) changed()","title":"changed"},{"location":"fontlab.flWorkspace.html#checkinithistorystate","text":"fontlab.flWorkspace.checkInitHistoryState = checkInitHistoryState (...) checkInitHistoryState(uint history_ix)","title":"checkInitHistoryState"},{"location":"fontlab.flWorkspace.html#clearabovehistory","text":"fontlab.flWorkspace.clearAboveHistory = clearAboveHistory (...) clearAboveHistory(uint history_ix)","title":"clearAboveHistory"},{"location":"fontlab.flWorkspace.html#clearflag","text":"fontlab.flWorkspace.clearFlag = clearFlag (...) clearFlag(uint f)","title":"clearFlag"},{"location":"fontlab.flWorkspace.html#clearflags","text":"fontlab.flWorkspace.clearFlags = clearFlags (...) clearFlags()","title":"clearFlags"},{"location":"fontlab.flWorkspace.html#clone","text":"fontlab.flWorkspace.clone = clone (...) Clone the object","title":"clone"},{"location":"fontlab.flWorkspace.html#cloneobject","text":"fontlab.flWorkspace.cloneObject = cloneObject (...) flObject cloneObject(const flObject & );","title":"cloneObject"},{"location":"fontlab.flWorkspace.html#closepackage","text":"fontlab.flWorkspace.closePackage = closePackage (...) closePackage(flPackage)","title":"closePackage"},{"location":"fontlab.flWorkspace.html#closeproject","text":"fontlab.flWorkspace.closeProject = closeProject (...) closeProject()","title":"closeProject"},{"location":"fontlab.flWorkspace.html#convertmouseevent","text":"fontlab.flWorkspace.convertMouseEvent = convertMouseEvent (...) flMouseEvent convertMouseEvent(QEvent | QMouseEvent, QPoint)","title":"convertMouseEvent"},{"location":"fontlab.flWorkspace.html#createhistorystate","text":"fontlab.flWorkspace.createHistoryState = createHistoryState (...) createHistoryState(uint history_ix)","title":"createHistoryState"},{"location":"fontlab.flWorkspace.html#createnewproject","text":"fontlab.flWorkspace.createNewProject = createNewProject (...) createNewProject()","title":"createNewProject"},{"location":"fontlab.flWorkspace.html#createobject","text":"fontlab.flWorkspace.createObject = createObject (...) flObject/Nothing createObject(int);","title":"createObject"},{"location":"fontlab.flWorkspace.html#currentfontpanel","text":"fontlab.flWorkspace.currentFontPanel QWidget*","title":"currentFontPanel"},{"location":"fontlab.flWorkspace.html#currentglyph","text":"fontlab.flWorkspace.currentGlyph flGlyphInfo","title":"currentGlyph"},{"location":"fontlab.flWorkspace.html#currenthistorystate","text":"fontlab.flWorkspace.currentHistoryState = currentHistoryState (...) currentHistoryIx()","title":"currentHistoryState"},{"location":"fontlab.flWorkspace.html#currentpackage","text":"fontlab.flWorkspace.currentPackage flPackage","title":"currentPackage"},{"location":"fontlab.flWorkspace.html#cursorid","text":"fontlab.flWorkspace.cursorId CursorId","title":"cursorId"},{"location":"fontlab.flWorkspace.html#deactivateeditor","text":"fontlab.flWorkspace.deactivateEditor = deactivateEditor (...) deactivateEditor()","title":"deactivateEditor"},{"location":"fontlab.flWorkspace.html#defaultfontsize","text":"fontlab.flWorkspace.defaultFontSize int","title":"defaultFontSize"},{"location":"fontlab.flWorkspace.html#destroycanvas","text":"fontlab.flWorkspace.destroyCanvas = destroyCanvas (...) destroyCanvas(flCanvas)","title":"destroyCanvas"},{"location":"fontlab.flWorkspace.html#dozoomin","text":"fontlab.flWorkspace.doZoomIn = doZoomIn (...) doZoomIn([double s = 2.0])","title":"doZoomIn"},{"location":"fontlab.flWorkspace.html#dozoomout","text":"fontlab.flWorkspace.doZoomOut = doZoomOut (...) doZoomOut([double s = 0.5])","title":"doZoomOut"},{"location":"fontlab.flWorkspace.html#exportcurrentfont","text":"fontlab.flWorkspace.exportCurrentFont = exportCurrentFont (...) exportCurrentFont()","title":"exportCurrentFont"},{"location":"fontlab.flWorkspace.html#exportfont","text":"fontlab.flWorkspace.exportFont = exportFont (...) exportFont(flPackage, ExportControl)","title":"exportFont"},{"location":"fontlab.flWorkspace.html#exportto","text":"fontlab.flWorkspace.exportTo = exportTo (...) bool exportTo(QString filename, QString format=['EPS' | 'JPG' | 'PDF' | 'PNG' | 'SVG'])","title":"exportTo"},{"location":"fontlab.flWorkspace.html#findpackageid","text":"fontlab.flWorkspace.findPackageId = findPackageId (...) flPackage findPackageId(uint id)","title":"findPackageId"},{"location":"fontlab.flWorkspace.html#flag","text":"fontlab.flWorkspace.flag = flag (...) flag(uint f)","title":"flag"},{"location":"fontlab.flWorkspace.html#flobjectflags","text":"fontlab.flWorkspace.flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32}","title":"flObjectFlags"},{"location":"fontlab.flWorkspace.html#getactivecanvas","text":"fontlab.flWorkspace.getActiveCanvas = getActiveCanvas (...) flCanvas/Nothing getActiveCanvas()","title":"getActiveCanvas"},{"location":"fontlab.flWorkspace.html#getactivetextblock","text":"fontlab.flWorkspace.getActiveTextBlock = getActiveTextBlock (...) flTextBlockItem/Nothing getActiveTextBlock()","title":"getActiveTextBlock"},{"location":"fontlab.flWorkspace.html#getboundingrect","text":"fontlab.flWorkspace.getBoundingRect = getBoundingRect (...) QRectF getBoundingRect()","title":"getBoundingRect"},{"location":"fontlab.flWorkspace.html#getcanvasforviewport","text":"fontlab.flWorkspace.getCanvasForViewport = getCanvasForViewport (...) flCanvas/Nothing getCanvasForViewport(QWidget*)","title":"getCanvasForViewport"},{"location":"fontlab.flWorkspace.html#getcanvasundercursor","text":"fontlab.flWorkspace.getCanvasUnderCursor = getCanvasUnderCursor (...) flCanvas getCanvasUnderCursor()","title":"getCanvasUnderCursor"},{"location":"fontlab.flWorkspace.html#getproperties","text":"fontlab.flWorkspace.getProperties = getProperties (...) Get object's properties list","title":"getProperties"},{"location":"fontlab.flWorkspace.html#getproperty","text":"fontlab.flWorkspace.getProperty = getProperty (...) getProperty('key') - get object property by 'key' or number","title":"getProperty"},{"location":"fontlab.flWorkspace.html#getpropertyfloat","text":"fontlab.flWorkspace.getPropertyFloat = getPropertyFloat (...) getPropertyFloat('key') - get float object property by 'key'","title":"getPropertyFloat"},{"location":"fontlab.flWorkspace.html#getpropertyint","text":"fontlab.flWorkspace.getPropertyInt = getPropertyInt (...) getPropertyInt('key') - get int object property by 'key'","title":"getPropertyInt"},{"location":"fontlab.flWorkspace.html#guidelinesupdater","text":"fontlab.flWorkspace.guidelinesUpdater = guidelinesUpdater (...) flNotifier guidelinesUpdater()","title":"guidelinesUpdater"},{"location":"fontlab.flWorkspace.html#haschanges","text":"fontlab.flWorkspace.hasChanges bool","title":"hasChanges"},{"location":"fontlab.flWorkspace.html#hashistorystate","text":"fontlab.flWorkspace.hasHistoryState = hasHistoryState (...) hasHistoryState(uint history_ix)","title":"hasHistoryState"},{"location":"fontlab.flWorkspace.html#hashistorystates","text":"fontlab.flWorkspace.hasHistoryStates bool","title":"hasHistoryStates"},{"location":"fontlab.flWorkspace.html#haspackage","text":"fontlab.flWorkspace.hasPackage = hasPackage (...) bool hasPackage(const flPackage)","title":"hasPackage"},{"location":"fontlab.flWorkspace.html#haveactiveeditor","text":"fontlab.flWorkspace.haveActiveEditor = haveActiveEditor (...) bool haveActiveEditor()","title":"haveActiveEditor"},{"location":"fontlab.flWorkspace.html#haveobject","text":"fontlab.flWorkspace.haveObject = haveObject (...) bool haveObject(uint);","title":"haveObject"},{"location":"fontlab.flWorkspace.html#historystates","text":"fontlab.flWorkspace.historyStates = historyStates (...) historyStates(bool accepted_state)","title":"historyStates"},{"location":"fontlab.flWorkspace.html#id","text":"fontlab.flWorkspace.id object id","title":"id"},{"location":"fontlab.flWorkspace.html#independedall","text":"fontlab.flWorkspace.independedAll = independedAll (...) independedAll()","title":"independedAll"},{"location":"fontlab.flWorkspace.html#init","text":"fontlab.flWorkspace.init = init (...) init()","title":"init"},{"location":"fontlab.flWorkspace.html#initialhistorystate","text":"fontlab.flWorkspace.initialHistoryState = initialHistoryState (...) initialHistoryIx()","title":"initialHistoryState"},{"location":"fontlab.flWorkspace.html#instance","text":"fontlab.flWorkspace.instance = instance (...) flWorkspace instance()","title":"instance"},{"location":"fontlab.flWorkspace.html#instancetype","text":"fontlab.flWorkspace.instanceType = instanceType (...) int instanceType();","title":"instanceType"},{"location":"fontlab.flWorkspace.html#isactivecanvas","text":"fontlab.flWorkspace.isActiveCanvas = isActiveCanvas (...) bool isActiveCanvas(const flCanvas)","title":"isActiveCanvas"},{"location":"fontlab.flWorkspace.html#ischanged","text":"fontlab.flWorkspace.isChanged bool","title":"isChanged"},{"location":"fontlab.flWorkspace.html#isequal","text":"fontlab.flWorkspace.isEqual = isEqual (...) isEqual(flObject)","title":"isEqual"},{"location":"fontlab.flWorkspace.html#isnull","text":"fontlab.flWorkspace.isNull bool","title":"isNull"},{"location":"fontlab.flWorkspace.html#ispresent","text":"fontlab.flWorkspace.isPresent bool","title":"isPresent"},{"location":"fontlab.flWorkspace.html#isreleased","text":"fontlab.flWorkspace.isReleased bool","title":"isReleased"},{"location":"fontlab.flWorkspace.html#isrulersenabled","text":"fontlab.flWorkspace.isRulersEnabled = isRulersEnabled (...) bool isRulersEnabled()","title":"isRulersEnabled"},{"location":"fontlab.flWorkspace.html#isvalid","text":"fontlab.flWorkspace.isValid bool","title":"isValid"},{"location":"fontlab.flWorkspace.html#mainwindow","text":"fontlab.flWorkspace.mainWindow QWidget*","title":"mainWindow"},{"location":"fontlab.flWorkspace.html#name","text":"fontlab.flWorkspace.name object name","title":"name"},{"location":"fontlab.flWorkspace.html#packages","text":"fontlab.flWorkspace.packages = packages (...) QList & packages()","title":"packages"},{"location":"fontlab.flWorkspace.html#paintbrush","text":"fontlab.flWorkspace.paintBrush PaintBrush","title":"paintBrush"},{"location":"fontlab.flWorkspace.html#paintcolor","text":"fontlab.flWorkspace.paintColor QColor","title":"paintColor"},{"location":"fontlab.flWorkspace.html#pen","text":"fontlab.flWorkspace.pen QPen","title":"pen"},{"location":"fontlab.flWorkspace.html#pencolor","text":"fontlab.flWorkspace.penColor QColor","title":"penColor"},{"location":"fontlab.flWorkspace.html#previewrender","text":"fontlab.flWorkspace.previewRender = previewRender (...) bool previewRender()","title":"previewRender"},{"location":"fontlab.flWorkspace.html#readproject","text":"fontlab.flWorkspace.readProject = readProject (...) bool readProject(const QString)","title":"readProject"},{"location":"fontlab.flWorkspace.html#refcnt","text":"fontlab.flWorkspace.refCnt object references count","title":"refCnt"},{"location":"fontlab.flWorkspace.html#release","text":"fontlab.flWorkspace.release = release (...) release()","title":"release"},{"location":"fontlab.flWorkspace.html#remove","text":"fontlab.flWorkspace.remove = remove (...) remove([flObject])","title":"remove"},{"location":"fontlab.flWorkspace.html#removechild","text":"fontlab.flWorkspace.removeChild = removeChild (...) removeChild(flObject)","title":"removeChild"},{"location":"fontlab.flWorkspace.html#removeproperty","text":"fontlab.flWorkspace.removeProperty = removeProperty (...) removeProperty('key')","title":"removeProperty"},{"location":"fontlab.flWorkspace.html#rendermode","text":"fontlab.flWorkspace.RenderMode = {'RenderIfActive': 0, 'RenderIfMaximized': 1}","title":"RenderMode"},{"location":"fontlab.flWorkspace.html#resettoolcursor","text":"fontlab.flWorkspace.resetToolCursor = resetToolCursor (...) resetToolCursor()","title":"resetToolCursor"},{"location":"fontlab.flWorkspace.html#restorehistorystate","text":"fontlab.flWorkspace.restoreHistoryState = restoreHistoryState (...) restoreHistoryState(uint history_ix)","title":"restoreHistoryState"},{"location":"fontlab.flWorkspace.html#saveproject","text":"fontlab.flWorkspace.saveProject = saveProject (...) saveProject([QString]) | bool saveProject(QString, QList , QString ui_state","title":"saveProject"},{"location":"fontlab.flWorkspace.html#setactivecanvas","text":"fontlab.flWorkspace.setActiveCanvas = setActiveCanvas (...) setActiveCanvas(flCanvas)","title":"setActiveCanvas"},{"location":"fontlab.flWorkspace.html#setactivesketchboard","text":"fontlab.flWorkspace.setActiveSketchboard = setActiveSketchboard (...) setActiveSketchboard()","title":"setActiveSketchboard"},{"location":"fontlab.flWorkspace.html#setautomode","text":"fontlab.flWorkspace.setAutoMode = setAutoMode (...) setAutoMode()","title":"setAutoMode"},{"location":"fontlab.flWorkspace.html#setflag","text":"fontlab.flWorkspace.setFlag = setFlag (...) setFlag(uint f [, bool value])","title":"setFlag"},{"location":"fontlab.flWorkspace.html#setfocustocanvas","text":"fontlab.flWorkspace.setFocusToCanvas = setFocusToCanvas (...) setFocusToCanvas(flCanvas)","title":"setFocusToCanvas"},{"location":"fontlab.flWorkspace.html#setpreviewrender","text":"fontlab.flWorkspace.setPreviewRender = setPreviewRender (...) setPreviewRender(bool)","title":"setPreviewRender"},{"location":"fontlab.flWorkspace.html#setproperty","text":"fontlab.flWorkspace.setProperty = setProperty (...) setProperty('key', value) - set object property by 'key' or number","title":"setProperty"},{"location":"fontlab.flWorkspace.html#setpropertyfloat","text":"fontlab.flWorkspace.setPropertyFloat = setPropertyFloat (...) setPropertyFloat('key', value) - set float object property by 'key'","title":"setPropertyFloat"},{"location":"fontlab.flWorkspace.html#setpropertyint","text":"fontlab.flWorkspace.setPropertyInt = setPropertyInt (...) setPropertyInt('key', value) - set int object property by 'key'","title":"setPropertyInt"},{"location":"fontlab.flWorkspace.html#setrendermode","text":"fontlab.flWorkspace.setRenderMode = setRenderMode (...) setRenderMode(RenderMode)","title":"setRenderMode"},{"location":"fontlab.flWorkspace.html#setrulers","text":"fontlab.flWorkspace.setRulers = setRulers (...) setRulers(bool enabled)","title":"setRulers"},{"location":"fontlab.flWorkspace.html#settoolbrush","text":"fontlab.flWorkspace.setToolBrush = setToolBrush (...) setToolBrush()","title":"setToolBrush"},{"location":"fontlab.flWorkspace.html#settoolbucket","text":"fontlab.flWorkspace.setToolBucket = setToolBucket (...) setToolBucket()","title":"setToolBucket"},{"location":"fontlab.flWorkspace.html#settoolcursor","text":"fontlab.flWorkspace.setToolCursor = setToolCursor (...) setToolCursor(CursorId)","title":"setToolCursor"},{"location":"fontlab.flWorkspace.html#settooleditor","text":"fontlab.flWorkspace.setToolEditor = setToolEditor (...) setToolEditor()","title":"setToolEditor"},{"location":"fontlab.flWorkspace.html#settoolellipse","text":"fontlab.flWorkspace.setToolEllipse = setToolEllipse (...) setToolEllipse()","title":"setToolEllipse"},{"location":"fontlab.flWorkspace.html#settoolguidelines","text":"fontlab.flWorkspace.setToolGuidelines = setToolGuidelines (...) setToolGuidelines()","title":"setToolGuidelines"},{"location":"fontlab.flWorkspace.html#settoolknife","text":"fontlab.flWorkspace.setToolKnife = setToolKnife (...) setToolKnife()","title":"setToolKnife"},{"location":"fontlab.flWorkspace.html#settoolmagnet","text":"fontlab.flWorkspace.setToolMagnet = setToolMagnet (...) setToolMagnet()","title":"setToolMagnet"},{"location":"fontlab.flWorkspace.html#settoolmetrics","text":"fontlab.flWorkspace.setToolMetrics = setToolMetrics (...) setToolMetrics()","title":"setToolMetrics"},{"location":"fontlab.flWorkspace.html#settooloptimizer","text":"fontlab.flWorkspace.setToolOptimizer = setToolOptimizer (...) setToolOptimizer()","title":"setToolOptimizer"},{"location":"fontlab.flWorkspace.html#settoolpen","text":"fontlab.flWorkspace.setToolPen = setToolPen (...) setToolPen()","title":"setToolPen"},{"location":"fontlab.flWorkspace.html#settoolpencil","text":"fontlab.flWorkspace.setToolPencil = setToolPencil (...) setToolPencil()","title":"setToolPencil"},{"location":"fontlab.flWorkspace.html#settoolrectangle","text":"fontlab.flWorkspace.setToolRectangle = setToolRectangle (...) setToolRectangle()","title":"setToolRectangle"},{"location":"fontlab.flWorkspace.html#settoolrotate","text":"fontlab.flWorkspace.setToolRotate = setToolRotate (...) setToolRotate()","title":"setToolRotate"},{"location":"fontlab.flWorkspace.html#settoolscale","text":"fontlab.flWorkspace.setToolScale = setToolScale (...) setToolScale()","title":"setToolScale"},{"location":"fontlab.flWorkspace.html#settoolscissors","text":"fontlab.flWorkspace.setToolScissors = setToolScissors (...) setToolScissors()","title":"setToolScissors"},{"location":"fontlab.flWorkspace.html#settoolshape","text":"fontlab.flWorkspace.setToolShape = setToolShape (...) setToolShape()","title":"setToolShape"},{"location":"fontlab.flWorkspace.html#settoolslant","text":"fontlab.flWorkspace.setToolSlant = setToolSlant (...) setToolSlant()","title":"setToolSlant"},{"location":"fontlab.flWorkspace.html#settoolsmartpen","text":"fontlab.flWorkspace.setToolSmartPen = setToolSmartPen (...) setToolSmartPen()","title":"setToolSmartPen"},{"location":"fontlab.flWorkspace.html#settooltext","text":"fontlab.flWorkspace.setToolText = setToolText (...) setToolText()","title":"setToolText"},{"location":"fontlab.flWorkspace.html#settooltransform","text":"fontlab.flWorkspace.setToolTransform = setToolTransform (...) setToolTransform()","title":"setToolTransform"},{"location":"fontlab.flWorkspace.html#showfocus","text":"fontlab.flWorkspace.showFocus = showFocus (...) bool showFocus()","title":"showFocus"},{"location":"fontlab.flWorkspace.html#showsmallitems","text":"fontlab.flWorkspace.showSmallItems = showSmallItems (...) bool showSmallItems()","title":"showSmallItems"},{"location":"fontlab.flWorkspace.html#signedobjects","text":"fontlab.flWorkspace.signedObjects QMap","title":"signedObjects"},{"location":"fontlab.flWorkspace.html#sketchboard","text":"fontlab.flWorkspace.sketchboard flCanvas, bool new_paper","title":"sketchboard"},{"location":"fontlab.flWorkspace.html#tag","text":"fontlab.flWorkspace.tag = tag (...) tag([string])","title":"tag"},{"location":"fontlab.flWorkspace.html#turntextmodeoff","text":"fontlab.flWorkspace.turnTextModeOff = turnTextModeOff (...) turnTextModeOff()","title":"turnTextModeOff"},{"location":"fontlab.flWorkspace.html#type","text":"fontlab.flWorkspace.type object type","title":"type"},{"location":"fontlab.flWorkspace.html#uistate","text":"fontlab.flWorkspace.uiState QString","title":"uiState"},{"location":"fontlab.flWorkspace.html#unblockupdate","text":"fontlab.flWorkspace.unblockUpdate = unblockUpdate (...) unblockUpdate()","title":"unblockUpdate"},{"location":"fontlab.flWorkspace.html#update","text":"fontlab.flWorkspace.update = update (...) update()","title":"update"},{"location":"fontlab.flWorkspace.html#updateactiveviewport","text":"fontlab.flWorkspace.updateActiveViewport = updateActiveViewport (...) updateActiveViewport()","title":"updateActiveViewport"},{"location":"fontlab.flWorkspace.html#weareonpaper","text":"fontlab.flWorkspace.weAreOnPaper = weAreOnPaper (...) bool weAreOnPaper()","title":"weAreOnPaper"},{"location":"fontlab.flWorkspace.html#example","text":"import os.path # Access the font-specific logic of FontLab 7 with # the `fontlab` package from fontlab import * # Access the entire Qt application framework that powers # FontLab 7 with the `PythonQt` package # `PythonQt.QtGui` exposes the full Qt GUI toolkit to build # simple and most complex UIs from PythonQt import QtGui # Checks if a `.vfc` file with the same file name as this # script file exists in the same folder loc = [os.path.dirname(__file__)] + list(os.path.splitext(os.path.basename(__file__))) fontPath = os.path.join(loc[0], loc[1] + '.vfc') # If there is no such file, opens a file open dialog with # `QtGui.QFileDialog`, so you can pick a font file or Cancel if not os.path.exists(fontPath): fontPath = QtGui.QFileDialog.getOpenFileName( None, 'Choose font', loc[0], '') # If there is a font file, export its instances as OTF if fontPath: # `fontlab.flWorkspace` instance is the FontLab 7 app # seen as the font editor ws = flWorkspace.instance() # `.mainWindow` is the graphical interface of FontLab 7 main = ws.mainWindow # `.loadFont` opens a file in the FontLab GUI main.loadFont(fontPath) # `.currentPackage` is the active `fontlab.flPackage`, # which is a font inside FontLab fp = ws.currentPackage # `fontlab.flPreferences` has the FL7 preferences # that hold numeric constants that represent values # in the Export Font As dialog settings pref = flPreferences() # New `fontlab.ExportControl` class corresponds to # the settings of File Export Font As... ec = ExportControl() ec.profileName = \"OpenType PS\" ec.destinationMode = pref.DestinationFolder ec.conflictMode = pref.ConflictOverwrite ec.contentMode = pref.ContentInstances ec.destinationFolder = os.path.dirname(fontPath) ec.groupProfiles = False ec.groupFamily = True # `flWorkspace.exportFont` exports the `flPackage` # with `ExportControl` settings ws.exportFont(fp, ec) # `QtGui.QApplication` instance is the FontLab 7 app # seen as a graphical app that uses the Qt framework qapp = QtGui.QApplication.instance() # Quit the FontLab 7 app qapp.quit()","title":"Example"},{"location":"fontlab.flZone.html","text":"flZone fontlab.flZone = class flZone ( object ) flZone representation Constructors: flZone() flZone(double p, double w[, QString _n = ]) flZone(flZone) Methods __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __init__ (...) x. __init__ (...) initializes x; see help(type(x)) for signature __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value guaranteeName (...) guaranteeName (bool top) tagsSet (...) QSet /Nothing tagsSet () toZone (...) toZone (fgZone, bool top) Descriptors name string position double program QSet programText QString tags string width double Attributes __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T guaranteeName fontlab.flZone.guaranteeName = guaranteeName (...) guaranteeName(bool top) name fontlab.flZone.name string position fontlab.flZone.position double program fontlab.flZone.program QSet programText fontlab.flZone.programText QString tags fontlab.flZone.tags string tagsSet fontlab.flZone.tagsSet = tagsSet (...) QSet /Nothing tagsSet() toZone fontlab.flZone.toZone = toZone (...) toZone(fgZone, bool top) width fontlab.flZone.width double","title":"flZone"},{"location":"fontlab.flZone.html#flzone","text":"","title":"flZone"},{"location":"fontlab.flZone.html#guaranteename","text":"fontlab.flZone.guaranteeName = guaranteeName (...) guaranteeName(bool top)","title":"guaranteeName"},{"location":"fontlab.flZone.html#name","text":"fontlab.flZone.name string","title":"name"},{"location":"fontlab.flZone.html#position","text":"fontlab.flZone.position double","title":"position"},{"location":"fontlab.flZone.html#program","text":"fontlab.flZone.program QSet","title":"program"},{"location":"fontlab.flZone.html#programtext","text":"fontlab.flZone.programText QString","title":"programText"},{"location":"fontlab.flZone.html#tags","text":"fontlab.flZone.tags string","title":"tags"},{"location":"fontlab.flZone.html#tagsset","text":"fontlab.flZone.tagsSet = tagsSet (...) QSet /Nothing tagsSet()","title":"tagsSet"},{"location":"fontlab.flZone.html#tozone","text":"fontlab.flZone.toZone = toZone (...) toZone(fgZone, bool top)","title":"toZone"},{"location":"fontlab.flZone.html#width","text":"fontlab.flZone.width double","title":"width"},{"location":"fontlab.html","text":"fontlab fontlab Python interface for FontLab data objects CurveEx: CurveEx representation ExportControl: ExportControl representation FaBasicPtr: FaBasicPtr representation Interval: Interval representation PaintBrush: PaintBrush representation TransformFrame: TransformFrame representation fgSymbol: fgSymbol representation fgSymbolList: fgSymbolList representation flAbstractEditor: flAbstractEditor representation flAbstractVectorNode: flAbstractVectorNode representation flAnchor: flAnchor representation flAuditInfo: flAuditInfo representation flAxis: flAxis representation flBasicTool: flBasicTool representation flCanvas: flCanvas representation flContour: flContour representation flContourInfo: flContourInfo representation flContourMarker: flContourMarker representation flEvent: flEvent representation flExpression: flExpression representation flGlyph: flGlyph representation flGlyphInfo: flGlyphInfo representation flGraphicsInfo: flGraphicsInfo representation flGuideLine: flGuideLine representation flHintingParameters: flHintingParameters representation flInstance: flInstance representation flItems: flItems representation flLayer: flLayer representation flLayerInfo: flLayerInfo representation flLocation: flLocation representation LocationValue: LocationValue representation flMarkerPoint: flMarkerPoint representation flMouseEvent: flMouseEvent representation flModelProducer: flModelProducer representation flNode: flNode representation flNodeInfo: flNodeInfo representation flObject: flObject representation flPackage: flPackage representation flPaper: flPaper representation flPinPoint: flPinPoint representation flPreferences: flPreferences representation flProperty: flProperty representation flPropertyDouble: flPropertyDouble representation flPropertyPoint: flPropertyPoint representation flSearchInfo: flSearchInfo representation flShape: flShape representation flShapeBuilder: flShapeBuilder representation flShapeData: flShapeData representation flShapeInfo: flShapeInfo representation flSnapLine: flSnapLine representation flSnapObject: flSnapObject representation flStem: flStem representation flZone: flZone representation flSticker: flSticker representation flTextBlock: flTextBlock representation flTransform: flTransform representation flVectorNode: flVectorNode representation flVisualItem: flVisualItem representation flWorkspace: flWorkspace representation FontMetrics: FontMetrics representation GlyphComponent: GlyphComponent representation flTTHCommand: flTTHCommand representation YPanelManager: YPanelManager representation YPanelWidget: YPanelWidget representation Info: Font Info data FontLayer: FontLayer object flObjectsList : flObjectsList doc flObjectsList : flObjectsList doc flSnaps: snap object constants flModel: flModel representation PaintBrushShape: Data wrapper SmartCornerParameters: Data wrapper AccentInfo: Data wrapper flLayerAttributes: Data wrapper Classes PythonQt.PythonQtInstanceWrapper ( builtin .object ) YPanelManager YPanelWidget builtin .object builtin .AccentInfo builtin .CurveEx builtin .ExportControl builtin .FaBasicPtr builtin .FontLayer builtin .FontMetrics builtin .GlyphComponent builtin .Info builtin .Interval builtin .LocationValue builtin .PaintBrush builtin .PaintBrushShape builtin .SmartCornerParameters builtin .TransformFrame builtin .fgSymbol builtin .fgSymbolList builtin .flAbstractEditor builtin .flAbstractVectorNode builtin .flAnchor builtin .flAuditInfo builtin .flAxis builtin .flBasicTool builtin .flCanvas builtin .flContour builtin .flContourInfo builtin .flContourMarker builtin .flEvent builtin .flExpression builtin .flGlyph builtin .flGlyphInfo builtin .flGraphicsInfo builtin .flGuideLine builtin .flHintingParameters builtin .flInstance builtin .flItems builtin .flLayer builtin .flLayerAttributes builtin .flLayerInfo builtin .flLocation builtin .flMarkerPoint builtin .flModel builtin .flModelProducer builtin .flMouseEvent builtin .flNode builtin .flNodeInfo builtin .flObject builtin .flObjectsList builtin .flObjectsList builtin .flPackage builtin .flPaper builtin .flPinPoint builtin .flPreferences builtin .flProperty builtin .flPropertyDouble builtin .flPropertyPoint builtin .flSearchInfo builtin .flShape builtin .flShapeBuilder builtin .flShapeData builtin .flShapeInfo builtin .flSnapLine builtin .flSnapObject builtin .flSnaps builtin .flStem builtin .flSticker builtin .flTTHCommand builtin .flTextBlock builtin .flTransform builtin .flVectorNode builtin .flVisualItem builtin .flWorkspace builtin .flZone class AccentInfo ( object ) Data wrapper Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors layer offset Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class CurveEx ( object ) CurveEx representation Constructors: CurveEx() - default CurveEx(QPointF p0, QPointF p1[, int leftIdx=0[, int _rightIdx=0]]) CurveEx(QPointF p0, QPointF p1, QPointF p2, QPointF p3) CurveEx( list(QPointF) ) Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. applyTransform (...) void applyTransform (QTransform & tx) empty (...) bool empty () extremum (...) bool extremum ( CurveEx prev) fastLength (...) double fastLength () improve (...) bool improve ([double curvature = 1.0]) smooth (...) bool smooth ( CurveEx prev) smoothCurvature (...) CurveEx smoothCurvature ( CurveEx c1, bool complete) split (...) bool split ( CurveEx , CurveEx ) updateBRect (...) void updateBRect () Descriptors bcp0 QPointF bcp0 bcp1 QPointF bcp1 bcv0 QPointF bcv0 bcv1 QPointF bcv1 brect QRectF contourIx int countPoints int leftIdx int p0 QPointF p0 p1 QPointF p1 paramT int rightIdx int Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class ExportControl ( object ) ExportControl representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value init (...) init () load (...) bool load () store (...) store () Descriptors conflictMode int contentMode int contentName string contentName destinationFolder string destinationMode int groupFamily bool groupProfiles bool profileId int profileName int Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class FaBasicPtr ( object ) FaBasicPtr representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value fix (...) flGlyph /Nothing fix () Descriptors canBeFixed bool contour flContour id int location QPointF nodeIndex int priority int report QString title QString vector QPointF Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class FontLayer ( object ) FontLayer object Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class FontMetrics ( object ) FontMetrics representation Constructors: FontMetrics() - default FontMetrics(FontMetrics) FontMetrics(double upm) FontMetrics(fg::Package *p) FontMetrics(flPackage p, string layer_name) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value init (...) init () Descriptors ascender double capsHeight double descender double lineGap double upm double xHeight double Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class GlyphComponent ( object ) GlyphComponent representation Constructors: GlyphComponent() - default GlyphComponent(GlyphComponent) GlyphComponent(uint id) GlyphComponent(string name) GlyphComponent(uint id, QTransform tx, double w, bool ua) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors name_id uint transform QTransform use_anchors bool width_scale double Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class Info ( object ) Font Info data Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors ascender Ascender value. This should be a integer or float capHeight Cap height value. This should be a integer or float copyright Copyright statement. This should be a string descender Descender value. This should be a integer or float familyName Family name. This should be a string italicAngle Italic angle. This must be an angle in counter-clockwise degrees from the vertical. This should be a integer or float macintoshFONDFamilyID Family ID number. Corresponds to the ffFamID in the FOND resource. This should be a integer macintoshFONDName Font name for the FOND resource. This should be a string note Arbitrary note about the font. This should be a string openTypeGaspRangeRecords A list of gasp Range Records. These must be sorted in ascending order based on the rangeMaxPPEM value of the record. This should be a list openTypeHeadCreated Creation date. Expressed as a string of the format \"YYYY/MM/DD HH:MM:SS\". \"YYYY/MM/DD\" is year/month/day. The month must be in the range 1-12 and the day must be in the range 1-end of month. \"HH:MM:SS\" is hour:minute:second. The hour must be in the range 0:23. The minute and second must each be in the range 0-59. This should be a string openTypeHeadFlags A list of bit numbers indicating the flags. The bit numbers are listed in the OpenType head specification. Corresponds to the OpenType head table flags field. This should be a list openTypeHeadLowestRecPPEM Smallest readable size in pixels. Corresponds to the OpenType head table lowestRecPPEM field. This should be a non-negative integer openTypeHheaAscender Ascender value. Corresponds to the OpenType hhea table Ascender field. This should be a integer openTypeHheaCaretOffset Caret offset value. Corresponds to the OpenType hhea table caretOffset field. This should be a integer openTypeHheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType hhea table caretSlopeRise field. This should be a integer openTypeHheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType hhea table caretSlopeRun field. This should be a integer openTypeHheaDescender Descender value. Corresponds to the OpenType hhea table Descender field. This should be a integer openTypeHheaLineGap Line gap value. Corresponds to the OpenType hhea table LineGap field. This should be a integer openTypeNameCompatibleFullName Compatible full name. Corresponds to the OpenType name table name ID 18. This should be a string openTypeNameDescription Description of the font. Corresponds to the OpenType name table name ID 10. This should be a string openTypeNameDesigner Designer name. Corresponds to the OpenType name table name ID 9. This should be a string openTypeNameDesignerURL URL for the designer. Corresponds to the OpenType name table name ID 12. This should be a string openTypeNameLicense License text. Corresponds to the OpenType name table name ID 13. This should be a string openTypeNameLicenseURL URL for the license. Corresponds to the OpenType name table name ID 14. This should be a string openTypeNameManufacturer Manufacturer name. Corresponds to the OpenType name table name ID 8. This should be a string openTypeNameManufacturerURL Manufacturer URL. Corresponds to the OpenType name table name ID 11. This should be a string openTypeNamePreferredFamilyName Preferred family name. Corresponds to the OpenType name table name ID 16. This should be a string openTypeNamePreferredSubfamilyName Preferred subfamily name. Corresponds to the OpenType name table name ID 17. This should be a string openTypeNameRecords A list of name records. This name record storage area is intended for records that require platform, encoding and or language localization. This should be a list openTypeNameSampleText Sample text. Corresponds to the OpenType name table name ID 19. This should be a string openTypeNameUniqueID Unique ID string. Corresponds to the OpenType name table name ID 3. This should be a string openTypeNameVersion Version string. Corresponds to the OpenType name table name ID 5. This should be a string openTypeNameWWSFamilyName WWS family name. Corresponds to the OpenType name table name ID 21. This should be a string openTypeNameWWSSubfamilyName WWS Subfamily name. Corresponds to the OpenType name table name ID 22. This should be a string openTypeOS2CodePageRanges A list of bit numbers that are supported code page ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulCodePageRange1 and ulCodePageRange2 fields. This should be a list openTypeOS2FamilyClass Two integers representing the IBM font class and font subclass of the font. The first number, representing the class ID, must be in the range 0-14. The second number, representing the subclass, must be in the range 0-15. The numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table sFamilyClass field. This should be a list openTypeOS2Panose The list must contain 10 non-negative integers that represent the setting for each category in the Panose specification. The integers correspond with the option numbers in each of the Panose categories. This corresponds to the OpenType OS/2 table Panose field. This should be a list openTypeOS2Selection A list of bit numbers indicating the bits that should be set in fsSelection. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table selection field. Note: Bits 0 (italic), 5 (bold) and 6 (regular) must not be set here. These bits should be taken from the generic styleMapStyle attribute. This should be a list openTypeOS2StrikeoutPosition Strikeout position. Corresponds to the OpenType OS/2 table yStrikeoutPosition field. This should be a integer openTypeOS2StrikeoutSize Strikeout size. Corresponds to the OpenType OS/2 table yStrikeoutSize field. This should be a integer openTypeOS2SubscriptXOffset Subscript x offset. Corresponds to the OpenType OS/2 table ySubscriptXOffset field. This should be a integer openTypeOS2SubscriptXSize Subscript horizontal font size. Corresponds to the OpenType OS/2 table ySubscriptXSize field. This should be a integer openTypeOS2SubscriptYOffset Subscript y offset. Corresponds to the OpenType OS/2 table ySubscriptYOffset field. This should be a integer openTypeOS2SubscriptYSize Subscript vertical font size. Corresponds to the OpenType OS/2 table ySubscriptYSize field. This should be a integer openTypeOS2SuperscriptXOffset Superscript x offset. Corresponds to the OpenType OS/2 table ySuperscriptXOffset field. This should be a integer openTypeOS2SuperscriptXSize Superscript horizontal font size. Corresponds to the OpenType OS/2 table ySuperscriptXSize field. This should be a integer openTypeOS2SuperscriptYOffset Superscript y offset. Corresponds to the OpenType OS/2 table ySuperscriptYOffset field. This should be a integer openTypeOS2SuperscriptYSize Superscript vertical font size. Corresponds to the OpenType OS/2 table ySuperscriptYSize field. This should be a integer openTypeOS2Type A list of bit numbers indicating the embedding type. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table fsType field. This should be a list openTypeOS2TypoAscender Ascender value. Corresponds to the OpenType OS/2 table sTypoAscender field. This should be a integer openTypeOS2TypoDescender Descender value. Corresponds to the OpenType OS/2 table sTypoDescender field. This should be a integer openTypeOS2TypoLineGap Line gap value. Corresponds to the OpenType OS/2 table sTypoLineGap field. This should be a integer openTypeOS2UnicodeRanges A list of bit numbers that are supported Unicode ranges in the font. The bit numbers are listed in the OpenType OS/2 specification. Corresponds to the OpenType OS/2 table ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3 and ulUnicodeRange4 fields. This should be a list openTypeOS2VendorID Four character identifier for the creator of the font. Corresponds to the OpenType OS/2 table achVendID field. This should be a string openTypeOS2WeightClass Weight class value. Must be a non-negative integer. Corresponds to the OpenType OS/2 table usWeightClass field. This should be a integer openTypeOS2WidthClass Width class value. Must be in the range 1-9. Corresponds to the OpenType OS/2 table usWidthClass field. This should be a integer openTypeOS2WinAscent Ascender value. Corresponds to the OpenType OS/2 table usWinAscent field. This should be a non-negative integer openTypeOS2WinDescent Descender value. Corresponds to the OpenType OS/2 table usWinDescent field. This should be a non-negative integer openTypeVheaCaretOffset Caret offset value. Corresponds to the OpenType vhea table caretOffset field. This should be a integer openTypeVheaCaretSlopeRise Caret slope rise value. Corresponds to the OpenType vhea table caretSlopeRise field. This should be a integer openTypeVheaCaretSlopeRun Caret slope run value. Corresponds to the OpenType vhea table caretSlopeRun field. This should be a integer openTypeVheaVertTypoAscender Ascender value. Corresponds to the OpenType vhea table vertTypoAscender field. This should be a integer openTypeVheaVertTypoDescender Descender value. Corresponds to the OpenType vhea table vertTypoDescender field. This should be a integer openTypeVheaVertTypoLineGap Line gap value. Corresponds to the OpenType vhea table vertTypoLineGap field. This should be a integer panose PANOSE identification. Should be a string containing 10 space-separated numbers postscriptBlueFuzz BlueFuzz value. This corresponds to the Type 1/CFF BlueFuzz field. This should be a integer or float postscriptBlueScale BlueScale value. This corresponds to the Type 1/CFF BlueScale field. This should be a float postscriptBlueShift BlueShift value. This corresponds to the Type 1/CFF BlueShift field. This should be a integer or float postscriptBlueValues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF BlueValues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptDefaultCharacter The name of the glyph that should be used as the default character in PFM files. This should be a string postscriptDefaultWidthX Default width for glyphs. This should be a integer or float postscriptFamilyBlues A list of up to 14 integers or floats specifying the values that should be in the Type 1/CFF FamilyBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptFamilyOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF FamilyOtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptFontName Name to be used for the FontName field in Type 1/CFF table. This should be a string postscriptForceBold Indicates how the Type 1/CFF ForceBold field should be set. This should be a boolean postscriptFullName Name to be used for the FullName field in Type 1/CFF table. This should be a string postscriptIsFixedPitch Indicates if the font is monospaced. An authoring tool could calculate this automatically, but the designer may wish to override this setting. This corresponds to the Type 1/CFF isFixedPitched field This should be a boolean postscriptNominalWidthX Nominal width for glyphs. This should be a integer or float postscriptOtherBlues A list of up to 10 integers or floats specifying the values that should be in the Type 1/CFF OtherBlues field. This list must contain an even number of integers following the rules defined in the Type 1/CFF specification. This should be a list postscriptStemSnapH List of horizontal stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapH field. This should be a list postscriptStemSnapV List of vertical stems sorted in the order specified in the Type 1/CFF specification. Up to 12 integers or floats are possible. This corresponds to the Type 1/CFF StemSnapV field. This should be a list postscriptUnderlinePosition Underline position value. Corresponds to the Type 1/CFF/post table UnderlinePosition field. This should be a integer or float postscriptUnderlineThickness Underline thickness value. Corresponds to the Type 1/CFF/post table UnderlineThickness field. This should be a integer or float postscriptUniqueID A unique ID number as defined in the Type 1/CFF specification. This should be a integer postscriptWeightName A string indicating the overall weight of the font. This corresponds to the Type 1/CFF Weight field. It should be in sync with the openTypeOS2WeightClass value. This should be a string postscriptWindowsCharacterSet The Windows character set. The values are defined below. This should be a integer styleMapFamilyName Family name used for bold, italic and bold italic style mapping. This should be a string styleMapStyleName Style map style. The possible values are regular, italic, bold and bold italic. These are case sensitive. This should be a string styleName Style name. This should be a string trademark Trademark statement. This should be a string unitsPerEm Units per em. This should be a non-negative integer or float versionMajor Major version. This should be a integer versionMinor Minor version. This should be a non-negative integer xHeight x-height value. This should be a integer or float year The year the font was created. This attribute is deprecated as of version 2. It's presence should not be relied upon by authoring tools. However, it may occur in a font's info so authoring tools should preserve it if present. This should be a integer Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class Interval ( object ) Interval representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help(type(x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value isEmpty (...) bool isEmpty () middle (...) double middle () reversed (...) Interval reversed () setT0T1 (...) void setT0T1 (double t0, double t1) toAbsolute (...) double toAbsolute (double v) toInterval (...) double toInterval (double absv) Descriptors d double d key uint key t0 double t0 t1 double t1 Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class LocationValue ( object ) LocationValue representation Constructors: LocationValue(flLocation) LocationValue(double) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class PaintBrush ( object ) PaintBrush representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value assign (...) void assign ( PaintBrush ) init (...) void init () render (...) void render (double scale) toString (...) QString toString () Descriptors angle double flatness double shape PaintBrushShape size double Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class PaintBrushShape ( object ) Data wrapper Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors cap0 cap1 cap_length0 cap_length1 data Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class SmartCornerParameters ( object ) Data wrapper Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors curvature Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class TransformFrame ( object ) TransformFrame representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value boundingRect (...) QRectF boundingRect () bw (...) double bw () doTransformation (...) void doTransformation (int code, QPointF value) flipHorizontal (...) void flipHorizontal () flipVertical (...) void flipVertical () getControlPos (...) QPointF getControlPos (TransformFrameControls) getMapped (...) TransformFrame getMapped (QTransform t) getTransform (...) QTransform getTransform () horizontalReflection (...) void horizontalReflection () initCenter (...) void initCenter () lh (...) double lh () mb (...) QPointF mb () mh (...) double mh () ml (...) QPointF ml () mr (...) QPointF mr () mt (...) QPointF mt () mw (...) double mw () polygon (...) QPolygonF polygon () prepareTransformations (...) void prepareTransformations ([TransformFrameControls control, QPointF p,] double scale) rh (...) double rh () rotate (...) void rotate (double) rotate180 (...) void rotate180 () scale (...) void scale (QPointF s) setControlPos (...) void setControlPos ([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed) setProjectionPos (...) void setProjectionPos ([TransformFrameControls control,] QPointF position, bool reflection, bool proportional, bool fixed) slant (...) void slant (double angle) translate (...) void translate (QPointF) tw (...) double tw () verticalReflection (...) void verticalReflection () Static methods expandPolygon (...) QPolygonF expandPolygon (QPolygonF polygon) Descriptors bl QPointF br QPointF cr QPointF tl QPointF tr QPointF Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class YPanelManager (PythonQt.PythonQtInstanceWrapper) Method resolution order: YPanelManager PythonQt.PythonQtInstanceWrapper builtin .object Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes blockSignals = unbound qt slot blockSignals of YPanelManager type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of YPanelManager type X. childEvent (a, b) children = unbound qt slot children of YPanelManager type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object connect = unbound qt slot connect of YPanelManager type X. connect (a, b, c, d, e) -> bool customEvent = unbound qt slot py_q_customEvent of YPanelManager type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of YPanelManager type X. deleteLater () desktopClientRectChanged = unbound qt signal desktopClientRectChanged of YPanelManager type destroyed = unbound qt signal destroyed of YPanelManager type disconnect = unbound qt slot disconnect of YPanelManager type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelManager type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of YPanelManager type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelManager type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of YPanelManager type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of YPanelManager type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of YPanelManager type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of YPanelManager type X. findChildren (a, b, c) -> tuple help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name installEventFilter = unbound qt slot installEventFilter of YPanelManager type X. installEventFilter (a, b) isSignalConnected = unbound qt slot isSignalConnected of YPanelManager type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of YPanelManager type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of YPanelManager type X. isWindowType (a) -> bool killTimer = unbound qt slot killTimer of YPanelManager type X. killTimer (a, b) metaObject = unbound qt slot metaObject of YPanelManager type X. metaObject (a) -> PythonQt.QtCore.QMetaObject moveToThread = unbound qt slot moveToThread of YPanelManager type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of YPanelManager type panelClosed = unbound qt signal panelClosed of YPanelManager type parent = unbound qt slot parent of YPanelManager type X. parent (a) -> PythonQt.private.QObject property = unbound qt slot property of YPanelManager type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of YPanelManager type X. removeEventFilter (a, b) sender = unbound qt slot sender of YPanelManager type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of YPanelManager type X. senderSignalIndex (a) -> int setObjectName = unbound qt slot setObjectName of YPanelManager type X. setObjectName (a, b) setParent = unbound qt slot setParent of YPanelManager type X. setParent (a, b) setProperty = unbound qt slot setProperty of YPanelManager type X. setProperty (a, b, c) -> bool showContextMenu = unbound qt signal showContextMenu of YPanelManager type signalsBlocked = unbound qt slot signalsBlocked of YPanelManager type X. signalsBlocked (a) -> bool startTimer = unbound qt slot startTimer of YPanelManager type X. startTimer (a, b, c) -> int thread = unbound qt slot thread of YPanelManager type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of YPanelManager type X. timerEvent (a, b) toolbarClosed = unbound qt signal toolbarClosed of YPanelManager type toolbarOpened = unbound qt signal toolbarOpened of YPanelManager type tr = unbound qt slot tr of YPanelManager type X. tr (a, b, c, d) -> str Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) init (...) x. __init__ (...) initializes x; see help (type(x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class YPanelWidget (PythonQt.PythonQtInstanceWrapper) Method resolution order: YPanelWidget PythonQt.PythonQtInstanceWrapper builtin .object Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes DrawChildren = 2 DrawWindowBackground = 1 IgnoreMask = 4 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of YPanelWidget type X. actionEvent (a, b) actions = unbound qt slot actions of YPanelWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of YPanelWidget type X. activateWindow (a) addAction = unbound qt slot addAction of YPanelWidget type X. addAction (a, b) addActions = unbound qt slot addActions of YPanelWidget type X. addActions (a, b) adjustSize = unbound qt slot adjustSize of YPanelWidget type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of YPanelWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of YPanelWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of YPanelWidget type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of YPanelWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of YPanelWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of YPanelWidget type X. childEvent (a, b) children = unbound qt slot children of YPanelWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clearFocus = unbound qt slot clearFocus of YPanelWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of YPanelWidget type X. clearMask (a) close = unbound qt slot close of YPanelWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of YPanelWidget type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of YPanelWidget type X. colorCount (a) -> int connect = unbound qt slot connect of YPanelWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of YPanelWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of YPanelWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of YPanelWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None createWinId = unbound qt slot createWinId of YPanelWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of YPanelWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of YPanelWidget type customEvent = unbound qt slot py_q_customEvent of YPanelWidget type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of YPanelWidget type X. deleteLater () depth = unbound qt slot depth of YPanelWidget type X. depth (a) -> int destroy = unbound qt slot destroy of YPanelWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of YPanelWidget type devType = unbound qt slot py_q_devType of YPanelWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of YPanelWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of YPanelWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of YPanelWidget type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of YPanelWidget type X. disconnect (a, b, c, d) -> bool dragEnterEvent = unbound qt slot py_q_dragEnterEvent of YPanelWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of YPanelWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of YPanelWidget type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of YPanelWidget type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of YPanelWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelWidget type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of YPanelWidget type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of YPanelWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of YPanelWidget type X. enterEvent (a, b) event = unbound qt slot py_q_event of YPanelWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of YPanelWidget type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of YPanelWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of YPanelWidget type X. findChildren (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of YPanelWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of YPanelWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of YPanelWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of YPanelWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of YPanelWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of YPanelWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of YPanelWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of YPanelWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of YPanelWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of YPanelWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of YPanelWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of YPanelWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of YPanelWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of YPanelWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of YPanelWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of YPanelWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of YPanelWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of YPanelWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of YPanelWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of YPanelWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of YPanelWidget type X. hide () hideEvent = unbound qt slot py_q_hideEvent of YPanelWidget type X. hideEvent (a, b) inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of YPanelWidget type X. initPainter (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of YPanelWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of YPanelWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of YPanelWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of YPanelWidget type X. insertActions (a, b, c) installEventFilter = unbound qt slot installEventFilter of YPanelWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of YPanelWidget type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of YPanelWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of YPanelWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of YPanelWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of YPanelWidget type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of YPanelWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of YPanelWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of YPanelWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of YPanelWidget type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of YPanelWidget type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of YPanelWidget type X. isSignalConnected (a, b) -> bool isVisible = unbound qt slot isVisible of YPanelWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of YPanelWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of YPanelWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of YPanelWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of YPanelWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of YPanelWidget type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of YPanelWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of YPanelWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of YPanelWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of YPanelWidget type X. killTimer (a, b) layout = unbound qt slot layout of YPanelWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of YPanelWidget type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of YPanelWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of YPanelWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of YPanelWidget type X. lower () mapFrom = unbound qt slot mapFrom of YPanelWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of YPanelWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of YPanelWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of YPanelWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of YPanelWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of YPanelWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of YPanelWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of YPanelWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of YPanelWidget type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of YPanelWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of YPanelWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of YPanelWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of YPanelWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of YPanelWidget type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of YPanelWidget type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of YPanelWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of YPanelWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of YPanelWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of YPanelWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of YPanelWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of YPanelWidget type overrideWindowFlags = unbound qt slot overrideWindowFlags of YPanelWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of YPanelWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of YPanelWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of YPanelWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of YPanelWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of YPanelWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of YPanelWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of YPanelWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of YPanelWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of YPanelWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of YPanelWidget type X. property (a, b) -> object raise = unbound qt slot raise of YPanelWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of YPanelWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of YPanelWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of YPanelWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of YPanelWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of YPanelWidget type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of YPanelWidget type X. removeEventFilter (a, b) render = unbound qt slot render of YPanelWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of YPanelWidget type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of YPanelWidget type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of YPanelWidget type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of YPanelWidget type X. restoreGeometry (a, b) -> bool saveGeometry = unbound qt slot saveGeometry of YPanelWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of YPanelWidget type X. scroll (a, b, c, d) sender = unbound qt slot sender of YPanelWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of YPanelWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of YPanelWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of YPanelWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of YPanelWidget type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of YPanelWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of YPanelWidget type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of YPanelWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of YPanelWidget type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of YPanelWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of YPanelWidget type X. setContextMenuPolicy (a, b) setCursor = unbound qt slot setCursor of YPanelWidget type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of YPanelWidget type X. setDisabled (a) setEnabled = unbound qt slot setEnabled of YPanelWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of YPanelWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of YPanelWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of YPanelWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of YPanelWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of YPanelWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of YPanelWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of YPanelWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of YPanelWidget type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of YPanelWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of YPanelWidget type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of YPanelWidget type X. setHidden (a) setInputMethodHints = unbound qt slot setInputMethodHints of YPanelWidget type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of YPanelWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of YPanelWidget type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of YPanelWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of YPanelWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of YPanelWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of YPanelWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of YPanelWidget type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of YPanelWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of YPanelWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of YPanelWidget type X. setMinimumWidth (a, b) setMouseTracking = unbound qt slot setMouseTracking of YPanelWidget type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of YPanelWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of YPanelWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of YPanelWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of YPanelWidget type X. setProperty (a, b, c) -> bool setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of YPanelWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of YPanelWidget type X. setShortcutEnabled (a, b, c) setSizeIncrement = unbound qt slot setSizeIncrement of YPanelWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of YPanelWidget type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of YPanelWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of YPanelWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of YPanelWidget type X. setStyleSheet (a) setTabOrder = unbound qt slot static_QWidget_setTabOrder of YPanelWidget type X. setTabOrder (a, b) setToolTip = unbound qt slot setToolTip of YPanelWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of YPanelWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of YPanelWidget type X. setUpdatesEnabled (a, b) setVisible = unbound qt slot py_q_setVisible of YPanelWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of YPanelWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of YPanelWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of YPanelWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of YPanelWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of YPanelWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of YPanelWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of YPanelWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of YPanelWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of YPanelWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of YPanelWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of YPanelWidget type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of YPanelWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of YPanelWidget type X. show () showEvent = unbound qt slot py_q_showEvent of YPanelWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of YPanelWidget type X. showFullScreen () showMaximized = unbound qt slot showMaximized of YPanelWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of YPanelWidget type X. showMinimized () showNormal = unbound qt slot showNormal of YPanelWidget type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of YPanelWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of YPanelWidget type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of YPanelWidget type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of YPanelWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabletEvent = unbound qt slot py_q_tabletEvent of YPanelWidget type X. tabletEvent (a, b) tabletTracking = None testAttribute = unbound qt slot testAttribute of YPanelWidget type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of YPanelWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of YPanelWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of YPanelWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of YPanelWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of YPanelWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of YPanelWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of YPanelWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of YPanelWidget type X. unsetLocale (a) update = unbound qt slot update of YPanelWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of YPanelWidget type X. updateGeometry (a) updatesEnabled = None visible = None visibleRegion = unbound qt slot visibleRegion of YPanelWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of YPanelWidget type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of YPanelWidget type X. widthMM (a) -> int winId = unbound qt slot winId of YPanelWidget type X. winId (a) window = unbound qt slot window of YPanelWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of YPanelWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of YPanelWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of YPanelWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of YPanelWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of YPanelWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of YPanelWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of YPanelWidget type windowType = unbound qt slot windowType of YPanelWidget type X. windowType (a) x = None y = None Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) init (...) x. __init__ (...) initializes x; see help (type(x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgSymbol ( object ) fgSymbol representation Constructors: fgSymbol() - default fgSymbol(fgSymbol) - copy fgSymbol(unicode) fgSymbol('name') fgSymbol(id, fgFont) fgSymbol(glyph_id, package_id) fgSymbol(unicode, 'name', id) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value clear (...) clear () clearData (...) clearData (DataCode) clearID (...) clearID () compare (...) bool compare ( fgSymbol ) computeID (...) bool computeID (fgFont) containsData (...) bool containsData (DataCode) data (...) QVariant data (DataCode) glyph (...) fgGlyph glyph (fgFont, bool setId) init (...) init () setData (...) setData (DataCode, QVariant d) setSterile (...) setSterile () Descriptors cr bool empty bool glyphIndex int hasName bool hasUnicode bool id unsigned long layerName string ligatureIndex int name QString pid unsigned long space bool unicode uint unicodeEnsure uint Attributes DataCode = {'Active': 9, 'ColorMark': 10, 'DoFeatures': 6, 'DoLayout': 5, 'Features': 7, 'FontSize': 3, 'GlyphIndex': 0, 'LigatureIndex': 1, 'Locked': 2, 'PackageID': 4, ...} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class fgSymbolList ( object ) fgSymbolList representation Constructors: fgSymbolList() - default fgSymbolList(fgSymbolList) - copy fgSymbolList(list(fgSymbol)) fgSymbolList(string[, bool advancedProcessing = false]) fgSymbolList(fgSymbolList, int len) fgSymbolList(fgFont, fgGlyphIDsSet) fgSymbolList(fgFont, list(glyph_id)) Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. append (...) append ( fgSymbol | fgSymbolList ) assign (...) assign (fgFont, list(glyphsId)) at (...) fgSymbol at (index) clear (...) clear () clearData (...) clearData (int dataCode) clearString (...) clearString () compare (...) bool compare ( fgSymbolList ) computeString (...) computeString (bool advancedProcessing) data (...) QVariant data (int index, int dataCode[, QVariant v = QVariant()]) empty (...) bool empty () equals (...) bool equals ( fgSymbolList ) insert (...) insert (index, fgSymbol ) last (...) fgSymbol last () limitLineLength (...) bool limitLineLength (int len) mid (...) fgSymbolList mid (int index[, int count=-1]) remove (...) remove (index, count) replace (...) replace (index, count, fgSymbolList ) reserve (...) reserve (int count) restore (...) bool restore (QByteArray, list(fgFont)) set (...) set (index, fgSymbol ) setData (...) setData (index, DataCode, QVariant) setGlyphsList (...) setGlyphsList (list(fgGlyph), fgFont) setIdList (...) setIdList (list(id), fgFont) setList (...) setList (fgSymbols list) setNamesList (...) setNamesList (string | QStringList) setSterile (...) setSterile () setString (...) setString (string[, bool advancedProcessing = true]) setUnicodeList (...) setUnicodeList ( list(unicodes) ) size (...) int size () store (...) QByteArray store (packageID) string (...) QString string (bool advancedProcessing) symbols (...) list( fgSymbol ) symbols () Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flAbstractEditor ( object ) flAbstractEditor representation Constructors: flAbstractEditor() flAbstractEditor(flObject) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value activate (...) activate () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivate (...) deactivate () flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type widget QWidget* Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flAbstractVectorNode ( object ) flAbstractVectorNode representation Constructors: flAbstractVectorNode(flAbstractVectorNode) flAbstractVectorNode(flObject) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value angleTo (...) double angleTo (QPointF p) applyTransform (...) applyTransform (QTransform) canBeHobby (...) bool canBeHobby () canBeSmooth (...) bool canBeSmooth () canCollapse (...) bool canCollapse () canImprove (...) bool canImprove () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVectors (...) bool checkVectors () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearStored (...) clearStored () clone (...) Clone the object cloneMapped (...) flNode cloneMapped (QTransform) collapseHandles (...) bool collapseHandles () convertToCurve (...) bool convertToCurve ([bool smooth = false]) convertToCurves (...) bool convertToCurves () convertToLine (...) bool convertToLine () copyFrom (...) copyFrom (Node[, withSelected=False]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (Node/QPointF) flag (...) flag (uint f) getLines (...) (QLineF, QLineF)/None getLines () getOn (...) Node/None getOn () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isCorner (...) bool isCorner ([double a = 10.]) isCurve (...) bool isCurve () isEqual (...) isEqual ( flObject ) isEqualTo (...) bool isEqualTo (Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme (...) bool isExtreme (bool x[, bool open = true[, double limit = 0]]) isFirst (...) bool isFirst () isG2 (...) bool isG2 (double tolerance) isInternal (...) bool isInternal (bool clockwise) isInterpolated (...) bool isInterpolated (bool x) isLast (...) bool isLast () isOff (...) bool isOff () isOn (...) bool isOn () isSmartAngle (...) bool isSmartAngle () makeStart (...) bool makeStart () moveBy (...) moveBy (float dx, float dy[, bool round=false] nextNode (...) Node/None nextNode ([string nodeType= [, int searchDepth=1]]) pointG2 (...) QPointF/None pointG2 () prevNode (...) Node/None prevNode ([string nodeType= [, int searchDepth=1]]) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreCoordinates (...) restoreCoordinates () restoreHistoryState (...) restoreHistoryState (uint history_ix) rotateBy (...) rotateBy (valueDegree[, QPointF origin=(0, 0)]) round (...) round () - Round the node's coordinate scaleBy (...) scaleBy (valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) setExtraLast (...) setExtraLast (bool) setFlag (...) setFlag (uint f [, bool value]) setNextSmooth (...) setNextSmooth (QPointF base) setPosition (...) void setPosition (QPointF) setPrevSmooth (...) setPrevSmooth (QPointF base) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSmartAngleEnbl (...) bool setSmartAngleEnbl (bool) setSmartSharp (...) bool setSmartSharp ([double tension = 0.6]) skewBy (...) skewBy (valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartMove (...) list(uint) smartMove (offset) smartSetXY (...) smartSetXY (QPointF) storeCoordinates (...) storeCoordinates () storeTestParameters (...) storeTestParameters () tag (...) tag ([string]) transformBy (...) transformBy (QTransform tx[, QPointF origin=(0, 0)]) update (...) update () updateG2 (...) bool updateG2 () updateSmooth (...) updateSmooth ([bool extended_neibh=true]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors angle angle contour The parent Contour or None if not present g2 g2 hasChanges bool hasHistoryStates bool hobby hobby id object id index The index of the node in parent's contour (if present, otherwise -1) interpolated interpolated interpolatedX interpolatedX interpolatedY interpolatedY isChanged bool isNull bool isPresent bool isReleased bool isSelectedAlone bool isTerminal bool isValid bool name object name nodeState nodeState position Coordinates of the node as QPointF preview preview refCnt object references count scv scv selected The selected flag smartAngleR smartAngleR smooth The smooth flag state state type The node type x The x coordinate of the node y The y coordinate of the node Attributes NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flAnchor ( object ) flAnchor representation Constructors: flAnchor() - default flAnchor(flAnchor) - copy flAnchor(flObject) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value added (...) added () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) hasObject (...) bool hasObject ( flObject ) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') removed (...) removed () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors anchorCode quint64 anchorPoint QPointF fixHorzDirection bool fixVertDirection bool hasChanges bool hasHistoryStates bool id object id isChanged bool isGlobal bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes ModeSnap = {'CoordSnap': 256, 'SnapToHorz': 64, 'SnapToVert': 128} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flAuditInfo ( object ) flAuditInfo representation Constructors: flAuditInfo() flAuditInfo(flObject) flAuditInfo(flAuditInfo) flAuditInfo(FaBasic, QTransform) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' glyphLocation (...) QPointF glyphLocation ([QPointF]) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors basic FaBasic hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool item flObject name object name refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flAxis ( object ) flAxis representation Constructors: flAxis() - default flAxis(string name) flAxis(string name, string tag, string short_name) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value checkValue (...) double checkValue (double v) getRange (...) double getRange () instanceIndex (...) int instanceIndex (double v) instances2map (...) bool instances2map () instances2string (...) string instances2string () map2instances (...) bool map2instances () mappedValue (...) double mappedValue (double v) normalize (...) double normalize (double userValue) onEdge (...) bool onEdge (double v) string2instances (...) bool string2instances (string s) styleName (...) string styleName (double v) styleValue (...) double styleValue (string style_name) updateInstances (...) void updateInstances () updateShortName (...) void updateShortName () updateTag (...) void updateTag () Static methods isWeight (...) bool isWeight (string s) isWidth (...) bool isWidth (string s) locationName (...) QString locationName (QList < flAxis > axes, flLocation location) valueWeight (...) double valueWeight ( flLocation location, double value) valueWidth (...) double valueWidth ( flLocation location, double value) Descriptors default double designDef double designMax double designMin double hidden bool map QMap maximum double minimal double name string playRange (double, double) shortName string tag string Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flBasicTool ( object ) flBasicTool representation Constructors: flBasicTool() flBasicTool(flObject) flBasicTool(flBasicTool) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value activateTool (...) activateTool () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateTool (...) deactivateTool () flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors cursorId CursorId hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name needDeactivateParent bool refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flCanvas ( object ) flCanvas representation Constructors: flCanvas() flCanvas(flCanvas) flCanvas(flObject) flCanvas(id) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value acceptEvents (...) int acceptEvents () activateEditor (...) void activateEditor (QPointF canvas_pos) activatePreviewNodes (...) activatePreviewNodes () addTextBlock (...) addTextBlock ( flTextBlock ) addedToCanvas (...) void addedToCanvas ( flCanvas ) addedToWorkspace (...) addedToWorkspace ( flWorkspace ) adjustCanvasPosition (...) QPointF adjustCanvasPosition (QPointF) adjustPosition (...) QPointF | double adjustPosition (QPointF | double) appendDecorator (...) void appendDecorator ( flVisualItem , DecoratorOrder) availableRect (...) QRectF availableRect () boundingRectOnCanvas (...) QRectF boundingRectOnCanvas ( canvas (...) flCanvas canvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clear (...) clear () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearDecorators (...) clearDecorators () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearItems (...) clearItems () clearSurfaces (...) clearSurfaces () clearTextBlocks (...) clearTextBlocks () clone (...) Clone the object collectChangedRects (...) collectChangedRects () contain (...) bool contain (QPointF canvas_pos) containsItem (...) bool containsItem ( flVisualItem ) createFrame (...) fgSymbolList createFrame ( fgSymbolList list, QPointF position) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateEditor (...) deactivateEditor () deactivatePreviewNodes (...) deactivatePreviewNodes () distanceTo (...) double distanceTo (QPointF) ensureVisible (...) ensureVisible (QPointF | QRectF canvas_rect[, bool total_cover = true]) flag (...) flag (uint f) getHighlight (...) QRectF/Nothing getHighlight () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getScaleTo (...) double getScaleTo ( flShapeInfo ) hasHistoryState (...) hasHistoryState (uint history_ix) haveCanvas (...) bool haveCanvas () haveEditor (...) bool haveEditor (QPointF canvas_pos) haveHoveredItem (...) bool haveHoveredItem () haveSelectedNodes (...) bool haveSelectedNodes () hide (...) hide () highlight (...) highlight (QRectF) historyStates (...) historyStates (bool accepted_state) hoveredItem (...) flVisualItem hoveredItem () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() invertSelectedNodes (...) invertSelectedNodes (QList < flNodeInfo >) invselect (...) invselect () isActiveCanvas (...) bool isActiveCanvas () isEqual (...) isEqual ( flObject ) isFocusedCanvas (...) bool isFocusedCanvas () isSelectable (...) bool isSelectable () isStableSelect (...) bool isStableSelect () itemScale (...) double itemScale () mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem (QPointF) mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem (QPointF | QRectF) mapDeltaFromGlobalToCanvas (...) QPointF mapDeltaFromGlobalToCanvas (QPoint) mapFromGlobal (...) QRectF | QPointF mapFromGlobal (QRect | QPoint) mapFromViewport (...) QRectF | QLineF | QPointF mapFromViewport (QRectF | QRect | QLineF | QPointF | QPoint) mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas (QPointF | QRectF) mapToGlobal (...) QPointF mapToGlobal (QPointF) mapToViewport (...) QPolygonF | QRect | QPoint mapToViewport (QPolygonF | QRect | QPoint) mapToViewportF (...) QPointF | QLineF mapToViewportF (QPointF | QLineF) metricStep (...) double metricStep () mousePosition (...) QPointF mousePosition () mousePressed (...) bool mousePressed () move (...) void move (QPointF) operationAdjustMetrics (...) operationAdjustMetrics (double delta, bool percent) operationAlign (...) operationAlign (Qt::Alignment) operationBeauty (...) operationBeauty (bool) operationBreak (...) bool operationBreak (bool notify, bool alone_selected) operationCopyToMask (...) operationCopyToMask (bool global = false) operationDecompose (...) bool operationDecompose () operationFlipHorizontal (...) operationFlipHorizontal () operationFlipVertical (...) operationFlipVertical () operationGenius (...) operationGenius (bool) operationHarmonize (...) operationHarmonize () operationImprove (...) operationImprove () operationJoin (...) operationJoin () operationNoServant (...) operationNoServant () operationPrepare (...) ( flModelProducer , QList < flNodeInfo > selection, flShapeInfo , flGlyphInfo )/Nothing operationPrepare (bool allow_all_contours, bool allow_all_nodes = false) operationReverseContours (...) operationReverseContours () operationRotate180 (...) operationRotate180 () operationRotate90 (...) operationRotate90 () operationServantX (...) operationServantX (bool) operationServantY (...) operationServantY (bool) operationSetMetrics (...) operationSetMetrics (int mode) operationSimplify (...) operationSimplify () operationSmartAngle (...) operationSmartAngle (bool) operationSmooth (...) operationSmooth (bool) operationToBeziers (...) operationToBeziers () operationToCurve (...) operationToCurve () operationToLine (...) operationToLine () operationToSplines (...) operationToSplines () paint (...) void paint (QPainter*) placeAICB (...) bool placeAICB (QPointF position, QString filename | QMimeData mime_data) placeArtwork (...) bool placeArtwork (QPointF position, QList urls_list) popupHost (...) YPopupHost* popupHost () preview (...) preview () producer (...) flObject producer () rectToUpdate (...) QRect & rectToUpdate () referencePoint (...) QPointF referencePoint () regionToUpdate (...) QRegion & regionToUpdate () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeDeadSmartAngles (...) removeDeadSmartAngles () removeDecorator (...) void removeDecorator ( flVisualItem ) removeItem (...) removeItem ( flVisualItem ) removeProperty (...) removeProperty ('key') removeTextBlock (...) removeTextBlock ( flTextBlock ) removedFromCanvas (...) removedFromCanvas () removedFromWorkspace (...) removedFromWorkspace ( flWorkspace ) resetHighlight (...) resetHighlight () restoreHistoryState (...) restoreHistoryState (uint history_ix) scale (...) double scale () scaled (...) double scaled (double d) select (...) select () selectNode (...) selectNode ( flNodeInfo ) selectNodes (...) selectNodes (QList < flNodeInfo >) selectedNodes (...) QList < flNodeInfo > selectedNodes () selection (...) QList < flVisualItem > selection () setCursor (...) setCursor (QCursor) setCursorId (...) setCursorId (CursorId) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSelectedNodes (...) setSelectedNodes (QList < flNodeInfo >, bool ) show (...) show () slantTransform (...) QTransform slantTransform ( flGlyphInfo glyph_info) tag (...) tag ([string]) textBlocks (...) QList < flTextBlock > textBlocks () unselect (...) unselect () unselectAll (...) bool unselectAll () unselectAllNodes (...) bool unselectAllNodes () update (...) update () updateCanvasRectA (...) updateCanvasRectA (QRectF) updateMousePos (...) updateMousePos (QPoint) updateScreenRect (...) updateScreenRect (QRectF) updateScreenRegion (...) updateScreenRegion (QRegion) updateViewRect (...) updateViewRect () updateViewport (...) updateViewport () viewPortHasFocus (...) bool viewPortHasFocus () viewPortRect (...) QRect viewPortRect () viewRect (...) QRectF viewRect () zoomTo (...) zoomTo (QPointF canvas_point, double scale, ViewPointAlignment=vpCenter) | zoomTo (QRectF canvas_rect) zoomToReaded (...) zoomToReaded () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flCanvas createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceAcceptEvents (...) int instanceAcceptEvents () instanceType (...) int instanceType () Descriptors hasChanges bool hasHistoryStates bool hovered bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool locked bool modelProducer flModelProducer name object name opacity double owner flVisualItem paper flPaper refCnt object references count selected bool transform QTransform type object type viewPoint QPointF viewPort QWidget* viewTransform flTransform visible bool workspace flWorkspace Attributes Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2} SetMetricsAuto = 2 SetMetricsDefault = 1 SetMetricsZero = 0 new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flContour ( object ) flContour representation Constructors: flContour() flContour(flObject) flContour(flContour) flContour(fgContour) flContour(id) flContour(list(Node)[, bool closed=false]) flContour(list(QPointF)[, flNode::NodeType=flNode::On[, bool closed=false]]) flContour(QRectF) flContour(QLineF) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value add (...) add ( flNode | QPointF) addInterval (...) addInterval ( Interval ) addMarker (...) addMarker ( flContourMarker ) addMarkers (...) addMarkers ( list( flContourMarker ) ) append (...) append (list( flNode ) | flContour ) appendMapped (...) appendMapped (list( flNode ) | flContour , QTransform) appendMarkers (...) appendMarkers (list( flContourMarker )) applyTransform (...) applyTransform () assign (...) assign ( flContour | fgContour | list( flNode )) assignOwner (...) assignOwner () at (...) flNode at (int index) autoG2 (...) autoG2 (float tolerance) beautify (...) bool beautify ([int precision = 1]) bindDependencies (...) bindDependencies () boundingBox (...) QRectF boundingBox ([QTransform]) breakContour (...) ( flContour , flNode , flNode )/Nothing breakContour ( flNode ) | flContour /Nothing breakContour (int node_ix) breakContourExpanded (...) flContour /Nothing breakContourExpanded (int node_ix | flNode [, float extrapolate_d] calculate (...) QPointF calculate (float t[, QTransform tx]) changed (...) changed () checkFa (...) list(FaBasic) checkFa (list(int) tests) checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkSmooth (...) checkSmooth () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearIntervals (...) clearIntervals ([uint key]) clearMarkers (...) clearMarkers () clearNodes (...) clearNodes () clone (...) Clone the object cloneMapped (...) flContour cloneMapped (QTransform[, float ex_t0, float ex_t1]) cloneMappedByT (...) flContour cloneMappedByT (QTransform tx, float t0, float t1) cloneSelected (...) list( flContour )/Nothing cloneSelected ([QTransform, [bool ignore_alone=true]]) compare (...) (bool result, QPointF offset) compare ( flContour , float error) contains (...) bool contains ( flContour knife | QPointF) convertClToT (...) float convertClToT (float) convertExToCl (...) float convertExToCl (float) convertExToT (...) float convertExToT (float) convertTTtoCurve (...) convertTTtoCurve () convertToFgContour (...) fgContour convertToFgContour ([QTransform tx]) convertTtoCl (...) float convertTtoCl (float) convertTtoEx (...) float convertTtoEx (float) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() curvature (...) float curvature (float) derivative (...) QPointF derivative (float) distanceBetween (...) float distanceBetween (float t0, float t1[, float step =0.1]) draw (...) draw (pen) - Draw the contour\u2019s outline data to the given type-pen drawPoints (...) drawPoints (point-pen) - Draw the contour\u2019s outline data to the given type-point-pen extrapolateFirst (...) extrapolateFirst (float) extrapolateLast (...) extrapolateLast (float) fastAppend (...) fastAppend ( list( flNode ) ) fastClone (...) flContour fastClone (float ex_t0, float ex_t1) fastCloneByT (...) flContour fastCloneByT (float t0, float t1) find (...) flNode find (QPointF, float, flNode ::NodeType) findNearest (...) (float out_nearest_t, float dist)/Nothing findNearest (QPointF shape_p[, int orientation=0]) findNearestNode (...) ( flNode , float new_maxd)/Nothing findNearestNode (QPointF p, flNode ::NodeType node_type, float maxd) findNearestOn (...) float out_nearest_t/Nothing findNearestOn (QPointF p, float base_t) findNode (...) flNode /Nothing findNode (uint id | string name) flag (...) flag (uint f) getBoundedT (...) float getBoundedT (float param_t, float radius) getChangesRect (...) QRectF getChangesRect () getFirstPoint (...) QPointF/Nothing getFirstPoint ([int =0]) getIntervals (...) list( Interval ) getIntervals (uint key) getLastPoint (...) QPointF/Nothing getLastPoint ([int =0]) getLength (...) float getLength ([float t0, float t1,] int =10) getLengthSquareBRect (...) (float square, float length, QRectF brect) getLengthSquareBRect (float t0, float t1[, int step=10]) getNext (...) flNode /Nothing getNext (index[, flNode ::NodeType= flNode ::On]) getNextT (...) (bool, float) getNextT (float base_t, float offset) getNodeAt (...) flNode /Nothing getNodeAt (int idx[, flNode ::NodeType = flNode ::AnyNodeMask]) getPoint (...) QPointF/Nothing getPoint (int idx[, flNode ::NodeType = flNode ::On]) getPrev (...) flNode /Nothing getPrev (index[, flNode ::NodeType= flNode ::On]) getPrevT (...) (bool, float) getPrevT (float base_t, float offset) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSegment (...) list( flNode ) getSegment (int i0, int i1, bool left) getSelectedBoundingBox (...) QRectF getSelectedBoundingBox () getSelectedNodes (...) list( flNode )/Nothing getSelectedNodes () getSideOf (...) float getSideOf (QPointF p) getSquare (...) double getSquare () getT (...) float getT ( flNode ) getUpdateRect (...) QRectF getUpdateRect (float ex_t) hasHistoryState (...) hasHistoryState (uint history_ix) hasIntersPoints (...) bool hasIntersPoints ( flContour ) hasSelected (...) bool hasSelected (SelectionMode) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () indentParamT (...) float indentParamT (float base_t, float indent[, float step =0.1]) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx]) insert (...) insert (index, flNode | list( flNode ) ) insertNodeTo (...) flNode insertNodeTo (float t) insertSafeNodeTo (...) flNode insertSafeNodeTo (float t, float dst) intervals (...) list( Interval ) intervals () isAllNodesSelected (...) bool isAllNodesSelected () isCompatible (...) bool isCompatible ( flContour , bool strong) isEqual (...) isEqual ( flObject ) isFirst (...) bool isFirst ( flNode ) isLast (...) bool isLast ( flNode ) isSelected (...) bool isSelected (float) mapParamT (...) float mapParamT (float, float, float) markers (...) list( flContourMarker ) markers () move (...) move (QPointF) nodes (...) list( flNode ) nodes () normalAt (...) float normalAt (float t[, QTransform]) normalPoint (...) QPointF normalPoint (float t, float length) normalizeExT (...) float normalizeExT (float) path (...) QPainterPath path () pointInside (...) pointInside (QPointF pt) - Bool indicating if the point pt in the black area of the contour pointf (...) QPointF pointf (int index) release (...) release () remove (...) remove ([ flObject ]) removeAt (...) removeAt (int index) removeChild (...) removeChild ( flObject ) removeLast (...) removeLast () removeMarker (...) removeMarker ( flContourMarker ) removeNodesBetween (...) removeNodesBetween ( flNode prev, flNode next) removeOne (...) removeOne ( flNode ) removeProperty (...) removeProperty ('key') replace (...) replace ( flNode old_node, flNode new_node) restoreHistoryState (...) restoreHistoryState (uint history_ix) reverse (...) reverse () - Reverse the direction of the contour secondDerivative (...) QPointF secondDerivative (float) segment (...) CurveEx /Nothing segment (float t) segments (...) list( CurveEx ) segments () selectedPath (...) QPainterPath selectedPath () selectionChanged (...) selectionChanged () setFlag (...) setFlag (uint f [, bool value]) setNext (...) flNode setNext (int, QPointF) setPoint (...) flNode setPoint (int index, QPointF p) setPrev (...) flNode setPrev (int, QPointF) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSelectedNodes (...) setSelectedNodes (bool) setStartPoint (...) bool setStartPoint (int i) simplify (...) simplify (float precision, bool lossy, bool extremes) tag (...) tag ([string]) takeNodes (...) list( flNode ) takeNodes () tangent (...) float tangent (float t) toBeziers (...) toBeziers (float tolerance) toSplines (...) toSplines (float tolerance, bool short_splines) unselectAll (...) unselectAll () unselectedPath (...) QPainterPath unselectedPath () update (...) update () updateG2 (...) updateG2 (bool all_nodes) updateHobby (...) updateHobby (bool all_nodes) updateIndices (...) updateIndices () validateExT (...) (new_ex_t, bool) validateExT (float ex_t) validateIndex (...) (new_inx, bool) validateIndex (int inx) validateSmartR (...) (new_r, max_available_r, bool) validateSmartR (int node_ix, float r) validateT (...) (new_t, bool) validateT (float t) validatedT (...) float validatedT (float t) verifySmooth (...) verifySmooth () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors bounds The bounds of the contour as tuple (xMin, yMin, xMax, yMax) or None clockwise Bool indicating if the contour\u2019s winding direction is clockwise closed closed attribute closedT0 closedT0 attr closedT1 closedT1 attr first first node font The contour\u2019s parent font glyph The contour\u2019s parent glyph hasChanges bool hasCorners hasCorners hasHistoryStates bool hasSmartAngle hasSmartAngle id object id isChanged bool isComplete isComplete isNull bool isPresent bool isReleased bool isTT is truetype isValid bool last last node layer The contour\u2019s parent layer name object name nodesCount nodes count paramT0 paramT0 attr paramT1 paramT1 attr paramsClosed paramsClosed attribute prevLast last but one node refCnt object references count reversed reversed selection selection list (list ) transform transform matrix type object type Attributes FigureType = {'figureEllipse': 1, 'figureRectangle': 2} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flContourInfo ( object ) flContourInfo representation Constructors: flContourInfo() flContourInfo(flObject) flContourInfo(flContour, flSearchInfo) flContourInfo(flContour, flShapeInfo) flContourInfo(flContour, flContourInfo) flContourInfo(flContour, QTransform) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value brectOnCanvas (...) QRectF brectOnCanvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object cloneSelected (...) QList < flContourInfo > cloneSelected () combine (...) combine (QTransform transform) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getHitNode (...) flNodeInfo /Nothing getHitNode (QPointF canvas_pos, double dist[, int node_mask= flNode ::AnyNodeMask]) getNodesInfo (...) QList < flNodeInfo > getNodesInfo () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getUpdateRect (...) QRectF getUpdateRect (double ex_t) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) paramExT (...) double paramExT () paramT (...) double paramT () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setExT (...) setExT (double ex_t) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flContourInfo createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors contour flContour> dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count shapeInfo flShapeInfo transform transform matrix type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flContourMarker ( object ) flContourMarker representation Constructors: flContourMarker() flContourMarker(flObject) flContourMarker(flContourMarker) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) point (...) QPointF point () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' shiftT (...) shiftT (float shift_d) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors contour flObject hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name outer bool paramT float refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flEvent ( object ) flEvent representation Constructors: flEvent(flEvent) flEvent(flEvent(EventType type[, int modifiers=-1]) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help( type (x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors modifiers int type EventType Attributes EventType = {'MouseEvent': 1, 'MovementEvent': 3, 'WheelEvent': 2} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flExpression ( object ) flExpression representation Constructors: flExpression() flExpression(flObject) flExpression(flExpression) flExpression(string) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearError (...) clearError () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() expression (...) QString expression (QMap aliases) flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasError (...) bool hasError () hasExpression (...) bool hasExpression () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) isNeedToComplete (...) bool isNeedToComplete () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') resetReady (...) resetReady () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () variables (...) QStringList variables ([QMap aliases]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors error int hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name ready bool refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flGlyph ( object ) flGlyph representation Constructors: flGlyph() flGlyph(flGlyph) flGlyph(flObject) flGlyph(fgGlyph, fgFont) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value addLayer (...) void addLayer ( flLayer [, bool back = false]) addLayers (...) void addLayers (list( flLayer )) applyTransform (...) applyTransform ([QTransform transform]) assignFontGateData (...) void assignFontGateData (fgFontGateData, bool doGuide = true, bool doHints = true, bool doAnchors = true) bindDependencies (...) bindDependencies () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateAll (...) deactivateAll () ensureMaskLayer (...) flLayer ensureMaskLayer () fillFgData (...) fgFontGateData fillFgData (bool doGuides, bool doHints) findLayer (...) flLayer findLayer (QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findLayerCreate (...) flLayer findLayerCreate (QString name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findVerticalGuideline (...) double/Nothing findVerticalGuideline (QString) flag (...) flag (uint f) getAuditInfo (...) list( flAuditInfo ) getAuditInfo () getFastFontGateData (...) fgFontGateData getFastFontGateData () getLSB (...) double getLSB (QTransform tr) getLayerByName (...) flLayer getLayerByName (QString[, bool create =false]) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getRSB (...) double getRSB (QTransform tr) getSB (...) (double l, double r) getSB (QTransform tr) glyphName (...) QString glyphName () hasFontAudit (...) bool hasFontAudit () hasHistoryState (...) hasHistoryState (uint history_ix) haveSelected (...) bool haveSelected (SelectionMode) historyStates (...) historyStates (bool accepted_state) horzReflection (...) bool horzReflection () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx = QTransform()]) isEqual (...) isEqual ( flObject ) isUnbindedDependecies (...) bool isUnbindedDependecies () issele (...) void issele (bool) measurementLine (...) double/Nothing measurementLine () prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeEmptyShapes (...) removeEmptyShapes () removeLayer (...) void removeLayer ( flLayer ) removeProperty (...) removeProperty ('key') resetInkBox (...) resetInkBox () resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) setAllShapesSelected (...) setAllShapesSelected (bool) setFlag (...) setFlag (uint f [, bool value]) setLSB (...) bool setLSB (double v, bool move_guidelines, QTransform tr) setLayers (...) void setLayers (list( flLayer )) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setRSB (...) bool setRSB (double v, QTransform tr) setReflected (...) setReflected (bool, bool) setSB (...) bool setSB (double l, double r, bool move_guidelines, bool all_layers, QTransform tr) tag (...) tag ([string]) unselectAllNodes (...) unselectAllNodes () update (...) update () updateActiveLayer (...) flLayer updateActiveLayer (bool) updateAudit (...) void updateAudit (list(int)) updateSidebearings (...) bool updateSidebearings (bool nofify) vertReflection (...) bool vertReflection () virtualTags (...) QSet /Nothing virtualTags () Static methods clearUpdateFgGlyphs (...) clearUpdateFgGlyphs () cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flGlyph createInstance () createObject (...) flObject /Nothing createObject (int); ensureFgData (...) fgFontGateData ensureFgData (fgGlyph) hasInstance (...) bool hasInstance (fgGlyph) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); linkInstances (...) bool linkInstances ( flGlyph , fgGlyph) updateFgGlyph (...) updateFgGlyph (uint id) updatedFgGlyphs (...) list(uint32_t) updatedFgGlyphs () Descriptors activeLayer flLayer advanceWidth double ascender double bodyLayer flLayer bodyRect QRectF boundingBox QRectF descender double fgGlyph fgGlyph fgGlyphId FgTypeId fgPackage fgFont getStateObject flObject glyphRect QRectF hasBody bool hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool lastModified QDateTime layers list(flLayer) leftMetric QPointF mark int metricsLeft QString metricsRect QRectF metricsRight QString metricsWidth QString name QString nodesCount int note QString package flObject refCnt object references count rightMetric QPointF tags QStringList type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flGlyphInfo ( object ) flGlyphInfo representation Constructors: flGlyphInfo() flGlyphInfo(flObject) flGlyphInfo(flGlyphInfo) flGlyphInfo(flGlyph, QTransform) flGlyphInfo(fgSymbol, fgGlyph, fgFont) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value applyTransform (...) applyTransform () applyTransformTo (...) applyTransformTo (uint type) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createBoundingBox (...) createBoundingBox () createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getNearbyContours (...) list( flContourInfo ) getNearbyContours (QPointF, double max_dist, QString exclude_attr) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getTopHitShape (...) flShapeInfo /Nothing getTopHitShape (QPointF) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) hitToShape (...) bool hitToShape (QPointF) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) kerningOffset (...) double kerningOffset (bool useKerning) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setBoundAscender (...) setBoundAscender (double) setBoundDescender (...) setBoundDescender (double) setBoundLeft (...) setBoundLeft (double) setBoundRight (...) setBoundRight (double) setFlag (...) setFlag (uint f [, bool value]) setGlyphScale (...) setGlyphScale (double, double) setKerningOffset (...) setKerningOffset (double offs) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors bodyRectOnCanvas QRectF boundingBox QRectF brectOnCanvas QRectF changedRect QRectF dist double fontSize int glyph flGlyph glyphRectCanvas QRectF hasChanges bool hasHistoryStates bool id object id isActive bool isChanged bool isNull bool isNullGlyph bool isPresent bool isReleased bool isSelected bool isValid bool leftOffset double metricsRectOnCanvas QRectF name QString refCnt object references count rightOffset double shapesBoundingBoxOnCanvas QRectF state uint symbol fgSymbol textBlock flTextBlock, int transform transform matrix type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flGraphicsInfo ( object ) flGraphicsInfo representation Constructors: flGraphicsInfo() flGraphicsInfo(flObject) flGraphicsInfo(flGraphicsInfo) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count transform transform matrix type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flGuideLine ( object ) flGuideLine representation Constructors: flGuideLine() flGuideLine(flObject) flGuideLine(flGuideLine) flGuideLine(double angle, QPointF canvas_point, uint=flSnaps::Vector, SnapObjectsStyle=gsPageGuideline) flGuideLine(QLineF line, uint=flSnaps::Vector, SnapObjectsStyle=gsPageGuideline) flGuideLine(QPointF center, QPointF vector_point, uint =flSnaps::Vector, SnapObjectsStyle=gsPageGuideline) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value applyTransform (...) void applyTransform (QTransform) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() disconnectFromContour (...) disconnectFromContour () distanceTo (...) double distanceTo (QPointF, uint mode) flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) isHorizontal (...) bool isHorizontal ([double a=1]) isVertical (...) bool isVertical ([double a=1]) offsetTo (...) QPointF offsetTo (QPointF, uint mode) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') reset (...) reset () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSnapFlag (...) setSnapFlag (uint role, uint snapFlags) setSnapFlagValue (...) setSnapFlagValue (uint role, bool) snapFlag (...) uint snapFlag (uint role) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); counterPaper (...) int counterPaper () createInstance (...) flGuideLine createInstance () createObject (...) flObject /Nothing createObject (int); createPowerGuides (...) bool createPowerGuides (fgFont, flLayer , bool horizontal, bool vertical, bool diagonal[, bool use_glyph_guides=true[, bool use_font_guides = true]]) getHashCode (...) long getHashCode (QPointF, double angle) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isGuideLine (...) bool isGuideLine ( flObject ) isSnapLine (...) bool isSnapLine ( flObject ) sortGuideLines (...) list( flGuideLine ) sortGuideLines (list( flGuideLine )[, bool ascending = true]) Descriptors angle double angleMode SnapAngleMode center flNode centerPoint QPointF color QColor constraints QRectF expression QString extLinef QLineF extPosition double hasChanges bool hasColor bool hasExpression bool hasHistoryStates bool hasTags bool haveExtLine bool id object id isAbsoluteMarkerPos bool isChanged bool isExluded bool isHint bool isInUse bool isMeasurementLine bool isNull bool isPassive bool isPresent bool isReleased bool isShortGuideline bool isValid bool isVerticalQuarter bool isZone bool length double linef QLineF markers list(flMarkerPoint) markersStructVersion int name object name refCnt object references count snapFlags uint style SnapObjectsStyle tags QSet type object type vector flNode vectorPoint QPointF Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flHintingParameters ( object ) flHintingParameters representation Constructors: flHintingParameters() - default Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value init (...) init () Descriptors blueFuzz int blueScale double blueShift int codePPM int dropoutPPM int flex bool fontDirectionHint int forceBold bool forceBoldTreshold double lowestRecPPEM int maxFunctionDefs int maxInstructionDefs int maxStackElements int maxStorage int maxTwilightPoints int maxZones int stemSnapLimit int zonePPM int Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flInstance ( object ) flInstance representation Constructors: flInstance() flInstance(string name, string tsn, flLocation location) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value autoSGN (...) string autoSGN (const string ) autoSLV (...) int autoSLV () autoTSN (...) string autoTSN () setSLV (...) setSLV (bool bold, bool italic) Descriptors bold bool exportable bool italic bool location flLocation name string sgn string slv int tsn string weight string weightValue double width string Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flItems ( object ) flItems representation Constructors: flItems() Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value shapeBuilders (...) list( flObject ) shapeBuilders () Static methods appendRecentFile (...) appendRecentFile (QString, QString file_name) buildRecentList (...) QStringList/Nothing buildRecentList (QString) clearRecentFiles (...) clearRecentFiles (QString ) createObject (...) flObject createObject (int type, flObject key) getCursor (...) QCursor getCursor (CursorId) getCursorId (...) CursorId getCursorId (QString, int hot_x, int hot_y) guidelinesEditingEnabled (...) bool guidelinesEditingEnabled () init (...) init () instance (...) flItems instance () notifyActivateGlyph (...) notifyActivateGlyph ( flGlyphInfo ) notifyAnchorsChanged (...) notifyAnchorsChanged () notifyApplyTranformFrame (...) notifyApplyTranformFrame () notifyAuditHovered (...) notifyAuditHovered (uint id) notifyAutoShapseChanges (...) notifyAutoShapseChanges ( flLayer ) notifyAvailableToSelectNodes (...) notifyAvailableToSelectNodes ( list(list( flNodeInfo )) ) notifyBrushModeSelected (...) notifyBrushModeSelected (bool smart) notifyBrushSelected (...) notifyBrushSelected ( PaintBrush ) notifyBrushSet (...) notifyBrushSet () notifyCancelTranformFrame (...) notifyCancelTranformFrame () notifyCanvasAttached (...) notifyCanvasAttached ( flCanvas ) notifyCanvasEnterFocus (...) notifyCanvasEnterFocus ( flCanvas ) notifyCanvasLeaveFocus (...) notifyCanvasLeaveFocus ( flCanvas ) notifyCanvasRemoved (...) notifyCanvasRemoved ( flCanvas ) notifyChangesApplied (...) notifyChangesApplied ([QString title, flObject object / list( flObject )[, bool recursive=false]]) notifyClipboardChanged (...) notifyClipboardChanged () notifyColorSet (...) notifyColorSet (QColor, bool b) notifyCommandSelected (...) notifyCommandSelected () notifyCurrentPaperChanged (...) notifyCurrentPaperChanged ( flPaper ) notifyDropDone (...) notifyDropDone ( flCanvas & canvas) notifyEditActionFinished (...) notifyEditActionFinished () notifyEditActionStarted (...) notifyEditActionStarted () notifyEditModeChanged (...) notifyEditModeChanged (EditMode mode) notifyEditingChanged (...) notifyEditingChanged ( flAbstractEditor ) notifyEditingFinished (...) notifyEditingFinished () notifyFeaturesChanged (...) notifyFeaturesChanged (uint package_id, bool binary) notifyFontPanelActivated (...) notifyFontPanelActivated (bool b) notifyFontSelected (...) notifyFontSelected (uint id); notifyFrameSelected (...) notifyFrameSelected (list( flNodeInfo )) notifyGalleryChanged (...) notifyGalleryChanged ( flObject ) notifyGlyphActivated (...) notifyGlyphActivated ( flGlyphInfo ) notifyGlyphDeactivated (...) notifyGlyphDeactivated () notifyGlyphDoubleClick (...) notifyGlyphDoubleClick ( flGlyphInfo ) notifyGlyphIdSelected (...) notifyGlyphIdSelected (uint packageId, uint glyphId, bool replace) notifyGlyphMaximized (...) notifyGlyphMaximized ( flGlyphInfo ) notifyGlyphPinPointChanged (...) notifyGlyphPinPointChanged ([ flPinPoint pin_point = flnull[, flGlyphInfo glyph_info = flnull]]) notifyGlyphPinPointCreated (...) notifyGlyphPinPointCreated ( flGlyphInfo ) notifyGlyphUpdated (...) notifyGlyphUpdated (uint packageId, uint glyphId) notifyGlyphWindowInactive (...) notifyGlyphWindowInactive () notifyGlyphsUpdated (...) notifyGlyphsUpdated (uint packageId, QSet glyphIds) notifyGraphEdgeSelectionChanged (...) notifyGraphEdgeSelectionChanged ( flObject ) notifyGuidelinesChanged (...) notifyGuidelinesChanged ( flCanvas ) notifyGuidelinesSelected (...) notifyGuidelinesSelected (list( flGuideLine )) notifyHidePanels (...) notifyHidePanels () notifyHistoryChanged (...) notifyHistoryChanged () notifyKeyHash (...) notifyKeyHash () notifyKeyRepeat (...) notifyKeyRepeat (int key) notifyKeySlash (...) notifyKeySlash () notifyLayerActivated (...) notifyLayerActivated ( flLayer ) notifyModelChanged (...) notifyModelChanged () notifyNodeChanged (...) notifyNodeChanged ( flNodeInfo ) notifyNodesSelected (...) notifyNodesSelected (list( flNodeInfo )) notifyPackageAdded (...) notifyPackageAdded ( flPackage ) notifyPackageClosed (...) notifyPackageClosed ( flPackage ) notifyPackageContentUpdated (...) notifyPackageContentUpdated (uint id) notifyPackageReaded (...) notifyPackageReaded ( flPackage ) notifyPackageRemoved (...) notifyPackageRemoved ( flPackage ) notifyPackageUpdated (...) notifyPackageUpdated ( flPackage | uint id) notifyPackagesRemoved (...) notifyPackagesRemoved (list( flObject )) notifyPackagesUpdated (...) notifyPackagesUpdated () notifyPinPointChanged (...) notifyPinPointChanged ([ flPinPoint pin_point = flnull[, flShapeInfo shape_info = flnull]]) notifyPinPointCreated (...) notifyPinPointCreated ( flShapeInfo ) notifyPinPointSelectionChanged (...) notifyPinPointSelectionChanged () notifyPinSelected (...) notifyPinSelected (uint id) notifyPreferencesChanged (...) notifyPreferencesChanged () notifyProjectClosed (...) notifyProjectClosed () notifyProjectReaded (...) notifyProjectReaded (QString file_name) notifyProjectSaved (...) notifyProjectSaved (QString file_name) notifyPropertiesChanged (...) notifyPropertiesChanged ( flObject ) notifyRenderingBegin (...) notifyRenderingBegin (QString info) notifyRenderingFinished (...) notifyRenderingFinished (bool success) notifyReplaceGlyphsByFgId (...) notifyReplaceGlyphsByFgId (list(unsigned long), int replace_count) notifyRequestChangeCurrentClipboard (...) notifyRequestChangeCurrentClipboard (QString xml) notifyRequestNewProject (...) notifyRequestNewProject () notifyRequestOpenProject (...) notifyRequestOpenProject (QString file_name) notifyRequestPasteAction (...) notifyRequestPasteAction () notifyRequestShowWelcome (...) notifyRequestShowWelcome () notifyRequestShowWorkspace (...) notifyRequestShowWorkspace () notifySCVItemsChanged (...) notifySCVItemsChanged () notifyScrollToGlyph (...) notifyScrollToGlyph ( flGlyphInfo ) notifySelectionChanged (...) notifySelectionChanged () notifyShapeActivated (...) notifyShapeActivated ( flShapeInfo ) notifyShapeDeactivated (...) notifyShapeDeactivated () notifyShowPanels (...) notifyShowPanels () notifySnapLineChanged (...) notifySnapLineChanged ( flGuideLine ) notifySnapLinesChanged (...) notifySnapLinesChanged (list( flGuideLine )) notifyStaplerPreviewEnabled (...) notifyStaplerPreviewEnabled (bool enbl) notifyStickerCreated (...) notifyStickerCreated () notifyStopButtonClicked (...) notifyStopButtonClicked () notifyTextBlockAdded (...) notifyTextBlockAdded ( flTextBlock ) notifyTextBlockItemActivated (...) notifyTextBlockItemActivated (flTextBlockItem[, bool check_tools = true]) notifyTextBlockItemChanged (...) notifyTextBlockItemChanged (flTextBlockItem) notifyTextBlockItemDeactivated (...) notifyTextBlockItemDeactivated (flTextBlockItem) notifyTextBlockItemMaximized (...) notifyTextBlockItemMaximized (flTextBlockItem) notifyTextBlockItemNormalized (...) notifyTextBlockItemNormalized (flTextBlockItem) notifyTextBlockItemsSelectionChanged (...) notifyTextBlockItemsSelectionChanged ( flCanvas ) notifyTextBlockRemoved (...) notifyTextBlockRemoved ( flTextBlock ) notifyToolChanged (...) notifyToolChanged ( flBasicTool & tool) notifyTransformDataChanged (...) notifyTransformDataChanged ( TransformFrame ) notifyTransformFrameChanged (...) notifyTransformFrameChanged ( flObject ) notifyTransformFrameFinished (...) notifyTransformFrameFinished ( flObject ) notifyTransformFrameStarted (...) notifyTransformFrameStarted ( flObject ) notifyTransformStarted (...) notifyTransformStarted () notifyUpdateHistory (...) notifyUpdateHistory () notifyUpdateStaplers (...) notifyUpdateStaplers () notifyViewportChanged (...) notifyViewportChanged (QWidget* old_viewport, QWidget* new_viewport) notifyWorkspaceClosed (...) notifyWorkspaceClosed ( flWorkspace ) notifyWorkspaceHasChanges (...) notifyWorkspaceHasChanges (bool c) notifyWorkspaceInitialized (...) notifyWorkspaceInitialized ( flWorkspace ) notifyZoomChanged (...) notifyZoomChanged ( flCanvas & canvas) requestActivateNodesTool (...) requestActivateNodesTool () requestActivateShapeTool (...) requestActivateShapeTool () requestActivateTransformTool (...) requestActivateTransformTool () requestCheckHistoryInitIndex (...) requestCheckHistoryInitIndex ( flGlyphInfo ) requestContent (...) requestContent ( fgSymbolList characters, int cursorLocation requestFontInfoDlg (...) requestFontInfoDlg () requestGlyphActivate (...) requestGlyphActivate (uint pid, uint gid) requestGlyphDeactivate (...) requestGlyphDeactivate () requestGlyphReactivated (...) requestGlyphReactivated () requestLoadingFont (...) requestLoadingFont (QString font_source) requestPackageAcceptFonts (...) requestPackageAcceptFonts ( flPackage ) requestPackagePostProcess (...) requestPackagePostProcess ( flPackage , QString encoding) requestPermissionsForDragGuidelineByNode (...) bool requestPermissionsForDragGuidelineByNode (QPointF canvas_pos, uint modifiers) requestProgressMessage (...) requestProgressMessage (QString message) requestProgressRange (...) requestProgressRange (int v) requestProgressShow (...) requestProgressShow (bool b) requestProgressValue (...) requestProgressValue (int v) requestSaveBar (...) requestSaveBar (bool b) requestSaveBarValue (...) requestSaveBarValue (int v) requestSubContent (...) requestSubContent ( fgSymbolList characters, int cursorLocation requestUpdateActiveShape (...) requestUpdateActiveShape ( flShapeInfo ) resetToolCursor (...) resetToolCursor () setCursor (...) setCursor (CursorId cursor_id); setEllipseCurvature (...) setEllipseCurvature (double d) setEllipseData (...) setEllipseData (QPointF p0, QPointF p1) setGuidelinesEditingEnabled (...) setGuidelinesEditingEnabled (bool b) setMeterData (...) setMeterData (QPointF p0, QPointF p1) setParameterName (...) setParameterName ( flObject , QString) setTransformation (...) setTransformation (int code, QPointF value) strToType (...) int strToType (QString) typeToStr (...) QString typeToStr (int type) Descriptors qobject QObject workspace flObject Attributes ItemStates = {'AutoUpdate': 2097152, 'Custom': 1048576, 'Hovered': 131072, 'Locked': 2, 'Normal': 0, 'Preview': 524288, 'Selected': 65536, 'Small': 262144, 'Visible': 1} ItemType = {} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T bBrush = 9 bCount = 14 bEllipse = 6 bGlyph = 3 bGuideline = 2 bMeter = 5 bMetrics = 0 bPen = 7 bPin = 4 bSingleNode = 1 bText = 10 bTransform = 8 transformRotate = 2 transformScale = 1 transformShift = 0 transformSlant = 3 class flLayer ( object ) flLayer representation Constructors: flLayer() flLayer(flObject) flLayer(flGlyph) flLayer('title') Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value addAnchor (...) addAnchor ( flPinPoint ) addComponent (...) addComponent (flComponent component) addShape (...) flShape addShape ( flShape ) addShapes (...) addShapes (list( flShape )) appendGuidelines (...) appendGuidelines (list( flGuideLine )) applyTransform (...) applyTransform ([QTransform transform]) assignFgLayer (...) assignFgLayer (fgLayer, bool doGuides, bool doHints, bool doAnchors, bool doShapes, bool doTTH) assignStyle (...) assignStyle ( flLayer layer) autohint (...) bool autohint () bindDependencies (...) bindDependencies () buildAuto (...) bool buildAuto () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) cleanEmptyShapes (...) cleanEmptyShapes () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearAnchors (...) clearAnchors () clearComponents (...) clearComponents () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object cloneCustom (...) ( flLayer , list( flObject )) cloneCustom (uint) compare (...) bool compare ( flLayer layer, double error) compoundMakeSelected (...) bool compoundMakeSelected (bool set_active, bool process_all) compoundMakeSelectedToShapes (...) bool compoundMakeSelectedToShapes ([bool set_active =true]) contourRect (...) QRectF contourRect () createAnchor (...) flPinPoint createAnchor (QPointF p, bool auto_positioning) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateAllShapes (...) deactivateAllShapes () fillFgAnchors (...) fillFgAnchors (fgLayer) fillFgGuides (...) fillFgGuides (fgLayer) fillFgHints (...) fillFgHints (fgLayer) findAnchor (...) flPinPoint findAnchor (QString name) findNearestNode (...) ( flShape , flNode best_node, double maxd) findNearestNode (QPointF, flNode ::NodeType node_type, double maxd) findNode (...) ( flNode , QPointF)/Nothing findNode (string name) flag (...) flag (uint f) getActiveComposite (...) flShape /Nothing getActiveComposite () getActiveShape (...) ( flShape , QTransform)/Nothing getActiveShape ([bool = true]) getContours (...) list( flContour ) getContours () getImgLayer (...) flLayer getImgLayer (bool create) getMaskLayer (...) flLayer getMaskLayer (bool create) getMasterPosition (...) QMap /Nothing getMasterPosition () getOwnerComposite (...) flShapeInfo getOwnerComposite ( flShape , QTransform) / flShapeData getOwnerComposite ( flShape ) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSelected (...) list( flContour )/Nothing getSelected (SelectionMode) getShapes (...) list( flShape ) getShapes (ShapeType shape_type) getTthCode (...) bool getTthCode (fgLayer fg_layer, fgTTInterpreter itr) getTthData (...) list(bytes) / Nothing getTthData (fgLayer fg_layer, fgTTInterpreter itr) getTthProgram (...) QString getTthProgram (fgTTInterpreter itr) goDown (...) bool goDown ( flShape ) goUp (...) bool goUp ( flShape ) hasHistoryState (...) hasHistoryState (uint history_ix) hasShape (...) bool hasShape ( flShape ) hasShapeData (...) bool hasShapeData ( flShapeData ) haveSelected (...) bool haveSelected (SelectionMode) hints2links (...) bool hints2links () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx = QTransform()]) insertShape (...) flShape insertShape (int index, flShape shape) isBack (...) bool isBack ( flShape ) isCompatible (...) bool isCompatible ( flLayer , bool strong) isEqual (...) isEqual ( flObject ) isFront (...) bool isFront ( flShape ) killAuto (...) killAuto () nodesCount (...) int nodesCount () prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([ flObject ]) removeAllShapes (...) removeAllShapes ([ShapeType shape_type=AnyShape]) removeAnchor (...) removeAnchor ( flPinPoint ) removeChild (...) removeChild ( flObject ) removeGuides (...) bool removeGuides (bool horizontal, bool vertical) removeHints (...) bool removeHints (bool horizontal, bool vertical) removeProperty (...) removeProperty ('key') removeShape (...) removeShape ( flShape [, bool recursive=true]) reorderShapes (...) reorderShapes (QList ) replaceShape (...) replaceShape ( flShape old_shape, flShape new_shape) resetInkBox (...) resetInkBox () resetMetricsLeft (...) resetMetricsLeft () resetMetricsRight (...) resetMetricsRight () resetMetricsWidth (...) resetMetricsWidth () resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) selectAll (...) selectAll () sendToBack (...) bool sendToBack ( flShape ) sendToFront (...) bool sendToFront ( flShape ) setActive (...) setActive () setActiveShape (...) setActiveShape ( flShape ) setAllShapesSelected (...) setAllShapesSelected (bool) setFlag (...) setFlag (uint f [, bool value]) setGlyphComponents (...) bool setGlyphComponents (QList < GlyphComponent > result, double width, flPackage package, bool colorize) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setWireframeColorIx (...) setWireframeColorIx (int) sortShapes (...) sortShapes () tag (...) tag ([string]) takeShapes (...) QList < flShape > takeShapes (ShapeType shape_type) transferNames (...) transferNames ( flLayer layer) transferTTH (...) bool transferTTH ( flLayer ) tthAutohint (...) tthAutohint (bool make_hints, fgTTInterpreter itr) tthFixZones (...) tthFixZones (fgTTInterpreter itr) tthReassignStems (...) tthReassignStems (fgTTInterpreter itr) tthReassignZones (...) tthReassignZones (fgTTInterpreter itr, bool) tthRemoveCommands (...) tthRemoveCommands (bool vertical, bool horizontal) tthRemoveDeltas (...) tthRemoveDeltas (bool middle, bool final) unselectAllNodes (...) unselectAllNodes () update (...) update () updateAnchors (...) updateAnchors () updateGuidelineNode (...) flNode updateGuidelineNode ( flNode node) Static methods checkTags (...) bool checkTags (QSet glyph_tags, QString item_tags) cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors advanceHeight double advanceWidth double anchors list(flPinPoint) anchors() autoLayer bool boundingBox QRectF boundingBox() components list(name, transform) componentsCount int componentsCount() compoundReleaseSelected bool compoundReleaseSelected(); counterAnchors int counterAnchors() glyph flGlyph guidelines list(flGuideLine) guidelines() hasAdvanceHeight bool hasAdvanceHeight() hasAdvanceWidth bool hasAdvanceWidth() hasBody bool hasBody() hasChanges bool hasComponents bool hasComponents() hasComposites bool hasComposites() hasGuides bool hasGuides() hasHints bool hasHints() hasHistoryStates bool hasNote bool hasNote() hasTTData bool hasTTData() hasTTH bool hasTTH() haveActiveComposite bool haveActiveComposite() id object id isActive bool isActive() isAllSelected bool isBodyLayer bool isBodyLayer() isChanged bool isImg bool isImg() isImgLayer bool isImgLayer() isLocked bool isLockedI bool isLockedI() isMask bool isMask() isMaskLayer bool isMaskLayer() isMasterLayer bool isMasterLayer() isNull bool isPresent bool isReleased bool isService bool isServiceMA bool isServiceMA() isValid bool isVisible bool isVisibleA bool isVisibleA() isWireframe bool mark double metricsLeft QString metricsRight QString metricsWidth QString name object name note QString opacity double recipe QString refCnt object references count shapes list(flShape) shapes() shapesCount int shapesCount() transform QTransform ttData fgTrueTypeData tthProgram QList type object type wireframeColor QColor Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flLayerAttributes ( object ) Data wrapper Methods add (...) x. __add__ (y) < ==> x+y delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) mul (...) x. __mul__ (n) < ==> x*n repr (...) x. __repr__ () < ==> repr(x) rmul (...) x. __rmul__ (n) < ==> n*x setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. str (...) x. __str__ () < ==> str(x) asDict (...) represent object as dictionary asTuple (...) represent object as tuple Descriptors isActive isLocked isService isVisible isWireframe wireframeColor Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flLayerInfo ( object ) flLayerInfo representation Constructors: flLayerInfo() flLayerInfo(flObject) flLayerInfo(flLayerInfo) flLayerInfo(flLayer, QTransform) flLayerInfo(flLayer, flObject glyph_info, QTransform) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value brectOnCanvas (...) QRectF brectOnCanvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flLayerInfo createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool layer flLayer name object name refCnt object references count transform transform matrix type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flLocation ( object ) flLocation representation Constructors: flLocation(flLocation) flLocation() Methods delattr (...) x. __delattr__ ('name') < ==> del x.name delitem (...) x. __delitem__ (y) < ==> del x[y] getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] init (...) x. __init__ (...) initializes x; see help(type(x)) for signature len (...) x. __len__ () < ==> len(x) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setitem (...) x. __setitem__ (i, y) < ==> x[i]=y Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flMarkerPoint ( object ) flMarkerPoint representation Constructors: flMarkerPoint() flMarkerPoint(flObject) flMarkerPoint(flMarkerPoint) flMarkerPoint(double marker_pos, uint markerFlags, flSnaps::MarkerKey key) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) markerFlag (...) uint markerFlag (uint role) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setMarkerFlag (...) setMarkerFlag (uint role, uint markerFlags) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flMarkerPoint createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isSelected bool isStem bool isValid bool key flSnaps::MarkerKey key() markerFlags uint name object name position double refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flModel ( object ) flModel representation Constructors: None, static only methods Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Static methods createObject (...) flObject /Nothing createObject (int type) getClassMask (...) int getClassMask (int type) instance (...) flModel instance () isClassMask (...) bool isClassMask (int type) notifyGlyphChanged (...) notifyGlyphChanged (unsigned long fg_glyphId) notifyGlyphUpdate (...) notifyGlyphUpdate (unsigned long fg_glyphId) notifyGlyphsChanged (...) notifyGlyphsChanged (QSet glyphs) typeToStr (...) QString typeToStr (int type | flObject ) Attributes ModelType = {'Anchor': 185, 'AnchorNode': 186, 'AnchorNodeToGuidelineCoords': 187, 'AutoShape': 55, 'Bezier': 48, 'Container': 8, 'Contour': 47, 'ContourInfo': 181, 'Controls': 14, 'Edge': 101, ...} ObjectParameter = {'prmBrush': 2, 'prmPen': 3, 'prmStructure': 0, 'prmTransform': 1} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flModelProducer ( object ) flModelProducer representation Constructors: flModelProducer() flModelProducer(flModelProducer) flModelProducer(flObject) flModelProducer(flCanvas) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); copyToClipboard (...) copyToClipboard (objId package_id, QList < flObject > objects) countGlyphsInData (...) int countGlyphsInData (QByteArray *data) createObject (...) flObject /Nothing createObject (int); getClipboardData (...) QByteArray getClipboardData (objId package_id, QList < flObject >) getObjectsFromClipboard (...) flObjects/Nothing getObjectsFromClipboard () getObjectsFromData (...) flObjects/Nothing getObjectsFromData (QByteArray *data) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flMouseEvent ( object ) flMouseEvent representation Constructors: flMouseEvent(flMouseEvent) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help( type (x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Descriptors button Qt::MouseButton buttons Qt::MouseButtons delta QPointF firstPressed bool global QPoint modifiers int movement float origin QPoint prev QPoint type EventType Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flNode ( object ) flNode representation Constructors: flNode() flNode(Node) - make clone flNode(QPointF position[, string nodeType=\"on\"[, int nodeKind=None]]) flNode(double x, double y[, string nodeType=\"on\"[, int nodeKind=None]]) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value angleTo (...) double angleTo (QPointF p) applyTransform (...) applyTransform (QTransform) canBeHobby (...) bool canBeHobby () canBeSmooth (...) bool canBeSmooth () canCollapse (...) bool canCollapse () canImprove (...) bool canImprove () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVectors (...) bool checkVectors () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearStored (...) clearStored () clone (...) Clone the object cloneMapped (...) flNode cloneMapped (QTransform) collapseHandles (...) bool collapseHandles () convertToCurve (...) bool convertToCurve ([bool smooth = false]) convertToCurves (...) bool convertToCurves () convertToLine (...) bool convertToLine () copyFrom (...) copyFrom (Node[, withSelected=False]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (Node/QPointF) flag (...) flag (uint f) getLines (...) (QLineF, QLineF)/None getLines () getOn (...) Node/None getOn () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isCorner (...) bool isCorner ([double a = 10.]) isCurve (...) bool isCurve () isEqual (...) isEqual ( flObject ) isEqualTo (...) bool isEqualTo (Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme (...) bool isExtreme (bool x[, bool open = true[, double limit = 0]]) isFirst (...) bool isFirst () isG2 (...) bool isG2 (double tolerance) isInternal (...) bool isInternal (bool clockwise) isInterpolated (...) bool isInterpolated (bool x) isLast (...) bool isLast () isOff (...) bool isOff () isOn (...) bool isOn () isSmartAngle (...) bool isSmartAngle () makeStart (...) bool makeStart () moveBy (...) moveBy (float dx, float dy[, bool round=false] nextNode (...) Node/None nextNode ([string nodeType= [, int searchDepth=1]]) pointG2 (...) QPointF/None pointG2 () prevNode (...) Node/None prevNode ([string nodeType= [, int searchDepth=1]]) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreCoordinates (...) restoreCoordinates () restoreHistoryState (...) restoreHistoryState (uint history_ix) rotateBy (...) rotateBy (valueDegree[, QPointF origin=(0, 0)]) round (...) round () - Round the node's coordinate scaleBy (...) scaleBy (valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) setExtraLast (...) setExtraLast (bool) setFlag (...) setFlag (uint f [, bool value]) setNextSmooth (...) setNextSmooth (QPointF base) setPrevSmooth (...) setPrevSmooth (QPointF base) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSmartAngleEnbl (...) bool setSmartAngleEnbl (bool) setSmartSharp (...) bool setSmartSharp ([double tension = 0.6]) skewBy (...) skewBy (valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartMove (...) list(uint) smartMove (offset) smartSetXY (...) smartSetXY (QPointF) storeCoordinates (...) storeCoordinates () storeTestParameters (...) storeTestParameters () tag (...) tag ([string]) transformBy (...) transformBy (QTransform tx[, QPointF origin=(0, 0)]) update (...) update () updateG2 (...) bool updateG2 () updateSmooth (...) updateSmooth ([bool extended_neibh=true]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors angle angle contour The parent Contour or None if not present g2 g2 hasChanges bool hasHistoryStates bool hobby hobby id object id index The index of the node in parent's contour (if present, otherwise -1) interpolated interpolated interpolatedX interpolatedX interpolatedY interpolatedY isChanged bool isNull bool isPresent bool isReleased bool isSelectedAlone bool isTerminal bool isValid bool name object name nodeState nodeState position Coordinates of the node as QPointF preview preview refCnt object references count scv scv selected The selected flag smartAngleR smartAngleR smooth The smooth flag state state type The node type x The x coordinate of the node y The y coordinate of the node Attributes NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flNodeInfo ( object ) flNodeInfo representation Constructors: flNodeInfo() flNodeInfo(flObject) flNodeInfo(flNodeInfo) flNodeInfo(flNode, QTransform) flNodeInfo(flNode, flObject contour_info) flNodeInfo(flNode, flObject glyph_info, QTransform) flNodeInfo(flNode, flNodeInfo) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value breakContourExpanded (...) bool breakContourExpanded ([double extrapolate_d=0.5]) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) contour (...) flContour contour () createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getGlyphPoint (...) QPointF getGlyphPoint (bool round) getMappedNeighborsRect (...) QRectF getMappedNeighborsRect () getMappedPoint (...) QPointF getMappedPoint ([QPointF]) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getUpdateCanvasRect (...) QRectF getUpdateCanvasRect () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) isValid (...) bool isValid () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setGlyphPoint (...) setGlyphPoint (QPointF) setGlyphPointX (...) setGlyphPointX (double x) setGlyphPointY (...) setGlyphPointY (double y) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' shape (...) flShape shape () shapeInfo (...) flShapeInfo shapeInfo () tag (...) tag ([string]) toNodesInfo (...) list( flNodeInfo ) toNodesInfo (list( flNode )) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flNodeInfo createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors contourInfo flObject dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool name object name node flNode refCnt object references count transform transform matrix type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flObject ( object ) flObject representation Constructors: flObject() flObject(flObject) flObject(uint id) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} flObjectsList ( object ) flObjectsList doc Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value append (...) void append (T o) at (...) T at (int i) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clear (...) void clear () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object contains (...) bool contains (T o) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () indexOf (...) int indexOf (T o) initialHistoryState (...) initialHistoryIx() insert (...) void insert (int index, T o) isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeOne (...) void removeOne (T o) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' swap (...) void swap (int i0, int i1) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors count first hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool last list as list name object name refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} flObjectsList ( object ) flObjectsList doc Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value append (...) void append (T o) at (...) T at (int i) changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clear (...) void clear () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object contains (...) bool contains (T o) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () indexOf (...) int indexOf (T o) initialHistoryState (...) initialHistoryIx() insert (...) void insert (int index, T o) isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeOne (...) void removeOne (T o) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' swap (...) void swap (int i0, int i1) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors count first hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool last list as list name object name refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flPackage ( object ) flPackage representation Constructors: flPackage() flPackage(flObject) flPackage(fgFont) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value activateGlyph (...) activateGlyph ( flGlyph ) addAxis (...) string addAxis ( flAxis variable) addGlyph (...) addGlyph (fgGlyph / flGlyph ) addInstance (...) addInstance (const flInstance ) addMaster (...) string addMaster (string master_name, bool create_glyphs, flPackage source, string source_layer_name, bool copy_metrics, bool create_missing_glyphs[, flLocation location]) assignData (...) assignData (const flPackage ) autohintGlyphs (...) autohintGlyphs (QList < flGlyph > glyphs, bool make_hints) buildShapeDataNames (...) QSet buildShapeDataNames (objId exclude[, string layer_name]) can_interpolate (...) bool can_interpolate ([string master_name]) changed (...) changed () checkAxisName (...) string checkAxisName (string name) checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVariableName (...) string checkVariableName (string name) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearActiveGlyphs (...) clearActiveGlyphs () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearInstances (...) clearInstances () clearMasters (...) clearMasters (bool release) clone (...) Clone the object close (...) close (save=False) - Close the font collectNames (...) collectNames (StorageInfo * storage) collectShapes (...) QList < flShape >/Nothing collectShapes ( flShape , string layer_name) completeData (...) completeData ([bool fg_data = false]) convertZonesToGuidelines (...) convertZonesToGuidelines (flZones zonesT, flZones zonesB) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deleteGlyph (...) bool deleteGlyph (fgGlyph / flGlyph ) deleteGroups (...) deleteGroups (QSet ids, bool deleteDependentContent) ensureProteusData (...) ensureProteusData () family_zones (...) list( flZone ) & family_zones (bool top) featuresContainer (...) flObject featuresContainer () findAxis (...) flAxis /Nothing findAxis (string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) findAxisShort (...) flAxis /Nothing findAxisShort (string short_name) findFgId (...) flGlyph findFgId (uint id) findGroup (...) fg::GlyphGroup* findGroup (int _id) findName (...) flGlyph findName (string name) findNameId (...) flGlyph findNameId (uint fg_id) findNewName (...) string findNewName (string name) findShapeRoot (...) flGlyph findShapeRoot ( flShapeData shape_data) findStem (...) int findStem (string n, bool b, bool loose) findUnicode (...) flGlyph findUnicode (uint uni) findZone (...) int findZone (string n, bool b) flag (...) flag (uint f) generateGlyph (...) ( QList < GlyphComponent >, double width )/Nothing generateGlyph (string recipe, string layer_name, FontMetrics metrics, bool rtl) getAccentsInfo (...) list( AccentInfo )/Nothing getAccentsInfo ( flLayer , flPinPoint ) getAllGroups (...) list( (bool kernGroup, string groupName, int id, int mark, list(string glyphName) )/Nothing getAllGroups () getAxisName (...) string getAxisName (string short_name) getAxisShortName (...) string getAxisShortName (string name) getLayerName (...) string getLayerName () getMarkOffset (...) QPointF/Nothing getMarkOffset ( flGlyph g1, flGlyph g2) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getShapes (...) QList /Nothing getShapes (string filter[, string layer_name]) hasAxis (...) bool hasAxis (string name[, Qt::CaseSensitivity cs = Qt::CaseSensitive]) hasAxisShort (...) bool hasAxisShort (string short_name) hasGuides (...) bool hasGuides () hasHistoryState (...) hasHistoryState (uint history_ix) hasMaster (...) bool hasMaster (string name) hasName (...) bool hasName (string name[, bool relaxed=false]) hasPackageHistoryStorages (...) bool hasPackageHistoryStorages (uint to_history_ix) hasZones (...) bool hasZones () historyStack (...) flObject historyStack () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initItr (...) initItr (fgTTInterpreter itr) initItrGlyph (...) initItrGlyph (fgTTInterpreter itr, flGlyph glyph) initialHistoryState (...) initialHistoryIx() isComponent (...) ( flGlyph , QTransform) isComponent ( flShapeData [, string layer_name]) isEqual (...) isEqual ( flObject ) kerning (...) fgKerning kerning ([string master_name]) kerningContainer (...) flObject kerningContainer () location (...) flLocation & location ([string master_name]) makeShapeDataName (...) string makeShapeDataName (string name, objId _id, string layer_name) mastersContainer (...) flObject mastersContainer () optimizeShapeTransformations (...) bool optimizeShapeTransformations (QList < flObject > changes) optimizeStemData (...) (flStems stemsH, flStems stemsV) optimizeStemData (flStems stemsH, flStems stemsV) prepareAxes (...) QList < flAxis >/Nothing prepareAxes (QList < flPackage > packages, QList < flGlyph > glyphs) prepareFontGateData (...) prepareFontGateData (bool prepare_tth) preparePropertiesData (...) preparePropertiesData () projectPackageName (...) string projectPackageName () referencesCount (...) int referencesCount (uint shapeDataId) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeMaster (...) removeMaster (string name, bool remove_glyph_masters) removeProperty (...) removeProperty ('key') renameGlyph (...) bool renameGlyph (fgGlyph glyph, string name, bool rename) renameMaster (...) string renameMaster (string old_name, string new_name) replaceGlyph (...) bool replaceGlyph (fgGlyph target, fgGlyph newGlyph, bool rename) replaceShapeWithReference (...) flShape /Nothing replaceShapeWithReference ( flShape shape, bool process[, string layer_name]) resetPackage (...) resetPackage () resetStemData (...) (flStems stemsH, flStems stemsV) resetStemData (flStems stemsH, flStems stemsV) restoreHistoryState (...) restoreHistoryState (uint history_ix) setAxis (...) setAxis (const flAxis ) setFlag (...) setFlag (uint f [, bool value]) setLocation (...) setLocation ( flLocation location[, string master_name]) setMaster (...) setMaster (string name[, bool notify = false]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setUpm (...) setUpm (int upm, bool scale) set_ascender_locked (...) set_ascender_locked (bool b) set_capsHeight_locked (...) set_capsHeight_locked (bool b) set_descender_locked (...) set_descender_locked (bool b) set_interpolate (...) set_interpolate (bool b[, string master_name]) set_measurement_locked (...) set_measurement_locked (bool b) set_xHeight_locked (...) set_xHeight_locked (bool b) stems (...) list( flStem ) & stems (HintingDataType, bool top) store_font_info (...) store_font_info (fg::Package *package) store_hinting_data (...) store_hinting_data (fgPackage package) styleCode (...) unsigned char styleCode () tag (...) tag ([string]) title_name (...) string title_name ([bool force_full = true]) tthRenameStems (...) bool tthRenameStems (QMap map_h, QMap map_v) tthRenameZones (...) bool tthRenameZones (QMap map_top, QMap map_bottom) update (...) update () updateAxesMap (...) updateAxesMap () updateFontMetrics (...) updateFontMetrics () updateShapeReferenceCount (...) updateShapeReferenceCount () updateZonesFromGuidelines (...) updateZonesFromGuidelines ([flZones zonesT, flZones zonesB]) zones (...) list( flZone ) & zones (HintingDataType, bool top) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); hasInstaceFor (...) bool hasInstaceFor (fgFont) haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); readFromFile (...) flPackage /Nothing readFromFile (string[, StorageInfo*=0]) Descriptors allGuidelines QList ascender_value double axes QList bold bool capsHeight_value double caretOffset_value double cornerTension_value double counterAnchors int counterGuides int currentSearch QByteArray curveTension double curveTension_value double defaultMaster string descender_value double elidedName string family_zonesB list(flZone) family_zonesT list(flZone) ffn string fgId int fgPackage fgFont fileName string fontLayerOrder A list of layer names indicating order of the layers in the font glyphsCount int guidelines flObjectsList guidelinesHost GuidelinesHostIntf* hasChanges bool hasHistoryStates bool hasWeightAxis bool hasWidthAxis bool hinting flHintingParameters id object id info FontInfo inktrapLen_value double instanceAttributes flLayerAttributes instances QList interpolationCheckGeometry bool interpolationExtrapolate bool interpolationFlags int interpolationMutatorMath bool interpolationSortContours bool isChanged bool isKey bool isMaster bool isNull bool isPresent bool isReleased bool isValid bool italic bool italicAngle_value double keepShapeData bool lineGap_value double mask flLayer master string masters QList mastersCount int measurement_value double monospaced bool name object name note string other string panose string path The path to the source font file ps_stemsH list(flStem) ps_stemsV list(flStem) ps_zonesB list(flZone) ps_zonesT list(flZone) psn string refCnt object references count safeBottom_value double safeTop_value double sampleString string sgn string slantTransform QTransform slope string smartCornerParameters SmartCornerParameters stateObject flObject tfn string tsn string tt_stemsH list(flStem) tt_stemsV list(flStem) tt_zonesB list(flZone) tt_zonesT list(flZone) type object type underlinePosition_value double underlineThickness_value double upm float variables list(flPropertyDouble) variationPackages QList versionMajor int versionMinor int weight string weight_value double width string width_value double xHeight_value double Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flPaper ( object ) flPaper representation Constructors: flPaper() flPaper(flPaper) flPaper(flObject) flPaper(QBrush) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value activeGlyphInfo (...) flObject activeGlyphInfo () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getGlyphInfo (...) flObject getGlyphInfo ( flObject ) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' glyph (...) flObject glyph () glyphInfoAt (...) flObject glyphInfoAt (int index) glyphsBoundRect (...) QRectF glyphsBoundRect () hasActive (...) bool hasActive () hasContent (...) bool hasContent () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) package (...) flObject package () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setActiveGlyph (...) flObject setActiveGlyph ( flObject glyph) setFlag (...) setFlag (uint f [, bool value]) setPaperGlyph (...) flObject setPaperGlyph ( flObject glyph) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flPaper createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flPinPoint ( object ) flPinPoint representation Constructors: flPinPoint() flPinPoint(flPinPoint) flPinPoint(flObject) flPinPoint(QPointF[, PinPointStyle=FreePosition]) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) translate (...) translate (QPointF) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flPinPoint createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors anchor bool cloudEnabled bool hasChanges bool hasHistoryStates bool id object id isChanged bool isLatch bool isLatch() isNull bool isPresent bool isReleased bool isValid bool name object name point QPointF refCnt object references count style PinPointStyle style() type object type Attributes PinPointStyle = {'FreePosition': 1, 'ShapeBound': 2} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flPreferences ( object ) flPreferences representation Constructors: flPreferences() Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Static methods doInterpolate (...) bool doInterpolate () fontAuditTests (...) list(int) fontAuditTests () instance (...) flPreferences instance () namecaptionFont (...) QFont namecaptionFont (bool condensed) namecaptionFontFamilyName (...) string namecaptionFontFamilyName (bool condensed) namecaptionFontId (...) int namecaptionFontId (bool condensed) options2tracer_precision (...) double options2tracer_precision () options2tracer_smoothness (...) int options2tracer_smoothness () saveView (...) saveView () setEnabledHorizontalTextBlockAlignment (...) setEnabledHorizontalTextBlockAlignment (bool) setFontAuditTest (...) setFontAuditTest (int id, bool value) setGridDistances (...) setGridDistances (double x, double y) sourceMetricsSamples (...) QString sourceMetricsSamples () textBlockAlignmentCenter (...) bool textBlockAlignmentCenter () tracer2options_precision (...) double tracer2options_precision (double curve_fit) tracer2options_smoothness (...) double tracer2options_smoothness (int straighten_angle) unicode2text (...) QString unicode2text (uint unc) Descriptors colorEncoding QColor colorFontCell QColor colorGrid QColor colorKerning QColor colorMask QColor colorMaskGlobal QColor colorMaskLocal QColor colorMetrics QColor colorMetricsLines QColor colorWorkspace QColor convertDetectZoneTags bool convertPostScriptPrecision double convertTrueTypePrecision double convertTrueTypeShortCurves bool dataPath string dataPathDefault string deactivateShapeByClick bool defaultTexts QStringList developerBacklightUpdate bool developerLargeQuickHelp bool developerNoParameters bool developerOpenGL bool developerShowKeys bool drawFocusRect int dsigAlgorithm int dsigAuthority int dsigCertificatePath string dsigPassword string dsigPrivateKeyPath string dsigTimestamp bool dsigTimestampUrl string dsigUrl string dsigWrite bool editorAcrossGlyphs bool editorAcrossLayers bool editorAcrossShapes bool editorAlternativePencil bool editorAutoNonSpacing bool editorCenterGlyph bool editorClickSelectsCurve bool editorCloseDistance int editorCommandSelector bool editorCommandToggle bool editorContrast bool editorCoordinatesEditable bool editorCopyText bool editorCross bool editorCurvatureOpacity double editorCurvatureSize int editorDeleteBreaksContour bool editorDeleteSingleNode int editorDirectKerning bool editorDirectedShift bool editorDoubleClickToggle bool editorDragInactiveShape bool editorFastPreview bool editorFeatures bool editorFillOpacity int editorFillOpenContours bool editorFixedBCP bool editorFocus bool editorFollowItalicAngle bool editorForcedGrid bool editorForcedSnap bool editorFrameSelectsOnNodes bool editorGestures bool editorGuideHitDistance int editorHideMetricsTable bool editorHidePlaceholders bool editorInactiveHandles bool editorInactiveNodes int editorInactiveWireframe bool editorInertion bool editorInstanceLayer bool editorInterpolate bool editorInterpolateModifier bool editorKerningExclusive bool editorLayerDoubleClick bool editorListMaskLayers bool editorMatch bool editorMetricsDoubleClick bool editorMinHandle int editorMissingGlyphs bool editorModalPen bool editorNodeColor int editorNodeFontDefault int editorNodeFontHovered int editorNodeHitDistance int editorNodeSize int editorNoteExpanded bool editorNudge1 double editorNudge10 double editorOffsetDuplicate QPointF editorOffsetPaste QPointF editorOutlineThickness int editorPantographCurve int editorPantographNode int editorPasteArtwork int editorPasteContourVisual bool editorPenCorrection bool editorRoundCoordinates int editorRoundKerning bool editorRoundMetrics bool editorScrollBars bool editorSetMetrics2Frame bool editorShiftConstrains bool editorShiftExtendsSelection bool editorShowAngle bool editorShowCoordinates int editorShowNodeName int editorShowSb bool editorSidebarInactive int editorSnapDistance int editorSortMasters bool editorStrongRound bool editorTaperMode int editorToolsLocalized bool editorTopBottom bool editorUndoSelection bool editorUpdateAutoLayers bool editorUpdateMetricLinks bool editorUseItalicAngle int editorZoneNodes bool editorZoomAscender bool exportConflictMode int exportContent int exportDestinationFolder string exportDestinationMode int exportFlatten bool exportJsonFormatting bool exportOrganizeMode int exportPPM int exportSaveFolder string exportSaveSketchboard bool exportSaveVFJ bool exportSaveWorkspaceVFC uint exportSaveWorkspaceVFJ uint exportSessionVFJ bool featuresAddKerningClasses bool featuresAddOpenTypeClasses bool featuresAddTags bool featuresAddVirtualTags bool fontAbsentGray bool fontAllGlyphs bool fontAskFileName int fontAuditStemTolerance double fontCaption QFont fontCaptionEditable bool fontCaptionHeight int fontCaptionTop bool fontClose bool fontColoredCaption bool fontColoredItems bool fontCreateBackground bool fontCreateDynamic bool fontCreateGenerate bool fontDefaultEncoding string fontDefaultMode int fontDefaultSorting int fontDoubleClick bool fontDrawLines bool fontExtraIcons bool fontMarkOpacity int fontMetricsLimit int fontNamFileName string fontNamFileNameDefault string fontNameUnicode bool fontNewNames int fontNewWindow bool fontNoteIcon bool fontNoteText bool fontPropertyIcon bool fontShowGlyphMetrics bool fontTemplate QFont fontUnicodeName bool fontUnicodeUppercase bool fontsAutoSaveTimeInterval int generalActivatePanels bool generalBeta bool generalCheckUpdates bool generalRightMargin int generalSketchboard bool generalTabs int generalVirtualKeys bool gridDistanceX double gridDistanceY double gridItalicAngle bool gridOpacity double gridPointOpacity double gridSlant double groupsAlign int groupsColor QColor groupsContent string groupsDoubleClick bool groupsFill int groupsMask int groupsMasters bool groupsMetrics bool groupsOpacity int groupsShiftX double groupsShiftY double hintMaxH int hintMaxV int hintMinH int hintMinV int historyStoreSelection bool historyStoreViewPoint bool importCompileFeatures bool importComponents bool importConvertCurves bool importConvertNames int importDecompileFeatures bool importDecompileTables bool importDecompose bool importDetectGenius bool importDetectServant bool importExcludeTables QStringList importLockComposites bool importOpenFontWindow bool importRenameCID bool importSeparateMasters bool importTrueTypeShortCurves bool interpolateSmartRound bool kerningAuditExceptions double kerningAutoToleranceNegative double kerningAutoTolerancePositive double kerningPairs string lockFontGuidelines bool lockFontMetrics bool lockGrid bool lockGuidelines bool lockHints bool lockMask bool lockMaskGlobal bool lockMetrics bool lockPinPoints bool lockZones bool mastersBackgroundBrightness int mastersBarThickness int mastersKeepCompatible int mastersPreviewColor int match uint metricsFreeKerning bool metricsFreeMetrics bool metricsNudge1 double metricsNudge10 double metricsSamples string metricsSmartNavigation bool metricsToStroke bool openRestorePanels bool openRestoreWindows bool operationsOCR bool operationsPowerGuides int operationsSeparateDetectStrings bool operationsSeparateMergeOverlapped bool operationsSeparateMergeStacked bool operationsTesseractLanguages string operationsTracePrecision double operationsTraceSmoothness double panelFontSize int panelTabs int pasteEPS bool pasteIgnoreAppearance bool pathAutoSave string pythonClearContext bool qobject QObject saveBackupFolder bool saveConflictMode int showAnchorCloudSelected bool showHoveredCoordinates bool showNodePositionLarge bool showNodeStyle int showPinName bool showSelectionGlow bool showStemThickness int showTapeLine bool sketchboardAutoSaveTimeInterval int smartGuides bool snapToBounds bool snapToFontGuidelines bool snapToFontMetrics bool snapToGrid bool snapToGuidelines bool snapToHints bool snapToMask bool snapToMaskGlobal bool snapToMetrics bool snapToOutline bool snapToPinPoints bool snapToStems bool snapToZones bool stringIconLong string stringIconShort string stringSizeGlyphWaterfall string stringSizeTextWaterfall string templateFont QFont templateFontFamilyName string templateFontId int texts QStringList tthHintingFlag uint tthHintingTolerance uint tthPPM int tthRender int tthSamples string variationsInterpretLayerName uint viewAlternative bool viewAntialiasing bool workFont QFont workFontFamilyName string workFontId int zoomAscender int zoomDescender int zoomFactorKeyboard double zoomFactorWheel double zoomMode int zoomSize int Attributes ConflictOverwrite = 1 ConflictRename = 0 ConflictSkip = 2 ConflictTrash = 3 ContentCurrent = 0 ContentInstances = 2 ContentMasters = 3 ContentVisible = 1 CoordinanesNone = 0 CoordinatesAll = 2 CoordinatesSelected = 1 CurvatureLarge = 3 CurvatureMedium = 2 CurvatureSmall = 1 CurvatureSmart = 0 DestinationAsk = 0 DestinationFolder = 3 DestinationSource = 1 DrawFocusAlways = 1 DrawFocusNever = 0 DrawFocusPanels = 2 DsigAlgorithmMD5 = 0 DsigAlgorithmSHA1 = 1 DsigAuthorityCommercial = 1 DsigAuthorityDefault = 0 DsigAuthorityIndividual = 1 FontCaptionAuto = 0 FontCaptionLarge = 3 FontCaptionMedium = 2 FontCaptionSmall = 1 GroupsAlignCenter = 1 GroupsAlignLeft = 0 GroupsAlignRight = 2 GroupsFillAlways = 1 GroupsFillAuto = 0 GroupsFillNever = 2 GroupsMaskMask = 2 GroupsMaskNone = 1 GroupsMaskOutline = 0 InactiveNodeNone = 2 InactiveNodeNormal = 0 InactiveNodeSmall = 1 InterpretName = 128 InterpretWeight = 1 InterpretWidth = 2 KeepDraw = 4 KeepGuidesHints = 2 KeepInsertDelete = 1 KeepNone = 0 MastersBackground = 2 MastersBar = 1 MastersNone = 0 MatchAll = -1 MatchConvertSegment = 8 MatchDeleteNode = 1 MatchGuides = 16 MatchHints = 32 MatchInsertNode = 2 MatchInsertShape = 128 MatchPins = 64 MatchRenameNode = 4 MetricsHideAnchors = 64 MetricsHideFontGuides = 128 MetricsHideFontMetrics = 16 MetricsHideGlyphMetrics = 32 MetricsHideGrid = 8 MetricsHideGuides = 1 MetricsHideHints = 2 MetricsHideZones = 4 ModeCategories = 3 ModeCodepages = 2 ModeIndex = 5 ModeNames = 0 ModeNone = -1 ModeRanges = 1 ModeScripts = 4 NiceGlyphs = 2 NiceNone = 0 NicePdf = 3 NiceRobo = 1 NiceUni = 4 NodeNameAlways = 2 NodeNameCoordinates = 1 NodeNameNever = 0 NodeStyleAuto = 2 NodeStyleFlat = 1 NodeStyleFrame = 0 OrganizeNone = 0 OrganizePSN = 2 OrganizeProfile = 4 OrganizeSGN = 1 OrganizeTFN = 3 OrganizeTFN_Profile = 5 PasteAlign = 1 PasteAscender_Descender = 3 PasteCapsHeight_Baseline = 4 PasteCapsHeight_Descender = 5 PasteUPM_Descender = 2 PasteUnscaled = 0 PowerAll = 15 PowerFont = 2 PowerGlyph = 1 PowerMetrics = 8 PowerZones = 4 RainbowNoCenterline = 4 RainbowNoEdges = 2 RainbowNoRainbow = 8 RainbowNone = 0 RainbowShow = 1 RoundAll = 1 RoundNone = 0 RoundOn = 2 SaveFolderAsk = 0 SaveFolderFolder = 2 SaveFolderSource = 1 SaveWorkspacePanels = 2 SaveWorkspaceWindows = 1 SingleBreak = 0 SingleRemove = 1 TaperBody = 1 TaperEdge = 2 TaperEverywhere = 3 TaperNone = 0 ThicknessNormal = 1 ThicknessThick = 2 ThicknessThin = 0 TransformModeRotate = 0 TransformModeScale = 1 TransformModeSlant = 2 UseItalicAll = 2 UseItalicMetrics = 1 UseItalicNone = 0 ViewAnchorGroups = 7 ViewAnchors = 5 ViewBackground = 29 ViewContourDirection = 31 ViewCoordinates = 32 ViewCount = 42 ViewCounters = 35 ViewCurvature = 18 ViewFilledPreview = 28 ViewFontAudit = 19 ViewFontGuides = 1 ViewFontMetrics = 4 ViewGlobalMask = 16 ViewGlyphBar = 37 ViewGlyphGuides = 0 ViewGlyphMetrics = 3 ViewGrid = 11 ViewGroups = 36 ViewHandles = 24 ViewHintShadows = 30 ViewHints = 9 ViewInactiveGlyphs = 41 ViewKerningGroups = 8 ViewLocalMask = 17 ViewMasterLinks = 33 ViewMeasurement = 25 ViewMetricsTable = 26 ViewModeKerning = 4 ViewModeMetrics = 2 ViewModeOutline = 1 ViewModePreview = 0 ViewModeText = 8 ViewNodeLinks = 14 ViewNodes = 23 ViewPins = 6 ViewRulers = 27 ViewSelectionFrame = 38 ViewShapeConnection = 13 ViewShapeFrame = 12 ViewShapeGuides = 2 ViewShapeLinks = 15 ViewStickers = 40 ViewString = 34 ViewTapeLine = 20 ViewThickness = 39 ViewTunni = 21 ViewZones = 10 WindowsFontTabs = 2 WindowsTabs = 0 WindowsWindows = 1 ZoomModeLines = 2 ZoomModeMetrics = 0 ZoomModeSafe = 3 ZoomModeSize = 1 new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T renderBlackWhite = 1 renderClearType = 0 renderGrayScale = 2 class flProperty ( object ) flProperty representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name objectAttr QString refCnt object references count type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flPropertyDouble ( object ) flPropertyDouble representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors expression flExpression hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count type object type value double Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flPropertyPoint ( object ) flPropertyPoint representation Constructors: Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasExpression (...) bool hasExpression () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors expressionX expressionY hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name paramType ParameterType point QPointF refCnt object references count type object type Attributes ParameterType = {'HorzLine': 0, 'Point': 2, 'VertLine': 1} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flSearchInfo ( object ) flSearchInfo representation Constructors: flSearchInfo() flSearchInfo(flObject) flSearchInfo(flSearchInfo) flSearchInfo(QTransform) flSearchInfo(QTransform, flObject glyph_info) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count transform transform matrix type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flShape ( object ) flShape representation Constructors: flShape() flShape(flObject) flShape(flShapeData) flShape(flSticker) flShape(QImage) flShape(fgShape) flShape(flShapeBuilder) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value activateBuilder (...) activateBuilder () addContour (...) addContour ( flContour ) addContours (...) addContours (list( flContour )) appendAnchor (...) appendAnchor ( flAnchor ) | void appendAnchor ( flNode node, flObject guideline) applyTransform (...) applyTransform ([QTransform transform]) assign (...) assign (fgShape) assignStyle (...) assignStyle ( flShape ) bindDependencies (...) bindDependencies () canUngroup (...) bool canUngroup () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearContours (...) clearContours () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object cloneTopLevel (...) flShape cloneTopLevel () contains (...) bool contains (QPointF) containsInInclude (...) bool containsInInclude ( flShape | uint id) convertToFgShape (...) convertToFgShape (fgShape) copyToFgShape (...) copyToFgShape (fgShape) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() cutContour (...) (list( flContour ) inner, list( flContour ) outer)/Nothing cutContour ( flContour , QTransform) decomposite (...) decomposite () eject (...) eject ( flShape ) ejectTo (...) list( flShape ) ejectTo ([bool clone =true[, bool apply_tx =true]]) ensurePaths (...) ensurePaths () findNode (...) flNode findNode (QString) flag (...) flag (uint f) getActiveComposite (...) flShape /Nothing getActiveComposite () getActiveIncludeShape (...) flShape /Nothing getActiveIncludeShape () getAnchorForObject (...) flAnchor /Nothing getAnchorForObject ( flObject ) getAnchors (...) list( flAnchor )/Nothing getAnchors () getCompositesBounding (...) QRectF getCompositesBounding () getContours (...) list( flContour ) getContours () getNodeAt (...) flNode /Nothing getNodeAt (int index, flNode ::NodeType nodetype) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSelected (...) list( flContour )/Nothing getSelected (SelectionMode) getSquare (...) double getSquare () getTransformationPermissions (...) (bool enbl_horz, bool enbl_vert, bool enbl_rotation) getTransformationPermissions () hasHistoryState (...) hasHistoryState (uint history_ix) hasImage (...) bool hasImage (bool bitmap_only) hasSelected (...) bool hasSelected (SelectionMode) historyStates (...) historyStates (bool accepted_state) horzReflection (...) bool horzReflection () include (...) include (list( flShape ) | flShape , [ flLayer remove_from]) includeTo (...) includeTo (int ix, flShape ) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() inkBox (...) QRectF inkBox ([QTransform tx = QTransform()]) isCompatible (...) bool isCompatible ( flShape , bool strong) isEqual (...) isEqual ( flObject ) mergeTopComposite (...) mergeTopComposite () prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([ flObject ]) removeAnchor (...) removeAnchor ( flAnchor ) removeAnchorsForObject (...) removeAnchorsForObject ( flObject ) removeBackContour (...) removeBackContour () removeChild (...) removeChild ( flObject ) removeContour (...) removeContour ( flContour ) removeContours (...) removeContours (list( flContour )) removeProperty (...) removeProperty ('key') replaceInclude (...) replaceInclude ( flShape old_shape, flShape new_shape) resetInkBox (...) resetInkBox () resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) selectAllData (...) selectAllData () setFlag (...) setFlag (uint f [, bool value]) setIncludes (...) setIncludes (list( flShape )) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setReflected (...) setReflected (bool, bool) simpleShape (...) bool simpleShape () tag (...) tag ([string]) unselectAllNodes (...) unselectAllNodes () update (...) update () vertReflection (...) bool vertReflection () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flShape createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isShape (...) bool isShape ( flObject ) Descriptors active bool allSelectedData bool boundingBox QRectF brush QBrush closedPath QPainterPath contentLocked bool contours list(flContour) contoursCount int excluded bool fl_transform flTransform hasBody bool hasChanges bool hasComponents bool hasContours bool hasGlobalAnchoring bool hasHistoryStates bool hasPath bool hasSmartAngle bool haveActiveShape bool haveClosed bool haveData bool haveUnclosed bool id object id image QImage imagePtr QImage * includesList list(flShape) isChanged bool isComponent bool isComposite bool isEmpty bool isNull bool isPresent bool isReleased bool isUnbindedDependencies bool isUniform bool isValid bool name object name opacity double openedPath QPainterPath pen QPen refCnt object references count selected bool shapeBuilder flShapeBuilder shapeData flShapeData shapeType ShapeType sticker flSticker transform transform type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flShapeBuilder ( object ) flShapeBuilder representation Constructors: flShapeBuilder() flShapeBuilder(flShapeBuilder) flShapeBuilder(flObject) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivate (...) deactivate () flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getSmartNodes (...) list( flNode )/Nothing getSmartNodes () hasFeature (...) bool hasFeature (BuilderFeatures) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () init (...) init () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) setDestShape (...) setDestShape ( flShape ) setDestShapeData (...) setDestShapeData ( flShapeData ) setFlag (...) setFlag (uint f [, bool value]) setOwnerLayer (...) setOwnerLayer ( flObject ) setOwnerShapeData (...) setOwnerShapeData ( flObject ) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors canUngroup bool canUngroup() hasChanges bool hasHistoryStates bool haveResult bool haveResult() id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count title QString title() type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flShapeData ( object ) flShapeData representation Constructors: flShapeData() flShapeData(flObject) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value addContour (...) addContour ( flContour ) addContours (...) addContours (list( flContour )) arrangeContours (...) bool arrangeContours () assignContours (...) QMap flContour > assignContours (list( flContour )) | Nothing assignContours (fgShape) bindDependencies (...) bindDependencies () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearContours (...) clearContours () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearIncludesList (...) clearIncludesList () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' goDown (...) bool goDown ( flShape ) goUp (...) bool goUp ( flShape ) hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) includesList (...) list( flShape ) includesList () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) prepareTransformationData (...) prepareTransformationData () release (...) release () remove (...) remove ([ flObject ]) removeAnchor (...) removeAnchor ( flAnchor ) removeChild (...) removeChild ( flObject ) removeContour (...) removeContour ( flContour ) removeProperty (...) removeProperty ('key') resetTransformationData (...) resetTransformationData () restoreHistoryState (...) restoreHistoryState (uint history_ix) sendToBack (...) bool sendToBack ( flShape ) sendToFront (...) bool sendToFront ( flShape ) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' sortContours (...) sortContours (bool desc) tag (...) tag ([string]) takeIncludesList (...) list( flShape ) takeIncludesList () update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors builder flObject builder() componentGlyph string componentLayer string contours list(flContour) contours() hasChanges bool hasHistoryStates bool id object id includes flObjectsList includes() isChanged bool isComponent bool isComposite bool isNull bool isPresent bool isReleased bool isValid bool name object name note string refCnt object references count referenceCount int segments list(CurveEx) segments() shapeType ShapeType shapeType() type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flShapeInfo ( object ) flShapeInfo representation Constructors: flShapeInfo() flShapeInfo(flObject) flShapeInfo(flShapeInfo) flShapeInfo(flShape, flSearchInfo) flShapeInfo(flShape, QTransform) flShapeInfo(flShape, QTransform, QList composites) flShapeInfo(flShape, QTransform, flObject glyph_info, QList composites) flShapeInfo(flShape, flLayer, QTransform) flShapeInfo(flShape, flLayer, flObject glyph_info[, QTransform transform=QTransform()[, QList composites=QList ()]]) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value appendComposite (...) appendComposite ( flShapeInfo ) boundingBox (...) QRectF boundingBox () brectOnCanvas (...) QRectF brectOnCanvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object combine (...) combine (QTransform transform) compositesTransform (...) QTransform compositesTransform () contains (...) bool contains (QPointF canvas_pos[, double s=1]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() findNode (...) flNode findNode (QPointF) flag (...) flag (uint f) getContoursInfo (...) QList < flObject > getContoursInfo () getHitIncludedShape (...) flShapeInfo /Nothing getHitIncludedShape (QPointF canvas_pos, double scale[, bool to_bottom=false]) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasAboveComposites (...) bool hasAboveComposites () hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isContentLockedSibling (...) bool isContentLockedSibling () isEqual (...) isEqual ( flObject ) move (...) QRectF move (QPointF) ownerComposite (...) flShape ownerComposite () ownerCompositeInfo (...) flShapeInfo ownerCompositeInfo () pushFrontComposite (...) pushFrontComposite ( flShapeInfo ) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') replaceShape (...) replaceShape ( flShape ) restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) takeFirstComposite (...) flShapeInfo takeFirstComposite () takeLastComposite (...) flShapeInfo takeLastComposite () toCanvasTransform (...) QTransform toCanvasTransform () toGlyphTransform (...) QTransform toGlyphTransform () update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flShapeInfo createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors composites QList dist double dist glyphInfo flObject - glyph info hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool layer flLayer name object name refCnt object references count shape flShape transform transform matrix type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flSnapLine ( object ) flSnapLine representation Constructors: flSnapLine() flSnapLine(flObject) flSnapLine(flSnapLine) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (QPointF, uint mode) flag (...) flag (uint f) getHashCode (...) SnapHashCode getHashCode () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) offsetTo (...) QPointF offsetTo (QPointF, uint mode) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') reset (...) reset () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSnapFlag (...) setSnapFlag (uint role, uint snapFlags) setSnapFlagValue (...) setSnapFlagValue (uint role, bool) snapFlag (...) uint snapFlag (uint role) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isSnapLine (...) bool isSnapLine ( flObject ) Descriptors angle double angleMode SnapAngleMode center flNode centerPoint QPointF color QColor constraints QRectF expression QString extLinef QLineF extPosition double hasChanges bool hasColor bool hasExpression bool hasHistoryStates bool haveExtLine bool id object id isAbsoluteMarkerPos bool isChanged bool isExluded bool isHint bool isInUse bool isMeasurementLine bool isNull bool isPassive bool isPresent bool isReleased bool isShortGuideline bool isValid bool isZone bool length double linef QLineF markers list(flMarkerPoint) markersStructVersion int name object name refCnt object references count snapFlags uint style SnapObjectsStyle type object type vector flNode vectorPoint QPointF Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flSnapObject ( object ) flSnapObject representation Constructors: flSnapObject() flSnapObject(flObject) flSnapObject(flSnapObject) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (QPointF, uint mode) flag (...) flag (uint f) getHashCode (...) SnapHashCode getHashCode () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) offsetTo (...) QPointF offsetTo (QPointF, uint mode) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') reset (...) reset () restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSnapFlag (...) setSnapFlag (uint role, uint snapFlags) setSnapFlagValue (...) setSnapFlagValue (uint role, bool) snapFlag (...) uint snapFlag (uint role) tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isExluded bool isHint bool isInUse bool isMeasurementLine bool isNull bool isPassive bool isPresent bool isReleased bool isValid bool isZone bool name object name refCnt object references count snapFlags uint style SnapObjectsStyle type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flSnaps ( object ) snap object constants Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature setattr (...) x. __setattr__ ('name', value) < ==> x.name = value Attributes FastGuidelines = {'FastGuidelines_15': 15, 'FastGuidelines_45': 45, 'FastGuidelines_5': 5, 'FastGuidelines_90': 90} MarkerFlags = {'FillsShape': 16, 'LeftMetric': 32, 'RightMetric': 64} MarkerKey = {'AnyKeyMarker': 48, 'AutoMarker': 32, 'HandMarker': 16, 'UndefinedMarker': 0} SnapLineFlags = {'AbsoluteMarkersPos': 128, 'AscLine': 73792, 'Auto': 32, 'Basic': 0, 'Coordinate': 64, 'DscLine': 139328, 'Horizontal': 8192, 'HorzVert': 24576, 'NoOrdinates': 0, 'NullLine': 204864, ...} SnapMode = {'AllModes': 3, 'BeamAll': 2, 'NoMode': 0, 'Point': 1} SnapStyle = {'NoStyle': 0, 'StyleAutoSnapPoint': 1, 'StyleBackSnapPoint': 5, 'StyleBeamsSnapPoint': 6, 'StyleCloseSnapPoint': 3, 'StyleMetricSnapPoint': 4, 'StyleSnapPoint': 2} ViewMode = {'Hidden': 0, 'ShowAll': 3, 'ShowPermanent': 1, 'ShowTemporary': 2} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flStem ( object ) flStem representation Constructors: flStem() flStem(double _v[, QString _n = ]) flStem(fgStem) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value guaranteeName (...) guaranteeName () linear (...) int linear (double upm, int k) ppm (...) int ppm (double upm, int k) tagsSet (...) QSet /Nothing tagsSet () toStem (...) toStem (fgStem) Descriptors name string program QSet programText QString tags string value double Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flSticker ( object ) flSticker representation Constructors: flSticker() flSticker(flObject) flSticker(flSticker) flSticker(QString) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) move (...) move (QPointF) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors boundingBox QRectF boundingBox() hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count shape flShape shape() text QString textRect QRectF type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flTTHCommand ( object ) flTTHCommand representation Constructors: flTTHCommand() - default Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value isDelta (...) bool isDelta () isFinal (...) bool isFinal () isHorizontal (...) bool isHorizontal () isVertical (...) bool isVertical () nodesCount (...) int nodesCount () parametersCount (...) int parametersCount () stemIndex (...) int stemIndex () zoneIndex (...) int zoneIndex () Descriptors code int parameters QList point_names QList Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class flTextBlock ( object ) flTextBlock representation Constructors: flTextBlock() flTextBlock(flObject) flTextBlock(flTextBlock) flTextBlock(flPackage, flTextObject[, int font_size=42[, int formatMode=tbfText[, QRectF canvas_rect=QRectF(0,0, 800,600)]]]) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value activeObjectChanged (...) flNotifier activeObjectChanged () activeRowRect (...) QRectF activeRowRect () addFeature (...) addFeature (QString feature) changed (...) changed () charsCount (...) int charsCount () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() drawContent (...) drawContent (QPainter*, flCanvas , QRectF painted_nodes_screen_rect) features (...) list(QString) features () flag (...) flag (uint f) formatChanged (...) flNotifier formatChanged () getActiveGlyph (...) flGlyphInfo /Nothing getActiveGlyph () getAllGlyphs (...) list( flGlyphInfo )/Nothing getAllGlyphs ([int line_index = -1]) getCurrentPosition (...) QPointF getCurrentPosition () getGlyphAt (...) flGlyphInfo /Nothinf getGlyphAt (int glyph_index) getGlyphInfo (...) flGlyphInfo /Nothing getGlyphInfo ( fgSymbol , & ) getGlyphTransform (...) QTransform getGlyphTransform (int glyph_index) getGlyphsInLine (...) list( flGlyphInfo )/Nothing getGlyphsInLine ( flGlyphInfo | int lineIndex) getHitGlyph (...) flGlyphInfo /Nothing getHitGlyph (QPointF canvas_pos) getHitToShapeGlyph (...) flGlyphInfo /Nothing getHitToShapeGlyph (QPointF canvas_pos) getHitToShapes (...) list( flContourInfo )/Nothing getHitToShapes (QPointF canvas_pos) getIntersectsGlyphs (...) list( flGlyphInfo )/Nothing getIntersectsGlyphs (QRectF canvas_rect) getLineIndex (...) int getLineIndex (int glyph_index) getLineLocation (...) int getLineLocation ( flGlyphInfo glyph_info) getMouseHitNode (...) flNodeInfo /Nothing getMouseHitNode () getNearbyGlyphs (...) list( flGlyphInfo )/Nothing getNearbyGlyphs (QPointF text_block_point, double max_dist) getNextGlyphInLine (...) flGlyphInfo /Nothing getNextGlyphInLine (int glyph_index) getPrevGlyphInLine (...) flGlyphInfo /Nothing getPrevGlyphInLine (int glyph_index) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' getScvNode (...) flNodeInfo /Nothing getScvNode () getSelectedCharacters (...) fgSymbolList /Nothing getSelectedCharacters () getSelectedGlyphs (...) list( flGlyphInfo )/Nothing getSelectedGlyphs () glyphsBoundsOnCanvas (...) QRectF glyphsBoundsOnCanvas (EditMode) glyphsChanged (...) glyphsChanged () glyphsCount (...) int glyphsCount () hasHistoryState (...) hasHistoryState (uint history_ix) hasHoveredNodeEdit (...) bool hasHoveredNodeEdit () haveText (...) bool haveText () historyStates (...) historyStates (bool accepted_state) hoveredNodeEdit (...) flNodeInfo hoveredNodeEdit () hoveredNodeEditDetails (...) HoveredInfoDetails hoveredNodeEditDetails () independedAll (...) independedAll () init (...) init ( flCanvas & canvas) initialHistoryState (...) initialHistoryIx() isAltPressed (...) bool isAltPressed () isEqual (...) isEqual ( flObject ) isFramed (...) bool isFramed () isMetaPressed (...) bool isMetaPressed () keyPressEvent (...) bool keyPressEvent (QKeyEvent*) lastCharIndex (...) int lastCharIndex () lastIndex (...) int lastIndex () mouseDoubleClickEvent (...) bool mouseDoubleClickEvent (QMouseEvent*) mouseMoveEvent (...) bool mouseMoveEvent (QMouseEvent*) mousePressEvent (...) bool mousePressEvent (QMouseEvent*) mouseReleaseEvent (...) bool mouseReleaseEvent (QMouseEvent*) paintedNodesScreenRect (...) QRectF paintedNodesScreenRect () paragraphBlock (...) fgParagraphBlock paragraphBlock () parentTextBlock (...) flTextBlock parentTextBlock () reformat (...) reformat () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeFeature (...) removeFeature (QString feature) removeFeatures (...) removeFeatures () removeProperty (...) removeProperty ('key') removedFromCanvas (...) removedFromCanvas () restoreHistoryState (...) restoreHistoryState (uint history_ix) setActiveGlyph (...) setActiveGlyph ( flGlyphInfo ) setAltPressed (...) setAltPressed (bool b[, bool redraw = true]) setCheckMouseHoverNode (...) setCheckMouseHoverNode (bool) setExclusiveEditing (...) setExclusiveEditing (bool) setFeatures (...) setFeatures (list(QString), bool reformat) setFixedHeight (...) setFixedHeight (bool, bool) setFlag (...) setFlag (uint f [, bool value]) setFrameSize (...) setFrameSize (QSizeF canvas_size) setFrameWidth (...) setFrameWidth (double) setLeftMetric (...) setLeftMetric ( flGlyphInfo glyph_info, bool measurement) setMetaPressed (...) setMetaPressed (bool b[, bool redraw = true]) setParentTextBlock (...) setParentTextBlock ( flTextBlock ) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setRightMetric (...) setRightMetric (QPointF, flGlyphInfo glyph_info, bool measurement) setShowCursor (...) setShowCursor (bool) setShowNodes (...) setShowNodes (bool) setTextBlockMode (...) setTextBlockMode (EditMode text_block_mode[, QPoint viewport_pos=QPoint()]) symbolList (...) fgSymbolList symbolList () tag (...) tag ([string]) textFits (...) bool textFits () update (...) update () updateSymbols (...) updateSymbols () visibleShapes (...) list( flShape )/Nothing visibleShapes () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flTextBlock createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors editMode EditMode fontSize int formatMode int frameRect QRectF hasChanges bool hasHistoryStates bool id object id initiallySelected bool isChanged bool isNull bool isPresent bool isReleased bool isValid bool kerningProcessing bool layoutProcessing bool locked bool marksProcessing bool name object name package flPackage refCnt object references count script uint textObject flTextObject transform QTransform type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flTransform ( object ) flTransform representation Constructors: flTransform() flTransform(flTransform) flTransform(flObject) flTransform(QTransform) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isEqual (...) isEqual ( flObject ) map (...) QPointF map (QPointF) | QLineF map (QLineF) | double map (double) mapRect (...) QRectF mapRect (QRectF | QRect) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreHistoryState (...) restoreHistoryState (uint history_ix) setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' tag (...) tag ([string]) translate (...) void translate (QPointF | double x, double y) update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool name object name refCnt object references count scale double transform QTransform type object type Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flVectorNode ( object ) flVectorNode representation Constructors: flVectorNode(flObject) flVectorNode(flVectorNode) flVectorNode(flGuideLine, QPointF) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value angleTo (...) double angleTo (QPointF p) applyTransform (...) applyTransform (QTransform) canBeHobby (...) bool canBeHobby () canBeSmooth (...) bool canBeSmooth () canCollapse (...) bool canCollapse () canImprove (...) bool canImprove () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) checkVectors (...) bool checkVectors () clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearStored (...) clearStored () clone (...) Clone the object cloneMapped (...) flNode cloneMapped (QTransform) collapseHandles (...) bool collapseHandles () convertToCurve (...) bool convertToCurve ([bool smooth = false]) convertToCurves (...) bool convertToCurves () convertToLine (...) bool convertToLine () copyFrom (...) copyFrom (Node[, withSelected=False]) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() distanceTo (...) double distanceTo (Node/QPointF) flag (...) flag (uint f) getLines (...) (QLineF, QLineF)/None getLines () getOn (...) Node/None getOn () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) historyStates (...) historyStates (bool accepted_state) improve (...) bool improve () independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() isCorner (...) bool isCorner ([double a = 10.]) isCurve (...) bool isCurve () isEqual (...) isEqual ( flObject ) isEqualTo (...) bool isEqualTo (Node[, tolerance=0.1[, offset=QPointF(0, 0)]]) isExtreme (...) bool isExtreme (bool x[, bool open = true[, double limit = 0]]) isFirst (...) bool isFirst () isG2 (...) bool isG2 (double tolerance) isInternal (...) bool isInternal (bool clockwise) isInterpolated (...) bool isInterpolated (bool x) isLast (...) bool isLast () isOff (...) bool isOff () isOn (...) bool isOn () isSmartAngle (...) bool isSmartAngle () makeStart (...) bool makeStart () moveBy (...) moveBy (float dx, float dy[, bool round=false] nextNode (...) Node/None nextNode ([string nodeType= [, int searchDepth=1]]) pointG2 (...) QPointF/None pointG2 () prevNode (...) Node/None prevNode ([string nodeType= [, int searchDepth=1]]) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') restoreCoordinates (...) restoreCoordinates () restoreHistoryState (...) restoreHistoryState (uint history_ix) rotateBy (...) rotateBy (valueDegree[, QPointF origin=(0, 0)]) round (...) round () - Round the node's coordinate scaleBy (...) scaleBy (valueXY | (valueX, valueY)[, QPointF origin=(0, 0)]) setExtraLast (...) setExtraLast (bool) setFlag (...) setFlag (uint f [, bool value]) setNextSmooth (...) setNextSmooth (QPointF base) setPosition (...) void setPosition (QPointF) setPositionMode (...) void setPositionMode (Mode m) setPrevSmooth (...) setPrevSmooth (QPointF base) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setSmartAngleEnbl (...) bool setSmartAngleEnbl (bool) setSmartSharp (...) bool setSmartSharp ([double tension = 0.6]) skewBy (...) skewBy (valueDegreeX | (valueDegreX, valueDegreY)[, QPointF origin=(0, 0)]) smartMove (...) list(uint) smartMove (offset) smartSetXY (...) smartSetXY (QPointF) storeCoordinates (...) storeCoordinates () storeTestParameters (...) storeTestParameters () tag (...) tag ([string]) transformBy (...) transformBy (QTransform tx[, QPointF origin=(0, 0)]) update (...) update () updateG2 (...) bool updateG2 () updateSmooth (...) updateSmooth ([bool extended_neibh=true]) Static methods cloneObject (...) flObject cloneObject (const flObject & ); createInstance (...) flVectorNode createInstance () createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceType (...) int instanceType (); isVectorNode (...) bool isVectorNode ( flObject ) Descriptors angle angle contour The parent Contour or None if not present g2 g2 guideline flGuideLine hasChanges bool hasHistoryStates bool hobby hobby id object id index The index of the node in parent's contour (if present, otherwise -1) interpolated interpolated interpolatedX interpolatedX interpolatedY interpolatedY isChanged bool isNull bool isPresent bool isReleased bool isSelectedAlone bool isTerminal bool isValid bool mode uint name object name nodeState nodeState position Coordinates of the node as QPointF preview preview refCnt object references count scv scv selected The selected flag smartAngleR smartAngleR smooth The smooth flag state state type The node type x The x coordinate of the node y The y coordinate of the node Attributes Mode = {'PosAbsolute': 2, 'PosHorzDir': 4, 'PosMask': 15, 'PosParametric': 1, 'PosVertDir': 8} NodeKind = {'ExtraLast': 16384, 'First': 16, 'G2': 4096, 'Hobby': 8192, 'HotSpot': 2048, 'InterpolatedX': 256, 'InterpolatedY': 512, 'KindMask': 65535, 'None': 0, 'Preview': 64, ...} NodeType = {'AnyNodeMask': 7, 'Curve': 4, 'Off': 2, 'On': 1} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flVisualItem ( object ) flVisualItem representation Constructors: flVisualItem() flVisualItem(flVisualItem) flVisualItem(flObject) flVisualItem(objId id) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value acceptEvents (...) int acceptEvents () activateEditor (...) void activateEditor (QPointF canvas_pos) addedToCanvas (...) void addedToCanvas ( flCanvas ) adjustCanvasPosition (...) QPointF adjustCanvasPosition (QPointF) adjustPosition (...) QPointF | double adjustPosition (QPointF | double) appendDecorator (...) void appendDecorator ( flVisualItem , DecoratorOrder) boundingRectOnCanvas (...) QRectF boundingRectOnCanvas ( canvas (...) flCanvas canvas () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearDecorators (...) clearDecorators () clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clearItems (...) clearItems () clone (...) Clone the object contain (...) bool contain (QPointF canvas_pos) containsItem (...) bool containsItem ( flVisualItem ) createHistoryState (...) createHistoryState (uint history_ix) currentHistoryState (...) currentHistoryIx() deactivateEditor (...) deactivateEditor () distanceTo (...) double distanceTo (QPointF) flag (...) flag (uint f) getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' hasHistoryState (...) hasHistoryState (uint history_ix) haveCanvas (...) bool haveCanvas () haveEditor (...) bool haveEditor (QPointF canvas_pos) hide (...) hide () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () initialHistoryState (...) initialHistoryIx() invselect (...) invselect () isEqual (...) isEqual ( flObject ) isSelectable (...) bool isSelectable () isStableSelect (...) bool isStableSelect () itemScale (...) double itemScale () mapCanvasDistanceToItem (...) QPointF mapCanvasDistanceToItem (QPointF) mapCanvasToItem (...) QPointF | QRectF mapCanvasToItem (QPointF | QRectF) mapItemToCanvas (...) QPointF | QRectF mapItemToCanvas (QPointF | QRectF) metricStep (...) double metricStep () move (...) void move (QPointF) paint (...) void paint (QPainter*) preview (...) preview () referencePoint (...) QPointF referencePoint () release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeDecorator (...) void removeDecorator ( flVisualItem ) removeItem (...) void removeItem ( flVisualItem ) removeProperty (...) removeProperty ('key') removedFromCanvas (...) removedFromCanvas () restoreHistoryState (...) restoreHistoryState (uint history_ix) select (...) select () setFlag (...) setFlag (uint f [, bool value]) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' show (...) show () tag (...) tag ([string]) unselect (...) unselect () update (...) update () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instanceAcceptEvents (...) int instanceAcceptEvents () instanceType (...) int instanceType (); Descriptors hasChanges bool hasHistoryStates bool hovered bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool locked bool name object name opacity double owner flVisualItem refCnt object references count selected bool transform QTransform type object type visible bool Attributes Listeners = {'ClickListener': 8, 'DragListener': 4, 'HoverListener': 1, 'MoveListener': 2} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flWorkspace ( object ) flWorkspace representation Constructors: flWorkspace() flWorkspace(flWorkspace) flWorkspace(flObject) flWorkspace(objId id) flWorkspace(QString title) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y init (...) x. __init__ (...) initializes x; see help( type (x)) for signature le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value activateEditor (...) activateEditor ( flVisualItem , QPointF canvas_pos) activateNext (...) activateNext () activatePrev (...) activatePrev () addFamilyMembers (...) bool addFamilyMembers (QList < flPackage > [, bool match_subfamily = false]) addPackage (...) addPackage ( flPackage ) attachCanvas (...) attachCanvas ( flCanvas ) blockUpdate (...) blockUpdate ([int time = 2000]) canvases (...) QList < flObject > canvases () changed (...) changed () checkInitHistoryState (...) checkInitHistoryState (uint history_ix) clearAboveHistory (...) clearAboveHistory (uint history_ix) clearFlag (...) clearFlag (uint f) clearFlags (...) clearFlags () clone (...) Clone the object closePackage (...) closePackage ( flPackage ) closeProject (...) closeProject () convertMouseEvent (...) flMouseEvent convertMouseEvent (QEvent | QMouseEvent, QPoint) createHistoryState (...) createHistoryState (uint history_ix) createNewProject (...) createNewProject () currentHistoryState (...) currentHistoryIx() deactivateEditor (...) deactivateEditor () destroyCanvas (...) destroyCanvas ( flCanvas ) doZoomIn (...) doZoomIn ([double s = 2.0]) doZoomOut (...) doZoomOut ([double s = 0.5]) exportCurrentFont (...) exportCurrentFont () exportFont (...) exportFont ( flPackage , ExportControl ) exportTo (...) bool exportTo (QString filename, QString format=['EPS' | 'JPG' | 'PDF' | 'PNG' | 'SVG']) findPackageId (...) flPackage findPackageId (uint id) flag (...) flag (uint f) getActiveCanvas (...) flCanvas /Nothing getActiveCanvas () getActiveTextBlock (...) flTextBlockItem/Nothing getActiveTextBlock () getBoundingRect (...) QRectF getBoundingRect () getCanvasForViewport (...) flCanvas /Nothing getCanvasForViewport (QWidget*) getCanvasUnderCursor (...) flCanvas getCanvasUnderCursor () getProperties (...) Get object 's properties list getProperty (...) getProperty ('key') - get object property by 'key' or number getPropertyFloat (...) getPropertyFloat ('key') - get float object property by 'key' getPropertyInt (...) getPropertyInt ('key') - get int object property by 'key' guidelinesUpdater (...) flNotifier guidelinesUpdater () hasHistoryState (...) hasHistoryState (uint history_ix) hasPackage (...) bool hasPackage (const flPackage ) haveActiveEditor (...) bool haveActiveEditor () historyStates (...) historyStates (bool accepted_state) independedAll (...) independedAll () init (...) init () initialHistoryState (...) initialHistoryIx() isActiveCanvas (...) bool isActiveCanvas (const flCanvas ) isEqual (...) isEqual ( flObject ) isRulersEnabled (...) bool isRulersEnabled () packages (...) QList < flObject > & packages () previewRender (...) bool previewRender () readProject (...) bool readProject (const QString) release (...) release () remove (...) remove ([ flObject ]) removeChild (...) removeChild ( flObject ) removeProperty (...) removeProperty ('key') resetToolCursor (...) resetToolCursor () restoreHistoryState (...) restoreHistoryState (uint history_ix) saveProject (...) saveProject ([QString]) | bool saveProject (QString, QList , QString ui_state setActiveCanvas (...) setActiveCanvas ( flCanvas ) setActiveSketchboard (...) setActiveSketchboard () setAutoMode (...) setAutoMode () setFlag (...) setFlag (uint f [, bool value]) setFocusToCanvas (...) setFocusToCanvas ( flCanvas ) setPreviewRender (...) setPreviewRender (bool) setProperty (...) setProperty ('key', value) - set object property by 'key' or number setPropertyFloat (...) setPropertyFloat ('key', value) - set float object property by 'key' setPropertyInt (...) setPropertyInt ('key', value) - set int object property by 'key' setRenderMode (...) setRenderMode (RenderMode) setRulers (...) setRulers (bool enabled) setToolBrush (...) setToolBrush () setToolBucket (...) setToolBucket () setToolCursor (...) setToolCursor (CursorId) setToolEditor (...) setToolEditor () setToolEllipse (...) setToolEllipse () setToolGuidelines (...) setToolGuidelines () setToolKnife (...) setToolKnife () setToolMagnet (...) setToolMagnet () setToolMetrics (...) setToolMetrics () setToolOptimizer (...) setToolOptimizer () setToolPen (...) setToolPen () setToolPencil (...) setToolPencil () setToolRectangle (...) setToolRectangle () setToolRotate (...) setToolRotate () setToolScale (...) setToolScale () setToolScissors (...) setToolScissors () setToolShape (...) setToolShape () setToolSlant (...) setToolSlant () setToolSmartPen (...) setToolSmartPen () setToolText (...) setToolText () setToolTransform (...) setToolTransform () showFocus (...) bool showFocus () showSmallItems (...) bool showSmallItems () tag (...) tag ([string]) turnTextModeOff (...) turnTextModeOff () unblockUpdate (...) unblockUpdate () update (...) update () updateActiveViewport (...) updateActiveViewport () weAreOnPaper (...) bool weAreOnPaper () Static methods cloneObject (...) flObject cloneObject (const flObject & ); createObject (...) flObject /Nothing createObject (int); haveObject (...) bool haveObject (uint); instance (...) flWorkspace instance () instanceType (...) int instanceType (); Descriptors activeFontPanel QWidget* activeTextMode EditMode currentFontPanel QWidget* currentGlyph flGlyphInfo currentPackage flPackage cursorId CursorId defaultFontSize int hasChanges bool hasHistoryStates bool id object id isChanged bool isNull bool isPresent bool isReleased bool isValid bool mainWindow QWidget* name object name paintBrush PaintBrush paintColor QColor pen QPen penColor QColor refCnt object references count signedObjects QMap sketchboard flCanvas, bool new_paper type object type uiState QString Attributes RenderMode = {'RenderIfActive': 0, 'RenderIfMaximized': 1} new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T flObjectFlags = {'ofAnchored': 64, 'ofChanged': 2, 'ofHistory': 128, 'ofIgnore': 8, 'ofIgnoreChanges': 4, 'ofPassive': 16, 'ofReleased': 1, 'ofSlowUpdate': 32} class flZone ( object ) flZone representation Constructors: flZone() flZone(double p, double w[, QString _n = ]) flZone(flZone) Methods delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name init (...) x. __init__ (...) initializes x; see help(type(x)) for signature repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value guaranteeName (...) guaranteeName (bool top) tagsSet (...) QSet /Nothing tagsSet () toZone (...) toZone (fgZone, bool top) Descriptors name string position double program QSet programText QString tags string width double Attributes new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T YPanelManager fontlab.YPanelManager = class YPanelManager (PythonQt.PythonQtInstanceWrapper) Method resolution order: YPanelManager PythonQt.PythonQtInstanceWrapper __builtin__.object Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes blockSignals = unbound qt slot blockSignals of YPanelManager type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of YPanelManager type X. childEvent (a, b) children = unbound qt slot children of YPanelManager type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object connect = unbound qt slot connect of YPanelManager type X. connect (a, b, c, d, e) -> bool customEvent = unbound qt slot py_q_customEvent of YPanelManager type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of YPanelManager type X. deleteLater () desktopClientRectChanged = unbound qt signal desktopClientRectChanged of YPanelManager type destroyed = unbound qt signal destroyed of YPanelManager type disconnect = unbound qt slot disconnect of YPanelManager type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelManager type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of YPanelManager type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelManager type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of YPanelManager type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of YPanelManager type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of YPanelManager type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of YPanelManager type X. findChildren (a, b, c) -> tuple help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name installEventFilter = unbound qt slot installEventFilter of YPanelManager type X. installEventFilter (a, b) isSignalConnected = unbound qt slot isSignalConnected of YPanelManager type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of YPanelManager type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of YPanelManager type X. isWindowType (a) -> bool killTimer = unbound qt slot killTimer of YPanelManager type X. killTimer (a, b) metaObject = unbound qt slot metaObject of YPanelManager type X. metaObject (a) -> PythonQt.QtCore.QMetaObject moveToThread = unbound qt slot moveToThread of YPanelManager type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of YPanelManager type panelClosed = unbound qt signal panelClosed of YPanelManager type parent = unbound qt slot parent of YPanelManager type X. parent (a) -> PythonQt.private.QObject property = unbound qt slot property of YPanelManager type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of YPanelManager type X. removeEventFilter (a, b) sender = unbound qt slot sender of YPanelManager type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of YPanelManager type X. senderSignalIndex (a) -> int setObjectName = unbound qt slot setObjectName of YPanelManager type X. setObjectName (a, b) setParent = unbound qt slot setParent of YPanelManager type X. setParent (a, b) setProperty = unbound qt slot setProperty of YPanelManager type X. setProperty (a, b, c) -> bool showContextMenu = unbound qt signal showContextMenu of YPanelManager type signalsBlocked = unbound qt slot signalsBlocked of YPanelManager type X. signalsBlocked (a) -> bool startTimer = unbound qt slot startTimer of YPanelManager type X. startTimer (a, b, c) -> int thread = unbound qt slot thread of YPanelManager type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of YPanelManager type X. timerEvent (a, b) toolbarClosed = unbound qt signal toolbarClosed of YPanelManager type toolbarOpened = unbound qt signal toolbarOpened of YPanelManager type tr = unbound qt slot tr of YPanelManager type X. tr (a, b, c, d) -> str Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __init__ (...) x. __init__ (...) initializes x; see help (type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T blockSignals fontlab.YPanelManager.blockSignals = unbound qt slot blockSignals of YPanelManager type childEvent fontlab.YPanelManager.childEvent = unbound qt slot py_q_childEvent of YPanelManager type children fontlab.YPanelManager.children = unbound qt slot children of YPanelManager type className fontlab.YPanelManager.className = className (...) Return the classname of the object connect fontlab.YPanelManager.connect = unbound qt slot connect of YPanelManager type customEvent fontlab.YPanelManager.customEvent = unbound qt slot py_q_customEvent of YPanelManager type delete fontlab.YPanelManager.delete = delete (...) Deletes the given C++ object deleteLater fontlab.YPanelManager.deleteLater = unbound qt slot deleteLater of YPanelManager type disconnect fontlab.YPanelManager.disconnect = unbound qt slot disconnect of YPanelManager type dumpObjectInfo fontlab.YPanelManager.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelManager type dumpObjectTree fontlab.YPanelManager.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelManager type dynamicPropertyNames fontlab.YPanelManager.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelManager type event fontlab.YPanelManager.event = unbound qt slot py_q_event of YPanelManager type eventFilter fontlab.YPanelManager.eventFilter = unbound qt slot py_q_eventFilter of YPanelManager type findChild fontlab.YPanelManager.findChild = unbound qt slot findChild of YPanelManager type findChildren fontlab.YPanelManager.findChildren = unbound qt slot findChildren of YPanelManager type help fontlab.YPanelManager.help = help (...) Shows the help of available methods for this class inherits fontlab.YPanelManager.inherits = inherits (...) Returns if the class inherits or is of given type name installEventFilter fontlab.YPanelManager.installEventFilter = unbound qt slot installEventFilter of YPanelManager type isSignalConnected fontlab.YPanelManager.isSignalConnected = unbound qt slot isSignalConnected of YPanelManager type isWidgetType fontlab.YPanelManager.isWidgetType = unbound qt slot isWidgetType of YPanelManager type isWindowType fontlab.YPanelManager.isWindowType = unbound qt slot isWindowType of YPanelManager type killTimer fontlab.YPanelManager.killTimer = unbound qt slot killTimer of YPanelManager type metaObject fontlab.YPanelManager.metaObject = unbound qt slot metaObject of YPanelManager type moveToThread fontlab.YPanelManager.moveToThread = unbound qt slot moveToThread of YPanelManager type parent fontlab.YPanelManager.parent = unbound qt slot parent of YPanelManager type property fontlab.YPanelManager.property = unbound qt slot property of YPanelManager type removeEventFilter fontlab.YPanelManager.removeEventFilter = unbound qt slot removeEventFilter of YPanelManager type sender fontlab.YPanelManager.sender = unbound qt slot sender of YPanelManager type senderSignalIndex fontlab.YPanelManager.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelManager type setObjectName fontlab.YPanelManager.setObjectName = unbound qt slot setObjectName of YPanelManager type setParent fontlab.YPanelManager.setParent = unbound qt slot setParent of YPanelManager type setProperty fontlab.YPanelManager.setProperty = unbound qt slot setProperty of YPanelManager type signalsBlocked fontlab.YPanelManager.signalsBlocked = unbound qt slot signalsBlocked of YPanelManager type startTimer fontlab.YPanelManager.startTimer = unbound qt slot startTimer of YPanelManager type thread fontlab.YPanelManager.thread = unbound qt slot thread of YPanelManager type timerEvent fontlab.YPanelManager.timerEvent = unbound qt slot py_q_timerEvent of YPanelManager type tr fontlab.YPanelManager.tr = unbound qt slot tr of YPanelManager type YPanelWidget fontlab.YPanelWidget = class YPanelWidget (PythonQt.PythonQtInstanceWrapper) Method resolution order: YPanelWidget PythonQt.PythonQtInstanceWrapper __builtin__.object Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes DrawChildren = 2 DrawWindowBackground = 1 IgnoreMask = 4 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of YPanelWidget type X. actionEvent (a, b) actions = unbound qt slot actions of YPanelWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of YPanelWidget type X. activateWindow (a) addAction = unbound qt slot addAction of YPanelWidget type X. addAction (a, b) addActions = unbound qt slot addActions of YPanelWidget type X. addActions (a, b) adjustSize = unbound qt slot adjustSize of YPanelWidget type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of YPanelWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of YPanelWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of YPanelWidget type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of YPanelWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of YPanelWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of YPanelWidget type X. childEvent (a, b) children = unbound qt slot children of YPanelWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clearFocus = unbound qt slot clearFocus of YPanelWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of YPanelWidget type X. clearMask (a) close = unbound qt slot close of YPanelWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of YPanelWidget type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of YPanelWidget type X. colorCount (a) -> int connect = unbound qt slot connect of YPanelWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of YPanelWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of YPanelWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of YPanelWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None createWinId = unbound qt slot createWinId of YPanelWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of YPanelWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of YPanelWidget type customEvent = unbound qt slot py_q_customEvent of YPanelWidget type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of YPanelWidget type X. deleteLater () depth = unbound qt slot depth of YPanelWidget type X. depth (a) -> int destroy = unbound qt slot destroy of YPanelWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of YPanelWidget type devType = unbound qt slot py_q_devType of YPanelWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of YPanelWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of YPanelWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of YPanelWidget type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of YPanelWidget type X. disconnect (a, b, c, d) -> bool dragEnterEvent = unbound qt slot py_q_dragEnterEvent of YPanelWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of YPanelWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of YPanelWidget type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of YPanelWidget type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of YPanelWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelWidget type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of YPanelWidget type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of YPanelWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of YPanelWidget type X. enterEvent (a, b) event = unbound qt slot py_q_event of YPanelWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of YPanelWidget type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of YPanelWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of YPanelWidget type X. findChildren (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of YPanelWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of YPanelWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of YPanelWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of YPanelWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of YPanelWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of YPanelWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of YPanelWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of YPanelWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of YPanelWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of YPanelWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of YPanelWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of YPanelWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of YPanelWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of YPanelWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of YPanelWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of YPanelWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of YPanelWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of YPanelWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of YPanelWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of YPanelWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of YPanelWidget type X. hide () hideEvent = unbound qt slot py_q_hideEvent of YPanelWidget type X. hideEvent (a, b) inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of YPanelWidget type X. initPainter (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of YPanelWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of YPanelWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of YPanelWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of YPanelWidget type X. insertActions (a, b, c) installEventFilter = unbound qt slot installEventFilter of YPanelWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of YPanelWidget type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of YPanelWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of YPanelWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of YPanelWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of YPanelWidget type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of YPanelWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of YPanelWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of YPanelWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of YPanelWidget type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of YPanelWidget type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of YPanelWidget type X. isSignalConnected (a, b) -> bool isVisible = unbound qt slot isVisible of YPanelWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of YPanelWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of YPanelWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of YPanelWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of YPanelWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of YPanelWidget type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of YPanelWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of YPanelWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of YPanelWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of YPanelWidget type X. killTimer (a, b) layout = unbound qt slot layout of YPanelWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of YPanelWidget type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of YPanelWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of YPanelWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of YPanelWidget type X. lower () mapFrom = unbound qt slot mapFrom of YPanelWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of YPanelWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of YPanelWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of YPanelWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of YPanelWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of YPanelWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of YPanelWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of YPanelWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of YPanelWidget type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of YPanelWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of YPanelWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of YPanelWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of YPanelWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of YPanelWidget type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of YPanelWidget type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of YPanelWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of YPanelWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of YPanelWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of YPanelWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of YPanelWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of YPanelWidget type overrideWindowFlags = unbound qt slot overrideWindowFlags of YPanelWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of YPanelWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of YPanelWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of YPanelWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of YPanelWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of YPanelWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of YPanelWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of YPanelWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of YPanelWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of YPanelWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of YPanelWidget type X. property (a, b) -> object raise = unbound qt slot raise of YPanelWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of YPanelWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of YPanelWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of YPanelWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of YPanelWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of YPanelWidget type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of YPanelWidget type X. removeEventFilter (a, b) render = unbound qt slot render of YPanelWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of YPanelWidget type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of YPanelWidget type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of YPanelWidget type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of YPanelWidget type X. restoreGeometry (a, b) -> bool saveGeometry = unbound qt slot saveGeometry of YPanelWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of YPanelWidget type X. scroll (a, b, c, d) sender = unbound qt slot sender of YPanelWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of YPanelWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of YPanelWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of YPanelWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of YPanelWidget type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of YPanelWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of YPanelWidget type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of YPanelWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of YPanelWidget type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of YPanelWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of YPanelWidget type X. setContextMenuPolicy (a, b) setCursor = unbound qt slot setCursor of YPanelWidget type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of YPanelWidget type X. setDisabled (a) setEnabled = unbound qt slot setEnabled of YPanelWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of YPanelWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of YPanelWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of YPanelWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of YPanelWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of YPanelWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of YPanelWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of YPanelWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of YPanelWidget type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of YPanelWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of YPanelWidget type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of YPanelWidget type X. setHidden (a) setInputMethodHints = unbound qt slot setInputMethodHints of YPanelWidget type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of YPanelWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of YPanelWidget type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of YPanelWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of YPanelWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of YPanelWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of YPanelWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of YPanelWidget type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of YPanelWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of YPanelWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of YPanelWidget type X. setMinimumWidth (a, b) setMouseTracking = unbound qt slot setMouseTracking of YPanelWidget type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of YPanelWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of YPanelWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of YPanelWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of YPanelWidget type X. setProperty (a, b, c) -> bool setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of YPanelWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of YPanelWidget type X. setShortcutEnabled (a, b, c) setSizeIncrement = unbound qt slot setSizeIncrement of YPanelWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of YPanelWidget type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of YPanelWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of YPanelWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of YPanelWidget type X. setStyleSheet (a) setTabOrder = unbound qt slot static_QWidget_setTabOrder of YPanelWidget type X. setTabOrder (a, b) setToolTip = unbound qt slot setToolTip of YPanelWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of YPanelWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of YPanelWidget type X. setUpdatesEnabled (a, b) setVisible = unbound qt slot py_q_setVisible of YPanelWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of YPanelWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of YPanelWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of YPanelWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of YPanelWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of YPanelWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of YPanelWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of YPanelWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of YPanelWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of YPanelWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of YPanelWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of YPanelWidget type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of YPanelWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of YPanelWidget type X. show () showEvent = unbound qt slot py_q_showEvent of YPanelWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of YPanelWidget type X. showFullScreen () showMaximized = unbound qt slot showMaximized of YPanelWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of YPanelWidget type X. showMinimized () showNormal = unbound qt slot showNormal of YPanelWidget type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of YPanelWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of YPanelWidget type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of YPanelWidget type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of YPanelWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabletEvent = unbound qt slot py_q_tabletEvent of YPanelWidget type X. tabletEvent (a, b) tabletTracking = None testAttribute = unbound qt slot testAttribute of YPanelWidget type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of YPanelWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of YPanelWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of YPanelWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of YPanelWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of YPanelWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of YPanelWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of YPanelWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of YPanelWidget type X. unsetLocale (a) update = unbound qt slot update of YPanelWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of YPanelWidget type X. updateGeometry (a) updatesEnabled = None visible = None visibleRegion = unbound qt slot visibleRegion of YPanelWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of YPanelWidget type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of YPanelWidget type X. widthMM (a) -> int winId = unbound qt slot winId of YPanelWidget type X. winId (a) window = unbound qt slot window of YPanelWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of YPanelWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of YPanelWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of YPanelWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of YPanelWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of YPanelWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of YPanelWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of YPanelWidget type windowType = unbound qt slot windowType of YPanelWidget type X. windowType (a) x = None y = None Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __init__ (...) x. __init__ (...) initializes x; see help (type(x)) for signature __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T actionEvent fontlab.YPanelWidget.actionEvent = unbound qt slot py_q_actionEvent of YPanelWidget type actions fontlab.YPanelWidget.actions = unbound qt slot actions of YPanelWidget type activateWindow fontlab.YPanelWidget.activateWindow = unbound qt slot activateWindow of YPanelWidget type addAction fontlab.YPanelWidget.addAction = unbound qt slot addAction of YPanelWidget type addActions fontlab.YPanelWidget.addActions = unbound qt slot addActions of YPanelWidget type adjustSize fontlab.YPanelWidget.adjustSize = unbound qt slot adjustSize of YPanelWidget type backgroundRole fontlab.YPanelWidget.backgroundRole = unbound qt slot backgroundRole of YPanelWidget type backingStore fontlab.YPanelWidget.backingStore = unbound qt slot backingStore of YPanelWidget type blockSignals fontlab.YPanelWidget.blockSignals = unbound qt slot blockSignals of YPanelWidget type changeEvent fontlab.YPanelWidget.changeEvent = unbound qt slot py_q_changeEvent of YPanelWidget type childAt fontlab.YPanelWidget.childAt = unbound qt slot childAt of YPanelWidget type childEvent fontlab.YPanelWidget.childEvent = unbound qt slot py_q_childEvent of YPanelWidget type children fontlab.YPanelWidget.children = unbound qt slot children of YPanelWidget type className fontlab.YPanelWidget.className = className (...) Return the classname of the object clearFocus fontlab.YPanelWidget.clearFocus = unbound qt slot clearFocus of YPanelWidget type clearMask fontlab.YPanelWidget.clearMask = unbound qt slot clearMask of YPanelWidget type close fontlab.YPanelWidget.close = unbound qt slot close of YPanelWidget type closeEvent fontlab.YPanelWidget.closeEvent = unbound qt slot py_q_closeEvent of YPanelWidget type colorCount fontlab.YPanelWidget.colorCount = unbound qt slot colorCount of YPanelWidget type connect fontlab.YPanelWidget.connect = unbound qt slot connect of YPanelWidget type contentsMargins fontlab.YPanelWidget.contentsMargins = unbound qt slot contentsMargins of YPanelWidget type contentsRect fontlab.YPanelWidget.contentsRect = unbound qt slot contentsRect of YPanelWidget type contextMenuEvent fontlab.YPanelWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of YPanelWidget type createWindowContainer fontlab.YPanelWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of YPanelWidget type createWinId fontlab.YPanelWidget.createWinId = unbound qt slot createWinId of YPanelWidget type customEvent fontlab.YPanelWidget.customEvent = unbound qt slot py_q_customEvent of YPanelWidget type delete fontlab.YPanelWidget.delete = delete (...) Deletes the given C++ object deleteLater fontlab.YPanelWidget.deleteLater = unbound qt slot deleteLater of YPanelWidget type depth fontlab.YPanelWidget.depth = unbound qt slot depth of YPanelWidget type destroy fontlab.YPanelWidget.destroy = unbound qt slot destroy of YPanelWidget type devicePixelRatio fontlab.YPanelWidget.devicePixelRatio = unbound qt slot devicePixelRatio of YPanelWidget type devicePixelRatioF fontlab.YPanelWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of YPanelWidget type devicePixelRatioFScale fontlab.YPanelWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of YPanelWidget type devType fontlab.YPanelWidget.devType = unbound qt slot py_q_devType of YPanelWidget type disconnect fontlab.YPanelWidget.disconnect = unbound qt slot disconnect of YPanelWidget type dragEnterEvent fontlab.YPanelWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of YPanelWidget type dragLeaveEvent fontlab.YPanelWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of YPanelWidget type dragMoveEvent fontlab.YPanelWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of YPanelWidget type dropEvent fontlab.YPanelWidget.dropEvent = unbound qt slot py_q_dropEvent of YPanelWidget type dumpObjectInfo fontlab.YPanelWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelWidget type dumpObjectTree fontlab.YPanelWidget.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelWidget type dynamicPropertyNames fontlab.YPanelWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelWidget type effectiveWinId fontlab.YPanelWidget.effectiveWinId = unbound qt slot effectiveWinId of YPanelWidget type ensurePolished fontlab.YPanelWidget.ensurePolished = unbound qt slot ensurePolished of YPanelWidget type enterEvent fontlab.YPanelWidget.enterEvent = unbound qt slot py_q_enterEvent of YPanelWidget type event fontlab.YPanelWidget.event = unbound qt slot py_q_event of YPanelWidget type eventFilter fontlab.YPanelWidget.eventFilter = unbound qt slot py_q_eventFilter of YPanelWidget type findChild fontlab.YPanelWidget.findChild = unbound qt slot findChild of YPanelWidget type findChildren fontlab.YPanelWidget.findChildren = unbound qt slot findChildren of YPanelWidget type focusInEvent fontlab.YPanelWidget.focusInEvent = unbound qt slot py_q_focusInEvent of YPanelWidget type focusNextChild fontlab.YPanelWidget.focusNextChild = unbound qt slot focusNextChild of YPanelWidget type focusNextPrevChild fontlab.YPanelWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of YPanelWidget type focusOutEvent fontlab.YPanelWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of YPanelWidget type focusPreviousChild fontlab.YPanelWidget.focusPreviousChild = unbound qt slot focusPreviousChild of YPanelWidget type focusProxy fontlab.YPanelWidget.focusProxy = unbound qt slot focusProxy of YPanelWidget type focusWidget fontlab.YPanelWidget.focusWidget = unbound qt slot focusWidget of YPanelWidget type foregroundRole fontlab.YPanelWidget.foregroundRole = unbound qt slot foregroundRole of YPanelWidget type grab fontlab.YPanelWidget.grab = unbound qt slot grab of YPanelWidget type grabGesture fontlab.YPanelWidget.grabGesture = unbound qt slot grabGesture of YPanelWidget type grabKeyboard fontlab.YPanelWidget.grabKeyboard = unbound qt slot grabKeyboard of YPanelWidget type grabMouse fontlab.YPanelWidget.grabMouse = unbound qt slot grabMouse of YPanelWidget type grabShortcut fontlab.YPanelWidget.grabShortcut = unbound qt slot grabShortcut of YPanelWidget type graphicsEffect fontlab.YPanelWidget.graphicsEffect = unbound qt slot graphicsEffect of YPanelWidget type graphicsProxyWidget fontlab.YPanelWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of YPanelWidget type hasFocus fontlab.YPanelWidget.hasFocus = unbound qt slot hasFocus of YPanelWidget type hasHeightForWidth fontlab.YPanelWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of YPanelWidget type hasMouseTracking fontlab.YPanelWidget.hasMouseTracking = unbound qt slot hasMouseTracking of YPanelWidget type heightForWidth fontlab.YPanelWidget.heightForWidth = unbound qt slot py_q_heightForWidth of YPanelWidget type heightMM fontlab.YPanelWidget.heightMM = unbound qt slot heightMM of YPanelWidget type help fontlab.YPanelWidget.help = help (...) Shows the help of available methods for this class hide fontlab.YPanelWidget.hide = unbound qt slot hide of YPanelWidget type hideEvent fontlab.YPanelWidget.hideEvent = unbound qt slot py_q_hideEvent of YPanelWidget type inherits fontlab.YPanelWidget.inherits = inherits (...) Returns if the class inherits or is of given type name initPainter fontlab.YPanelWidget.initPainter = unbound qt slot py_q_initPainter of YPanelWidget type inputMethodEvent fontlab.YPanelWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of YPanelWidget type inputMethodQuery fontlab.YPanelWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of YPanelWidget type insertAction fontlab.YPanelWidget.insertAction = unbound qt slot insertAction of YPanelWidget type insertActions fontlab.YPanelWidget.insertActions = unbound qt slot insertActions of YPanelWidget type installEventFilter fontlab.YPanelWidget.installEventFilter = unbound qt slot installEventFilter of YPanelWidget type isAncestorOf fontlab.YPanelWidget.isAncestorOf = unbound qt slot isAncestorOf of YPanelWidget type isEnabled fontlab.YPanelWidget.isEnabled = unbound qt slot isEnabled of YPanelWidget type isEnabledTo fontlab.YPanelWidget.isEnabledTo = unbound qt slot isEnabledTo of YPanelWidget type isFullScreen fontlab.YPanelWidget.isFullScreen = unbound qt slot isFullScreen of YPanelWidget type isHidden fontlab.YPanelWidget.isHidden = unbound qt slot isHidden of YPanelWidget type isLeftToRight fontlab.YPanelWidget.isLeftToRight = unbound qt slot isLeftToRight of YPanelWidget type isMaximized fontlab.YPanelWidget.isMaximized = unbound qt slot isMaximized of YPanelWidget type isMinimized fontlab.YPanelWidget.isMinimized = unbound qt slot isMinimized of YPanelWidget type isModal fontlab.YPanelWidget.isModal = unbound qt slot isModal of YPanelWidget type isRightToLeft fontlab.YPanelWidget.isRightToLeft = unbound qt slot isRightToLeft of YPanelWidget type isSignalConnected fontlab.YPanelWidget.isSignalConnected = unbound qt slot isSignalConnected of YPanelWidget type isVisible fontlab.YPanelWidget.isVisible = unbound qt slot isVisible of YPanelWidget type isVisibleTo fontlab.YPanelWidget.isVisibleTo = unbound qt slot isVisibleTo of YPanelWidget type isWidgetType fontlab.YPanelWidget.isWidgetType = unbound qt slot isWidgetType of YPanelWidget type isWindow fontlab.YPanelWidget.isWindow = unbound qt slot isWindow of YPanelWidget type isWindowModified fontlab.YPanelWidget.isWindowModified = unbound qt slot isWindowModified of YPanelWidget type isWindowType fontlab.YPanelWidget.isWindowType = unbound qt slot isWindowType of YPanelWidget type keyboardGrabber fontlab.YPanelWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of YPanelWidget type keyPressEvent fontlab.YPanelWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of YPanelWidget type keyReleaseEvent fontlab.YPanelWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of YPanelWidget type killTimer fontlab.YPanelWidget.killTimer = unbound qt slot killTimer of YPanelWidget type layout fontlab.YPanelWidget.layout = unbound qt slot layout of YPanelWidget type leaveEvent fontlab.YPanelWidget.leaveEvent = unbound qt slot py_q_leaveEvent of YPanelWidget type logicalDpiX fontlab.YPanelWidget.logicalDpiX = unbound qt slot logicalDpiX of YPanelWidget type logicalDpiY fontlab.YPanelWidget.logicalDpiY = unbound qt slot logicalDpiY of YPanelWidget type lower fontlab.YPanelWidget.lower = unbound qt slot lower of YPanelWidget type mapFrom fontlab.YPanelWidget.mapFrom = unbound qt slot mapFrom of YPanelWidget type mapFromGlobal fontlab.YPanelWidget.mapFromGlobal = unbound qt slot mapFromGlobal of YPanelWidget type mapFromParent fontlab.YPanelWidget.mapFromParent = unbound qt slot mapFromParent of YPanelWidget type mapTo fontlab.YPanelWidget.mapTo = unbound qt slot mapTo of YPanelWidget type mapToGlobal fontlab.YPanelWidget.mapToGlobal = unbound qt slot mapToGlobal of YPanelWidget type mapToParent fontlab.YPanelWidget.mapToParent = unbound qt slot mapToParent of YPanelWidget type mask fontlab.YPanelWidget.mask = unbound qt slot mask of YPanelWidget type metaObject fontlab.YPanelWidget.metaObject = unbound qt slot metaObject of YPanelWidget type metric fontlab.YPanelWidget.metric = unbound qt slot py_q_metric of YPanelWidget type mouseDoubleClickEvent fontlab.YPanelWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of YPanelWidget type mouseGrabber fontlab.YPanelWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of YPanelWidget type mouseMoveEvent fontlab.YPanelWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of YPanelWidget type mousePressEvent fontlab.YPanelWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of YPanelWidget type mouseReleaseEvent fontlab.YPanelWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of YPanelWidget type move fontlab.YPanelWidget.move = unbound qt slot move of YPanelWidget type moveEvent fontlab.YPanelWidget.moveEvent = unbound qt slot py_q_moveEvent of YPanelWidget type moveToThread fontlab.YPanelWidget.moveToThread = unbound qt slot moveToThread of YPanelWidget type nativeEvent fontlab.YPanelWidget.nativeEvent = unbound qt slot py_q_nativeEvent of YPanelWidget type nativeParentWidget fontlab.YPanelWidget.nativeParentWidget = unbound qt slot nativeParentWidget of YPanelWidget type nextInFocusChain fontlab.YPanelWidget.nextInFocusChain = unbound qt slot nextInFocusChain of YPanelWidget type overrideWindowFlags fontlab.YPanelWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of YPanelWidget type overrideWindowState fontlab.YPanelWidget.overrideWindowState = unbound qt slot overrideWindowState of YPanelWidget type paintEngine fontlab.YPanelWidget.paintEngine = unbound qt slot py_q_paintEngine of YPanelWidget type paintEvent fontlab.YPanelWidget.paintEvent = unbound qt slot py_q_paintEvent of YPanelWidget type paintingActive fontlab.YPanelWidget.paintingActive = unbound qt slot paintingActive of YPanelWidget type parent fontlab.YPanelWidget.parent = unbound qt slot parent of YPanelWidget type parentWidget fontlab.YPanelWidget.parentWidget = unbound qt slot parentWidget of YPanelWidget type physicalDpiX fontlab.YPanelWidget.physicalDpiX = unbound qt slot physicalDpiX of YPanelWidget type physicalDpiY fontlab.YPanelWidget.physicalDpiY = unbound qt slot physicalDpiY of YPanelWidget type previousInFocusChain fontlab.YPanelWidget.previousInFocusChain = unbound qt slot previousInFocusChain of YPanelWidget type property fontlab.YPanelWidget.property = unbound qt slot property of YPanelWidget type raise fontlab.YPanelWidget.raise = unbound qt slot raise of YPanelWidget type redirected fontlab.YPanelWidget.redirected = unbound qt slot py_q_redirected of YPanelWidget type releaseKeyboard fontlab.YPanelWidget.releaseKeyboard = unbound qt slot releaseKeyboard of YPanelWidget type releaseMouse fontlab.YPanelWidget.releaseMouse = unbound qt slot releaseMouse of YPanelWidget type releaseShortcut fontlab.YPanelWidget.releaseShortcut = unbound qt slot releaseShortcut of YPanelWidget type removeAction fontlab.YPanelWidget.removeAction = unbound qt slot removeAction of YPanelWidget type removeEventFilter fontlab.YPanelWidget.removeEventFilter = unbound qt slot removeEventFilter of YPanelWidget type render fontlab.YPanelWidget.render = unbound qt slot render of YPanelWidget type repaint fontlab.YPanelWidget.repaint = unbound qt slot repaint of YPanelWidget type resize fontlab.YPanelWidget.resize = unbound qt slot resize of YPanelWidget type resizeEvent fontlab.YPanelWidget.resizeEvent = unbound qt slot py_q_resizeEvent of YPanelWidget type restoreGeometry fontlab.YPanelWidget.restoreGeometry = unbound qt slot restoreGeometry of YPanelWidget type saveGeometry fontlab.YPanelWidget.saveGeometry = unbound qt slot saveGeometry of YPanelWidget type scroll fontlab.YPanelWidget.scroll = unbound qt slot scroll of YPanelWidget type sender fontlab.YPanelWidget.sender = unbound qt slot sender of YPanelWidget type senderSignalIndex fontlab.YPanelWidget.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelWidget type setAcceptDrops fontlab.YPanelWidget.setAcceptDrops = unbound qt slot setAcceptDrops of YPanelWidget type setAccessibleDescription fontlab.YPanelWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of YPanelWidget type setAccessibleName fontlab.YPanelWidget.setAccessibleName = unbound qt slot setAccessibleName of YPanelWidget type setAttribute fontlab.YPanelWidget.setAttribute = unbound qt slot setAttribute of YPanelWidget type setAutoFillBackground fontlab.YPanelWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of YPanelWidget type setBackgroundRole fontlab.YPanelWidget.setBackgroundRole = unbound qt slot setBackgroundRole of YPanelWidget type setBaseSize fontlab.YPanelWidget.setBaseSize = unbound qt slot setBaseSize of YPanelWidget type setContentsMargins fontlab.YPanelWidget.setContentsMargins = unbound qt slot setContentsMargins of YPanelWidget type setContextMenuPolicy fontlab.YPanelWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of YPanelWidget type setCursor fontlab.YPanelWidget.setCursor = unbound qt slot setCursor of YPanelWidget type setDisabled fontlab.YPanelWidget.setDisabled = unbound qt slot setDisabled of YPanelWidget type setEnabled fontlab.YPanelWidget.setEnabled = unbound qt slot setEnabled of YPanelWidget type setFixedHeight fontlab.YPanelWidget.setFixedHeight = unbound qt slot setFixedHeight of YPanelWidget type setFixedSize fontlab.YPanelWidget.setFixedSize = unbound qt slot setFixedSize of YPanelWidget type setFixedWidth fontlab.YPanelWidget.setFixedWidth = unbound qt slot setFixedWidth of YPanelWidget type setFocus fontlab.YPanelWidget.setFocus = unbound qt slot setFocus of YPanelWidget type setFocusPolicy fontlab.YPanelWidget.setFocusPolicy = unbound qt slot setFocusPolicy of YPanelWidget type setFocusProxy fontlab.YPanelWidget.setFocusProxy = unbound qt slot setFocusProxy of YPanelWidget type setFont fontlab.YPanelWidget.setFont = unbound qt slot setFont of YPanelWidget type setForegroundRole fontlab.YPanelWidget.setForegroundRole = unbound qt slot setForegroundRole of YPanelWidget type setGeometry fontlab.YPanelWidget.setGeometry = unbound qt slot setGeometry of YPanelWidget type setGraphicsEffect fontlab.YPanelWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of YPanelWidget type setHidden fontlab.YPanelWidget.setHidden = unbound qt slot setHidden of YPanelWidget type setInputMethodHints fontlab.YPanelWidget.setInputMethodHints = unbound qt slot setInputMethodHints of YPanelWidget type setLayout fontlab.YPanelWidget.setLayout = unbound qt slot setLayout of YPanelWidget type setLayoutDirection fontlab.YPanelWidget.setLayoutDirection = unbound qt slot setLayoutDirection of YPanelWidget type setLocale fontlab.YPanelWidget.setLocale = unbound qt slot setLocale of YPanelWidget type setMask fontlab.YPanelWidget.setMask = unbound qt slot setMask of YPanelWidget type setMaximumHeight fontlab.YPanelWidget.setMaximumHeight = unbound qt slot setMaximumHeight of YPanelWidget type setMaximumSize fontlab.YPanelWidget.setMaximumSize = unbound qt slot setMaximumSize of YPanelWidget type setMaximumWidth fontlab.YPanelWidget.setMaximumWidth = unbound qt slot setMaximumWidth of YPanelWidget type setMinimumHeight fontlab.YPanelWidget.setMinimumHeight = unbound qt slot setMinimumHeight of YPanelWidget type setMinimumSize fontlab.YPanelWidget.setMinimumSize = unbound qt slot setMinimumSize of YPanelWidget type setMinimumWidth fontlab.YPanelWidget.setMinimumWidth = unbound qt slot setMinimumWidth of YPanelWidget type setMouseTracking fontlab.YPanelWidget.setMouseTracking = unbound qt slot setMouseTracking of YPanelWidget type setObjectName fontlab.YPanelWidget.setObjectName = unbound qt slot setObjectName of YPanelWidget type setPalette fontlab.YPanelWidget.setPalette = unbound qt slot setPalette of YPanelWidget type setParent fontlab.YPanelWidget.setParent = unbound qt slot setParent of YPanelWidget type setProperty fontlab.YPanelWidget.setProperty = unbound qt slot setProperty of YPanelWidget type setShortcutAutoRepeat fontlab.YPanelWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of YPanelWidget type setShortcutEnabled fontlab.YPanelWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of YPanelWidget type setSizeIncrement fontlab.YPanelWidget.setSizeIncrement = unbound qt slot setSizeIncrement of YPanelWidget type setSizePolicy fontlab.YPanelWidget.setSizePolicy = unbound qt slot setSizePolicy of YPanelWidget type setStatusTip fontlab.YPanelWidget.setStatusTip = unbound qt slot setStatusTip of YPanelWidget type setStyle fontlab.YPanelWidget.setStyle = unbound qt slot setStyle of YPanelWidget type setStyleSheet fontlab.YPanelWidget.setStyleSheet = unbound qt slot setStyleSheet of YPanelWidget type setTabOrder fontlab.YPanelWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of YPanelWidget type setToolTip fontlab.YPanelWidget.setToolTip = unbound qt slot setToolTip of YPanelWidget type setToolTipDuration fontlab.YPanelWidget.setToolTipDuration = unbound qt slot setToolTipDuration of YPanelWidget type setUpdatesEnabled fontlab.YPanelWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of YPanelWidget type setVisible fontlab.YPanelWidget.setVisible = unbound qt slot py_q_setVisible of YPanelWidget type setWhatsThis fontlab.YPanelWidget.setWhatsThis = unbound qt slot setWhatsThis of YPanelWidget type setWindowFilePath fontlab.YPanelWidget.setWindowFilePath = unbound qt slot setWindowFilePath of YPanelWidget type setWindowFlags fontlab.YPanelWidget.setWindowFlags = unbound qt slot setWindowFlags of YPanelWidget type setWindowIcon fontlab.YPanelWidget.setWindowIcon = unbound qt slot setWindowIcon of YPanelWidget type setWindowIconText fontlab.YPanelWidget.setWindowIconText = unbound qt slot setWindowIconText of YPanelWidget type setWindowModality fontlab.YPanelWidget.setWindowModality = unbound qt slot setWindowModality of YPanelWidget type setWindowModified fontlab.YPanelWidget.setWindowModified = unbound qt slot setWindowModified of YPanelWidget type setWindowOpacity fontlab.YPanelWidget.setWindowOpacity = unbound qt slot setWindowOpacity of YPanelWidget type setWindowRole fontlab.YPanelWidget.setWindowRole = unbound qt slot setWindowRole of YPanelWidget type setWindowState fontlab.YPanelWidget.setWindowState = unbound qt slot setWindowState of YPanelWidget type setWindowTitle fontlab.YPanelWidget.setWindowTitle = unbound qt slot setWindowTitle of YPanelWidget type sharedPainter fontlab.YPanelWidget.sharedPainter = unbound qt slot py_q_sharedPainter of YPanelWidget type show fontlab.YPanelWidget.show = unbound qt slot show of YPanelWidget type showEvent fontlab.YPanelWidget.showEvent = unbound qt slot py_q_showEvent of YPanelWidget type showFullScreen fontlab.YPanelWidget.showFullScreen = unbound qt slot showFullScreen of YPanelWidget type showMaximized fontlab.YPanelWidget.showMaximized = unbound qt slot showMaximized of YPanelWidget type showMinimized fontlab.YPanelWidget.showMinimized = unbound qt slot showMinimized of YPanelWidget type showNormal fontlab.YPanelWidget.showNormal = unbound qt slot showNormal of YPanelWidget type signalsBlocked fontlab.YPanelWidget.signalsBlocked = unbound qt slot signalsBlocked of YPanelWidget type stackUnder fontlab.YPanelWidget.stackUnder = unbound qt slot stackUnder of YPanelWidget type startTimer fontlab.YPanelWidget.startTimer = unbound qt slot startTimer of YPanelWidget type style fontlab.YPanelWidget.style = unbound qt slot style of YPanelWidget type tabletEvent fontlab.YPanelWidget.tabletEvent = unbound qt slot py_q_tabletEvent of YPanelWidget type testAttribute fontlab.YPanelWidget.testAttribute = unbound qt slot testAttribute of YPanelWidget type thread fontlab.YPanelWidget.thread = unbound qt slot thread of YPanelWidget type timerEvent fontlab.YPanelWidget.timerEvent = unbound qt slot py_q_timerEvent of YPanelWidget type tr fontlab.YPanelWidget.tr = unbound qt slot tr of YPanelWidget type underMouse fontlab.YPanelWidget.underMouse = unbound qt slot underMouse of YPanelWidget type ungrabGesture fontlab.YPanelWidget.ungrabGesture = unbound qt slot ungrabGesture of YPanelWidget type unsetCursor fontlab.YPanelWidget.unsetCursor = unbound qt slot unsetCursor of YPanelWidget type unsetLayoutDirection fontlab.YPanelWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of YPanelWidget type unsetLocale fontlab.YPanelWidget.unsetLocale = unbound qt slot unsetLocale of YPanelWidget type update fontlab.YPanelWidget.update = unbound qt slot update of YPanelWidget type updateGeometry fontlab.YPanelWidget.updateGeometry = unbound qt slot updateGeometry of YPanelWidget type visibleRegion fontlab.YPanelWidget.visibleRegion = unbound qt slot visibleRegion of YPanelWidget type wheelEvent fontlab.YPanelWidget.wheelEvent = unbound qt slot py_q_wheelEvent of YPanelWidget type widthMM fontlab.YPanelWidget.widthMM = unbound qt slot widthMM of YPanelWidget type window fontlab.YPanelWidget.window = unbound qt slot window of YPanelWidget type windowFlags fontlab.YPanelWidget.windowFlags = unbound qt slot windowFlags of YPanelWidget type windowHandle fontlab.YPanelWidget.windowHandle = unbound qt slot windowHandle of YPanelWidget type windowRole fontlab.YPanelWidget.windowRole = unbound qt slot windowRole of YPanelWidget type windowState fontlab.YPanelWidget.windowState = unbound qt slot windowState of YPanelWidget type windowType fontlab.YPanelWidget.windowType = unbound qt slot windowType of YPanelWidget type winId fontlab.YPanelWidget.winId = unbound qt slot winId of YPanelWidget type","title":"fontlab"},{"location":"fontlab.html#fontlab","text":"","title":"fontlab"},{"location":"fontlab.html#ypanelmanager","text":"","title":"YPanelManager"},{"location":"fontlab.html#blocksignals","text":"fontlab.YPanelManager.blockSignals = unbound qt slot blockSignals of YPanelManager type","title":"blockSignals"},{"location":"fontlab.html#childevent","text":"fontlab.YPanelManager.childEvent = unbound qt slot py_q_childEvent of YPanelManager type","title":"childEvent"},{"location":"fontlab.html#children","text":"fontlab.YPanelManager.children = unbound qt slot children of YPanelManager type","title":"children"},{"location":"fontlab.html#classname","text":"fontlab.YPanelManager.className = className (...) Return the classname of the object","title":"className"},{"location":"fontlab.html#connect","text":"fontlab.YPanelManager.connect = unbound qt slot connect of YPanelManager type","title":"connect"},{"location":"fontlab.html#customevent","text":"fontlab.YPanelManager.customEvent = unbound qt slot py_q_customEvent of YPanelManager type","title":"customEvent"},{"location":"fontlab.html#delete","text":"fontlab.YPanelManager.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"fontlab.html#deletelater","text":"fontlab.YPanelManager.deleteLater = unbound qt slot deleteLater of YPanelManager type","title":"deleteLater"},{"location":"fontlab.html#disconnect","text":"fontlab.YPanelManager.disconnect = unbound qt slot disconnect of YPanelManager type","title":"disconnect"},{"location":"fontlab.html#dumpobjectinfo","text":"fontlab.YPanelManager.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelManager type","title":"dumpObjectInfo"},{"location":"fontlab.html#dumpobjecttree","text":"fontlab.YPanelManager.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelManager type","title":"dumpObjectTree"},{"location":"fontlab.html#dynamicpropertynames","text":"fontlab.YPanelManager.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelManager type","title":"dynamicPropertyNames"},{"location":"fontlab.html#event","text":"fontlab.YPanelManager.event = unbound qt slot py_q_event of YPanelManager type","title":"event"},{"location":"fontlab.html#eventfilter","text":"fontlab.YPanelManager.eventFilter = unbound qt slot py_q_eventFilter of YPanelManager type","title":"eventFilter"},{"location":"fontlab.html#findchild","text":"fontlab.YPanelManager.findChild = unbound qt slot findChild of YPanelManager type","title":"findChild"},{"location":"fontlab.html#findchildren","text":"fontlab.YPanelManager.findChildren = unbound qt slot findChildren of YPanelManager type","title":"findChildren"},{"location":"fontlab.html#help","text":"fontlab.YPanelManager.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"fontlab.html#inherits","text":"fontlab.YPanelManager.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"fontlab.html#installeventfilter","text":"fontlab.YPanelManager.installEventFilter = unbound qt slot installEventFilter of YPanelManager type","title":"installEventFilter"},{"location":"fontlab.html#issignalconnected","text":"fontlab.YPanelManager.isSignalConnected = unbound qt slot isSignalConnected of YPanelManager type","title":"isSignalConnected"},{"location":"fontlab.html#iswidgettype","text":"fontlab.YPanelManager.isWidgetType = unbound qt slot isWidgetType of YPanelManager type","title":"isWidgetType"},{"location":"fontlab.html#iswindowtype","text":"fontlab.YPanelManager.isWindowType = unbound qt slot isWindowType of YPanelManager type","title":"isWindowType"},{"location":"fontlab.html#killtimer","text":"fontlab.YPanelManager.killTimer = unbound qt slot killTimer of YPanelManager type","title":"killTimer"},{"location":"fontlab.html#metaobject","text":"fontlab.YPanelManager.metaObject = unbound qt slot metaObject of YPanelManager type","title":"metaObject"},{"location":"fontlab.html#movetothread","text":"fontlab.YPanelManager.moveToThread = unbound qt slot moveToThread of YPanelManager type","title":"moveToThread"},{"location":"fontlab.html#parent","text":"fontlab.YPanelManager.parent = unbound qt slot parent of YPanelManager type","title":"parent"},{"location":"fontlab.html#property","text":"fontlab.YPanelManager.property = unbound qt slot property of YPanelManager type","title":"property"},{"location":"fontlab.html#removeeventfilter","text":"fontlab.YPanelManager.removeEventFilter = unbound qt slot removeEventFilter of YPanelManager type","title":"removeEventFilter"},{"location":"fontlab.html#sender","text":"fontlab.YPanelManager.sender = unbound qt slot sender of YPanelManager type","title":"sender"},{"location":"fontlab.html#sendersignalindex","text":"fontlab.YPanelManager.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelManager type","title":"senderSignalIndex"},{"location":"fontlab.html#setobjectname","text":"fontlab.YPanelManager.setObjectName = unbound qt slot setObjectName of YPanelManager type","title":"setObjectName"},{"location":"fontlab.html#setparent","text":"fontlab.YPanelManager.setParent = unbound qt slot setParent of YPanelManager type","title":"setParent"},{"location":"fontlab.html#setproperty","text":"fontlab.YPanelManager.setProperty = unbound qt slot setProperty of YPanelManager type","title":"setProperty"},{"location":"fontlab.html#signalsblocked","text":"fontlab.YPanelManager.signalsBlocked = unbound qt slot signalsBlocked of YPanelManager type","title":"signalsBlocked"},{"location":"fontlab.html#starttimer","text":"fontlab.YPanelManager.startTimer = unbound qt slot startTimer of YPanelManager type","title":"startTimer"},{"location":"fontlab.html#thread","text":"fontlab.YPanelManager.thread = unbound qt slot thread of YPanelManager type","title":"thread"},{"location":"fontlab.html#timerevent","text":"fontlab.YPanelManager.timerEvent = unbound qt slot py_q_timerEvent of YPanelManager type","title":"timerEvent"},{"location":"fontlab.html#tr","text":"fontlab.YPanelManager.tr = unbound qt slot tr of YPanelManager type","title":"tr"},{"location":"fontlab.html#ypanelwidget","text":"","title":"YPanelWidget"},{"location":"fontlab.html#actionevent","text":"fontlab.YPanelWidget.actionEvent = unbound qt slot py_q_actionEvent of YPanelWidget type","title":"actionEvent"},{"location":"fontlab.html#actions","text":"fontlab.YPanelWidget.actions = unbound qt slot actions of YPanelWidget type","title":"actions"},{"location":"fontlab.html#activatewindow","text":"fontlab.YPanelWidget.activateWindow = unbound qt slot activateWindow of YPanelWidget type","title":"activateWindow"},{"location":"fontlab.html#addaction","text":"fontlab.YPanelWidget.addAction = unbound qt slot addAction of YPanelWidget type","title":"addAction"},{"location":"fontlab.html#addactions","text":"fontlab.YPanelWidget.addActions = unbound qt slot addActions of YPanelWidget type","title":"addActions"},{"location":"fontlab.html#adjustsize","text":"fontlab.YPanelWidget.adjustSize = unbound qt slot adjustSize of YPanelWidget type","title":"adjustSize"},{"location":"fontlab.html#backgroundrole","text":"fontlab.YPanelWidget.backgroundRole = unbound qt slot backgroundRole of YPanelWidget type","title":"backgroundRole"},{"location":"fontlab.html#backingstore","text":"fontlab.YPanelWidget.backingStore = unbound qt slot backingStore of YPanelWidget type","title":"backingStore"},{"location":"fontlab.html#blocksignals_1","text":"fontlab.YPanelWidget.blockSignals = unbound qt slot blockSignals of YPanelWidget type","title":"blockSignals"},{"location":"fontlab.html#changeevent","text":"fontlab.YPanelWidget.changeEvent = unbound qt slot py_q_changeEvent of YPanelWidget type","title":"changeEvent"},{"location":"fontlab.html#childat","text":"fontlab.YPanelWidget.childAt = unbound qt slot childAt of YPanelWidget type","title":"childAt"},{"location":"fontlab.html#childevent_1","text":"fontlab.YPanelWidget.childEvent = unbound qt slot py_q_childEvent of YPanelWidget type","title":"childEvent"},{"location":"fontlab.html#children_1","text":"fontlab.YPanelWidget.children = unbound qt slot children of YPanelWidget type","title":"children"},{"location":"fontlab.html#classname_1","text":"fontlab.YPanelWidget.className = className (...) Return the classname of the object","title":"className"},{"location":"fontlab.html#clearfocus","text":"fontlab.YPanelWidget.clearFocus = unbound qt slot clearFocus of YPanelWidget type","title":"clearFocus"},{"location":"fontlab.html#clearmask","text":"fontlab.YPanelWidget.clearMask = unbound qt slot clearMask of YPanelWidget type","title":"clearMask"},{"location":"fontlab.html#close","text":"fontlab.YPanelWidget.close = unbound qt slot close of YPanelWidget type","title":"close"},{"location":"fontlab.html#closeevent","text":"fontlab.YPanelWidget.closeEvent = unbound qt slot py_q_closeEvent of YPanelWidget type","title":"closeEvent"},{"location":"fontlab.html#colorcount","text":"fontlab.YPanelWidget.colorCount = unbound qt slot colorCount of YPanelWidget type","title":"colorCount"},{"location":"fontlab.html#connect_1","text":"fontlab.YPanelWidget.connect = unbound qt slot connect of YPanelWidget type","title":"connect"},{"location":"fontlab.html#contentsmargins","text":"fontlab.YPanelWidget.contentsMargins = unbound qt slot contentsMargins of YPanelWidget type","title":"contentsMargins"},{"location":"fontlab.html#contentsrect","text":"fontlab.YPanelWidget.contentsRect = unbound qt slot contentsRect of YPanelWidget type","title":"contentsRect"},{"location":"fontlab.html#contextmenuevent","text":"fontlab.YPanelWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of YPanelWidget type","title":"contextMenuEvent"},{"location":"fontlab.html#createwindowcontainer","text":"fontlab.YPanelWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of YPanelWidget type","title":"createWindowContainer"},{"location":"fontlab.html#createwinid","text":"fontlab.YPanelWidget.createWinId = unbound qt slot createWinId of YPanelWidget type","title":"createWinId"},{"location":"fontlab.html#customevent_1","text":"fontlab.YPanelWidget.customEvent = unbound qt slot py_q_customEvent of YPanelWidget type","title":"customEvent"},{"location":"fontlab.html#delete_1","text":"fontlab.YPanelWidget.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"fontlab.html#deletelater_1","text":"fontlab.YPanelWidget.deleteLater = unbound qt slot deleteLater of YPanelWidget type","title":"deleteLater"},{"location":"fontlab.html#depth","text":"fontlab.YPanelWidget.depth = unbound qt slot depth of YPanelWidget type","title":"depth"},{"location":"fontlab.html#destroy","text":"fontlab.YPanelWidget.destroy = unbound qt slot destroy of YPanelWidget type","title":"destroy"},{"location":"fontlab.html#devicepixelratio","text":"fontlab.YPanelWidget.devicePixelRatio = unbound qt slot devicePixelRatio of YPanelWidget type","title":"devicePixelRatio"},{"location":"fontlab.html#devicepixelratiof","text":"fontlab.YPanelWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of YPanelWidget type","title":"devicePixelRatioF"},{"location":"fontlab.html#devicepixelratiofscale","text":"fontlab.YPanelWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of YPanelWidget type","title":"devicePixelRatioFScale"},{"location":"fontlab.html#devtype","text":"fontlab.YPanelWidget.devType = unbound qt slot py_q_devType of YPanelWidget type","title":"devType"},{"location":"fontlab.html#disconnect_1","text":"fontlab.YPanelWidget.disconnect = unbound qt slot disconnect of YPanelWidget type","title":"disconnect"},{"location":"fontlab.html#dragenterevent","text":"fontlab.YPanelWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of YPanelWidget type","title":"dragEnterEvent"},{"location":"fontlab.html#dragleaveevent","text":"fontlab.YPanelWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of YPanelWidget type","title":"dragLeaveEvent"},{"location":"fontlab.html#dragmoveevent","text":"fontlab.YPanelWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of YPanelWidget type","title":"dragMoveEvent"},{"location":"fontlab.html#dropevent","text":"fontlab.YPanelWidget.dropEvent = unbound qt slot py_q_dropEvent of YPanelWidget type","title":"dropEvent"},{"location":"fontlab.html#dumpobjectinfo_1","text":"fontlab.YPanelWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of YPanelWidget type","title":"dumpObjectInfo"},{"location":"fontlab.html#dumpobjecttree_1","text":"fontlab.YPanelWidget.dumpObjectTree = unbound qt slot dumpObjectTree of YPanelWidget type","title":"dumpObjectTree"},{"location":"fontlab.html#dynamicpropertynames_1","text":"fontlab.YPanelWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of YPanelWidget type","title":"dynamicPropertyNames"},{"location":"fontlab.html#effectivewinid","text":"fontlab.YPanelWidget.effectiveWinId = unbound qt slot effectiveWinId of YPanelWidget type","title":"effectiveWinId"},{"location":"fontlab.html#ensurepolished","text":"fontlab.YPanelWidget.ensurePolished = unbound qt slot ensurePolished of YPanelWidget type","title":"ensurePolished"},{"location":"fontlab.html#enterevent","text":"fontlab.YPanelWidget.enterEvent = unbound qt slot py_q_enterEvent of YPanelWidget type","title":"enterEvent"},{"location":"fontlab.html#event_1","text":"fontlab.YPanelWidget.event = unbound qt slot py_q_event of YPanelWidget type","title":"event"},{"location":"fontlab.html#eventfilter_1","text":"fontlab.YPanelWidget.eventFilter = unbound qt slot py_q_eventFilter of YPanelWidget type","title":"eventFilter"},{"location":"fontlab.html#findchild_1","text":"fontlab.YPanelWidget.findChild = unbound qt slot findChild of YPanelWidget type","title":"findChild"},{"location":"fontlab.html#findchildren_1","text":"fontlab.YPanelWidget.findChildren = unbound qt slot findChildren of YPanelWidget type","title":"findChildren"},{"location":"fontlab.html#focusinevent","text":"fontlab.YPanelWidget.focusInEvent = unbound qt slot py_q_focusInEvent of YPanelWidget type","title":"focusInEvent"},{"location":"fontlab.html#focusnextchild","text":"fontlab.YPanelWidget.focusNextChild = unbound qt slot focusNextChild of YPanelWidget type","title":"focusNextChild"},{"location":"fontlab.html#focusnextprevchild","text":"fontlab.YPanelWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of YPanelWidget type","title":"focusNextPrevChild"},{"location":"fontlab.html#focusoutevent","text":"fontlab.YPanelWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of YPanelWidget type","title":"focusOutEvent"},{"location":"fontlab.html#focuspreviouschild","text":"fontlab.YPanelWidget.focusPreviousChild = unbound qt slot focusPreviousChild of YPanelWidget type","title":"focusPreviousChild"},{"location":"fontlab.html#focusproxy","text":"fontlab.YPanelWidget.focusProxy = unbound qt slot focusProxy of YPanelWidget type","title":"focusProxy"},{"location":"fontlab.html#focuswidget","text":"fontlab.YPanelWidget.focusWidget = unbound qt slot focusWidget of YPanelWidget type","title":"focusWidget"},{"location":"fontlab.html#foregroundrole","text":"fontlab.YPanelWidget.foregroundRole = unbound qt slot foregroundRole of YPanelWidget type","title":"foregroundRole"},{"location":"fontlab.html#grab","text":"fontlab.YPanelWidget.grab = unbound qt slot grab of YPanelWidget type","title":"grab"},{"location":"fontlab.html#grabgesture","text":"fontlab.YPanelWidget.grabGesture = unbound qt slot grabGesture of YPanelWidget type","title":"grabGesture"},{"location":"fontlab.html#grabkeyboard","text":"fontlab.YPanelWidget.grabKeyboard = unbound qt slot grabKeyboard of YPanelWidget type","title":"grabKeyboard"},{"location":"fontlab.html#grabmouse","text":"fontlab.YPanelWidget.grabMouse = unbound qt slot grabMouse of YPanelWidget type","title":"grabMouse"},{"location":"fontlab.html#grabshortcut","text":"fontlab.YPanelWidget.grabShortcut = unbound qt slot grabShortcut of YPanelWidget type","title":"grabShortcut"},{"location":"fontlab.html#graphicseffect","text":"fontlab.YPanelWidget.graphicsEffect = unbound qt slot graphicsEffect of YPanelWidget type","title":"graphicsEffect"},{"location":"fontlab.html#graphicsproxywidget","text":"fontlab.YPanelWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of YPanelWidget type","title":"graphicsProxyWidget"},{"location":"fontlab.html#hasfocus","text":"fontlab.YPanelWidget.hasFocus = unbound qt slot hasFocus of YPanelWidget type","title":"hasFocus"},{"location":"fontlab.html#hasheightforwidth","text":"fontlab.YPanelWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of YPanelWidget type","title":"hasHeightForWidth"},{"location":"fontlab.html#hasmousetracking","text":"fontlab.YPanelWidget.hasMouseTracking = unbound qt slot hasMouseTracking of YPanelWidget type","title":"hasMouseTracking"},{"location":"fontlab.html#heightforwidth","text":"fontlab.YPanelWidget.heightForWidth = unbound qt slot py_q_heightForWidth of YPanelWidget type","title":"heightForWidth"},{"location":"fontlab.html#heightmm","text":"fontlab.YPanelWidget.heightMM = unbound qt slot heightMM of YPanelWidget type","title":"heightMM"},{"location":"fontlab.html#help_1","text":"fontlab.YPanelWidget.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"fontlab.html#hide","text":"fontlab.YPanelWidget.hide = unbound qt slot hide of YPanelWidget type","title":"hide"},{"location":"fontlab.html#hideevent","text":"fontlab.YPanelWidget.hideEvent = unbound qt slot py_q_hideEvent of YPanelWidget type","title":"hideEvent"},{"location":"fontlab.html#inherits_1","text":"fontlab.YPanelWidget.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"fontlab.html#initpainter","text":"fontlab.YPanelWidget.initPainter = unbound qt slot py_q_initPainter of YPanelWidget type","title":"initPainter"},{"location":"fontlab.html#inputmethodevent","text":"fontlab.YPanelWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of YPanelWidget type","title":"inputMethodEvent"},{"location":"fontlab.html#inputmethodquery","text":"fontlab.YPanelWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of YPanelWidget type","title":"inputMethodQuery"},{"location":"fontlab.html#insertaction","text":"fontlab.YPanelWidget.insertAction = unbound qt slot insertAction of YPanelWidget type","title":"insertAction"},{"location":"fontlab.html#insertactions","text":"fontlab.YPanelWidget.insertActions = unbound qt slot insertActions of YPanelWidget type","title":"insertActions"},{"location":"fontlab.html#installeventfilter_1","text":"fontlab.YPanelWidget.installEventFilter = unbound qt slot installEventFilter of YPanelWidget type","title":"installEventFilter"},{"location":"fontlab.html#isancestorof","text":"fontlab.YPanelWidget.isAncestorOf = unbound qt slot isAncestorOf of YPanelWidget type","title":"isAncestorOf"},{"location":"fontlab.html#isenabled","text":"fontlab.YPanelWidget.isEnabled = unbound qt slot isEnabled of YPanelWidget type","title":"isEnabled"},{"location":"fontlab.html#isenabledto","text":"fontlab.YPanelWidget.isEnabledTo = unbound qt slot isEnabledTo of YPanelWidget type","title":"isEnabledTo"},{"location":"fontlab.html#isfullscreen","text":"fontlab.YPanelWidget.isFullScreen = unbound qt slot isFullScreen of YPanelWidget type","title":"isFullScreen"},{"location":"fontlab.html#ishidden","text":"fontlab.YPanelWidget.isHidden = unbound qt slot isHidden of YPanelWidget type","title":"isHidden"},{"location":"fontlab.html#islefttoright","text":"fontlab.YPanelWidget.isLeftToRight = unbound qt slot isLeftToRight of YPanelWidget type","title":"isLeftToRight"},{"location":"fontlab.html#ismaximized","text":"fontlab.YPanelWidget.isMaximized = unbound qt slot isMaximized of YPanelWidget type","title":"isMaximized"},{"location":"fontlab.html#isminimized","text":"fontlab.YPanelWidget.isMinimized = unbound qt slot isMinimized of YPanelWidget type","title":"isMinimized"},{"location":"fontlab.html#ismodal","text":"fontlab.YPanelWidget.isModal = unbound qt slot isModal of YPanelWidget type","title":"isModal"},{"location":"fontlab.html#isrighttoleft","text":"fontlab.YPanelWidget.isRightToLeft = unbound qt slot isRightToLeft of YPanelWidget type","title":"isRightToLeft"},{"location":"fontlab.html#issignalconnected_1","text":"fontlab.YPanelWidget.isSignalConnected = unbound qt slot isSignalConnected of YPanelWidget type","title":"isSignalConnected"},{"location":"fontlab.html#isvisible","text":"fontlab.YPanelWidget.isVisible = unbound qt slot isVisible of YPanelWidget type","title":"isVisible"},{"location":"fontlab.html#isvisibleto","text":"fontlab.YPanelWidget.isVisibleTo = unbound qt slot isVisibleTo of YPanelWidget type","title":"isVisibleTo"},{"location":"fontlab.html#iswidgettype_1","text":"fontlab.YPanelWidget.isWidgetType = unbound qt slot isWidgetType of YPanelWidget type","title":"isWidgetType"},{"location":"fontlab.html#iswindow","text":"fontlab.YPanelWidget.isWindow = unbound qt slot isWindow of YPanelWidget type","title":"isWindow"},{"location":"fontlab.html#iswindowmodified","text":"fontlab.YPanelWidget.isWindowModified = unbound qt slot isWindowModified of YPanelWidget type","title":"isWindowModified"},{"location":"fontlab.html#iswindowtype_1","text":"fontlab.YPanelWidget.isWindowType = unbound qt slot isWindowType of YPanelWidget type","title":"isWindowType"},{"location":"fontlab.html#keyboardgrabber","text":"fontlab.YPanelWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of YPanelWidget type","title":"keyboardGrabber"},{"location":"fontlab.html#keypressevent","text":"fontlab.YPanelWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of YPanelWidget type","title":"keyPressEvent"},{"location":"fontlab.html#keyreleaseevent","text":"fontlab.YPanelWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of YPanelWidget type","title":"keyReleaseEvent"},{"location":"fontlab.html#killtimer_1","text":"fontlab.YPanelWidget.killTimer = unbound qt slot killTimer of YPanelWidget type","title":"killTimer"},{"location":"fontlab.html#layout","text":"fontlab.YPanelWidget.layout = unbound qt slot layout of YPanelWidget type","title":"layout"},{"location":"fontlab.html#leaveevent","text":"fontlab.YPanelWidget.leaveEvent = unbound qt slot py_q_leaveEvent of YPanelWidget type","title":"leaveEvent"},{"location":"fontlab.html#logicaldpix","text":"fontlab.YPanelWidget.logicalDpiX = unbound qt slot logicalDpiX of YPanelWidget type","title":"logicalDpiX"},{"location":"fontlab.html#logicaldpiy","text":"fontlab.YPanelWidget.logicalDpiY = unbound qt slot logicalDpiY of YPanelWidget type","title":"logicalDpiY"},{"location":"fontlab.html#lower","text":"fontlab.YPanelWidget.lower = unbound qt slot lower of YPanelWidget type","title":"lower"},{"location":"fontlab.html#mapfrom","text":"fontlab.YPanelWidget.mapFrom = unbound qt slot mapFrom of YPanelWidget type","title":"mapFrom"},{"location":"fontlab.html#mapfromglobal","text":"fontlab.YPanelWidget.mapFromGlobal = unbound qt slot mapFromGlobal of YPanelWidget type","title":"mapFromGlobal"},{"location":"fontlab.html#mapfromparent","text":"fontlab.YPanelWidget.mapFromParent = unbound qt slot mapFromParent of YPanelWidget type","title":"mapFromParent"},{"location":"fontlab.html#mapto","text":"fontlab.YPanelWidget.mapTo = unbound qt slot mapTo of YPanelWidget type","title":"mapTo"},{"location":"fontlab.html#maptoglobal","text":"fontlab.YPanelWidget.mapToGlobal = unbound qt slot mapToGlobal of YPanelWidget type","title":"mapToGlobal"},{"location":"fontlab.html#maptoparent","text":"fontlab.YPanelWidget.mapToParent = unbound qt slot mapToParent of YPanelWidget type","title":"mapToParent"},{"location":"fontlab.html#mask","text":"fontlab.YPanelWidget.mask = unbound qt slot mask of YPanelWidget type","title":"mask"},{"location":"fontlab.html#metaobject_1","text":"fontlab.YPanelWidget.metaObject = unbound qt slot metaObject of YPanelWidget type","title":"metaObject"},{"location":"fontlab.html#metric","text":"fontlab.YPanelWidget.metric = unbound qt slot py_q_metric of YPanelWidget type","title":"metric"},{"location":"fontlab.html#mousedoubleclickevent","text":"fontlab.YPanelWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of YPanelWidget type","title":"mouseDoubleClickEvent"},{"location":"fontlab.html#mousegrabber","text":"fontlab.YPanelWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of YPanelWidget type","title":"mouseGrabber"},{"location":"fontlab.html#mousemoveevent","text":"fontlab.YPanelWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of YPanelWidget type","title":"mouseMoveEvent"},{"location":"fontlab.html#mousepressevent","text":"fontlab.YPanelWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of YPanelWidget type","title":"mousePressEvent"},{"location":"fontlab.html#mousereleaseevent","text":"fontlab.YPanelWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of YPanelWidget type","title":"mouseReleaseEvent"},{"location":"fontlab.html#move","text":"fontlab.YPanelWidget.move = unbound qt slot move of YPanelWidget type","title":"move"},{"location":"fontlab.html#moveevent","text":"fontlab.YPanelWidget.moveEvent = unbound qt slot py_q_moveEvent of YPanelWidget type","title":"moveEvent"},{"location":"fontlab.html#movetothread_1","text":"fontlab.YPanelWidget.moveToThread = unbound qt slot moveToThread of YPanelWidget type","title":"moveToThread"},{"location":"fontlab.html#nativeevent","text":"fontlab.YPanelWidget.nativeEvent = unbound qt slot py_q_nativeEvent of YPanelWidget type","title":"nativeEvent"},{"location":"fontlab.html#nativeparentwidget","text":"fontlab.YPanelWidget.nativeParentWidget = unbound qt slot nativeParentWidget of YPanelWidget type","title":"nativeParentWidget"},{"location":"fontlab.html#nextinfocuschain","text":"fontlab.YPanelWidget.nextInFocusChain = unbound qt slot nextInFocusChain of YPanelWidget type","title":"nextInFocusChain"},{"location":"fontlab.html#overridewindowflags","text":"fontlab.YPanelWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of YPanelWidget type","title":"overrideWindowFlags"},{"location":"fontlab.html#overridewindowstate","text":"fontlab.YPanelWidget.overrideWindowState = unbound qt slot overrideWindowState of YPanelWidget type","title":"overrideWindowState"},{"location":"fontlab.html#paintengine","text":"fontlab.YPanelWidget.paintEngine = unbound qt slot py_q_paintEngine of YPanelWidget type","title":"paintEngine"},{"location":"fontlab.html#paintevent","text":"fontlab.YPanelWidget.paintEvent = unbound qt slot py_q_paintEvent of YPanelWidget type","title":"paintEvent"},{"location":"fontlab.html#paintingactive","text":"fontlab.YPanelWidget.paintingActive = unbound qt slot paintingActive of YPanelWidget type","title":"paintingActive"},{"location":"fontlab.html#parent_1","text":"fontlab.YPanelWidget.parent = unbound qt slot parent of YPanelWidget type","title":"parent"},{"location":"fontlab.html#parentwidget","text":"fontlab.YPanelWidget.parentWidget = unbound qt slot parentWidget of YPanelWidget type","title":"parentWidget"},{"location":"fontlab.html#physicaldpix","text":"fontlab.YPanelWidget.physicalDpiX = unbound qt slot physicalDpiX of YPanelWidget type","title":"physicalDpiX"},{"location":"fontlab.html#physicaldpiy","text":"fontlab.YPanelWidget.physicalDpiY = unbound qt slot physicalDpiY of YPanelWidget type","title":"physicalDpiY"},{"location":"fontlab.html#previousinfocuschain","text":"fontlab.YPanelWidget.previousInFocusChain = unbound qt slot previousInFocusChain of YPanelWidget type","title":"previousInFocusChain"},{"location":"fontlab.html#property_1","text":"fontlab.YPanelWidget.property = unbound qt slot property of YPanelWidget type","title":"property"},{"location":"fontlab.html#raise","text":"fontlab.YPanelWidget.raise = unbound qt slot raise of YPanelWidget type","title":"raise"},{"location":"fontlab.html#redirected","text":"fontlab.YPanelWidget.redirected = unbound qt slot py_q_redirected of YPanelWidget type","title":"redirected"},{"location":"fontlab.html#releasekeyboard","text":"fontlab.YPanelWidget.releaseKeyboard = unbound qt slot releaseKeyboard of YPanelWidget type","title":"releaseKeyboard"},{"location":"fontlab.html#releasemouse","text":"fontlab.YPanelWidget.releaseMouse = unbound qt slot releaseMouse of YPanelWidget type","title":"releaseMouse"},{"location":"fontlab.html#releaseshortcut","text":"fontlab.YPanelWidget.releaseShortcut = unbound qt slot releaseShortcut of YPanelWidget type","title":"releaseShortcut"},{"location":"fontlab.html#removeaction","text":"fontlab.YPanelWidget.removeAction = unbound qt slot removeAction of YPanelWidget type","title":"removeAction"},{"location":"fontlab.html#removeeventfilter_1","text":"fontlab.YPanelWidget.removeEventFilter = unbound qt slot removeEventFilter of YPanelWidget type","title":"removeEventFilter"},{"location":"fontlab.html#render","text":"fontlab.YPanelWidget.render = unbound qt slot render of YPanelWidget type","title":"render"},{"location":"fontlab.html#repaint","text":"fontlab.YPanelWidget.repaint = unbound qt slot repaint of YPanelWidget type","title":"repaint"},{"location":"fontlab.html#resize","text":"fontlab.YPanelWidget.resize = unbound qt slot resize of YPanelWidget type","title":"resize"},{"location":"fontlab.html#resizeevent","text":"fontlab.YPanelWidget.resizeEvent = unbound qt slot py_q_resizeEvent of YPanelWidget type","title":"resizeEvent"},{"location":"fontlab.html#restoregeometry","text":"fontlab.YPanelWidget.restoreGeometry = unbound qt slot restoreGeometry of YPanelWidget type","title":"restoreGeometry"},{"location":"fontlab.html#savegeometry","text":"fontlab.YPanelWidget.saveGeometry = unbound qt slot saveGeometry of YPanelWidget type","title":"saveGeometry"},{"location":"fontlab.html#scroll","text":"fontlab.YPanelWidget.scroll = unbound qt slot scroll of YPanelWidget type","title":"scroll"},{"location":"fontlab.html#sender_1","text":"fontlab.YPanelWidget.sender = unbound qt slot sender of YPanelWidget type","title":"sender"},{"location":"fontlab.html#sendersignalindex_1","text":"fontlab.YPanelWidget.senderSignalIndex = unbound qt slot senderSignalIndex of YPanelWidget type","title":"senderSignalIndex"},{"location":"fontlab.html#setacceptdrops","text":"fontlab.YPanelWidget.setAcceptDrops = unbound qt slot setAcceptDrops of YPanelWidget type","title":"setAcceptDrops"},{"location":"fontlab.html#setaccessibledescription","text":"fontlab.YPanelWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of YPanelWidget type","title":"setAccessibleDescription"},{"location":"fontlab.html#setaccessiblename","text":"fontlab.YPanelWidget.setAccessibleName = unbound qt slot setAccessibleName of YPanelWidget type","title":"setAccessibleName"},{"location":"fontlab.html#setattribute","text":"fontlab.YPanelWidget.setAttribute = unbound qt slot setAttribute of YPanelWidget type","title":"setAttribute"},{"location":"fontlab.html#setautofillbackground","text":"fontlab.YPanelWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of YPanelWidget type","title":"setAutoFillBackground"},{"location":"fontlab.html#setbackgroundrole","text":"fontlab.YPanelWidget.setBackgroundRole = unbound qt slot setBackgroundRole of YPanelWidget type","title":"setBackgroundRole"},{"location":"fontlab.html#setbasesize","text":"fontlab.YPanelWidget.setBaseSize = unbound qt slot setBaseSize of YPanelWidget type","title":"setBaseSize"},{"location":"fontlab.html#setcontentsmargins","text":"fontlab.YPanelWidget.setContentsMargins = unbound qt slot setContentsMargins of YPanelWidget type","title":"setContentsMargins"},{"location":"fontlab.html#setcontextmenupolicy","text":"fontlab.YPanelWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of YPanelWidget type","title":"setContextMenuPolicy"},{"location":"fontlab.html#setcursor","text":"fontlab.YPanelWidget.setCursor = unbound qt slot setCursor of YPanelWidget type","title":"setCursor"},{"location":"fontlab.html#setdisabled","text":"fontlab.YPanelWidget.setDisabled = unbound qt slot setDisabled of YPanelWidget type","title":"setDisabled"},{"location":"fontlab.html#setenabled","text":"fontlab.YPanelWidget.setEnabled = unbound qt slot setEnabled of YPanelWidget type","title":"setEnabled"},{"location":"fontlab.html#setfixedheight","text":"fontlab.YPanelWidget.setFixedHeight = unbound qt slot setFixedHeight of YPanelWidget type","title":"setFixedHeight"},{"location":"fontlab.html#setfixedsize","text":"fontlab.YPanelWidget.setFixedSize = unbound qt slot setFixedSize of YPanelWidget type","title":"setFixedSize"},{"location":"fontlab.html#setfixedwidth","text":"fontlab.YPanelWidget.setFixedWidth = unbound qt slot setFixedWidth of YPanelWidget type","title":"setFixedWidth"},{"location":"fontlab.html#setfocus","text":"fontlab.YPanelWidget.setFocus = unbound qt slot setFocus of YPanelWidget type","title":"setFocus"},{"location":"fontlab.html#setfocuspolicy","text":"fontlab.YPanelWidget.setFocusPolicy = unbound qt slot setFocusPolicy of YPanelWidget type","title":"setFocusPolicy"},{"location":"fontlab.html#setfocusproxy","text":"fontlab.YPanelWidget.setFocusProxy = unbound qt slot setFocusProxy of YPanelWidget type","title":"setFocusProxy"},{"location":"fontlab.html#setfont","text":"fontlab.YPanelWidget.setFont = unbound qt slot setFont of YPanelWidget type","title":"setFont"},{"location":"fontlab.html#setforegroundrole","text":"fontlab.YPanelWidget.setForegroundRole = unbound qt slot setForegroundRole of YPanelWidget type","title":"setForegroundRole"},{"location":"fontlab.html#setgeometry","text":"fontlab.YPanelWidget.setGeometry = unbound qt slot setGeometry of YPanelWidget type","title":"setGeometry"},{"location":"fontlab.html#setgraphicseffect","text":"fontlab.YPanelWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of YPanelWidget type","title":"setGraphicsEffect"},{"location":"fontlab.html#sethidden","text":"fontlab.YPanelWidget.setHidden = unbound qt slot setHidden of YPanelWidget type","title":"setHidden"},{"location":"fontlab.html#setinputmethodhints","text":"fontlab.YPanelWidget.setInputMethodHints = unbound qt slot setInputMethodHints of YPanelWidget type","title":"setInputMethodHints"},{"location":"fontlab.html#setlayout","text":"fontlab.YPanelWidget.setLayout = unbound qt slot setLayout of YPanelWidget type","title":"setLayout"},{"location":"fontlab.html#setlayoutdirection","text":"fontlab.YPanelWidget.setLayoutDirection = unbound qt slot setLayoutDirection of YPanelWidget type","title":"setLayoutDirection"},{"location":"fontlab.html#setlocale","text":"fontlab.YPanelWidget.setLocale = unbound qt slot setLocale of YPanelWidget type","title":"setLocale"},{"location":"fontlab.html#setmask","text":"fontlab.YPanelWidget.setMask = unbound qt slot setMask of YPanelWidget type","title":"setMask"},{"location":"fontlab.html#setmaximumheight","text":"fontlab.YPanelWidget.setMaximumHeight = unbound qt slot setMaximumHeight of YPanelWidget type","title":"setMaximumHeight"},{"location":"fontlab.html#setmaximumsize","text":"fontlab.YPanelWidget.setMaximumSize = unbound qt slot setMaximumSize of YPanelWidget type","title":"setMaximumSize"},{"location":"fontlab.html#setmaximumwidth","text":"fontlab.YPanelWidget.setMaximumWidth = unbound qt slot setMaximumWidth of YPanelWidget type","title":"setMaximumWidth"},{"location":"fontlab.html#setminimumheight","text":"fontlab.YPanelWidget.setMinimumHeight = unbound qt slot setMinimumHeight of YPanelWidget type","title":"setMinimumHeight"},{"location":"fontlab.html#setminimumsize","text":"fontlab.YPanelWidget.setMinimumSize = unbound qt slot setMinimumSize of YPanelWidget type","title":"setMinimumSize"},{"location":"fontlab.html#setminimumwidth","text":"fontlab.YPanelWidget.setMinimumWidth = unbound qt slot setMinimumWidth of YPanelWidget type","title":"setMinimumWidth"},{"location":"fontlab.html#setmousetracking","text":"fontlab.YPanelWidget.setMouseTracking = unbound qt slot setMouseTracking of YPanelWidget type","title":"setMouseTracking"},{"location":"fontlab.html#setobjectname_1","text":"fontlab.YPanelWidget.setObjectName = unbound qt slot setObjectName of YPanelWidget type","title":"setObjectName"},{"location":"fontlab.html#setpalette","text":"fontlab.YPanelWidget.setPalette = unbound qt slot setPalette of YPanelWidget type","title":"setPalette"},{"location":"fontlab.html#setparent_1","text":"fontlab.YPanelWidget.setParent = unbound qt slot setParent of YPanelWidget type","title":"setParent"},{"location":"fontlab.html#setproperty_1","text":"fontlab.YPanelWidget.setProperty = unbound qt slot setProperty of YPanelWidget type","title":"setProperty"},{"location":"fontlab.html#setshortcutautorepeat","text":"fontlab.YPanelWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of YPanelWidget type","title":"setShortcutAutoRepeat"},{"location":"fontlab.html#setshortcutenabled","text":"fontlab.YPanelWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of YPanelWidget type","title":"setShortcutEnabled"},{"location":"fontlab.html#setsizeincrement","text":"fontlab.YPanelWidget.setSizeIncrement = unbound qt slot setSizeIncrement of YPanelWidget type","title":"setSizeIncrement"},{"location":"fontlab.html#setsizepolicy","text":"fontlab.YPanelWidget.setSizePolicy = unbound qt slot setSizePolicy of YPanelWidget type","title":"setSizePolicy"},{"location":"fontlab.html#setstatustip","text":"fontlab.YPanelWidget.setStatusTip = unbound qt slot setStatusTip of YPanelWidget type","title":"setStatusTip"},{"location":"fontlab.html#setstyle","text":"fontlab.YPanelWidget.setStyle = unbound qt slot setStyle of YPanelWidget type","title":"setStyle"},{"location":"fontlab.html#setstylesheet","text":"fontlab.YPanelWidget.setStyleSheet = unbound qt slot setStyleSheet of YPanelWidget type","title":"setStyleSheet"},{"location":"fontlab.html#settaborder","text":"fontlab.YPanelWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of YPanelWidget type","title":"setTabOrder"},{"location":"fontlab.html#settooltip","text":"fontlab.YPanelWidget.setToolTip = unbound qt slot setToolTip of YPanelWidget type","title":"setToolTip"},{"location":"fontlab.html#settooltipduration","text":"fontlab.YPanelWidget.setToolTipDuration = unbound qt slot setToolTipDuration of YPanelWidget type","title":"setToolTipDuration"},{"location":"fontlab.html#setupdatesenabled","text":"fontlab.YPanelWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of YPanelWidget type","title":"setUpdatesEnabled"},{"location":"fontlab.html#setvisible","text":"fontlab.YPanelWidget.setVisible = unbound qt slot py_q_setVisible of YPanelWidget type","title":"setVisible"},{"location":"fontlab.html#setwhatsthis","text":"fontlab.YPanelWidget.setWhatsThis = unbound qt slot setWhatsThis of YPanelWidget type","title":"setWhatsThis"},{"location":"fontlab.html#setwindowfilepath","text":"fontlab.YPanelWidget.setWindowFilePath = unbound qt slot setWindowFilePath of YPanelWidget type","title":"setWindowFilePath"},{"location":"fontlab.html#setwindowflags","text":"fontlab.YPanelWidget.setWindowFlags = unbound qt slot setWindowFlags of YPanelWidget type","title":"setWindowFlags"},{"location":"fontlab.html#setwindowicon","text":"fontlab.YPanelWidget.setWindowIcon = unbound qt slot setWindowIcon of YPanelWidget type","title":"setWindowIcon"},{"location":"fontlab.html#setwindowicontext","text":"fontlab.YPanelWidget.setWindowIconText = unbound qt slot setWindowIconText of YPanelWidget type","title":"setWindowIconText"},{"location":"fontlab.html#setwindowmodality","text":"fontlab.YPanelWidget.setWindowModality = unbound qt slot setWindowModality of YPanelWidget type","title":"setWindowModality"},{"location":"fontlab.html#setwindowmodified","text":"fontlab.YPanelWidget.setWindowModified = unbound qt slot setWindowModified of YPanelWidget type","title":"setWindowModified"},{"location":"fontlab.html#setwindowopacity","text":"fontlab.YPanelWidget.setWindowOpacity = unbound qt slot setWindowOpacity of YPanelWidget type","title":"setWindowOpacity"},{"location":"fontlab.html#setwindowrole","text":"fontlab.YPanelWidget.setWindowRole = unbound qt slot setWindowRole of YPanelWidget type","title":"setWindowRole"},{"location":"fontlab.html#setwindowstate","text":"fontlab.YPanelWidget.setWindowState = unbound qt slot setWindowState of YPanelWidget type","title":"setWindowState"},{"location":"fontlab.html#setwindowtitle","text":"fontlab.YPanelWidget.setWindowTitle = unbound qt slot setWindowTitle of YPanelWidget type","title":"setWindowTitle"},{"location":"fontlab.html#sharedpainter","text":"fontlab.YPanelWidget.sharedPainter = unbound qt slot py_q_sharedPainter of YPanelWidget type","title":"sharedPainter"},{"location":"fontlab.html#show","text":"fontlab.YPanelWidget.show = unbound qt slot show of YPanelWidget type","title":"show"},{"location":"fontlab.html#showevent","text":"fontlab.YPanelWidget.showEvent = unbound qt slot py_q_showEvent of YPanelWidget type","title":"showEvent"},{"location":"fontlab.html#showfullscreen","text":"fontlab.YPanelWidget.showFullScreen = unbound qt slot showFullScreen of YPanelWidget type","title":"showFullScreen"},{"location":"fontlab.html#showmaximized","text":"fontlab.YPanelWidget.showMaximized = unbound qt slot showMaximized of YPanelWidget type","title":"showMaximized"},{"location":"fontlab.html#showminimized","text":"fontlab.YPanelWidget.showMinimized = unbound qt slot showMinimized of YPanelWidget type","title":"showMinimized"},{"location":"fontlab.html#shownormal","text":"fontlab.YPanelWidget.showNormal = unbound qt slot showNormal of YPanelWidget type","title":"showNormal"},{"location":"fontlab.html#signalsblocked_1","text":"fontlab.YPanelWidget.signalsBlocked = unbound qt slot signalsBlocked of YPanelWidget type","title":"signalsBlocked"},{"location":"fontlab.html#stackunder","text":"fontlab.YPanelWidget.stackUnder = unbound qt slot stackUnder of YPanelWidget type","title":"stackUnder"},{"location":"fontlab.html#starttimer_1","text":"fontlab.YPanelWidget.startTimer = unbound qt slot startTimer of YPanelWidget type","title":"startTimer"},{"location":"fontlab.html#style","text":"fontlab.YPanelWidget.style = unbound qt slot style of YPanelWidget type","title":"style"},{"location":"fontlab.html#tabletevent","text":"fontlab.YPanelWidget.tabletEvent = unbound qt slot py_q_tabletEvent of YPanelWidget type","title":"tabletEvent"},{"location":"fontlab.html#testattribute","text":"fontlab.YPanelWidget.testAttribute = unbound qt slot testAttribute of YPanelWidget type","title":"testAttribute"},{"location":"fontlab.html#thread_1","text":"fontlab.YPanelWidget.thread = unbound qt slot thread of YPanelWidget type","title":"thread"},{"location":"fontlab.html#timerevent_1","text":"fontlab.YPanelWidget.timerEvent = unbound qt slot py_q_timerEvent of YPanelWidget type","title":"timerEvent"},{"location":"fontlab.html#tr_1","text":"fontlab.YPanelWidget.tr = unbound qt slot tr of YPanelWidget type","title":"tr"},{"location":"fontlab.html#undermouse","text":"fontlab.YPanelWidget.underMouse = unbound qt slot underMouse of YPanelWidget type","title":"underMouse"},{"location":"fontlab.html#ungrabgesture","text":"fontlab.YPanelWidget.ungrabGesture = unbound qt slot ungrabGesture of YPanelWidget type","title":"ungrabGesture"},{"location":"fontlab.html#unsetcursor","text":"fontlab.YPanelWidget.unsetCursor = unbound qt slot unsetCursor of YPanelWidget type","title":"unsetCursor"},{"location":"fontlab.html#unsetlayoutdirection","text":"fontlab.YPanelWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of YPanelWidget type","title":"unsetLayoutDirection"},{"location":"fontlab.html#unsetlocale","text":"fontlab.YPanelWidget.unsetLocale = unbound qt slot unsetLocale of YPanelWidget type","title":"unsetLocale"},{"location":"fontlab.html#update","text":"fontlab.YPanelWidget.update = unbound qt slot update of YPanelWidget type","title":"update"},{"location":"fontlab.html#updategeometry","text":"fontlab.YPanelWidget.updateGeometry = unbound qt slot updateGeometry of YPanelWidget type","title":"updateGeometry"},{"location":"fontlab.html#visibleregion","text":"fontlab.YPanelWidget.visibleRegion = unbound qt slot visibleRegion of YPanelWidget type","title":"visibleRegion"},{"location":"fontlab.html#wheelevent","text":"fontlab.YPanelWidget.wheelEvent = unbound qt slot py_q_wheelEvent of YPanelWidget type","title":"wheelEvent"},{"location":"fontlab.html#widthmm","text":"fontlab.YPanelWidget.widthMM = unbound qt slot widthMM of YPanelWidget type","title":"widthMM"},{"location":"fontlab.html#window","text":"fontlab.YPanelWidget.window = unbound qt slot window of YPanelWidget type","title":"window"},{"location":"fontlab.html#windowflags","text":"fontlab.YPanelWidget.windowFlags = unbound qt slot windowFlags of YPanelWidget type","title":"windowFlags"},{"location":"fontlab.html#windowhandle","text":"fontlab.YPanelWidget.windowHandle = unbound qt slot windowHandle of YPanelWidget type","title":"windowHandle"},{"location":"fontlab.html#windowrole","text":"fontlab.YPanelWidget.windowRole = unbound qt slot windowRole of YPanelWidget type","title":"windowRole"},{"location":"fontlab.html#windowstate","text":"fontlab.YPanelWidget.windowState = unbound qt slot windowState of YPanelWidget type","title":"windowState"},{"location":"fontlab.html#windowtype","text":"fontlab.YPanelWidget.windowType = unbound qt slot windowType of YPanelWidget type","title":"windowType"},{"location":"fontlab.html#winid","text":"fontlab.YPanelWidget.winId = unbound qt slot winId of YPanelWidget type","title":"winId"},{"location":"typerig.core.base.html","text":"typerig.core.base typerig . core .base # MODULE: TypeRig / Core / Base # ----------------------------------------------------------- # (C) Vassil Kateliev, 2015-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Package Contents message","title":"core.base"},{"location":"typerig.core.base.html#typerigcorebase","text":"","title":"typerig.core.base"},{"location":"typerig.core.base.message.html","text":"typerig.core.base.message typerig . core . base .message ( version 0.0.2) # MODULE: Typerig / Base / Messages (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules os warnings Classes exceptions.UserWarning ( exceptions.Warning ) ContourWarning FileImportWarning FileOpenWarning FileSaveWarning FontWarning GlyphWarning JSONimportWarning LayerWarning NAMdataMissing NAMimportWarning NodeWarning SVGimportWarning TXTimportWarning VFJimportWarning class ContourWarning ( exceptions.UserWarning ) Method resolution order: ContourWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class FileImportWarning ( exceptions.UserWarning ) Method resolution order: FileImportWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class FileOpenWarning ( exceptions.UserWarning ) Method resolution order: FileOpenWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class FileSaveWarning ( exceptions.UserWarning ) # -- IO Related --------------------- Method resolution order: FileSaveWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class FontWarning ( exceptions.UserWarning ) Method resolution order: FontWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class GlyphWarning ( exceptions.UserWarning ) Method resolution order: GlyphWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class JSONimportWarning ( exceptions.UserWarning ) Method resolution order: JSONimportWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class LayerWarning ( exceptions.UserWarning ) Method resolution order: LayerWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class NAMdataMissing ( exceptions.UserWarning ) Method resolution order: NAMdataMissing exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class NAMimportWarning ( exceptions.UserWarning ) Method resolution order: NAMimportWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class NodeWarning ( exceptions.UserWarning ) # - Warnings ------------------------- # -- Font related -------------------- Method resolution order: NodeWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class SVGimportWarning ( exceptions.UserWarning ) Method resolution order: SVGimportWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class TXTimportWarning ( exceptions.UserWarning ) Method resolution order: TXTimportWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message class VFJimportWarning ( exceptions.UserWarning ) Method resolution order: VFJimportWarning exceptions.UserWarning exceptions.Warning exceptions.Exception exceptions.BaseException builtin .object Descriptors weakref list of weak references to the object (if defined) Methods from exceptions.UserWarning init (...) x. __init__ (...) initializes x; see help(type(x)) for signature Attributes from exceptions.UserWarning new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Methods from exceptions.BaseException delattr (...) x. __delattr__ ('name') < ==> del x.name getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] getslice (...) x. __getslice__ (i, j) < ==> x[i:j] Use of negative indices is not supported. reduce (...) repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value setstate (...) str (...) x. __str__ () < ==> str(x) unicode (...) Descriptors from exceptions.BaseException dict args message Functions output (msg_type, app_name, message) # - Functions ------------------------ warning_custom (message, category, filename, lineno, file =None , line =None )","title":"core.base.message"},{"location":"typerig.core.base.message.html#typerigcorebasemessage","text":"","title":"typerig.core.base.message"},{"location":"typerig.core.fileio.cla.html","text":"typerig.core.fileio.cla typerig . core . fileio .cla ( version 0.1.0) # MODULE: Typerig / IO / DTL CLA Parser (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules typerig.core.base.message os warnings Classes builtin .object CLAparser class CLAparser ( builtin .object ) # - Classes -------------------------- Methods enter (self) exit (self, type, val, tb) init (self, file_path, file_mode ='r' ) iter (self) next (self) dump (self, pair_list, user_info ='' ) next (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined)","title":"core.fileio.cla"},{"location":"typerig.core.fileio.cla.html#typerigcorefileiocla","text":"","title":"typerig.core.fileio.cla"},{"location":"typerig.core.fileio.flc.html","text":"typerig.core.fileio.flc typerig . core . fileio .flc ( version 0.2.4) # MODULE: Typerig / IO / Fontlab class parser (.flc) # ------------------------------------------------------ # (C) Vassil Kateliev, 2017 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #-------------------------------------------------------- # www.typerig.com Classes builtin .object fontClassesFromFile class fontClassesFromFile ( builtin .object ) Loads a Fontlab class file (.flc) and parses it. Args: fileName (str) : a path to Fontlab class file Returns: Object with methods: .fontClasses (dict -> class_name:class_contents) .metricClasses (dict -> class_name:class_contents) .kernClasses (dict -> class_name:class_contents) .otClasses (dict -> class_name:class_contents) .classPosition (Left and/or Right pair(s)); Metric (Left, Width, Right) .classLeader (dict -> class_name:class_leader) Methods init (self, fileName) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) fontClassesFromFile typerig.core.fileio.flc.fontClassesFromFile = class fontClassesFromFile ( __builtin__.object ) Loads a Fontlab class file (.flc) and parses it. Args: fileName (str) : a path to Fontlab class file Returns: Object with methods: .fontClasses (dict -> class_name:class_contents) .metricClasses (dict -> class_name:class_contents) .kernClasses (dict -> class_name:class_contents) .otClasses (dict -> class_name:class_contents) .classPosition (Left and/or Right pair(s)); Metric (Left, Width, Right) .classLeader (dict -> class_name:class_leader) Methods __init__ (self, fileName) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"core.fileio.flc"},{"location":"typerig.core.fileio.flc.html#typerigcorefileioflc","text":"","title":"typerig.core.fileio.flc"},{"location":"typerig.core.fileio.flc.html#fontclassesfromfile","text":"","title":"fontClassesFromFile"},{"location":"typerig.core.fileio.krn.html","text":"typerig.core.fileio.krn typerig . core . fileio .krn ( version 0.1.0) # MODULE: Typerig / IO / DTL KRN Parser (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules typerig.core.base.message os warnings Classes builtin .object KRNparser class KRNparser ( builtin .object ) # - Classes -------------------------- Methods enter (self) exit (self, type, val, tb) init (self, file_path, file_mode ='r' ) iter (self) next (self) dump (self, pair_list, user_info ='' ) next (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined)","title":"core.fileio.krn"},{"location":"typerig.core.fileio.krn.html#typerigcorefileiokrn","text":"","title":"typerig.core.fileio.krn"},{"location":"typerig.core.fileio.html","text":"typerig.core.fileio typerig . core .fileio # MODULE: TypeRig / Core / File IO # ----------------------------------------------------------- # (C) Vassil Kateliev, 2015-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Package Contents cla flc krn nam","title":"core.fileio"},{"location":"typerig.core.fileio.html#typerigcorefileio","text":"","title":"typerig.core.fileio"},{"location":"typerig.core.fileio.nam.html","text":"typerig.core.fileio.nam typerig . core . fileio .nam ( version 0.0.3) # MODULE: Typerig / IO / Fontlab NAM Parser (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules os warnings Classes builtin .object NAMparser class NAMparser ( builtin .object ) # - Classes -------------------------- Methods enter (self) exit (self, type, val, tb) init (self, file_path) iter (self) next (self) next (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined)","title":"core.fileio.nam"},{"location":"typerig.core.fileio.nam.html#typerigcorefileionam","text":"","title":"typerig.core.fileio.nam"},{"location":"typerig.core.func.collection.html","text":"typerig.core.func.collection typerig . core . func .collection ( version 0.26.1) # MODULE: TypeRig / Core / Collection (Functions) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Functions combineReccuringItems (listItems) Combines recurring items in [listItems] and returns a list containing sets of grouped items enumerateWithStart (sequence, start =0 ) Performs [enumerate] of a [sequence] with added [start] functionality (available in Python 2.6) groupConsecutives (listItems, step =1 ) Build a list of lists containig consecutive numbers from [listItems] (number list) within [step] mergeDicts (d1, d2, merge = function lambda ) Merges two dictionaries [d1, d2], combining values on duplicate keys as defined by the optional [merge] function. -------- Example: merge(d1, d2, lambda x,y: x+y) -> {'a': 2, 'c': 6, 'b': 4} unpack (listItems) Unpacks all items form [listItems] containing other lists, sets and etc. mergeDicts typerig.core.func.collection.mergeDicts = mergeDicts (d1, d2, merge = function lambda ) Merges two dictionaries [d1, d2], combining values on duplicate keys as defined by the optional [merge] function. -------- Example: merge(d1, d2, lambda x,y: x+y) -> {'a': 2, 'c': 6, 'b': 4} unpack typerig.core.func.collection.unpack = unpack (listItems) Unpacks all items form [listItems] containing other lists, sets and etc. enumerateWithStart typerig.core.func.collection.enumerateWithStart = enumerateWithStart (sequence, start =0 ) Performs [enumerate] of a [sequence] with added [start] functionality (available in Python 2.6) combineReccuringItems typerig.core.func.collection.combineReccuringItems = combineReccuringItems (listItems) Combines recurring items in [listItems] and returns a list containing sets of grouped items groupConsecutives typerig.core.func.collection.groupConsecutives = groupConsecutives (listItems, step =1 ) Build a list of lists containig consecutive numbers from [listItems] (number list) within [step]","title":"core.func.collection"},{"location":"typerig.core.func.collection.html#typerigcorefunccollection","text":"","title":"typerig.core.func.collection"},{"location":"typerig.core.func.collection.html#mergedicts","text":"typerig.core.func.collection.mergeDicts = mergeDicts (d1, d2, merge = function lambda ) Merges two dictionaries [d1, d2], combining values on duplicate keys as defined by the optional [merge] function. -------- Example: merge(d1, d2, lambda x,y: x+y) -> {'a': 2, 'c': 6, 'b': 4}","title":"mergeDicts"},{"location":"typerig.core.func.collection.html#unpack","text":"typerig.core.func.collection.unpack = unpack (listItems) Unpacks all items form [listItems] containing other lists, sets and etc.","title":"unpack"},{"location":"typerig.core.func.collection.html#enumeratewithstart","text":"typerig.core.func.collection.enumerateWithStart = enumerateWithStart (sequence, start =0 ) Performs [enumerate] of a [sequence] with added [start] functionality (available in Python 2.6)","title":"enumerateWithStart"},{"location":"typerig.core.func.collection.html#combinereccuringitems","text":"typerig.core.func.collection.combineReccuringItems = combineReccuringItems (listItems) Combines recurring items in [listItems] and returns a list containing sets of grouped items","title":"combineReccuringItems"},{"location":"typerig.core.func.collection.html#groupconsecutives","text":"typerig.core.func.collection.groupConsecutives = groupConsecutives (listItems, step =1 ) Build a list of lists containig consecutive numbers from [listItems] (number list) within [step]","title":"groupConsecutives"},{"location":"typerig.core.func.geometry.html","text":"typerig.core.func.geometry typerig . core . func .geometry ( version 0.26.2) # MODULE: TypeRig / Core / Analytic geometry (Functions) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2015-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math Functions ccw (A, B, C) Tests whether the turn formed by points A, B, and C is Counter clock wise (CCW) checkInnerOuter (firstAngle, lastAngle) Check if connection is inner or outer. Adapted from RoboFont pens. (NOTE: To be deleted) checkSmooth (firstAngle, lastAngle, error =4 ) Check if connection is smooth within error margin. Adapted from RoboFont pens. (NOTE: To be deleted) get_angle (x, y, degrees =True ) Return angle for given X,Y displacement from origin intersect (A, B, C, D) Tests whether A,B and C,D intersect line_angle (p0, p1, degrees =True ) Find angle between two points forming a line Args: p0, p1 -> tuple(x, y); degrees -> bool Returns: radians or degrees line_intersect (a0, a1, b0, b1) Find intersection between two lines Args: a0, a1, b0, b1 -> tuple(x, y); Returns: intersect node -> tuple(x,y) line_slope (p0, p1) Find slope between two points forming a line Args: p0, p1 -> tuple(x, y) Returns: float or NAN line_solve_x (p0, p1, y) Solve line equation for X coordinate by given Y. line_solve_y (p0, p1, x) Solve line equation for Y coordinate by given X. line_y_intercept (p0, p1) Find Y intercept of line equation for line formed by two points Args: p0, p1 -> tuple(x, y) Returns: intercept node -> tuple(x,y) point_in_polygon (point, polygon) Point in Polygon test Args: point -> tuple(x, y); polygon -> tuple(tuple(x0, y1)...tuple(xn, yn)); Returns: Bool point_in_triangle (point, triangle) Point in triangle test Args: point -> tuple(x, y); triangle -> tuple(tuple(x0, y0), tuple(x1, y1), tuple(x2, y2)) Returns: Bool point_rotate (center, point, angle) Rotate point around center point with angle (in degrees) Args: center, point -> tuple(x, y); angle -> float; Returns: new point coordinates -> tuple(x,y) get_angle typerig.core.func.geometry.get_angle = get_angle (x, y, degrees =True ) Return angle for given X,Y displacement from origin ccw typerig.core.func.geometry.ccw = ccw (A, B, C) Tests whether the turn formed by points A, B, and C is Counter clock wise (CCW) intersect typerig.core.func.geometry.intersect = intersect (A, B, C, D) Tests whether A,B and C,D intersect point_in_triangle typerig.core.func.geometry.point_in_triangle = point_in_triangle (point, triangle) Point in triangle test Args: point -> tuple(x, y); triangle -> tuple(tuple(x0, y0), tuple(x1, y1), tuple(x2, y2)) Returns: Bool point_in_polygon typerig.core.func.geometry.point_in_polygon = point_in_polygon (point, polygon) Point in Polygon test Args: point -> tuple(x, y); polygon -> tuple(tuple(x0, y1)...tuple(xn, yn)); Returns: Bool point_rotate typerig.core.func.geometry.point_rotate = point_rotate (center, point, angle) Rotate point around center point with angle (in degrees) Args: center, point -> tuple(x, y); angle -> float; Returns: new point coordinates -> tuple(x,y) line_slope typerig.core.func.geometry.line_slope = line_slope (p0, p1) Find slope between two points forming a line Args: p0, p1 -> tuple(x, y) Returns: float or NAN line_angle typerig.core.func.geometry.line_angle = line_angle (p0, p1, degrees =True ) Find angle between two points forming a line Args: p0, p1 -> tuple(x, y); degrees -> bool Returns: radians or degrees line_y_intercept typerig.core.func.geometry.line_y_intercept = line_y_intercept (p0, p1) Find Y intercept of line equation for line formed by two points Args: p0, p1 -> tuple(x, y) Returns: intercept node -> tuple(x,y) line_solve_y typerig.core.func.geometry.line_solve_y = line_solve_y (p0, p1, x) Solve line equation for Y coordinate by given X. line_solve_x typerig.core.func.geometry.line_solve_x = line_solve_x (p0, p1, y) Solve line equation for X coordinate by given Y. line_intersect typerig.core.func.geometry.line_intersect = line_intersect (a0, a1, b0, b1) Find intersection between two lines Args: a0, a1, b0, b1 -> tuple(x, y); Returns: intersect node -> tuple(x,y) checkSmooth typerig.core.func.geometry.checkSmooth = checkSmooth (firstAngle, lastAngle, error =4 ) Check if connection is smooth within error margin. Adapted from RoboFont pens. (NOTE: To be deleted) checkInnerOuter typerig.core.func.geometry.checkInnerOuter = checkInnerOuter (firstAngle, lastAngle) Check if connection is inner or outer. Adapted from RoboFont pens. (NOTE: To be deleted)","title":"core.func.geometry"},{"location":"typerig.core.func.geometry.html#typerigcorefuncgeometry","text":"","title":"typerig.core.func.geometry"},{"location":"typerig.core.func.geometry.html#get_angle","text":"typerig.core.func.geometry.get_angle = get_angle (x, y, degrees =True ) Return angle for given X,Y displacement from origin","title":"get_angle"},{"location":"typerig.core.func.geometry.html#ccw","text":"typerig.core.func.geometry.ccw = ccw (A, B, C) Tests whether the turn formed by points A, B, and C is Counter clock wise (CCW)","title":"ccw"},{"location":"typerig.core.func.geometry.html#intersect","text":"typerig.core.func.geometry.intersect = intersect (A, B, C, D) Tests whether A,B and C,D intersect","title":"intersect"},{"location":"typerig.core.func.geometry.html#point_in_triangle","text":"typerig.core.func.geometry.point_in_triangle = point_in_triangle (point, triangle) Point in triangle test Args: point -> tuple(x, y); triangle -> tuple(tuple(x0, y0), tuple(x1, y1), tuple(x2, y2)) Returns: Bool","title":"point_in_triangle"},{"location":"typerig.core.func.geometry.html#point_in_polygon","text":"typerig.core.func.geometry.point_in_polygon = point_in_polygon (point, polygon) Point in Polygon test Args: point -> tuple(x, y); polygon -> tuple(tuple(x0, y1)...tuple(xn, yn)); Returns: Bool","title":"point_in_polygon"},{"location":"typerig.core.func.geometry.html#point_rotate","text":"typerig.core.func.geometry.point_rotate = point_rotate (center, point, angle) Rotate point around center point with angle (in degrees) Args: center, point -> tuple(x, y); angle -> float; Returns: new point coordinates -> tuple(x,y)","title":"point_rotate"},{"location":"typerig.core.func.geometry.html#line_slope","text":"typerig.core.func.geometry.line_slope = line_slope (p0, p1) Find slope between two points forming a line Args: p0, p1 -> tuple(x, y) Returns: float or NAN","title":"line_slope"},{"location":"typerig.core.func.geometry.html#line_angle","text":"typerig.core.func.geometry.line_angle = line_angle (p0, p1, degrees =True ) Find angle between two points forming a line Args: p0, p1 -> tuple(x, y); degrees -> bool Returns: radians or degrees","title":"line_angle"},{"location":"typerig.core.func.geometry.html#line_y_intercept","text":"typerig.core.func.geometry.line_y_intercept = line_y_intercept (p0, p1) Find Y intercept of line equation for line formed by two points Args: p0, p1 -> tuple(x, y) Returns: intercept node -> tuple(x,y)","title":"line_y_intercept"},{"location":"typerig.core.func.geometry.html#line_solve_y","text":"typerig.core.func.geometry.line_solve_y = line_solve_y (p0, p1, x) Solve line equation for Y coordinate by given X.","title":"line_solve_y"},{"location":"typerig.core.func.geometry.html#line_solve_x","text":"typerig.core.func.geometry.line_solve_x = line_solve_x (p0, p1, y) Solve line equation for X coordinate by given Y.","title":"line_solve_x"},{"location":"typerig.core.func.geometry.html#line_intersect","text":"typerig.core.func.geometry.line_intersect = line_intersect (a0, a1, b0, b1) Find intersection between two lines Args: a0, a1, b0, b1 -> tuple(x, y); Returns: intersect node -> tuple(x,y)","title":"line_intersect"},{"location":"typerig.core.func.geometry.html#checksmooth","text":"typerig.core.func.geometry.checkSmooth = checkSmooth (firstAngle, lastAngle, error =4 ) Check if connection is smooth within error margin. Adapted from RoboFont pens. (NOTE: To be deleted)","title":"checkSmooth"},{"location":"typerig.core.func.geometry.html#checkinnerouter","text":"typerig.core.func.geometry.checkInnerOuter = checkInnerOuter (firstAngle, lastAngle) Check if connection is inner or outer. Adapted from RoboFont pens. (NOTE: To be deleted)","title":"checkInnerOuter"},{"location":"typerig.core.func.math.html","text":"math math Module Docs This module is always available. It provides access to the mathematical functions defined by the C standard. Functions acos (...) acos (x) Return the arc cosine (measured in radians) of x. acosh (...) acosh (x) Return the inverse hyperbolic cosine of x. asin (...) asin (x) Return the arc sine (measured in radians) of x. asinh (...) asinh (x) Return the inverse hyperbolic sine of x. atan (...) atan (x) Return the arc tangent (measured in radians) of x. atan2 (...) atan2 (y, x) Return the arc tangent (measured in radians) of y/x. Unlike atan (y/x), the signs of both x and y are considered. atanh (...) atanh (x) Return the inverse hyperbolic tangent of x. ceil (...) ceil (x) Return the ceiling of x as a float. This is the smallest integral value >= x. copysign (...) copysign (x, y) Return x with the sign of y. cos (...) cos (x) Return the cosine of x (measured in radians). cosh (...) cosh (x) Return the hyperbolic cosine of x. degrees (...) degrees (x) Convert angle x from radians to degrees. erf (...) erf (x) Error function at x. erfc (...) erfc (x) Complementary error function at x. exp (...) exp (x) Return e raised to the power of x. expm1 (...) expm1 (x) Return exp (x)-1. This function avoids the loss of precision involved in the direct evaluation of exp (x)-1 for small x. fabs (...) fabs (x) Return the absolute value of the float x. factorial (...) factorial (x) -> Integral Find x!. Raise a ValueError if x is negative or non-integral. floor (...) floor (x) Return the floor of x as a float. This is the largest integral value < = x. fmod (...) fmod (x, y) Return fmod (x, y), according to platform C. x % y may differ. frexp (...) frexp (x) Return the mantissa and exponent of x, as pair (m, e). m is a float and e is an int, such that x = m * 2.**e. If x is 0, m and e are both 0. Else 0.5 < = abs(m) < 1.0. fsum (...) fsum (iterable) Return an accurate floating point sum of values in the iterable. Assumes IEEE-754 floating point arithmetic. gamma (...) gamma (x) Gamma function at x. hypot (...) hypot (x, y) Return the Euclidean distance, sqrt (x*x + y*y). isinf (...) isinf (x) -> bool Check if float x is infinite (positive or negative). isnan (...) isnan (x) -> bool Check if float x is not a number (NaN). ldexp (...) ldexp (x, i) Return x * (2**i). lgamma (...) lgamma (x) Natural logarithm of absolute value of Gamma function at x. log (...) log (x[, base]) Return the logarithm of x to the given base. If the base not specified, returns the natural logarithm (base e) of x. log10 (...) log10 (x) Return the base 10 logarithm of x. log1p (...) log1p (x) Return the natural logarithm of 1+x (base e). The result is computed in a way which is accurate for x near zero. modf (...) modf (x) Return the fractional and integer parts of x. Both results carry the sign of x and are floats. pow (...) pow (x, y) Return x**y (x to the power of y). radians (...) radians (x) Convert angle x from degrees to radians. sin (...) sin (x) Return the sine of x (measured in radians). sinh (...) sinh (x) Return the hyperbolic sine of x. sqrt (...) sqrt (x) Return the square root of x. tan (...) tan (x) Return the tangent of x (measured in radians). tanh (...) tanh (x) Return the hyperbolic tangent of x. trunc (...) trunc (x:Real) -> Integral Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method. acos typerig.core.func.math.acos = acos (...) acos(x) Return the arc cosine (measured in radians) of x. acosh typerig.core.func.math.acosh = acosh (...) acosh(x) Return the inverse hyperbolic cosine of x. asin typerig.core.func.math.asin = asin (...) asin(x) Return the arc sine (measured in radians) of x. asinh typerig.core.func.math.asinh = asinh (...) asinh(x) Return the inverse hyperbolic sine of x. atan typerig.core.func.math.atan = atan (...) atan(x) Return the arc tangent (measured in radians) of x. atan2 typerig.core.func.math.atan2 = atan2 (...) atan2(y, x) Return the arc tangent (measured in radians) of y/x. Unlike atan(y/x), the signs of both x and y are considered. atanh typerig.core.func.math.atanh = atanh (...) atanh(x) Return the inverse hyperbolic tangent of x. ceil typerig.core.func.math.ceil = ceil (...) ceil(x) Return the ceiling of x as a float. This is the smallest integral value >= x. copysign typerig.core.func.math.copysign = copysign (...) copysign(x, y) Return x with the sign of y. cos typerig.core.func.math.cos = cos (...) cos(x) Return the cosine of x (measured in radians). cosh typerig.core.func.math.cosh = cosh (...) cosh(x) Return the hyperbolic cosine of x. degrees typerig.core.func.math.degrees = degrees (...) degrees(x) Convert angle x from radians to degrees. erf typerig.core.func.math.erf = erf (...) erf(x) Error function at x. erfc typerig.core.func.math.erfc = erfc (...) erfc(x) Complementary error function at x. exp typerig.core.func.math.exp = exp (...) exp(x) Return e raised to the power of x. expm1 typerig.core.func.math.expm1 = expm1 (...) expm1(x) Return exp(x)-1. This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x. fabs typerig.core.func.math.fabs = fabs (...) fabs(x) Return the absolute value of the float x. factorial typerig.core.func.math.factorial = factorial (...) factorial(x) -> Integral Find x!. Raise a ValueError if x is negative or non-integral. floor typerig.core.func.math.floor = floor (...) floor(x) Return the floor of x as a float. This is the largest integral value < = x. fmod typerig.core.func.math.fmod = fmod (...) fmod(x, y) Return fmod(x, y), according to platform C. x % y may differ. frexp typerig.core.func.math.frexp = frexp (...) frexp(x) Return the mantissa and exponent of x, as pair (m, e). m is a float and e is an int, such that x = m * 2.**e. If x is 0, m and e are both 0. Else 0.5 < = abs(m) < 1.0. fsum typerig.core.func.math.fsum = fsum (...) fsum(iterable) Return an accurate floating point sum of values in the iterable. Assumes IEEE-754 floating point arithmetic. gamma typerig.core.func.math.gamma = gamma (...) gamma(x) Gamma function at x. hypot typerig.core.func.math.hypot = hypot (...) hypot(x, y) Return the Euclidean distance, sqrt(x*x + y*y). isinf typerig.core.func.math.isinf = isinf (...) isinf(x) -> bool Check if float x is infinite (positive or negative). isnan typerig.core.func.math.isnan = isnan (...) isnan(x) -> bool Check if float x is not a number (NaN). ldexp typerig.core.func.math.ldexp = ldexp (...) ldexp(x, i) Return x * (2**i). lgamma typerig.core.func.math.lgamma = lgamma (...) lgamma(x) Natural logarithm of absolute value of Gamma function at x. log typerig.core.func.math.log = log (...) log(x[, base]) Return the logarithm of x to the given base. If the base not specified, returns the natural logarithm (base e) of x. log10 typerig.core.func.math.log10 = log10 (...) log10(x) Return the base 10 logarithm of x. log1p typerig.core.func.math.log1p = log1p (...) log1p(x) Return the natural logarithm of 1+x (base e). The result is computed in a way which is accurate for x near zero. modf typerig.core.func.math.modf = modf (...) modf(x) Return the fractional and integer parts of x. Both results carry the sign of x and are floats. pow typerig.core.func.math.pow = pow (...) pow(x, y) Return x**y (x to the power of y). radians typerig.core.func.math.radians = radians (...) radians(x) Convert angle x from degrees to radians. sin typerig.core.func.math.sin = sin (...) sin(x) Return the sine of x (measured in radians). sinh typerig.core.func.math.sinh = sinh (...) sinh(x) Return the hyperbolic sine of x. sqrt typerig.core.func.math.sqrt = sqrt (...) sqrt(x) Return the square root of x. tan typerig.core.func.math.tan = tan (...) tan(x) Return the tangent of x (measured in radians). tanh typerig.core.func.math.tanh = tanh (...) tanh(x) Return the hyperbolic tangent of x. trunc typerig.core.func.math.trunc = trunc (...) trunc(x:Real) -> Integral Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.","title":"core.func.math"},{"location":"typerig.core.func.math.html#math","text":"","title":"math"},{"location":"typerig.core.func.math.html#acos","text":"typerig.core.func.math.acos = acos (...) acos(x) Return the arc cosine (measured in radians) of x.","title":"acos"},{"location":"typerig.core.func.math.html#acosh","text":"typerig.core.func.math.acosh = acosh (...) acosh(x) Return the inverse hyperbolic cosine of x.","title":"acosh"},{"location":"typerig.core.func.math.html#asin","text":"typerig.core.func.math.asin = asin (...) asin(x) Return the arc sine (measured in radians) of x.","title":"asin"},{"location":"typerig.core.func.math.html#asinh","text":"typerig.core.func.math.asinh = asinh (...) asinh(x) Return the inverse hyperbolic sine of x.","title":"asinh"},{"location":"typerig.core.func.math.html#atan","text":"typerig.core.func.math.atan = atan (...) atan(x) Return the arc tangent (measured in radians) of x.","title":"atan"},{"location":"typerig.core.func.math.html#atan2","text":"typerig.core.func.math.atan2 = atan2 (...) atan2(y, x) Return the arc tangent (measured in radians) of y/x. Unlike atan(y/x), the signs of both x and y are considered.","title":"atan2"},{"location":"typerig.core.func.math.html#atanh","text":"typerig.core.func.math.atanh = atanh (...) atanh(x) Return the inverse hyperbolic tangent of x.","title":"atanh"},{"location":"typerig.core.func.math.html#ceil","text":"typerig.core.func.math.ceil = ceil (...) ceil(x) Return the ceiling of x as a float. This is the smallest integral value >= x.","title":"ceil"},{"location":"typerig.core.func.math.html#copysign","text":"typerig.core.func.math.copysign = copysign (...) copysign(x, y) Return x with the sign of y.","title":"copysign"},{"location":"typerig.core.func.math.html#cos","text":"typerig.core.func.math.cos = cos (...) cos(x) Return the cosine of x (measured in radians).","title":"cos"},{"location":"typerig.core.func.math.html#cosh","text":"typerig.core.func.math.cosh = cosh (...) cosh(x) Return the hyperbolic cosine of x.","title":"cosh"},{"location":"typerig.core.func.math.html#degrees","text":"typerig.core.func.math.degrees = degrees (...) degrees(x) Convert angle x from radians to degrees.","title":"degrees"},{"location":"typerig.core.func.math.html#erf","text":"typerig.core.func.math.erf = erf (...) erf(x) Error function at x.","title":"erf"},{"location":"typerig.core.func.math.html#erfc","text":"typerig.core.func.math.erfc = erfc (...) erfc(x) Complementary error function at x.","title":"erfc"},{"location":"typerig.core.func.math.html#exp","text":"typerig.core.func.math.exp = exp (...) exp(x) Return e raised to the power of x.","title":"exp"},{"location":"typerig.core.func.math.html#expm1","text":"typerig.core.func.math.expm1 = expm1 (...) expm1(x) Return exp(x)-1. This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.","title":"expm1"},{"location":"typerig.core.func.math.html#fabs","text":"typerig.core.func.math.fabs = fabs (...) fabs(x) Return the absolute value of the float x.","title":"fabs"},{"location":"typerig.core.func.math.html#factorial","text":"typerig.core.func.math.factorial = factorial (...) factorial(x) -> Integral Find x!. Raise a ValueError if x is negative or non-integral.","title":"factorial"},{"location":"typerig.core.func.math.html#floor","text":"typerig.core.func.math.floor = floor (...) floor(x) Return the floor of x as a float. This is the largest integral value < = x.","title":"floor"},{"location":"typerig.core.func.math.html#fmod","text":"typerig.core.func.math.fmod = fmod (...) fmod(x, y) Return fmod(x, y), according to platform C. x % y may differ.","title":"fmod"},{"location":"typerig.core.func.math.html#frexp","text":"typerig.core.func.math.frexp = frexp (...) frexp(x) Return the mantissa and exponent of x, as pair (m, e). m is a float and e is an int, such that x = m * 2.**e. If x is 0, m and e are both 0. Else 0.5 < = abs(m) < 1.0.","title":"frexp"},{"location":"typerig.core.func.math.html#fsum","text":"typerig.core.func.math.fsum = fsum (...) fsum(iterable) Return an accurate floating point sum of values in the iterable. Assumes IEEE-754 floating point arithmetic.","title":"fsum"},{"location":"typerig.core.func.math.html#gamma","text":"typerig.core.func.math.gamma = gamma (...) gamma(x) Gamma function at x.","title":"gamma"},{"location":"typerig.core.func.math.html#hypot","text":"typerig.core.func.math.hypot = hypot (...) hypot(x, y) Return the Euclidean distance, sqrt(x*x + y*y).","title":"hypot"},{"location":"typerig.core.func.math.html#isinf","text":"typerig.core.func.math.isinf = isinf (...) isinf(x) -> bool Check if float x is infinite (positive or negative).","title":"isinf"},{"location":"typerig.core.func.math.html#isnan","text":"typerig.core.func.math.isnan = isnan (...) isnan(x) -> bool Check if float x is not a number (NaN).","title":"isnan"},{"location":"typerig.core.func.math.html#ldexp","text":"typerig.core.func.math.ldexp = ldexp (...) ldexp(x, i) Return x * (2**i).","title":"ldexp"},{"location":"typerig.core.func.math.html#lgamma","text":"typerig.core.func.math.lgamma = lgamma (...) lgamma(x) Natural logarithm of absolute value of Gamma function at x.","title":"lgamma"},{"location":"typerig.core.func.math.html#log","text":"typerig.core.func.math.log = log (...) log(x[, base]) Return the logarithm of x to the given base. If the base not specified, returns the natural logarithm (base e) of x.","title":"log"},{"location":"typerig.core.func.math.html#log10","text":"typerig.core.func.math.log10 = log10 (...) log10(x) Return the base 10 logarithm of x.","title":"log10"},{"location":"typerig.core.func.math.html#log1p","text":"typerig.core.func.math.log1p = log1p (...) log1p(x) Return the natural logarithm of 1+x (base e). The result is computed in a way which is accurate for x near zero.","title":"log1p"},{"location":"typerig.core.func.math.html#modf","text":"typerig.core.func.math.modf = modf (...) modf(x) Return the fractional and integer parts of x. Both results carry the sign of x and are floats.","title":"modf"},{"location":"typerig.core.func.math.html#pow","text":"typerig.core.func.math.pow = pow (...) pow(x, y) Return x**y (x to the power of y).","title":"pow"},{"location":"typerig.core.func.math.html#radians","text":"typerig.core.func.math.radians = radians (...) radians(x) Convert angle x from degrees to radians.","title":"radians"},{"location":"typerig.core.func.math.html#sin","text":"typerig.core.func.math.sin = sin (...) sin(x) Return the sine of x (measured in radians).","title":"sin"},{"location":"typerig.core.func.math.html#sinh","text":"typerig.core.func.math.sinh = sinh (...) sinh(x) Return the hyperbolic sine of x.","title":"sinh"},{"location":"typerig.core.func.math.html#sqrt","text":"typerig.core.func.math.sqrt = sqrt (...) sqrt(x) Return the square root of x.","title":"sqrt"},{"location":"typerig.core.func.math.html#tan","text":"typerig.core.func.math.tan = tan (...) tan(x) Return the tangent of x (measured in radians).","title":"tan"},{"location":"typerig.core.func.math.html#tanh","text":"typerig.core.func.math.tanh = tanh (...) tanh(x) Return the hyperbolic tangent of x.","title":"tanh"},{"location":"typerig.core.func.math.html#trunc","text":"typerig.core.func.math.trunc = trunc (...) trunc(x:Real) -> Integral Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.","title":"trunc"},{"location":"typerig.core.func.html","text":"typerig.core.func typerig . core .func ( version 0.26.0) # MODULE: TypeRig / Core / Functions # ----------------------------------------------------------- # (C) Vassil Kateliev, 2015-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Package Contents collection geometry math string transform utils","title":"core.func"},{"location":"typerig.core.func.html#typerigcorefunc","text":"","title":"typerig.core.func"},{"location":"typerig.core.func.string.html","text":"typerig.core.func.string typerig . core . func .string ( version 0.26.2) # MODULE: TypeRig / Core / String (Functions) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2015-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Functions getLowercaseCodepoint (unicodeName) Based on given Uppercase Unicode Name (String) returns coresponding Lowercase Unicode Name! Names are in Adobe uniXXXX format getLowercaseInt (uniocdeInt) Based on given Uppercase Unicode (Integer) returns coresponding Lowercase Unicode (Integer) getUppercaseCodepoint (unicodeName) Based on given Uppercase Unicode Name (String) returns coresponding Uppercase Unicode Name! Names are in Adobe uniXXXX format getUppercaseInt (uniocdeInt) Based on given Lowercase Uniocde (Integer) returns coresponding Uppercase Unicode (Integer) kpxGen (inputA, inputB, suffix =('', '') ) Generate AMF style KPX paris for kerning lst2str (listItems, separator) Converts [listItems] to 'String' using 'String separator' Example: lst2str ([List], ',') lstcln (listItems, discard) Cleans a [listItems] by removing [discard] Example: lstcln ([List], '/space') str2lst (stringItems, separator) Converts 'stringItems' to [List] using 'String separator' Example: str2lst (String, ',') strNormSpace (string) Removes all mutiple /space characters from [string] strRepDict (stringItems, replacementDicionary, method ='replace' ) Replaces every instance of [stringItems] according to [replacementDicionary] using 'replace' ('r') or 'consecutive' replacement ('c') [method]s Example: strRepDict ('12', {'1':'/one', '2':'/two'}, 'r') stringGen (inputA, inputB, filler =('HH', 'HH') , genPattern ='FL A B A FR' , suffix =('', '') , sep ='/' ) Generate test text string for metrics, kerning and pairs/phrases Args: inputA, inputB (list/string) : Input lists to be paired filler (tuple(str)) : Filler string genPattern (string): A SPACE separated ordering pattern, where FL, FR is Filler Left/Right and A, B are input strings suffix (tuple(str)) : Suffixes to be added to inputs A and B sep (str) : Glyph Separator to be used. '/' default for Fontlab Returns: list(str) stringGenPairs (pairs_input, filler =('HH', 'HH') , genPattern ='FL A B A FR' , suffix =('', '') , sep ='/' ) Generate test text string for metrics, kerning and pairs/phrases Args: pairs_input (list(tuple)): Input list contaiing pairs filler (tuple(str)) : Filler string genPattern (string): A SPACE separated ordering pattern, where FL, FR is Filler Left/Right and A, B are input strings suffix (tuple(str)) : Suffixes to be added to inputs A and B sep (str) : Glyph Separator to be used. '/' default for Fontlab Returns: list(str) getLowercaseInt typerig.core.func.string.getLowercaseInt = getLowercaseInt (uniocdeInt) Based on given Uppercase Unicode (Integer) returns coresponding Lowercase Unicode (Integer) getUppercaseInt typerig.core.func.string.getUppercaseInt = getUppercaseInt (uniocdeInt) Based on given Lowercase Uniocde (Integer) returns coresponding Uppercase Unicode (Integer) getLowercaseCodepoint typerig.core.func.string.getLowercaseCodepoint = getLowercaseCodepoint (unicodeName) Based on given Uppercase Unicode Name (String) returns coresponding Lowercase Unicode Name! Names are in Adobe uniXXXX format getUppercaseCodepoint typerig.core.func.string.getUppercaseCodepoint = getUppercaseCodepoint (unicodeName) Based on given Uppercase Unicode Name (String) returns coresponding Uppercase Unicode Name! Names are in Adobe uniXXXX format kpxGen typerig.core.func.string.kpxGen = kpxGen (inputA, inputB, suffix =('', '') ) Generate AMF style KPX paris for kerning stringGen typerig.core.func.string.stringGen = stringGen (inputA, inputB, filler =('HH', 'HH') , genPattern ='FL A B A FR' , suffix =('', '') , sep ='/' ) Generate test text string for metrics, kerning and pairs/phrases Args: inputA, inputB (list/string) : Input lists to be paired filler (tuple(str)) : Filler string genPattern (string): A SPACE separated ordering pattern, where FL, FR is Filler Left/Right and A, B are input strings suffix (tuple(str)) : Suffixes to be added to inputs A and B sep (str) : Glyph Separator to be used. '/' default for Fontlab Returns: list(str) stringGenPairs typerig.core.func.string.stringGenPairs = stringGenPairs (pairs_input, filler =('HH', 'HH') , genPattern ='FL A B A FR' , suffix =('', '') , sep ='/' ) Generate test text string for metrics, kerning and pairs/phrases Args: pairs_input (list(tuple)): Input list contaiing pairs filler (tuple(str)) : Filler string genPattern (string): A SPACE separated ordering pattern, where FL, FR is Filler Left/Right and A, B are input strings suffix (tuple(str)) : Suffixes to be added to inputs A and B sep (str) : Glyph Separator to be used. '/' default for Fontlab Returns: list(str) strNormSpace typerig.core.func.string.strNormSpace = strNormSpace (string) Removes all mutiple /space characters from [string] lst2str typerig.core.func.string.lst2str = lst2str (listItems, separator) Converts [listItems] to 'String' using 'String separator' Example: lst2str([List], ',') str2lst typerig.core.func.string.str2lst = str2lst (stringItems, separator) Converts 'stringItems' to [List] using 'String separator' Example: str2lst(String, ',') lstcln typerig.core.func.string.lstcln = lstcln (listItems, discard) Cleans a [listItems] by removing [discard] Example: lstcln([List], '/space') strRepDict typerig.core.func.string.strRepDict = strRepDict (stringItems, replacementDicionary, method ='replace' ) Replaces every instance of [stringItems] according to [replacementDicionary] using 'replace' ('r') or 'consecutive' replacement ('c') [method]s Example: strRepDict('12', {'1':'/one', '2':'/two'}, 'r')","title":"core.func.string"},{"location":"typerig.core.func.string.html#typerigcorefuncstring","text":"","title":"typerig.core.func.string"},{"location":"typerig.core.func.string.html#getlowercaseint","text":"typerig.core.func.string.getLowercaseInt = getLowercaseInt (uniocdeInt) Based on given Uppercase Unicode (Integer) returns coresponding Lowercase Unicode (Integer)","title":"getLowercaseInt"},{"location":"typerig.core.func.string.html#getuppercaseint","text":"typerig.core.func.string.getUppercaseInt = getUppercaseInt (uniocdeInt) Based on given Lowercase Uniocde (Integer) returns coresponding Uppercase Unicode (Integer)","title":"getUppercaseInt"},{"location":"typerig.core.func.string.html#getlowercasecodepoint","text":"typerig.core.func.string.getLowercaseCodepoint = getLowercaseCodepoint (unicodeName) Based on given Uppercase Unicode Name (String) returns coresponding Lowercase Unicode Name! Names are in Adobe uniXXXX format","title":"getLowercaseCodepoint"},{"location":"typerig.core.func.string.html#getuppercasecodepoint","text":"typerig.core.func.string.getUppercaseCodepoint = getUppercaseCodepoint (unicodeName) Based on given Uppercase Unicode Name (String) returns coresponding Uppercase Unicode Name! Names are in Adobe uniXXXX format","title":"getUppercaseCodepoint"},{"location":"typerig.core.func.string.html#kpxgen","text":"typerig.core.func.string.kpxGen = kpxGen (inputA, inputB, suffix =('', '') ) Generate AMF style KPX paris for kerning","title":"kpxGen"},{"location":"typerig.core.func.string.html#stringgen","text":"typerig.core.func.string.stringGen = stringGen (inputA, inputB, filler =('HH', 'HH') , genPattern ='FL A B A FR' , suffix =('', '') , sep ='/' ) Generate test text string for metrics, kerning and pairs/phrases Args: inputA, inputB (list/string) : Input lists to be paired filler (tuple(str)) : Filler string genPattern (string): A SPACE separated ordering pattern, where FL, FR is Filler Left/Right and A, B are input strings suffix (tuple(str)) : Suffixes to be added to inputs A and B sep (str) : Glyph Separator to be used. '/' default for Fontlab Returns: list(str)","title":"stringGen"},{"location":"typerig.core.func.string.html#stringgenpairs","text":"typerig.core.func.string.stringGenPairs = stringGenPairs (pairs_input, filler =('HH', 'HH') , genPattern ='FL A B A FR' , suffix =('', '') , sep ='/' ) Generate test text string for metrics, kerning and pairs/phrases Args: pairs_input (list(tuple)): Input list contaiing pairs filler (tuple(str)) : Filler string genPattern (string): A SPACE separated ordering pattern, where FL, FR is Filler Left/Right and A, B are input strings suffix (tuple(str)) : Suffixes to be added to inputs A and B sep (str) : Glyph Separator to be used. '/' default for Fontlab Returns: list(str)","title":"stringGenPairs"},{"location":"typerig.core.func.string.html#strnormspace","text":"typerig.core.func.string.strNormSpace = strNormSpace (string) Removes all mutiple /space characters from [string]","title":"strNormSpace"},{"location":"typerig.core.func.string.html#lst2str","text":"typerig.core.func.string.lst2str = lst2str (listItems, separator) Converts [listItems] to 'String' using 'String separator' Example: lst2str([List], ',')","title":"lst2str"},{"location":"typerig.core.func.string.html#str2lst","text":"typerig.core.func.string.str2lst = str2lst (stringItems, separator) Converts 'stringItems' to [List] using 'String separator' Example: str2lst(String, ',')","title":"str2lst"},{"location":"typerig.core.func.string.html#lstcln","text":"typerig.core.func.string.lstcln = lstcln (listItems, discard) Cleans a [listItems] by removing [discard] Example: lstcln([List], '/space')","title":"lstcln"},{"location":"typerig.core.func.string.html#strrepdict","text":"typerig.core.func.string.strRepDict = strRepDict (stringItems, replacementDicionary, method ='replace' ) Replaces every instance of [stringItems] according to [replacementDicionary] using 'replace' ('r') or 'consecutive' replacement ('c') [method]s Example: strRepDict('12', {'1':'/one', '2':'/two'}, 'r')","title":"strRepDict"},{"location":"typerig.core.func.transform.html","text":"typerig.core.func.transform typerig . core . func .transform ( version 0.26.1) # MODULE: TypeRig / Core / Transform (Functions) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math Functions adaptive_scale (v, s, d, t, c, i, st) Perform adaptive scaling by keeping the stem/stroke weights Args: v(t0, t1) -> tuple((float, float), (float, float)) : Joined coordinates for both weights s(sx, sy) -> tuple((float, float) : Scale factors (X, Y) d(dx, dy) -> tuple((float, float) : Translate values (X, Y) t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) c(cx, cy) -> tuple((float, float) : Compensation factor 0.0 (no compensation) to 1.0 (full compensation) (X,Y) i -> (radians) : Angle of sharing (for italic designs) st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: tuple(float, float): Transformed coordinate data adaptive_scale_array (a, s, d, t, c, i, st) Perform adaptive scaling by keeping the stem/stroke weights Args: a(t0, t1) -> list(tuple(float, float), (float, float)) : Joined coordinate arrays for both weights s(sx, sy) -> tuple((float, float) : Scale factors (X, Y) d(dx, dy) -> tuple((float, float) : Translate values (X, Y) t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) c(cx, cy) -> tuple((float, float) : Compensation factor 0.0 (no compensation) to 1.0 (full compensation) (X,Y) i -> (radians) : Angle of sharing (for italic designs) st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: list(tuple(float, float)): Transformed coordinate data adjuster (v, w, h, t, d, st) Readjust scale factor based on interpolation time Args: v(t0, t1) -> list(tuple((float, float), (float, float))...) : Joined coordinate arrays for both weights w, h -> Float: Target Width and Height t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) d(dx, dy) -> tuple((float, float) : Translation X, Y st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: tuple(float, float): Readjusted scale factors compensator (sf, cf, st0, st1) lerp (t0, t1, t) # - Functions --------------------------- timer (sw_c, sw_0, sw_1, fix_boundry =False ) Get Interpolation time for stem value withing given interval. Args: sw_c -> Float : Target stem value sw_0, sw_1 -> Float : Stem values Returns: t -> Float : Interpolation time timer typerig.core.func.transform.timer = timer (sw_c, sw_0, sw_1, fix_boundry =False ) Get Interpolation time for stem value withing given interval. Args: sw_c -> Float : Target stem value sw_0, sw_1 -> Float : Stem values Returns: t -> Float : Interpolation time adjuster typerig.core.func.transform.adjuster = adjuster (v, w, h, t, d, st) Readjust scale factor based on interpolation time Args: v(t0, t1) -> list(tuple((float, float), (float, float))...) : Joined coordinate arrays for both weights w, h -> Float: Target Width and Height t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) d(dx, dy) -> tuple((float, float) : Translation X, Y st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: tuple(float, float): Readjusted scale factors adaptive_scale typerig.core.func.transform.adaptive_scale = adaptive_scale (v, s, d, t, c, i, st) Perform adaptive scaling by keeping the stem/stroke weights Args: v(t0, t1) -> tuple((float, float), (float, float)) : Joined coordinates for both weights s(sx, sy) -> tuple((float, float) : Scale factors (X, Y) d(dx, dy) -> tuple((float, float) : Translate values (X, Y) t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) c(cx, cy) -> tuple((float, float) : Compensation factor 0.0 (no compensation) to 1.0 (full compensation) (X,Y) i -> (radians) : Angle of sharing (for italic designs) st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: tuple(float, float): Transformed coordinate data adaptive_scale_array typerig.core.func.transform.adaptive_scale_array = adaptive_scale_array (a, s, d, t, c, i, st) Perform adaptive scaling by keeping the stem/stroke weights Args: a(t0, t1) -> list(tuple(float, float), (float, float)) : Joined coordinate arrays for both weights s(sx, sy) -> tuple((float, float) : Scale factors (X, Y) d(dx, dy) -> tuple((float, float) : Translate values (X, Y) t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) c(cx, cy) -> tuple((float, float) : Compensation factor 0.0 (no compensation) to 1.0 (full compensation) (X,Y) i -> (radians) : Angle of sharing (for italic designs) st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: list(tuple(float, float)): Transformed coordinate data","title":"core.func.transform"},{"location":"typerig.core.func.transform.html#typerigcorefunctransform","text":"","title":"typerig.core.func.transform"},{"location":"typerig.core.func.transform.html#timer","text":"typerig.core.func.transform.timer = timer (sw_c, sw_0, sw_1, fix_boundry =False ) Get Interpolation time for stem value withing given interval. Args: sw_c -> Float : Target stem value sw_0, sw_1 -> Float : Stem values Returns: t -> Float : Interpolation time","title":"timer"},{"location":"typerig.core.func.transform.html#adjuster","text":"typerig.core.func.transform.adjuster = adjuster (v, w, h, t, d, st) Readjust scale factor based on interpolation time Args: v(t0, t1) -> list(tuple((float, float), (float, float))...) : Joined coordinate arrays for both weights w, h -> Float: Target Width and Height t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) d(dx, dy) -> tuple((float, float) : Translation X, Y st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: tuple(float, float): Readjusted scale factors","title":"adjuster"},{"location":"typerig.core.func.transform.html#adaptive_scale","text":"typerig.core.func.transform.adaptive_scale = adaptive_scale (v, s, d, t, c, i, st) Perform adaptive scaling by keeping the stem/stroke weights Args: v(t0, t1) -> tuple((float, float), (float, float)) : Joined coordinates for both weights s(sx, sy) -> tuple((float, float) : Scale factors (X, Y) d(dx, dy) -> tuple((float, float) : Translate values (X, Y) t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) c(cx, cy) -> tuple((float, float) : Compensation factor 0.0 (no compensation) to 1.0 (full compensation) (X,Y) i -> (radians) : Angle of sharing (for italic designs) st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: tuple(float, float): Transformed coordinate data","title":"adaptive_scale"},{"location":"typerig.core.func.transform.html#adaptive_scale_array","text":"typerig.core.func.transform.adaptive_scale_array = adaptive_scale_array (a, s, d, t, c, i, st) Perform adaptive scaling by keeping the stem/stroke weights Args: a(t0, t1) -> list(tuple(float, float), (float, float)) : Joined coordinate arrays for both weights s(sx, sy) -> tuple((float, float) : Scale factors (X, Y) d(dx, dy) -> tuple((float, float) : Translate values (X, Y) t(tx, ty) -> tuple((float, float) : Interpolation times (anisotropic X, Y) c(cx, cy) -> tuple((float, float) : Compensation factor 0.0 (no compensation) to 1.0 (full compensation) (X,Y) i -> (radians) : Angle of sharing (for italic designs) st(stx0, stx1, sty0, sty1) -> tuple((float, float, float, float) : Stems widths for weights t0, t1 Returns: list(tuple(float, float)): Transformed coordinate data","title":"adaptive_scale_array"},{"location":"typerig.core.func.utils.html","text":"typerig.core.func.utils typerig . core . func .utils ( version 0.26.2) # MODULE: TypeRig / Core / Utility (Functions) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math random Functions getFunctionName () Return the name of current function (def) inch2point (inches) isMultiInstance (objects, types) pixel2point (pixels) point2inch (points) point2pixel (points) getFunctionName typerig.core.func.utils.getFunctionName = getFunctionName () Return the name of current function (def)","title":"core.func.utils"},{"location":"typerig.core.func.utils.html#typerigcorefuncutils","text":"","title":"typerig.core.func.utils"},{"location":"typerig.core.func.utils.html#getfunctionname","text":"typerig.core.func.utils.getFunctionName = getFunctionName () Return the name of current function (def)","title":"getFunctionName"},{"location":"typerig.core.html","text":"typerig.core typerig .core ( version 0.26.0) # MODULE: TypeRig / Core # ----------------------------------------------------------- # (C) Vassil Kateliev, 2015-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Package Contents base (package) fileio (package) func (package) objects (package)","title":"core"},{"location":"typerig.core.html#typerigcore","text":"","title":"typerig.core"},{"location":"typerig.core.objects.array.html","text":"typerig.core.objects.array typerig . core . objects .array ( version 0.26.5) # MODULE: TypeRig / Core / Array (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Classes typerig.core.objects.collection.CustomList ( _abcoll.MutableSequence ) PointArray class PointArray ( typerig.core.objects.collection.CustomList ) # - Classes ----------------------------- # -- Point Collections ------------------ Method resolution order: PointArray typerig.core.objects.collection.CustomList abcoll.MutableSequence _abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods add (self, other) # - Internals delitem (self, i) div (self, other) init (self, data, useVoid =False ) mul (self, other) radd = add (self, other) rdiv = div (self, other) repr (self) rmul = mul (self, other) rsub = sub (self, other) sub (self, other) truediv = div (self, other) doTransform (self, transform =None ) pop (self, i =-1 ) remove (self, item) Descriptors angles bounds center diffs height tuple width x x_tuple y y_tuple Attributes abstractmethods = frozenset([]) iadd = None idiv = None imul = None isub = None Methods from typerig.core.objects.collection.CustomList cmp (self, other) contains (self, item) delslice (self, i, j) eq (self, other) ge (self, other) getitem (self, i) getslice (self, i, j) gt (self, other) le (self, other) len (self) lt (self, other) ne (self, other) setitem (self, i, item) setslice (self, i, j, other) append (self, item) count (self, item) extend (self, other) index (self, item, *args) insert (self, i, item) reverse (self) sort (self, *args, **kwds) Attributes from typerig.core.objects.collection.CustomList hash = None Methods from abcoll.Sequence __iter_ (self) reversed (self) Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()).","title":"core.objects.array"},{"location":"typerig.core.objects.array.html#typerigcoreobjectsarray","text":"","title":"typerig.core.objects.array"},{"location":"typerig.core.objects.atom.html","text":"typerig.core.objects.atom typerig . core . objects .atom ( version 0.0.2) # MODULE: TypeRig / Core / Atom (Objects) # NOTE: Assorted atomic, generic objects # ----------------------------------------------------------- # (C) Vassil Kateliev, 2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Classes builtin .object Linker Member class Linker ( builtin .object ) Doubly-linked-list/node primitive. Methods add (self, other) init (self, data, **kwargs) iter (self) repr (self) sub (self, other) where (self, search, value) # - Functions ------------------ Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class Member ( builtin .object ) Node primitive that is a member of a sequence. Methods init (self, data, **kwargs) repr (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) next prev Member typerig.core.objects.atom.Member = class Member ( __builtin__.object ) Node primitive that is a member of a sequence. Methods __init__ (self, data, **kwargs) __repr__ (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) next prev Linker typerig.core.objects.atom.Linker = class Linker ( __builtin__.object ) Doubly-linked-list/node primitive. Methods __add__ (self, other) __init__ (self, data, **kwargs) __iter__ (self) __repr__ (self) __sub__ (self, other) where (self, search, value) # - Functions ------------------ Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"core.objects.atom"},{"location":"typerig.core.objects.atom.html#typerigcoreobjectsatom","text":"","title":"typerig.core.objects.atom"},{"location":"typerig.core.objects.atom.html#member","text":"","title":"Member"},{"location":"typerig.core.objects.atom.html#linker","text":"","title":"Linker"},{"location":"typerig.core.objects.collection.html","text":"typerig.core.objects.collection typerig . core . objects .collection ( version 0.28.6) # MODULE: TypeRig / Core / Collection (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules json Classes abcoll.MutableMapping ( _abcoll.Mapping ) CustomDict biDict extBiDict _abcoll.MutableSequence ( _abcoll.Sequence ) CustomList dimList collections.defaultdict ( __builtin_ .dict ) attribdict treeDict json.decoder.JSONDecoder ( builtin .object ) vfj_decoder json.encoder.JSONEncoder ( builtin .object ) vfj_encoder class CustomDict ( _abcoll.MutableMapping ) A more or less complete user-defined wrapper around dictionary objects. Adapted from Source: https://github.com/enthought/Python-2.7.3/blob/master/Lib/self.__class__.py Method resolution order: CustomDict abcoll.MutableMapping _abcoll.Mapping _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods cmp (self, dict) contains (self, key) delitem (self, key) getitem (self, key) init (self, dict =None , **kwargs) iter (self) len (self) repr (self) setitem (self, key, item) clear (self) copy (self) get (self, key, failobj =None ) has_key (self, key) items (self) iteritems (self) iterkeys (self) itervalues (self) keys (self) pop (self, key, *args) popitem (self) setdefault (self, key, failobj =None ) update (self, dict =None , **kwargs) values (self) Class methods fromkeys (cls, iterable, value =None ) from abc.ABCMeta Attributes abstractmethods = frozenset([]) hash = None Methods from abcoll.Mapping __eq_ (self, other) ne (self, other) Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). class CustomList ( _abcoll.MutableSequence ) A more or less complete user-defined wrapper around list objects. Adapted from Source: https://github.com/enthought/Python-2.7.3/blob/master/Lib/UserList.py Method resolution order: CustomList abcoll.MutableSequence _abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods add (self, other) cmp (self, other) contains (self, item) delitem (self, i) delslice (self, i, j) eq (self, other) ge (self, other) getitem (self, i) getslice (self, i, j) gt (self, other) iadd (self, other) imul (self, n) init (self, initlist =None ) le (self, other) len (self) lt (self, other) mul (self, n) ne (self, other) radd (self, other) repr (self) rmul = mul (self, n) setitem (self, i, item) setslice (self, i, j, other) append (self, item) count (self, item) extend (self, other) index (self, item, *args) insert (self, i, item) pop (self, i =-1 ) remove (self, item) reverse (self) sort (self, *args, **kwds) Attributes abstractmethods = frozenset([]) hash = None Methods from abcoll.Sequence __iter_ (self) reversed (self) Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). class attribdict ( collections.defaultdict ) Default dictionary where keys can be accessed as attributes. Method resolution order: attribdict collections.defaultdict builtin .dict builtin .object Methods delattr (self, name) getattribute (self, name) hash (self) init (self, *args, **kwdargs) repr (self) setattr (self, name, value) contains (self, search, search_type =None ) Does the object contain ANY value or nested object with given name (search) Attributes: search (Str): Search string search_type (type) : Value type Returns: Bool dir (self) extract (self, search) Pull all values of specified key (search) Attributes: search (Str): Search string Returns: generator factory (self, factory_type) lock (self) where (self, search, search_type =None ) Pull all objects that contain values of specified search. Attributes: search (Str): Search string search_type (type) : Value type Returns: generator Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from collections.defaultdict copy (...) D. copy () -> a shallow copy of D. missing (...) __missing__ (key) # Called by __getitem__ for missing key; pseudo-code: if self. default_factory is None: raise KeyError((key,)) self[key] = value = self. default_factory () return value reduce (...) Return state information for pickling. copy (...) D. copy () -> a shallow copy of D. Descriptors from collections.defaultdict default_factory Factory for default value called by __missing__(). Methods from builtin .dict cmp (...) x. __cmp__ (y) < ==> cmp(x,y) contains (...) D. __contains__ (k) -> True if D has a key k, else False delitem (...) x. __delitem__ (y) < ==> del x[y] eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y setitem (...) x. __setitem__ (i, y) < ==> x[i]=y sizeof (...) D. __sizeof__ () -> size of D in memory, in bytes clear (...) D. clear () -> None. Remove all items from D. fromkeys (...) dict. fromkeys (S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get (...) D. get (k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key (...) D. has_key (k) -> True if D has a key k, else False items (...) D. items () -> list of D's (key, value) pairs, as 2-tuples iteritems (...) D. iteritems () -> an iterator over the (key, value) items of D iterkeys (...) D. iterkeys () -> an iterator over the keys of D itervalues (...) D. itervalues () -> an iterator over the values of D keys (...) D. keys () -> list of D's keys pop (...) D. pop (k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem (...) D. popitem () -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault (...) D. setdefault (k[,d]) -> D. get (k,d), also set D[k]=d if k not in D update (...) D. update ([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a . keys () method, does: for k in E: D[k] = E[k] If E present and lacks . keys () method, does: for (k, v) in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values (...) D. values () -> list of D's values viewitems (...) D. viewitems () -> a set-like object providing a view on D's items viewkeys (...) D. viewkeys () -> a set-like object providing a view on D's keys viewvalues (...) D. viewvalues () -> an object providing a view on D's values Attributes from builtin .dict new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class biDict ( CustomDict ) Bi-directioanl dictionary partly based on Basj answer st: https://stackoverflow.com/questions/3318625/efficient-bidirectional-hash-table-in-python Method resolution order: biDict CustomDict abcoll.MutableMapping _abcoll.Mapping _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods delitem (self, key) init (self, *args, **kwargs) setitem (self, key, value) Attributes abstractmethods = frozenset([]) Methods from CustomDict cmp (self, dict) contains (self, key) getitem (self, key) iter (self) len (self) repr (self) clear (self) copy (self) get (self, key, failobj =None ) has_key (self, key) items (self) iteritems (self) iterkeys (self) itervalues (self) keys (self) pop (self, key, *args) popitem (self) setdefault (self, key, failobj =None ) update (self, dict =None , **kwargs) values (self) Class methods from CustomDict fromkeys (cls, iterable, value =None ) from abc.ABCMeta Attributes from CustomDict hash = None Methods from abcoll.Mapping __eq_ (self, other) ne (self, other) Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). class dimList ( CustomList ) Custom list object that supports multiple dimensions Example: a = dimList([[[1, 2, 3, 4], ['a', 'b', 'c', 'd']], [[5, 6, 7, 8], ['e', 'f', 'g', 'h']]]) print(a[0,1,2]) Method resolution order: dimList CustomList abcoll.MutableSequence _abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods getitem (self, *args) init (self, *args, **kwargs) setitem (self, *args) Descriptors dim Attributes abstractmethods = frozenset([]) Methods from CustomList add (self, other) cmp (self, other) contains (self, item) delitem (self, i) delslice (self, i, j) eq (self, other) ge (self, other) getslice (self, i, j) gt (self, other) iadd (self, other) imul (self, n) le (self, other) len (self) lt (self, other) mul (self, n) ne (self, other) radd (self, other) repr (self) rmul = mul (self, n) setslice (self, i, j, other) append (self, item) count (self, item) extend (self, other) index (self, item, *args) insert (self, i, item) pop (self, i =-1 ) remove (self, item) reverse (self) sort (self, *args, **kwds) Attributes from CustomList hash = None Methods from abcoll.Sequence __iter_ (self) reversed (self) Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). class extBiDict ( CustomDict ) Bi-directioanl dictionary with lists for values Method resolution order: extBiDict CustomDict abcoll.MutableMapping _abcoll.Mapping _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods delitem (self, key) init (self, *args, **kwargs) setitem (self, key, value) Attributes abstractmethods = frozenset([]) Methods from CustomDict cmp (self, dict) contains (self, key) getitem (self, key) iter (self) len (self) repr (self) clear (self) copy (self) get (self, key, failobj =None ) has_key (self, key) items (self) iteritems (self) iterkeys (self) itervalues (self) keys (self) pop (self, key, *args) popitem (self) setdefault (self, key, failobj =None ) update (self, dict =None , **kwargs) values (self) Class methods from CustomDict fromkeys (cls, iterable, value =None ) from abc.ABCMeta Attributes from CustomDict hash = None Methods from abcoll.Mapping __eq_ (self, other) ne (self, other) Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). jsontree = class treeDict ( collections.defaultdict ) Default dictionary where keys can be accessed as attributes. Light Version ---- Adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: treeDict collections.defaultdict builtin .dict builtin .object Methods getattribute (self, name) init (self, *args, **kwargs) repr (self) setattr (self, name, value) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from collections.defaultdict copy (...) D. copy () -> a shallow copy of D. missing (...) __missing__ (key) # Called by __getitem__ for missing key; pseudo-code: if self. default_factory is None: raise KeyError((key,)) self[key] = value = self. default_factory () return value reduce (...) Return state information for pickling. copy (...) D. copy () -> a shallow copy of D. Descriptors from collections.defaultdict default_factory Factory for default value called by __missing__(). Methods from builtin .dict cmp (...) x. __cmp__ (y) < ==> cmp(x,y) contains (...) D. __contains__ (k) -> True if D has a key k, else False delitem (...) x. __delitem__ (y) < ==> del x[y] eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y setitem (...) x. __setitem__ (i, y) < ==> x[i]=y sizeof (...) D. __sizeof__ () -> size of D in memory, in bytes clear (...) D. clear () -> None. Remove all items from D. fromkeys (...) dict. fromkeys (S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get (...) D. get (k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key (...) D. has_key (k) -> True if D has a key k, else False items (...) D. items () -> list of D's (key, value) pairs, as 2-tuples iteritems (...) D. iteritems () -> an iterator over the (key, value) items of D iterkeys (...) D. iterkeys () -> an iterator over the keys of D itervalues (...) D. itervalues () -> an iterator over the values of D keys (...) D. keys () -> list of D's keys pop (...) D. pop (k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem (...) D. popitem () -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault (...) D. setdefault (k[,d]) -> D. get (k,d), also set D[k]=d if k not in D update (...) D. update ([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a . keys () method, does: for k in E: D[k] = E[k] If E present and lacks . keys () method, does: for (k, v) in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values (...) D. values () -> list of D's values viewitems (...) D. viewitems () -> a set-like object providing a view on D's items viewkeys (...) D. viewkeys () -> a set-like object providing a view on D's keys viewvalues (...) D. viewvalues () -> an object providing a view on D's values Attributes from builtin .dict hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class treeDict ( collections.defaultdict ) Default dictionary where keys can be accessed as attributes. Light Version ---- Adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: treeDict collections.defaultdict builtin .dict builtin .object Methods getattribute (self, name) init (self, *args, **kwargs) repr (self) setattr (self, name, value) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from collections.defaultdict copy (...) D. copy () -> a shallow copy of D. missing (...) __missing__ (key) # Called by __getitem__ for missing key; pseudo-code: if self. default_factory is None: raise KeyError((key,)) self[key] = value = self. default_factory () return value reduce (...) Return state information for pickling. copy (...) D. copy () -> a shallow copy of D. Descriptors from collections.defaultdict default_factory Factory for default value called by __missing__(). Methods from builtin .dict cmp (...) x. __cmp__ (y) < ==> cmp(x,y) contains (...) D. __contains__ (k) -> True if D has a key k, else False delitem (...) x. __delitem__ (y) < ==> del x[y] eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y setitem (...) x. __setitem__ (i, y) < ==> x[i]=y sizeof (...) D. __sizeof__ () -> size of D in memory, in bytes clear (...) D. clear () -> None. Remove all items from D. fromkeys (...) dict. fromkeys (S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get (...) D. get (k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key (...) D. has_key (k) -> True if D has a key k, else False items (...) D. items () -> list of D's (key, value) pairs, as 2-tuples iteritems (...) D. iteritems () -> an iterator over the (key, value) items of D iterkeys (...) D. iterkeys () -> an iterator over the keys of D itervalues (...) D. itervalues () -> an iterator over the values of D keys (...) D. keys () -> list of D's keys pop (...) D. pop (k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem (...) D. popitem () -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault (...) D. setdefault (k[,d]) -> D. get (k,d), also set D[k]=d if k not in D update (...) D. update ([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a . keys () method, does: for k in E: D[k] = E[k] If E present and lacks . keys () method, does: for (k, v) in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values (...) D. values () -> list of D's values viewitems (...) D. viewitems () -> a set-like object providing a view on D's items viewkeys (...) D. viewkeys () -> a set-like object providing a view on D's keys viewvalues (...) D. viewvalues () -> an object providing a view on D's values Attributes from builtin .dict hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class vfj_decoder ( json.decoder.JSONDecoder ) VFJ (JSON) decoder class for deserializing to a jsontree object structure. ---- Parts adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: vfj_decoder json.decoder.JSONDecoder builtin .object Methods init (self, *args, **kwdargs) Methods from json.decoder.JSONDecoder decode (self, s, _w = built-in method match of _sre.SRE_Pattern object ) Return the Python representation of ``s`` (a ``str`` or ``unicode`` instance containing a JSON document) raw_decode (self, s, idx =0 ) Decode a JSON document from ``s`` (a ``str`` or ``unicode`` beginning with a JSON document) and return a 2-tuple of the Python representation and the index in ``s`` where the document ended. This can be used to decode a JSON document from a string that may have extraneous data at the end. Descriptors from json.decoder.JSONDecoder dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class vfj_encoder ( json.encoder.JSONEncoder ) VFJ (JSON) encoder class that serializes out jsontree object structures. ---- Parts adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: vfj_encoder json.encoder.JSONEncoder builtin .object Methods init (self, *args, **kwdargs) default (self, obj) Methods from json.encoder.JSONEncoder encode (self, o) Return a JSON string representation of a Python data structure. >>> JSONEncoder (). encode ({\"foo\": [\"bar\", \"baz\"]}) '{\"foo\": [\"bar\", \"baz\"]}' iterencode (self, o, _one_shot =False ) Encode the given object and yield each string representation as available. For example:: for chunk in JSONEncoder (). iterencode (bigobject): mysocket.write(chunk) Descriptors from json.encoder.JSONEncoder dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from json.encoder.JSONEncoder item_separator = ', ' key_separator = ': ' CustomList typerig.core.objects.collection.CustomList = class CustomList ( _abcoll.MutableSequence ) A more or less complete user-defined wrapper around list objects. Adapted from Source: https://github.com/enthought/Python-2.7.3/blob/master/Lib/UserList.py Method resolution order: CustomList _abcoll.MutableSequence _abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin__.object Methods __add__ (self, other) __cmp__ (self, other) __contains__ (self, item) __delitem__ (self, i) __delslice__ (self, i, j) __eq__ (self, other) __ge__ (self, other) __getitem__ (self, i) __getslice__ (self, i, j) __gt__ (self, other) __iadd__ (self, other) __imul__ (self, n) __init__ (self, initlist =None ) __le__ (self, other) __len__ (self) __lt__ (self, other) __mul__ (self, n) __ne__ (self, other) __radd__ (self, other) __repr__ (self) __rmul__ = __mul__ (self, n) __setitem__ (self, i, item) __setslice__ (self, i, j, other) append (self, item) count (self, item) extend (self, other) index (self, item, *args) insert (self, i, item) pop (self, i =-1 ) remove (self, item) reverse (self) sort (self, *args, **kwds) Attributes __abstractmethods__ = frozenset([]) __hash__ = None Methods from _abcoll.Sequence __iter__ (self) __reversed__ (self) Class methods from _abcoll.Sized __subclasshook__ (cls, C) from abc.ABCMeta Descriptors from _abcoll.Sized __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from _abcoll.Sized __metaclass__ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). dimList typerig.core.objects.collection.dimList = class dimList ( CustomList ) Custom list object that supports multiple dimensions Example: a = dimList([[[1, 2, 3, 4], ['a', 'b', 'c', 'd']], [[5, 6, 7, 8], ['e', 'f', 'g', 'h']]]) print(a[0,1,2]) Method resolution order: dimList CustomList _abcoll.MutableSequence _abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin__.object Methods __getitem__ (self, *args) __init__ (self, *args, **kwargs) __setitem__ (self, *args) Descriptors dim Attributes __abstractmethods__ = frozenset([]) Methods from CustomList __add__ (self, other) __cmp__ (self, other) __contains__ (self, item) __delitem__ (self, i) __delslice__ (self, i, j) __eq__ (self, other) __ge__ (self, other) __getslice__ (self, i, j) __gt__ (self, other) __iadd__ (self, other) __imul__ (self, n) __le__ (self, other) __len__ (self) __lt__ (self, other) __mul__ (self, n) __ne__ (self, other) __radd__ (self, other) __repr__ (self) __rmul__ = __mul__ (self, n) __setslice__ (self, i, j, other) append (self, item) count (self, item) extend (self, other) index (self, item, *args) insert (self, i, item) pop (self, i =-1 ) remove (self, item) reverse (self) sort (self, *args, **kwds) Attributes from CustomList __hash__ = None Methods from _abcoll.Sequence __iter__ (self) __reversed__ (self) Class methods from _abcoll.Sized __subclasshook__ (cls, C) from abc.ABCMeta Descriptors from _abcoll.Sized __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from _abcoll.Sized __metaclass__ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). CustomDict typerig.core.objects.collection.CustomDict = class CustomDict ( _abcoll.MutableMapping ) A more or less complete user-defined wrapper around dictionary objects. Adapted from Source: https://github.com/enthought/Python-2.7.3/blob/master/Lib/self.__class__.py Method resolution order: CustomDict _abcoll.MutableMapping _abcoll.Mapping _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin__.object Methods __cmp__ (self, dict) __contains__ (self, key) __delitem__ (self, key) __getitem__ (self, key) __init__ (self, dict =None , **kwargs) __iter__ (self) __len__ (self) __repr__ (self) __setitem__ (self, key, item) clear (self) copy (self) get (self, key, failobj =None ) has_key (self, key) items (self) iteritems (self) iterkeys (self) itervalues (self) keys (self) pop (self, key, *args) popitem (self) setdefault (self, key, failobj =None ) update (self, dict =None , **kwargs) values (self) Class methods fromkeys (cls, iterable, value =None ) from abc.ABCMeta Attributes __abstractmethods__ = frozenset([]) __hash__ = None Methods from _abcoll.Mapping __eq__ (self, other) __ne__ (self, other) Class methods from _abcoll.Sized __subclasshook__ (cls, C) from abc.ABCMeta Descriptors from _abcoll.Sized __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from _abcoll.Sized __metaclass__ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). biDict typerig.core.objects.collection.biDict = class biDict ( CustomDict ) Bi-directioanl dictionary partly based on Basj answer st: https://stackoverflow.com/questions/3318625/efficient-bidirectional-hash-table-in-python Method resolution order: biDict CustomDict _abcoll.MutableMapping _abcoll.Mapping _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin__.object Methods __delitem__ (self, key) __init__ (self, *args, **kwargs) __setitem__ (self, key, value) Attributes __abstractmethods__ = frozenset([]) Methods from CustomDict __cmp__ (self, dict) __contains__ (self, key) __getitem__ (self, key) __iter__ (self) __len__ (self) __repr__ (self) clear (self) copy (self) get (self, key, failobj =None ) has_key (self, key) items (self) iteritems (self) iterkeys (self) itervalues (self) keys (self) pop (self, key, *args) popitem (self) setdefault (self, key, failobj =None ) update (self, dict =None , **kwargs) values (self) Class methods from CustomDict fromkeys (cls, iterable, value =None ) from abc.ABCMeta Attributes from CustomDict __hash__ = None Methods from _abcoll.Mapping __eq__ (self, other) __ne__ (self, other) Class methods from _abcoll.Sized __subclasshook__ (cls, C) from abc.ABCMeta Descriptors from _abcoll.Sized __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from _abcoll.Sized __metaclass__ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). extBiDict typerig.core.objects.collection.extBiDict = class extBiDict ( CustomDict ) Bi-directioanl dictionary with lists for values Method resolution order: extBiDict CustomDict _abcoll.MutableMapping _abcoll.Mapping _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin__.object Methods __delitem__ (self, key) __init__ (self, *args, **kwargs) __setitem__ (self, key, value) Attributes __abstractmethods__ = frozenset([]) Methods from CustomDict __cmp__ (self, dict) __contains__ (self, key) __getitem__ (self, key) __iter__ (self) __len__ (self) __repr__ (self) clear (self) copy (self) get (self, key, failobj =None ) has_key (self, key) items (self) iteritems (self) iterkeys (self) itervalues (self) keys (self) pop (self, key, *args) popitem (self) setdefault (self, key, failobj =None ) update (self, dict =None , **kwargs) values (self) Class methods from CustomDict fromkeys (cls, iterable, value =None ) from abc.ABCMeta Attributes from CustomDict __hash__ = None Methods from _abcoll.Mapping __eq__ (self, other) __ne__ (self, other) Class methods from _abcoll.Sized __subclasshook__ (cls, C) from abc.ABCMeta Descriptors from _abcoll.Sized __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from _abcoll.Sized __metaclass__ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). attribdict typerig.core.objects.collection.attribdict = class attribdict ( collections.defaultdict ) Default dictionary where keys can be accessed as attributes. Method resolution order: attribdict collections.defaultdict __builtin__.dict __builtin__.object Methods __delattr__ (self, name) __getattribute__ (self, name) __hash__ (self) __init__ (self, *args, **kwdargs) __repr__ (self) __setattr__ (self, name, value) contains (self, search, search_type =None ) Does the object contain ANY value or nested object with given name (search) Attributes: search (Str): Search string search_type (type) : Value type Returns: Bool dir (self) extract (self, search) Pull all values of specified key (search) Attributes: search (Str): Search string Returns: generator factory (self, factory_type) lock (self) where (self, search, search_type =None ) Pull all objects that contain values of specified search. Attributes: search (Str): Search string search_type (type) : Value type Returns: generator Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from collections.defaultdict __copy__ (...) D. copy () -> a shallow copy of D. __missing__ (...) __missing__ (key) # Called by __getitem__ for missing key; pseudo-code: if self. default_factory is None: raise KeyError((key,)) self[key] = value = self. default_factory () return value __reduce__ (...) Return state information for pickling. copy (...) D. copy () -> a shallow copy of D. Descriptors from collections.defaultdict default_factory Factory for default value called by __missing__(). Methods from __builtin__.dict __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __contains__ (...) D. __contains__ (k) -> True if D has a key k, else False __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getitem__ (...) x. __getitem__ (y) < ==> x[y] __gt__ (...) x. __gt__ (y) < ==> x>y __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __sizeof__ (...) D. __sizeof__ () -> size of D in memory, in bytes clear (...) D. clear () -> None. Remove all items from D. fromkeys (...) dict. fromkeys (S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get (...) D. get (k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key (...) D. has_key (k) -> True if D has a key k, else False items (...) D. items () -> list of D's (key, value) pairs, as 2-tuples iteritems (...) D. iteritems () -> an iterator over the (key, value) items of D iterkeys (...) D. iterkeys () -> an iterator over the keys of D itervalues (...) D. itervalues () -> an iterator over the values of D keys (...) D. keys () -> list of D's keys pop (...) D. pop (k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem (...) D. popitem () -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault (...) D. setdefault (k[,d]) -> D. get (k,d), also set D[k]=d if k not in D update (...) D. update ([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a . keys () method, does: for k in E: D[k] = E[k] If E present and lacks . keys () method, does: for (k, v) in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values (...) D. values () -> list of D's values viewitems (...) D. viewitems () -> a set-like object providing a view on D's items viewkeys (...) D. viewkeys () -> a set-like object providing a view on D's keys viewvalues (...) D. viewvalues () -> an object providing a view on D's values Attributes from __builtin__.dict __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T extract typerig.core.objects.collection.attribdict.extract = extract (self, search) unbound typerig.core.objects.collection.attribdict method Pull all values of specified key (search) Attributes: search (Str): Search string Returns: generator where typerig.core.objects.collection.attribdict.where = where (self, search, search_type =None ) unbound typerig.core.objects.collection.attribdict method Pull all objects that contain values of specified search. Attributes: search (Str): Search string search_type (type) : Value type Returns: generator contains typerig.core.objects.collection.attribdict.contains = contains (self, search, search_type =None ) unbound typerig.core.objects.collection.attribdict method Does the object contain ANY value or nested object with given name (search) Attributes: search (Str): Search string search_type (type) : Value type Returns: Bool treeDict typerig.core.objects.collection.treeDict = class treeDict ( collections.defaultdict ) Default dictionary where keys can be accessed as attributes. Light Version ---- Adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: treeDict collections.defaultdict __builtin__.dict __builtin__.object Methods __getattribute__ (self, name) __init__ (self, *args, **kwargs) __repr__ (self) __setattr__ (self, name, value) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from collections.defaultdict __copy__ (...) D. copy () -> a shallow copy of D. __missing__ (...) __missing__ (key) # Called by __getitem__ for missing key; pseudo-code: if self. default_factory is None: raise KeyError((key,)) self[key] = value = self. default_factory () return value __reduce__ (...) Return state information for pickling. copy (...) D. copy () -> a shallow copy of D. Descriptors from collections.defaultdict default_factory Factory for default value called by __missing__(). Methods from __builtin__.dict __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __contains__ (...) D. __contains__ (k) -> True if D has a key k, else False __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getitem__ (...) x. __getitem__ (y) < ==> x[y] __gt__ (...) x. __gt__ (y) < ==> x>y __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __sizeof__ (...) D. __sizeof__ () -> size of D in memory, in bytes clear (...) D. clear () -> None. Remove all items from D. fromkeys (...) dict. fromkeys (S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get (...) D. get (k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key (...) D. has_key (k) -> True if D has a key k, else False items (...) D. items () -> list of D's (key, value) pairs, as 2-tuples iteritems (...) D. iteritems () -> an iterator over the (key, value) items of D iterkeys (...) D. iterkeys () -> an iterator over the keys of D itervalues (...) D. itervalues () -> an iterator over the values of D keys (...) D. keys () -> list of D's keys pop (...) D. pop (k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem (...) D. popitem () -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault (...) D. setdefault (k[,d]) -> D. get (k,d), also set D[k]=d if k not in D update (...) D. update ([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a . keys () method, does: for k in E: D[k] = E[k] If E present and lacks . keys () method, does: for (k, v) in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values (...) D. values () -> list of D's values viewitems (...) D. viewitems () -> a set-like object providing a view on D's items viewkeys (...) D. viewkeys () -> a set-like object providing a view on D's keys viewvalues (...) D. viewvalues () -> an object providing a view on D's values Attributes from __builtin__.dict __hash__ = None __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T treeDict typerig.core.objects.collection.jsontree = class treeDict ( collections.defaultdict ) Default dictionary where keys can be accessed as attributes. Light Version ---- Adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: treeDict collections.defaultdict __builtin__.dict __builtin__.object Methods __getattribute__ (self, name) __init__ (self, *args, **kwargs) __repr__ (self) __setattr__ (self, name, value) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from collections.defaultdict __copy__ (...) D. copy () -> a shallow copy of D. __missing__ (...) __missing__ (key) # Called by __getitem__ for missing key; pseudo-code: if self. default_factory is None: raise KeyError((key,)) self[key] = value = self. default_factory () return value __reduce__ (...) Return state information for pickling. copy (...) D. copy () -> a shallow copy of D. Descriptors from collections.defaultdict default_factory Factory for default value called by __missing__(). Methods from __builtin__.dict __cmp__ (...) x. __cmp__ (y) < ==> cmp(x,y) __contains__ (...) D. __contains__ (k) -> True if D has a key k, else False __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getitem__ (...) x. __getitem__ (y) < ==> x[y] __gt__ (...) x. __gt__ (y) < ==> x>y __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __sizeof__ (...) D. __sizeof__ () -> size of D in memory, in bytes clear (...) D. clear () -> None. Remove all items from D. fromkeys (...) dict. fromkeys (S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get (...) D. get (k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key (...) D. has_key (k) -> True if D has a key k, else False items (...) D. items () -> list of D's (key, value) pairs, as 2-tuples iteritems (...) D. iteritems () -> an iterator over the (key, value) items of D iterkeys (...) D. iterkeys () -> an iterator over the keys of D itervalues (...) D. itervalues () -> an iterator over the values of D keys (...) D. keys () -> list of D's keys pop (...) D. pop (k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem (...) D. popitem () -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault (...) D. setdefault (k[,d]) -> D. get (k,d), also set D[k]=d if k not in D update (...) D. update ([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a . keys () method, does: for k in E: D[k] = E[k] If E present and lacks . keys () method, does: for (k, v) in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values (...) D. values () -> list of D's values viewitems (...) D. viewitems () -> a set-like object providing a view on D's items viewkeys (...) D. viewkeys () -> a set-like object providing a view on D's keys viewvalues (...) D. viewvalues () -> an object providing a view on D's values Attributes from __builtin__.dict __hash__ = None __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T vfj_decoder typerig.core.objects.collection.vfj_decoder = class vfj_decoder ( json.decoder.JSONDecoder ) VFJ (JSON) decoder class for deserializing to a jsontree object structure. ---- Parts adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: vfj_decoder json.decoder.JSONDecoder __builtin__.object Methods __init__ (self, *args, **kwdargs) Methods from json.decoder.JSONDecoder decode (self, s, _w = built-in method match of _sre.SRE_Pattern object ) Return the Python representation of ``s`` (a ``str`` or ``unicode`` instance containing a JSON document) raw_decode (self, s, idx =0 ) Decode a JSON document from ``s`` (a ``str`` or ``unicode`` beginning with a JSON document) and return a 2-tuple of the Python representation and the index in ``s`` where the document ended. This can be used to decode a JSON document from a string that may have extraneous data at the end. Descriptors from json.decoder.JSONDecoder __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) vfj_encoder typerig.core.objects.collection.vfj_encoder = class vfj_encoder ( json.encoder.JSONEncoder ) VFJ (JSON) encoder class that serializes out jsontree object structures. ---- Parts adapted from JsonTree by Doug Napoleone: https://github.com/dougn/jsontree Method resolution order: vfj_encoder json.encoder.JSONEncoder __builtin__.object Methods __init__ (self, *args, **kwdargs) default (self, obj) Methods from json.encoder.JSONEncoder encode (self, o) Return a JSON string representation of a Python data structure. >>> JSONEncoder(). encode ({\"foo\": [\"bar\", \"baz\"]}) '{\"foo\": [\"bar\", \"baz\"]}' iterencode (self, o, _one_shot =False ) Encode the given object and yield each string representation as available. For example:: for chunk in JSONEncoder(). iterencode (bigobject): mysocket.write(chunk) Descriptors from json.encoder.JSONEncoder __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from json.encoder.JSONEncoder item_separator = ', ' key_separator = ': '","title":"core.objects.collection"},{"location":"typerig.core.objects.collection.html#typerigcoreobjectscollection","text":"","title":"typerig.core.objects.collection"},{"location":"typerig.core.objects.collection.html#customlist","text":"","title":"CustomList"},{"location":"typerig.core.objects.collection.html#dimlist","text":"","title":"dimList"},{"location":"typerig.core.objects.collection.html#customdict","text":"","title":"CustomDict"},{"location":"typerig.core.objects.collection.html#bidict","text":"","title":"biDict"},{"location":"typerig.core.objects.collection.html#extbidict","text":"","title":"extBiDict"},{"location":"typerig.core.objects.collection.html#attribdict","text":"","title":"attribdict"},{"location":"typerig.core.objects.collection.html#extract","text":"typerig.core.objects.collection.attribdict.extract = extract (self, search) unbound typerig.core.objects.collection.attribdict method Pull all values of specified key (search) Attributes: search (Str): Search string Returns: generator","title":"extract"},{"location":"typerig.core.objects.collection.html#where","text":"typerig.core.objects.collection.attribdict.where = where (self, search, search_type =None ) unbound typerig.core.objects.collection.attribdict method Pull all objects that contain values of specified search. Attributes: search (Str): Search string search_type (type) : Value type Returns: generator","title":"where"},{"location":"typerig.core.objects.collection.html#contains","text":"typerig.core.objects.collection.attribdict.contains = contains (self, search, search_type =None ) unbound typerig.core.objects.collection.attribdict method Does the object contain ANY value or nested object with given name (search) Attributes: search (Str): Search string search_type (type) : Value type Returns: Bool","title":"contains"},{"location":"typerig.core.objects.collection.html#treedict","text":"","title":"treeDict"},{"location":"typerig.core.objects.collection.html#treedict_1","text":"","title":"treeDict"},{"location":"typerig.core.objects.collection.html#vfj_decoder","text":"","title":"vfj_decoder"},{"location":"typerig.core.objects.collection.html#vfj_encoder","text":"","title":"vfj_encoder"},{"location":"typerig.core.objects.cubicbezier.html","text":"typerig.core.objects.cubicbezier typerig . core . objects .cubicbezier ( version 0.26.6) # MODULE: TypeRig / Core / Cubic Bezier (Object) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2016-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math Classes builtin .object CubicBezier class CubicBezier ( builtin .object ) # - Classes ----------------------------- Methods init (self, *argv) repr (self) asList (self) # -- Modifiers doSwap (self) doTransform (self, transform =None ) get_handle_length (self) Returns handle length and radii from base points. lerp_first (self, shift) lerp_last (self, shift) solve_curvature (self, time) Find Curvature of on-curve point at given time solve_derivative (self, time) Returns point of on-curve point at given time and vector of 1st and 2nd derivative. solve_distance_end (self, distance, timeStep =0.01 ) Returns time at which the given distance to end of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_distance_start (self, distance, timeStep =0.01 ) Returns time at which the given distance to beginning of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_extremes (self) Finds curve extremes and returns [(extreme_01_x, extreme_01_y, extreme_01_t)...(extreme_n_x, extreme_n_y, extreme_n_t)] solve_handle_distance_from_base (self, ratio =(0.5, 0.5) ) Finds new handle positions for given ratio from base points. solve_hobby (self, curvature =(0.9, 0.9) ) Calculates and applies John Hobby's mock-curvature-smoothness by given curvature - tuple (float,float) or (float) Based on Metapolator's Hobby Spline by Juraj Sukop, Lasse Fister, Simon Egli solve_hobby_curvature (self) Returns current curvature coefficients (complex(alpha), complex(beta)) for both handles according to John Hobby's mock-curvature calculation solve_parallel (self, vector, fullOutput =False ) Finds the t value along a cubic Bezier where a tangent (1st derivative) is parallel with the direction vector. vector: a pair of values representing the direction of interest (magnitude is ignored). returns 0.0 < = t < = 1.0 or None # Solving the dot product of cubic beziers first derivate to the vector given B'(t) x V. Two vectors are perpendicular if their dot product is zero. # So if you could find the (1) perpendicular of V it will be collinear == tangent of the curve so the equation to be solved is: # B'(t) x V(x,y) = 0; -(a*t^2 + b*t + c)*x + (g*t^2 + h*t + i)*y = 0 solved for t, where a,b,c are coefs for X and g,h,i for Y B'(t) derivate of curve # # Inspired by answer given by 'unutbu' on the stackoverflow question: http://stackoverflow.com/questions/20825173/how-to-find-a-point-if-any-on-quadratic-bezier-with-a-given-tangent-direction # Recoded and recalculated for qubic beziers. Used 'Rearrange It' app at http://www.wolframalpha.com/widgets/view.jsp?id=4be4308d0f9d17d1da68eea39de9b2ce was invaluable. # # DOTO: Fix calculation optimization error - will yield false positive result in cases #1 and #2 if vector is 45 degrees solve_point (self, time) Find point on cubic bezier at given time solve_proportional_handles (self, proportion =0.3 ) Equalizes handle length to given float(proportion) solve_slice (self, time) Returns two segments representing cubic bezier sliced at given time. Output: list [(Start), (Start_BCP_out), (Slice_BCP_in), (Slice), (Slice_BCP_out), (End_BCP_in), (End)] of tuples (x,y) solve_tunni (self) Make proportional handles keeping curvature and on-curve point positions Based on modified Andres Torresi implementation of Eduardo Tunni's method for control points Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) height line points tuple width x x_max y y_max CubicBezier typerig.core.objects.cubicbezier.CubicBezier = class CubicBezier ( __builtin__.object ) # - Classes ----------------------------- Methods __init__ (self, *argv) __repr__ (self) asList (self) # -- Modifiers doSwap (self) doTransform (self, transform =None ) get_handle_length (self) Returns handle length and radii from base points. lerp_first (self, shift) lerp_last (self, shift) solve_curvature (self, time) Find Curvature of on-curve point at given time solve_derivative (self, time) Returns point of on-curve point at given time and vector of 1st and 2nd derivative. solve_distance_end (self, distance, timeStep =0.01 ) Returns time at which the given distance to end of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_distance_start (self, distance, timeStep =0.01 ) Returns time at which the given distance to beginning of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_extremes (self) Finds curve extremes and returns [(extreme_01_x, extreme_01_y, extreme_01_t)...(extreme_n_x, extreme_n_y, extreme_n_t)] solve_handle_distance_from_base (self, ratio =(0.5, 0.5) ) Finds new handle positions for given ratio from base points. solve_hobby (self, curvature =(0.9, 0.9) ) Calculates and applies John Hobby's mock-curvature-smoothness by given curvature - tuple (float,float) or (float) Based on Metapolator's Hobby Spline by Juraj Sukop, Lasse Fister, Simon Egli solve_hobby_curvature (self) Returns current curvature coefficients (complex(alpha), complex(beta)) for both handles according to John Hobby's mock-curvature calculation solve_parallel (self, vector, fullOutput =False ) Finds the t value along a cubic Bezier where a tangent (1st derivative) is parallel with the direction vector. vector: a pair of values representing the direction of interest (magnitude is ignored). returns 0.0 < = t < = 1.0 or None # Solving the dot product of cubic beziers first derivate to the vector given B'(t) x V. Two vectors are perpendicular if their dot product is zero. # So if you could find the (1) perpendicular of V it will be collinear == tangent of the curve so the equation to be solved is: # B'(t) x V(x,y) = 0; -(a*t^2 + b*t + c)*x + (g*t^2 + h*t + i)*y = 0 solved for t, where a,b,c are coefs for X and g,h,i for Y B'(t) derivate of curve # # Inspired by answer given by 'unutbu' on the stackoverflow question: http://stackoverflow.com/questions/20825173/how-to-find-a-point-if-any-on-quadratic-bezier-with-a-given-tangent-direction # Recoded and recalculated for qubic beziers. Used 'Rearrange It' app at http://www.wolframalpha.com/widgets/view.jsp?id=4be4308d0f9d17d1da68eea39de9b2ce was invaluable. # # DOTO: Fix calculation optimization error - will yield false positive result in cases #1 and #2 if vector is 45 degrees solve_point (self, time) Find point on cubic bezier at given time solve_proportional_handles (self, proportion =0.3 ) Equalizes handle length to given float(proportion) solve_slice (self, time) Returns two segments representing cubic bezier sliced at given time. Output: list [(Start), (Start_BCP_out), (Slice_BCP_in), (Slice), (Slice_BCP_out), (End_BCP_in), (End)] of tuples (x,y) solve_tunni (self) Make proportional handles keeping curvature and on-curve point positions Based on modified Andres Torresi implementation of Eduardo Tunni's method for control points Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) height line points tuple width x x_max y y_max solve_point typerig.core.objects.cubicbezier.CubicBezier.solve_point = solve_point (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Find point on cubic bezier at given time solve_derivative typerig.core.objects.cubicbezier.CubicBezier.solve_derivative = solve_derivative (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns point of on-curve point at given time and vector of 1st and 2nd derivative. solve_curvature typerig.core.objects.cubicbezier.CubicBezier.solve_curvature = solve_curvature (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Find Curvature of on-curve point at given time solve_slice typerig.core.objects.cubicbezier.CubicBezier.solve_slice = solve_slice (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns two segments representing cubic bezier sliced at given time. Output: list [(Start), (Start_BCP_out), (Slice_BCP_in), (Slice), (Slice_BCP_out), (End_BCP_in), (End)] of tuples (x,y) solve_distance_start typerig.core.objects.cubicbezier.CubicBezier.solve_distance_start = solve_distance_start (self, distance, timeStep =0.01 ) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns time at which the given distance to beginning of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_distance_end typerig.core.objects.cubicbezier.CubicBezier.solve_distance_end = solve_distance_end (self, distance, timeStep =0.01 ) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns time at which the given distance to end of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_extremes typerig.core.objects.cubicbezier.CubicBezier.solve_extremes = solve_extremes (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Finds curve extremes and returns [(extreme_01_x, extreme_01_y, extreme_01_t)...(extreme_n_x, extreme_n_y, extreme_n_t)] solve_parallel typerig.core.objects.cubicbezier.CubicBezier.solve_parallel = solve_parallel (self, vector, fullOutput =False ) unbound typerig.core.objects.cubicbezier.CubicBezier method Finds the t value along a cubic Bezier where a tangent (1st derivative) is parallel with the direction vector. vector: a pair of values representing the direction of interest (magnitude is ignored). returns 0.0 < = t < = 1.0 or None # Solving the dot product of cubic beziers first derivate to the vector given B'(t) x V. Two vectors are perpendicular if their dot product is zero. # So if you could find the (1) perpendicular of V it will be collinear == tangent of the curve so the equation to be solved is: # B'(t) x V(x,y) = 0; -(a*t^2 + b*t + c)*x + (g*t^2 + h*t + i)*y = 0 solved for t, where a,b,c are coefs for X and g,h,i for Y B'(t) derivate of curve # # Inspired by answer given by 'unutbu' on the stackoverflow question: http://stackoverflow.com/questions/20825173/how-to-find-a-point-if-any-on-quadratic-bezier-with-a-given-tangent-direction # Recoded and recalculated for qubic beziers. Used 'Rearrange It' app at http://www.wolframalpha.com/widgets/view.jsp?id=4be4308d0f9d17d1da68eea39de9b2ce was invaluable. # # DOTO: Fix calculation optimization error - will yield false positive result in cases #1 and #2 if vector is 45 degrees solve_proportional_handles typerig.core.objects.cubicbezier.CubicBezier.solve_proportional_handles = solve_proportional_handles (self, proportion =0.3 ) unbound typerig.core.objects.cubicbezier.CubicBezier method Equalizes handle length to given float(proportion) solve_handle_distance_from_base typerig.core.objects.cubicbezier.CubicBezier.solve_handle_distance_from_base = solve_handle_distance_from_base (self, ratio =(0.5, 0.5) ) unbound typerig.core.objects.cubicbezier.CubicBezier method Finds new handle positions for given ratio from base points. get_handle_length typerig.core.objects.cubicbezier.CubicBezier.get_handle_length = get_handle_length (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns handle length and radii from base points. solve_hobby typerig.core.objects.cubicbezier.CubicBezier.solve_hobby = solve_hobby (self, curvature =(0.9, 0.9) ) unbound typerig.core.objects.cubicbezier.CubicBezier method Calculates and applies John Hobby's mock-curvature-smoothness by given curvature - tuple(float,float) or (float) Based on Metapolator's Hobby Spline by Juraj Sukop, Lasse Fister, Simon Egli solve_hobby_curvature typerig.core.objects.cubicbezier.CubicBezier.solve_hobby_curvature = solve_hobby_curvature (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns current curvature coefficients (complex(alpha), complex(beta)) for both handles according to John Hobby's mock-curvature calculation solve_tunni typerig.core.objects.cubicbezier.CubicBezier.solve_tunni = solve_tunni (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Make proportional handles keeping curvature and on-curve point positions Based on modified Andres Torresi implementation of Eduardo Tunni's method for control points","title":"core.objects.cubicbezier"},{"location":"typerig.core.objects.cubicbezier.html#typerigcoreobjectscubicbezier","text":"","title":"typerig.core.objects.cubicbezier"},{"location":"typerig.core.objects.cubicbezier.html#cubicbezier","text":"","title":"CubicBezier"},{"location":"typerig.core.objects.cubicbezier.html#solve_point","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_point = solve_point (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Find point on cubic bezier at given time","title":"solve_point"},{"location":"typerig.core.objects.cubicbezier.html#solve_derivative","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_derivative = solve_derivative (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns point of on-curve point at given time and vector of 1st and 2nd derivative.","title":"solve_derivative"},{"location":"typerig.core.objects.cubicbezier.html#solve_curvature","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_curvature = solve_curvature (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Find Curvature of on-curve point at given time","title":"solve_curvature"},{"location":"typerig.core.objects.cubicbezier.html#solve_slice","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_slice = solve_slice (self, time) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns two segments representing cubic bezier sliced at given time. Output: list [(Start), (Start_BCP_out), (Slice_BCP_in), (Slice), (Slice_BCP_out), (End_BCP_in), (End)] of tuples (x,y)","title":"solve_slice"},{"location":"typerig.core.objects.cubicbezier.html#solve_distance_start","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_distance_start = solve_distance_start (self, distance, timeStep =0.01 ) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns time at which the given distance to beginning of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results.","title":"solve_distance_start"},{"location":"typerig.core.objects.cubicbezier.html#solve_distance_end","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_distance_end = solve_distance_end (self, distance, timeStep =0.01 ) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns time at which the given distance to end of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results.","title":"solve_distance_end"},{"location":"typerig.core.objects.cubicbezier.html#solve_extremes","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_extremes = solve_extremes (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Finds curve extremes and returns [(extreme_01_x, extreme_01_y, extreme_01_t)...(extreme_n_x, extreme_n_y, extreme_n_t)]","title":"solve_extremes"},{"location":"typerig.core.objects.cubicbezier.html#solve_parallel","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_parallel = solve_parallel (self, vector, fullOutput =False ) unbound typerig.core.objects.cubicbezier.CubicBezier method Finds the t value along a cubic Bezier where a tangent (1st derivative) is parallel with the direction vector. vector: a pair of values representing the direction of interest (magnitude is ignored). returns 0.0 < = t < = 1.0 or None # Solving the dot product of cubic beziers first derivate to the vector given B'(t) x V. Two vectors are perpendicular if their dot product is zero. # So if you could find the (1) perpendicular of V it will be collinear == tangent of the curve so the equation to be solved is: # B'(t) x V(x,y) = 0; -(a*t^2 + b*t + c)*x + (g*t^2 + h*t + i)*y = 0 solved for t, where a,b,c are coefs for X and g,h,i for Y B'(t) derivate of curve # # Inspired by answer given by 'unutbu' on the stackoverflow question: http://stackoverflow.com/questions/20825173/how-to-find-a-point-if-any-on-quadratic-bezier-with-a-given-tangent-direction # Recoded and recalculated for qubic beziers. Used 'Rearrange It' app at http://www.wolframalpha.com/widgets/view.jsp?id=4be4308d0f9d17d1da68eea39de9b2ce was invaluable. # # DOTO: Fix calculation optimization error - will yield false positive result in cases #1 and #2 if vector is 45 degrees","title":"solve_parallel"},{"location":"typerig.core.objects.cubicbezier.html#solve_proportional_handles","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_proportional_handles = solve_proportional_handles (self, proportion =0.3 ) unbound typerig.core.objects.cubicbezier.CubicBezier method Equalizes handle length to given float(proportion)","title":"solve_proportional_handles"},{"location":"typerig.core.objects.cubicbezier.html#solve_handle_distance_from_base","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_handle_distance_from_base = solve_handle_distance_from_base (self, ratio =(0.5, 0.5) ) unbound typerig.core.objects.cubicbezier.CubicBezier method Finds new handle positions for given ratio from base points.","title":"solve_handle_distance_from_base"},{"location":"typerig.core.objects.cubicbezier.html#get_handle_length","text":"typerig.core.objects.cubicbezier.CubicBezier.get_handle_length = get_handle_length (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns handle length and radii from base points.","title":"get_handle_length"},{"location":"typerig.core.objects.cubicbezier.html#solve_hobby","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_hobby = solve_hobby (self, curvature =(0.9, 0.9) ) unbound typerig.core.objects.cubicbezier.CubicBezier method Calculates and applies John Hobby's mock-curvature-smoothness by given curvature - tuple(float,float) or (float) Based on Metapolator's Hobby Spline by Juraj Sukop, Lasse Fister, Simon Egli","title":"solve_hobby"},{"location":"typerig.core.objects.cubicbezier.html#solve_hobby_curvature","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_hobby_curvature = solve_hobby_curvature (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Returns current curvature coefficients (complex(alpha), complex(beta)) for both handles according to John Hobby's mock-curvature calculation","title":"solve_hobby_curvature"},{"location":"typerig.core.objects.cubicbezier.html#solve_tunni","text":"typerig.core.objects.cubicbezier.CubicBezier.solve_tunni = solve_tunni (self) unbound typerig.core.objects.cubicbezier.CubicBezier method Make proportional handles keeping curvature and on-curve point positions Based on modified Andres Torresi implementation of Eduardo Tunni's method for control points","title":"solve_tunni"},{"location":"typerig.core.objects.delta.html","text":"typerig.core.objects.delta typerig . core . objects .delta ( version 0.10.4) # MODULE: TypeRig / Core / Delta (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math typerig.core.func.transform Classes _abcoll.Sequence ( _abcoll.Sized, _abcoll.Iterable, _abcoll.Container ) DeltaArray DeltaScale class DeltaArray ( _abcoll.Sequence ) # - Objects ------------------------------------ # -- Interpolation ------------------------------ Method resolution order: DeltaArray abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods call (self, global_time, extrapolate =False ) Linear interpolation (LERP) with optional extrapolation. Interval (-inf) < -- (0 .. len(array)-1) --> (+inf) (supports negative indexing). getitem (self, i) # - Internals hash (self) init (self, data) len (self) repr (self) mixer (self, global_time) Will return the proper coordinate values for the selected global time. timer (self, global_time, extrapolate =False ) Attributes abstractmethods = frozenset([]) Methods from abcoll.Sequence __contains_ (self, value) iter (self) reversed (self) count (self, value) S. count (value) -> integer -- return number of occurrences of value index (self, value) S. index (value) -> integer -- return first index of value. Raises ValueError if the value is not present. Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). class DeltaScale ( _abcoll.Sequence ) Method resolution order: DeltaScale abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin_ .object Methods getitem (self, index) init (self, *argv) len (self) repr (self) # - Internals ---------------------------------- dump (self) # - IO --------------------------------------- load (self, other) scale_by_stem (self, stem, scale, comp, shift, italic_angle, extrapolate =False ) scale_by_time (self, time, scale, comp, shift, italic_angle, extrapolate =False ) # - Process ---------------------------------- Descriptors dim Attributes abstractmethods = frozenset([]) setitem = None Methods from abcoll.Sequence __contains_ (self, value) iter (self) reversed (self) count (self, value) S. count (value) -> integer -- return number of occurrences of value index (self, value) S. index (value) -> integer -- return first index of value. Raises ValueError if the value is not present. Class methods from abcoll.Sized __subclasshook_ (cls, C) from abc.ABCMeta Descriptors from abcoll.Sized __dict_ dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from abcoll.Sized __metaclass_ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). DeltaArray typerig.core.objects.delta.DeltaArray = class DeltaArray ( _abcoll.Sequence ) # - Objects ------------------------------------ # -- Interpolation ------------------------------ Method resolution order: DeltaArray _abcoll.Sequence _abcoll.Sized _abcoll.Iterable _abcoll.Container __builtin__.object Methods __call__ (self, global_time, extrapolate =False ) Linear interpolation (LERP) with optional extrapolation. Interval (-inf) < -- (0 .. len(array)-1) --> (+inf) (supports negative indexing). __getitem__ (self, i) # - Internals __hash__ (self) __init__ (self, data) __len__ (self) __repr__ (self) mixer (self, global_time) Will return the proper coordinate values for the selected global time. timer (self, global_time, extrapolate =False ) Attributes __abstractmethods__ = frozenset([]) Methods from _abcoll.Sequence __contains__ (self, value) __iter__ (self) __reversed__ (self) count (self, value) S. count (value) -> integer -- return number of occurrences of value index (self, value) S. index (value) -> integer -- return first index of value. Raises ValueError if the value is not present. Class methods from _abcoll.Sized __subclasshook__ (cls, C) from abc.ABCMeta Descriptors from _abcoll.Sized __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from _abcoll.Sized __metaclass__ = class 'abc.ABCMeta' Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). mixer typerig.core.objects.delta.DeltaArray.mixer = mixer (self, global_time) unbound typerig.core.objects.delta.DeltaArray method Will return the proper coordinate values for the selected global time.","title":"core.objects.delta"},{"location":"typerig.core.objects.delta.html#typerigcoreobjectsdelta","text":"","title":"typerig.core.objects.delta"},{"location":"typerig.core.objects.delta.html#deltaarray","text":"","title":"DeltaArray"},{"location":"typerig.core.objects.delta.html#mixer","text":"typerig.core.objects.delta.DeltaArray.mixer = mixer (self, global_time) unbound typerig.core.objects.delta.DeltaArray method Will return the proper coordinate values for the selected global time.","title":"mixer"},{"location":"typerig.core.objects.line.html","text":"typerig.core.objects.line typerig . core . objects .line ( version 0.26.1) # MODULE: TypeRig / Core / Line (Object) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2015-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math Classes builtin .object Line Vector class Line ( builtin .object ) # - Classes ----------------------------- Methods add (self, other) and (self, other) div (self, other) init (self, *argv) mul (self, other) repr (self) rmul = mul (self, other) sub (self, other) doSwap (self) # -- Modifiers doTransform (self, transform =None ) intersect_line (self, other_line) Find intersection point (X, Y) for two lines. Returns (None, None) if lines do not intersect. lerp (self, time) lerp_xy (self, time_x, time_y) shift (self, dx, dy) Shift coordinates by dx, dy solve_point (self, time) Find point on the line at given time solve_slice (self, time) Slice line at given time solve_x (self, y) Solve line equation for X coordinate. solve_y (self, x) Solve line equation for Y coordinate. Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) angle diff_x diff_y height length points slope tuple width x x_max y y_intercept Get the Y intercept of a line segment y_max class Vector ( Line ) Method resolution order: Vector Line builtin .object Methods init (self, *argv) repr (self) getAngle (self) getSlope (self) # - Getters Descriptors angle slope x y Methods from Line add (self, other) and (self, other) div (self, other) mul (self, other) rmul = mul (self, other) sub (self, other) doSwap (self) # -- Modifiers doTransform (self, transform =None ) intersect_line (self, other_line) Find intersection point (X, Y) for two lines. Returns (None, None) if lines do not intersect. lerp (self, time) lerp_xy (self, time_x, time_y) shift (self, dx, dy) Shift coordinates by dx, dy solve_point (self, time) Find point on the line at given time solve_slice (self, time) Slice line at given time solve_x (self, y) Solve line equation for X coordinate. solve_y (self, x) Solve line equation for Y coordinate. Descriptors from Line dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) diff_x diff_y height length points tuple width x_max y_intercept Get the Y intercept of a line segment y_max Line typerig.core.objects.line.Line = class Line ( __builtin__.object ) # - Classes ----------------------------- Methods __add__ (self, other) __and__ (self, other) __div__ (self, other) __init__ (self, *argv) __mul__ (self, other) __repr__ (self) __rmul__ = __mul__ (self, other) __sub__ (self, other) doSwap (self) # -- Modifiers doTransform (self, transform =None ) intersect_line (self, other_line) Find intersection point (X, Y) for two lines. Returns (None, None) if lines do not intersect. lerp (self, time) lerp_xy (self, time_x, time_y) shift (self, dx, dy) Shift coordinates by dx, dy solve_point (self, time) Find point on the line at given time solve_slice (self, time) Slice line at given time solve_x (self, y) Solve line equation for X coordinate. solve_y (self, x) Solve line equation for Y coordinate. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) angle diff_x diff_y height length points slope tuple width x x_max y y_intercept Get the Y intercept of a line segment y_max y_intercept typerig.core.objects.line.Line.y_intercept Get the Y intercept of a line segment solve_y typerig.core.objects.line.Line.solve_y = solve_y (self, x) unbound typerig.core.objects.line.Line method Solve line equation for Y coordinate. solve_x typerig.core.objects.line.Line.solve_x = solve_x (self, y) unbound typerig.core.objects.line.Line method Solve line equation for X coordinate. solve_point typerig.core.objects.line.Line.solve_point = solve_point (self, time) unbound typerig.core.objects.line.Line method Find point on the line at given time solve_slice typerig.core.objects.line.Line.solve_slice = solve_slice (self, time) unbound typerig.core.objects.line.Line method Slice line at given time intersect_line typerig.core.objects.line.Line.intersect_line = intersect_line (self, other_line) unbound typerig.core.objects.line.Line method Find intersection point (X, Y) for two lines. Returns (None, None) if lines do not intersect. shift typerig.core.objects.line.Line.shift = shift (self, dx, dy) unbound typerig.core.objects.line.Line method Shift coordinates by dx, dy","title":"core.objects.line"},{"location":"typerig.core.objects.line.html#typerigcoreobjectsline","text":"","title":"typerig.core.objects.line"},{"location":"typerig.core.objects.line.html#line","text":"","title":"Line"},{"location":"typerig.core.objects.line.html#y_intercept","text":"typerig.core.objects.line.Line.y_intercept Get the Y intercept of a line segment","title":"y_intercept"},{"location":"typerig.core.objects.line.html#solve_y","text":"typerig.core.objects.line.Line.solve_y = solve_y (self, x) unbound typerig.core.objects.line.Line method Solve line equation for Y coordinate.","title":"solve_y"},{"location":"typerig.core.objects.line.html#solve_x","text":"typerig.core.objects.line.Line.solve_x = solve_x (self, y) unbound typerig.core.objects.line.Line method Solve line equation for X coordinate.","title":"solve_x"},{"location":"typerig.core.objects.line.html#solve_point","text":"typerig.core.objects.line.Line.solve_point = solve_point (self, time) unbound typerig.core.objects.line.Line method Find point on the line at given time","title":"solve_point"},{"location":"typerig.core.objects.line.html#solve_slice","text":"typerig.core.objects.line.Line.solve_slice = solve_slice (self, time) unbound typerig.core.objects.line.Line method Slice line at given time","title":"solve_slice"},{"location":"typerig.core.objects.line.html#intersect_line","text":"typerig.core.objects.line.Line.intersect_line = intersect_line (self, other_line) unbound typerig.core.objects.line.Line method Find intersection point (X, Y) for two lines. Returns (None, None) if lines do not intersect.","title":"intersect_line"},{"location":"typerig.core.objects.line.html#shift","text":"typerig.core.objects.line.Line.shift = shift (self, dx, dy) unbound typerig.core.objects.line.Line method Shift coordinates by dx, dy","title":"shift"},{"location":"typerig.core.objects.matrix.html","text":"typerig.core.objects.matrix typerig . core . objects .matrix # MODULE: TypeRig / Core / Matrix (Object) # ---------------------------------------------------------- # A slight adaptation of... # \"Basic Table, Matrix and Vector functions for Python 2+\" # (C) Raymond Hettinger, 2002 # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math operator random Classes builtin .list ( builtin .object ) Table Matrix Square Triangular LowerTri UpperTri Vec class LowerTri ( Triangular ) Method resolution order: LowerTri Triangular Square Matrix Table builtin .list builtin .object Methods from Triangular det (self) eigs (self) Methods from Square pow (self, exp) Raise a square matrix to an integer power (i.e. A**3 is the same as A. mmul (A. mmul (A)) hessenberg (self) Householder reduction to Hessenberg Form (zeroes below the diagonal) while keeping the same eigenvalues as self. inverse (self) lu (self) Factor a square matrix into lower and upper triangular form such that L. mmul (U)==A Methods from Matrix init (self, elems) Form a matrix from a list of lists or a list of Vecs augment (self, otherMat) Make a new matrix with the two original matrices laid side by side diag (self) Return a vector composed of elements on the matrix diagonal mmul (self, other) Matrix multiply by another matrix or a column vector qr (self, ROnly =0 ) QR decomposition using Householder reflections: Q*R==self, Q. tr ()*Q==I(n), R upper triangular rank (self) solve (self, b) Divide matrix into a column vector or matrix and iterate to improve the solution star (self) Return the Hermetian adjoint so that Star[i][j] = Original[j][i]. conjugate () tr (self) Tranpose elements so that Transposed[i][j] = Original[j][i] trace (self) Descriptors from Matrix cols rows size Methods from Table abs (self) add (self, rhs) div (self, rhs) eq (self, rhs) getslice (self, i, j) mul (self, rhs) neg (self) radd (self, lhs) rdiv (self, lhs) rmul (self, lhs) rsub (self, lhs) str (self) sub (self, rhs) concat = add (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from builtin .list contains (...) x. __contains__ (y) < ==> y in x delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iadd (...) x. __iadd__ (y) < ==> x+=y imul (...) x. __imul__ (y) < ==> x*=y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) reversed (...) L. __reversed__ () -- return a reverse iterator over the list setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sizeof (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from builtin .list hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class Matrix ( Table ) Method resolution order: Matrix Table builtin .list builtin .object Methods init (self, elems) Form a matrix from a list of lists or a list of Vecs augment (self, otherMat) Make a new matrix with the two original matrices laid side by side diag (self) Return a vector composed of elements on the matrix diagonal mmul (self, other) Matrix multiply by another matrix or a column vector qr (self, ROnly =0 ) QR decomposition using Householder reflections: Q*R==self, Q. tr ()*Q==I(n), R upper triangular rank (self) solve (self, b) Divide matrix into a column vector or matrix and iterate to improve the solution star (self) Return the Hermetian adjoint so that Star[i][j] = Original[j][i]. conjugate () tr (self) Tranpose elements so that Transposed[i][j] = Original[j][i] trace (self) Descriptors cols rows size Methods from Table abs (self) add (self, rhs) div (self, rhs) eq (self, rhs) getslice (self, i, j) mul (self, rhs) neg (self) radd (self, lhs) rdiv (self, lhs) rmul (self, lhs) rsub (self, lhs) str (self) sub (self, rhs) concat = add (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from builtin .list contains (...) x. __contains__ (y) < ==> y in x delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iadd (...) x. __iadd__ (y) < ==> x+=y imul (...) x. __imul__ (y) < ==> x*=y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) reversed (...) L. __reversed__ () -- return a reverse iterator over the list setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sizeof (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from builtin .list hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class Square ( Matrix ) Method resolution order: Square Matrix Table builtin .list builtin .object Methods pow (self, exp) Raise a square matrix to an integer power (i.e. A**3 is the same as A. mmul (A. mmul (A)) det (self) eigs (self) Estimate principal eigenvalues using the QR with shifts method hessenberg (self) Householder reduction to Hessenberg Form (zeroes below the diagonal) while keeping the same eigenvalues as self. inverse (self) lu (self) Factor a square matrix into lower and upper triangular form such that L. mmul (U)==A Methods from Matrix init (self, elems) Form a matrix from a list of lists or a list of Vecs augment (self, otherMat) Make a new matrix with the two original matrices laid side by side diag (self) Return a vector composed of elements on the matrix diagonal mmul (self, other) Matrix multiply by another matrix or a column vector qr (self, ROnly =0 ) QR decomposition using Householder reflections: Q*R==self, Q. tr ()*Q==I(n), R upper triangular rank (self) solve (self, b) Divide matrix into a column vector or matrix and iterate to improve the solution star (self) Return the Hermetian adjoint so that Star[i][j] = Original[j][i]. conjugate () tr (self) Tranpose elements so that Transposed[i][j] = Original[j][i] trace (self) Descriptors from Matrix cols rows size Methods from Table abs (self) add (self, rhs) div (self, rhs) eq (self, rhs) getslice (self, i, j) mul (self, rhs) neg (self) radd (self, lhs) rdiv (self, lhs) rmul (self, lhs) rsub (self, lhs) str (self) sub (self, rhs) concat = add (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from builtin .list contains (...) x. __contains__ (y) < ==> y in x delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iadd (...) x. __iadd__ (y) < ==> x+=y imul (...) x. __imul__ (y) < ==> x*=y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) reversed (...) L. __reversed__ () -- return a reverse iterator over the list setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sizeof (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from builtin .list hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class Table ( builtin .list ) # - Classes ------------------------------ Method resolution order: Table builtin .list builtin .object Methods abs (self) add (self, rhs) div (self, rhs) eq (self, rhs) getslice (self, i, j) init (self, elems) mul (self, rhs) neg (self) radd (self, lhs) rdiv (self, lhs) rmul (self, lhs) rsub (self, lhs) str (self) sub (self, rhs) concat = add (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes dim = 1 Methods from builtin .list contains (...) x. __contains__ (y) < ==> y in x delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iadd (...) x. __iadd__ (y) < ==> x+=y imul (...) x. __imul__ (y) < ==> x*=y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) reversed (...) L. __reversed__ () -- return a reverse iterator over the list setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sizeof (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from builtin .list hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class Triangular ( Square ) Method resolution order: Triangular Square Matrix Table builtin .list builtin .object Methods det (self) eigs (self) Methods from Square pow (self, exp) Raise a square matrix to an integer power (i.e. A**3 is the same as A. mmul (A. mmul (A)) hessenberg (self) Householder reduction to Hessenberg Form (zeroes below the diagonal) while keeping the same eigenvalues as self. inverse (self) lu (self) Factor a square matrix into lower and upper triangular form such that L. mmul (U)==A Methods from Matrix init (self, elems) Form a matrix from a list of lists or a list of Vecs augment (self, otherMat) Make a new matrix with the two original matrices laid side by side diag (self) Return a vector composed of elements on the matrix diagonal mmul (self, other) Matrix multiply by another matrix or a column vector qr (self, ROnly =0 ) QR decomposition using Householder reflections: Q*R==self, Q. tr ()*Q==I(n), R upper triangular rank (self) solve (self, b) Divide matrix into a column vector or matrix and iterate to improve the solution star (self) Return the Hermetian adjoint so that Star[i][j] = Original[j][i]. conjugate () tr (self) Tranpose elements so that Transposed[i][j] = Original[j][i] trace (self) Descriptors from Matrix cols rows size Methods from Table abs (self) add (self, rhs) div (self, rhs) eq (self, rhs) getslice (self, i, j) mul (self, rhs) neg (self) radd (self, lhs) rdiv (self, lhs) rmul (self, lhs) rsub (self, lhs) str (self) sub (self, rhs) concat = add (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from builtin .list contains (...) x. __contains__ (y) < ==> y in x delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iadd (...) x. __iadd__ (y) < ==> x+=y imul (...) x. __imul__ (y) < ==> x*=y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) reversed (...) L. __reversed__ () -- return a reverse iterator over the list setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sizeof (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from builtin .list hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class UpperTri ( Triangular ) Method resolution order: UpperTri Triangular Square Matrix Table builtin .list builtin .object Methods from Triangular det (self) eigs (self) Methods from Square pow (self, exp) Raise a square matrix to an integer power (i.e. A**3 is the same as A. mmul (A. mmul (A)) hessenberg (self) Householder reduction to Hessenberg Form (zeroes below the diagonal) while keeping the same eigenvalues as self. inverse (self) lu (self) Factor a square matrix into lower and upper triangular form such that L. mmul (U)==A Methods from Matrix init (self, elems) Form a matrix from a list of lists or a list of Vecs augment (self, otherMat) Make a new matrix with the two original matrices laid side by side diag (self) Return a vector composed of elements on the matrix diagonal mmul (self, other) Matrix multiply by another matrix or a column vector qr (self, ROnly =0 ) QR decomposition using Householder reflections: Q*R==self, Q. tr ()*Q==I(n), R upper triangular rank (self) solve (self, b) Divide matrix into a column vector or matrix and iterate to improve the solution star (self) Return the Hermetian adjoint so that Star[i][j] = Original[j][i]. conjugate () tr (self) Tranpose elements so that Transposed[i][j] = Original[j][i] trace (self) Descriptors from Matrix cols rows size Methods from Table abs (self) add (self, rhs) div (self, rhs) eq (self, rhs) getslice (self, i, j) mul (self, rhs) neg (self) radd (self, lhs) rdiv (self, lhs) rmul (self, lhs) rsub (self, lhs) str (self) sub (self, rhs) concat = add (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from builtin .list contains (...) x. __contains__ (y) < ==> y in x delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iadd (...) x. __iadd__ (y) < ==> x+=y imul (...) x. __imul__ (y) < ==> x*=y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) reversed (...) L. __reversed__ () -- return a reverse iterator over the list setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sizeof (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from builtin .list hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class Vec ( Table ) Method resolution order: Vec Table builtin .list builtin .object Methods cross (self, otherVec) Compute a Vector or Cross Product with another vector dot (self, otherVec) house (self, index) Compute a Householder vector which zeroes all but the index element after a reflection norm (self) normalize (self) outer (self, otherVec) polyval (self, x) Vec ([6,3,4]). polyval (5) evaluates to 6*x**2 + 3*x + 4 at x=5 ratval (self, x) Vec ([10,20,30,40,50]). ratfit (5) evaluates to (10*x**2 + 20*x + 30) / (40*x**2 + 50*x + 1) at x=5. Methods from Table abs (self) add (self, rhs) div (self, rhs) eq (self, rhs) getslice (self, i, j) init (self, elems) mul (self, rhs) neg (self) radd (self, lhs) rdiv (self, lhs) rmul (self, lhs) rsub (self, lhs) str (self) sub (self, rhs) concat = add (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from builtin .list contains (...) x. __contains__ (y) < ==> y in x delitem (...) x. __delitem__ (y) < ==> del x[y] delslice (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iadd (...) x. __iadd__ (y) < ==> x+=y imul (...) x. __imul__ (y) < ==> x*=y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y repr (...) x. __repr__ () < ==> repr(x) reversed (...) L. __reversed__ () -- return a reverse iterator over the list setitem (...) x. __setitem__ (i, y) < ==> x[i]=y setslice (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. sizeof (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from builtin .list hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T Functions Mat (elems) Factory function to create a new matrix. eye (m =1 , n =None ) Identity matrix with side length m-by-m or m-by-n funToVec (tgtfun, low =-1 , high =1 , steps =40 , EqualSpacing =0 ) Compute x,y points from evaluating a target function over an interval (low to high) at evenly spaces points or with Chebyshev abscissa spacing (default) funfit ((xvec, yvec), basisfuns) Solves design matrix for approximating to basis functions genmat (m, n, func) getconj (z) getimag (z) getreal (z) hilb (m =1 , n =None ) Hilbert matrix with side length m-by-m or m-by-n. Elem[i][j]=1/(i+j+1) iszero (z) # - Helpers ------------------------------ polyfit ((xvec, yvec), degree =2 ) Solves Vandermonde design matrix for approximating polynomial coefficients rand (m =1 , n =None ) Random matrix with side length m-by-m or m-by-n ratfit ((xvec, yvec), degree =2 ) Solves design matrix for approximating rational polynomial coefficients (a*x**2 + b*x + c)/(d*x**2 + e*x + 1) zeroes (m =1 , n =None ) Zero matrix with side length m-by-m or m-by-n. Table typerig.core.objects.matrix.Table = class Table ( __builtin__.list ) # - Classes ------------------------------ Method resolution order: Table __builtin__.list __builtin__.object Methods __abs__ (self) __add__ (self, rhs) __div__ (self, rhs) __eq__ (self, rhs) __getslice__ (self, i, j) __init__ (self, elems) __mul__ (self, rhs) __neg__ (self) __radd__ (self, lhs) __rdiv__ (self, lhs) __rmul__ (self, lhs) __rsub__ (self, lhs) __str__ (self) __sub__ (self, rhs) concat = __add__ (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes dim = 1 Methods from __builtin__.list __contains__ (...) x. __contains__ (y) < ==> y in x __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __gt__ (...) x. __gt__ (y) < ==> x>y __iadd__ (...) x. __iadd__ (y) < ==> x+=y __imul__ (...) x. __imul__ (y) < ==> x*=y __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __reversed__ (...) L. __reversed__ () -- return a reverse iterator over the list __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __sizeof__ (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from __builtin__.list __hash__ = None __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T __add__ typerig.core.objects.matrix.Table.concat = __add__ (...) x.__add__(y) < ==> x+y dim typerig.core.objects.matrix.Table.dim = 1 map typerig.core.objects.matrix.Table.map = map (self, op, rhs =None ) unbound typerig.core.objects.matrix.Table method Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). Vec typerig.core.objects.matrix.Vec = class Vec ( Table ) Method resolution order: Vec Table __builtin__.list __builtin__.object Methods cross (self, otherVec) Compute a Vector or Cross Product with another vector dot (self, otherVec) house (self, index) Compute a Householder vector which zeroes all but the index element after a reflection norm (self) normalize (self) outer (self, otherVec) polyval (self, x) Vec([6,3,4]). polyval (5) evaluates to 6*x**2 + 3*x + 4 at x=5 ratval (self, x) Vec([10,20,30,40,50]).ratfit(5) evaluates to (10*x**2 + 20*x + 30) / (40*x**2 + 50*x + 1) at x=5. Methods from Table __abs__ (self) __add__ (self, rhs) __div__ (self, rhs) __eq__ (self, rhs) __getslice__ (self, i, j) __init__ (self, elems) __mul__ (self, rhs) __neg__ (self) __radd__ (self, lhs) __rdiv__ (self, lhs) __rmul__ (self, lhs) __rsub__ (self, lhs) __str__ (self) __sub__ (self, rhs) concat = __add__ (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from __builtin__.list __contains__ (...) x. __contains__ (y) < ==> y in x __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __gt__ (...) x. __gt__ (y) < ==> x>y __iadd__ (...) x. __iadd__ (y) < ==> x+=y __imul__ (...) x. __imul__ (y) < ==> x*=y __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __reversed__ (...) L. __reversed__ () -- return a reverse iterator over the list __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __sizeof__ (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from __builtin__.list __hash__ = None __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T cross typerig.core.objects.matrix.Vec.cross = cross (self, otherVec) unbound typerig.core.objects.matrix.Vec method Compute a Vector or Cross Product with another vector house typerig.core.objects.matrix.Vec.house = house (self, index) unbound typerig.core.objects.matrix.Vec method Compute a Householder vector which zeroes all but the index element after a reflection polyval typerig.core.objects.matrix.Vec.polyval = polyval (self, x) unbound typerig.core.objects.matrix.Vec method Vec([6,3,4]).polyval(5) evaluates to 6*x**2 + 3*x + 4 at x=5 ratval typerig.core.objects.matrix.Vec.ratval = ratval (self, x) unbound typerig.core.objects.matrix.Vec method Vec([10,20,30,40,50]).ratfit(5) evaluates to (10*x**2 + 20*x + 30) / (40*x**2 + 50*x + 1) at x=5. Matrix typerig.core.objects.matrix.Matrix = class Matrix ( Table ) Method resolution order: Matrix Table __builtin__.list __builtin__.object Methods __init__ (self, elems) Form a matrix from a list of lists or a list of Vecs augment (self, otherMat) Make a new matrix with the two original matrices laid side by side diag (self) Return a vector composed of elements on the matrix diagonal mmul (self, other) Matrix multiply by another matrix or a column vector qr (self, ROnly =0 ) QR decomposition using Householder reflections: Q*R==self, Q. tr ()*Q==I(n), R upper triangular rank (self) solve (self, b) Divide matrix into a column vector or matrix and iterate to improve the solution star (self) Return the Hermetian adjoint so that Star[i][j] = Original[j][i]. conjugate () tr (self) Tranpose elements so that Transposed[i][j] = Original[j][i] trace (self) Descriptors cols rows size Methods from Table __abs__ (self) __add__ (self, rhs) __div__ (self, rhs) __eq__ (self, rhs) __getslice__ (self, i, j) __mul__ (self, rhs) __neg__ (self) __radd__ (self, lhs) __rdiv__ (self, lhs) __rmul__ (self, lhs) __rsub__ (self, lhs) __str__ (self) __sub__ (self, rhs) concat = __add__ (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from __builtin__.list __contains__ (...) x. __contains__ (y) < ==> y in x __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __gt__ (...) x. __gt__ (y) < ==> x>y __iadd__ (...) x. __iadd__ (y) < ==> x+=y __imul__ (...) x. __imul__ (y) < ==> x*=y __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __reversed__ (...) L. __reversed__ () -- return a reverse iterator over the list __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __sizeof__ (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from __builtin__.list __hash__ = None __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T tr typerig.core.objects.matrix.Matrix.tr = tr (self) unbound typerig.core.objects.matrix.Matrix method Tranpose elements so that Transposed[i][j] = Original[j][i] star typerig.core.objects.matrix.Matrix.star = star (self) unbound typerig.core.objects.matrix.Matrix method Return the Hermetian adjoint so that Star[i][j] = Original[j][i].conjugate() diag typerig.core.objects.matrix.Matrix.diag = diag (self) unbound typerig.core.objects.matrix.Matrix method Return a vector composed of elements on the matrix diagonal mmul typerig.core.objects.matrix.Matrix.mmul = mmul (self, other) unbound typerig.core.objects.matrix.Matrix method Matrix multiply by another matrix or a column vector augment typerig.core.objects.matrix.Matrix.augment = augment (self, otherMat) unbound typerig.core.objects.matrix.Matrix method Make a new matrix with the two original matrices laid side by side qr typerig.core.objects.matrix.Matrix.qr = qr (self, ROnly =0 ) unbound typerig.core.objects.matrix.Matrix method QR decomposition using Householder reflections: Q*R==self, Q.tr()*Q==I(n), R upper triangular solve typerig.core.objects.matrix.Matrix.solve = solve (self, b) unbound typerig.core.objects.matrix.Matrix method Divide matrix into a column vector or matrix and iterate to improve the solution Square typerig.core.objects.matrix.Square = class Square ( Matrix ) Method resolution order: Square Matrix Table __builtin__.list __builtin__.object Methods __pow__ (self, exp) Raise a square matrix to an integer power (i.e. A**3 is the same as A. mmul (A. mmul (A)) det (self) eigs (self) Estimate principal eigenvalues using the QR with shifts method hessenberg (self) Householder reduction to Hessenberg Form (zeroes below the diagonal) while keeping the same eigenvalues as self. inverse (self) lu (self) Factor a square matrix into lower and upper triangular form such that L. mmul (U)==A Methods from Matrix __init__ (self, elems) Form a matrix from a list of lists or a list of Vecs augment (self, otherMat) Make a new matrix with the two original matrices laid side by side diag (self) Return a vector composed of elements on the matrix diagonal mmul (self, other) Matrix multiply by another matrix or a column vector qr (self, ROnly =0 ) QR decomposition using Householder reflections: Q*R==self, Q. tr ()*Q==I(n), R upper triangular rank (self) solve (self, b) Divide matrix into a column vector or matrix and iterate to improve the solution star (self) Return the Hermetian adjoint so that Star[i][j] = Original[j][i]. conjugate () tr (self) Tranpose elements so that Transposed[i][j] = Original[j][i] trace (self) Descriptors from Matrix cols rows size Methods from Table __abs__ (self) __add__ (self, rhs) __div__ (self, rhs) __eq__ (self, rhs) __getslice__ (self, i, j) __mul__ (self, rhs) __neg__ (self) __radd__ (self, lhs) __rdiv__ (self, lhs) __rmul__ (self, lhs) __rsub__ (self, lhs) __str__ (self) __sub__ (self, rhs) concat = __add__ (...) x. __add__ (y) < ==> x+y conjugate (self) exists (self, predicate) flatten (self) forall (self, predicate) imag (self) map (self, op, rhs =None ) Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix). prod (self) real (self) sum (self) Descriptors from Table __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Attributes from Table dim = 1 Methods from __builtin__.list __contains__ (...) x. __contains__ (y) < ==> y in x __delitem__ (...) x. __delitem__ (y) < ==> del x[y] __delslice__ (...) x. __delslice__ (i, j) < ==> del x[i:j] Use of negative indices is not supported. __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __getitem__ (...) x. __getitem__ (y) < ==> x[y] __gt__ (...) x. __gt__ (y) < ==> x>y __iadd__ (...) x. __iadd__ (y) < ==> x+=y __imul__ (...) x. __imul__ (y) < ==> x*=y __iter__ (...) x. __iter__ () < ==> iter(x) __le__ (...) x. __le__ (y) < ==> x < =y __len__ (...) x. __len__ () < ==> len(x) __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __repr__ (...) x. __repr__ () < ==> repr(x) __reversed__ (...) L. __reversed__ () -- return a reverse iterator over the list __setitem__ (...) x. __setitem__ (i, y) < ==> x[i]=y __setslice__ (...) x. __setslice__ (i, j, y) < ==> x[i:j]=y Use of negative indices is not supported. __sizeof__ (...) L. __sizeof__ () -- size of L in memory, in bytes append (...) L. append (object) -- append object to end count (...) L. count (value) -> integer -- return number of occurrences of value extend (...) L. extend (iterable) -- extend list by appending elements from the iterable index (...) L. index (value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. insert (...) L. insert (index, object) -- insert object before index pop (...) L. pop ([index]) -> item -- remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. remove (...) L. remove (value) -- remove first occurrence of value. Raises ValueError if the value is not present. reverse (...) L. reverse () -- reverse *IN PLACE* sort (...) L. sort (cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*; cmp(x, y) -> -1, 0, 1 Attributes from __builtin__.list __hash__ = None __new__ = built-in method __new__ of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T lu typerig.core.objects.matrix.Square.lu = lu (self) unbound typerig.core.objects.matrix.Square method Factor a square matrix into lower and upper triangular form such that L.mmul(U)==A hessenberg typerig.core.objects.matrix.Square.hessenberg = hessenberg (self) unbound typerig.core.objects.matrix.Square method Householder reduction to Hessenberg Form (zeroes below the diagonal) while keeping the same eigenvalues as self. eigs typerig.core.objects.matrix.Square.eigs = eigs (self) unbound typerig.core.objects.matrix.Square method Estimate principal eigenvalues using the QR with shifts method Mat typerig.core.objects.matrix.Mat = Mat (elems) Factory function to create a new matrix. funToVec typerig.core.objects.matrix.funToVec = funToVec (tgtfun, low =-1 , high =1 , steps =40 , EqualSpacing =0 ) Compute x,y points from evaluating a target function over an interval (low to high) at evenly spaces points or with Chebyshev abscissa spacing (default) funfit typerig.core.objects.matrix.funfit = funfit ((xvec, yvec), basisfuns) Solves design matrix for approximating to basis functions polyfit typerig.core.objects.matrix.polyfit = polyfit ((xvec, yvec), degree =2 ) Solves Vandermonde design matrix for approximating polynomial coefficients ratfit typerig.core.objects.matrix.ratfit = ratfit ((xvec, yvec), degree =2 ) Solves design matrix for approximating rational polynomial coefficients (a*x**2 + b*x + c)/(d*x**2 + e*x + 1) zeroes typerig.core.objects.matrix.zeroes = zeroes (m =1 , n =None ) Zero matrix with side length m-by-m or m-by-n. eye typerig.core.objects.matrix.eye = eye (m =1 , n =None ) Identity matrix with side length m-by-m or m-by-n hilb typerig.core.objects.matrix.hilb = hilb (m =1 , n =None ) Hilbert matrix with side length m-by-m or m-by-n. Elem[i][j]=1/(i+j+1) rand typerig.core.objects.matrix.rand = rand (m =1 , n =None ) Random matrix with side length m-by-m or m-by-n","title":"core.objects.matrix"},{"location":"typerig.core.objects.matrix.html#typerigcoreobjectsmatrix","text":"","title":"typerig.core.objects.matrix"},{"location":"typerig.core.objects.matrix.html#table","text":"","title":"Table"},{"location":"typerig.core.objects.matrix.html#__add__","text":"typerig.core.objects.matrix.Table.concat = __add__ (...) x.__add__(y) < ==> x+y","title":"__add__"},{"location":"typerig.core.objects.matrix.html#dim","text":"typerig.core.objects.matrix.Table.dim = 1","title":"dim"},{"location":"typerig.core.objects.matrix.html#map","text":"typerig.core.objects.matrix.Table.map = map (self, op, rhs =None ) unbound typerig.core.objects.matrix.Table method Apply a unary operator to every element in the matrix or a binary operator to corresponding elements in two arrays. If the dimensions are different, broadcast the smaller dimension over the larger (i.e. match a scalar to every element in a vector or a vector to a matrix).","title":"map"},{"location":"typerig.core.objects.matrix.html#vec","text":"","title":"Vec"},{"location":"typerig.core.objects.matrix.html#cross","text":"typerig.core.objects.matrix.Vec.cross = cross (self, otherVec) unbound typerig.core.objects.matrix.Vec method Compute a Vector or Cross Product with another vector","title":"cross"},{"location":"typerig.core.objects.matrix.html#house","text":"typerig.core.objects.matrix.Vec.house = house (self, index) unbound typerig.core.objects.matrix.Vec method Compute a Householder vector which zeroes all but the index element after a reflection","title":"house"},{"location":"typerig.core.objects.matrix.html#polyval","text":"typerig.core.objects.matrix.Vec.polyval = polyval (self, x) unbound typerig.core.objects.matrix.Vec method Vec([6,3,4]).polyval(5) evaluates to 6*x**2 + 3*x + 4 at x=5","title":"polyval"},{"location":"typerig.core.objects.matrix.html#ratval","text":"typerig.core.objects.matrix.Vec.ratval = ratval (self, x) unbound typerig.core.objects.matrix.Vec method Vec([10,20,30,40,50]).ratfit(5) evaluates to (10*x**2 + 20*x + 30) / (40*x**2 + 50*x + 1) at x=5.","title":"ratval"},{"location":"typerig.core.objects.matrix.html#matrix","text":"","title":"Matrix"},{"location":"typerig.core.objects.matrix.html#tr","text":"typerig.core.objects.matrix.Matrix.tr = tr (self) unbound typerig.core.objects.matrix.Matrix method Tranpose elements so that Transposed[i][j] = Original[j][i]","title":"tr"},{"location":"typerig.core.objects.matrix.html#star","text":"typerig.core.objects.matrix.Matrix.star = star (self) unbound typerig.core.objects.matrix.Matrix method Return the Hermetian adjoint so that Star[i][j] = Original[j][i].conjugate()","title":"star"},{"location":"typerig.core.objects.matrix.html#diag","text":"typerig.core.objects.matrix.Matrix.diag = diag (self) unbound typerig.core.objects.matrix.Matrix method Return a vector composed of elements on the matrix diagonal","title":"diag"},{"location":"typerig.core.objects.matrix.html#mmul","text":"typerig.core.objects.matrix.Matrix.mmul = mmul (self, other) unbound typerig.core.objects.matrix.Matrix method Matrix multiply by another matrix or a column vector","title":"mmul"},{"location":"typerig.core.objects.matrix.html#augment","text":"typerig.core.objects.matrix.Matrix.augment = augment (self, otherMat) unbound typerig.core.objects.matrix.Matrix method Make a new matrix with the two original matrices laid side by side","title":"augment"},{"location":"typerig.core.objects.matrix.html#qr","text":"typerig.core.objects.matrix.Matrix.qr = qr (self, ROnly =0 ) unbound typerig.core.objects.matrix.Matrix method QR decomposition using Householder reflections: Q*R==self, Q.tr()*Q==I(n), R upper triangular","title":"qr"},{"location":"typerig.core.objects.matrix.html#solve","text":"typerig.core.objects.matrix.Matrix.solve = solve (self, b) unbound typerig.core.objects.matrix.Matrix method Divide matrix into a column vector or matrix and iterate to improve the solution","title":"solve"},{"location":"typerig.core.objects.matrix.html#square","text":"","title":"Square"},{"location":"typerig.core.objects.matrix.html#lu","text":"typerig.core.objects.matrix.Square.lu = lu (self) unbound typerig.core.objects.matrix.Square method Factor a square matrix into lower and upper triangular form such that L.mmul(U)==A","title":"lu"},{"location":"typerig.core.objects.matrix.html#hessenberg","text":"typerig.core.objects.matrix.Square.hessenberg = hessenberg (self) unbound typerig.core.objects.matrix.Square method Householder reduction to Hessenberg Form (zeroes below the diagonal) while keeping the same eigenvalues as self.","title":"hessenberg"},{"location":"typerig.core.objects.matrix.html#eigs","text":"typerig.core.objects.matrix.Square.eigs = eigs (self) unbound typerig.core.objects.matrix.Square method Estimate principal eigenvalues using the QR with shifts method","title":"eigs"},{"location":"typerig.core.objects.matrix.html#mat","text":"typerig.core.objects.matrix.Mat = Mat (elems) Factory function to create a new matrix.","title":"Mat"},{"location":"typerig.core.objects.matrix.html#funtovec","text":"typerig.core.objects.matrix.funToVec = funToVec (tgtfun, low =-1 , high =1 , steps =40 , EqualSpacing =0 ) Compute x,y points from evaluating a target function over an interval (low to high) at evenly spaces points or with Chebyshev abscissa spacing (default)","title":"funToVec"},{"location":"typerig.core.objects.matrix.html#funfit","text":"typerig.core.objects.matrix.funfit = funfit ((xvec, yvec), basisfuns) Solves design matrix for approximating to basis functions","title":"funfit"},{"location":"typerig.core.objects.matrix.html#polyfit","text":"typerig.core.objects.matrix.polyfit = polyfit ((xvec, yvec), degree =2 ) Solves Vandermonde design matrix for approximating polynomial coefficients","title":"polyfit"},{"location":"typerig.core.objects.matrix.html#ratfit","text":"typerig.core.objects.matrix.ratfit = ratfit ((xvec, yvec), degree =2 ) Solves design matrix for approximating rational polynomial coefficients (a*x**2 + b*x + c)/(d*x**2 + e*x + 1)","title":"ratfit"},{"location":"typerig.core.objects.matrix.html#zeroes","text":"typerig.core.objects.matrix.zeroes = zeroes (m =1 , n =None ) Zero matrix with side length m-by-m or m-by-n.","title":"zeroes"},{"location":"typerig.core.objects.matrix.html#eye","text":"typerig.core.objects.matrix.eye = eye (m =1 , n =None ) Identity matrix with side length m-by-m or m-by-n","title":"eye"},{"location":"typerig.core.objects.matrix.html#hilb","text":"typerig.core.objects.matrix.hilb = hilb (m =1 , n =None ) Hilbert matrix with side length m-by-m or m-by-n. Elem[i][j]=1/(i+j+1)","title":"hilb"},{"location":"typerig.core.objects.matrix.html#rand","text":"typerig.core.objects.matrix.rand = rand (m =1 , n =None ) Random matrix with side length m-by-m or m-by-n","title":"rand"},{"location":"typerig.core.objects.html","text":"typerig.core.objects typerig . core .objects ( version 0.26.0) # MODULE: TypeRig / Core / Ojects # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Package Contents array atom collection cubicbezier delta line matrix point transform utils","title":"core.objects"},{"location":"typerig.core.objects.html#typerigcoreobjects","text":"","title":"typerig.core.objects"},{"location":"typerig.core.objects.point.html","text":"typerig.core.objects.point typerig . core . objects .point ( version 0.26.2) # MODULE: TypeRig / Core / Point (Object) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math Classes builtin .object Point Void class Point ( builtin .object ) # - Classes ----------------------------- Methods abs (self) add (self, other) # -- Operators and (self, other) self & other: Used as for Scalar product div (self, other) init (self, *argv) mul (self, other) neg (self) or (self, other) self | other: Used as for Cross product rdiv = div (self, other) repr (self) rmul = mul (self, other) sub (self, other) truediv = div (self, other) angle_to (self, other, add =90 ) Angle to another point in radians diff_to (self, other) doFlip (self, sign =(True, True) ) doSwap (self) # -- Modifiers doTransform (self, transform =None ) solve_width (self, y =0 ) Get width - find adjacent X by opposite Y solve_x (self, y) solve_y (self, x) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) angle magnitude slope swap tuple unit y_intercept class Void ( Point ) Method resolution order: Void Point builtin .object Methods init (self, *argv) Methods from Point abs (self) add (self, other) # -- Operators and (self, other) self & other: Used as for Scalar product div (self, other) mul (self, other) neg (self) or (self, other) self | other: Used as for Cross product rdiv = div (self, other) repr (self) rmul = mul (self, other) sub (self, other) truediv = div (self, other) angle_to (self, other, add =90 ) Angle to another point in radians diff_to (self, other) doFlip (self, sign =(True, True) ) doSwap (self) # -- Modifiers doTransform (self, transform =None ) solve_width (self, y =0 ) Get width - find adjacent X by opposite Y solve_x (self, y) solve_y (self, x) Descriptors from Point dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) angle magnitude slope swap tuple unit y_intercept Point typerig.core.objects.point.Point = class Point ( __builtin__.object ) # - Classes ----------------------------- Methods __abs__ (self) __add__ (self, other) # -- Operators __and__ (self, other) self & other: Used as for Scalar product __div__ (self, other) __init__ (self, *argv) __mul__ (self, other) __neg__ (self) __or__ (self, other) self | other: Used as for Cross product __rdiv__ = __div__ (self, other) __repr__ (self) __rmul__ = __mul__ (self, other) __sub__ (self, other) __truediv__ = __div__ (self, other) angle_to (self, other, add =90 ) Angle to another point in radians diff_to (self, other) doFlip (self, sign =(True, True) ) doSwap (self) # -- Modifiers doTransform (self, transform =None ) solve_width (self, y =0 ) Get width - find adjacent X by opposite Y solve_x (self, y) solve_y (self, x) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) angle magnitude slope swap tuple unit y_intercept solve_width typerig.core.objects.point.Point.solve_width = solve_width (self, y =0 ) unbound typerig.core.objects.point.Point method Get width - find adjacent X by opposite Y angle_to typerig.core.objects.point.Point.angle_to = angle_to (self, other, add =90 ) unbound typerig.core.objects.point.Point method Angle to another point in radians","title":"core.objects.point"},{"location":"typerig.core.objects.point.html#typerigcoreobjectspoint","text":"","title":"typerig.core.objects.point"},{"location":"typerig.core.objects.point.html#point","text":"","title":"Point"},{"location":"typerig.core.objects.point.html#solve_width","text":"typerig.core.objects.point.Point.solve_width = solve_width (self, y =0 ) unbound typerig.core.objects.point.Point method Get width - find adjacent X by opposite Y","title":"solve_width"},{"location":"typerig.core.objects.point.html#angle_to","text":"typerig.core.objects.point.Point.angle_to = angle_to (self, other, add =90 ) unbound typerig.core.objects.point.Point method Angle to another point in radians","title":"angle_to"},{"location":"typerig.core.objects.transform.html","text":"typerig.core.objects.transform typerig . core . objects .transform ( version 0.26.0) # MODULE: TypeRig / Core / Transform (Object) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules math Classes builtin .object AdaptiveScale Transform class AdaptiveScale ( builtin .object ) # -- Adaptive scaling ------------------------------------ Methods init (self, point_arrays, stem_arrays) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class Transform ( builtin .object ) Affine transformations (Object) Methods cmp (self, other) getitem (self, index) getslice (self, i, j) hash (self) init (self, xx =1.0 , xy =0.0 , yx =0.0 , yy =1.0 , dx =0.0 , dy =0.0 ) len (self) repr (self) applyTransformation (self, x, y) inverse (self) reverseTransform (self, other) rotate (self, angle) scale (self, sx, sy) shift (self, dx, dy) skew (self, ax, ay) transform (self, other) translate (self, dx, dy) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Transform typerig.core.objects.transform.Transform = class Transform ( __builtin__.object ) Affine transformations (Object) Methods __cmp__ (self, other) __getitem__ (self, index) __getslice__ (self, i, j) __hash__ (self) __init__ (self, xx =1.0 , xy =0.0 , yx =0.0 , yy =1.0 , dx =0.0 , dy =0.0 ) __len__ (self) __repr__ (self) applyTransformation (self, x, y) inverse (self) reverseTransform (self, other) rotate (self, angle) scale (self, sx, sy) shift (self, dx, dy) skew (self, ax, ay) transform (self, other) translate (self, dx, dy) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"core.objects.transform"},{"location":"typerig.core.objects.transform.html#typerigcoreobjectstransform","text":"","title":"typerig.core.objects.transform"},{"location":"typerig.core.objects.transform.html#transform","text":"","title":"Transform"},{"location":"typerig.core.objects.utils.html","text":"typerig.core.objects.utils typerig . core . objects .utils ( version 0.26.0) # MODULE: TypeRig / Core / Utilities (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Classes builtin .object bounds geoAxis linAxis fontFamilly class bounds ( builtin .object ) # - Bounding box object ---------------------------------- Methods init (self, tupleList) recalc (self, tupleList) refresh (self, tupleList) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class fontFamilly Font familly class: * generates weight stems [.wt_stems] and MM weight instances [.wt_instances] using given masters/layers wt0, wt1, and number of weight members [wt_steps]. Uses geometric growth (progression) algorithm to determine stem weight * generates MM width instances [.wd_instances] using given number of width members [wd_steps]. Uses linear growth. * generates all MM isntaces/vectors for instance generation [.instances] --- ex: fontFamilyName = fontFamilly(wt0 = 56, wt1 = 178, wt_steps = 7, wd_steps = 3) Methods init (self, **kwargs) update (self) class geoAxis ( builtin .object ) A geometric series axis instance and stem calculator Usage linAxis(masterDict, instanceCount), where: * masterDict = {min_axis_value:min_stem_width, max_axis_value:max_stem_width} ex: {0:50, 1000:750} * instanceCount = number of instances to be calculated Methods init (self, masterDict, instanceCount) update (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class linAxis ( builtin .object ) A linear series axis instance and stem calculator Usage linAxis(masterDict, instanceCount), where: * masterDict = {min_axis_value:min_stem_width, max_axis_value:max_stem_width} ex: {0:50, 1000:750} * instanceCount = number of instances to be calculated Methods init (self, masterDict, instanceCount) update (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) fontFamilly typerig.core.objects.utils.fontFamilly = class fontFamilly Font familly class: * generates weight stems [.wt_stems] and MM weight instances [.wt_instances] using given masters/layers wt0, wt1, and number of weight members [wt_steps]. Uses geometric growth (progression) algorithm to determine stem weight * generates MM width instances [.wd_instances] using given number of width members [wd_steps]. Uses linear growth. * generates all MM isntaces/vectors for instance generation [.instances] --- ex: fontFamilyName = fontFamilly(wt0 = 56, wt1 = 178, wt_steps = 7, wd_steps = 3) Methods __init__ (self, **kwargs) update (self) linAxis typerig.core.objects.utils.linAxis = class linAxis ( __builtin__.object ) A linear series axis instance and stem calculator Usage linAxis(masterDict, instanceCount), where: * masterDict = {min_axis_value:min_stem_width, max_axis_value:max_stem_width} ex: {0:50, 1000:750} * instanceCount = number of instances to be calculated Methods __init__ (self, masterDict, instanceCount) update (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) geoAxis typerig.core.objects.utils.geoAxis = class geoAxis ( __builtin__.object ) A geometric series axis instance and stem calculator Usage linAxis(masterDict, instanceCount), where: * masterDict = {min_axis_value:min_stem_width, max_axis_value:max_stem_width} ex: {0:50, 1000:750} * instanceCount = number of instances to be calculated Methods __init__ (self, masterDict, instanceCount) update (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"core.objects.utils"},{"location":"typerig.core.objects.utils.html#typerigcoreobjectsutils","text":"","title":"typerig.core.objects.utils"},{"location":"typerig.core.objects.utils.html#fontfamilly","text":"","title":"fontFamilly"},{"location":"typerig.core.objects.utils.html#linaxis","text":"","title":"linAxis"},{"location":"typerig.core.objects.utils.html#geoaxis","text":"","title":"geoAxis"},{"location":"typerig.gui.QtGui.html","text":"typerig.gui.QtGui typerig . gui .QtGui ( version 0.0.2) # MODULE: Typerig / GUI / QtGui # NOTE: Mac Os GUI compatibility module # ---------------------------------------- # (C) Adam Twardoch, 2019 #----------------------------------------- # www.typerig.com Classes PythonQt.QtGui.QDialog ( PythonQt.PythonQtInstanceWrapper ) QDialog PythonQt.QtGui.QGridLayout ( PythonQt.PythonQtInstanceWrapper ) QGridLayout PythonQt.QtGui.QHBoxLayout ( PythonQt.PythonQtInstanceWrapper ) QHBoxLayout PythonQt.QtGui.QVBoxLayout ( PythonQt.PythonQtInstanceWrapper ) QVBoxLayout class QDialog ( PythonQt.QtGui.QDialog ) Method resolution order: QDialog PythonQt.QtGui.QDialog PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, *args, **kwargs) Attributes Accepted = 1 DialogCode = class 'PythonQt.QtGui.DialogCode' DrawChildren = 2 DrawWindowBackground = 1 IgnoreMask = 4 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 Rejected = 0 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' accept = unbound qt slot py_q_accept of QDialog type X. accept (a) acceptDrops = None accepted = unbound qt signal accepted of QDialog type accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QDialog type X. actionEvent (a, b) actions = unbound qt slot actions of QDialog type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QDialog type X. activateWindow (a) addAction = unbound qt slot addAction of QDialog type X. addAction (a, b) addActions = unbound qt slot addActions of QDialog type X. addActions (a, b) adjustPosition = unbound qt slot adjustPosition of QDialog type X. adjustPosition (a, b) adjustSize = unbound qt slot adjustSize of QDialog type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QDialog type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QDialog type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QDialog type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QDialog type X. changeEvent (a, b) childAt = unbound qt slot childAt of QDialog type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QDialog type X. childEvent (a, b) children = unbound qt slot children of QDialog type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clearFocus = unbound qt slot clearFocus of QDialog type X. clearFocus (a) clearMask = unbound qt slot clearMask of QDialog type X. clearMask (a) close = unbound qt slot close of QDialog type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QDialog type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QDialog type X. colorCount (a) -> int connect = unbound qt slot connect of QDialog type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QDialog type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QDialog type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type X. contextMenuEvent (a, b) contextMenuPolicy = None createWinId = unbound qt slot createWinId of QDialog type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QDialog type customEvent = unbound qt slot py_q_customEvent of QDialog type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QDialog type X. deleteLater () depth = unbound qt slot depth of QDialog type X. depth (a) -> int destroy = unbound qt slot destroy of QDialog type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QDialog type devType = unbound qt slot py_q_devType of QDialog type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QDialog type X. disconnect (a, b, c, d) -> bool done = unbound qt slot py_q_done of QDialog type X. done (a, b) dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QDialog type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QDialog type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of QDialog type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QDialog type X. enterEvent (a, b) event = unbound qt slot py_q_event of QDialog type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QDialog type X. eventFilter (a, b, c) -> bool exec = unbound qt slot py_q_exec of QDialog type X. exec (a) -> int findChild = unbound qt slot findChild of QDialog type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QDialog type X. findChildren (a, b, c) -> tuple finished = unbound qt signal finished of QDialog type focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QDialog type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QDialog type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QDialog type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QDialog type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QDialog type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QDialog type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QDialog type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QDialog type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QDialog type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QDialog type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QDialog type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QDialog type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QDialog type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QDialog type X. hideEvent (a, b) inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QDialog type X. initPainter (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QDialog type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QDialog type X. insertActions (a, b, c) installEventFilter = unbound qt slot installEventFilter of QDialog type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QDialog type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QDialog type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QDialog type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QDialog type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QDialog type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QDialog type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QDialog type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QDialog type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QDialog type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QDialog type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QDialog type X. isSignalConnected (a, b) -> bool isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type X. isSizeGripEnabled (a) -> bool isVisible = unbound qt slot isVisible of QDialog type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QDialog type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QDialog type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QDialog type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QDialog type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QDialog type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QDialog type X. killTimer (a, b) layout = unbound qt slot layout of QDialog type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QDialog type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QDialog type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QDialog type X. lower () mapFrom = unbound qt slot mapFrom of QDialog type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QDialog type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QDialog type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QDialog type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QDialog type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QDialog type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QDialog type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QDialog type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of QDialog type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QDialog type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QDialog type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QDialog type open = unbound qt slot py_q_open of QDialog type X. open (a) overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QDialog type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QDialog type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QDialog type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QDialog type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QDialog type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QDialog type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QDialog type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QDialog type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QDialog type X. property (a, b) -> object raise = unbound qt slot raise of QDialog type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QDialog type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice reject = unbound qt slot py_q_reject of QDialog type X. reject (a) rejected = unbound qt signal rejected of QDialog type releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QDialog type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QDialog type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QDialog type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QDialog type X. removeEventFilter (a, b) render = unbound qt slot render of QDialog type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QDialog type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QDialog type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QDialog type X. restoreGeometry (a, b) -> bool result = unbound qt slot result of QDialog type X. result (a) -> int saveGeometry = unbound qt slot saveGeometry of QDialog type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QDialog type X. scroll (a, b, c, d) sender = unbound qt slot sender of QDialog type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QDialog type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QDialog type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QDialog type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QDialog type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type X. setContextMenuPolicy (a, b) setCursor = unbound qt slot setCursor of QDialog type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QDialog type X. setDisabled (a) setEnabled = unbound qt slot setEnabled of QDialog type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QDialog type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QDialog type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QDialog type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QDialog type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QDialog type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QDialog type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QDialog type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QDialog type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QDialog type X. setHidden (a) setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QDialog type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QDialog type X. setLocale (a, b) setMask = unbound qt slot setMask of QDialog type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QDialog type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QDialog type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type X. setMinimumWidth (a, b) setModal = unbound qt slot setModal of QDialog type X. setModal (a, b) setMouseTracking = unbound qt slot setMouseTracking of QDialog type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of QDialog type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QDialog type X. setPalette (a, b) setParent = unbound qt slot setParent of QDialog type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QDialog type X. setProperty (a, b, c) -> bool setResult = unbound qt slot setResult of QDialog type X. setResult (a, b) setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type X. setShortcutEnabled (a, b, c) setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type X. setSizeGripEnabled (a, b) setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QDialog type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QDialog type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QDialog type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QDialog type X. setStyleSheet (a) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type X. setTabOrder (a, b) setToolTip = unbound qt slot setToolTip of QDialog type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type X. setUpdatesEnabled (a, b) setVisible = unbound qt slot py_q_setVisible of QDialog type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QDialog type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QDialog type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QDialog type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QDialog type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QDialog type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QDialog type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QDialog type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QDialog type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QDialog type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QDialog type X. show () showEvent = unbound qt slot py_q_showEvent of QDialog type X. showEvent (a, b) showExtension = unbound qt slot showExtension of QDialog type X. showExtension (a) showFullScreen = unbound qt slot showFullScreen of QDialog type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QDialog type X. showMaximized () showMinimized = unbound qt slot showMinimized of QDialog type X. showMinimized () showNormal = unbound qt slot showNormal of QDialog type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QDialog type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeGripEnabled = None sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QDialog type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QDialog type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QDialog type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type X. tabletEvent (a, b) tabletTracking = None testAttribute = unbound qt slot testAttribute of QDialog type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QDialog type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QDialog type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QDialog type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QDialog type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QDialog type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QDialog type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QDialog type X. unsetLocale (a) update = unbound qt slot update of QDialog type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QDialog type X. updateGeometry (a) updatesEnabled = None visible = None visibleRegion = unbound qt slot visibleRegion of QDialog type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of QDialog type X. widthMM (a) -> int winId = unbound qt slot winId of QDialog type X. winId (a) window = unbound qt slot window of QDialog type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QDialog type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QDialog type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QDialog type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QDialog type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QDialog type X. windowRole (a) -> str windowState = unbound qt slot windowState of QDialog type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QDialog type windowType = unbound qt slot windowType of QDialog type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QDialog dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class QGridLayout ( PythonQt.QtGui.QGridLayout ) Method resolution order: QGridLayout PythonQt.QtGui.QGridLayout PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, *args, **kwargs) Attributes SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' activate = unbound qt slot activate of QGridLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QGridLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QGridLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QGridLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QGridLayout type X. addLayout (a, b, c, d, e, f, g) addWidget = unbound qt slot addWidget of QGridLayout type X. addWidget (a, b, c, d, e, f, g) adoptLayout = unbound qt slot adoptLayout of QGridLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QGridLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QGridLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QGridLayout type X. blockSignals (a, b) -> bool cellRect = unbound qt slot cellRect of QGridLayout type X. cellRect (a, b, c) -> PythonQt.QtCore.QRect childEvent = unbound qt slot py_q_childEvent of QGridLayout type X. childEvent (a, b) children = unbound qt slot children of QGridLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize columnCount = unbound qt slot columnCount of QGridLayout type X. columnCount (a) -> int columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type X. columnMinimumWidth (a, b) -> int columnStretch = unbound qt slot columnStretch of QGridLayout type X. columnStretch (a, b) -> int connect = unbound qt slot connect of QGridLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QGridLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QGridLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QGridLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QGridLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QGridLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QGridLayout type disconnect = unbound qt slot disconnect of QGridLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QGridLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QGridLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QGridLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QGridLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type X. horizontalSpacing (a) -> int indexOf = unbound qt slot py_q_indexOf of QGridLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name installEventFilter = unbound qt slot installEventFilter of QGridLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QGridLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QGridLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QGridLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QGridLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QGridLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type X. itemAtPosition (a, b, c) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QGridLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QGridLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QGridLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QGridLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QGridLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QGridLayout type originCorner = unbound qt slot originCorner of QGridLayout type X. originCorner (a) parent = unbound qt slot parent of QGridLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QGridLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QGridLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QGridLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QGridLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QGridLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem rowCount = unbound qt slot rowCount of QGridLayout type X. rowCount (a) -> int rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type X. rowMinimumHeight (a, b) -> int rowStretch = unbound qt slot rowStretch of QGridLayout type X. rowStretch (a, b) -> int sender = unbound qt slot sender of QGridLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QGridLayout type X. setAlignment (a, b, c) -> bool setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type X. setColumnMinimumWidth (a, b, c) setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type X. setColumnStretch (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type X. setContentsMargins (a, b, c, d, e) setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type X. setDefaultPositioning (a, b, c) setEnabled = unbound qt slot setEnabled of QGridLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type X. setGeometry (a, b) setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type X. setHorizontalSpacing (a, b) setMargin = unbound qt slot setMargin of QGridLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QGridLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QGridLayout type X. setObjectName (a, b) setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type X. setOriginCorner (a, b) setParent = unbound qt slot setParent of QGridLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QGridLayout type X. setProperty (a, b, c) -> bool setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type X. setRowMinimumHeight (a, b, c) setRowStretch = unbound qt slot setRowStretch of QGridLayout type X. setRowStretch (a, b, c) setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QGridLayout type X. setSpacing (a, b) setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type X. setVerticalSpacing (a, b) signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QGridLayout type X. startTimer (a, b, c) -> int takeAt = unbound qt slot py_q_takeAt of QGridLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QGridLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QGridLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QGridLayout type X. update (a) verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type X. verticalSpacing (a) -> int widget = unbound qt slot py_q_widget of QGridLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QGridLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QGridLayout dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class QHBoxLayout ( PythonQt.QtGui.QHBoxLayout ) Method resolution order: QHBoxLayout PythonQt.QtGui.QHBoxLayout PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, *args, **kwargs) Attributes BottomToTop = 3 Direction = class 'PythonQt.QtGui.Direction' Down = 2 LeftToRight = 0 RightToLeft = 1 SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' TopToBottom = 2 Up = 3 activate = unbound qt slot activate of QHBoxLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QHBoxLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QHBoxLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QHBoxLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QHBoxLayout type X. addLayout (a, b, c) addSpacerItem = unbound qt slot addSpacerItem of QHBoxLayout type X. addSpacerItem (a, b) addSpacing = unbound qt slot addSpacing of QHBoxLayout type X. addSpacing (a, b) addStretch = unbound qt slot addStretch of QHBoxLayout type X. addStretch (a, b) addStrut = unbound qt slot addStrut of QHBoxLayout type X. addStrut (a, b) addWidget = unbound qt slot addWidget of QHBoxLayout type X. addWidget (a, b, c, d) adoptLayout = unbound qt slot adoptLayout of QHBoxLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QHBoxLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QHBoxLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QHBoxLayout type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of QHBoxLayout type X. childEvent (a, b) children = unbound qt slot children of QHBoxLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QHBoxLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize connect = unbound qt slot connect of QHBoxLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QHBoxLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QHBoxLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QHBoxLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QHBoxLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QHBoxLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QHBoxLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QHBoxLayout type direction = unbound qt slot direction of QHBoxLayout type X. direction (a) disconnect = unbound qt slot disconnect of QHBoxLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QHBoxLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QHBoxLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QHBoxLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QHBoxLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QHBoxLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QHBoxLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QHBoxLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QHBoxLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QHBoxLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QHBoxLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QHBoxLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class indexOf = unbound qt slot py_q_indexOf of QHBoxLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name insertItem = unbound qt slot insertItem of QHBoxLayout type X. insertItem (a, b, c) insertLayout = unbound qt slot insertLayout of QHBoxLayout type X. insertLayout (a, b, c, d) insertSpacerItem = unbound qt slot insertSpacerItem of QHBoxLayout type X. insertSpacerItem (a, b, c) insertSpacing = unbound qt slot insertSpacing of QHBoxLayout type X. insertSpacing (a, b, c) insertStretch = unbound qt slot insertStretch of QHBoxLayout type X. insertStretch (a, b, c) insertWidget = unbound qt slot insertWidget of QHBoxLayout type X. insertWidget (a, b, c, d, e) installEventFilter = unbound qt slot installEventFilter of QHBoxLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QHBoxLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QHBoxLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QHBoxLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QHBoxLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QHBoxLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QHBoxLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QHBoxLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QHBoxLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QHBoxLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QHBoxLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QHBoxLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QHBoxLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QHBoxLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QHBoxLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QHBoxLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QHBoxLayout type parent = unbound qt slot parent of QHBoxLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QHBoxLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QHBoxLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QHBoxLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QHBoxLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QHBoxLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QHBoxLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem sender = unbound qt slot sender of QHBoxLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QHBoxLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QHBoxLayout type X. setAlignment (a, b, c) -> bool setContentsMargins = unbound qt slot setContentsMargins of QHBoxLayout type X. setContentsMargins (a, b, c, d, e) setDirection = unbound qt slot setDirection of QHBoxLayout type X. setDirection (a, b) setEnabled = unbound qt slot setEnabled of QHBoxLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QHBoxLayout type X. setGeometry (a, b) setMargin = unbound qt slot setMargin of QHBoxLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QHBoxLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QHBoxLayout type X. setObjectName (a, b) setParent = unbound qt slot setParent of QHBoxLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QHBoxLayout type X. setProperty (a, b, c) -> bool setSizeConstraint = unbound qt slot setSizeConstraint of QHBoxLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QHBoxLayout type X. setSpacing (a, b) setStretch = unbound qt slot setStretch of QHBoxLayout type X. setStretch (a, b, c) setStretchFactor = unbound qt slot setStretchFactor of QHBoxLayout type X. setStretchFactor (a, b, c) -> bool signalsBlocked = unbound qt slot signalsBlocked of QHBoxLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QHBoxLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QHBoxLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QHBoxLayout type X. startTimer (a, b, c) -> int stretch = unbound qt slot stretch of QHBoxLayout type X. stretch (a, b) -> int takeAt = unbound qt slot py_q_takeAt of QHBoxLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QHBoxLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QHBoxLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QHBoxLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QHBoxLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QHBoxLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QHBoxLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QHBoxLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QHBoxLayout type X. update (a) widget = unbound qt slot py_q_widget of QHBoxLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QHBoxLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QHBoxLayout dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class QVBoxLayout ( PythonQt.QtGui.QVBoxLayout ) Method resolution order: QVBoxLayout PythonQt.QtGui.QVBoxLayout PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, *args, **kwargs) Attributes BottomToTop = 3 Direction = class 'PythonQt.QtGui.Direction' Down = 2 LeftToRight = 0 RightToLeft = 1 SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' TopToBottom = 2 Up = 3 activate = unbound qt slot activate of QVBoxLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QVBoxLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QVBoxLayout type X. addLayout (a, b, c) addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type X. addSpacerItem (a, b) addSpacing = unbound qt slot addSpacing of QVBoxLayout type X. addSpacing (a, b) addStretch = unbound qt slot addStretch of QVBoxLayout type X. addStretch (a, b) addStrut = unbound qt slot addStrut of QVBoxLayout type X. addStrut (a, b) addWidget = unbound qt slot addWidget of QVBoxLayout type X. addWidget (a, b, c, d) adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QVBoxLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QVBoxLayout type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type X. childEvent (a, b) children = unbound qt slot children of QVBoxLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize connect = unbound qt slot connect of QVBoxLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QVBoxLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QVBoxLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QVBoxLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QVBoxLayout type direction = unbound qt slot direction of QVBoxLayout type X. direction (a) disconnect = unbound qt slot disconnect of QVBoxLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QVBoxLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QVBoxLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QVBoxLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QVBoxLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name insertItem = unbound qt slot insertItem of QVBoxLayout type X. insertItem (a, b, c) insertLayout = unbound qt slot insertLayout of QVBoxLayout type X. insertLayout (a, b, c, d) insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type X. insertSpacerItem (a, b, c) insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type X. insertSpacing (a, b, c) insertStretch = unbound qt slot insertStretch of QVBoxLayout type X. insertStretch (a, b, c) insertWidget = unbound qt slot insertWidget of QVBoxLayout type X. insertWidget (a, b, c, d, e) installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QVBoxLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QVBoxLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QVBoxLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QVBoxLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QVBoxLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QVBoxLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QVBoxLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QVBoxLayout type parent = unbound qt slot parent of QVBoxLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QVBoxLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QVBoxLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QVBoxLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QVBoxLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem sender = unbound qt slot sender of QVBoxLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QVBoxLayout type X. setAlignment (a, b, c) -> bool setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type X. setContentsMargins (a, b, c, d, e) setDirection = unbound qt slot setDirection of QVBoxLayout type X. setDirection (a, b) setEnabled = unbound qt slot setEnabled of QVBoxLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type X. setGeometry (a, b) setMargin = unbound qt slot setMargin of QVBoxLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QVBoxLayout type X. setObjectName (a, b) setParent = unbound qt slot setParent of QVBoxLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QVBoxLayout type X. setProperty (a, b, c) -> bool setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QVBoxLayout type X. setSpacing (a, b) setStretch = unbound qt slot setStretch of QVBoxLayout type X. setStretch (a, b, c) setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type X. setStretchFactor (a, b, c) -> bool signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QVBoxLayout type X. startTimer (a, b, c) -> int stretch = unbound qt slot stretch of QVBoxLayout type X. stretch (a, b) -> int takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QVBoxLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QVBoxLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QVBoxLayout type X. update (a) widget = unbound qt slot py_q_widget of QVBoxLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QVBoxLayout dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T Functions uiRefresh (widget) QDialog typerig.gui.QtGui.QDialog = class QDialog ( PythonQt.QtGui.QDialog ) Method resolution order: QDialog PythonQt.QtGui.QDialog PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, *args, **kwargs) Attributes Accepted = 1 DialogCode = class 'PythonQt.QtGui.DialogCode' DrawChildren = 2 DrawWindowBackground = 1 IgnoreMask = 4 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 Rejected = 0 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' accept = unbound qt slot py_q_accept of QDialog type X. accept (a) acceptDrops = None accepted = unbound qt signal accepted of QDialog type accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QDialog type X. actionEvent (a, b) actions = unbound qt slot actions of QDialog type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QDialog type X. activateWindow (a) addAction = unbound qt slot addAction of QDialog type X. addAction (a, b) addActions = unbound qt slot addActions of QDialog type X. addActions (a, b) adjustPosition = unbound qt slot adjustPosition of QDialog type X. adjustPosition (a, b) adjustSize = unbound qt slot adjustSize of QDialog type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QDialog type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QDialog type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QDialog type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QDialog type X. changeEvent (a, b) childAt = unbound qt slot childAt of QDialog type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QDialog type X. childEvent (a, b) children = unbound qt slot children of QDialog type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clearFocus = unbound qt slot clearFocus of QDialog type X. clearFocus (a) clearMask = unbound qt slot clearMask of QDialog type X. clearMask (a) close = unbound qt slot close of QDialog type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QDialog type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QDialog type X. colorCount (a) -> int connect = unbound qt slot connect of QDialog type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QDialog type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QDialog type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type X. contextMenuEvent (a, b) contextMenuPolicy = None createWinId = unbound qt slot createWinId of QDialog type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QDialog type customEvent = unbound qt slot py_q_customEvent of QDialog type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QDialog type X. deleteLater () depth = unbound qt slot depth of QDialog type X. depth (a) -> int destroy = unbound qt slot destroy of QDialog type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QDialog type devType = unbound qt slot py_q_devType of QDialog type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QDialog type X. disconnect (a, b, c, d) -> bool done = unbound qt slot py_q_done of QDialog type X. done (a, b) dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QDialog type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QDialog type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of QDialog type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QDialog type X. enterEvent (a, b) event = unbound qt slot py_q_event of QDialog type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QDialog type X. eventFilter (a, b, c) -> bool exec = unbound qt slot py_q_exec of QDialog type X. exec (a) -> int findChild = unbound qt slot findChild of QDialog type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QDialog type X. findChildren (a, b, c) -> tuple finished = unbound qt signal finished of QDialog type focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QDialog type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QDialog type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QDialog type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QDialog type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QDialog type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QDialog type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QDialog type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QDialog type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QDialog type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QDialog type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QDialog type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QDialog type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QDialog type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QDialog type X. hideEvent (a, b) inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QDialog type X. initPainter (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QDialog type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QDialog type X. insertActions (a, b, c) installEventFilter = unbound qt slot installEventFilter of QDialog type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QDialog type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QDialog type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QDialog type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QDialog type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QDialog type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QDialog type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QDialog type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QDialog type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QDialog type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QDialog type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QDialog type X. isSignalConnected (a, b) -> bool isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type X. isSizeGripEnabled (a) -> bool isVisible = unbound qt slot isVisible of QDialog type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QDialog type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QDialog type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QDialog type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QDialog type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QDialog type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QDialog type X. killTimer (a, b) layout = unbound qt slot layout of QDialog type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QDialog type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QDialog type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QDialog type X. lower () mapFrom = unbound qt slot mapFrom of QDialog type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QDialog type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QDialog type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QDialog type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QDialog type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QDialog type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QDialog type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QDialog type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of QDialog type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QDialog type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QDialog type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QDialog type open = unbound qt slot py_q_open of QDialog type X. open (a) overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QDialog type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QDialog type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QDialog type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QDialog type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QDialog type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QDialog type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QDialog type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QDialog type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QDialog type X. property (a, b) -> object raise = unbound qt slot raise of QDialog type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QDialog type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice reject = unbound qt slot py_q_reject of QDialog type X. reject (a) rejected = unbound qt signal rejected of QDialog type releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QDialog type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QDialog type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QDialog type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QDialog type X. removeEventFilter (a, b) render = unbound qt slot render of QDialog type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QDialog type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QDialog type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QDialog type X. restoreGeometry (a, b) -> bool result = unbound qt slot result of QDialog type X. result (a) -> int saveGeometry = unbound qt slot saveGeometry of QDialog type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QDialog type X. scroll (a, b, c, d) sender = unbound qt slot sender of QDialog type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QDialog type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QDialog type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QDialog type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QDialog type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type X. setContextMenuPolicy (a, b) setCursor = unbound qt slot setCursor of QDialog type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QDialog type X. setDisabled (a) setEnabled = unbound qt slot setEnabled of QDialog type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QDialog type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QDialog type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QDialog type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QDialog type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QDialog type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QDialog type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QDialog type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QDialog type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QDialog type X. setHidden (a) setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QDialog type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QDialog type X. setLocale (a, b) setMask = unbound qt slot setMask of QDialog type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QDialog type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QDialog type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type X. setMinimumWidth (a, b) setModal = unbound qt slot setModal of QDialog type X. setModal (a, b) setMouseTracking = unbound qt slot setMouseTracking of QDialog type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of QDialog type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QDialog type X. setPalette (a, b) setParent = unbound qt slot setParent of QDialog type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QDialog type X. setProperty (a, b, c) -> bool setResult = unbound qt slot setResult of QDialog type X. setResult (a, b) setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type X. setShortcutEnabled (a, b, c) setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type X. setSizeGripEnabled (a, b) setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QDialog type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QDialog type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QDialog type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QDialog type X. setStyleSheet (a) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type X. setTabOrder (a, b) setToolTip = unbound qt slot setToolTip of QDialog type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type X. setUpdatesEnabled (a, b) setVisible = unbound qt slot py_q_setVisible of QDialog type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QDialog type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QDialog type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QDialog type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QDialog type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QDialog type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QDialog type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QDialog type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QDialog type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QDialog type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QDialog type X. show () showEvent = unbound qt slot py_q_showEvent of QDialog type X. showEvent (a, b) showExtension = unbound qt slot showExtension of QDialog type X. showExtension (a) showFullScreen = unbound qt slot showFullScreen of QDialog type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QDialog type X. showMaximized () showMinimized = unbound qt slot showMinimized of QDialog type X. showMinimized () showNormal = unbound qt slot showNormal of QDialog type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QDialog type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeGripEnabled = None sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QDialog type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QDialog type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QDialog type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type X. tabletEvent (a, b) tabletTracking = None testAttribute = unbound qt slot testAttribute of QDialog type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QDialog type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QDialog type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QDialog type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QDialog type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QDialog type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QDialog type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QDialog type X. unsetLocale (a) update = unbound qt slot update of QDialog type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QDialog type X. updateGeometry (a) updatesEnabled = None visible = None visibleRegion = unbound qt slot visibleRegion of QDialog type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of QDialog type X. widthMM (a) -> int winId = unbound qt slot winId of QDialog type X. winId (a) window = unbound qt slot window of QDialog type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QDialog type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QDialog type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QDialog type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QDialog type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QDialog type X. windowRole (a) -> str windowState = unbound qt slot windowState of QDialog type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QDialog type windowType = unbound qt slot windowType of QDialog type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QDialog __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T accept typerig.gui.QtGui.QDialog.accept = unbound qt slot py_q_accept of QDialog type actionEvent typerig.gui.QtGui.QDialog.actionEvent = unbound qt slot py_q_actionEvent of QDialog type actions typerig.gui.QtGui.QDialog.actions = unbound qt slot actions of QDialog type activateWindow typerig.gui.QtGui.QDialog.activateWindow = unbound qt slot activateWindow of QDialog type addAction typerig.gui.QtGui.QDialog.addAction = unbound qt slot addAction of QDialog type addActions typerig.gui.QtGui.QDialog.addActions = unbound qt slot addActions of QDialog type adjustPosition typerig.gui.QtGui.QDialog.adjustPosition = unbound qt slot adjustPosition of QDialog type adjustSize typerig.gui.QtGui.QDialog.adjustSize = unbound qt slot adjustSize of QDialog type backgroundRole typerig.gui.QtGui.QDialog.backgroundRole = unbound qt slot backgroundRole of QDialog type backingStore typerig.gui.QtGui.QDialog.backingStore = unbound qt slot backingStore of QDialog type blockSignals typerig.gui.QtGui.QDialog.blockSignals = unbound qt slot blockSignals of QDialog type changeEvent typerig.gui.QtGui.QDialog.changeEvent = unbound qt slot py_q_changeEvent of QDialog type childAt typerig.gui.QtGui.QDialog.childAt = unbound qt slot childAt of QDialog type childEvent typerig.gui.QtGui.QDialog.childEvent = unbound qt slot py_q_childEvent of QDialog type children typerig.gui.QtGui.QDialog.children = unbound qt slot children of QDialog type className typerig.gui.QtGui.QDialog.className = className (...) Return the classname of the object clearFocus typerig.gui.QtGui.QDialog.clearFocus = unbound qt slot clearFocus of QDialog type clearMask typerig.gui.QtGui.QDialog.clearMask = unbound qt slot clearMask of QDialog type close typerig.gui.QtGui.QDialog.close = unbound qt slot close of QDialog type closeEvent typerig.gui.QtGui.QDialog.closeEvent = unbound qt slot py_q_closeEvent of QDialog type colorCount typerig.gui.QtGui.QDialog.colorCount = unbound qt slot colorCount of QDialog type connect typerig.gui.QtGui.QDialog.connect = unbound qt slot connect of QDialog type contentsMargins typerig.gui.QtGui.QDialog.contentsMargins = unbound qt slot contentsMargins of QDialog type contentsRect typerig.gui.QtGui.QDialog.contentsRect = unbound qt slot contentsRect of QDialog type contextMenuEvent typerig.gui.QtGui.QDialog.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type createWindowContainer typerig.gui.QtGui.QDialog.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type createWinId typerig.gui.QtGui.QDialog.createWinId = unbound qt slot createWinId of QDialog type customEvent typerig.gui.QtGui.QDialog.customEvent = unbound qt slot py_q_customEvent of QDialog type delete typerig.gui.QtGui.QDialog.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.QtGui.QDialog.deleteLater = unbound qt slot deleteLater of QDialog type depth typerig.gui.QtGui.QDialog.depth = unbound qt slot depth of QDialog type destroy typerig.gui.QtGui.QDialog.destroy = unbound qt slot destroy of QDialog type devicePixelRatio typerig.gui.QtGui.QDialog.devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type devicePixelRatioF typerig.gui.QtGui.QDialog.devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type devicePixelRatioFScale typerig.gui.QtGui.QDialog.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type devType typerig.gui.QtGui.QDialog.devType = unbound qt slot py_q_devType of QDialog type disconnect typerig.gui.QtGui.QDialog.disconnect = unbound qt slot disconnect of QDialog type done typerig.gui.QtGui.QDialog.done = unbound qt slot py_q_done of QDialog type dragEnterEvent typerig.gui.QtGui.QDialog.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type dragLeaveEvent typerig.gui.QtGui.QDialog.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type dragMoveEvent typerig.gui.QtGui.QDialog.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type dropEvent typerig.gui.QtGui.QDialog.dropEvent = unbound qt slot py_q_dropEvent of QDialog type dumpObjectInfo typerig.gui.QtGui.QDialog.dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type dumpObjectTree typerig.gui.QtGui.QDialog.dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type dynamicPropertyNames typerig.gui.QtGui.QDialog.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type effectiveWinId typerig.gui.QtGui.QDialog.effectiveWinId = unbound qt slot effectiveWinId of QDialog type ensurePolished typerig.gui.QtGui.QDialog.ensurePolished = unbound qt slot ensurePolished of QDialog type enterEvent typerig.gui.QtGui.QDialog.enterEvent = unbound qt slot py_q_enterEvent of QDialog type event typerig.gui.QtGui.QDialog.event = unbound qt slot py_q_event of QDialog type eventFilter typerig.gui.QtGui.QDialog.eventFilter = unbound qt slot py_q_eventFilter of QDialog type exec typerig.gui.QtGui.QDialog.exec = unbound qt slot py_q_exec of QDialog type findChild typerig.gui.QtGui.QDialog.findChild = unbound qt slot findChild of QDialog type findChildren typerig.gui.QtGui.QDialog.findChildren = unbound qt slot findChildren of QDialog type focusInEvent typerig.gui.QtGui.QDialog.focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type focusNextChild typerig.gui.QtGui.QDialog.focusNextChild = unbound qt slot focusNextChild of QDialog type focusNextPrevChild typerig.gui.QtGui.QDialog.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type focusOutEvent typerig.gui.QtGui.QDialog.focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type focusPreviousChild typerig.gui.QtGui.QDialog.focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type focusProxy typerig.gui.QtGui.QDialog.focusProxy = unbound qt slot focusProxy of QDialog type focusWidget typerig.gui.QtGui.QDialog.focusWidget = unbound qt slot focusWidget of QDialog type foregroundRole typerig.gui.QtGui.QDialog.foregroundRole = unbound qt slot foregroundRole of QDialog type grab typerig.gui.QtGui.QDialog.grab = unbound qt slot grab of QDialog type grabGesture typerig.gui.QtGui.QDialog.grabGesture = unbound qt slot grabGesture of QDialog type grabKeyboard typerig.gui.QtGui.QDialog.grabKeyboard = unbound qt slot grabKeyboard of QDialog type grabMouse typerig.gui.QtGui.QDialog.grabMouse = unbound qt slot grabMouse of QDialog type grabShortcut typerig.gui.QtGui.QDialog.grabShortcut = unbound qt slot grabShortcut of QDialog type graphicsEffect typerig.gui.QtGui.QDialog.graphicsEffect = unbound qt slot graphicsEffect of QDialog type graphicsProxyWidget typerig.gui.QtGui.QDialog.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type hasFocus typerig.gui.QtGui.QDialog.hasFocus = unbound qt slot hasFocus of QDialog type hasHeightForWidth typerig.gui.QtGui.QDialog.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type hasMouseTracking typerig.gui.QtGui.QDialog.hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type heightForWidth typerig.gui.QtGui.QDialog.heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type heightMM typerig.gui.QtGui.QDialog.heightMM = unbound qt slot heightMM of QDialog type help typerig.gui.QtGui.QDialog.help = help (...) Shows the help of available methods for this class hide typerig.gui.QtGui.QDialog.hide = unbound qt slot hide of QDialog type hideEvent typerig.gui.QtGui.QDialog.hideEvent = unbound qt slot py_q_hideEvent of QDialog type inherits typerig.gui.QtGui.QDialog.inherits = inherits (...) Returns if the class inherits or is of given type name initPainter typerig.gui.QtGui.QDialog.initPainter = unbound qt slot py_q_initPainter of QDialog type inputMethodEvent typerig.gui.QtGui.QDialog.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type inputMethodQuery typerig.gui.QtGui.QDialog.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type insertAction typerig.gui.QtGui.QDialog.insertAction = unbound qt slot insertAction of QDialog type insertActions typerig.gui.QtGui.QDialog.insertActions = unbound qt slot insertActions of QDialog type installEventFilter typerig.gui.QtGui.QDialog.installEventFilter = unbound qt slot installEventFilter of QDialog type isAncestorOf typerig.gui.QtGui.QDialog.isAncestorOf = unbound qt slot isAncestorOf of QDialog type isEnabled typerig.gui.QtGui.QDialog.isEnabled = unbound qt slot isEnabled of QDialog type isEnabledTo typerig.gui.QtGui.QDialog.isEnabledTo = unbound qt slot isEnabledTo of QDialog type isFullScreen typerig.gui.QtGui.QDialog.isFullScreen = unbound qt slot isFullScreen of QDialog type isHidden typerig.gui.QtGui.QDialog.isHidden = unbound qt slot isHidden of QDialog type isLeftToRight typerig.gui.QtGui.QDialog.isLeftToRight = unbound qt slot isLeftToRight of QDialog type isMaximized typerig.gui.QtGui.QDialog.isMaximized = unbound qt slot isMaximized of QDialog type isMinimized typerig.gui.QtGui.QDialog.isMinimized = unbound qt slot isMinimized of QDialog type isModal typerig.gui.QtGui.QDialog.isModal = unbound qt slot isModal of QDialog type isRightToLeft typerig.gui.QtGui.QDialog.isRightToLeft = unbound qt slot isRightToLeft of QDialog type isSignalConnected typerig.gui.QtGui.QDialog.isSignalConnected = unbound qt slot isSignalConnected of QDialog type isSizeGripEnabled typerig.gui.QtGui.QDialog.isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type isVisible typerig.gui.QtGui.QDialog.isVisible = unbound qt slot isVisible of QDialog type isVisibleTo typerig.gui.QtGui.QDialog.isVisibleTo = unbound qt slot isVisibleTo of QDialog type isWidgetType typerig.gui.QtGui.QDialog.isWidgetType = unbound qt slot isWidgetType of QDialog type isWindow typerig.gui.QtGui.QDialog.isWindow = unbound qt slot isWindow of QDialog type isWindowModified typerig.gui.QtGui.QDialog.isWindowModified = unbound qt slot isWindowModified of QDialog type isWindowType typerig.gui.QtGui.QDialog.isWindowType = unbound qt slot isWindowType of QDialog type keyboardGrabber typerig.gui.QtGui.QDialog.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type keyPressEvent typerig.gui.QtGui.QDialog.keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type keyReleaseEvent typerig.gui.QtGui.QDialog.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type killTimer typerig.gui.QtGui.QDialog.killTimer = unbound qt slot killTimer of QDialog type layout typerig.gui.QtGui.QDialog.layout = unbound qt slot layout of QDialog type leaveEvent typerig.gui.QtGui.QDialog.leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type logicalDpiX typerig.gui.QtGui.QDialog.logicalDpiX = unbound qt slot logicalDpiX of QDialog type logicalDpiY typerig.gui.QtGui.QDialog.logicalDpiY = unbound qt slot logicalDpiY of QDialog type lower typerig.gui.QtGui.QDialog.lower = unbound qt slot lower of QDialog type mapFrom typerig.gui.QtGui.QDialog.mapFrom = unbound qt slot mapFrom of QDialog type mapFromGlobal typerig.gui.QtGui.QDialog.mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type mapFromParent typerig.gui.QtGui.QDialog.mapFromParent = unbound qt slot mapFromParent of QDialog type mapTo typerig.gui.QtGui.QDialog.mapTo = unbound qt slot mapTo of QDialog type mapToGlobal typerig.gui.QtGui.QDialog.mapToGlobal = unbound qt slot mapToGlobal of QDialog type mapToParent typerig.gui.QtGui.QDialog.mapToParent = unbound qt slot mapToParent of QDialog type mask typerig.gui.QtGui.QDialog.mask = unbound qt slot mask of QDialog type metaObject typerig.gui.QtGui.QDialog.metaObject = unbound qt slot metaObject of QDialog type metric typerig.gui.QtGui.QDialog.metric = unbound qt slot py_q_metric of QDialog type mouseDoubleClickEvent typerig.gui.QtGui.QDialog.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type mouseGrabber typerig.gui.QtGui.QDialog.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type mouseMoveEvent typerig.gui.QtGui.QDialog.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type mousePressEvent typerig.gui.QtGui.QDialog.mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type mouseReleaseEvent typerig.gui.QtGui.QDialog.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type move typerig.gui.QtGui.QDialog.move = unbound qt slot move of QDialog type moveEvent typerig.gui.QtGui.QDialog.moveEvent = unbound qt slot py_q_moveEvent of QDialog type moveToThread typerig.gui.QtGui.QDialog.moveToThread = unbound qt slot moveToThread of QDialog type nativeEvent typerig.gui.QtGui.QDialog.nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type nativeParentWidget typerig.gui.QtGui.QDialog.nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type nextInFocusChain typerig.gui.QtGui.QDialog.nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type open typerig.gui.QtGui.QDialog.open = unbound qt slot py_q_open of QDialog type overrideWindowFlags typerig.gui.QtGui.QDialog.overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type overrideWindowState typerig.gui.QtGui.QDialog.overrideWindowState = unbound qt slot overrideWindowState of QDialog type paintEngine typerig.gui.QtGui.QDialog.paintEngine = unbound qt slot py_q_paintEngine of QDialog type paintEvent typerig.gui.QtGui.QDialog.paintEvent = unbound qt slot py_q_paintEvent of QDialog type paintingActive typerig.gui.QtGui.QDialog.paintingActive = unbound qt slot paintingActive of QDialog type parent typerig.gui.QtGui.QDialog.parent = unbound qt slot parent of QDialog type parentWidget typerig.gui.QtGui.QDialog.parentWidget = unbound qt slot parentWidget of QDialog type physicalDpiX typerig.gui.QtGui.QDialog.physicalDpiX = unbound qt slot physicalDpiX of QDialog type physicalDpiY typerig.gui.QtGui.QDialog.physicalDpiY = unbound qt slot physicalDpiY of QDialog type previousInFocusChain typerig.gui.QtGui.QDialog.previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type property typerig.gui.QtGui.QDialog.property = unbound qt slot property of QDialog type raise typerig.gui.QtGui.QDialog.raise = unbound qt slot raise of QDialog type redirected typerig.gui.QtGui.QDialog.redirected = unbound qt slot py_q_redirected of QDialog type reject typerig.gui.QtGui.QDialog.reject = unbound qt slot py_q_reject of QDialog type releaseKeyboard typerig.gui.QtGui.QDialog.releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type releaseMouse typerig.gui.QtGui.QDialog.releaseMouse = unbound qt slot releaseMouse of QDialog type releaseShortcut typerig.gui.QtGui.QDialog.releaseShortcut = unbound qt slot releaseShortcut of QDialog type removeAction typerig.gui.QtGui.QDialog.removeAction = unbound qt slot removeAction of QDialog type removeEventFilter typerig.gui.QtGui.QDialog.removeEventFilter = unbound qt slot removeEventFilter of QDialog type render typerig.gui.QtGui.QDialog.render = unbound qt slot render of QDialog type repaint typerig.gui.QtGui.QDialog.repaint = unbound qt slot repaint of QDialog type resize typerig.gui.QtGui.QDialog.resize = unbound qt slot resize of QDialog type resizeEvent typerig.gui.QtGui.QDialog.resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type restoreGeometry typerig.gui.QtGui.QDialog.restoreGeometry = unbound qt slot restoreGeometry of QDialog type result typerig.gui.QtGui.QDialog.result = unbound qt slot result of QDialog type saveGeometry typerig.gui.QtGui.QDialog.saveGeometry = unbound qt slot saveGeometry of QDialog type scroll typerig.gui.QtGui.QDialog.scroll = unbound qt slot scroll of QDialog type sender typerig.gui.QtGui.QDialog.sender = unbound qt slot sender of QDialog type senderSignalIndex typerig.gui.QtGui.QDialog.senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type setAcceptDrops typerig.gui.QtGui.QDialog.setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type setAccessibleDescription typerig.gui.QtGui.QDialog.setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type setAccessibleName typerig.gui.QtGui.QDialog.setAccessibleName = unbound qt slot setAccessibleName of QDialog type setAttribute typerig.gui.QtGui.QDialog.setAttribute = unbound qt slot setAttribute of QDialog type setAutoFillBackground typerig.gui.QtGui.QDialog.setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type setBackgroundRole typerig.gui.QtGui.QDialog.setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type setBaseSize typerig.gui.QtGui.QDialog.setBaseSize = unbound qt slot setBaseSize of QDialog type setContentsMargins typerig.gui.QtGui.QDialog.setContentsMargins = unbound qt slot setContentsMargins of QDialog type setContextMenuPolicy typerig.gui.QtGui.QDialog.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type setCursor typerig.gui.QtGui.QDialog.setCursor = unbound qt slot setCursor of QDialog type setDisabled typerig.gui.QtGui.QDialog.setDisabled = unbound qt slot setDisabled of QDialog type setEnabled typerig.gui.QtGui.QDialog.setEnabled = unbound qt slot setEnabled of QDialog type setFixedHeight typerig.gui.QtGui.QDialog.setFixedHeight = unbound qt slot setFixedHeight of QDialog type setFixedSize typerig.gui.QtGui.QDialog.setFixedSize = unbound qt slot setFixedSize of QDialog type setFixedWidth typerig.gui.QtGui.QDialog.setFixedWidth = unbound qt slot setFixedWidth of QDialog type setFocus typerig.gui.QtGui.QDialog.setFocus = unbound qt slot setFocus of QDialog type setFocusPolicy typerig.gui.QtGui.QDialog.setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type setFocusProxy typerig.gui.QtGui.QDialog.setFocusProxy = unbound qt slot setFocusProxy of QDialog type setFont typerig.gui.QtGui.QDialog.setFont = unbound qt slot setFont of QDialog type setForegroundRole typerig.gui.QtGui.QDialog.setForegroundRole = unbound qt slot setForegroundRole of QDialog type setGeometry typerig.gui.QtGui.QDialog.setGeometry = unbound qt slot setGeometry of QDialog type setGraphicsEffect typerig.gui.QtGui.QDialog.setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type setHidden typerig.gui.QtGui.QDialog.setHidden = unbound qt slot setHidden of QDialog type setInputMethodHints typerig.gui.QtGui.QDialog.setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type setLayout typerig.gui.QtGui.QDialog.setLayout = unbound qt slot setLayout of QDialog type setLayoutDirection typerig.gui.QtGui.QDialog.setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type setLocale typerig.gui.QtGui.QDialog.setLocale = unbound qt slot setLocale of QDialog type setMask typerig.gui.QtGui.QDialog.setMask = unbound qt slot setMask of QDialog type setMaximumHeight typerig.gui.QtGui.QDialog.setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type setMaximumSize typerig.gui.QtGui.QDialog.setMaximumSize = unbound qt slot setMaximumSize of QDialog type setMaximumWidth typerig.gui.QtGui.QDialog.setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type setMinimumHeight typerig.gui.QtGui.QDialog.setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type setMinimumSize typerig.gui.QtGui.QDialog.setMinimumSize = unbound qt slot setMinimumSize of QDialog type setMinimumWidth typerig.gui.QtGui.QDialog.setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type setModal typerig.gui.QtGui.QDialog.setModal = unbound qt slot setModal of QDialog type setMouseTracking typerig.gui.QtGui.QDialog.setMouseTracking = unbound qt slot setMouseTracking of QDialog type setObjectName typerig.gui.QtGui.QDialog.setObjectName = unbound qt slot setObjectName of QDialog type setPalette typerig.gui.QtGui.QDialog.setPalette = unbound qt slot setPalette of QDialog type setParent typerig.gui.QtGui.QDialog.setParent = unbound qt slot setParent of QDialog type setProperty typerig.gui.QtGui.QDialog.setProperty = unbound qt slot setProperty of QDialog type setResult typerig.gui.QtGui.QDialog.setResult = unbound qt slot setResult of QDialog type setShortcutAutoRepeat typerig.gui.QtGui.QDialog.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type setShortcutEnabled typerig.gui.QtGui.QDialog.setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type setSizeGripEnabled typerig.gui.QtGui.QDialog.setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type setSizeIncrement typerig.gui.QtGui.QDialog.setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type setSizePolicy typerig.gui.QtGui.QDialog.setSizePolicy = unbound qt slot setSizePolicy of QDialog type setStatusTip typerig.gui.QtGui.QDialog.setStatusTip = unbound qt slot setStatusTip of QDialog type setStyle typerig.gui.QtGui.QDialog.setStyle = unbound qt slot setStyle of QDialog type setStyleSheet typerig.gui.QtGui.QDialog.setStyleSheet = unbound qt slot setStyleSheet of QDialog type setTabOrder typerig.gui.QtGui.QDialog.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type setToolTip typerig.gui.QtGui.QDialog.setToolTip = unbound qt slot setToolTip of QDialog type setToolTipDuration typerig.gui.QtGui.QDialog.setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type setUpdatesEnabled typerig.gui.QtGui.QDialog.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type setVisible typerig.gui.QtGui.QDialog.setVisible = unbound qt slot py_q_setVisible of QDialog type setWhatsThis typerig.gui.QtGui.QDialog.setWhatsThis = unbound qt slot setWhatsThis of QDialog type setWindowFilePath typerig.gui.QtGui.QDialog.setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type setWindowFlags typerig.gui.QtGui.QDialog.setWindowFlags = unbound qt slot setWindowFlags of QDialog type setWindowIcon typerig.gui.QtGui.QDialog.setWindowIcon = unbound qt slot setWindowIcon of QDialog type setWindowIconText typerig.gui.QtGui.QDialog.setWindowIconText = unbound qt slot setWindowIconText of QDialog type setWindowModality typerig.gui.QtGui.QDialog.setWindowModality = unbound qt slot setWindowModality of QDialog type setWindowModified typerig.gui.QtGui.QDialog.setWindowModified = unbound qt slot setWindowModified of QDialog type setWindowOpacity typerig.gui.QtGui.QDialog.setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type setWindowRole typerig.gui.QtGui.QDialog.setWindowRole = unbound qt slot setWindowRole of QDialog type setWindowState typerig.gui.QtGui.QDialog.setWindowState = unbound qt slot setWindowState of QDialog type setWindowTitle typerig.gui.QtGui.QDialog.setWindowTitle = unbound qt slot setWindowTitle of QDialog type sharedPainter typerig.gui.QtGui.QDialog.sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type show typerig.gui.QtGui.QDialog.show = unbound qt slot show of QDialog type showEvent typerig.gui.QtGui.QDialog.showEvent = unbound qt slot py_q_showEvent of QDialog type showExtension typerig.gui.QtGui.QDialog.showExtension = unbound qt slot showExtension of QDialog type showFullScreen typerig.gui.QtGui.QDialog.showFullScreen = unbound qt slot showFullScreen of QDialog type showMaximized typerig.gui.QtGui.QDialog.showMaximized = unbound qt slot showMaximized of QDialog type showMinimized typerig.gui.QtGui.QDialog.showMinimized = unbound qt slot showMinimized of QDialog type showNormal typerig.gui.QtGui.QDialog.showNormal = unbound qt slot showNormal of QDialog type signalsBlocked typerig.gui.QtGui.QDialog.signalsBlocked = unbound qt slot signalsBlocked of QDialog type stackUnder typerig.gui.QtGui.QDialog.stackUnder = unbound qt slot stackUnder of QDialog type startTimer typerig.gui.QtGui.QDialog.startTimer = unbound qt slot startTimer of QDialog type style typerig.gui.QtGui.QDialog.style = unbound qt slot style of QDialog type tabletEvent typerig.gui.QtGui.QDialog.tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type testAttribute typerig.gui.QtGui.QDialog.testAttribute = unbound qt slot testAttribute of QDialog type thread typerig.gui.QtGui.QDialog.thread = unbound qt slot thread of QDialog type timerEvent typerig.gui.QtGui.QDialog.timerEvent = unbound qt slot py_q_timerEvent of QDialog type tr typerig.gui.QtGui.QDialog.tr = unbound qt slot tr of QDialog type underMouse typerig.gui.QtGui.QDialog.underMouse = unbound qt slot underMouse of QDialog type ungrabGesture typerig.gui.QtGui.QDialog.ungrabGesture = unbound qt slot ungrabGesture of QDialog type unsetCursor typerig.gui.QtGui.QDialog.unsetCursor = unbound qt slot unsetCursor of QDialog type unsetLayoutDirection typerig.gui.QtGui.QDialog.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type unsetLocale typerig.gui.QtGui.QDialog.unsetLocale = unbound qt slot unsetLocale of QDialog type update typerig.gui.QtGui.QDialog.update = unbound qt slot update of QDialog type updateGeometry typerig.gui.QtGui.QDialog.updateGeometry = unbound qt slot updateGeometry of QDialog type visibleRegion typerig.gui.QtGui.QDialog.visibleRegion = unbound qt slot visibleRegion of QDialog type wheelEvent typerig.gui.QtGui.QDialog.wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type widthMM typerig.gui.QtGui.QDialog.widthMM = unbound qt slot widthMM of QDialog type window typerig.gui.QtGui.QDialog.window = unbound qt slot window of QDialog type windowFlags typerig.gui.QtGui.QDialog.windowFlags = unbound qt slot windowFlags of QDialog type windowHandle typerig.gui.QtGui.QDialog.windowHandle = unbound qt slot windowHandle of QDialog type windowRole typerig.gui.QtGui.QDialog.windowRole = unbound qt slot windowRole of QDialog type windowState typerig.gui.QtGui.QDialog.windowState = unbound qt slot windowState of QDialog type windowType typerig.gui.QtGui.QDialog.windowType = unbound qt slot windowType of QDialog type winId typerig.gui.QtGui.QDialog.winId = unbound qt slot winId of QDialog type QGridLayout typerig.gui.QtGui.QGridLayout = class QGridLayout ( PythonQt.QtGui.QGridLayout ) Method resolution order: QGridLayout PythonQt.QtGui.QGridLayout PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, *args, **kwargs) Attributes SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' activate = unbound qt slot activate of QGridLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QGridLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QGridLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QGridLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QGridLayout type X. addLayout (a, b, c, d, e, f, g) addWidget = unbound qt slot addWidget of QGridLayout type X. addWidget (a, b, c, d, e, f, g) adoptLayout = unbound qt slot adoptLayout of QGridLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QGridLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QGridLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QGridLayout type X. blockSignals (a, b) -> bool cellRect = unbound qt slot cellRect of QGridLayout type X. cellRect (a, b, c) -> PythonQt.QtCore.QRect childEvent = unbound qt slot py_q_childEvent of QGridLayout type X. childEvent (a, b) children = unbound qt slot children of QGridLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize columnCount = unbound qt slot columnCount of QGridLayout type X. columnCount (a) -> int columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type X. columnMinimumWidth (a, b) -> int columnStretch = unbound qt slot columnStretch of QGridLayout type X. columnStretch (a, b) -> int connect = unbound qt slot connect of QGridLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QGridLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QGridLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QGridLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QGridLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QGridLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QGridLayout type disconnect = unbound qt slot disconnect of QGridLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QGridLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QGridLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QGridLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QGridLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type X. horizontalSpacing (a) -> int indexOf = unbound qt slot py_q_indexOf of QGridLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name installEventFilter = unbound qt slot installEventFilter of QGridLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QGridLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QGridLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QGridLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QGridLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QGridLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type X. itemAtPosition (a, b, c) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QGridLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QGridLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QGridLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QGridLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QGridLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QGridLayout type originCorner = unbound qt slot originCorner of QGridLayout type X. originCorner (a) parent = unbound qt slot parent of QGridLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QGridLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QGridLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QGridLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QGridLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QGridLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem rowCount = unbound qt slot rowCount of QGridLayout type X. rowCount (a) -> int rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type X. rowMinimumHeight (a, b) -> int rowStretch = unbound qt slot rowStretch of QGridLayout type X. rowStretch (a, b) -> int sender = unbound qt slot sender of QGridLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QGridLayout type X. setAlignment (a, b, c) -> bool setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type X. setColumnMinimumWidth (a, b, c) setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type X. setColumnStretch (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type X. setContentsMargins (a, b, c, d, e) setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type X. setDefaultPositioning (a, b, c) setEnabled = unbound qt slot setEnabled of QGridLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type X. setGeometry (a, b) setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type X. setHorizontalSpacing (a, b) setMargin = unbound qt slot setMargin of QGridLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QGridLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QGridLayout type X. setObjectName (a, b) setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type X. setOriginCorner (a, b) setParent = unbound qt slot setParent of QGridLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QGridLayout type X. setProperty (a, b, c) -> bool setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type X. setRowMinimumHeight (a, b, c) setRowStretch = unbound qt slot setRowStretch of QGridLayout type X. setRowStretch (a, b, c) setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QGridLayout type X. setSpacing (a, b) setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type X. setVerticalSpacing (a, b) signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QGridLayout type X. startTimer (a, b, c) -> int takeAt = unbound qt slot py_q_takeAt of QGridLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QGridLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QGridLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QGridLayout type X. update (a) verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type X. verticalSpacing (a) -> int widget = unbound qt slot py_q_widget of QGridLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QGridLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QGridLayout __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T activate typerig.gui.QtGui.QGridLayout.activate = unbound qt slot activate of QGridLayout type addChildLayout typerig.gui.QtGui.QGridLayout.addChildLayout = unbound qt slot addChildLayout of QGridLayout type addChildWidget typerig.gui.QtGui.QGridLayout.addChildWidget = unbound qt slot addChildWidget of QGridLayout type addItem typerig.gui.QtGui.QGridLayout.addItem = unbound qt slot py_q_addItem of QGridLayout type addLayout typerig.gui.QtGui.QGridLayout.addLayout = unbound qt slot addLayout of QGridLayout type addWidget typerig.gui.QtGui.QGridLayout.addWidget = unbound qt slot addWidget of QGridLayout type adoptLayout typerig.gui.QtGui.QGridLayout.adoptLayout = unbound qt slot adoptLayout of QGridLayout type alignment typerig.gui.QtGui.QGridLayout.alignment = unbound qt slot alignment of QGridLayout type alignmentRect typerig.gui.QtGui.QGridLayout.alignmentRect = unbound qt slot alignmentRect of QGridLayout type blockSignals typerig.gui.QtGui.QGridLayout.blockSignals = unbound qt slot blockSignals of QGridLayout type cellRect typerig.gui.QtGui.QGridLayout.cellRect = unbound qt slot cellRect of QGridLayout type childEvent typerig.gui.QtGui.QGridLayout.childEvent = unbound qt slot py_q_childEvent of QGridLayout type children typerig.gui.QtGui.QGridLayout.children = unbound qt slot children of QGridLayout type className typerig.gui.QtGui.QGridLayout.className = className (...) Return the classname of the object closestAcceptableSize typerig.gui.QtGui.QGridLayout.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type columnCount typerig.gui.QtGui.QGridLayout.columnCount = unbound qt slot columnCount of QGridLayout type columnMinimumWidth typerig.gui.QtGui.QGridLayout.columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type columnStretch typerig.gui.QtGui.QGridLayout.columnStretch = unbound qt slot columnStretch of QGridLayout type connect typerig.gui.QtGui.QGridLayout.connect = unbound qt slot connect of QGridLayout type contentsMargins typerig.gui.QtGui.QGridLayout.contentsMargins = unbound qt slot contentsMargins of QGridLayout type contentsRect typerig.gui.QtGui.QGridLayout.contentsRect = unbound qt slot contentsRect of QGridLayout type controlTypes typerig.gui.QtGui.QGridLayout.controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type count typerig.gui.QtGui.QGridLayout.count = unbound qt slot py_q_count of QGridLayout type customEvent typerig.gui.QtGui.QGridLayout.customEvent = unbound qt slot py_q_customEvent of QGridLayout type delete typerig.gui.QtGui.QGridLayout.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.QtGui.QGridLayout.deleteLater = unbound qt slot deleteLater of QGridLayout type disconnect typerig.gui.QtGui.QGridLayout.disconnect = unbound qt slot disconnect of QGridLayout type dumpObjectInfo typerig.gui.QtGui.QGridLayout.dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type dumpObjectTree typerig.gui.QtGui.QGridLayout.dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type dynamicPropertyNames typerig.gui.QtGui.QGridLayout.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type event typerig.gui.QtGui.QGridLayout.event = unbound qt slot py_q_event of QGridLayout type eventFilter typerig.gui.QtGui.QGridLayout.eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type expandingDirections typerig.gui.QtGui.QGridLayout.expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type findChild typerig.gui.QtGui.QGridLayout.findChild = unbound qt slot findChild of QGridLayout type findChildren typerig.gui.QtGui.QGridLayout.findChildren = unbound qt slot findChildren of QGridLayout type geometry typerig.gui.QtGui.QGridLayout.geometry = unbound qt slot py_q_geometry of QGridLayout type hasHeightForWidth typerig.gui.QtGui.QGridLayout.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type heightForWidth typerig.gui.QtGui.QGridLayout.heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type help typerig.gui.QtGui.QGridLayout.help = help (...) Shows the help of available methods for this class horizontalSpacing typerig.gui.QtGui.QGridLayout.horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type indexOf typerig.gui.QtGui.QGridLayout.indexOf = unbound qt slot py_q_indexOf of QGridLayout type inherits typerig.gui.QtGui.QGridLayout.inherits = inherits (...) Returns if the class inherits or is of given type name installEventFilter typerig.gui.QtGui.QGridLayout.installEventFilter = unbound qt slot installEventFilter of QGridLayout type invalidate typerig.gui.QtGui.QGridLayout.invalidate = unbound qt slot py_q_invalidate of QGridLayout type isEmpty typerig.gui.QtGui.QGridLayout.isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type isEnabled typerig.gui.QtGui.QGridLayout.isEnabled = unbound qt slot isEnabled of QGridLayout type isSignalConnected typerig.gui.QtGui.QGridLayout.isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type isWidgetType typerig.gui.QtGui.QGridLayout.isWidgetType = unbound qt slot isWidgetType of QGridLayout type isWindowType typerig.gui.QtGui.QGridLayout.isWindowType = unbound qt slot isWindowType of QGridLayout type itemAt typerig.gui.QtGui.QGridLayout.itemAt = unbound qt slot py_q_itemAt of QGridLayout type itemAtPosition typerig.gui.QtGui.QGridLayout.itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type killTimer typerig.gui.QtGui.QGridLayout.killTimer = unbound qt slot killTimer of QGridLayout type layout typerig.gui.QtGui.QGridLayout.layout = unbound qt slot py_q_layout of QGridLayout type maximumSize typerig.gui.QtGui.QGridLayout.maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type menuBar typerig.gui.QtGui.QGridLayout.menuBar = unbound qt slot menuBar of QGridLayout type metaObject typerig.gui.QtGui.QGridLayout.metaObject = unbound qt slot metaObject of QGridLayout type minimumHeightForWidth typerig.gui.QtGui.QGridLayout.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type minimumSize typerig.gui.QtGui.QGridLayout.minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type moveToThread typerig.gui.QtGui.QGridLayout.moveToThread = unbound qt slot moveToThread of QGridLayout type originCorner typerig.gui.QtGui.QGridLayout.originCorner = unbound qt slot originCorner of QGridLayout type parent typerig.gui.QtGui.QGridLayout.parent = unbound qt slot parent of QGridLayout type parentWidget typerig.gui.QtGui.QGridLayout.parentWidget = unbound qt slot parentWidget of QGridLayout type property typerig.gui.QtGui.QGridLayout.property = unbound qt slot property of QGridLayout type removeEventFilter typerig.gui.QtGui.QGridLayout.removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type removeItem typerig.gui.QtGui.QGridLayout.removeItem = unbound qt slot removeItem of QGridLayout type removeWidget typerig.gui.QtGui.QGridLayout.removeWidget = unbound qt slot removeWidget of QGridLayout type replaceWidget typerig.gui.QtGui.QGridLayout.replaceWidget = unbound qt slot replaceWidget of QGridLayout type rowCount typerig.gui.QtGui.QGridLayout.rowCount = unbound qt slot rowCount of QGridLayout type rowMinimumHeight typerig.gui.QtGui.QGridLayout.rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type rowStretch typerig.gui.QtGui.QGridLayout.rowStretch = unbound qt slot rowStretch of QGridLayout type sender typerig.gui.QtGui.QGridLayout.sender = unbound qt slot sender of QGridLayout type senderSignalIndex typerig.gui.QtGui.QGridLayout.senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type setAlignment typerig.gui.QtGui.QGridLayout.setAlignment = unbound qt slot setAlignment of QGridLayout type setColumnMinimumWidth typerig.gui.QtGui.QGridLayout.setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type setColumnStretch typerig.gui.QtGui.QGridLayout.setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type setContentsMargins typerig.gui.QtGui.QGridLayout.setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type setDefaultPositioning typerig.gui.QtGui.QGridLayout.setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type setEnabled typerig.gui.QtGui.QGridLayout.setEnabled = unbound qt slot setEnabled of QGridLayout type setGeometry typerig.gui.QtGui.QGridLayout.setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type setHorizontalSpacing typerig.gui.QtGui.QGridLayout.setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type setMargin typerig.gui.QtGui.QGridLayout.setMargin = unbound qt slot setMargin of QGridLayout type setMenuBar typerig.gui.QtGui.QGridLayout.setMenuBar = unbound qt slot setMenuBar of QGridLayout type setObjectName typerig.gui.QtGui.QGridLayout.setObjectName = unbound qt slot setObjectName of QGridLayout type setOriginCorner typerig.gui.QtGui.QGridLayout.setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type setParent typerig.gui.QtGui.QGridLayout.setParent = unbound qt slot setParent of QGridLayout type setProperty typerig.gui.QtGui.QGridLayout.setProperty = unbound qt slot setProperty of QGridLayout type setRowMinimumHeight typerig.gui.QtGui.QGridLayout.setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type setRowStretch typerig.gui.QtGui.QGridLayout.setRowStretch = unbound qt slot setRowStretch of QGridLayout type setSizeConstraint typerig.gui.QtGui.QGridLayout.setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type setSpacing typerig.gui.QtGui.QGridLayout.setSpacing = unbound qt slot setSpacing of QGridLayout type setVerticalSpacing typerig.gui.QtGui.QGridLayout.setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type signalsBlocked typerig.gui.QtGui.QGridLayout.signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type sizeHint typerig.gui.QtGui.QGridLayout.sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type spacerItem typerig.gui.QtGui.QGridLayout.spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type startTimer typerig.gui.QtGui.QGridLayout.startTimer = unbound qt slot startTimer of QGridLayout type takeAt typerig.gui.QtGui.QGridLayout.takeAt = unbound qt slot py_q_takeAt of QGridLayout type thread typerig.gui.QtGui.QGridLayout.thread = unbound qt slot thread of QGridLayout type timerEvent typerig.gui.QtGui.QGridLayout.timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type totalHeightForWidth typerig.gui.QtGui.QGridLayout.totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type totalMaximumSize typerig.gui.QtGui.QGridLayout.totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type totalMinimumSize typerig.gui.QtGui.QGridLayout.totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type totalSizeHint typerig.gui.QtGui.QGridLayout.totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type tr typerig.gui.QtGui.QGridLayout.tr = unbound qt slot tr of QGridLayout type update typerig.gui.QtGui.QGridLayout.update = unbound qt slot update of QGridLayout type verticalSpacing typerig.gui.QtGui.QGridLayout.verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type widget typerig.gui.QtGui.QGridLayout.widget = unbound qt slot py_q_widget of QGridLayout type widgetEvent typerig.gui.QtGui.QGridLayout.widgetEvent = unbound qt slot widgetEvent of QGridLayout type QHBoxLayout typerig.gui.QtGui.QHBoxLayout = class QHBoxLayout ( PythonQt.QtGui.QHBoxLayout ) Method resolution order: QHBoxLayout PythonQt.QtGui.QHBoxLayout PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, *args, **kwargs) Attributes BottomToTop = 3 Direction = class 'PythonQt.QtGui.Direction' Down = 2 LeftToRight = 0 RightToLeft = 1 SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' TopToBottom = 2 Up = 3 activate = unbound qt slot activate of QHBoxLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QHBoxLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QHBoxLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QHBoxLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QHBoxLayout type X. addLayout (a, b, c) addSpacerItem = unbound qt slot addSpacerItem of QHBoxLayout type X. addSpacerItem (a, b) addSpacing = unbound qt slot addSpacing of QHBoxLayout type X. addSpacing (a, b) addStretch = unbound qt slot addStretch of QHBoxLayout type X. addStretch (a, b) addStrut = unbound qt slot addStrut of QHBoxLayout type X. addStrut (a, b) addWidget = unbound qt slot addWidget of QHBoxLayout type X. addWidget (a, b, c, d) adoptLayout = unbound qt slot adoptLayout of QHBoxLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QHBoxLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QHBoxLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QHBoxLayout type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of QHBoxLayout type X. childEvent (a, b) children = unbound qt slot children of QHBoxLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QHBoxLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize connect = unbound qt slot connect of QHBoxLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QHBoxLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QHBoxLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QHBoxLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QHBoxLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QHBoxLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QHBoxLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QHBoxLayout type direction = unbound qt slot direction of QHBoxLayout type X. direction (a) disconnect = unbound qt slot disconnect of QHBoxLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QHBoxLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QHBoxLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QHBoxLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QHBoxLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QHBoxLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QHBoxLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QHBoxLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QHBoxLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QHBoxLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QHBoxLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QHBoxLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class indexOf = unbound qt slot py_q_indexOf of QHBoxLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name insertItem = unbound qt slot insertItem of QHBoxLayout type X. insertItem (a, b, c) insertLayout = unbound qt slot insertLayout of QHBoxLayout type X. insertLayout (a, b, c, d) insertSpacerItem = unbound qt slot insertSpacerItem of QHBoxLayout type X. insertSpacerItem (a, b, c) insertSpacing = unbound qt slot insertSpacing of QHBoxLayout type X. insertSpacing (a, b, c) insertStretch = unbound qt slot insertStretch of QHBoxLayout type X. insertStretch (a, b, c) insertWidget = unbound qt slot insertWidget of QHBoxLayout type X. insertWidget (a, b, c, d, e) installEventFilter = unbound qt slot installEventFilter of QHBoxLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QHBoxLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QHBoxLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QHBoxLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QHBoxLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QHBoxLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QHBoxLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QHBoxLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QHBoxLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QHBoxLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QHBoxLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QHBoxLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QHBoxLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QHBoxLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QHBoxLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QHBoxLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QHBoxLayout type parent = unbound qt slot parent of QHBoxLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QHBoxLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QHBoxLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QHBoxLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QHBoxLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QHBoxLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QHBoxLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem sender = unbound qt slot sender of QHBoxLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QHBoxLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QHBoxLayout type X. setAlignment (a, b, c) -> bool setContentsMargins = unbound qt slot setContentsMargins of QHBoxLayout type X. setContentsMargins (a, b, c, d, e) setDirection = unbound qt slot setDirection of QHBoxLayout type X. setDirection (a, b) setEnabled = unbound qt slot setEnabled of QHBoxLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QHBoxLayout type X. setGeometry (a, b) setMargin = unbound qt slot setMargin of QHBoxLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QHBoxLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QHBoxLayout type X. setObjectName (a, b) setParent = unbound qt slot setParent of QHBoxLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QHBoxLayout type X. setProperty (a, b, c) -> bool setSizeConstraint = unbound qt slot setSizeConstraint of QHBoxLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QHBoxLayout type X. setSpacing (a, b) setStretch = unbound qt slot setStretch of QHBoxLayout type X. setStretch (a, b, c) setStretchFactor = unbound qt slot setStretchFactor of QHBoxLayout type X. setStretchFactor (a, b, c) -> bool signalsBlocked = unbound qt slot signalsBlocked of QHBoxLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QHBoxLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QHBoxLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QHBoxLayout type X. startTimer (a, b, c) -> int stretch = unbound qt slot stretch of QHBoxLayout type X. stretch (a, b) -> int takeAt = unbound qt slot py_q_takeAt of QHBoxLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QHBoxLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QHBoxLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QHBoxLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QHBoxLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QHBoxLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QHBoxLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QHBoxLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QHBoxLayout type X. update (a) widget = unbound qt slot py_q_widget of QHBoxLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QHBoxLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QHBoxLayout __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T activate typerig.gui.QtGui.QHBoxLayout.activate = unbound qt slot activate of QHBoxLayout type addChildLayout typerig.gui.QtGui.QHBoxLayout.addChildLayout = unbound qt slot addChildLayout of QHBoxLayout type addChildWidget typerig.gui.QtGui.QHBoxLayout.addChildWidget = unbound qt slot addChildWidget of QHBoxLayout type addItem typerig.gui.QtGui.QHBoxLayout.addItem = unbound qt slot py_q_addItem of QHBoxLayout type addLayout typerig.gui.QtGui.QHBoxLayout.addLayout = unbound qt slot addLayout of QHBoxLayout type addSpacerItem typerig.gui.QtGui.QHBoxLayout.addSpacerItem = unbound qt slot addSpacerItem of QHBoxLayout type addSpacing typerig.gui.QtGui.QHBoxLayout.addSpacing = unbound qt slot addSpacing of QHBoxLayout type addStretch typerig.gui.QtGui.QHBoxLayout.addStretch = unbound qt slot addStretch of QHBoxLayout type addStrut typerig.gui.QtGui.QHBoxLayout.addStrut = unbound qt slot addStrut of QHBoxLayout type addWidget typerig.gui.QtGui.QHBoxLayout.addWidget = unbound qt slot addWidget of QHBoxLayout type adoptLayout typerig.gui.QtGui.QHBoxLayout.adoptLayout = unbound qt slot adoptLayout of QHBoxLayout type alignment typerig.gui.QtGui.QHBoxLayout.alignment = unbound qt slot alignment of QHBoxLayout type alignmentRect typerig.gui.QtGui.QHBoxLayout.alignmentRect = unbound qt slot alignmentRect of QHBoxLayout type blockSignals typerig.gui.QtGui.QHBoxLayout.blockSignals = unbound qt slot blockSignals of QHBoxLayout type childEvent typerig.gui.QtGui.QHBoxLayout.childEvent = unbound qt slot py_q_childEvent of QHBoxLayout type children typerig.gui.QtGui.QHBoxLayout.children = unbound qt slot children of QHBoxLayout type className typerig.gui.QtGui.QHBoxLayout.className = className (...) Return the classname of the object closestAcceptableSize typerig.gui.QtGui.QHBoxLayout.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QHBoxLayout type connect typerig.gui.QtGui.QHBoxLayout.connect = unbound qt slot connect of QHBoxLayout type contentsMargins typerig.gui.QtGui.QHBoxLayout.contentsMargins = unbound qt slot contentsMargins of QHBoxLayout type contentsRect typerig.gui.QtGui.QHBoxLayout.contentsRect = unbound qt slot contentsRect of QHBoxLayout type controlTypes typerig.gui.QtGui.QHBoxLayout.controlTypes = unbound qt slot py_q_controlTypes of QHBoxLayout type count typerig.gui.QtGui.QHBoxLayout.count = unbound qt slot py_q_count of QHBoxLayout type customEvent typerig.gui.QtGui.QHBoxLayout.customEvent = unbound qt slot py_q_customEvent of QHBoxLayout type delete typerig.gui.QtGui.QHBoxLayout.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.QtGui.QHBoxLayout.deleteLater = unbound qt slot deleteLater of QHBoxLayout type direction typerig.gui.QtGui.QHBoxLayout.direction = unbound qt slot direction of QHBoxLayout type disconnect typerig.gui.QtGui.QHBoxLayout.disconnect = unbound qt slot disconnect of QHBoxLayout type dumpObjectInfo typerig.gui.QtGui.QHBoxLayout.dumpObjectInfo = unbound qt slot dumpObjectInfo of QHBoxLayout type dumpObjectTree typerig.gui.QtGui.QHBoxLayout.dumpObjectTree = unbound qt slot dumpObjectTree of QHBoxLayout type dynamicPropertyNames typerig.gui.QtGui.QHBoxLayout.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QHBoxLayout type event typerig.gui.QtGui.QHBoxLayout.event = unbound qt slot py_q_event of QHBoxLayout type eventFilter typerig.gui.QtGui.QHBoxLayout.eventFilter = unbound qt slot py_q_eventFilter of QHBoxLayout type expandingDirections typerig.gui.QtGui.QHBoxLayout.expandingDirections = unbound qt slot py_q_expandingDirections of QHBoxLayout type findChild typerig.gui.QtGui.QHBoxLayout.findChild = unbound qt slot findChild of QHBoxLayout type findChildren typerig.gui.QtGui.QHBoxLayout.findChildren = unbound qt slot findChildren of QHBoxLayout type geometry typerig.gui.QtGui.QHBoxLayout.geometry = unbound qt slot py_q_geometry of QHBoxLayout type hasHeightForWidth typerig.gui.QtGui.QHBoxLayout.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QHBoxLayout type heightForWidth typerig.gui.QtGui.QHBoxLayout.heightForWidth = unbound qt slot py_q_heightForWidth of QHBoxLayout type help typerig.gui.QtGui.QHBoxLayout.help = help (...) Shows the help of available methods for this class indexOf typerig.gui.QtGui.QHBoxLayout.indexOf = unbound qt slot py_q_indexOf of QHBoxLayout type inherits typerig.gui.QtGui.QHBoxLayout.inherits = inherits (...) Returns if the class inherits or is of given type name insertItem typerig.gui.QtGui.QHBoxLayout.insertItem = unbound qt slot insertItem of QHBoxLayout type insertLayout typerig.gui.QtGui.QHBoxLayout.insertLayout = unbound qt slot insertLayout of QHBoxLayout type insertSpacerItem typerig.gui.QtGui.QHBoxLayout.insertSpacerItem = unbound qt slot insertSpacerItem of QHBoxLayout type insertSpacing typerig.gui.QtGui.QHBoxLayout.insertSpacing = unbound qt slot insertSpacing of QHBoxLayout type insertStretch typerig.gui.QtGui.QHBoxLayout.insertStretch = unbound qt slot insertStretch of QHBoxLayout type insertWidget typerig.gui.QtGui.QHBoxLayout.insertWidget = unbound qt slot insertWidget of QHBoxLayout type installEventFilter typerig.gui.QtGui.QHBoxLayout.installEventFilter = unbound qt slot installEventFilter of QHBoxLayout type invalidate typerig.gui.QtGui.QHBoxLayout.invalidate = unbound qt slot py_q_invalidate of QHBoxLayout type isEmpty typerig.gui.QtGui.QHBoxLayout.isEmpty = unbound qt slot py_q_isEmpty of QHBoxLayout type isEnabled typerig.gui.QtGui.QHBoxLayout.isEnabled = unbound qt slot isEnabled of QHBoxLayout type isSignalConnected typerig.gui.QtGui.QHBoxLayout.isSignalConnected = unbound qt slot isSignalConnected of QHBoxLayout type isWidgetType typerig.gui.QtGui.QHBoxLayout.isWidgetType = unbound qt slot isWidgetType of QHBoxLayout type isWindowType typerig.gui.QtGui.QHBoxLayout.isWindowType = unbound qt slot isWindowType of QHBoxLayout type itemAt typerig.gui.QtGui.QHBoxLayout.itemAt = unbound qt slot py_q_itemAt of QHBoxLayout type killTimer typerig.gui.QtGui.QHBoxLayout.killTimer = unbound qt slot killTimer of QHBoxLayout type layout typerig.gui.QtGui.QHBoxLayout.layout = unbound qt slot py_q_layout of QHBoxLayout type maximumSize typerig.gui.QtGui.QHBoxLayout.maximumSize = unbound qt slot py_q_maximumSize of QHBoxLayout type menuBar typerig.gui.QtGui.QHBoxLayout.menuBar = unbound qt slot menuBar of QHBoxLayout type metaObject typerig.gui.QtGui.QHBoxLayout.metaObject = unbound qt slot metaObject of QHBoxLayout type minimumHeightForWidth typerig.gui.QtGui.QHBoxLayout.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QHBoxLayout type minimumSize typerig.gui.QtGui.QHBoxLayout.minimumSize = unbound qt slot py_q_minimumSize of QHBoxLayout type moveToThread typerig.gui.QtGui.QHBoxLayout.moveToThread = unbound qt slot moveToThread of QHBoxLayout type parent typerig.gui.QtGui.QHBoxLayout.parent = unbound qt slot parent of QHBoxLayout type parentWidget typerig.gui.QtGui.QHBoxLayout.parentWidget = unbound qt slot parentWidget of QHBoxLayout type property typerig.gui.QtGui.QHBoxLayout.property = unbound qt slot property of QHBoxLayout type removeEventFilter typerig.gui.QtGui.QHBoxLayout.removeEventFilter = unbound qt slot removeEventFilter of QHBoxLayout type removeItem typerig.gui.QtGui.QHBoxLayout.removeItem = unbound qt slot removeItem of QHBoxLayout type removeWidget typerig.gui.QtGui.QHBoxLayout.removeWidget = unbound qt slot removeWidget of QHBoxLayout type replaceWidget typerig.gui.QtGui.QHBoxLayout.replaceWidget = unbound qt slot replaceWidget of QHBoxLayout type sender typerig.gui.QtGui.QHBoxLayout.sender = unbound qt slot sender of QHBoxLayout type senderSignalIndex typerig.gui.QtGui.QHBoxLayout.senderSignalIndex = unbound qt slot senderSignalIndex of QHBoxLayout type setAlignment typerig.gui.QtGui.QHBoxLayout.setAlignment = unbound qt slot setAlignment of QHBoxLayout type setContentsMargins typerig.gui.QtGui.QHBoxLayout.setContentsMargins = unbound qt slot setContentsMargins of QHBoxLayout type setDirection typerig.gui.QtGui.QHBoxLayout.setDirection = unbound qt slot setDirection of QHBoxLayout type setEnabled typerig.gui.QtGui.QHBoxLayout.setEnabled = unbound qt slot setEnabled of QHBoxLayout type setGeometry typerig.gui.QtGui.QHBoxLayout.setGeometry = unbound qt slot py_q_setGeometry of QHBoxLayout type setMargin typerig.gui.QtGui.QHBoxLayout.setMargin = unbound qt slot setMargin of QHBoxLayout type setMenuBar typerig.gui.QtGui.QHBoxLayout.setMenuBar = unbound qt slot setMenuBar of QHBoxLayout type setObjectName typerig.gui.QtGui.QHBoxLayout.setObjectName = unbound qt slot setObjectName of QHBoxLayout type setParent typerig.gui.QtGui.QHBoxLayout.setParent = unbound qt slot setParent of QHBoxLayout type setProperty typerig.gui.QtGui.QHBoxLayout.setProperty = unbound qt slot setProperty of QHBoxLayout type setSizeConstraint typerig.gui.QtGui.QHBoxLayout.setSizeConstraint = unbound qt slot setSizeConstraint of QHBoxLayout type setSpacing typerig.gui.QtGui.QHBoxLayout.setSpacing = unbound qt slot setSpacing of QHBoxLayout type setStretch typerig.gui.QtGui.QHBoxLayout.setStretch = unbound qt slot setStretch of QHBoxLayout type setStretchFactor typerig.gui.QtGui.QHBoxLayout.setStretchFactor = unbound qt slot setStretchFactor of QHBoxLayout type signalsBlocked typerig.gui.QtGui.QHBoxLayout.signalsBlocked = unbound qt slot signalsBlocked of QHBoxLayout type sizeHint typerig.gui.QtGui.QHBoxLayout.sizeHint = unbound qt slot py_q_sizeHint of QHBoxLayout type spacerItem typerig.gui.QtGui.QHBoxLayout.spacerItem = unbound qt slot py_q_spacerItem of QHBoxLayout type startTimer typerig.gui.QtGui.QHBoxLayout.startTimer = unbound qt slot startTimer of QHBoxLayout type stretch typerig.gui.QtGui.QHBoxLayout.stretch = unbound qt slot stretch of QHBoxLayout type takeAt typerig.gui.QtGui.QHBoxLayout.takeAt = unbound qt slot py_q_takeAt of QHBoxLayout type thread typerig.gui.QtGui.QHBoxLayout.thread = unbound qt slot thread of QHBoxLayout type timerEvent typerig.gui.QtGui.QHBoxLayout.timerEvent = unbound qt slot py_q_timerEvent of QHBoxLayout type totalHeightForWidth typerig.gui.QtGui.QHBoxLayout.totalHeightForWidth = unbound qt slot totalHeightForWidth of QHBoxLayout type totalMaximumSize typerig.gui.QtGui.QHBoxLayout.totalMaximumSize = unbound qt slot totalMaximumSize of QHBoxLayout type totalMinimumSize typerig.gui.QtGui.QHBoxLayout.totalMinimumSize = unbound qt slot totalMinimumSize of QHBoxLayout type totalSizeHint typerig.gui.QtGui.QHBoxLayout.totalSizeHint = unbound qt slot totalSizeHint of QHBoxLayout type tr typerig.gui.QtGui.QHBoxLayout.tr = unbound qt slot tr of QHBoxLayout type update typerig.gui.QtGui.QHBoxLayout.update = unbound qt slot update of QHBoxLayout type widget typerig.gui.QtGui.QHBoxLayout.widget = unbound qt slot py_q_widget of QHBoxLayout type widgetEvent typerig.gui.QtGui.QHBoxLayout.widgetEvent = unbound qt slot widgetEvent of QHBoxLayout type QVBoxLayout typerig.gui.QtGui.QVBoxLayout = class QVBoxLayout ( PythonQt.QtGui.QVBoxLayout ) Method resolution order: QVBoxLayout PythonQt.QtGui.QVBoxLayout PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, *args, **kwargs) Attributes BottomToTop = 3 Direction = class 'PythonQt.QtGui.Direction' Down = 2 LeftToRight = 0 RightToLeft = 1 SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' TopToBottom = 2 Up = 3 activate = unbound qt slot activate of QVBoxLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QVBoxLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QVBoxLayout type X. addLayout (a, b, c) addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type X. addSpacerItem (a, b) addSpacing = unbound qt slot addSpacing of QVBoxLayout type X. addSpacing (a, b) addStretch = unbound qt slot addStretch of QVBoxLayout type X. addStretch (a, b) addStrut = unbound qt slot addStrut of QVBoxLayout type X. addStrut (a, b) addWidget = unbound qt slot addWidget of QVBoxLayout type X. addWidget (a, b, c, d) adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QVBoxLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QVBoxLayout type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type X. childEvent (a, b) children = unbound qt slot children of QVBoxLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize connect = unbound qt slot connect of QVBoxLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QVBoxLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QVBoxLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QVBoxLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QVBoxLayout type direction = unbound qt slot direction of QVBoxLayout type X. direction (a) disconnect = unbound qt slot disconnect of QVBoxLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QVBoxLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QVBoxLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QVBoxLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QVBoxLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name insertItem = unbound qt slot insertItem of QVBoxLayout type X. insertItem (a, b, c) insertLayout = unbound qt slot insertLayout of QVBoxLayout type X. insertLayout (a, b, c, d) insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type X. insertSpacerItem (a, b, c) insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type X. insertSpacing (a, b, c) insertStretch = unbound qt slot insertStretch of QVBoxLayout type X. insertStretch (a, b, c) insertWidget = unbound qt slot insertWidget of QVBoxLayout type X. insertWidget (a, b, c, d, e) installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QVBoxLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QVBoxLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QVBoxLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QVBoxLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QVBoxLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QVBoxLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QVBoxLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QVBoxLayout type parent = unbound qt slot parent of QVBoxLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QVBoxLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QVBoxLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QVBoxLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QVBoxLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem sender = unbound qt slot sender of QVBoxLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QVBoxLayout type X. setAlignment (a, b, c) -> bool setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type X. setContentsMargins (a, b, c, d, e) setDirection = unbound qt slot setDirection of QVBoxLayout type X. setDirection (a, b) setEnabled = unbound qt slot setEnabled of QVBoxLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type X. setGeometry (a, b) setMargin = unbound qt slot setMargin of QVBoxLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QVBoxLayout type X. setObjectName (a, b) setParent = unbound qt slot setParent of QVBoxLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QVBoxLayout type X. setProperty (a, b, c) -> bool setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QVBoxLayout type X. setSpacing (a, b) setStretch = unbound qt slot setStretch of QVBoxLayout type X. setStretch (a, b, c) setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type X. setStretchFactor (a, b, c) -> bool signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QVBoxLayout type X. startTimer (a, b, c) -> int stretch = unbound qt slot stretch of QVBoxLayout type X. stretch (a, b) -> int takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QVBoxLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QVBoxLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QVBoxLayout type X. update (a) widget = unbound qt slot py_q_widget of QVBoxLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QVBoxLayout __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T activate typerig.gui.QtGui.QVBoxLayout.activate = unbound qt slot activate of QVBoxLayout type addChildLayout typerig.gui.QtGui.QVBoxLayout.addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type addChildWidget typerig.gui.QtGui.QVBoxLayout.addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type addItem typerig.gui.QtGui.QVBoxLayout.addItem = unbound qt slot py_q_addItem of QVBoxLayout type addLayout typerig.gui.QtGui.QVBoxLayout.addLayout = unbound qt slot addLayout of QVBoxLayout type addSpacerItem typerig.gui.QtGui.QVBoxLayout.addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type addSpacing typerig.gui.QtGui.QVBoxLayout.addSpacing = unbound qt slot addSpacing of QVBoxLayout type addStretch typerig.gui.QtGui.QVBoxLayout.addStretch = unbound qt slot addStretch of QVBoxLayout type addStrut typerig.gui.QtGui.QVBoxLayout.addStrut = unbound qt slot addStrut of QVBoxLayout type addWidget typerig.gui.QtGui.QVBoxLayout.addWidget = unbound qt slot addWidget of QVBoxLayout type adoptLayout typerig.gui.QtGui.QVBoxLayout.adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type alignment typerig.gui.QtGui.QVBoxLayout.alignment = unbound qt slot alignment of QVBoxLayout type alignmentRect typerig.gui.QtGui.QVBoxLayout.alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type blockSignals typerig.gui.QtGui.QVBoxLayout.blockSignals = unbound qt slot blockSignals of QVBoxLayout type childEvent typerig.gui.QtGui.QVBoxLayout.childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type children typerig.gui.QtGui.QVBoxLayout.children = unbound qt slot children of QVBoxLayout type className typerig.gui.QtGui.QVBoxLayout.className = className (...) Return the classname of the object closestAcceptableSize typerig.gui.QtGui.QVBoxLayout.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type connect typerig.gui.QtGui.QVBoxLayout.connect = unbound qt slot connect of QVBoxLayout type contentsMargins typerig.gui.QtGui.QVBoxLayout.contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type contentsRect typerig.gui.QtGui.QVBoxLayout.contentsRect = unbound qt slot contentsRect of QVBoxLayout type controlTypes typerig.gui.QtGui.QVBoxLayout.controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type count typerig.gui.QtGui.QVBoxLayout.count = unbound qt slot py_q_count of QVBoxLayout type customEvent typerig.gui.QtGui.QVBoxLayout.customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type delete typerig.gui.QtGui.QVBoxLayout.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.QtGui.QVBoxLayout.deleteLater = unbound qt slot deleteLater of QVBoxLayout type direction typerig.gui.QtGui.QVBoxLayout.direction = unbound qt slot direction of QVBoxLayout type disconnect typerig.gui.QtGui.QVBoxLayout.disconnect = unbound qt slot disconnect of QVBoxLayout type dumpObjectInfo typerig.gui.QtGui.QVBoxLayout.dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type dumpObjectTree typerig.gui.QtGui.QVBoxLayout.dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type dynamicPropertyNames typerig.gui.QtGui.QVBoxLayout.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type event typerig.gui.QtGui.QVBoxLayout.event = unbound qt slot py_q_event of QVBoxLayout type eventFilter typerig.gui.QtGui.QVBoxLayout.eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type expandingDirections typerig.gui.QtGui.QVBoxLayout.expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type findChild typerig.gui.QtGui.QVBoxLayout.findChild = unbound qt slot findChild of QVBoxLayout type findChildren typerig.gui.QtGui.QVBoxLayout.findChildren = unbound qt slot findChildren of QVBoxLayout type geometry typerig.gui.QtGui.QVBoxLayout.geometry = unbound qt slot py_q_geometry of QVBoxLayout type hasHeightForWidth typerig.gui.QtGui.QVBoxLayout.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type heightForWidth typerig.gui.QtGui.QVBoxLayout.heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type help typerig.gui.QtGui.QVBoxLayout.help = help (...) Shows the help of available methods for this class indexOf typerig.gui.QtGui.QVBoxLayout.indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type inherits typerig.gui.QtGui.QVBoxLayout.inherits = inherits (...) Returns if the class inherits or is of given type name insertItem typerig.gui.QtGui.QVBoxLayout.insertItem = unbound qt slot insertItem of QVBoxLayout type insertLayout typerig.gui.QtGui.QVBoxLayout.insertLayout = unbound qt slot insertLayout of QVBoxLayout type insertSpacerItem typerig.gui.QtGui.QVBoxLayout.insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type insertSpacing typerig.gui.QtGui.QVBoxLayout.insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type insertStretch typerig.gui.QtGui.QVBoxLayout.insertStretch = unbound qt slot insertStretch of QVBoxLayout type insertWidget typerig.gui.QtGui.QVBoxLayout.insertWidget = unbound qt slot insertWidget of QVBoxLayout type installEventFilter typerig.gui.QtGui.QVBoxLayout.installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type invalidate typerig.gui.QtGui.QVBoxLayout.invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type isEmpty typerig.gui.QtGui.QVBoxLayout.isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type isEnabled typerig.gui.QtGui.QVBoxLayout.isEnabled = unbound qt slot isEnabled of QVBoxLayout type isSignalConnected typerig.gui.QtGui.QVBoxLayout.isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type isWidgetType typerig.gui.QtGui.QVBoxLayout.isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type isWindowType typerig.gui.QtGui.QVBoxLayout.isWindowType = unbound qt slot isWindowType of QVBoxLayout type itemAt typerig.gui.QtGui.QVBoxLayout.itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type killTimer typerig.gui.QtGui.QVBoxLayout.killTimer = unbound qt slot killTimer of QVBoxLayout type layout typerig.gui.QtGui.QVBoxLayout.layout = unbound qt slot py_q_layout of QVBoxLayout type maximumSize typerig.gui.QtGui.QVBoxLayout.maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type menuBar typerig.gui.QtGui.QVBoxLayout.menuBar = unbound qt slot menuBar of QVBoxLayout type metaObject typerig.gui.QtGui.QVBoxLayout.metaObject = unbound qt slot metaObject of QVBoxLayout type minimumHeightForWidth typerig.gui.QtGui.QVBoxLayout.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type minimumSize typerig.gui.QtGui.QVBoxLayout.minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type moveToThread typerig.gui.QtGui.QVBoxLayout.moveToThread = unbound qt slot moveToThread of QVBoxLayout type parent typerig.gui.QtGui.QVBoxLayout.parent = unbound qt slot parent of QVBoxLayout type parentWidget typerig.gui.QtGui.QVBoxLayout.parentWidget = unbound qt slot parentWidget of QVBoxLayout type property typerig.gui.QtGui.QVBoxLayout.property = unbound qt slot property of QVBoxLayout type removeEventFilter typerig.gui.QtGui.QVBoxLayout.removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type removeItem typerig.gui.QtGui.QVBoxLayout.removeItem = unbound qt slot removeItem of QVBoxLayout type removeWidget typerig.gui.QtGui.QVBoxLayout.removeWidget = unbound qt slot removeWidget of QVBoxLayout type replaceWidget typerig.gui.QtGui.QVBoxLayout.replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type sender typerig.gui.QtGui.QVBoxLayout.sender = unbound qt slot sender of QVBoxLayout type senderSignalIndex typerig.gui.QtGui.QVBoxLayout.senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type setAlignment typerig.gui.QtGui.QVBoxLayout.setAlignment = unbound qt slot setAlignment of QVBoxLayout type setContentsMargins typerig.gui.QtGui.QVBoxLayout.setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type setDirection typerig.gui.QtGui.QVBoxLayout.setDirection = unbound qt slot setDirection of QVBoxLayout type setEnabled typerig.gui.QtGui.QVBoxLayout.setEnabled = unbound qt slot setEnabled of QVBoxLayout type setGeometry typerig.gui.QtGui.QVBoxLayout.setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type setMargin typerig.gui.QtGui.QVBoxLayout.setMargin = unbound qt slot setMargin of QVBoxLayout type setMenuBar typerig.gui.QtGui.QVBoxLayout.setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type setObjectName typerig.gui.QtGui.QVBoxLayout.setObjectName = unbound qt slot setObjectName of QVBoxLayout type setParent typerig.gui.QtGui.QVBoxLayout.setParent = unbound qt slot setParent of QVBoxLayout type setProperty typerig.gui.QtGui.QVBoxLayout.setProperty = unbound qt slot setProperty of QVBoxLayout type setSizeConstraint typerig.gui.QtGui.QVBoxLayout.setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type setSpacing typerig.gui.QtGui.QVBoxLayout.setSpacing = unbound qt slot setSpacing of QVBoxLayout type setStretch typerig.gui.QtGui.QVBoxLayout.setStretch = unbound qt slot setStretch of QVBoxLayout type setStretchFactor typerig.gui.QtGui.QVBoxLayout.setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type signalsBlocked typerig.gui.QtGui.QVBoxLayout.signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type sizeHint typerig.gui.QtGui.QVBoxLayout.sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type spacerItem typerig.gui.QtGui.QVBoxLayout.spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type startTimer typerig.gui.QtGui.QVBoxLayout.startTimer = unbound qt slot startTimer of QVBoxLayout type stretch typerig.gui.QtGui.QVBoxLayout.stretch = unbound qt slot stretch of QVBoxLayout type takeAt typerig.gui.QtGui.QVBoxLayout.takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type thread typerig.gui.QtGui.QVBoxLayout.thread = unbound qt slot thread of QVBoxLayout type timerEvent typerig.gui.QtGui.QVBoxLayout.timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type totalHeightForWidth typerig.gui.QtGui.QVBoxLayout.totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type totalMaximumSize typerig.gui.QtGui.QVBoxLayout.totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type totalMinimumSize typerig.gui.QtGui.QVBoxLayout.totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type totalSizeHint typerig.gui.QtGui.QVBoxLayout.totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type tr typerig.gui.QtGui.QVBoxLayout.tr = unbound qt slot tr of QVBoxLayout type update typerig.gui.QtGui.QVBoxLayout.update = unbound qt slot update of QVBoxLayout type widget typerig.gui.QtGui.QVBoxLayout.widget = unbound qt slot py_q_widget of QVBoxLayout type widgetEvent typerig.gui.QtGui.QVBoxLayout.widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type","title":"gui.QtGui"},{"location":"typerig.gui.QtGui.html#typerigguiqtgui","text":"","title":"typerig.gui.QtGui"},{"location":"typerig.gui.QtGui.html#qdialog","text":"","title":"QDialog"},{"location":"typerig.gui.QtGui.html#accept","text":"typerig.gui.QtGui.QDialog.accept = unbound qt slot py_q_accept of QDialog type","title":"accept"},{"location":"typerig.gui.QtGui.html#actionevent","text":"typerig.gui.QtGui.QDialog.actionEvent = unbound qt slot py_q_actionEvent of QDialog type","title":"actionEvent"},{"location":"typerig.gui.QtGui.html#actions","text":"typerig.gui.QtGui.QDialog.actions = unbound qt slot actions of QDialog type","title":"actions"},{"location":"typerig.gui.QtGui.html#activatewindow","text":"typerig.gui.QtGui.QDialog.activateWindow = unbound qt slot activateWindow of QDialog type","title":"activateWindow"},{"location":"typerig.gui.QtGui.html#addaction","text":"typerig.gui.QtGui.QDialog.addAction = unbound qt slot addAction of QDialog type","title":"addAction"},{"location":"typerig.gui.QtGui.html#addactions","text":"typerig.gui.QtGui.QDialog.addActions = unbound qt slot addActions of QDialog type","title":"addActions"},{"location":"typerig.gui.QtGui.html#adjustposition","text":"typerig.gui.QtGui.QDialog.adjustPosition = unbound qt slot adjustPosition of QDialog type","title":"adjustPosition"},{"location":"typerig.gui.QtGui.html#adjustsize","text":"typerig.gui.QtGui.QDialog.adjustSize = unbound qt slot adjustSize of QDialog type","title":"adjustSize"},{"location":"typerig.gui.QtGui.html#backgroundrole","text":"typerig.gui.QtGui.QDialog.backgroundRole = unbound qt slot backgroundRole of QDialog type","title":"backgroundRole"},{"location":"typerig.gui.QtGui.html#backingstore","text":"typerig.gui.QtGui.QDialog.backingStore = unbound qt slot backingStore of QDialog type","title":"backingStore"},{"location":"typerig.gui.QtGui.html#blocksignals","text":"typerig.gui.QtGui.QDialog.blockSignals = unbound qt slot blockSignals of QDialog type","title":"blockSignals"},{"location":"typerig.gui.QtGui.html#changeevent","text":"typerig.gui.QtGui.QDialog.changeEvent = unbound qt slot py_q_changeEvent of QDialog type","title":"changeEvent"},{"location":"typerig.gui.QtGui.html#childat","text":"typerig.gui.QtGui.QDialog.childAt = unbound qt slot childAt of QDialog type","title":"childAt"},{"location":"typerig.gui.QtGui.html#childevent","text":"typerig.gui.QtGui.QDialog.childEvent = unbound qt slot py_q_childEvent of QDialog type","title":"childEvent"},{"location":"typerig.gui.QtGui.html#children","text":"typerig.gui.QtGui.QDialog.children = unbound qt slot children of QDialog type","title":"children"},{"location":"typerig.gui.QtGui.html#classname","text":"typerig.gui.QtGui.QDialog.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.QtGui.html#clearfocus","text":"typerig.gui.QtGui.QDialog.clearFocus = unbound qt slot clearFocus of QDialog type","title":"clearFocus"},{"location":"typerig.gui.QtGui.html#clearmask","text":"typerig.gui.QtGui.QDialog.clearMask = unbound qt slot clearMask of QDialog type","title":"clearMask"},{"location":"typerig.gui.QtGui.html#close","text":"typerig.gui.QtGui.QDialog.close = unbound qt slot close of QDialog type","title":"close"},{"location":"typerig.gui.QtGui.html#closeevent","text":"typerig.gui.QtGui.QDialog.closeEvent = unbound qt slot py_q_closeEvent of QDialog type","title":"closeEvent"},{"location":"typerig.gui.QtGui.html#colorcount","text":"typerig.gui.QtGui.QDialog.colorCount = unbound qt slot colorCount of QDialog type","title":"colorCount"},{"location":"typerig.gui.QtGui.html#connect","text":"typerig.gui.QtGui.QDialog.connect = unbound qt slot connect of QDialog type","title":"connect"},{"location":"typerig.gui.QtGui.html#contentsmargins","text":"typerig.gui.QtGui.QDialog.contentsMargins = unbound qt slot contentsMargins of QDialog type","title":"contentsMargins"},{"location":"typerig.gui.QtGui.html#contentsrect","text":"typerig.gui.QtGui.QDialog.contentsRect = unbound qt slot contentsRect of QDialog type","title":"contentsRect"},{"location":"typerig.gui.QtGui.html#contextmenuevent","text":"typerig.gui.QtGui.QDialog.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type","title":"contextMenuEvent"},{"location":"typerig.gui.QtGui.html#createwindowcontainer","text":"typerig.gui.QtGui.QDialog.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type","title":"createWindowContainer"},{"location":"typerig.gui.QtGui.html#createwinid","text":"typerig.gui.QtGui.QDialog.createWinId = unbound qt slot createWinId of QDialog type","title":"createWinId"},{"location":"typerig.gui.QtGui.html#customevent","text":"typerig.gui.QtGui.QDialog.customEvent = unbound qt slot py_q_customEvent of QDialog type","title":"customEvent"},{"location":"typerig.gui.QtGui.html#delete","text":"typerig.gui.QtGui.QDialog.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.QtGui.html#deletelater","text":"typerig.gui.QtGui.QDialog.deleteLater = unbound qt slot deleteLater of QDialog type","title":"deleteLater"},{"location":"typerig.gui.QtGui.html#depth","text":"typerig.gui.QtGui.QDialog.depth = unbound qt slot depth of QDialog type","title":"depth"},{"location":"typerig.gui.QtGui.html#destroy","text":"typerig.gui.QtGui.QDialog.destroy = unbound qt slot destroy of QDialog type","title":"destroy"},{"location":"typerig.gui.QtGui.html#devicepixelratio","text":"typerig.gui.QtGui.QDialog.devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type","title":"devicePixelRatio"},{"location":"typerig.gui.QtGui.html#devicepixelratiof","text":"typerig.gui.QtGui.QDialog.devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type","title":"devicePixelRatioF"},{"location":"typerig.gui.QtGui.html#devicepixelratiofscale","text":"typerig.gui.QtGui.QDialog.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type","title":"devicePixelRatioFScale"},{"location":"typerig.gui.QtGui.html#devtype","text":"typerig.gui.QtGui.QDialog.devType = unbound qt slot py_q_devType of QDialog type","title":"devType"},{"location":"typerig.gui.QtGui.html#disconnect","text":"typerig.gui.QtGui.QDialog.disconnect = unbound qt slot disconnect of QDialog type","title":"disconnect"},{"location":"typerig.gui.QtGui.html#done","text":"typerig.gui.QtGui.QDialog.done = unbound qt slot py_q_done of QDialog type","title":"done"},{"location":"typerig.gui.QtGui.html#dragenterevent","text":"typerig.gui.QtGui.QDialog.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type","title":"dragEnterEvent"},{"location":"typerig.gui.QtGui.html#dragleaveevent","text":"typerig.gui.QtGui.QDialog.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type","title":"dragLeaveEvent"},{"location":"typerig.gui.QtGui.html#dragmoveevent","text":"typerig.gui.QtGui.QDialog.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type","title":"dragMoveEvent"},{"location":"typerig.gui.QtGui.html#dropevent","text":"typerig.gui.QtGui.QDialog.dropEvent = unbound qt slot py_q_dropEvent of QDialog type","title":"dropEvent"},{"location":"typerig.gui.QtGui.html#dumpobjectinfo","text":"typerig.gui.QtGui.QDialog.dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type","title":"dumpObjectInfo"},{"location":"typerig.gui.QtGui.html#dumpobjecttree","text":"typerig.gui.QtGui.QDialog.dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type","title":"dumpObjectTree"},{"location":"typerig.gui.QtGui.html#dynamicpropertynames","text":"typerig.gui.QtGui.QDialog.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type","title":"dynamicPropertyNames"},{"location":"typerig.gui.QtGui.html#effectivewinid","text":"typerig.gui.QtGui.QDialog.effectiveWinId = unbound qt slot effectiveWinId of QDialog type","title":"effectiveWinId"},{"location":"typerig.gui.QtGui.html#ensurepolished","text":"typerig.gui.QtGui.QDialog.ensurePolished = unbound qt slot ensurePolished of QDialog type","title":"ensurePolished"},{"location":"typerig.gui.QtGui.html#enterevent","text":"typerig.gui.QtGui.QDialog.enterEvent = unbound qt slot py_q_enterEvent of QDialog type","title":"enterEvent"},{"location":"typerig.gui.QtGui.html#event","text":"typerig.gui.QtGui.QDialog.event = unbound qt slot py_q_event of QDialog type","title":"event"},{"location":"typerig.gui.QtGui.html#eventfilter","text":"typerig.gui.QtGui.QDialog.eventFilter = unbound qt slot py_q_eventFilter of QDialog type","title":"eventFilter"},{"location":"typerig.gui.QtGui.html#exec","text":"typerig.gui.QtGui.QDialog.exec = unbound qt slot py_q_exec of QDialog type","title":"exec"},{"location":"typerig.gui.QtGui.html#findchild","text":"typerig.gui.QtGui.QDialog.findChild = unbound qt slot findChild of QDialog type","title":"findChild"},{"location":"typerig.gui.QtGui.html#findchildren","text":"typerig.gui.QtGui.QDialog.findChildren = unbound qt slot findChildren of QDialog type","title":"findChildren"},{"location":"typerig.gui.QtGui.html#focusinevent","text":"typerig.gui.QtGui.QDialog.focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type","title":"focusInEvent"},{"location":"typerig.gui.QtGui.html#focusnextchild","text":"typerig.gui.QtGui.QDialog.focusNextChild = unbound qt slot focusNextChild of QDialog type","title":"focusNextChild"},{"location":"typerig.gui.QtGui.html#focusnextprevchild","text":"typerig.gui.QtGui.QDialog.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type","title":"focusNextPrevChild"},{"location":"typerig.gui.QtGui.html#focusoutevent","text":"typerig.gui.QtGui.QDialog.focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type","title":"focusOutEvent"},{"location":"typerig.gui.QtGui.html#focuspreviouschild","text":"typerig.gui.QtGui.QDialog.focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type","title":"focusPreviousChild"},{"location":"typerig.gui.QtGui.html#focusproxy","text":"typerig.gui.QtGui.QDialog.focusProxy = unbound qt slot focusProxy of QDialog type","title":"focusProxy"},{"location":"typerig.gui.QtGui.html#focuswidget","text":"typerig.gui.QtGui.QDialog.focusWidget = unbound qt slot focusWidget of QDialog type","title":"focusWidget"},{"location":"typerig.gui.QtGui.html#foregroundrole","text":"typerig.gui.QtGui.QDialog.foregroundRole = unbound qt slot foregroundRole of QDialog type","title":"foregroundRole"},{"location":"typerig.gui.QtGui.html#grab","text":"typerig.gui.QtGui.QDialog.grab = unbound qt slot grab of QDialog type","title":"grab"},{"location":"typerig.gui.QtGui.html#grabgesture","text":"typerig.gui.QtGui.QDialog.grabGesture = unbound qt slot grabGesture of QDialog type","title":"grabGesture"},{"location":"typerig.gui.QtGui.html#grabkeyboard","text":"typerig.gui.QtGui.QDialog.grabKeyboard = unbound qt slot grabKeyboard of QDialog type","title":"grabKeyboard"},{"location":"typerig.gui.QtGui.html#grabmouse","text":"typerig.gui.QtGui.QDialog.grabMouse = unbound qt slot grabMouse of QDialog type","title":"grabMouse"},{"location":"typerig.gui.QtGui.html#grabshortcut","text":"typerig.gui.QtGui.QDialog.grabShortcut = unbound qt slot grabShortcut of QDialog type","title":"grabShortcut"},{"location":"typerig.gui.QtGui.html#graphicseffect","text":"typerig.gui.QtGui.QDialog.graphicsEffect = unbound qt slot graphicsEffect of QDialog type","title":"graphicsEffect"},{"location":"typerig.gui.QtGui.html#graphicsproxywidget","text":"typerig.gui.QtGui.QDialog.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type","title":"graphicsProxyWidget"},{"location":"typerig.gui.QtGui.html#hasfocus","text":"typerig.gui.QtGui.QDialog.hasFocus = unbound qt slot hasFocus of QDialog type","title":"hasFocus"},{"location":"typerig.gui.QtGui.html#hasheightforwidth","text":"typerig.gui.QtGui.QDialog.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type","title":"hasHeightForWidth"},{"location":"typerig.gui.QtGui.html#hasmousetracking","text":"typerig.gui.QtGui.QDialog.hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type","title":"hasMouseTracking"},{"location":"typerig.gui.QtGui.html#heightforwidth","text":"typerig.gui.QtGui.QDialog.heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type","title":"heightForWidth"},{"location":"typerig.gui.QtGui.html#heightmm","text":"typerig.gui.QtGui.QDialog.heightMM = unbound qt slot heightMM of QDialog type","title":"heightMM"},{"location":"typerig.gui.QtGui.html#help","text":"typerig.gui.QtGui.QDialog.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.QtGui.html#hide","text":"typerig.gui.QtGui.QDialog.hide = unbound qt slot hide of QDialog type","title":"hide"},{"location":"typerig.gui.QtGui.html#hideevent","text":"typerig.gui.QtGui.QDialog.hideEvent = unbound qt slot py_q_hideEvent of QDialog type","title":"hideEvent"},{"location":"typerig.gui.QtGui.html#inherits","text":"typerig.gui.QtGui.QDialog.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.QtGui.html#initpainter","text":"typerig.gui.QtGui.QDialog.initPainter = unbound qt slot py_q_initPainter of QDialog type","title":"initPainter"},{"location":"typerig.gui.QtGui.html#inputmethodevent","text":"typerig.gui.QtGui.QDialog.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type","title":"inputMethodEvent"},{"location":"typerig.gui.QtGui.html#inputmethodquery","text":"typerig.gui.QtGui.QDialog.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type","title":"inputMethodQuery"},{"location":"typerig.gui.QtGui.html#insertaction","text":"typerig.gui.QtGui.QDialog.insertAction = unbound qt slot insertAction of QDialog type","title":"insertAction"},{"location":"typerig.gui.QtGui.html#insertactions","text":"typerig.gui.QtGui.QDialog.insertActions = unbound qt slot insertActions of QDialog type","title":"insertActions"},{"location":"typerig.gui.QtGui.html#installeventfilter","text":"typerig.gui.QtGui.QDialog.installEventFilter = unbound qt slot installEventFilter of QDialog type","title":"installEventFilter"},{"location":"typerig.gui.QtGui.html#isancestorof","text":"typerig.gui.QtGui.QDialog.isAncestorOf = unbound qt slot isAncestorOf of QDialog type","title":"isAncestorOf"},{"location":"typerig.gui.QtGui.html#isenabled","text":"typerig.gui.QtGui.QDialog.isEnabled = unbound qt slot isEnabled of QDialog type","title":"isEnabled"},{"location":"typerig.gui.QtGui.html#isenabledto","text":"typerig.gui.QtGui.QDialog.isEnabledTo = unbound qt slot isEnabledTo of QDialog type","title":"isEnabledTo"},{"location":"typerig.gui.QtGui.html#isfullscreen","text":"typerig.gui.QtGui.QDialog.isFullScreen = unbound qt slot isFullScreen of QDialog type","title":"isFullScreen"},{"location":"typerig.gui.QtGui.html#ishidden","text":"typerig.gui.QtGui.QDialog.isHidden = unbound qt slot isHidden of QDialog type","title":"isHidden"},{"location":"typerig.gui.QtGui.html#islefttoright","text":"typerig.gui.QtGui.QDialog.isLeftToRight = unbound qt slot isLeftToRight of QDialog type","title":"isLeftToRight"},{"location":"typerig.gui.QtGui.html#ismaximized","text":"typerig.gui.QtGui.QDialog.isMaximized = unbound qt slot isMaximized of QDialog type","title":"isMaximized"},{"location":"typerig.gui.QtGui.html#isminimized","text":"typerig.gui.QtGui.QDialog.isMinimized = unbound qt slot isMinimized of QDialog type","title":"isMinimized"},{"location":"typerig.gui.QtGui.html#ismodal","text":"typerig.gui.QtGui.QDialog.isModal = unbound qt slot isModal of QDialog type","title":"isModal"},{"location":"typerig.gui.QtGui.html#isrighttoleft","text":"typerig.gui.QtGui.QDialog.isRightToLeft = unbound qt slot isRightToLeft of QDialog type","title":"isRightToLeft"},{"location":"typerig.gui.QtGui.html#issignalconnected","text":"typerig.gui.QtGui.QDialog.isSignalConnected = unbound qt slot isSignalConnected of QDialog type","title":"isSignalConnected"},{"location":"typerig.gui.QtGui.html#issizegripenabled","text":"typerig.gui.QtGui.QDialog.isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type","title":"isSizeGripEnabled"},{"location":"typerig.gui.QtGui.html#isvisible","text":"typerig.gui.QtGui.QDialog.isVisible = unbound qt slot isVisible of QDialog type","title":"isVisible"},{"location":"typerig.gui.QtGui.html#isvisibleto","text":"typerig.gui.QtGui.QDialog.isVisibleTo = unbound qt slot isVisibleTo of QDialog type","title":"isVisibleTo"},{"location":"typerig.gui.QtGui.html#iswidgettype","text":"typerig.gui.QtGui.QDialog.isWidgetType = unbound qt slot isWidgetType of QDialog type","title":"isWidgetType"},{"location":"typerig.gui.QtGui.html#iswindow","text":"typerig.gui.QtGui.QDialog.isWindow = unbound qt slot isWindow of QDialog type","title":"isWindow"},{"location":"typerig.gui.QtGui.html#iswindowmodified","text":"typerig.gui.QtGui.QDialog.isWindowModified = unbound qt slot isWindowModified of QDialog type","title":"isWindowModified"},{"location":"typerig.gui.QtGui.html#iswindowtype","text":"typerig.gui.QtGui.QDialog.isWindowType = unbound qt slot isWindowType of QDialog type","title":"isWindowType"},{"location":"typerig.gui.QtGui.html#keyboardgrabber","text":"typerig.gui.QtGui.QDialog.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type","title":"keyboardGrabber"},{"location":"typerig.gui.QtGui.html#keypressevent","text":"typerig.gui.QtGui.QDialog.keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type","title":"keyPressEvent"},{"location":"typerig.gui.QtGui.html#keyreleaseevent","text":"typerig.gui.QtGui.QDialog.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type","title":"keyReleaseEvent"},{"location":"typerig.gui.QtGui.html#killtimer","text":"typerig.gui.QtGui.QDialog.killTimer = unbound qt slot killTimer of QDialog type","title":"killTimer"},{"location":"typerig.gui.QtGui.html#layout","text":"typerig.gui.QtGui.QDialog.layout = unbound qt slot layout of QDialog type","title":"layout"},{"location":"typerig.gui.QtGui.html#leaveevent","text":"typerig.gui.QtGui.QDialog.leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type","title":"leaveEvent"},{"location":"typerig.gui.QtGui.html#logicaldpix","text":"typerig.gui.QtGui.QDialog.logicalDpiX = unbound qt slot logicalDpiX of QDialog type","title":"logicalDpiX"},{"location":"typerig.gui.QtGui.html#logicaldpiy","text":"typerig.gui.QtGui.QDialog.logicalDpiY = unbound qt slot logicalDpiY of QDialog type","title":"logicalDpiY"},{"location":"typerig.gui.QtGui.html#lower","text":"typerig.gui.QtGui.QDialog.lower = unbound qt slot lower of QDialog type","title":"lower"},{"location":"typerig.gui.QtGui.html#mapfrom","text":"typerig.gui.QtGui.QDialog.mapFrom = unbound qt slot mapFrom of QDialog type","title":"mapFrom"},{"location":"typerig.gui.QtGui.html#mapfromglobal","text":"typerig.gui.QtGui.QDialog.mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type","title":"mapFromGlobal"},{"location":"typerig.gui.QtGui.html#mapfromparent","text":"typerig.gui.QtGui.QDialog.mapFromParent = unbound qt slot mapFromParent of QDialog type","title":"mapFromParent"},{"location":"typerig.gui.QtGui.html#mapto","text":"typerig.gui.QtGui.QDialog.mapTo = unbound qt slot mapTo of QDialog type","title":"mapTo"},{"location":"typerig.gui.QtGui.html#maptoglobal","text":"typerig.gui.QtGui.QDialog.mapToGlobal = unbound qt slot mapToGlobal of QDialog type","title":"mapToGlobal"},{"location":"typerig.gui.QtGui.html#maptoparent","text":"typerig.gui.QtGui.QDialog.mapToParent = unbound qt slot mapToParent of QDialog type","title":"mapToParent"},{"location":"typerig.gui.QtGui.html#mask","text":"typerig.gui.QtGui.QDialog.mask = unbound qt slot mask of QDialog type","title":"mask"},{"location":"typerig.gui.QtGui.html#metaobject","text":"typerig.gui.QtGui.QDialog.metaObject = unbound qt slot metaObject of QDialog type","title":"metaObject"},{"location":"typerig.gui.QtGui.html#metric","text":"typerig.gui.QtGui.QDialog.metric = unbound qt slot py_q_metric of QDialog type","title":"metric"},{"location":"typerig.gui.QtGui.html#mousedoubleclickevent","text":"typerig.gui.QtGui.QDialog.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type","title":"mouseDoubleClickEvent"},{"location":"typerig.gui.QtGui.html#mousegrabber","text":"typerig.gui.QtGui.QDialog.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type","title":"mouseGrabber"},{"location":"typerig.gui.QtGui.html#mousemoveevent","text":"typerig.gui.QtGui.QDialog.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type","title":"mouseMoveEvent"},{"location":"typerig.gui.QtGui.html#mousepressevent","text":"typerig.gui.QtGui.QDialog.mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type","title":"mousePressEvent"},{"location":"typerig.gui.QtGui.html#mousereleaseevent","text":"typerig.gui.QtGui.QDialog.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type","title":"mouseReleaseEvent"},{"location":"typerig.gui.QtGui.html#move","text":"typerig.gui.QtGui.QDialog.move = unbound qt slot move of QDialog type","title":"move"},{"location":"typerig.gui.QtGui.html#moveevent","text":"typerig.gui.QtGui.QDialog.moveEvent = unbound qt slot py_q_moveEvent of QDialog type","title":"moveEvent"},{"location":"typerig.gui.QtGui.html#movetothread","text":"typerig.gui.QtGui.QDialog.moveToThread = unbound qt slot moveToThread of QDialog type","title":"moveToThread"},{"location":"typerig.gui.QtGui.html#nativeevent","text":"typerig.gui.QtGui.QDialog.nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type","title":"nativeEvent"},{"location":"typerig.gui.QtGui.html#nativeparentwidget","text":"typerig.gui.QtGui.QDialog.nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type","title":"nativeParentWidget"},{"location":"typerig.gui.QtGui.html#nextinfocuschain","text":"typerig.gui.QtGui.QDialog.nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type","title":"nextInFocusChain"},{"location":"typerig.gui.QtGui.html#open","text":"typerig.gui.QtGui.QDialog.open = unbound qt slot py_q_open of QDialog type","title":"open"},{"location":"typerig.gui.QtGui.html#overridewindowflags","text":"typerig.gui.QtGui.QDialog.overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type","title":"overrideWindowFlags"},{"location":"typerig.gui.QtGui.html#overridewindowstate","text":"typerig.gui.QtGui.QDialog.overrideWindowState = unbound qt slot overrideWindowState of QDialog type","title":"overrideWindowState"},{"location":"typerig.gui.QtGui.html#paintengine","text":"typerig.gui.QtGui.QDialog.paintEngine = unbound qt slot py_q_paintEngine of QDialog type","title":"paintEngine"},{"location":"typerig.gui.QtGui.html#paintevent","text":"typerig.gui.QtGui.QDialog.paintEvent = unbound qt slot py_q_paintEvent of QDialog type","title":"paintEvent"},{"location":"typerig.gui.QtGui.html#paintingactive","text":"typerig.gui.QtGui.QDialog.paintingActive = unbound qt slot paintingActive of QDialog type","title":"paintingActive"},{"location":"typerig.gui.QtGui.html#parent","text":"typerig.gui.QtGui.QDialog.parent = unbound qt slot parent of QDialog type","title":"parent"},{"location":"typerig.gui.QtGui.html#parentwidget","text":"typerig.gui.QtGui.QDialog.parentWidget = unbound qt slot parentWidget of QDialog type","title":"parentWidget"},{"location":"typerig.gui.QtGui.html#physicaldpix","text":"typerig.gui.QtGui.QDialog.physicalDpiX = unbound qt slot physicalDpiX of QDialog type","title":"physicalDpiX"},{"location":"typerig.gui.QtGui.html#physicaldpiy","text":"typerig.gui.QtGui.QDialog.physicalDpiY = unbound qt slot physicalDpiY of QDialog type","title":"physicalDpiY"},{"location":"typerig.gui.QtGui.html#previousinfocuschain","text":"typerig.gui.QtGui.QDialog.previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type","title":"previousInFocusChain"},{"location":"typerig.gui.QtGui.html#property","text":"typerig.gui.QtGui.QDialog.property = unbound qt slot property of QDialog type","title":"property"},{"location":"typerig.gui.QtGui.html#raise","text":"typerig.gui.QtGui.QDialog.raise = unbound qt slot raise of QDialog type","title":"raise"},{"location":"typerig.gui.QtGui.html#redirected","text":"typerig.gui.QtGui.QDialog.redirected = unbound qt slot py_q_redirected of QDialog type","title":"redirected"},{"location":"typerig.gui.QtGui.html#reject","text":"typerig.gui.QtGui.QDialog.reject = unbound qt slot py_q_reject of QDialog type","title":"reject"},{"location":"typerig.gui.QtGui.html#releasekeyboard","text":"typerig.gui.QtGui.QDialog.releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type","title":"releaseKeyboard"},{"location":"typerig.gui.QtGui.html#releasemouse","text":"typerig.gui.QtGui.QDialog.releaseMouse = unbound qt slot releaseMouse of QDialog type","title":"releaseMouse"},{"location":"typerig.gui.QtGui.html#releaseshortcut","text":"typerig.gui.QtGui.QDialog.releaseShortcut = unbound qt slot releaseShortcut of QDialog type","title":"releaseShortcut"},{"location":"typerig.gui.QtGui.html#removeaction","text":"typerig.gui.QtGui.QDialog.removeAction = unbound qt slot removeAction of QDialog type","title":"removeAction"},{"location":"typerig.gui.QtGui.html#removeeventfilter","text":"typerig.gui.QtGui.QDialog.removeEventFilter = unbound qt slot removeEventFilter of QDialog type","title":"removeEventFilter"},{"location":"typerig.gui.QtGui.html#render","text":"typerig.gui.QtGui.QDialog.render = unbound qt slot render of QDialog type","title":"render"},{"location":"typerig.gui.QtGui.html#repaint","text":"typerig.gui.QtGui.QDialog.repaint = unbound qt slot repaint of QDialog type","title":"repaint"},{"location":"typerig.gui.QtGui.html#resize","text":"typerig.gui.QtGui.QDialog.resize = unbound qt slot resize of QDialog type","title":"resize"},{"location":"typerig.gui.QtGui.html#resizeevent","text":"typerig.gui.QtGui.QDialog.resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type","title":"resizeEvent"},{"location":"typerig.gui.QtGui.html#restoregeometry","text":"typerig.gui.QtGui.QDialog.restoreGeometry = unbound qt slot restoreGeometry of QDialog type","title":"restoreGeometry"},{"location":"typerig.gui.QtGui.html#result","text":"typerig.gui.QtGui.QDialog.result = unbound qt slot result of QDialog type","title":"result"},{"location":"typerig.gui.QtGui.html#savegeometry","text":"typerig.gui.QtGui.QDialog.saveGeometry = unbound qt slot saveGeometry of QDialog type","title":"saveGeometry"},{"location":"typerig.gui.QtGui.html#scroll","text":"typerig.gui.QtGui.QDialog.scroll = unbound qt slot scroll of QDialog type","title":"scroll"},{"location":"typerig.gui.QtGui.html#sender","text":"typerig.gui.QtGui.QDialog.sender = unbound qt slot sender of QDialog type","title":"sender"},{"location":"typerig.gui.QtGui.html#sendersignalindex","text":"typerig.gui.QtGui.QDialog.senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type","title":"senderSignalIndex"},{"location":"typerig.gui.QtGui.html#setacceptdrops","text":"typerig.gui.QtGui.QDialog.setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type","title":"setAcceptDrops"},{"location":"typerig.gui.QtGui.html#setaccessibledescription","text":"typerig.gui.QtGui.QDialog.setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type","title":"setAccessibleDescription"},{"location":"typerig.gui.QtGui.html#setaccessiblename","text":"typerig.gui.QtGui.QDialog.setAccessibleName = unbound qt slot setAccessibleName of QDialog type","title":"setAccessibleName"},{"location":"typerig.gui.QtGui.html#setattribute","text":"typerig.gui.QtGui.QDialog.setAttribute = unbound qt slot setAttribute of QDialog type","title":"setAttribute"},{"location":"typerig.gui.QtGui.html#setautofillbackground","text":"typerig.gui.QtGui.QDialog.setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type","title":"setAutoFillBackground"},{"location":"typerig.gui.QtGui.html#setbackgroundrole","text":"typerig.gui.QtGui.QDialog.setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type","title":"setBackgroundRole"},{"location":"typerig.gui.QtGui.html#setbasesize","text":"typerig.gui.QtGui.QDialog.setBaseSize = unbound qt slot setBaseSize of QDialog type","title":"setBaseSize"},{"location":"typerig.gui.QtGui.html#setcontentsmargins","text":"typerig.gui.QtGui.QDialog.setContentsMargins = unbound qt slot setContentsMargins of QDialog type","title":"setContentsMargins"},{"location":"typerig.gui.QtGui.html#setcontextmenupolicy","text":"typerig.gui.QtGui.QDialog.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type","title":"setContextMenuPolicy"},{"location":"typerig.gui.QtGui.html#setcursor","text":"typerig.gui.QtGui.QDialog.setCursor = unbound qt slot setCursor of QDialog type","title":"setCursor"},{"location":"typerig.gui.QtGui.html#setdisabled","text":"typerig.gui.QtGui.QDialog.setDisabled = unbound qt slot setDisabled of QDialog type","title":"setDisabled"},{"location":"typerig.gui.QtGui.html#setenabled","text":"typerig.gui.QtGui.QDialog.setEnabled = unbound qt slot setEnabled of QDialog type","title":"setEnabled"},{"location":"typerig.gui.QtGui.html#setfixedheight","text":"typerig.gui.QtGui.QDialog.setFixedHeight = unbound qt slot setFixedHeight of QDialog type","title":"setFixedHeight"},{"location":"typerig.gui.QtGui.html#setfixedsize","text":"typerig.gui.QtGui.QDialog.setFixedSize = unbound qt slot setFixedSize of QDialog type","title":"setFixedSize"},{"location":"typerig.gui.QtGui.html#setfixedwidth","text":"typerig.gui.QtGui.QDialog.setFixedWidth = unbound qt slot setFixedWidth of QDialog type","title":"setFixedWidth"},{"location":"typerig.gui.QtGui.html#setfocus","text":"typerig.gui.QtGui.QDialog.setFocus = unbound qt slot setFocus of QDialog type","title":"setFocus"},{"location":"typerig.gui.QtGui.html#setfocuspolicy","text":"typerig.gui.QtGui.QDialog.setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type","title":"setFocusPolicy"},{"location":"typerig.gui.QtGui.html#setfocusproxy","text":"typerig.gui.QtGui.QDialog.setFocusProxy = unbound qt slot setFocusProxy of QDialog type","title":"setFocusProxy"},{"location":"typerig.gui.QtGui.html#setfont","text":"typerig.gui.QtGui.QDialog.setFont = unbound qt slot setFont of QDialog type","title":"setFont"},{"location":"typerig.gui.QtGui.html#setforegroundrole","text":"typerig.gui.QtGui.QDialog.setForegroundRole = unbound qt slot setForegroundRole of QDialog type","title":"setForegroundRole"},{"location":"typerig.gui.QtGui.html#setgeometry","text":"typerig.gui.QtGui.QDialog.setGeometry = unbound qt slot setGeometry of QDialog type","title":"setGeometry"},{"location":"typerig.gui.QtGui.html#setgraphicseffect","text":"typerig.gui.QtGui.QDialog.setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type","title":"setGraphicsEffect"},{"location":"typerig.gui.QtGui.html#sethidden","text":"typerig.gui.QtGui.QDialog.setHidden = unbound qt slot setHidden of QDialog type","title":"setHidden"},{"location":"typerig.gui.QtGui.html#setinputmethodhints","text":"typerig.gui.QtGui.QDialog.setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type","title":"setInputMethodHints"},{"location":"typerig.gui.QtGui.html#setlayout","text":"typerig.gui.QtGui.QDialog.setLayout = unbound qt slot setLayout of QDialog type","title":"setLayout"},{"location":"typerig.gui.QtGui.html#setlayoutdirection","text":"typerig.gui.QtGui.QDialog.setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type","title":"setLayoutDirection"},{"location":"typerig.gui.QtGui.html#setlocale","text":"typerig.gui.QtGui.QDialog.setLocale = unbound qt slot setLocale of QDialog type","title":"setLocale"},{"location":"typerig.gui.QtGui.html#setmask","text":"typerig.gui.QtGui.QDialog.setMask = unbound qt slot setMask of QDialog type","title":"setMask"},{"location":"typerig.gui.QtGui.html#setmaximumheight","text":"typerig.gui.QtGui.QDialog.setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type","title":"setMaximumHeight"},{"location":"typerig.gui.QtGui.html#setmaximumsize","text":"typerig.gui.QtGui.QDialog.setMaximumSize = unbound qt slot setMaximumSize of QDialog type","title":"setMaximumSize"},{"location":"typerig.gui.QtGui.html#setmaximumwidth","text":"typerig.gui.QtGui.QDialog.setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type","title":"setMaximumWidth"},{"location":"typerig.gui.QtGui.html#setminimumheight","text":"typerig.gui.QtGui.QDialog.setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type","title":"setMinimumHeight"},{"location":"typerig.gui.QtGui.html#setminimumsize","text":"typerig.gui.QtGui.QDialog.setMinimumSize = unbound qt slot setMinimumSize of QDialog type","title":"setMinimumSize"},{"location":"typerig.gui.QtGui.html#setminimumwidth","text":"typerig.gui.QtGui.QDialog.setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type","title":"setMinimumWidth"},{"location":"typerig.gui.QtGui.html#setmodal","text":"typerig.gui.QtGui.QDialog.setModal = unbound qt slot setModal of QDialog type","title":"setModal"},{"location":"typerig.gui.QtGui.html#setmousetracking","text":"typerig.gui.QtGui.QDialog.setMouseTracking = unbound qt slot setMouseTracking of QDialog type","title":"setMouseTracking"},{"location":"typerig.gui.QtGui.html#setobjectname","text":"typerig.gui.QtGui.QDialog.setObjectName = unbound qt slot setObjectName of QDialog type","title":"setObjectName"},{"location":"typerig.gui.QtGui.html#setpalette","text":"typerig.gui.QtGui.QDialog.setPalette = unbound qt slot setPalette of QDialog type","title":"setPalette"},{"location":"typerig.gui.QtGui.html#setparent","text":"typerig.gui.QtGui.QDialog.setParent = unbound qt slot setParent of QDialog type","title":"setParent"},{"location":"typerig.gui.QtGui.html#setproperty","text":"typerig.gui.QtGui.QDialog.setProperty = unbound qt slot setProperty of QDialog type","title":"setProperty"},{"location":"typerig.gui.QtGui.html#setresult","text":"typerig.gui.QtGui.QDialog.setResult = unbound qt slot setResult of QDialog type","title":"setResult"},{"location":"typerig.gui.QtGui.html#setshortcutautorepeat","text":"typerig.gui.QtGui.QDialog.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type","title":"setShortcutAutoRepeat"},{"location":"typerig.gui.QtGui.html#setshortcutenabled","text":"typerig.gui.QtGui.QDialog.setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type","title":"setShortcutEnabled"},{"location":"typerig.gui.QtGui.html#setsizegripenabled","text":"typerig.gui.QtGui.QDialog.setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type","title":"setSizeGripEnabled"},{"location":"typerig.gui.QtGui.html#setsizeincrement","text":"typerig.gui.QtGui.QDialog.setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type","title":"setSizeIncrement"},{"location":"typerig.gui.QtGui.html#setsizepolicy","text":"typerig.gui.QtGui.QDialog.setSizePolicy = unbound qt slot setSizePolicy of QDialog type","title":"setSizePolicy"},{"location":"typerig.gui.QtGui.html#setstatustip","text":"typerig.gui.QtGui.QDialog.setStatusTip = unbound qt slot setStatusTip of QDialog type","title":"setStatusTip"},{"location":"typerig.gui.QtGui.html#setstyle","text":"typerig.gui.QtGui.QDialog.setStyle = unbound qt slot setStyle of QDialog type","title":"setStyle"},{"location":"typerig.gui.QtGui.html#setstylesheet","text":"typerig.gui.QtGui.QDialog.setStyleSheet = unbound qt slot setStyleSheet of QDialog type","title":"setStyleSheet"},{"location":"typerig.gui.QtGui.html#settaborder","text":"typerig.gui.QtGui.QDialog.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type","title":"setTabOrder"},{"location":"typerig.gui.QtGui.html#settooltip","text":"typerig.gui.QtGui.QDialog.setToolTip = unbound qt slot setToolTip of QDialog type","title":"setToolTip"},{"location":"typerig.gui.QtGui.html#settooltipduration","text":"typerig.gui.QtGui.QDialog.setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type","title":"setToolTipDuration"},{"location":"typerig.gui.QtGui.html#setupdatesenabled","text":"typerig.gui.QtGui.QDialog.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type","title":"setUpdatesEnabled"},{"location":"typerig.gui.QtGui.html#setvisible","text":"typerig.gui.QtGui.QDialog.setVisible = unbound qt slot py_q_setVisible of QDialog type","title":"setVisible"},{"location":"typerig.gui.QtGui.html#setwhatsthis","text":"typerig.gui.QtGui.QDialog.setWhatsThis = unbound qt slot setWhatsThis of QDialog type","title":"setWhatsThis"},{"location":"typerig.gui.QtGui.html#setwindowfilepath","text":"typerig.gui.QtGui.QDialog.setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type","title":"setWindowFilePath"},{"location":"typerig.gui.QtGui.html#setwindowflags","text":"typerig.gui.QtGui.QDialog.setWindowFlags = unbound qt slot setWindowFlags of QDialog type","title":"setWindowFlags"},{"location":"typerig.gui.QtGui.html#setwindowicon","text":"typerig.gui.QtGui.QDialog.setWindowIcon = unbound qt slot setWindowIcon of QDialog type","title":"setWindowIcon"},{"location":"typerig.gui.QtGui.html#setwindowicontext","text":"typerig.gui.QtGui.QDialog.setWindowIconText = unbound qt slot setWindowIconText of QDialog type","title":"setWindowIconText"},{"location":"typerig.gui.QtGui.html#setwindowmodality","text":"typerig.gui.QtGui.QDialog.setWindowModality = unbound qt slot setWindowModality of QDialog type","title":"setWindowModality"},{"location":"typerig.gui.QtGui.html#setwindowmodified","text":"typerig.gui.QtGui.QDialog.setWindowModified = unbound qt slot setWindowModified of QDialog type","title":"setWindowModified"},{"location":"typerig.gui.QtGui.html#setwindowopacity","text":"typerig.gui.QtGui.QDialog.setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type","title":"setWindowOpacity"},{"location":"typerig.gui.QtGui.html#setwindowrole","text":"typerig.gui.QtGui.QDialog.setWindowRole = unbound qt slot setWindowRole of QDialog type","title":"setWindowRole"},{"location":"typerig.gui.QtGui.html#setwindowstate","text":"typerig.gui.QtGui.QDialog.setWindowState = unbound qt slot setWindowState of QDialog type","title":"setWindowState"},{"location":"typerig.gui.QtGui.html#setwindowtitle","text":"typerig.gui.QtGui.QDialog.setWindowTitle = unbound qt slot setWindowTitle of QDialog type","title":"setWindowTitle"},{"location":"typerig.gui.QtGui.html#sharedpainter","text":"typerig.gui.QtGui.QDialog.sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type","title":"sharedPainter"},{"location":"typerig.gui.QtGui.html#show","text":"typerig.gui.QtGui.QDialog.show = unbound qt slot show of QDialog type","title":"show"},{"location":"typerig.gui.QtGui.html#showevent","text":"typerig.gui.QtGui.QDialog.showEvent = unbound qt slot py_q_showEvent of QDialog type","title":"showEvent"},{"location":"typerig.gui.QtGui.html#showextension","text":"typerig.gui.QtGui.QDialog.showExtension = unbound qt slot showExtension of QDialog type","title":"showExtension"},{"location":"typerig.gui.QtGui.html#showfullscreen","text":"typerig.gui.QtGui.QDialog.showFullScreen = unbound qt slot showFullScreen of QDialog type","title":"showFullScreen"},{"location":"typerig.gui.QtGui.html#showmaximized","text":"typerig.gui.QtGui.QDialog.showMaximized = unbound qt slot showMaximized of QDialog type","title":"showMaximized"},{"location":"typerig.gui.QtGui.html#showminimized","text":"typerig.gui.QtGui.QDialog.showMinimized = unbound qt slot showMinimized of QDialog type","title":"showMinimized"},{"location":"typerig.gui.QtGui.html#shownormal","text":"typerig.gui.QtGui.QDialog.showNormal = unbound qt slot showNormal of QDialog type","title":"showNormal"},{"location":"typerig.gui.QtGui.html#signalsblocked","text":"typerig.gui.QtGui.QDialog.signalsBlocked = unbound qt slot signalsBlocked of QDialog type","title":"signalsBlocked"},{"location":"typerig.gui.QtGui.html#stackunder","text":"typerig.gui.QtGui.QDialog.stackUnder = unbound qt slot stackUnder of QDialog type","title":"stackUnder"},{"location":"typerig.gui.QtGui.html#starttimer","text":"typerig.gui.QtGui.QDialog.startTimer = unbound qt slot startTimer of QDialog type","title":"startTimer"},{"location":"typerig.gui.QtGui.html#style","text":"typerig.gui.QtGui.QDialog.style = unbound qt slot style of QDialog type","title":"style"},{"location":"typerig.gui.QtGui.html#tabletevent","text":"typerig.gui.QtGui.QDialog.tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type","title":"tabletEvent"},{"location":"typerig.gui.QtGui.html#testattribute","text":"typerig.gui.QtGui.QDialog.testAttribute = unbound qt slot testAttribute of QDialog type","title":"testAttribute"},{"location":"typerig.gui.QtGui.html#thread","text":"typerig.gui.QtGui.QDialog.thread = unbound qt slot thread of QDialog type","title":"thread"},{"location":"typerig.gui.QtGui.html#timerevent","text":"typerig.gui.QtGui.QDialog.timerEvent = unbound qt slot py_q_timerEvent of QDialog type","title":"timerEvent"},{"location":"typerig.gui.QtGui.html#tr","text":"typerig.gui.QtGui.QDialog.tr = unbound qt slot tr of QDialog type","title":"tr"},{"location":"typerig.gui.QtGui.html#undermouse","text":"typerig.gui.QtGui.QDialog.underMouse = unbound qt slot underMouse of QDialog type","title":"underMouse"},{"location":"typerig.gui.QtGui.html#ungrabgesture","text":"typerig.gui.QtGui.QDialog.ungrabGesture = unbound qt slot ungrabGesture of QDialog type","title":"ungrabGesture"},{"location":"typerig.gui.QtGui.html#unsetcursor","text":"typerig.gui.QtGui.QDialog.unsetCursor = unbound qt slot unsetCursor of QDialog type","title":"unsetCursor"},{"location":"typerig.gui.QtGui.html#unsetlayoutdirection","text":"typerig.gui.QtGui.QDialog.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type","title":"unsetLayoutDirection"},{"location":"typerig.gui.QtGui.html#unsetlocale","text":"typerig.gui.QtGui.QDialog.unsetLocale = unbound qt slot unsetLocale of QDialog type","title":"unsetLocale"},{"location":"typerig.gui.QtGui.html#update","text":"typerig.gui.QtGui.QDialog.update = unbound qt slot update of QDialog type","title":"update"},{"location":"typerig.gui.QtGui.html#updategeometry","text":"typerig.gui.QtGui.QDialog.updateGeometry = unbound qt slot updateGeometry of QDialog type","title":"updateGeometry"},{"location":"typerig.gui.QtGui.html#visibleregion","text":"typerig.gui.QtGui.QDialog.visibleRegion = unbound qt slot visibleRegion of QDialog type","title":"visibleRegion"},{"location":"typerig.gui.QtGui.html#wheelevent","text":"typerig.gui.QtGui.QDialog.wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type","title":"wheelEvent"},{"location":"typerig.gui.QtGui.html#widthmm","text":"typerig.gui.QtGui.QDialog.widthMM = unbound qt slot widthMM of QDialog type","title":"widthMM"},{"location":"typerig.gui.QtGui.html#window","text":"typerig.gui.QtGui.QDialog.window = unbound qt slot window of QDialog type","title":"window"},{"location":"typerig.gui.QtGui.html#windowflags","text":"typerig.gui.QtGui.QDialog.windowFlags = unbound qt slot windowFlags of QDialog type","title":"windowFlags"},{"location":"typerig.gui.QtGui.html#windowhandle","text":"typerig.gui.QtGui.QDialog.windowHandle = unbound qt slot windowHandle of QDialog type","title":"windowHandle"},{"location":"typerig.gui.QtGui.html#windowrole","text":"typerig.gui.QtGui.QDialog.windowRole = unbound qt slot windowRole of QDialog type","title":"windowRole"},{"location":"typerig.gui.QtGui.html#windowstate","text":"typerig.gui.QtGui.QDialog.windowState = unbound qt slot windowState of QDialog type","title":"windowState"},{"location":"typerig.gui.QtGui.html#windowtype","text":"typerig.gui.QtGui.QDialog.windowType = unbound qt slot windowType of QDialog type","title":"windowType"},{"location":"typerig.gui.QtGui.html#winid","text":"typerig.gui.QtGui.QDialog.winId = unbound qt slot winId of QDialog type","title":"winId"},{"location":"typerig.gui.QtGui.html#qgridlayout","text":"","title":"QGridLayout"},{"location":"typerig.gui.QtGui.html#activate","text":"typerig.gui.QtGui.QGridLayout.activate = unbound qt slot activate of QGridLayout type","title":"activate"},{"location":"typerig.gui.QtGui.html#addchildlayout","text":"typerig.gui.QtGui.QGridLayout.addChildLayout = unbound qt slot addChildLayout of QGridLayout type","title":"addChildLayout"},{"location":"typerig.gui.QtGui.html#addchildwidget","text":"typerig.gui.QtGui.QGridLayout.addChildWidget = unbound qt slot addChildWidget of QGridLayout type","title":"addChildWidget"},{"location":"typerig.gui.QtGui.html#additem","text":"typerig.gui.QtGui.QGridLayout.addItem = unbound qt slot py_q_addItem of QGridLayout type","title":"addItem"},{"location":"typerig.gui.QtGui.html#addlayout","text":"typerig.gui.QtGui.QGridLayout.addLayout = unbound qt slot addLayout of QGridLayout type","title":"addLayout"},{"location":"typerig.gui.QtGui.html#addwidget","text":"typerig.gui.QtGui.QGridLayout.addWidget = unbound qt slot addWidget of QGridLayout type","title":"addWidget"},{"location":"typerig.gui.QtGui.html#adoptlayout","text":"typerig.gui.QtGui.QGridLayout.adoptLayout = unbound qt slot adoptLayout of QGridLayout type","title":"adoptLayout"},{"location":"typerig.gui.QtGui.html#alignment","text":"typerig.gui.QtGui.QGridLayout.alignment = unbound qt slot alignment of QGridLayout type","title":"alignment"},{"location":"typerig.gui.QtGui.html#alignmentrect","text":"typerig.gui.QtGui.QGridLayout.alignmentRect = unbound qt slot alignmentRect of QGridLayout type","title":"alignmentRect"},{"location":"typerig.gui.QtGui.html#blocksignals_1","text":"typerig.gui.QtGui.QGridLayout.blockSignals = unbound qt slot blockSignals of QGridLayout type","title":"blockSignals"},{"location":"typerig.gui.QtGui.html#cellrect","text":"typerig.gui.QtGui.QGridLayout.cellRect = unbound qt slot cellRect of QGridLayout type","title":"cellRect"},{"location":"typerig.gui.QtGui.html#childevent_1","text":"typerig.gui.QtGui.QGridLayout.childEvent = unbound qt slot py_q_childEvent of QGridLayout type","title":"childEvent"},{"location":"typerig.gui.QtGui.html#children_1","text":"typerig.gui.QtGui.QGridLayout.children = unbound qt slot children of QGridLayout type","title":"children"},{"location":"typerig.gui.QtGui.html#classname_1","text":"typerig.gui.QtGui.QGridLayout.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.QtGui.html#closestacceptablesize","text":"typerig.gui.QtGui.QGridLayout.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type","title":"closestAcceptableSize"},{"location":"typerig.gui.QtGui.html#columncount","text":"typerig.gui.QtGui.QGridLayout.columnCount = unbound qt slot columnCount of QGridLayout type","title":"columnCount"},{"location":"typerig.gui.QtGui.html#columnminimumwidth","text":"typerig.gui.QtGui.QGridLayout.columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type","title":"columnMinimumWidth"},{"location":"typerig.gui.QtGui.html#columnstretch","text":"typerig.gui.QtGui.QGridLayout.columnStretch = unbound qt slot columnStretch of QGridLayout type","title":"columnStretch"},{"location":"typerig.gui.QtGui.html#connect_1","text":"typerig.gui.QtGui.QGridLayout.connect = unbound qt slot connect of QGridLayout type","title":"connect"},{"location":"typerig.gui.QtGui.html#contentsmargins_1","text":"typerig.gui.QtGui.QGridLayout.contentsMargins = unbound qt slot contentsMargins of QGridLayout type","title":"contentsMargins"},{"location":"typerig.gui.QtGui.html#contentsrect_1","text":"typerig.gui.QtGui.QGridLayout.contentsRect = unbound qt slot contentsRect of QGridLayout type","title":"contentsRect"},{"location":"typerig.gui.QtGui.html#controltypes","text":"typerig.gui.QtGui.QGridLayout.controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type","title":"controlTypes"},{"location":"typerig.gui.QtGui.html#count","text":"typerig.gui.QtGui.QGridLayout.count = unbound qt slot py_q_count of QGridLayout type","title":"count"},{"location":"typerig.gui.QtGui.html#customevent_1","text":"typerig.gui.QtGui.QGridLayout.customEvent = unbound qt slot py_q_customEvent of QGridLayout type","title":"customEvent"},{"location":"typerig.gui.QtGui.html#delete_1","text":"typerig.gui.QtGui.QGridLayout.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.QtGui.html#deletelater_1","text":"typerig.gui.QtGui.QGridLayout.deleteLater = unbound qt slot deleteLater of QGridLayout type","title":"deleteLater"},{"location":"typerig.gui.QtGui.html#disconnect_1","text":"typerig.gui.QtGui.QGridLayout.disconnect = unbound qt slot disconnect of QGridLayout type","title":"disconnect"},{"location":"typerig.gui.QtGui.html#dumpobjectinfo_1","text":"typerig.gui.QtGui.QGridLayout.dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type","title":"dumpObjectInfo"},{"location":"typerig.gui.QtGui.html#dumpobjecttree_1","text":"typerig.gui.QtGui.QGridLayout.dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type","title":"dumpObjectTree"},{"location":"typerig.gui.QtGui.html#dynamicpropertynames_1","text":"typerig.gui.QtGui.QGridLayout.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type","title":"dynamicPropertyNames"},{"location":"typerig.gui.QtGui.html#event_1","text":"typerig.gui.QtGui.QGridLayout.event = unbound qt slot py_q_event of QGridLayout type","title":"event"},{"location":"typerig.gui.QtGui.html#eventfilter_1","text":"typerig.gui.QtGui.QGridLayout.eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type","title":"eventFilter"},{"location":"typerig.gui.QtGui.html#expandingdirections","text":"typerig.gui.QtGui.QGridLayout.expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type","title":"expandingDirections"},{"location":"typerig.gui.QtGui.html#findchild_1","text":"typerig.gui.QtGui.QGridLayout.findChild = unbound qt slot findChild of QGridLayout type","title":"findChild"},{"location":"typerig.gui.QtGui.html#findchildren_1","text":"typerig.gui.QtGui.QGridLayout.findChildren = unbound qt slot findChildren of QGridLayout type","title":"findChildren"},{"location":"typerig.gui.QtGui.html#geometry","text":"typerig.gui.QtGui.QGridLayout.geometry = unbound qt slot py_q_geometry of QGridLayout type","title":"geometry"},{"location":"typerig.gui.QtGui.html#hasheightforwidth_1","text":"typerig.gui.QtGui.QGridLayout.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type","title":"hasHeightForWidth"},{"location":"typerig.gui.QtGui.html#heightforwidth_1","text":"typerig.gui.QtGui.QGridLayout.heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type","title":"heightForWidth"},{"location":"typerig.gui.QtGui.html#help_1","text":"typerig.gui.QtGui.QGridLayout.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.QtGui.html#horizontalspacing","text":"typerig.gui.QtGui.QGridLayout.horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type","title":"horizontalSpacing"},{"location":"typerig.gui.QtGui.html#indexof","text":"typerig.gui.QtGui.QGridLayout.indexOf = unbound qt slot py_q_indexOf of QGridLayout type","title":"indexOf"},{"location":"typerig.gui.QtGui.html#inherits_1","text":"typerig.gui.QtGui.QGridLayout.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.QtGui.html#installeventfilter_1","text":"typerig.gui.QtGui.QGridLayout.installEventFilter = unbound qt slot installEventFilter of QGridLayout type","title":"installEventFilter"},{"location":"typerig.gui.QtGui.html#invalidate","text":"typerig.gui.QtGui.QGridLayout.invalidate = unbound qt slot py_q_invalidate of QGridLayout type","title":"invalidate"},{"location":"typerig.gui.QtGui.html#isempty","text":"typerig.gui.QtGui.QGridLayout.isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type","title":"isEmpty"},{"location":"typerig.gui.QtGui.html#isenabled_1","text":"typerig.gui.QtGui.QGridLayout.isEnabled = unbound qt slot isEnabled of QGridLayout type","title":"isEnabled"},{"location":"typerig.gui.QtGui.html#issignalconnected_1","text":"typerig.gui.QtGui.QGridLayout.isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type","title":"isSignalConnected"},{"location":"typerig.gui.QtGui.html#iswidgettype_1","text":"typerig.gui.QtGui.QGridLayout.isWidgetType = unbound qt slot isWidgetType of QGridLayout type","title":"isWidgetType"},{"location":"typerig.gui.QtGui.html#iswindowtype_1","text":"typerig.gui.QtGui.QGridLayout.isWindowType = unbound qt slot isWindowType of QGridLayout type","title":"isWindowType"},{"location":"typerig.gui.QtGui.html#itemat","text":"typerig.gui.QtGui.QGridLayout.itemAt = unbound qt slot py_q_itemAt of QGridLayout type","title":"itemAt"},{"location":"typerig.gui.QtGui.html#itematposition","text":"typerig.gui.QtGui.QGridLayout.itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type","title":"itemAtPosition"},{"location":"typerig.gui.QtGui.html#killtimer_1","text":"typerig.gui.QtGui.QGridLayout.killTimer = unbound qt slot killTimer of QGridLayout type","title":"killTimer"},{"location":"typerig.gui.QtGui.html#layout_1","text":"typerig.gui.QtGui.QGridLayout.layout = unbound qt slot py_q_layout of QGridLayout type","title":"layout"},{"location":"typerig.gui.QtGui.html#maximumsize","text":"typerig.gui.QtGui.QGridLayout.maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type","title":"maximumSize"},{"location":"typerig.gui.QtGui.html#menubar","text":"typerig.gui.QtGui.QGridLayout.menuBar = unbound qt slot menuBar of QGridLayout type","title":"menuBar"},{"location":"typerig.gui.QtGui.html#metaobject_1","text":"typerig.gui.QtGui.QGridLayout.metaObject = unbound qt slot metaObject of QGridLayout type","title":"metaObject"},{"location":"typerig.gui.QtGui.html#minimumheightforwidth","text":"typerig.gui.QtGui.QGridLayout.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type","title":"minimumHeightForWidth"},{"location":"typerig.gui.QtGui.html#minimumsize","text":"typerig.gui.QtGui.QGridLayout.minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type","title":"minimumSize"},{"location":"typerig.gui.QtGui.html#movetothread_1","text":"typerig.gui.QtGui.QGridLayout.moveToThread = unbound qt slot moveToThread of QGridLayout type","title":"moveToThread"},{"location":"typerig.gui.QtGui.html#origincorner","text":"typerig.gui.QtGui.QGridLayout.originCorner = unbound qt slot originCorner of QGridLayout type","title":"originCorner"},{"location":"typerig.gui.QtGui.html#parent_1","text":"typerig.gui.QtGui.QGridLayout.parent = unbound qt slot parent of QGridLayout type","title":"parent"},{"location":"typerig.gui.QtGui.html#parentwidget_1","text":"typerig.gui.QtGui.QGridLayout.parentWidget = unbound qt slot parentWidget of QGridLayout type","title":"parentWidget"},{"location":"typerig.gui.QtGui.html#property_1","text":"typerig.gui.QtGui.QGridLayout.property = unbound qt slot property of QGridLayout type","title":"property"},{"location":"typerig.gui.QtGui.html#removeeventfilter_1","text":"typerig.gui.QtGui.QGridLayout.removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type","title":"removeEventFilter"},{"location":"typerig.gui.QtGui.html#removeitem","text":"typerig.gui.QtGui.QGridLayout.removeItem = unbound qt slot removeItem of QGridLayout type","title":"removeItem"},{"location":"typerig.gui.QtGui.html#removewidget","text":"typerig.gui.QtGui.QGridLayout.removeWidget = unbound qt slot removeWidget of QGridLayout type","title":"removeWidget"},{"location":"typerig.gui.QtGui.html#replacewidget","text":"typerig.gui.QtGui.QGridLayout.replaceWidget = unbound qt slot replaceWidget of QGridLayout type","title":"replaceWidget"},{"location":"typerig.gui.QtGui.html#rowcount","text":"typerig.gui.QtGui.QGridLayout.rowCount = unbound qt slot rowCount of QGridLayout type","title":"rowCount"},{"location":"typerig.gui.QtGui.html#rowminimumheight","text":"typerig.gui.QtGui.QGridLayout.rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type","title":"rowMinimumHeight"},{"location":"typerig.gui.QtGui.html#rowstretch","text":"typerig.gui.QtGui.QGridLayout.rowStretch = unbound qt slot rowStretch of QGridLayout type","title":"rowStretch"},{"location":"typerig.gui.QtGui.html#sender_1","text":"typerig.gui.QtGui.QGridLayout.sender = unbound qt slot sender of QGridLayout type","title":"sender"},{"location":"typerig.gui.QtGui.html#sendersignalindex_1","text":"typerig.gui.QtGui.QGridLayout.senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type","title":"senderSignalIndex"},{"location":"typerig.gui.QtGui.html#setalignment","text":"typerig.gui.QtGui.QGridLayout.setAlignment = unbound qt slot setAlignment of QGridLayout type","title":"setAlignment"},{"location":"typerig.gui.QtGui.html#setcolumnminimumwidth","text":"typerig.gui.QtGui.QGridLayout.setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type","title":"setColumnMinimumWidth"},{"location":"typerig.gui.QtGui.html#setcolumnstretch","text":"typerig.gui.QtGui.QGridLayout.setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type","title":"setColumnStretch"},{"location":"typerig.gui.QtGui.html#setcontentsmargins_1","text":"typerig.gui.QtGui.QGridLayout.setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type","title":"setContentsMargins"},{"location":"typerig.gui.QtGui.html#setdefaultpositioning","text":"typerig.gui.QtGui.QGridLayout.setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type","title":"setDefaultPositioning"},{"location":"typerig.gui.QtGui.html#setenabled_1","text":"typerig.gui.QtGui.QGridLayout.setEnabled = unbound qt slot setEnabled of QGridLayout type","title":"setEnabled"},{"location":"typerig.gui.QtGui.html#setgeometry_1","text":"typerig.gui.QtGui.QGridLayout.setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type","title":"setGeometry"},{"location":"typerig.gui.QtGui.html#sethorizontalspacing","text":"typerig.gui.QtGui.QGridLayout.setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type","title":"setHorizontalSpacing"},{"location":"typerig.gui.QtGui.html#setmargin","text":"typerig.gui.QtGui.QGridLayout.setMargin = unbound qt slot setMargin of QGridLayout type","title":"setMargin"},{"location":"typerig.gui.QtGui.html#setmenubar","text":"typerig.gui.QtGui.QGridLayout.setMenuBar = unbound qt slot setMenuBar of QGridLayout type","title":"setMenuBar"},{"location":"typerig.gui.QtGui.html#setobjectname_1","text":"typerig.gui.QtGui.QGridLayout.setObjectName = unbound qt slot setObjectName of QGridLayout type","title":"setObjectName"},{"location":"typerig.gui.QtGui.html#setorigincorner","text":"typerig.gui.QtGui.QGridLayout.setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type","title":"setOriginCorner"},{"location":"typerig.gui.QtGui.html#setparent_1","text":"typerig.gui.QtGui.QGridLayout.setParent = unbound qt slot setParent of QGridLayout type","title":"setParent"},{"location":"typerig.gui.QtGui.html#setproperty_1","text":"typerig.gui.QtGui.QGridLayout.setProperty = unbound qt slot setProperty of QGridLayout type","title":"setProperty"},{"location":"typerig.gui.QtGui.html#setrowminimumheight","text":"typerig.gui.QtGui.QGridLayout.setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type","title":"setRowMinimumHeight"},{"location":"typerig.gui.QtGui.html#setrowstretch","text":"typerig.gui.QtGui.QGridLayout.setRowStretch = unbound qt slot setRowStretch of QGridLayout type","title":"setRowStretch"},{"location":"typerig.gui.QtGui.html#setsizeconstraint","text":"typerig.gui.QtGui.QGridLayout.setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type","title":"setSizeConstraint"},{"location":"typerig.gui.QtGui.html#setspacing","text":"typerig.gui.QtGui.QGridLayout.setSpacing = unbound qt slot setSpacing of QGridLayout type","title":"setSpacing"},{"location":"typerig.gui.QtGui.html#setverticalspacing","text":"typerig.gui.QtGui.QGridLayout.setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type","title":"setVerticalSpacing"},{"location":"typerig.gui.QtGui.html#signalsblocked_1","text":"typerig.gui.QtGui.QGridLayout.signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type","title":"signalsBlocked"},{"location":"typerig.gui.QtGui.html#sizehint","text":"typerig.gui.QtGui.QGridLayout.sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type","title":"sizeHint"},{"location":"typerig.gui.QtGui.html#spaceritem","text":"typerig.gui.QtGui.QGridLayout.spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type","title":"spacerItem"},{"location":"typerig.gui.QtGui.html#starttimer_1","text":"typerig.gui.QtGui.QGridLayout.startTimer = unbound qt slot startTimer of QGridLayout type","title":"startTimer"},{"location":"typerig.gui.QtGui.html#takeat","text":"typerig.gui.QtGui.QGridLayout.takeAt = unbound qt slot py_q_takeAt of QGridLayout type","title":"takeAt"},{"location":"typerig.gui.QtGui.html#thread_1","text":"typerig.gui.QtGui.QGridLayout.thread = unbound qt slot thread of QGridLayout type","title":"thread"},{"location":"typerig.gui.QtGui.html#timerevent_1","text":"typerig.gui.QtGui.QGridLayout.timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type","title":"timerEvent"},{"location":"typerig.gui.QtGui.html#totalheightforwidth","text":"typerig.gui.QtGui.QGridLayout.totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type","title":"totalHeightForWidth"},{"location":"typerig.gui.QtGui.html#totalmaximumsize","text":"typerig.gui.QtGui.QGridLayout.totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type","title":"totalMaximumSize"},{"location":"typerig.gui.QtGui.html#totalminimumsize","text":"typerig.gui.QtGui.QGridLayout.totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type","title":"totalMinimumSize"},{"location":"typerig.gui.QtGui.html#totalsizehint","text":"typerig.gui.QtGui.QGridLayout.totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type","title":"totalSizeHint"},{"location":"typerig.gui.QtGui.html#tr_1","text":"typerig.gui.QtGui.QGridLayout.tr = unbound qt slot tr of QGridLayout type","title":"tr"},{"location":"typerig.gui.QtGui.html#update_1","text":"typerig.gui.QtGui.QGridLayout.update = unbound qt slot update of QGridLayout type","title":"update"},{"location":"typerig.gui.QtGui.html#verticalspacing","text":"typerig.gui.QtGui.QGridLayout.verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type","title":"verticalSpacing"},{"location":"typerig.gui.QtGui.html#widget","text":"typerig.gui.QtGui.QGridLayout.widget = unbound qt slot py_q_widget of QGridLayout type","title":"widget"},{"location":"typerig.gui.QtGui.html#widgetevent","text":"typerig.gui.QtGui.QGridLayout.widgetEvent = unbound qt slot widgetEvent of QGridLayout type","title":"widgetEvent"},{"location":"typerig.gui.QtGui.html#qhboxlayout","text":"","title":"QHBoxLayout"},{"location":"typerig.gui.QtGui.html#activate_1","text":"typerig.gui.QtGui.QHBoxLayout.activate = unbound qt slot activate of QHBoxLayout type","title":"activate"},{"location":"typerig.gui.QtGui.html#addchildlayout_1","text":"typerig.gui.QtGui.QHBoxLayout.addChildLayout = unbound qt slot addChildLayout of QHBoxLayout type","title":"addChildLayout"},{"location":"typerig.gui.QtGui.html#addchildwidget_1","text":"typerig.gui.QtGui.QHBoxLayout.addChildWidget = unbound qt slot addChildWidget of QHBoxLayout type","title":"addChildWidget"},{"location":"typerig.gui.QtGui.html#additem_1","text":"typerig.gui.QtGui.QHBoxLayout.addItem = unbound qt slot py_q_addItem of QHBoxLayout type","title":"addItem"},{"location":"typerig.gui.QtGui.html#addlayout_1","text":"typerig.gui.QtGui.QHBoxLayout.addLayout = unbound qt slot addLayout of QHBoxLayout type","title":"addLayout"},{"location":"typerig.gui.QtGui.html#addspaceritem","text":"typerig.gui.QtGui.QHBoxLayout.addSpacerItem = unbound qt slot addSpacerItem of QHBoxLayout type","title":"addSpacerItem"},{"location":"typerig.gui.QtGui.html#addspacing","text":"typerig.gui.QtGui.QHBoxLayout.addSpacing = unbound qt slot addSpacing of QHBoxLayout type","title":"addSpacing"},{"location":"typerig.gui.QtGui.html#addstretch","text":"typerig.gui.QtGui.QHBoxLayout.addStretch = unbound qt slot addStretch of QHBoxLayout type","title":"addStretch"},{"location":"typerig.gui.QtGui.html#addstrut","text":"typerig.gui.QtGui.QHBoxLayout.addStrut = unbound qt slot addStrut of QHBoxLayout type","title":"addStrut"},{"location":"typerig.gui.QtGui.html#addwidget_1","text":"typerig.gui.QtGui.QHBoxLayout.addWidget = unbound qt slot addWidget of QHBoxLayout type","title":"addWidget"},{"location":"typerig.gui.QtGui.html#adoptlayout_1","text":"typerig.gui.QtGui.QHBoxLayout.adoptLayout = unbound qt slot adoptLayout of QHBoxLayout type","title":"adoptLayout"},{"location":"typerig.gui.QtGui.html#alignment_1","text":"typerig.gui.QtGui.QHBoxLayout.alignment = unbound qt slot alignment of QHBoxLayout type","title":"alignment"},{"location":"typerig.gui.QtGui.html#alignmentrect_1","text":"typerig.gui.QtGui.QHBoxLayout.alignmentRect = unbound qt slot alignmentRect of QHBoxLayout type","title":"alignmentRect"},{"location":"typerig.gui.QtGui.html#blocksignals_2","text":"typerig.gui.QtGui.QHBoxLayout.blockSignals = unbound qt slot blockSignals of QHBoxLayout type","title":"blockSignals"},{"location":"typerig.gui.QtGui.html#childevent_2","text":"typerig.gui.QtGui.QHBoxLayout.childEvent = unbound qt slot py_q_childEvent of QHBoxLayout type","title":"childEvent"},{"location":"typerig.gui.QtGui.html#children_2","text":"typerig.gui.QtGui.QHBoxLayout.children = unbound qt slot children of QHBoxLayout type","title":"children"},{"location":"typerig.gui.QtGui.html#classname_2","text":"typerig.gui.QtGui.QHBoxLayout.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.QtGui.html#closestacceptablesize_1","text":"typerig.gui.QtGui.QHBoxLayout.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QHBoxLayout type","title":"closestAcceptableSize"},{"location":"typerig.gui.QtGui.html#connect_2","text":"typerig.gui.QtGui.QHBoxLayout.connect = unbound qt slot connect of QHBoxLayout type","title":"connect"},{"location":"typerig.gui.QtGui.html#contentsmargins_2","text":"typerig.gui.QtGui.QHBoxLayout.contentsMargins = unbound qt slot contentsMargins of QHBoxLayout type","title":"contentsMargins"},{"location":"typerig.gui.QtGui.html#contentsrect_2","text":"typerig.gui.QtGui.QHBoxLayout.contentsRect = unbound qt slot contentsRect of QHBoxLayout type","title":"contentsRect"},{"location":"typerig.gui.QtGui.html#controltypes_1","text":"typerig.gui.QtGui.QHBoxLayout.controlTypes = unbound qt slot py_q_controlTypes of QHBoxLayout type","title":"controlTypes"},{"location":"typerig.gui.QtGui.html#count_1","text":"typerig.gui.QtGui.QHBoxLayout.count = unbound qt slot py_q_count of QHBoxLayout type","title":"count"},{"location":"typerig.gui.QtGui.html#customevent_2","text":"typerig.gui.QtGui.QHBoxLayout.customEvent = unbound qt slot py_q_customEvent of QHBoxLayout type","title":"customEvent"},{"location":"typerig.gui.QtGui.html#delete_2","text":"typerig.gui.QtGui.QHBoxLayout.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.QtGui.html#deletelater_2","text":"typerig.gui.QtGui.QHBoxLayout.deleteLater = unbound qt slot deleteLater of QHBoxLayout type","title":"deleteLater"},{"location":"typerig.gui.QtGui.html#direction","text":"typerig.gui.QtGui.QHBoxLayout.direction = unbound qt slot direction of QHBoxLayout type","title":"direction"},{"location":"typerig.gui.QtGui.html#disconnect_2","text":"typerig.gui.QtGui.QHBoxLayout.disconnect = unbound qt slot disconnect of QHBoxLayout type","title":"disconnect"},{"location":"typerig.gui.QtGui.html#dumpobjectinfo_2","text":"typerig.gui.QtGui.QHBoxLayout.dumpObjectInfo = unbound qt slot dumpObjectInfo of QHBoxLayout type","title":"dumpObjectInfo"},{"location":"typerig.gui.QtGui.html#dumpobjecttree_2","text":"typerig.gui.QtGui.QHBoxLayout.dumpObjectTree = unbound qt slot dumpObjectTree of QHBoxLayout type","title":"dumpObjectTree"},{"location":"typerig.gui.QtGui.html#dynamicpropertynames_2","text":"typerig.gui.QtGui.QHBoxLayout.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QHBoxLayout type","title":"dynamicPropertyNames"},{"location":"typerig.gui.QtGui.html#event_2","text":"typerig.gui.QtGui.QHBoxLayout.event = unbound qt slot py_q_event of QHBoxLayout type","title":"event"},{"location":"typerig.gui.QtGui.html#eventfilter_2","text":"typerig.gui.QtGui.QHBoxLayout.eventFilter = unbound qt slot py_q_eventFilter of QHBoxLayout type","title":"eventFilter"},{"location":"typerig.gui.QtGui.html#expandingdirections_1","text":"typerig.gui.QtGui.QHBoxLayout.expandingDirections = unbound qt slot py_q_expandingDirections of QHBoxLayout type","title":"expandingDirections"},{"location":"typerig.gui.QtGui.html#findchild_2","text":"typerig.gui.QtGui.QHBoxLayout.findChild = unbound qt slot findChild of QHBoxLayout type","title":"findChild"},{"location":"typerig.gui.QtGui.html#findchildren_2","text":"typerig.gui.QtGui.QHBoxLayout.findChildren = unbound qt slot findChildren of QHBoxLayout type","title":"findChildren"},{"location":"typerig.gui.QtGui.html#geometry_1","text":"typerig.gui.QtGui.QHBoxLayout.geometry = unbound qt slot py_q_geometry of QHBoxLayout type","title":"geometry"},{"location":"typerig.gui.QtGui.html#hasheightforwidth_2","text":"typerig.gui.QtGui.QHBoxLayout.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QHBoxLayout type","title":"hasHeightForWidth"},{"location":"typerig.gui.QtGui.html#heightforwidth_2","text":"typerig.gui.QtGui.QHBoxLayout.heightForWidth = unbound qt slot py_q_heightForWidth of QHBoxLayout type","title":"heightForWidth"},{"location":"typerig.gui.QtGui.html#help_2","text":"typerig.gui.QtGui.QHBoxLayout.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.QtGui.html#indexof_1","text":"typerig.gui.QtGui.QHBoxLayout.indexOf = unbound qt slot py_q_indexOf of QHBoxLayout type","title":"indexOf"},{"location":"typerig.gui.QtGui.html#inherits_2","text":"typerig.gui.QtGui.QHBoxLayout.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.QtGui.html#insertitem","text":"typerig.gui.QtGui.QHBoxLayout.insertItem = unbound qt slot insertItem of QHBoxLayout type","title":"insertItem"},{"location":"typerig.gui.QtGui.html#insertlayout","text":"typerig.gui.QtGui.QHBoxLayout.insertLayout = unbound qt slot insertLayout of QHBoxLayout type","title":"insertLayout"},{"location":"typerig.gui.QtGui.html#insertspaceritem","text":"typerig.gui.QtGui.QHBoxLayout.insertSpacerItem = unbound qt slot insertSpacerItem of QHBoxLayout type","title":"insertSpacerItem"},{"location":"typerig.gui.QtGui.html#insertspacing","text":"typerig.gui.QtGui.QHBoxLayout.insertSpacing = unbound qt slot insertSpacing of QHBoxLayout type","title":"insertSpacing"},{"location":"typerig.gui.QtGui.html#insertstretch","text":"typerig.gui.QtGui.QHBoxLayout.insertStretch = unbound qt slot insertStretch of QHBoxLayout type","title":"insertStretch"},{"location":"typerig.gui.QtGui.html#insertwidget","text":"typerig.gui.QtGui.QHBoxLayout.insertWidget = unbound qt slot insertWidget of QHBoxLayout type","title":"insertWidget"},{"location":"typerig.gui.QtGui.html#installeventfilter_2","text":"typerig.gui.QtGui.QHBoxLayout.installEventFilter = unbound qt slot installEventFilter of QHBoxLayout type","title":"installEventFilter"},{"location":"typerig.gui.QtGui.html#invalidate_1","text":"typerig.gui.QtGui.QHBoxLayout.invalidate = unbound qt slot py_q_invalidate of QHBoxLayout type","title":"invalidate"},{"location":"typerig.gui.QtGui.html#isempty_1","text":"typerig.gui.QtGui.QHBoxLayout.isEmpty = unbound qt slot py_q_isEmpty of QHBoxLayout type","title":"isEmpty"},{"location":"typerig.gui.QtGui.html#isenabled_2","text":"typerig.gui.QtGui.QHBoxLayout.isEnabled = unbound qt slot isEnabled of QHBoxLayout type","title":"isEnabled"},{"location":"typerig.gui.QtGui.html#issignalconnected_2","text":"typerig.gui.QtGui.QHBoxLayout.isSignalConnected = unbound qt slot isSignalConnected of QHBoxLayout type","title":"isSignalConnected"},{"location":"typerig.gui.QtGui.html#iswidgettype_2","text":"typerig.gui.QtGui.QHBoxLayout.isWidgetType = unbound qt slot isWidgetType of QHBoxLayout type","title":"isWidgetType"},{"location":"typerig.gui.QtGui.html#iswindowtype_2","text":"typerig.gui.QtGui.QHBoxLayout.isWindowType = unbound qt slot isWindowType of QHBoxLayout type","title":"isWindowType"},{"location":"typerig.gui.QtGui.html#itemat_1","text":"typerig.gui.QtGui.QHBoxLayout.itemAt = unbound qt slot py_q_itemAt of QHBoxLayout type","title":"itemAt"},{"location":"typerig.gui.QtGui.html#killtimer_2","text":"typerig.gui.QtGui.QHBoxLayout.killTimer = unbound qt slot killTimer of QHBoxLayout type","title":"killTimer"},{"location":"typerig.gui.QtGui.html#layout_2","text":"typerig.gui.QtGui.QHBoxLayout.layout = unbound qt slot py_q_layout of QHBoxLayout type","title":"layout"},{"location":"typerig.gui.QtGui.html#maximumsize_1","text":"typerig.gui.QtGui.QHBoxLayout.maximumSize = unbound qt slot py_q_maximumSize of QHBoxLayout type","title":"maximumSize"},{"location":"typerig.gui.QtGui.html#menubar_1","text":"typerig.gui.QtGui.QHBoxLayout.menuBar = unbound qt slot menuBar of QHBoxLayout type","title":"menuBar"},{"location":"typerig.gui.QtGui.html#metaobject_2","text":"typerig.gui.QtGui.QHBoxLayout.metaObject = unbound qt slot metaObject of QHBoxLayout type","title":"metaObject"},{"location":"typerig.gui.QtGui.html#minimumheightforwidth_1","text":"typerig.gui.QtGui.QHBoxLayout.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QHBoxLayout type","title":"minimumHeightForWidth"},{"location":"typerig.gui.QtGui.html#minimumsize_1","text":"typerig.gui.QtGui.QHBoxLayout.minimumSize = unbound qt slot py_q_minimumSize of QHBoxLayout type","title":"minimumSize"},{"location":"typerig.gui.QtGui.html#movetothread_2","text":"typerig.gui.QtGui.QHBoxLayout.moveToThread = unbound qt slot moveToThread of QHBoxLayout type","title":"moveToThread"},{"location":"typerig.gui.QtGui.html#parent_2","text":"typerig.gui.QtGui.QHBoxLayout.parent = unbound qt slot parent of QHBoxLayout type","title":"parent"},{"location":"typerig.gui.QtGui.html#parentwidget_2","text":"typerig.gui.QtGui.QHBoxLayout.parentWidget = unbound qt slot parentWidget of QHBoxLayout type","title":"parentWidget"},{"location":"typerig.gui.QtGui.html#property_2","text":"typerig.gui.QtGui.QHBoxLayout.property = unbound qt slot property of QHBoxLayout type","title":"property"},{"location":"typerig.gui.QtGui.html#removeeventfilter_2","text":"typerig.gui.QtGui.QHBoxLayout.removeEventFilter = unbound qt slot removeEventFilter of QHBoxLayout type","title":"removeEventFilter"},{"location":"typerig.gui.QtGui.html#removeitem_1","text":"typerig.gui.QtGui.QHBoxLayout.removeItem = unbound qt slot removeItem of QHBoxLayout type","title":"removeItem"},{"location":"typerig.gui.QtGui.html#removewidget_1","text":"typerig.gui.QtGui.QHBoxLayout.removeWidget = unbound qt slot removeWidget of QHBoxLayout type","title":"removeWidget"},{"location":"typerig.gui.QtGui.html#replacewidget_1","text":"typerig.gui.QtGui.QHBoxLayout.replaceWidget = unbound qt slot replaceWidget of QHBoxLayout type","title":"replaceWidget"},{"location":"typerig.gui.QtGui.html#sender_2","text":"typerig.gui.QtGui.QHBoxLayout.sender = unbound qt slot sender of QHBoxLayout type","title":"sender"},{"location":"typerig.gui.QtGui.html#sendersignalindex_2","text":"typerig.gui.QtGui.QHBoxLayout.senderSignalIndex = unbound qt slot senderSignalIndex of QHBoxLayout type","title":"senderSignalIndex"},{"location":"typerig.gui.QtGui.html#setalignment_1","text":"typerig.gui.QtGui.QHBoxLayout.setAlignment = unbound qt slot setAlignment of QHBoxLayout type","title":"setAlignment"},{"location":"typerig.gui.QtGui.html#setcontentsmargins_2","text":"typerig.gui.QtGui.QHBoxLayout.setContentsMargins = unbound qt slot setContentsMargins of QHBoxLayout type","title":"setContentsMargins"},{"location":"typerig.gui.QtGui.html#setdirection","text":"typerig.gui.QtGui.QHBoxLayout.setDirection = unbound qt slot setDirection of QHBoxLayout type","title":"setDirection"},{"location":"typerig.gui.QtGui.html#setenabled_2","text":"typerig.gui.QtGui.QHBoxLayout.setEnabled = unbound qt slot setEnabled of QHBoxLayout type","title":"setEnabled"},{"location":"typerig.gui.QtGui.html#setgeometry_2","text":"typerig.gui.QtGui.QHBoxLayout.setGeometry = unbound qt slot py_q_setGeometry of QHBoxLayout type","title":"setGeometry"},{"location":"typerig.gui.QtGui.html#setmargin_1","text":"typerig.gui.QtGui.QHBoxLayout.setMargin = unbound qt slot setMargin of QHBoxLayout type","title":"setMargin"},{"location":"typerig.gui.QtGui.html#setmenubar_1","text":"typerig.gui.QtGui.QHBoxLayout.setMenuBar = unbound qt slot setMenuBar of QHBoxLayout type","title":"setMenuBar"},{"location":"typerig.gui.QtGui.html#setobjectname_2","text":"typerig.gui.QtGui.QHBoxLayout.setObjectName = unbound qt slot setObjectName of QHBoxLayout type","title":"setObjectName"},{"location":"typerig.gui.QtGui.html#setparent_2","text":"typerig.gui.QtGui.QHBoxLayout.setParent = unbound qt slot setParent of QHBoxLayout type","title":"setParent"},{"location":"typerig.gui.QtGui.html#setproperty_2","text":"typerig.gui.QtGui.QHBoxLayout.setProperty = unbound qt slot setProperty of QHBoxLayout type","title":"setProperty"},{"location":"typerig.gui.QtGui.html#setsizeconstraint_1","text":"typerig.gui.QtGui.QHBoxLayout.setSizeConstraint = unbound qt slot setSizeConstraint of QHBoxLayout type","title":"setSizeConstraint"},{"location":"typerig.gui.QtGui.html#setspacing_1","text":"typerig.gui.QtGui.QHBoxLayout.setSpacing = unbound qt slot setSpacing of QHBoxLayout type","title":"setSpacing"},{"location":"typerig.gui.QtGui.html#setstretch","text":"typerig.gui.QtGui.QHBoxLayout.setStretch = unbound qt slot setStretch of QHBoxLayout type","title":"setStretch"},{"location":"typerig.gui.QtGui.html#setstretchfactor","text":"typerig.gui.QtGui.QHBoxLayout.setStretchFactor = unbound qt slot setStretchFactor of QHBoxLayout type","title":"setStretchFactor"},{"location":"typerig.gui.QtGui.html#signalsblocked_2","text":"typerig.gui.QtGui.QHBoxLayout.signalsBlocked = unbound qt slot signalsBlocked of QHBoxLayout type","title":"signalsBlocked"},{"location":"typerig.gui.QtGui.html#sizehint_1","text":"typerig.gui.QtGui.QHBoxLayout.sizeHint = unbound qt slot py_q_sizeHint of QHBoxLayout type","title":"sizeHint"},{"location":"typerig.gui.QtGui.html#spaceritem_1","text":"typerig.gui.QtGui.QHBoxLayout.spacerItem = unbound qt slot py_q_spacerItem of QHBoxLayout type","title":"spacerItem"},{"location":"typerig.gui.QtGui.html#starttimer_2","text":"typerig.gui.QtGui.QHBoxLayout.startTimer = unbound qt slot startTimer of QHBoxLayout type","title":"startTimer"},{"location":"typerig.gui.QtGui.html#stretch","text":"typerig.gui.QtGui.QHBoxLayout.stretch = unbound qt slot stretch of QHBoxLayout type","title":"stretch"},{"location":"typerig.gui.QtGui.html#takeat_1","text":"typerig.gui.QtGui.QHBoxLayout.takeAt = unbound qt slot py_q_takeAt of QHBoxLayout type","title":"takeAt"},{"location":"typerig.gui.QtGui.html#thread_2","text":"typerig.gui.QtGui.QHBoxLayout.thread = unbound qt slot thread of QHBoxLayout type","title":"thread"},{"location":"typerig.gui.QtGui.html#timerevent_2","text":"typerig.gui.QtGui.QHBoxLayout.timerEvent = unbound qt slot py_q_timerEvent of QHBoxLayout type","title":"timerEvent"},{"location":"typerig.gui.QtGui.html#totalheightforwidth_1","text":"typerig.gui.QtGui.QHBoxLayout.totalHeightForWidth = unbound qt slot totalHeightForWidth of QHBoxLayout type","title":"totalHeightForWidth"},{"location":"typerig.gui.QtGui.html#totalmaximumsize_1","text":"typerig.gui.QtGui.QHBoxLayout.totalMaximumSize = unbound qt slot totalMaximumSize of QHBoxLayout type","title":"totalMaximumSize"},{"location":"typerig.gui.QtGui.html#totalminimumsize_1","text":"typerig.gui.QtGui.QHBoxLayout.totalMinimumSize = unbound qt slot totalMinimumSize of QHBoxLayout type","title":"totalMinimumSize"},{"location":"typerig.gui.QtGui.html#totalsizehint_1","text":"typerig.gui.QtGui.QHBoxLayout.totalSizeHint = unbound qt slot totalSizeHint of QHBoxLayout type","title":"totalSizeHint"},{"location":"typerig.gui.QtGui.html#tr_2","text":"typerig.gui.QtGui.QHBoxLayout.tr = unbound qt slot tr of QHBoxLayout type","title":"tr"},{"location":"typerig.gui.QtGui.html#update_2","text":"typerig.gui.QtGui.QHBoxLayout.update = unbound qt slot update of QHBoxLayout type","title":"update"},{"location":"typerig.gui.QtGui.html#widget_1","text":"typerig.gui.QtGui.QHBoxLayout.widget = unbound qt slot py_q_widget of QHBoxLayout type","title":"widget"},{"location":"typerig.gui.QtGui.html#widgetevent_1","text":"typerig.gui.QtGui.QHBoxLayout.widgetEvent = unbound qt slot widgetEvent of QHBoxLayout type","title":"widgetEvent"},{"location":"typerig.gui.QtGui.html#qvboxlayout","text":"","title":"QVBoxLayout"},{"location":"typerig.gui.QtGui.html#activate_2","text":"typerig.gui.QtGui.QVBoxLayout.activate = unbound qt slot activate of QVBoxLayout type","title":"activate"},{"location":"typerig.gui.QtGui.html#addchildlayout_2","text":"typerig.gui.QtGui.QVBoxLayout.addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type","title":"addChildLayout"},{"location":"typerig.gui.QtGui.html#addchildwidget_2","text":"typerig.gui.QtGui.QVBoxLayout.addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type","title":"addChildWidget"},{"location":"typerig.gui.QtGui.html#additem_2","text":"typerig.gui.QtGui.QVBoxLayout.addItem = unbound qt slot py_q_addItem of QVBoxLayout type","title":"addItem"},{"location":"typerig.gui.QtGui.html#addlayout_2","text":"typerig.gui.QtGui.QVBoxLayout.addLayout = unbound qt slot addLayout of QVBoxLayout type","title":"addLayout"},{"location":"typerig.gui.QtGui.html#addspaceritem_1","text":"typerig.gui.QtGui.QVBoxLayout.addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type","title":"addSpacerItem"},{"location":"typerig.gui.QtGui.html#addspacing_1","text":"typerig.gui.QtGui.QVBoxLayout.addSpacing = unbound qt slot addSpacing of QVBoxLayout type","title":"addSpacing"},{"location":"typerig.gui.QtGui.html#addstretch_1","text":"typerig.gui.QtGui.QVBoxLayout.addStretch = unbound qt slot addStretch of QVBoxLayout type","title":"addStretch"},{"location":"typerig.gui.QtGui.html#addstrut_1","text":"typerig.gui.QtGui.QVBoxLayout.addStrut = unbound qt slot addStrut of QVBoxLayout type","title":"addStrut"},{"location":"typerig.gui.QtGui.html#addwidget_2","text":"typerig.gui.QtGui.QVBoxLayout.addWidget = unbound qt slot addWidget of QVBoxLayout type","title":"addWidget"},{"location":"typerig.gui.QtGui.html#adoptlayout_2","text":"typerig.gui.QtGui.QVBoxLayout.adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type","title":"adoptLayout"},{"location":"typerig.gui.QtGui.html#alignment_2","text":"typerig.gui.QtGui.QVBoxLayout.alignment = unbound qt slot alignment of QVBoxLayout type","title":"alignment"},{"location":"typerig.gui.QtGui.html#alignmentrect_2","text":"typerig.gui.QtGui.QVBoxLayout.alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type","title":"alignmentRect"},{"location":"typerig.gui.QtGui.html#blocksignals_3","text":"typerig.gui.QtGui.QVBoxLayout.blockSignals = unbound qt slot blockSignals of QVBoxLayout type","title":"blockSignals"},{"location":"typerig.gui.QtGui.html#childevent_3","text":"typerig.gui.QtGui.QVBoxLayout.childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type","title":"childEvent"},{"location":"typerig.gui.QtGui.html#children_3","text":"typerig.gui.QtGui.QVBoxLayout.children = unbound qt slot children of QVBoxLayout type","title":"children"},{"location":"typerig.gui.QtGui.html#classname_3","text":"typerig.gui.QtGui.QVBoxLayout.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.QtGui.html#closestacceptablesize_2","text":"typerig.gui.QtGui.QVBoxLayout.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type","title":"closestAcceptableSize"},{"location":"typerig.gui.QtGui.html#connect_3","text":"typerig.gui.QtGui.QVBoxLayout.connect = unbound qt slot connect of QVBoxLayout type","title":"connect"},{"location":"typerig.gui.QtGui.html#contentsmargins_3","text":"typerig.gui.QtGui.QVBoxLayout.contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type","title":"contentsMargins"},{"location":"typerig.gui.QtGui.html#contentsrect_3","text":"typerig.gui.QtGui.QVBoxLayout.contentsRect = unbound qt slot contentsRect of QVBoxLayout type","title":"contentsRect"},{"location":"typerig.gui.QtGui.html#controltypes_2","text":"typerig.gui.QtGui.QVBoxLayout.controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type","title":"controlTypes"},{"location":"typerig.gui.QtGui.html#count_2","text":"typerig.gui.QtGui.QVBoxLayout.count = unbound qt slot py_q_count of QVBoxLayout type","title":"count"},{"location":"typerig.gui.QtGui.html#customevent_3","text":"typerig.gui.QtGui.QVBoxLayout.customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type","title":"customEvent"},{"location":"typerig.gui.QtGui.html#delete_3","text":"typerig.gui.QtGui.QVBoxLayout.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.QtGui.html#deletelater_3","text":"typerig.gui.QtGui.QVBoxLayout.deleteLater = unbound qt slot deleteLater of QVBoxLayout type","title":"deleteLater"},{"location":"typerig.gui.QtGui.html#direction_1","text":"typerig.gui.QtGui.QVBoxLayout.direction = unbound qt slot direction of QVBoxLayout type","title":"direction"},{"location":"typerig.gui.QtGui.html#disconnect_3","text":"typerig.gui.QtGui.QVBoxLayout.disconnect = unbound qt slot disconnect of QVBoxLayout type","title":"disconnect"},{"location":"typerig.gui.QtGui.html#dumpobjectinfo_3","text":"typerig.gui.QtGui.QVBoxLayout.dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type","title":"dumpObjectInfo"},{"location":"typerig.gui.QtGui.html#dumpobjecttree_3","text":"typerig.gui.QtGui.QVBoxLayout.dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type","title":"dumpObjectTree"},{"location":"typerig.gui.QtGui.html#dynamicpropertynames_3","text":"typerig.gui.QtGui.QVBoxLayout.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type","title":"dynamicPropertyNames"},{"location":"typerig.gui.QtGui.html#event_3","text":"typerig.gui.QtGui.QVBoxLayout.event = unbound qt slot py_q_event of QVBoxLayout type","title":"event"},{"location":"typerig.gui.QtGui.html#eventfilter_3","text":"typerig.gui.QtGui.QVBoxLayout.eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type","title":"eventFilter"},{"location":"typerig.gui.QtGui.html#expandingdirections_2","text":"typerig.gui.QtGui.QVBoxLayout.expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type","title":"expandingDirections"},{"location":"typerig.gui.QtGui.html#findchild_3","text":"typerig.gui.QtGui.QVBoxLayout.findChild = unbound qt slot findChild of QVBoxLayout type","title":"findChild"},{"location":"typerig.gui.QtGui.html#findchildren_3","text":"typerig.gui.QtGui.QVBoxLayout.findChildren = unbound qt slot findChildren of QVBoxLayout type","title":"findChildren"},{"location":"typerig.gui.QtGui.html#geometry_2","text":"typerig.gui.QtGui.QVBoxLayout.geometry = unbound qt slot py_q_geometry of QVBoxLayout type","title":"geometry"},{"location":"typerig.gui.QtGui.html#hasheightforwidth_3","text":"typerig.gui.QtGui.QVBoxLayout.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type","title":"hasHeightForWidth"},{"location":"typerig.gui.QtGui.html#heightforwidth_3","text":"typerig.gui.QtGui.QVBoxLayout.heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type","title":"heightForWidth"},{"location":"typerig.gui.QtGui.html#help_3","text":"typerig.gui.QtGui.QVBoxLayout.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.QtGui.html#indexof_2","text":"typerig.gui.QtGui.QVBoxLayout.indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type","title":"indexOf"},{"location":"typerig.gui.QtGui.html#inherits_3","text":"typerig.gui.QtGui.QVBoxLayout.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.QtGui.html#insertitem_1","text":"typerig.gui.QtGui.QVBoxLayout.insertItem = unbound qt slot insertItem of QVBoxLayout type","title":"insertItem"},{"location":"typerig.gui.QtGui.html#insertlayout_1","text":"typerig.gui.QtGui.QVBoxLayout.insertLayout = unbound qt slot insertLayout of QVBoxLayout type","title":"insertLayout"},{"location":"typerig.gui.QtGui.html#insertspaceritem_1","text":"typerig.gui.QtGui.QVBoxLayout.insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type","title":"insertSpacerItem"},{"location":"typerig.gui.QtGui.html#insertspacing_1","text":"typerig.gui.QtGui.QVBoxLayout.insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type","title":"insertSpacing"},{"location":"typerig.gui.QtGui.html#insertstretch_1","text":"typerig.gui.QtGui.QVBoxLayout.insertStretch = unbound qt slot insertStretch of QVBoxLayout type","title":"insertStretch"},{"location":"typerig.gui.QtGui.html#insertwidget_1","text":"typerig.gui.QtGui.QVBoxLayout.insertWidget = unbound qt slot insertWidget of QVBoxLayout type","title":"insertWidget"},{"location":"typerig.gui.QtGui.html#installeventfilter_3","text":"typerig.gui.QtGui.QVBoxLayout.installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type","title":"installEventFilter"},{"location":"typerig.gui.QtGui.html#invalidate_2","text":"typerig.gui.QtGui.QVBoxLayout.invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type","title":"invalidate"},{"location":"typerig.gui.QtGui.html#isempty_2","text":"typerig.gui.QtGui.QVBoxLayout.isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type","title":"isEmpty"},{"location":"typerig.gui.QtGui.html#isenabled_3","text":"typerig.gui.QtGui.QVBoxLayout.isEnabled = unbound qt slot isEnabled of QVBoxLayout type","title":"isEnabled"},{"location":"typerig.gui.QtGui.html#issignalconnected_3","text":"typerig.gui.QtGui.QVBoxLayout.isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type","title":"isSignalConnected"},{"location":"typerig.gui.QtGui.html#iswidgettype_3","text":"typerig.gui.QtGui.QVBoxLayout.isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type","title":"isWidgetType"},{"location":"typerig.gui.QtGui.html#iswindowtype_3","text":"typerig.gui.QtGui.QVBoxLayout.isWindowType = unbound qt slot isWindowType of QVBoxLayout type","title":"isWindowType"},{"location":"typerig.gui.QtGui.html#itemat_2","text":"typerig.gui.QtGui.QVBoxLayout.itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type","title":"itemAt"},{"location":"typerig.gui.QtGui.html#killtimer_3","text":"typerig.gui.QtGui.QVBoxLayout.killTimer = unbound qt slot killTimer of QVBoxLayout type","title":"killTimer"},{"location":"typerig.gui.QtGui.html#layout_3","text":"typerig.gui.QtGui.QVBoxLayout.layout = unbound qt slot py_q_layout of QVBoxLayout type","title":"layout"},{"location":"typerig.gui.QtGui.html#maximumsize_2","text":"typerig.gui.QtGui.QVBoxLayout.maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type","title":"maximumSize"},{"location":"typerig.gui.QtGui.html#menubar_2","text":"typerig.gui.QtGui.QVBoxLayout.menuBar = unbound qt slot menuBar of QVBoxLayout type","title":"menuBar"},{"location":"typerig.gui.QtGui.html#metaobject_3","text":"typerig.gui.QtGui.QVBoxLayout.metaObject = unbound qt slot metaObject of QVBoxLayout type","title":"metaObject"},{"location":"typerig.gui.QtGui.html#minimumheightforwidth_2","text":"typerig.gui.QtGui.QVBoxLayout.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type","title":"minimumHeightForWidth"},{"location":"typerig.gui.QtGui.html#minimumsize_2","text":"typerig.gui.QtGui.QVBoxLayout.minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type","title":"minimumSize"},{"location":"typerig.gui.QtGui.html#movetothread_3","text":"typerig.gui.QtGui.QVBoxLayout.moveToThread = unbound qt slot moveToThread of QVBoxLayout type","title":"moveToThread"},{"location":"typerig.gui.QtGui.html#parent_3","text":"typerig.gui.QtGui.QVBoxLayout.parent = unbound qt slot parent of QVBoxLayout type","title":"parent"},{"location":"typerig.gui.QtGui.html#parentwidget_3","text":"typerig.gui.QtGui.QVBoxLayout.parentWidget = unbound qt slot parentWidget of QVBoxLayout type","title":"parentWidget"},{"location":"typerig.gui.QtGui.html#property_3","text":"typerig.gui.QtGui.QVBoxLayout.property = unbound qt slot property of QVBoxLayout type","title":"property"},{"location":"typerig.gui.QtGui.html#removeeventfilter_3","text":"typerig.gui.QtGui.QVBoxLayout.removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type","title":"removeEventFilter"},{"location":"typerig.gui.QtGui.html#removeitem_2","text":"typerig.gui.QtGui.QVBoxLayout.removeItem = unbound qt slot removeItem of QVBoxLayout type","title":"removeItem"},{"location":"typerig.gui.QtGui.html#removewidget_2","text":"typerig.gui.QtGui.QVBoxLayout.removeWidget = unbound qt slot removeWidget of QVBoxLayout type","title":"removeWidget"},{"location":"typerig.gui.QtGui.html#replacewidget_2","text":"typerig.gui.QtGui.QVBoxLayout.replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type","title":"replaceWidget"},{"location":"typerig.gui.QtGui.html#sender_3","text":"typerig.gui.QtGui.QVBoxLayout.sender = unbound qt slot sender of QVBoxLayout type","title":"sender"},{"location":"typerig.gui.QtGui.html#sendersignalindex_3","text":"typerig.gui.QtGui.QVBoxLayout.senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type","title":"senderSignalIndex"},{"location":"typerig.gui.QtGui.html#setalignment_2","text":"typerig.gui.QtGui.QVBoxLayout.setAlignment = unbound qt slot setAlignment of QVBoxLayout type","title":"setAlignment"},{"location":"typerig.gui.QtGui.html#setcontentsmargins_3","text":"typerig.gui.QtGui.QVBoxLayout.setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type","title":"setContentsMargins"},{"location":"typerig.gui.QtGui.html#setdirection_1","text":"typerig.gui.QtGui.QVBoxLayout.setDirection = unbound qt slot setDirection of QVBoxLayout type","title":"setDirection"},{"location":"typerig.gui.QtGui.html#setenabled_3","text":"typerig.gui.QtGui.QVBoxLayout.setEnabled = unbound qt slot setEnabled of QVBoxLayout type","title":"setEnabled"},{"location":"typerig.gui.QtGui.html#setgeometry_3","text":"typerig.gui.QtGui.QVBoxLayout.setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type","title":"setGeometry"},{"location":"typerig.gui.QtGui.html#setmargin_2","text":"typerig.gui.QtGui.QVBoxLayout.setMargin = unbound qt slot setMargin of QVBoxLayout type","title":"setMargin"},{"location":"typerig.gui.QtGui.html#setmenubar_2","text":"typerig.gui.QtGui.QVBoxLayout.setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type","title":"setMenuBar"},{"location":"typerig.gui.QtGui.html#setobjectname_3","text":"typerig.gui.QtGui.QVBoxLayout.setObjectName = unbound qt slot setObjectName of QVBoxLayout type","title":"setObjectName"},{"location":"typerig.gui.QtGui.html#setparent_3","text":"typerig.gui.QtGui.QVBoxLayout.setParent = unbound qt slot setParent of QVBoxLayout type","title":"setParent"},{"location":"typerig.gui.QtGui.html#setproperty_3","text":"typerig.gui.QtGui.QVBoxLayout.setProperty = unbound qt slot setProperty of QVBoxLayout type","title":"setProperty"},{"location":"typerig.gui.QtGui.html#setsizeconstraint_2","text":"typerig.gui.QtGui.QVBoxLayout.setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type","title":"setSizeConstraint"},{"location":"typerig.gui.QtGui.html#setspacing_2","text":"typerig.gui.QtGui.QVBoxLayout.setSpacing = unbound qt slot setSpacing of QVBoxLayout type","title":"setSpacing"},{"location":"typerig.gui.QtGui.html#setstretch_1","text":"typerig.gui.QtGui.QVBoxLayout.setStretch = unbound qt slot setStretch of QVBoxLayout type","title":"setStretch"},{"location":"typerig.gui.QtGui.html#setstretchfactor_1","text":"typerig.gui.QtGui.QVBoxLayout.setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type","title":"setStretchFactor"},{"location":"typerig.gui.QtGui.html#signalsblocked_3","text":"typerig.gui.QtGui.QVBoxLayout.signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type","title":"signalsBlocked"},{"location":"typerig.gui.QtGui.html#sizehint_2","text":"typerig.gui.QtGui.QVBoxLayout.sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type","title":"sizeHint"},{"location":"typerig.gui.QtGui.html#spaceritem_2","text":"typerig.gui.QtGui.QVBoxLayout.spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type","title":"spacerItem"},{"location":"typerig.gui.QtGui.html#starttimer_3","text":"typerig.gui.QtGui.QVBoxLayout.startTimer = unbound qt slot startTimer of QVBoxLayout type","title":"startTimer"},{"location":"typerig.gui.QtGui.html#stretch_1","text":"typerig.gui.QtGui.QVBoxLayout.stretch = unbound qt slot stretch of QVBoxLayout type","title":"stretch"},{"location":"typerig.gui.QtGui.html#takeat_2","text":"typerig.gui.QtGui.QVBoxLayout.takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type","title":"takeAt"},{"location":"typerig.gui.QtGui.html#thread_3","text":"typerig.gui.QtGui.QVBoxLayout.thread = unbound qt slot thread of QVBoxLayout type","title":"thread"},{"location":"typerig.gui.QtGui.html#timerevent_3","text":"typerig.gui.QtGui.QVBoxLayout.timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type","title":"timerEvent"},{"location":"typerig.gui.QtGui.html#totalheightforwidth_2","text":"typerig.gui.QtGui.QVBoxLayout.totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type","title":"totalHeightForWidth"},{"location":"typerig.gui.QtGui.html#totalmaximumsize_2","text":"typerig.gui.QtGui.QVBoxLayout.totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type","title":"totalMaximumSize"},{"location":"typerig.gui.QtGui.html#totalminimumsize_2","text":"typerig.gui.QtGui.QVBoxLayout.totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type","title":"totalMinimumSize"},{"location":"typerig.gui.QtGui.html#totalsizehint_2","text":"typerig.gui.QtGui.QVBoxLayout.totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type","title":"totalSizeHint"},{"location":"typerig.gui.QtGui.html#tr_3","text":"typerig.gui.QtGui.QVBoxLayout.tr = unbound qt slot tr of QVBoxLayout type","title":"tr"},{"location":"typerig.gui.QtGui.html#update_3","text":"typerig.gui.QtGui.QVBoxLayout.update = unbound qt slot update of QVBoxLayout type","title":"update"},{"location":"typerig.gui.QtGui.html#widget_2","text":"typerig.gui.QtGui.QVBoxLayout.widget = unbound qt slot py_q_widget of QVBoxLayout type","title":"widget"},{"location":"typerig.gui.QtGui.html#widgetevent_2","text":"typerig.gui.QtGui.QVBoxLayout.widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type","title":"widgetEvent"},{"location":"typerig.gui.html","text":"typerig.gui typerig .gui from proxy import __version__ as current_ver __version__ = current_ver Package Contents QtGui widgets","title":"gui"},{"location":"typerig.gui.html#typeriggui","text":"","title":"typerig.gui"},{"location":"typerig.gui.widgets.html","text":"typerig.gui.widgets typerig . gui .widgets ( version 0.0.5) # MODULE: Typerig / GUI / Widgets # NOTE : Assorted Gui Elements # ---------------------------------------- # (C) Vassil Kateliev, 2018 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #----------------------------------------- # www.typerig.com Modules PythonQt.QtCore typerig.gui.QtGui typerig.proxy.application.app typerig.proxy.application typerig.proxy.application.automat typerig.proxy.objects.base typerig.proxy.objects.contour typerig.proxy.objects.curve fontgate fontlab typerig.proxy.objects.font typerig.proxy.objects.glyph json typerig.proxy.objects.kern FL math typerig.proxy.objects.node typerig.proxy.objects PythonQt random typerig.proxy.objects.shape fontTools.pens.statisticsPen typerig.proxy.objects.string typerig.core.objects warnings Classes PythonQt.QtGui.QTabWidget ( PythonQt.PythonQtInstanceWrapper ) TRHTabWidget TRVTabWidget PythonQt.QtGui.QTableWidget ( PythonQt.PythonQtInstanceWrapper ) TRTableView typerig.gui.QtGui.QDialog ( PythonQt.QtGui.QDialog ) TR2FieldDLG typerig.gui.QtGui.QGridLayout ( PythonQt.QtGui.QGridLayout ) TRSliderCtrl typerig.gui.QtGui.QVBoxLayout ( PythonQt.QtGui.QVBoxLayout ) TRMsgSimple class TR2FieldDLG ( typerig.gui.QtGui.QDialog ) Method resolution order: TR2FieldDLG typerig.gui.QtGui.QDialog PythonQt.QtGui.QDialog PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, dlg_name, dlg_msg, dlg_field_t, dlg_field_b, dlg_size =(300, 300, 300, 100) ) return_values (self) Attributes Accepted = 1 DialogCode = class 'PythonQt.QtGui.DialogCode' DrawChildren = 2 DrawWindowBackground = 1 IgnoreMask = 4 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 Rejected = 0 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' accept = unbound qt slot py_q_accept of QDialog type X. accept (a) acceptDrops = None accepted = unbound qt signal accepted of QDialog type accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QDialog type X. actionEvent (a, b) actions = unbound qt slot actions of QDialog type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QDialog type X. activateWindow (a) addAction = unbound qt slot addAction of QDialog type X. addAction (a, b) addActions = unbound qt slot addActions of QDialog type X. addActions (a, b) adjustPosition = unbound qt slot adjustPosition of QDialog type X. adjustPosition (a, b) adjustSize = unbound qt slot adjustSize of QDialog type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QDialog type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QDialog type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QDialog type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QDialog type X. changeEvent (a, b) childAt = unbound qt slot childAt of QDialog type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QDialog type X. childEvent (a, b) children = unbound qt slot children of QDialog type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clearFocus = unbound qt slot clearFocus of QDialog type X. clearFocus (a) clearMask = unbound qt slot clearMask of QDialog type X. clearMask (a) close = unbound qt slot close of QDialog type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QDialog type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QDialog type X. colorCount (a) -> int connect = unbound qt slot connect of QDialog type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QDialog type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QDialog type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type X. contextMenuEvent (a, b) contextMenuPolicy = None createWinId = unbound qt slot createWinId of QDialog type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QDialog type customEvent = unbound qt slot py_q_customEvent of QDialog type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QDialog type X. deleteLater () depth = unbound qt slot depth of QDialog type X. depth (a) -> int destroy = unbound qt slot destroy of QDialog type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QDialog type devType = unbound qt slot py_q_devType of QDialog type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QDialog type X. disconnect (a, b, c, d) -> bool done = unbound qt slot py_q_done of QDialog type X. done (a, b) dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QDialog type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QDialog type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of QDialog type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QDialog type X. enterEvent (a, b) event = unbound qt slot py_q_event of QDialog type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QDialog type X. eventFilter (a, b, c) -> bool exec = unbound qt slot py_q_exec of QDialog type X. exec (a) -> int findChild = unbound qt slot findChild of QDialog type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QDialog type X. findChildren (a, b, c) -> tuple finished = unbound qt signal finished of QDialog type focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QDialog type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QDialog type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QDialog type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QDialog type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QDialog type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QDialog type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QDialog type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QDialog type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QDialog type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QDialog type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QDialog type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QDialog type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QDialog type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QDialog type X. hideEvent (a, b) inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QDialog type X. initPainter (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QDialog type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QDialog type X. insertActions (a, b, c) installEventFilter = unbound qt slot installEventFilter of QDialog type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QDialog type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QDialog type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QDialog type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QDialog type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QDialog type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QDialog type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QDialog type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QDialog type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QDialog type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QDialog type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QDialog type X. isSignalConnected (a, b) -> bool isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type X. isSizeGripEnabled (a) -> bool isVisible = unbound qt slot isVisible of QDialog type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QDialog type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QDialog type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QDialog type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QDialog type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QDialog type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QDialog type X. killTimer (a, b) layout = unbound qt slot layout of QDialog type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QDialog type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QDialog type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QDialog type X. lower () mapFrom = unbound qt slot mapFrom of QDialog type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QDialog type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QDialog type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QDialog type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QDialog type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QDialog type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QDialog type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QDialog type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of QDialog type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QDialog type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QDialog type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QDialog type open = unbound qt slot py_q_open of QDialog type X. open (a) overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QDialog type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QDialog type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QDialog type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QDialog type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QDialog type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QDialog type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QDialog type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QDialog type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QDialog type X. property (a, b) -> object raise = unbound qt slot raise of QDialog type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QDialog type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice reject = unbound qt slot py_q_reject of QDialog type X. reject (a) rejected = unbound qt signal rejected of QDialog type releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QDialog type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QDialog type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QDialog type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QDialog type X. removeEventFilter (a, b) render = unbound qt slot render of QDialog type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QDialog type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QDialog type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QDialog type X. restoreGeometry (a, b) -> bool result = unbound qt slot result of QDialog type X. result (a) -> int saveGeometry = unbound qt slot saveGeometry of QDialog type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QDialog type X. scroll (a, b, c, d) sender = unbound qt slot sender of QDialog type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QDialog type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QDialog type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QDialog type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QDialog type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type X. setContextMenuPolicy (a, b) setCursor = unbound qt slot setCursor of QDialog type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QDialog type X. setDisabled (a) setEnabled = unbound qt slot setEnabled of QDialog type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QDialog type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QDialog type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QDialog type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QDialog type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QDialog type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QDialog type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QDialog type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QDialog type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QDialog type X. setHidden (a) setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QDialog type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QDialog type X. setLocale (a, b) setMask = unbound qt slot setMask of QDialog type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QDialog type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QDialog type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type X. setMinimumWidth (a, b) setModal = unbound qt slot setModal of QDialog type X. setModal (a, b) setMouseTracking = unbound qt slot setMouseTracking of QDialog type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of QDialog type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QDialog type X. setPalette (a, b) setParent = unbound qt slot setParent of QDialog type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QDialog type X. setProperty (a, b, c) -> bool setResult = unbound qt slot setResult of QDialog type X. setResult (a, b) setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type X. setShortcutEnabled (a, b, c) setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type X. setSizeGripEnabled (a, b) setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QDialog type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QDialog type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QDialog type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QDialog type X. setStyleSheet (a) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type X. setTabOrder (a, b) setToolTip = unbound qt slot setToolTip of QDialog type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type X. setUpdatesEnabled (a, b) setVisible = unbound qt slot py_q_setVisible of QDialog type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QDialog type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QDialog type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QDialog type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QDialog type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QDialog type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QDialog type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QDialog type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QDialog type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QDialog type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QDialog type X. show () showEvent = unbound qt slot py_q_showEvent of QDialog type X. showEvent (a, b) showExtension = unbound qt slot showExtension of QDialog type X. showExtension (a) showFullScreen = unbound qt slot showFullScreen of QDialog type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QDialog type X. showMaximized () showMinimized = unbound qt slot showMinimized of QDialog type X. showMinimized () showNormal = unbound qt slot showNormal of QDialog type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QDialog type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeGripEnabled = None sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QDialog type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QDialog type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QDialog type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type X. tabletEvent (a, b) tabletTracking = None testAttribute = unbound qt slot testAttribute of QDialog type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QDialog type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QDialog type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QDialog type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QDialog type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QDialog type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QDialog type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QDialog type X. unsetLocale (a) update = unbound qt slot update of QDialog type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QDialog type X. updateGeometry (a) updatesEnabled = None visible = None visibleRegion = unbound qt slot visibleRegion of QDialog type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of QDialog type X. widthMM (a) -> int winId = unbound qt slot winId of QDialog type X. winId (a) window = unbound qt slot window of QDialog type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QDialog type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QDialog type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QDialog type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QDialog type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QDialog type X. windowRole (a) -> str windowState = unbound qt slot windowState of QDialog type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QDialog type windowType = unbound qt slot windowType of QDialog type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QDialog dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class TRHTabWidget ( PythonQt.QtGui.QTabWidget ) Method resolution order: TRHTabWidget PythonQt.QtGui.QTabWidget PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, *args, **kwargs) Attributes DrawChildren = 2 DrawWindowBackground = 1 East = 3 IgnoreMask = 4 North = 0 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' Rounded = 0 South = 1 TabPosition = class 'PythonQt.QtGui.TabPosition' TabShape = class 'PythonQt.QtGui.TabShape' Triangular = 1 West = 2 acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type X. actionEvent (a, b) actions = unbound qt slot actions of QTabWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QTabWidget type X. activateWindow (a) addAction = unbound qt slot addAction of QTabWidget type X. addAction (a, b) addActions = unbound qt slot addActions of QTabWidget type X. addActions (a, b) addTab = unbound qt slot addTab of QTabWidget type X. addTab (a, b, c, d) -> int adjustSize = unbound qt slot adjustSize of QTabWidget type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QTabWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QTabWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QTabWidget type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of QTabWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QTabWidget type X. childEvent (a, b) children = unbound qt slot children of QTabWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clear = unbound qt slot clear of QTabWidget type X. clear (a) clearFocus = unbound qt slot clearFocus of QTabWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of QTabWidget type X. clearMask (a) close = unbound qt slot close of QTabWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QTabWidget type X. colorCount (a) -> int connect = unbound qt slot connect of QTabWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QTabWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QTabWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None cornerWidget = unbound qt slot cornerWidget of QTabWidget type X. cornerWidget (a, b) -> PythonQt.QtGui.QWidget count = None createWinId = unbound qt slot createWinId of QTabWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget currentChanged = unbound qt signal currentChanged of QTabWidget type currentIndex = None currentWidget = unbound qt slot currentWidget of QTabWidget type X. currentWidget (a) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QTabWidget type customEvent = unbound qt slot py_q_customEvent of QTabWidget type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QTabWidget type X. deleteLater () depth = unbound qt slot depth of QTabWidget type X. depth (a) -> int destroy = unbound qt slot destroy of QTabWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QTabWidget type devType = unbound qt slot py_q_devType of QTabWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QTabWidget type X. disconnect (a, b, c, d) -> bool documentMode = None dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type X. effectiveWinId (a) elideMode = None enabled = None ensurePolished = unbound qt slot ensurePolished of QTabWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type X. enterEvent (a, b) event = unbound qt slot py_q_event of QTabWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of QTabWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QTabWidget type X. findChildren (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QTabWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QTabWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QTabWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QTabWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QTabWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QTabWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QTabWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QTabWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QTabWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QTabWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QTabWidget type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type X. hideEvent (a, b) iconSize = QSize (QSize at: 0x0) indexOf = unbound qt slot indexOf of QTabWidget type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QTabWidget type X. initPainter (a, b) initStyleOption = unbound qt slot initStyleOption of QTabWidget type X. initStyleOption (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QTabWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QTabWidget type X. insertActions (a, b, c) insertTab = unbound qt slot insertTab of QTabWidget type X. insertTab (a, b, c, d, e) -> int installEventFilter = unbound qt slot installEventFilter of QTabWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QTabWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QTabWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QTabWidget type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QTabWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QTabWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QTabWidget type X. isModal (a) -> bool isMovable = unbound qt slot isMovable of QTabWidget type X. isMovable (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type X. isSignalConnected (a, b) -> bool isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type X. isTabEnabled (a, b) -> bool isVisible = unbound qt slot isVisible of QTabWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QTabWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QTabWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QTabWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QTabWidget type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QTabWidget type X. killTimer (a, b) layout = unbound qt slot layout of QTabWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QTabWidget type X. lower () mapFrom = unbound qt slot mapFrom of QTabWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QTabWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QTabWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QTabWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QTabWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QTabWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QTabWidget type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type X. mouseReleaseEvent (a, b) mouseTracking = None movable = None move = unbound qt slot move of QTabWidget type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QTabWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QTabWidget type overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QTabWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QTabWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QTabWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QTabWidget type X. property (a, b) -> object raise = unbound qt slot raise of QTabWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QTabWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QTabWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QTabWidget type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type X. removeEventFilter (a, b) removeTab = unbound qt slot removeTab of QTabWidget type X. removeTab (a, b) render = unbound qt slot render of QTabWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QTabWidget type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QTabWidget type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type X. restoreGeometry (a, b) -> bool saveGeometry = unbound qt slot saveGeometry of QTabWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QTabWidget type X. scroll (a, b, c, d) sender = unbound qt slot sender of QTabWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QTabWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QTabWidget type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type X. setContextMenuPolicy (a, b) setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type X. setCornerWidget (a, b, c) setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type X. setCurrentIndex (a) setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type X. setCurrentWidget (a) setCursor = unbound qt slot setCursor of QTabWidget type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QTabWidget type X. setDisabled (a) setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type X. setDocumentMode (a, b) setElideMode = unbound qt slot setElideMode of QTabWidget type X. setElideMode (a, b) setEnabled = unbound qt slot setEnabled of QTabWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QTabWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QTabWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QTabWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QTabWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QTabWidget type X. setHidden (a) setIconSize = unbound qt slot setIconSize of QTabWidget type X. setIconSize (a, b) setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QTabWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QTabWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of QTabWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type X. setMinimumWidth (a, b) setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type X. setMouseTracking (a, b) setMovable = unbound qt slot setMovable of QTabWidget type X. setMovable (a, b) setObjectName = unbound qt slot setObjectName of QTabWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QTabWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of QTabWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QTabWidget type X. setProperty (a, b, c) -> bool setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type X. setShortcutEnabled (a, b, c) setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QTabWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QTabWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type X. setStyleSheet (a) setTabBar = unbound qt slot setTabBar of QTabWidget type X. setTabBar (a, b) setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type X. setTabBarAutoHide (a, b) setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type X. setTabEnabled (a, b, c) setTabIcon = unbound qt slot setTabIcon of QTabWidget type X. setTabIcon (a, b, c) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type X. setTabOrder (a, b) setTabPosition = unbound qt slot setTabPosition of QTabWidget type X. setTabPosition (a, b) setTabShape = unbound qt slot setTabShape of QTabWidget type X. setTabShape (a, b) setTabText = unbound qt slot setTabText of QTabWidget type X. setTabText (a, b, c) setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type X. setTabToolTip (a, b, c) setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type X. setTabWhatsThis (a, b, c) setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type X. setTabsClosable (a, b) setToolTip = unbound qt slot setToolTip of QTabWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type X. setUpdatesEnabled (a, b) setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type X. setUsesScrollButtons (a, b) setVisible = unbound qt slot py_q_setVisible of QTabWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QTabWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QTabWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QTabWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QTabWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QTabWidget type X. show () showEvent = unbound qt slot py_q_showEvent of QTabWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of QTabWidget type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QTabWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of QTabWidget type X. showMinimized () showNormal = unbound qt slot showNormal of QTabWidget type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QTabWidget type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QTabWidget type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QTabWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabBar = unbound qt slot tabBar of QTabWidget type X. tabBar (a) -> PythonQt.QtGui.QTabBar tabBarAutoHide = None tabBarClicked = unbound qt signal tabBarClicked of QTabWidget type tabBarDoubleClicked = unbound qt signal tabBarDoubleClicked of QTabWidget type tabCloseRequested = unbound qt signal tabCloseRequested of QTabWidget type tabIcon = unbound qt slot tabIcon of QTabWidget type X. tabIcon (a, b) -> PythonQt.QtGui.QIcon tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type X. tabInserted (a, b) tabPosition = None tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type X. tabRemoved (a, b) tabShape = None tabText = unbound qt slot tabText of QTabWidget type X. tabText (a, b) -> str tabToolTip = unbound qt slot tabToolTip of QTabWidget type X. tabToolTip (a, b) -> str tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type X. tabWhatsThis (a, b) -> str tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type X. tabletEvent (a, b) tabletTracking = None tabsClosable = None testAttribute = unbound qt slot testAttribute of QTabWidget type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QTabWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QTabWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QTabWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QTabWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QTabWidget type X. unsetLocale (a) update = unbound qt slot update of QTabWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QTabWidget type X. updateGeometry (a) updatesEnabled = None usesScrollButtons = None visible = None visibleRegion = unbound qt slot visibleRegion of QTabWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type X. wheelEvent (a, b) widget = unbound qt slot widget of QTabWidget type X. widget (a, b) -> PythonQt.QtGui.QWidget width = None widthMM = unbound qt slot widthMM of QTabWidget type X. widthMM (a) -> int winId = unbound qt slot winId of QTabWidget type X. winId (a) window = unbound qt slot window of QTabWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QTabWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QTabWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QTabWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QTabWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QTabWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of QTabWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QTabWidget type windowType = unbound qt slot windowType of QTabWidget type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QTabWidget dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class TRMsgSimple ( typerig.gui.QtGui.QVBoxLayout ) # - Classes ------------------------------- # -- Messages & Dialogs ------------------- Method resolution order: TRMsgSimple typerig.gui.QtGui.QVBoxLayout PythonQt.QtGui.QVBoxLayout PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, msg) Attributes BottomToTop = 3 Direction = class 'PythonQt.QtGui.Direction' Down = 2 LeftToRight = 0 RightToLeft = 1 SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' TopToBottom = 2 Up = 3 activate = unbound qt slot activate of QVBoxLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QVBoxLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QVBoxLayout type X. addLayout (a, b, c) addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type X. addSpacerItem (a, b) addSpacing = unbound qt slot addSpacing of QVBoxLayout type X. addSpacing (a, b) addStretch = unbound qt slot addStretch of QVBoxLayout type X. addStretch (a, b) addStrut = unbound qt slot addStrut of QVBoxLayout type X. addStrut (a, b) addWidget = unbound qt slot addWidget of QVBoxLayout type X. addWidget (a, b, c, d) adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QVBoxLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QVBoxLayout type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type X. childEvent (a, b) children = unbound qt slot children of QVBoxLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize connect = unbound qt slot connect of QVBoxLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QVBoxLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QVBoxLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QVBoxLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QVBoxLayout type direction = unbound qt slot direction of QVBoxLayout type X. direction (a) disconnect = unbound qt slot disconnect of QVBoxLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QVBoxLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QVBoxLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QVBoxLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QVBoxLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name insertItem = unbound qt slot insertItem of QVBoxLayout type X. insertItem (a, b, c) insertLayout = unbound qt slot insertLayout of QVBoxLayout type X. insertLayout (a, b, c, d) insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type X. insertSpacerItem (a, b, c) insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type X. insertSpacing (a, b, c) insertStretch = unbound qt slot insertStretch of QVBoxLayout type X. insertStretch (a, b, c) insertWidget = unbound qt slot insertWidget of QVBoxLayout type X. insertWidget (a, b, c, d, e) installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QVBoxLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QVBoxLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QVBoxLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QVBoxLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QVBoxLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QVBoxLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QVBoxLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QVBoxLayout type parent = unbound qt slot parent of QVBoxLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QVBoxLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QVBoxLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QVBoxLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QVBoxLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem sender = unbound qt slot sender of QVBoxLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QVBoxLayout type X. setAlignment (a, b, c) -> bool setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type X. setContentsMargins (a, b, c, d, e) setDirection = unbound qt slot setDirection of QVBoxLayout type X. setDirection (a, b) setEnabled = unbound qt slot setEnabled of QVBoxLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type X. setGeometry (a, b) setMargin = unbound qt slot setMargin of QVBoxLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QVBoxLayout type X. setObjectName (a, b) setParent = unbound qt slot setParent of QVBoxLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QVBoxLayout type X. setProperty (a, b, c) -> bool setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QVBoxLayout type X. setSpacing (a, b) setStretch = unbound qt slot setStretch of QVBoxLayout type X. setStretch (a, b, c) setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type X. setStretchFactor (a, b, c) -> bool signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QVBoxLayout type X. startTimer (a, b, c) -> int stretch = unbound qt slot stretch of QVBoxLayout type X. stretch (a, b) -> int takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QVBoxLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QVBoxLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QVBoxLayout type X. update (a) widget = unbound qt slot py_q_widget of QVBoxLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QVBoxLayout dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class TRSliderCtrl ( typerig.gui.QtGui.QGridLayout ) # -- Sliders ------------------------------ Method resolution order: TRSliderCtrl typerig.gui.QtGui.QGridLayout PythonQt.QtGui.QGridLayout PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, edt_0, edt_1, edt_pos, spb_step) refreshSlider (self) reset (self) sliderChange (self) Attributes SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' activate = unbound qt slot activate of QGridLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QGridLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QGridLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QGridLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QGridLayout type X. addLayout (a, b, c, d, e, f, g) addWidget = unbound qt slot addWidget of QGridLayout type X. addWidget (a, b, c, d, e, f, g) adoptLayout = unbound qt slot adoptLayout of QGridLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QGridLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QGridLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QGridLayout type X. blockSignals (a, b) -> bool cellRect = unbound qt slot cellRect of QGridLayout type X. cellRect (a, b, c) -> PythonQt.QtCore.QRect childEvent = unbound qt slot py_q_childEvent of QGridLayout type X. childEvent (a, b) children = unbound qt slot children of QGridLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize columnCount = unbound qt slot columnCount of QGridLayout type X. columnCount (a) -> int columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type X. columnMinimumWidth (a, b) -> int columnStretch = unbound qt slot columnStretch of QGridLayout type X. columnStretch (a, b) -> int connect = unbound qt slot connect of QGridLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QGridLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QGridLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QGridLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QGridLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QGridLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QGridLayout type disconnect = unbound qt slot disconnect of QGridLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QGridLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QGridLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QGridLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QGridLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type X. horizontalSpacing (a) -> int indexOf = unbound qt slot py_q_indexOf of QGridLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name installEventFilter = unbound qt slot installEventFilter of QGridLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QGridLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QGridLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QGridLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QGridLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QGridLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type X. itemAtPosition (a, b, c) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QGridLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QGridLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QGridLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QGridLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QGridLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QGridLayout type originCorner = unbound qt slot originCorner of QGridLayout type X. originCorner (a) parent = unbound qt slot parent of QGridLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QGridLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QGridLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QGridLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QGridLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QGridLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem rowCount = unbound qt slot rowCount of QGridLayout type X. rowCount (a) -> int rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type X. rowMinimumHeight (a, b) -> int rowStretch = unbound qt slot rowStretch of QGridLayout type X. rowStretch (a, b) -> int sender = unbound qt slot sender of QGridLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QGridLayout type X. setAlignment (a, b, c) -> bool setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type X. setColumnMinimumWidth (a, b, c) setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type X. setColumnStretch (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type X. setContentsMargins (a, b, c, d, e) setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type X. setDefaultPositioning (a, b, c) setEnabled = unbound qt slot setEnabled of QGridLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type X. setGeometry (a, b) setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type X. setHorizontalSpacing (a, b) setMargin = unbound qt slot setMargin of QGridLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QGridLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QGridLayout type X. setObjectName (a, b) setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type X. setOriginCorner (a, b) setParent = unbound qt slot setParent of QGridLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QGridLayout type X. setProperty (a, b, c) -> bool setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type X. setRowMinimumHeight (a, b, c) setRowStretch = unbound qt slot setRowStretch of QGridLayout type X. setRowStretch (a, b, c) setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QGridLayout type X. setSpacing (a, b) setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type X. setVerticalSpacing (a, b) signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QGridLayout type X. startTimer (a, b, c) -> int takeAt = unbound qt slot py_q_takeAt of QGridLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QGridLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QGridLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QGridLayout type X. update (a) verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type X. verticalSpacing (a) -> int widget = unbound qt slot py_q_widget of QGridLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QGridLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QGridLayout dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class TRTableView ( PythonQt.QtGui.QTableWidget ) # -- Tables ------------------------------------------------------ Method resolution order: TRTableView PythonQt.QtGui.QTableWidget PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, data) getTable (self, raw =False ) markChange (self, item) setTable (self, data, sortData =(True, True) , indexColCheckable =None ) Attributes AboveItem = 1 AdjustIgnored = 0 AdjustToContents = 2 AdjustToContentsOnFirstShow = 1 AllEditTriggers = 31 AnimatingState = 6 AnyKeyPressed = 16 BelowItem = 2 Box = 1 CollapsingState = 5 ContiguousSelection = 4 CurrentChanged = 1 CursorAction = class 'PythonQt.QtGui.CursorAction' DoubleClicked = 2 DragDrop = 3 DragDropMode = class 'PythonQt.QtGui.DragDropMode' DragOnly = 1 DragSelectingState = 2 DraggingState = 1 DrawChildren = 2 DrawWindowBackground = 1 DropIndicatorPosition = class 'PythonQt.QtGui.DropIndicatorPosition' DropOnly = 2 EditKeyPressed = 8 EditTrigger = class 'PythonQt.QtGui.EditTrigger' EditTriggers = class 'PythonQt.QtGui.EditTriggers' EditingState = 3 EnsureVisible = 0 ExpandingState = 4 ExtendedSelection = 3 HLine = 4 IgnoreMask = 4 InternalMove = 4 MoveDown = 1 MoveEnd = 5 MoveHome = 4 MoveLeft = 2 MoveNext = 8 MovePageDown = 7 MovePageUp = 6 MovePrevious = 9 MoveRight = 3 MoveUp = 0 MultiSelection = 2 NoDragDrop = 0 NoEditTriggers = 0 NoFrame = 0 NoSelection = 0 NoState = 0 OnItem = 0 OnViewport = 3 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' Panel = 2 PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 Plain = 16 PositionAtBottom = 2 PositionAtCenter = 3 PositionAtTop = 1 Raised = 32 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' ScrollHint = class 'PythonQt.QtGui.ScrollHint' ScrollMode = class 'PythonQt.QtGui.ScrollMode' ScrollPerItem = 0 ScrollPerPixel = 1 SelectColumns = 2 SelectItems = 0 SelectRows = 1 SelectedClicked = 4 SelectionBehavior = class 'PythonQt.QtGui.SelectionBehavior' SelectionMode = class 'PythonQt.QtGui.SelectionMode' Shadow = class 'PythonQt.QtGui.Shadow' Shadow_Mask = 240 Shape = class 'PythonQt.QtGui.Shape' Shape_Mask = 15 SingleSelection = 1 SizeAdjustPolicy = class 'PythonQt.QtGui.SizeAdjustPolicy' State = class 'PythonQt.QtGui.State' StyleMask = class 'PythonQt.QtGui.StyleMask' StyledPanel = 6 Sunken = 48 VLine = 5 WinPanel = 3 acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QTableWidget type X. actionEvent (a, b) actions = unbound qt slot actions of QTableWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QTableWidget type X. activateWindow (a) activated = unbound qt signal activated of QTableWidget type addAction = unbound qt slot addAction of QTableWidget type X. addAction (a, b) addActions = unbound qt slot addActions of QTableWidget type X. addActions (a, b) addScrollBarWidget = unbound qt slot addScrollBarWidget of QTableWidget type X. addScrollBarWidget (a, b, c) adjustSize = unbound qt slot adjustSize of QTableWidget type X. adjustSize (a) alternatingRowColors = None autoFillBackground = None autoScroll = None autoScrollMargin = None backgroundRole = unbound qt slot backgroundRole of QTableWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QTableWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QTableWidget type X. blockSignals (a, b) -> bool cellActivated = unbound qt signal cellActivated of QTableWidget type cellChanged = unbound qt signal cellChanged of QTableWidget type cellClicked = unbound qt signal cellClicked of QTableWidget type cellDoubleClicked = unbound qt signal cellDoubleClicked of QTableWidget type cellEntered = unbound qt signal cellEntered of QTableWidget type cellPressed = unbound qt signal cellPressed of QTableWidget type cellWidget = unbound qt slot cellWidget of QTableWidget type X. cellWidget (a, b, c) -> PythonQt.QtGui.QWidget changeEvent = unbound qt slot py_q_changeEvent of QTableWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of QTableWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QTableWidget type X. childEvent (a, b) children = unbound qt slot children of QTableWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clear = unbound qt slot clear of QTableWidget type X. clear () clearContents = unbound qt slot clearContents of QTableWidget type X. clearContents () clearFocus = unbound qt slot clearFocus of QTableWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of QTableWidget type X. clearMask (a) clearSelection = unbound qt slot clearSelection of QTableWidget type X. clearSelection () clearSpans = unbound qt slot clearSpans of QTableWidget type X. clearSpans (a) clicked = unbound qt signal clicked of QTableWidget type close = unbound qt slot close of QTableWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QTableWidget type X. closeEvent (a, b) closePersistentEditor = unbound qt slot closePersistentEditor of QTableWidget type X. closePersistentEditor (a, b) colorCount = unbound qt slot colorCount of QTableWidget type X. colorCount (a) -> int column = unbound qt slot column of QTableWidget type X. column (a, b) -> int columnAt = unbound qt slot columnAt of QTableWidget type X. columnAt (a, b) -> int columnCount = None columnSpan = unbound qt slot columnSpan of QTableWidget type X. columnSpan (a, b, c) -> int columnViewportPosition = unbound qt slot columnViewportPosition of QTableWidget type X. columnViewportPosition (a, b) -> int columnWidth = unbound qt slot columnWidth of QTableWidget type X. columnWidth (a, b) -> int connect = unbound qt slot connect of QTableWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QTableWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QTableWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTableWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None cornerButtonEnabled = None cornerWidget = unbound qt slot cornerWidget of QTableWidget type X. cornerWidget (a) -> PythonQt.QtGui.QWidget createWinId = unbound qt slot createWinId of QTableWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTableWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget currentCellChanged = unbound qt signal currentCellChanged of QTableWidget type currentColumn = unbound qt slot currentColumn of QTableWidget type X. currentColumn (a) -> int currentIndex = unbound qt slot currentIndex of QTableWidget type X. currentIndex (a) -> PythonQt.QtCore.QModelIndex currentItem = unbound qt slot currentItem of QTableWidget type X. currentItem (a) -> PythonQt.QtGui.QTableWidgetItem currentItemChanged = unbound qt signal currentItemChanged of QTableWidget type currentRow = unbound qt slot currentRow of QTableWidget type X. currentRow (a) -> int cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QTableWidget type customEvent = unbound qt slot py_q_customEvent of QTableWidget type X. customEvent (a, b) defaultDropAction = None delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QTableWidget type X. deleteLater () depth = unbound qt slot depth of QTableWidget type X. depth (a) -> int destroy = unbound qt slot destroy of QTableWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QTableWidget type devType = unbound qt slot py_q_devType of QTableWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QTableWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QTableWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTableWidget type X. devicePixelRatioFScale () -> float dirtyRegionOffset = unbound qt slot dirtyRegionOffset of QTableWidget type X. dirtyRegionOffset (a) -> PythonQt.QtCore.QPoint disconnect = unbound qt slot disconnect of QTableWidget type X. disconnect (a, b, c, d) -> bool doAutoScroll = unbound qt slot doAutoScroll of QTableWidget type X. doAutoScroll (a) doItemsLayout = unbound qt slot py_q_doItemsLayout of QTableWidget type X. doItemsLayout (a) doubleClicked = unbound qt signal doubleClicked of QTableWidget type dragDropMode = None dragDropOverwriteMode = None dragEnabled = None dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTableWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTableWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTableWidget type X. dragMoveEvent (a, b) drawFrame = unbound qt slot drawFrame of QTableWidget type X. drawFrame (a, b) dropEvent = unbound qt slot py_q_dropEvent of QTableWidget type X. dropEvent (a, b) dropIndicatorPosition = unbound qt slot dropIndicatorPosition of QTableWidget type X. dropIndicatorPosition (a) -> int dropMimeData = unbound qt slot py_q_dropMimeData of QTableWidget type X. dropMimeData (a, b, c, d, e) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QTableWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QTableWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTableWidget type X. dynamicPropertyNames (a) edit = unbound qt slot py_q_edit of QTableWidget type X. edit (a, b, c, d) -> bool editItem = unbound qt slot editItem of QTableWidget type X. editItem (a, b) editTriggers = None effectiveWinId = unbound qt slot effectiveWinId of QTableWidget type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of QTableWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QTableWidget type X. enterEvent (a, b) entered = unbound qt signal entered of QTableWidget type event = unbound qt slot py_q_event of QTableWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QTableWidget type X. eventFilter (a, b, c) -> bool executeDelayedItemsLayout = unbound qt slot executeDelayedItemsLayout of QTableWidget type X. executeDelayedItemsLayout (a) findChild = unbound qt slot findChild of QTableWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QTableWidget type X. findChildren (a, b, c) -> tuple findItems = unbound qt slot findItems of QTableWidget type X. findItems (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QTableWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QTableWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTableWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QTableWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QTableWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QTableWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QTableWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QTableWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameRect = QRect (QRect at: 0x0) frameShadow = None frameShape = None frameSize = QSize (QSize at: 0x0) frameStyle = unbound qt slot frameStyle of QTableWidget type X. frameStyle (a) -> int frameWidth = None fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QTableWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QTableWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QTableWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QTableWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QTableWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QTableWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTableWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget gridStyle = None hasAutoScroll = unbound qt slot hasAutoScroll of QTableWidget type X. hasAutoScroll (a) -> bool hasFocus = unbound qt slot hasFocus of QTableWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTableWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QTableWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QTableWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QTableWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QTableWidget type X. hide () hideColumn = unbound qt slot hideColumn of QTableWidget type X. hideColumn (a) hideEvent = unbound qt slot py_q_hideEvent of QTableWidget type X. hideEvent (a, b) hideRow = unbound qt slot hideRow of QTableWidget type X. hideRow (a) horizontalHeader = unbound qt slot horizontalHeader of QTableWidget type X. horizontalHeader (a) -> PythonQt.QtGui.QHeaderView horizontalHeaderItem = unbound qt slot horizontalHeaderItem of QTableWidget type X. horizontalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem horizontalOffset = unbound qt slot py_q_horizontalOffset of QTableWidget type X. horizontalOffset (a) -> int horizontalScrollBar = unbound qt slot horizontalScrollBar of QTableWidget type X. horizontalScrollBar (a) -> PythonQt.QtGui.QScrollBar horizontalScrollBarPolicy = None horizontalScrollMode = None iconSize = QSize (QSize at: 0x0) iconSizeChanged = unbound qt signal iconSizeChanged of QTableWidget type indexAt = unbound qt slot py_q_indexAt of QTableWidget type X. indexAt (a, b) -> PythonQt.QtCore.QModelIndex indexFromItem = unbound qt slot indexFromItem of QTableWidget type X. indexFromItem (a, b) -> PythonQt.QtCore.QModelIndex indexWidget = unbound qt slot indexWidget of QTableWidget type X. indexWidget (a, b) -> PythonQt.QtGui.QWidget inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QTableWidget type X. initPainter (a, b) initStyleOption = unbound qt slot initStyleOption of QTableWidget type X. initStyleOption (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTableWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTableWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QTableWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QTableWidget type X. insertActions (a, b, c) insertColumn = unbound qt slot insertColumn of QTableWidget type X. insertColumn (a) insertRow = unbound qt slot insertRow of QTableWidget type X. insertRow (a) installEventFilter = unbound qt slot installEventFilter of QTableWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QTableWidget type X. isAncestorOf (a, b) -> bool isColumnHidden = unbound qt slot isColumnHidden of QTableWidget type X. isColumnHidden (a, b) -> bool isCornerButtonEnabled = unbound qt slot isCornerButtonEnabled of QTableWidget type X. isCornerButtonEnabled (a) -> bool isEnabled = unbound qt slot isEnabled of QTableWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QTableWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QTableWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QTableWidget type X. isHidden (a) -> bool isIndexHidden = unbound qt slot py_q_isIndexHidden of QTableWidget type X. isIndexHidden (a, b) -> bool isLeftToRight = unbound qt slot isLeftToRight of QTableWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QTableWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QTableWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QTableWidget type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QTableWidget type X. isRightToLeft (a) -> bool isRowHidden = unbound qt slot isRowHidden of QTableWidget type X. isRowHidden (a, b) -> bool isSignalConnected = unbound qt slot isSignalConnected of QTableWidget type X. isSignalConnected (a, b) -> bool isSortingEnabled = unbound qt slot isSortingEnabled of QTableWidget type X. isSortingEnabled (a) -> bool isVisible = unbound qt slot isVisible of QTableWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QTableWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QTableWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QTableWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QTableWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QTableWidget type X. isWindowType (a) -> bool item = unbound qt slot item of QTableWidget type X. item (a, b, c) -> PythonQt.QtGui.QTableWidgetItem itemActivated = unbound qt signal itemActivated of QTableWidget type itemAt = unbound qt slot itemAt of QTableWidget type X. itemAt (a, b, c) -> PythonQt.QtGui.QTableWidgetItem itemChanged = unbound qt signal itemChanged of QTableWidget type itemClicked = unbound qt signal itemClicked of QTableWidget type itemDelegate = unbound qt slot itemDelegate of QTableWidget type X. itemDelegate (a, b) -> PythonQt.QtGui.QAbstractItemDelegate itemDelegateForColumn = unbound qt slot itemDelegateForColumn of QTableWidget type X. itemDelegateForColumn (a, b) -> PythonQt.QtGui.QAbstractItemDelegate itemDelegateForRow = unbound qt slot itemDelegateForRow of QTableWidget type X. itemDelegateForRow (a, b) -> PythonQt.QtGui.QAbstractItemDelegate itemDoubleClicked = unbound qt signal itemDoubleClicked of QTableWidget type itemEntered = unbound qt signal itemEntered of QTableWidget type itemFromIndex = unbound qt slot itemFromIndex of QTableWidget type X. itemFromIndex (a, b) -> PythonQt.QtGui.QTableWidgetItem itemPressed = unbound qt signal itemPressed of QTableWidget type itemPrototype = unbound qt slot itemPrototype of QTableWidget type X. itemPrototype (a) -> PythonQt.QtGui.QTableWidgetItem itemSelectionChanged = unbound qt signal itemSelectionChanged of QTableWidget type items = unbound qt slot items of QTableWidget type X. items (a, b) -> tuple keyPressEvent = unbound qt slot py_q_keyPressEvent of QTableWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTableWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTableWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget keyboardSearch = unbound qt slot py_q_keyboardSearch of QTableWidget type X. keyboardSearch (a, b) killTimer = unbound qt slot killTimer of QTableWidget type X. killTimer (a, b) layout = unbound qt slot layout of QTableWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QTableWidget type X. leaveEvent (a, b) lineWidth = None locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QTableWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QTableWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QTableWidget type X. lower () mapFrom = unbound qt slot mapFrom of QTableWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QTableWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QTableWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QTableWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QTableWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QTableWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QTableWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumViewportSize = unbound qt slot maximumViewportSize of QTableWidget type X. maximumViewportSize (a) -> PythonQt.QtCore.QSize maximumWidth = None metaObject = unbound qt slot metaObject of QTableWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QTableWidget type X. metric (a, b) -> int midLineWidth = None mimeTypes = unbound qt slot py_q_mimeTypes of QTableWidget type X. mimeTypes (a) -> tuple minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None model = unbound qt slot model of QTableWidget type X. model (a) -> PythonQt.QtCore.QAbstractItemModel mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTableWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTableWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTableWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QTableWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTableWidget type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of QTableWidget type X. move (a, b, c) moveCursor = unbound qt slot moveCursor of QTableWidget type X. moveCursor (a, b, c) -> PythonQt.QtCore.QModelIndex moveEvent = unbound qt slot py_q_moveEvent of QTableWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QTableWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QTableWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QTableWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QTableWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QTableWidget type openPersistentEditor = unbound qt slot openPersistentEditor of QTableWidget type X. openPersistentEditor (a, b) overrideWindowFlags = unbound qt slot overrideWindowFlags of QTableWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QTableWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QTableWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QTableWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QTableWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QTableWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QTableWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QTableWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QTableWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) pressed = unbound qt signal pressed of QTableWidget type previousInFocusChain = unbound qt slot previousInFocusChain of QTableWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QTableWidget type X. property (a, b) -> object raise = unbound qt slot raise of QTableWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QTableWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of QTableWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QTableWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QTableWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QTableWidget type X. removeAction (a, b) removeCellWidget = unbound qt slot removeCellWidget of QTableWidget type X. removeCellWidget (a, b, c) removeColumn = unbound qt slot removeColumn of QTableWidget type X. removeColumn (a) removeEventFilter = unbound qt slot removeEventFilter of QTableWidget type X. removeEventFilter (a, b) removeRow = unbound qt slot removeRow of QTableWidget type X. removeRow (a) render = unbound qt slot render of QTableWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QTableWidget type X. repaint (a, b, c, d, e) reset = unbound qt slot py_q_reset of QTableWidget type X. reset (a) resize = unbound qt slot resize of QTableWidget type X. resize (a, b, c) resizeColumnToContents = unbound qt slot resizeColumnToContents of QTableWidget type X. resizeColumnToContents (a) resizeColumnsToContents = unbound qt slot resizeColumnsToContents of QTableWidget type X. resizeColumnsToContents () resizeEvent = unbound qt slot py_q_resizeEvent of QTableWidget type X. resizeEvent (a, b) resizeRowToContents = unbound qt slot resizeRowToContents of QTableWidget type X. resizeRowToContents (a) resizeRowsToContents = unbound qt slot resizeRowsToContents of QTableWidget type X. resizeRowsToContents () restoreGeometry = unbound qt slot restoreGeometry of QTableWidget type X. restoreGeometry (a, b) -> bool rootIndex = unbound qt slot rootIndex of QTableWidget type X. rootIndex (a) -> PythonQt.QtCore.QModelIndex row = unbound qt slot row of QTableWidget type X. row (a, b) -> int rowAt = unbound qt slot rowAt of QTableWidget type X. rowAt (a, b) -> int rowCount = None rowHeight = unbound qt slot rowHeight of QTableWidget type X. rowHeight (a, b) -> int rowSpan = unbound qt slot rowSpan of QTableWidget type X. rowSpan (a, b, c) -> int rowViewportPosition = unbound qt slot rowViewportPosition of QTableWidget type X. rowViewportPosition (a, b) -> int saveGeometry = unbound qt slot saveGeometry of QTableWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scheduleDelayedItemsLayout = unbound qt slot scheduleDelayedItemsLayout of QTableWidget type X. scheduleDelayedItemsLayout (a) scroll = unbound qt slot scroll of QTableWidget type X. scroll (a, b, c, d) scrollBarWidgets = unbound qt slot scrollBarWidgets of QTableWidget type X. scrollBarWidgets (a, b) -> tuple scrollContentsBy = unbound qt slot py_q_scrollContentsBy of QTableWidget type X. scrollContentsBy (a, b, c) scrollDirtyRegion = unbound qt slot scrollDirtyRegion of QTableWidget type X. scrollDirtyRegion (a, b, c) scrollTo = unbound qt slot py_q_scrollTo of QTableWidget type X. scrollTo (a, b, c) scrollToBottom = unbound qt slot scrollToBottom of QTableWidget type X. scrollToBottom () scrollToItem = unbound qt slot scrollToItem of QTableWidget type X. scrollToItem (a, b) scrollToTop = unbound qt slot scrollToTop of QTableWidget type X. scrollToTop () selectAll = unbound qt slot py_q_selectAll of QTableWidget type X. selectAll (a) selectColumn = unbound qt slot selectColumn of QTableWidget type X. selectColumn (a) selectRow = unbound qt slot selectRow of QTableWidget type X. selectRow (a) selectedIndexes = unbound qt slot py_q_selectedIndexes of QTableWidget type X. selectedIndexes (a) -> tuple selectedItems = unbound qt slot selectedItems of QTableWidget type X. selectedItems (a) -> tuple selectedRanges = unbound qt slot selectedRanges of QTableWidget type X. selectedRanges (a) -> tuple selectionBehavior = None selectionCommand = unbound qt slot py_q_selectionCommand of QTableWidget type X. selectionCommand (a, b, c) selectionMode = None selectionModel = unbound qt slot selectionModel of QTableWidget type X. selectionModel (a) -> PythonQt.QtGui.QItemSelectionModel sender = unbound qt slot sender of QTableWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QTableWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QTableWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QTableWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QTableWidget type X. setAccessibleName (a, b) setAlternatingRowColors = unbound qt slot setAlternatingRowColors of QTableWidget type X. setAlternatingRowColors (a, b) setAttribute = unbound qt slot setAttribute of QTableWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QTableWidget type X. setAutoFillBackground (a, b) setAutoScroll = unbound qt slot setAutoScroll of QTableWidget type X. setAutoScroll (a, b) setAutoScrollMargin = unbound qt slot setAutoScrollMargin of QTableWidget type X. setAutoScrollMargin (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QTableWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QTableWidget type X. setBaseSize (a, b, c) setCellWidget = unbound qt slot setCellWidget of QTableWidget type X. setCellWidget (a, b, c, d) setColumnCount = unbound qt slot setColumnCount of QTableWidget type X. setColumnCount (a, b) setColumnHidden = unbound qt slot setColumnHidden of QTableWidget type X. setColumnHidden (a, b, c) setColumnWidth = unbound qt slot setColumnWidth of QTableWidget type X. setColumnWidth (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QTableWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTableWidget type X. setContextMenuPolicy (a, b) setCornerButtonEnabled = unbound qt slot setCornerButtonEnabled of QTableWidget type X. setCornerButtonEnabled (a, b) setCornerWidget = unbound qt slot setCornerWidget of QTableWidget type X. setCornerWidget (a, b) setCurrentCell = unbound qt slot setCurrentCell of QTableWidget type X. setCurrentCell (a, b, c, d) setCurrentIndex = unbound qt slot setCurrentIndex of QTableWidget type X. setCurrentIndex (a) setCurrentItem = unbound qt slot setCurrentItem of QTableWidget type X. setCurrentItem (a, b, c) setCursor = unbound qt slot setCursor of QTableWidget type X. setCursor (a, b) setDefaultDropAction = unbound qt slot setDefaultDropAction of QTableWidget type X. setDefaultDropAction (a, b) setDirtyRegion = unbound qt slot setDirtyRegion of QTableWidget type X. setDirtyRegion (a, b) setDisabled = unbound qt slot setDisabled of QTableWidget type X. setDisabled (a) setDragDropMode = unbound qt slot setDragDropMode of QTableWidget type X. setDragDropMode (a, b) setDragDropOverwriteMode = unbound qt slot setDragDropOverwriteMode of QTableWidget type X. setDragDropOverwriteMode (a, b) setDragEnabled = unbound qt slot setDragEnabled of QTableWidget type X. setDragEnabled (a, b) setDropIndicatorShown = unbound qt slot setDropIndicatorShown of QTableWidget type X. setDropIndicatorShown (a, b) setEditTriggers = unbound qt slot setEditTriggers of QTableWidget type X. setEditTriggers (a, b) setEnabled = unbound qt slot setEnabled of QTableWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QTableWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QTableWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QTableWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QTableWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QTableWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QTableWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QTableWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QTableWidget type X. setForegroundRole (a, b) setFrameRect = unbound qt slot setFrameRect of QTableWidget type X. setFrameRect (a, b) setFrameShadow = unbound qt slot setFrameShadow of QTableWidget type X. setFrameShadow (a, b) setFrameShape = unbound qt slot setFrameShape of QTableWidget type X. setFrameShape (a, b) setFrameStyle = unbound qt slot setFrameStyle of QTableWidget type X. setFrameStyle (a, b) setGeometry = unbound qt slot setGeometry of QTableWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QTableWidget type X. setGraphicsEffect (a, b) setGridStyle = unbound qt slot setGridStyle of QTableWidget type X. setGridStyle (a, b) setHidden = unbound qt slot setHidden of QTableWidget type X. setHidden (a) setHorizontalHeader = unbound qt slot setHorizontalHeader of QTableWidget type X. setHorizontalHeader (a, b) setHorizontalHeaderItem = unbound qt slot setHorizontalHeaderItem of QTableWidget type X. setHorizontalHeaderItem (a, b, c) setHorizontalHeaderLabels = unbound qt slot setHorizontalHeaderLabels of QTableWidget type X. setHorizontalHeaderLabels (a, b) setHorizontalScrollBar = unbound qt slot setHorizontalScrollBar of QTableWidget type X. setHorizontalScrollBar (a, b) setHorizontalScrollBarPolicy = unbound qt slot setHorizontalScrollBarPolicy of QTableWidget type X. setHorizontalScrollBarPolicy (a, b) setHorizontalScrollMode = unbound qt slot setHorizontalScrollMode of QTableWidget type X. setHorizontalScrollMode (a, b) setIconSize = unbound qt slot setIconSize of QTableWidget type X. setIconSize (a, b) setIndexWidget = unbound qt slot setIndexWidget of QTableWidget type X. setIndexWidget (a, b, c) setInputMethodHints = unbound qt slot setInputMethodHints of QTableWidget type X. setInputMethodHints (a, b) setItem = unbound qt slot setItem of QTableWidget type X. setItem (a, b, c, d) setItemDelegate = unbound qt slot setItemDelegate of QTableWidget type X. setItemDelegate (a, b) setItemDelegateForColumn = unbound qt slot setItemDelegateForColumn of QTableWidget type X. setItemDelegateForColumn (a, b, c) setItemDelegateForRow = unbound qt slot setItemDelegateForRow of QTableWidget type X. setItemDelegateForRow (a, b, c) setItemPrototype = unbound qt slot setItemPrototype of QTableWidget type X. setItemPrototype (a, b) setLayout = unbound qt slot setLayout of QTableWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QTableWidget type X. setLayoutDirection (a, b) setLineWidth = unbound qt slot setLineWidth of QTableWidget type X. setLineWidth (a, b) setLocale = unbound qt slot setLocale of QTableWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of QTableWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QTableWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QTableWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QTableWidget type X. setMaximumWidth (a, b) setMidLineWidth = unbound qt slot setMidLineWidth of QTableWidget type X. setMidLineWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QTableWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QTableWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QTableWidget type X. setMinimumWidth (a, b) setModel = unbound qt slot py_q_setModel of QTableWidget type X. setModel (a, b) setMouseTracking = unbound qt slot setMouseTracking of QTableWidget type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of QTableWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QTableWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of QTableWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QTableWidget type X. setProperty (a, b, c) -> bool setRangeSelected = unbound qt slot setRangeSelected of QTableWidget type X. setRangeSelected (a, b, c) setRootIndex = unbound qt slot py_q_setRootIndex of QTableWidget type X. setRootIndex (a, b) setRowCount = unbound qt slot setRowCount of QTableWidget type X. setRowCount (a, b) setRowHeight = unbound qt slot setRowHeight of QTableWidget type X. setRowHeight (a, b, c) setRowHidden = unbound qt slot setRowHidden of QTableWidget type X. setRowHidden (a, b, c) setSelection = unbound qt slot py_q_setSelection of QTableWidget type X. setSelection (a, b, c) setSelectionBehavior = unbound qt slot setSelectionBehavior of QTableWidget type X. setSelectionBehavior (a, b) setSelectionMode = unbound qt slot setSelectionMode of QTableWidget type X. setSelectionMode (a, b) setSelectionModel = unbound qt slot py_q_setSelectionModel of QTableWidget type X. setSelectionModel (a, b) setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTableWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QTableWidget type X. setShortcutEnabled (a, b, c) setShowGrid = unbound qt slot setShowGrid of QTableWidget type X. setShowGrid (a) setSizeAdjustPolicy = unbound qt slot setSizeAdjustPolicy of QTableWidget type X. setSizeAdjustPolicy (a, b) setSizeIncrement = unbound qt slot setSizeIncrement of QTableWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QTableWidget type X. setSizePolicy (a, b, c) setSortingEnabled = unbound qt slot setSortingEnabled of QTableWidget type X. setSortingEnabled (a, b) setSpan = unbound qt slot setSpan of QTableWidget type X. setSpan (a, b, c, d, e) setState = unbound qt slot setState of QTableWidget type X. setState (a, b) setStatusTip = unbound qt slot setStatusTip of QTableWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QTableWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QTableWidget type X. setStyleSheet (a) setTabKeyNavigation = unbound qt slot setTabKeyNavigation of QTableWidget type X. setTabKeyNavigation (a, b) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTableWidget type X. setTabOrder (a, b) setTextElideMode = unbound qt slot setTextElideMode of QTableWidget type X. setTextElideMode (a, b) setToolTip = unbound qt slot setToolTip of QTableWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QTableWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTableWidget type X. setUpdatesEnabled (a, b) setVerticalHeader = unbound qt slot setVerticalHeader of QTableWidget type X. setVerticalHeader (a, b) setVerticalHeaderItem = unbound qt slot setVerticalHeaderItem of QTableWidget type X. setVerticalHeaderItem (a, b, c) setVerticalHeaderLabels = unbound qt slot setVerticalHeaderLabels of QTableWidget type X. setVerticalHeaderLabels (a, b) setVerticalScrollBar = unbound qt slot setVerticalScrollBar of QTableWidget type X. setVerticalScrollBar (a, b) setVerticalScrollBarPolicy = unbound qt slot setVerticalScrollBarPolicy of QTableWidget type X. setVerticalScrollBarPolicy (a, b) setVerticalScrollMode = unbound qt slot setVerticalScrollMode of QTableWidget type X. setVerticalScrollMode (a, b) setViewport = unbound qt slot setViewport of QTableWidget type X. setViewport (a, b) setViewportMargins = unbound qt slot setViewportMargins of QTableWidget type X. setViewportMargins (a, b, c, d, e) setVisible = unbound qt slot py_q_setVisible of QTableWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QTableWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QTableWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QTableWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QTableWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QTableWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QTableWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QTableWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QTableWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QTableWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QTableWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QTableWidget type X. setWindowTitle (a) setWordWrap = unbound qt slot setWordWrap of QTableWidget type X. setWordWrap (a, b) setupViewport = unbound qt slot py_q_setupViewport of QTableWidget type X. setupViewport (a, b) sharedPainter = unbound qt slot py_q_sharedPainter of QTableWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QTableWidget type X. show () showColumn = unbound qt slot showColumn of QTableWidget type X. showColumn (a) showDropIndicator = None showEvent = unbound qt slot py_q_showEvent of QTableWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of QTableWidget type X. showFullScreen () showGrid = None showMaximized = unbound qt slot showMaximized of QTableWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of QTableWidget type X. showMinimized () showNormal = unbound qt slot showNormal of QTableWidget type X. showNormal () showRow = unbound qt slot showRow of QTableWidget type X. showRow (a) signalsBlocked = unbound qt slot signalsBlocked of QTableWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeAdjustPolicy = None sizeHint = QSize (QSize at: 0x0) sizeHintForColumn = unbound qt slot py_q_sizeHintForColumn of QTableWidget type X. sizeHintForColumn (a, b) -> int sizeHintForIndex = unbound qt slot sizeHintForIndex of QTableWidget type X. sizeHintForIndex (a, b) -> PythonQt.QtCore.QSize sizeHintForRow = unbound qt slot py_q_sizeHintForRow of QTableWidget type X. sizeHintForRow (a, b) -> int sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) sortByColumn = unbound qt slot sortByColumn of QTableWidget type X. sortByColumn (a, b, c) sortItems = unbound qt slot sortItems of QTableWidget type X. sortItems (a, b, c) sortingEnabled = None stackUnder = unbound qt slot stackUnder of QTableWidget type X. stackUnder (a, b) startAutoScroll = unbound qt slot startAutoScroll of QTableWidget type X. startAutoScroll (a) startDrag = unbound qt slot py_q_startDrag of QTableWidget type X. startDrag (a, b) startTimer = unbound qt slot startTimer of QTableWidget type X. startTimer (a, b, c) -> int state = unbound qt slot state of QTableWidget type X. state (a) -> int statusTip = None stopAutoScroll = unbound qt slot stopAutoScroll of QTableWidget type X. stopAutoScroll (a) style = unbound qt slot style of QTableWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None supportedDropActions = unbound qt slot py_q_supportedDropActions of QTableWidget type X. supportedDropActions (a) tabKeyNavigation = None tabletEvent = unbound qt slot py_q_tabletEvent of QTableWidget type X. tabletEvent (a, b) tabletTracking = None takeHorizontalHeaderItem = unbound qt slot takeHorizontalHeaderItem of QTableWidget type X. takeHorizontalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem takeItem = unbound qt slot takeItem of QTableWidget type X. takeItem (a, b, c) -> PythonQt.QtGui.QTableWidgetItem takeVerticalHeaderItem = unbound qt slot takeVerticalHeaderItem of QTableWidget type X. takeVerticalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem testAttribute = unbound qt slot testAttribute of QTableWidget type X. testAttribute (a, b) -> bool textElideMode = None thread = unbound qt slot thread of QTableWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QTableWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QTableWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QTableWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QTableWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QTableWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTableWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QTableWidget type X. unsetLocale (a) update = unbound qt slot update of QTableWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QTableWidget type X. updateGeometry (a) updatesEnabled = None verticalHeader = unbound qt slot verticalHeader of QTableWidget type X. verticalHeader (a) -> PythonQt.QtGui.QHeaderView verticalHeaderItem = unbound qt slot verticalHeaderItem of QTableWidget type X. verticalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem verticalOffset = unbound qt slot py_q_verticalOffset of QTableWidget type X. verticalOffset (a) -> int verticalScrollBar = unbound qt slot verticalScrollBar of QTableWidget type X. verticalScrollBar (a) -> PythonQt.QtGui.QScrollBar verticalScrollBarPolicy = None verticalScrollMode = None viewOptions = unbound qt slot py_q_viewOptions of QTableWidget type X. viewOptions (a) -> PythonQt.QtGui.QStyleOptionViewItem viewport = unbound qt slot viewport of QTableWidget type X. viewport (a) -> PythonQt.QtGui.QWidget viewportEntered = unbound qt signal viewportEntered of QTableWidget type viewportEvent = unbound qt slot py_q_viewportEvent of QTableWidget type X. viewportEvent (a, b) -> bool viewportMargins = unbound qt slot viewportMargins of QTableWidget type X. viewportMargins (a) -> PythonQt.QtGui.QMargins viewportSizeHint = unbound qt slot py_q_viewportSizeHint of QTableWidget type X. viewportSizeHint (a) -> PythonQt.QtCore.QSize visible = None visibleRegion = unbound qt slot visibleRegion of QTableWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion visualColumn = unbound qt slot visualColumn of QTableWidget type X. visualColumn (a, b) -> int visualItemRect = unbound qt slot visualItemRect of QTableWidget type X. visualItemRect (a, b) -> PythonQt.QtCore.QRect visualRect = unbound qt slot py_q_visualRect of QTableWidget type X. visualRect (a, b) -> PythonQt.QtCore.QRect visualRegionForSelection = unbound qt slot py_q_visualRegionForSelection of QTableWidget type X. visualRegionForSelection (a, b) -> PythonQt.QtGui.QRegion visualRow = unbound qt slot visualRow of QTableWidget type X. visualRow (a, b) -> int whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QTableWidget type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of QTableWidget type X. widthMM (a) -> int winId = unbound qt slot winId of QTableWidget type X. winId (a) window = unbound qt slot window of QTableWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QTableWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QTableWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QTableWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QTableWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QTableWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of QTableWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QTableWidget type windowType = unbound qt slot windowType of QTableWidget type X. windowType (a) wordWrap = None x = None y = None Descriptors from PythonQt.QtGui.QTableWidget dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T class TRVTabWidget ( PythonQt.QtGui.QTabWidget ) Method resolution order: TRVTabWidget PythonQt.QtGui.QTabWidget PythonQt.PythonQtInstanceWrapper builtin .object Methods init (self, *args, **kwargs) Attributes DrawChildren = 2 DrawWindowBackground = 1 East = 3 IgnoreMask = 4 North = 0 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' Rounded = 0 South = 1 TabPosition = class 'PythonQt.QtGui.TabPosition' TabShape = class 'PythonQt.QtGui.TabShape' Triangular = 1 West = 2 acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type X. actionEvent (a, b) actions = unbound qt slot actions of QTabWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QTabWidget type X. activateWindow (a) addAction = unbound qt slot addAction of QTabWidget type X. addAction (a, b) addActions = unbound qt slot addActions of QTabWidget type X. addActions (a, b) addTab = unbound qt slot addTab of QTabWidget type X. addTab (a, b, c, d) -> int adjustSize = unbound qt slot adjustSize of QTabWidget type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QTabWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QTabWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QTabWidget type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of QTabWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QTabWidget type X. childEvent (a, b) children = unbound qt slot children of QTabWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clear = unbound qt slot clear of QTabWidget type X. clear (a) clearFocus = unbound qt slot clearFocus of QTabWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of QTabWidget type X. clearMask (a) close = unbound qt slot close of QTabWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QTabWidget type X. colorCount (a) -> int connect = unbound qt slot connect of QTabWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QTabWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QTabWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None cornerWidget = unbound qt slot cornerWidget of QTabWidget type X. cornerWidget (a, b) -> PythonQt.QtGui.QWidget count = None createWinId = unbound qt slot createWinId of QTabWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget currentChanged = unbound qt signal currentChanged of QTabWidget type currentIndex = None currentWidget = unbound qt slot currentWidget of QTabWidget type X. currentWidget (a) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QTabWidget type customEvent = unbound qt slot py_q_customEvent of QTabWidget type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QTabWidget type X. deleteLater () depth = unbound qt slot depth of QTabWidget type X. depth (a) -> int destroy = unbound qt slot destroy of QTabWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QTabWidget type devType = unbound qt slot py_q_devType of QTabWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QTabWidget type X. disconnect (a, b, c, d) -> bool documentMode = None dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type X. effectiveWinId (a) elideMode = None enabled = None ensurePolished = unbound qt slot ensurePolished of QTabWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type X. enterEvent (a, b) event = unbound qt slot py_q_event of QTabWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of QTabWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QTabWidget type X. findChildren (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QTabWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QTabWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QTabWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QTabWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QTabWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QTabWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QTabWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QTabWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QTabWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QTabWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QTabWidget type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type X. hideEvent (a, b) iconSize = QSize (QSize at: 0x0) indexOf = unbound qt slot indexOf of QTabWidget type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QTabWidget type X. initPainter (a, b) initStyleOption = unbound qt slot initStyleOption of QTabWidget type X. initStyleOption (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QTabWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QTabWidget type X. insertActions (a, b, c) insertTab = unbound qt slot insertTab of QTabWidget type X. insertTab (a, b, c, d, e) -> int installEventFilter = unbound qt slot installEventFilter of QTabWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QTabWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QTabWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QTabWidget type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QTabWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QTabWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QTabWidget type X. isModal (a) -> bool isMovable = unbound qt slot isMovable of QTabWidget type X. isMovable (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type X. isSignalConnected (a, b) -> bool isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type X. isTabEnabled (a, b) -> bool isVisible = unbound qt slot isVisible of QTabWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QTabWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QTabWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QTabWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QTabWidget type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QTabWidget type X. killTimer (a, b) layout = unbound qt slot layout of QTabWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QTabWidget type X. lower () mapFrom = unbound qt slot mapFrom of QTabWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QTabWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QTabWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QTabWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QTabWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QTabWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QTabWidget type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type X. mouseReleaseEvent (a, b) mouseTracking = None movable = None move = unbound qt slot move of QTabWidget type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QTabWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QTabWidget type overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QTabWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QTabWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QTabWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QTabWidget type X. property (a, b) -> object raise = unbound qt slot raise of QTabWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QTabWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QTabWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QTabWidget type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type X. removeEventFilter (a, b) removeTab = unbound qt slot removeTab of QTabWidget type X. removeTab (a, b) render = unbound qt slot render of QTabWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QTabWidget type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QTabWidget type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type X. restoreGeometry (a, b) -> bool saveGeometry = unbound qt slot saveGeometry of QTabWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QTabWidget type X. scroll (a, b, c, d) sender = unbound qt slot sender of QTabWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QTabWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QTabWidget type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type X. setContextMenuPolicy (a, b) setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type X. setCornerWidget (a, b, c) setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type X. setCurrentIndex (a) setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type X. setCurrentWidget (a) setCursor = unbound qt slot setCursor of QTabWidget type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QTabWidget type X. setDisabled (a) setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type X. setDocumentMode (a, b) setElideMode = unbound qt slot setElideMode of QTabWidget type X. setElideMode (a, b) setEnabled = unbound qt slot setEnabled of QTabWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QTabWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QTabWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QTabWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QTabWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QTabWidget type X. setHidden (a) setIconSize = unbound qt slot setIconSize of QTabWidget type X. setIconSize (a, b) setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QTabWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QTabWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of QTabWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type X. setMinimumWidth (a, b) setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type X. setMouseTracking (a, b) setMovable = unbound qt slot setMovable of QTabWidget type X. setMovable (a, b) setObjectName = unbound qt slot setObjectName of QTabWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QTabWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of QTabWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QTabWidget type X. setProperty (a, b, c) -> bool setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type X. setShortcutEnabled (a, b, c) setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QTabWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QTabWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type X. setStyleSheet (a) setTabBar = unbound qt slot setTabBar of QTabWidget type X. setTabBar (a, b) setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type X. setTabBarAutoHide (a, b) setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type X. setTabEnabled (a, b, c) setTabIcon = unbound qt slot setTabIcon of QTabWidget type X. setTabIcon (a, b, c) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type X. setTabOrder (a, b) setTabPosition = unbound qt slot setTabPosition of QTabWidget type X. setTabPosition (a, b) setTabShape = unbound qt slot setTabShape of QTabWidget type X. setTabShape (a, b) setTabText = unbound qt slot setTabText of QTabWidget type X. setTabText (a, b, c) setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type X. setTabToolTip (a, b, c) setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type X. setTabWhatsThis (a, b, c) setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type X. setTabsClosable (a, b) setToolTip = unbound qt slot setToolTip of QTabWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type X. setUpdatesEnabled (a, b) setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type X. setUsesScrollButtons (a, b) setVisible = unbound qt slot py_q_setVisible of QTabWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QTabWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QTabWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QTabWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QTabWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QTabWidget type X. show () showEvent = unbound qt slot py_q_showEvent of QTabWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of QTabWidget type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QTabWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of QTabWidget type X. showMinimized () showNormal = unbound qt slot showNormal of QTabWidget type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QTabWidget type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QTabWidget type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QTabWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabBar = unbound qt slot tabBar of QTabWidget type X. tabBar (a) -> PythonQt.QtGui.QTabBar tabBarAutoHide = None tabBarClicked = unbound qt signal tabBarClicked of QTabWidget type tabBarDoubleClicked = unbound qt signal tabBarDoubleClicked of QTabWidget type tabCloseRequested = unbound qt signal tabCloseRequested of QTabWidget type tabIcon = unbound qt slot tabIcon of QTabWidget type X. tabIcon (a, b) -> PythonQt.QtGui.QIcon tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type X. tabInserted (a, b) tabPosition = None tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type X. tabRemoved (a, b) tabShape = None tabText = unbound qt slot tabText of QTabWidget type X. tabText (a, b) -> str tabToolTip = unbound qt slot tabToolTip of QTabWidget type X. tabToolTip (a, b) -> str tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type X. tabWhatsThis (a, b) -> str tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type X. tabletEvent (a, b) tabletTracking = None tabsClosable = None testAttribute = unbound qt slot testAttribute of QTabWidget type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QTabWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QTabWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QTabWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QTabWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QTabWidget type X. unsetLocale (a) update = unbound qt slot update of QTabWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QTabWidget type X. updateGeometry (a) updatesEnabled = None usesScrollButtons = None visible = None visibleRegion = unbound qt slot visibleRegion of QTabWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type X. wheelEvent (a, b) widget = unbound qt slot widget of QTabWidget type X. widget (a, b) -> PythonQt.QtGui.QWidget width = None widthMM = unbound qt slot widthMM of QTabWidget type X. widthMM (a) -> int winId = unbound qt slot winId of QTabWidget type X. winId (a) window = unbound qt slot window of QTabWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QTabWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QTabWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QTabWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QTabWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QTabWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of QTabWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QTabWidget type windowType = unbound qt slot windowType of QTabWidget type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QTabWidget dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper delattr (...) x. __delattr__ ('name') < ==> del x.name eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getattribute (...) x. __getattribute__ ('name') < ==> x.name gt (...) x. __gt__ (y) < ==> x>y hash (...) x. __hash__ () < ==> hash(x) le (...) x. __le__ (y) < ==> x < =y lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y nonzero (...) x. __nonzero__ () < ==> x != 0 repr (...) x. __repr__ () < ==> repr(x) setattr (...) x. __setattr__ ('name', value) < ==> x.name = value str (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper new = built-in method new of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T Functions getProcessGlyphs (mode =0 , font =None , workspace =None ) Returns a list of glyphs for processing in TypeRig gui apps Args: mode (int): 0 - Current active glyph; 1 - All glyphs in current window; 2 - All selected glyphs; 3 - All glyphs in font font (fgFont) - Font file (object) workspace (flWorkspace) - Workspace Returns: list(eGlyph) getProcessGlyphs typerig.gui.widgets.getProcessGlyphs = getProcessGlyphs (mode =0 , font =None , workspace =None ) Returns a list of glyphs for processing in TypeRig gui apps Args: mode (int): 0 - Current active glyph; 1 - All glyphs in current window; 2 - All selected glyphs; 3 - All glyphs in font font (fgFont) - Font file (object) workspace (flWorkspace) - Workspace Returns: list(eGlyph) TRMsgSimple typerig.gui.widgets.TRMsgSimple = class TRMsgSimple ( typerig.gui.QtGui.QVBoxLayout ) # - Classes ------------------------------- # -- Messages & Dialogs ------------------- Method resolution order: TRMsgSimple typerig.gui.QtGui.QVBoxLayout PythonQt.QtGui.QVBoxLayout PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, msg) Attributes BottomToTop = 3 Direction = class 'PythonQt.QtGui.Direction' Down = 2 LeftToRight = 0 RightToLeft = 1 SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' TopToBottom = 2 Up = 3 activate = unbound qt slot activate of QVBoxLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QVBoxLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QVBoxLayout type X. addLayout (a, b, c) addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type X. addSpacerItem (a, b) addSpacing = unbound qt slot addSpacing of QVBoxLayout type X. addSpacing (a, b) addStretch = unbound qt slot addStretch of QVBoxLayout type X. addStretch (a, b) addStrut = unbound qt slot addStrut of QVBoxLayout type X. addStrut (a, b) addWidget = unbound qt slot addWidget of QVBoxLayout type X. addWidget (a, b, c, d) adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QVBoxLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QVBoxLayout type X. blockSignals (a, b) -> bool childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type X. childEvent (a, b) children = unbound qt slot children of QVBoxLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize connect = unbound qt slot connect of QVBoxLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QVBoxLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QVBoxLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QVBoxLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QVBoxLayout type direction = unbound qt slot direction of QVBoxLayout type X. direction (a) disconnect = unbound qt slot disconnect of QVBoxLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QVBoxLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QVBoxLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QVBoxLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QVBoxLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name insertItem = unbound qt slot insertItem of QVBoxLayout type X. insertItem (a, b, c) insertLayout = unbound qt slot insertLayout of QVBoxLayout type X. insertLayout (a, b, c, d) insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type X. insertSpacerItem (a, b, c) insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type X. insertSpacing (a, b, c) insertStretch = unbound qt slot insertStretch of QVBoxLayout type X. insertStretch (a, b, c) insertWidget = unbound qt slot insertWidget of QVBoxLayout type X. insertWidget (a, b, c, d, e) installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QVBoxLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QVBoxLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QVBoxLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QVBoxLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QVBoxLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QVBoxLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QVBoxLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QVBoxLayout type parent = unbound qt slot parent of QVBoxLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QVBoxLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QVBoxLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QVBoxLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QVBoxLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem sender = unbound qt slot sender of QVBoxLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QVBoxLayout type X. setAlignment (a, b, c) -> bool setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type X. setContentsMargins (a, b, c, d, e) setDirection = unbound qt slot setDirection of QVBoxLayout type X. setDirection (a, b) setEnabled = unbound qt slot setEnabled of QVBoxLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type X. setGeometry (a, b) setMargin = unbound qt slot setMargin of QVBoxLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QVBoxLayout type X. setObjectName (a, b) setParent = unbound qt slot setParent of QVBoxLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QVBoxLayout type X. setProperty (a, b, c) -> bool setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QVBoxLayout type X. setSpacing (a, b) setStretch = unbound qt slot setStretch of QVBoxLayout type X. setStretch (a, b, c) setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type X. setStretchFactor (a, b, c) -> bool signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QVBoxLayout type X. startTimer (a, b, c) -> int stretch = unbound qt slot stretch of QVBoxLayout type X. stretch (a, b) -> int takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QVBoxLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QVBoxLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QVBoxLayout type X. update (a) widget = unbound qt slot py_q_widget of QVBoxLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QVBoxLayout __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T activate typerig.gui.widgets.TRMsgSimple.activate = unbound qt slot activate of QVBoxLayout type addChildLayout typerig.gui.widgets.TRMsgSimple.addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type addChildWidget typerig.gui.widgets.TRMsgSimple.addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type addItem typerig.gui.widgets.TRMsgSimple.addItem = unbound qt slot py_q_addItem of QVBoxLayout type addLayout typerig.gui.widgets.TRMsgSimple.addLayout = unbound qt slot addLayout of QVBoxLayout type addSpacerItem typerig.gui.widgets.TRMsgSimple.addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type addSpacing typerig.gui.widgets.TRMsgSimple.addSpacing = unbound qt slot addSpacing of QVBoxLayout type addStretch typerig.gui.widgets.TRMsgSimple.addStretch = unbound qt slot addStretch of QVBoxLayout type addStrut typerig.gui.widgets.TRMsgSimple.addStrut = unbound qt slot addStrut of QVBoxLayout type addWidget typerig.gui.widgets.TRMsgSimple.addWidget = unbound qt slot addWidget of QVBoxLayout type adoptLayout typerig.gui.widgets.TRMsgSimple.adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type alignment typerig.gui.widgets.TRMsgSimple.alignment = unbound qt slot alignment of QVBoxLayout type alignmentRect typerig.gui.widgets.TRMsgSimple.alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type blockSignals typerig.gui.widgets.TRMsgSimple.blockSignals = unbound qt slot blockSignals of QVBoxLayout type childEvent typerig.gui.widgets.TRMsgSimple.childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type children typerig.gui.widgets.TRMsgSimple.children = unbound qt slot children of QVBoxLayout type className typerig.gui.widgets.TRMsgSimple.className = className (...) Return the classname of the object closestAcceptableSize typerig.gui.widgets.TRMsgSimple.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type connect typerig.gui.widgets.TRMsgSimple.connect = unbound qt slot connect of QVBoxLayout type contentsMargins typerig.gui.widgets.TRMsgSimple.contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type contentsRect typerig.gui.widgets.TRMsgSimple.contentsRect = unbound qt slot contentsRect of QVBoxLayout type controlTypes typerig.gui.widgets.TRMsgSimple.controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type count typerig.gui.widgets.TRMsgSimple.count = unbound qt slot py_q_count of QVBoxLayout type customEvent typerig.gui.widgets.TRMsgSimple.customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type delete typerig.gui.widgets.TRMsgSimple.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.widgets.TRMsgSimple.deleteLater = unbound qt slot deleteLater of QVBoxLayout type direction typerig.gui.widgets.TRMsgSimple.direction = unbound qt slot direction of QVBoxLayout type disconnect typerig.gui.widgets.TRMsgSimple.disconnect = unbound qt slot disconnect of QVBoxLayout type dumpObjectInfo typerig.gui.widgets.TRMsgSimple.dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type dumpObjectTree typerig.gui.widgets.TRMsgSimple.dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type dynamicPropertyNames typerig.gui.widgets.TRMsgSimple.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type event typerig.gui.widgets.TRMsgSimple.event = unbound qt slot py_q_event of QVBoxLayout type eventFilter typerig.gui.widgets.TRMsgSimple.eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type expandingDirections typerig.gui.widgets.TRMsgSimple.expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type findChild typerig.gui.widgets.TRMsgSimple.findChild = unbound qt slot findChild of QVBoxLayout type findChildren typerig.gui.widgets.TRMsgSimple.findChildren = unbound qt slot findChildren of QVBoxLayout type geometry typerig.gui.widgets.TRMsgSimple.geometry = unbound qt slot py_q_geometry of QVBoxLayout type hasHeightForWidth typerig.gui.widgets.TRMsgSimple.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type heightForWidth typerig.gui.widgets.TRMsgSimple.heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type help typerig.gui.widgets.TRMsgSimple.help = help (...) Shows the help of available methods for this class indexOf typerig.gui.widgets.TRMsgSimple.indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type inherits typerig.gui.widgets.TRMsgSimple.inherits = inherits (...) Returns if the class inherits or is of given type name insertItem typerig.gui.widgets.TRMsgSimple.insertItem = unbound qt slot insertItem of QVBoxLayout type insertLayout typerig.gui.widgets.TRMsgSimple.insertLayout = unbound qt slot insertLayout of QVBoxLayout type insertSpacerItem typerig.gui.widgets.TRMsgSimple.insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type insertSpacing typerig.gui.widgets.TRMsgSimple.insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type insertStretch typerig.gui.widgets.TRMsgSimple.insertStretch = unbound qt slot insertStretch of QVBoxLayout type insertWidget typerig.gui.widgets.TRMsgSimple.insertWidget = unbound qt slot insertWidget of QVBoxLayout type installEventFilter typerig.gui.widgets.TRMsgSimple.installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type invalidate typerig.gui.widgets.TRMsgSimple.invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type isEmpty typerig.gui.widgets.TRMsgSimple.isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type isEnabled typerig.gui.widgets.TRMsgSimple.isEnabled = unbound qt slot isEnabled of QVBoxLayout type isSignalConnected typerig.gui.widgets.TRMsgSimple.isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type isWidgetType typerig.gui.widgets.TRMsgSimple.isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type isWindowType typerig.gui.widgets.TRMsgSimple.isWindowType = unbound qt slot isWindowType of QVBoxLayout type itemAt typerig.gui.widgets.TRMsgSimple.itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type killTimer typerig.gui.widgets.TRMsgSimple.killTimer = unbound qt slot killTimer of QVBoxLayout type layout typerig.gui.widgets.TRMsgSimple.layout = unbound qt slot py_q_layout of QVBoxLayout type maximumSize typerig.gui.widgets.TRMsgSimple.maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type menuBar typerig.gui.widgets.TRMsgSimple.menuBar = unbound qt slot menuBar of QVBoxLayout type metaObject typerig.gui.widgets.TRMsgSimple.metaObject = unbound qt slot metaObject of QVBoxLayout type minimumHeightForWidth typerig.gui.widgets.TRMsgSimple.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type minimumSize typerig.gui.widgets.TRMsgSimple.minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type moveToThread typerig.gui.widgets.TRMsgSimple.moveToThread = unbound qt slot moveToThread of QVBoxLayout type parent typerig.gui.widgets.TRMsgSimple.parent = unbound qt slot parent of QVBoxLayout type parentWidget typerig.gui.widgets.TRMsgSimple.parentWidget = unbound qt slot parentWidget of QVBoxLayout type property typerig.gui.widgets.TRMsgSimple.property = unbound qt slot property of QVBoxLayout type removeEventFilter typerig.gui.widgets.TRMsgSimple.removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type removeItem typerig.gui.widgets.TRMsgSimple.removeItem = unbound qt slot removeItem of QVBoxLayout type removeWidget typerig.gui.widgets.TRMsgSimple.removeWidget = unbound qt slot removeWidget of QVBoxLayout type replaceWidget typerig.gui.widgets.TRMsgSimple.replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type sender typerig.gui.widgets.TRMsgSimple.sender = unbound qt slot sender of QVBoxLayout type senderSignalIndex typerig.gui.widgets.TRMsgSimple.senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type setAlignment typerig.gui.widgets.TRMsgSimple.setAlignment = unbound qt slot setAlignment of QVBoxLayout type setContentsMargins typerig.gui.widgets.TRMsgSimple.setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type setDirection typerig.gui.widgets.TRMsgSimple.setDirection = unbound qt slot setDirection of QVBoxLayout type setEnabled typerig.gui.widgets.TRMsgSimple.setEnabled = unbound qt slot setEnabled of QVBoxLayout type setGeometry typerig.gui.widgets.TRMsgSimple.setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type setMargin typerig.gui.widgets.TRMsgSimple.setMargin = unbound qt slot setMargin of QVBoxLayout type setMenuBar typerig.gui.widgets.TRMsgSimple.setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type setObjectName typerig.gui.widgets.TRMsgSimple.setObjectName = unbound qt slot setObjectName of QVBoxLayout type setParent typerig.gui.widgets.TRMsgSimple.setParent = unbound qt slot setParent of QVBoxLayout type setProperty typerig.gui.widgets.TRMsgSimple.setProperty = unbound qt slot setProperty of QVBoxLayout type setSizeConstraint typerig.gui.widgets.TRMsgSimple.setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type setSpacing typerig.gui.widgets.TRMsgSimple.setSpacing = unbound qt slot setSpacing of QVBoxLayout type setStretch typerig.gui.widgets.TRMsgSimple.setStretch = unbound qt slot setStretch of QVBoxLayout type setStretchFactor typerig.gui.widgets.TRMsgSimple.setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type signalsBlocked typerig.gui.widgets.TRMsgSimple.signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type sizeHint typerig.gui.widgets.TRMsgSimple.sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type spacerItem typerig.gui.widgets.TRMsgSimple.spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type startTimer typerig.gui.widgets.TRMsgSimple.startTimer = unbound qt slot startTimer of QVBoxLayout type stretch typerig.gui.widgets.TRMsgSimple.stretch = unbound qt slot stretch of QVBoxLayout type takeAt typerig.gui.widgets.TRMsgSimple.takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type thread typerig.gui.widgets.TRMsgSimple.thread = unbound qt slot thread of QVBoxLayout type timerEvent typerig.gui.widgets.TRMsgSimple.timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type totalHeightForWidth typerig.gui.widgets.TRMsgSimple.totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type totalMaximumSize typerig.gui.widgets.TRMsgSimple.totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type totalMinimumSize typerig.gui.widgets.TRMsgSimple.totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type totalSizeHint typerig.gui.widgets.TRMsgSimple.totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type tr typerig.gui.widgets.TRMsgSimple.tr = unbound qt slot tr of QVBoxLayout type update typerig.gui.widgets.TRMsgSimple.update = unbound qt slot update of QVBoxLayout type widget typerig.gui.widgets.TRMsgSimple.widget = unbound qt slot py_q_widget of QVBoxLayout type widgetEvent typerig.gui.widgets.TRMsgSimple.widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type TR2FieldDLG typerig.gui.widgets.TR2FieldDLG = class TR2FieldDLG ( typerig.gui.QtGui.QDialog ) Method resolution order: TR2FieldDLG typerig.gui.QtGui.QDialog PythonQt.QtGui.QDialog PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, dlg_name, dlg_msg, dlg_field_t, dlg_field_b, dlg_size =(300, 300, 300, 100) ) return_values (self) Attributes Accepted = 1 DialogCode = class 'PythonQt.QtGui.DialogCode' DrawChildren = 2 DrawWindowBackground = 1 IgnoreMask = 4 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 Rejected = 0 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' accept = unbound qt slot py_q_accept of QDialog type X. accept (a) acceptDrops = None accepted = unbound qt signal accepted of QDialog type accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QDialog type X. actionEvent (a, b) actions = unbound qt slot actions of QDialog type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QDialog type X. activateWindow (a) addAction = unbound qt slot addAction of QDialog type X. addAction (a, b) addActions = unbound qt slot addActions of QDialog type X. addActions (a, b) adjustPosition = unbound qt slot adjustPosition of QDialog type X. adjustPosition (a, b) adjustSize = unbound qt slot adjustSize of QDialog type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QDialog type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QDialog type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QDialog type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QDialog type X. changeEvent (a, b) childAt = unbound qt slot childAt of QDialog type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QDialog type X. childEvent (a, b) children = unbound qt slot children of QDialog type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clearFocus = unbound qt slot clearFocus of QDialog type X. clearFocus (a) clearMask = unbound qt slot clearMask of QDialog type X. clearMask (a) close = unbound qt slot close of QDialog type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QDialog type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QDialog type X. colorCount (a) -> int connect = unbound qt slot connect of QDialog type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QDialog type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QDialog type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type X. contextMenuEvent (a, b) contextMenuPolicy = None createWinId = unbound qt slot createWinId of QDialog type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QDialog type customEvent = unbound qt slot py_q_customEvent of QDialog type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QDialog type X. deleteLater () depth = unbound qt slot depth of QDialog type X. depth (a) -> int destroy = unbound qt slot destroy of QDialog type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QDialog type devType = unbound qt slot py_q_devType of QDialog type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QDialog type X. disconnect (a, b, c, d) -> bool done = unbound qt slot py_q_done of QDialog type X. done (a, b) dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QDialog type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QDialog type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of QDialog type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QDialog type X. enterEvent (a, b) event = unbound qt slot py_q_event of QDialog type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QDialog type X. eventFilter (a, b, c) -> bool exec = unbound qt slot py_q_exec of QDialog type X. exec (a) -> int findChild = unbound qt slot findChild of QDialog type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QDialog type X. findChildren (a, b, c) -> tuple finished = unbound qt signal finished of QDialog type focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QDialog type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QDialog type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QDialog type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QDialog type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QDialog type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QDialog type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QDialog type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QDialog type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QDialog type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QDialog type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QDialog type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QDialog type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QDialog type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QDialog type X. hideEvent (a, b) inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QDialog type X. initPainter (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QDialog type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QDialog type X. insertActions (a, b, c) installEventFilter = unbound qt slot installEventFilter of QDialog type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QDialog type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QDialog type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QDialog type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QDialog type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QDialog type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QDialog type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QDialog type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QDialog type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QDialog type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QDialog type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QDialog type X. isSignalConnected (a, b) -> bool isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type X. isSizeGripEnabled (a) -> bool isVisible = unbound qt slot isVisible of QDialog type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QDialog type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QDialog type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QDialog type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QDialog type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QDialog type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QDialog type X. killTimer (a, b) layout = unbound qt slot layout of QDialog type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QDialog type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QDialog type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QDialog type X. lower () mapFrom = unbound qt slot mapFrom of QDialog type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QDialog type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QDialog type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QDialog type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QDialog type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QDialog type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QDialog type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QDialog type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of QDialog type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QDialog type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QDialog type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QDialog type open = unbound qt slot py_q_open of QDialog type X. open (a) overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QDialog type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QDialog type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QDialog type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QDialog type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QDialog type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QDialog type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QDialog type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QDialog type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QDialog type X. property (a, b) -> object raise = unbound qt slot raise of QDialog type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QDialog type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice reject = unbound qt slot py_q_reject of QDialog type X. reject (a) rejected = unbound qt signal rejected of QDialog type releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QDialog type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QDialog type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QDialog type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QDialog type X. removeEventFilter (a, b) render = unbound qt slot render of QDialog type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QDialog type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QDialog type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QDialog type X. restoreGeometry (a, b) -> bool result = unbound qt slot result of QDialog type X. result (a) -> int saveGeometry = unbound qt slot saveGeometry of QDialog type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QDialog type X. scroll (a, b, c, d) sender = unbound qt slot sender of QDialog type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QDialog type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QDialog type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QDialog type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QDialog type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type X. setContextMenuPolicy (a, b) setCursor = unbound qt slot setCursor of QDialog type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QDialog type X. setDisabled (a) setEnabled = unbound qt slot setEnabled of QDialog type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QDialog type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QDialog type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QDialog type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QDialog type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QDialog type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QDialog type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QDialog type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QDialog type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QDialog type X. setHidden (a) setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QDialog type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QDialog type X. setLocale (a, b) setMask = unbound qt slot setMask of QDialog type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QDialog type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QDialog type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type X. setMinimumWidth (a, b) setModal = unbound qt slot setModal of QDialog type X. setModal (a, b) setMouseTracking = unbound qt slot setMouseTracking of QDialog type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of QDialog type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QDialog type X. setPalette (a, b) setParent = unbound qt slot setParent of QDialog type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QDialog type X. setProperty (a, b, c) -> bool setResult = unbound qt slot setResult of QDialog type X. setResult (a, b) setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type X. setShortcutEnabled (a, b, c) setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type X. setSizeGripEnabled (a, b) setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QDialog type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QDialog type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QDialog type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QDialog type X. setStyleSheet (a) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type X. setTabOrder (a, b) setToolTip = unbound qt slot setToolTip of QDialog type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type X. setUpdatesEnabled (a, b) setVisible = unbound qt slot py_q_setVisible of QDialog type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QDialog type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QDialog type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QDialog type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QDialog type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QDialog type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QDialog type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QDialog type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QDialog type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QDialog type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QDialog type X. show () showEvent = unbound qt slot py_q_showEvent of QDialog type X. showEvent (a, b) showExtension = unbound qt slot showExtension of QDialog type X. showExtension (a) showFullScreen = unbound qt slot showFullScreen of QDialog type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QDialog type X. showMaximized () showMinimized = unbound qt slot showMinimized of QDialog type X. showMinimized () showNormal = unbound qt slot showNormal of QDialog type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QDialog type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeGripEnabled = None sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QDialog type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QDialog type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QDialog type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type X. tabletEvent (a, b) tabletTracking = None testAttribute = unbound qt slot testAttribute of QDialog type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QDialog type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QDialog type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QDialog type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QDialog type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QDialog type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QDialog type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QDialog type X. unsetLocale (a) update = unbound qt slot update of QDialog type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QDialog type X. updateGeometry (a) updatesEnabled = None visible = None visibleRegion = unbound qt slot visibleRegion of QDialog type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of QDialog type X. widthMM (a) -> int winId = unbound qt slot winId of QDialog type X. winId (a) window = unbound qt slot window of QDialog type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QDialog type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QDialog type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QDialog type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QDialog type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QDialog type X. windowRole (a) -> str windowState = unbound qt slot windowState of QDialog type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QDialog type windowType = unbound qt slot windowType of QDialog type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QDialog __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T accept typerig.gui.widgets.TR2FieldDLG.accept = unbound qt slot py_q_accept of QDialog type actionEvent typerig.gui.widgets.TR2FieldDLG.actionEvent = unbound qt slot py_q_actionEvent of QDialog type actions typerig.gui.widgets.TR2FieldDLG.actions = unbound qt slot actions of QDialog type activateWindow typerig.gui.widgets.TR2FieldDLG.activateWindow = unbound qt slot activateWindow of QDialog type addAction typerig.gui.widgets.TR2FieldDLG.addAction = unbound qt slot addAction of QDialog type addActions typerig.gui.widgets.TR2FieldDLG.addActions = unbound qt slot addActions of QDialog type adjustPosition typerig.gui.widgets.TR2FieldDLG.adjustPosition = unbound qt slot adjustPosition of QDialog type adjustSize typerig.gui.widgets.TR2FieldDLG.adjustSize = unbound qt slot adjustSize of QDialog type backgroundRole typerig.gui.widgets.TR2FieldDLG.backgroundRole = unbound qt slot backgroundRole of QDialog type backingStore typerig.gui.widgets.TR2FieldDLG.backingStore = unbound qt slot backingStore of QDialog type blockSignals typerig.gui.widgets.TR2FieldDLG.blockSignals = unbound qt slot blockSignals of QDialog type changeEvent typerig.gui.widgets.TR2FieldDLG.changeEvent = unbound qt slot py_q_changeEvent of QDialog type childAt typerig.gui.widgets.TR2FieldDLG.childAt = unbound qt slot childAt of QDialog type childEvent typerig.gui.widgets.TR2FieldDLG.childEvent = unbound qt slot py_q_childEvent of QDialog type children typerig.gui.widgets.TR2FieldDLG.children = unbound qt slot children of QDialog type className typerig.gui.widgets.TR2FieldDLG.className = className (...) Return the classname of the object clearFocus typerig.gui.widgets.TR2FieldDLG.clearFocus = unbound qt slot clearFocus of QDialog type clearMask typerig.gui.widgets.TR2FieldDLG.clearMask = unbound qt slot clearMask of QDialog type close typerig.gui.widgets.TR2FieldDLG.close = unbound qt slot close of QDialog type closeEvent typerig.gui.widgets.TR2FieldDLG.closeEvent = unbound qt slot py_q_closeEvent of QDialog type colorCount typerig.gui.widgets.TR2FieldDLG.colorCount = unbound qt slot colorCount of QDialog type connect typerig.gui.widgets.TR2FieldDLG.connect = unbound qt slot connect of QDialog type contentsMargins typerig.gui.widgets.TR2FieldDLG.contentsMargins = unbound qt slot contentsMargins of QDialog type contentsRect typerig.gui.widgets.TR2FieldDLG.contentsRect = unbound qt slot contentsRect of QDialog type contextMenuEvent typerig.gui.widgets.TR2FieldDLG.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type createWindowContainer typerig.gui.widgets.TR2FieldDLG.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type createWinId typerig.gui.widgets.TR2FieldDLG.createWinId = unbound qt slot createWinId of QDialog type customEvent typerig.gui.widgets.TR2FieldDLG.customEvent = unbound qt slot py_q_customEvent of QDialog type delete typerig.gui.widgets.TR2FieldDLG.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.widgets.TR2FieldDLG.deleteLater = unbound qt slot deleteLater of QDialog type depth typerig.gui.widgets.TR2FieldDLG.depth = unbound qt slot depth of QDialog type destroy typerig.gui.widgets.TR2FieldDLG.destroy = unbound qt slot destroy of QDialog type devicePixelRatio typerig.gui.widgets.TR2FieldDLG.devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type devicePixelRatioF typerig.gui.widgets.TR2FieldDLG.devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type devicePixelRatioFScale typerig.gui.widgets.TR2FieldDLG.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type devType typerig.gui.widgets.TR2FieldDLG.devType = unbound qt slot py_q_devType of QDialog type disconnect typerig.gui.widgets.TR2FieldDLG.disconnect = unbound qt slot disconnect of QDialog type done typerig.gui.widgets.TR2FieldDLG.done = unbound qt slot py_q_done of QDialog type dragEnterEvent typerig.gui.widgets.TR2FieldDLG.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type dragLeaveEvent typerig.gui.widgets.TR2FieldDLG.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type dragMoveEvent typerig.gui.widgets.TR2FieldDLG.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type dropEvent typerig.gui.widgets.TR2FieldDLG.dropEvent = unbound qt slot py_q_dropEvent of QDialog type dumpObjectInfo typerig.gui.widgets.TR2FieldDLG.dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type dumpObjectTree typerig.gui.widgets.TR2FieldDLG.dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type dynamicPropertyNames typerig.gui.widgets.TR2FieldDLG.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type effectiveWinId typerig.gui.widgets.TR2FieldDLG.effectiveWinId = unbound qt slot effectiveWinId of QDialog type ensurePolished typerig.gui.widgets.TR2FieldDLG.ensurePolished = unbound qt slot ensurePolished of QDialog type enterEvent typerig.gui.widgets.TR2FieldDLG.enterEvent = unbound qt slot py_q_enterEvent of QDialog type event typerig.gui.widgets.TR2FieldDLG.event = unbound qt slot py_q_event of QDialog type eventFilter typerig.gui.widgets.TR2FieldDLG.eventFilter = unbound qt slot py_q_eventFilter of QDialog type exec typerig.gui.widgets.TR2FieldDLG.exec = unbound qt slot py_q_exec of QDialog type findChild typerig.gui.widgets.TR2FieldDLG.findChild = unbound qt slot findChild of QDialog type findChildren typerig.gui.widgets.TR2FieldDLG.findChildren = unbound qt slot findChildren of QDialog type focusInEvent typerig.gui.widgets.TR2FieldDLG.focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type focusNextChild typerig.gui.widgets.TR2FieldDLG.focusNextChild = unbound qt slot focusNextChild of QDialog type focusNextPrevChild typerig.gui.widgets.TR2FieldDLG.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type focusOutEvent typerig.gui.widgets.TR2FieldDLG.focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type focusPreviousChild typerig.gui.widgets.TR2FieldDLG.focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type focusProxy typerig.gui.widgets.TR2FieldDLG.focusProxy = unbound qt slot focusProxy of QDialog type focusWidget typerig.gui.widgets.TR2FieldDLG.focusWidget = unbound qt slot focusWidget of QDialog type foregroundRole typerig.gui.widgets.TR2FieldDLG.foregroundRole = unbound qt slot foregroundRole of QDialog type grab typerig.gui.widgets.TR2FieldDLG.grab = unbound qt slot grab of QDialog type grabGesture typerig.gui.widgets.TR2FieldDLG.grabGesture = unbound qt slot grabGesture of QDialog type grabKeyboard typerig.gui.widgets.TR2FieldDLG.grabKeyboard = unbound qt slot grabKeyboard of QDialog type grabMouse typerig.gui.widgets.TR2FieldDLG.grabMouse = unbound qt slot grabMouse of QDialog type grabShortcut typerig.gui.widgets.TR2FieldDLG.grabShortcut = unbound qt slot grabShortcut of QDialog type graphicsEffect typerig.gui.widgets.TR2FieldDLG.graphicsEffect = unbound qt slot graphicsEffect of QDialog type graphicsProxyWidget typerig.gui.widgets.TR2FieldDLG.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type hasFocus typerig.gui.widgets.TR2FieldDLG.hasFocus = unbound qt slot hasFocus of QDialog type hasHeightForWidth typerig.gui.widgets.TR2FieldDLG.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type hasMouseTracking typerig.gui.widgets.TR2FieldDLG.hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type heightForWidth typerig.gui.widgets.TR2FieldDLG.heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type heightMM typerig.gui.widgets.TR2FieldDLG.heightMM = unbound qt slot heightMM of QDialog type help typerig.gui.widgets.TR2FieldDLG.help = help (...) Shows the help of available methods for this class hide typerig.gui.widgets.TR2FieldDLG.hide = unbound qt slot hide of QDialog type hideEvent typerig.gui.widgets.TR2FieldDLG.hideEvent = unbound qt slot py_q_hideEvent of QDialog type inherits typerig.gui.widgets.TR2FieldDLG.inherits = inherits (...) Returns if the class inherits or is of given type name initPainter typerig.gui.widgets.TR2FieldDLG.initPainter = unbound qt slot py_q_initPainter of QDialog type inputMethodEvent typerig.gui.widgets.TR2FieldDLG.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type inputMethodQuery typerig.gui.widgets.TR2FieldDLG.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type insertAction typerig.gui.widgets.TR2FieldDLG.insertAction = unbound qt slot insertAction of QDialog type insertActions typerig.gui.widgets.TR2FieldDLG.insertActions = unbound qt slot insertActions of QDialog type installEventFilter typerig.gui.widgets.TR2FieldDLG.installEventFilter = unbound qt slot installEventFilter of QDialog type isAncestorOf typerig.gui.widgets.TR2FieldDLG.isAncestorOf = unbound qt slot isAncestorOf of QDialog type isEnabled typerig.gui.widgets.TR2FieldDLG.isEnabled = unbound qt slot isEnabled of QDialog type isEnabledTo typerig.gui.widgets.TR2FieldDLG.isEnabledTo = unbound qt slot isEnabledTo of QDialog type isFullScreen typerig.gui.widgets.TR2FieldDLG.isFullScreen = unbound qt slot isFullScreen of QDialog type isHidden typerig.gui.widgets.TR2FieldDLG.isHidden = unbound qt slot isHidden of QDialog type isLeftToRight typerig.gui.widgets.TR2FieldDLG.isLeftToRight = unbound qt slot isLeftToRight of QDialog type isMaximized typerig.gui.widgets.TR2FieldDLG.isMaximized = unbound qt slot isMaximized of QDialog type isMinimized typerig.gui.widgets.TR2FieldDLG.isMinimized = unbound qt slot isMinimized of QDialog type isModal typerig.gui.widgets.TR2FieldDLG.isModal = unbound qt slot isModal of QDialog type isRightToLeft typerig.gui.widgets.TR2FieldDLG.isRightToLeft = unbound qt slot isRightToLeft of QDialog type isSignalConnected typerig.gui.widgets.TR2FieldDLG.isSignalConnected = unbound qt slot isSignalConnected of QDialog type isSizeGripEnabled typerig.gui.widgets.TR2FieldDLG.isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type isVisible typerig.gui.widgets.TR2FieldDLG.isVisible = unbound qt slot isVisible of QDialog type isVisibleTo typerig.gui.widgets.TR2FieldDLG.isVisibleTo = unbound qt slot isVisibleTo of QDialog type isWidgetType typerig.gui.widgets.TR2FieldDLG.isWidgetType = unbound qt slot isWidgetType of QDialog type isWindow typerig.gui.widgets.TR2FieldDLG.isWindow = unbound qt slot isWindow of QDialog type isWindowModified typerig.gui.widgets.TR2FieldDLG.isWindowModified = unbound qt slot isWindowModified of QDialog type isWindowType typerig.gui.widgets.TR2FieldDLG.isWindowType = unbound qt slot isWindowType of QDialog type keyboardGrabber typerig.gui.widgets.TR2FieldDLG.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type keyPressEvent typerig.gui.widgets.TR2FieldDLG.keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type keyReleaseEvent typerig.gui.widgets.TR2FieldDLG.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type killTimer typerig.gui.widgets.TR2FieldDLG.killTimer = unbound qt slot killTimer of QDialog type layout typerig.gui.widgets.TR2FieldDLG.layout = unbound qt slot layout of QDialog type leaveEvent typerig.gui.widgets.TR2FieldDLG.leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type logicalDpiX typerig.gui.widgets.TR2FieldDLG.logicalDpiX = unbound qt slot logicalDpiX of QDialog type logicalDpiY typerig.gui.widgets.TR2FieldDLG.logicalDpiY = unbound qt slot logicalDpiY of QDialog type lower typerig.gui.widgets.TR2FieldDLG.lower = unbound qt slot lower of QDialog type mapFrom typerig.gui.widgets.TR2FieldDLG.mapFrom = unbound qt slot mapFrom of QDialog type mapFromGlobal typerig.gui.widgets.TR2FieldDLG.mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type mapFromParent typerig.gui.widgets.TR2FieldDLG.mapFromParent = unbound qt slot mapFromParent of QDialog type mapTo typerig.gui.widgets.TR2FieldDLG.mapTo = unbound qt slot mapTo of QDialog type mapToGlobal typerig.gui.widgets.TR2FieldDLG.mapToGlobal = unbound qt slot mapToGlobal of QDialog type mapToParent typerig.gui.widgets.TR2FieldDLG.mapToParent = unbound qt slot mapToParent of QDialog type mask typerig.gui.widgets.TR2FieldDLG.mask = unbound qt slot mask of QDialog type metaObject typerig.gui.widgets.TR2FieldDLG.metaObject = unbound qt slot metaObject of QDialog type metric typerig.gui.widgets.TR2FieldDLG.metric = unbound qt slot py_q_metric of QDialog type mouseDoubleClickEvent typerig.gui.widgets.TR2FieldDLG.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type mouseGrabber typerig.gui.widgets.TR2FieldDLG.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type mouseMoveEvent typerig.gui.widgets.TR2FieldDLG.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type mousePressEvent typerig.gui.widgets.TR2FieldDLG.mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type mouseReleaseEvent typerig.gui.widgets.TR2FieldDLG.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type move typerig.gui.widgets.TR2FieldDLG.move = unbound qt slot move of QDialog type moveEvent typerig.gui.widgets.TR2FieldDLG.moveEvent = unbound qt slot py_q_moveEvent of QDialog type moveToThread typerig.gui.widgets.TR2FieldDLG.moveToThread = unbound qt slot moveToThread of QDialog type nativeEvent typerig.gui.widgets.TR2FieldDLG.nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type nativeParentWidget typerig.gui.widgets.TR2FieldDLG.nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type nextInFocusChain typerig.gui.widgets.TR2FieldDLG.nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type open typerig.gui.widgets.TR2FieldDLG.open = unbound qt slot py_q_open of QDialog type overrideWindowFlags typerig.gui.widgets.TR2FieldDLG.overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type overrideWindowState typerig.gui.widgets.TR2FieldDLG.overrideWindowState = unbound qt slot overrideWindowState of QDialog type paintEngine typerig.gui.widgets.TR2FieldDLG.paintEngine = unbound qt slot py_q_paintEngine of QDialog type paintEvent typerig.gui.widgets.TR2FieldDLG.paintEvent = unbound qt slot py_q_paintEvent of QDialog type paintingActive typerig.gui.widgets.TR2FieldDLG.paintingActive = unbound qt slot paintingActive of QDialog type parent typerig.gui.widgets.TR2FieldDLG.parent = unbound qt slot parent of QDialog type parentWidget typerig.gui.widgets.TR2FieldDLG.parentWidget = unbound qt slot parentWidget of QDialog type physicalDpiX typerig.gui.widgets.TR2FieldDLG.physicalDpiX = unbound qt slot physicalDpiX of QDialog type physicalDpiY typerig.gui.widgets.TR2FieldDLG.physicalDpiY = unbound qt slot physicalDpiY of QDialog type previousInFocusChain typerig.gui.widgets.TR2FieldDLG.previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type property typerig.gui.widgets.TR2FieldDLG.property = unbound qt slot property of QDialog type raise typerig.gui.widgets.TR2FieldDLG.raise = unbound qt slot raise of QDialog type redirected typerig.gui.widgets.TR2FieldDLG.redirected = unbound qt slot py_q_redirected of QDialog type reject typerig.gui.widgets.TR2FieldDLG.reject = unbound qt slot py_q_reject of QDialog type releaseKeyboard typerig.gui.widgets.TR2FieldDLG.releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type releaseMouse typerig.gui.widgets.TR2FieldDLG.releaseMouse = unbound qt slot releaseMouse of QDialog type releaseShortcut typerig.gui.widgets.TR2FieldDLG.releaseShortcut = unbound qt slot releaseShortcut of QDialog type removeAction typerig.gui.widgets.TR2FieldDLG.removeAction = unbound qt slot removeAction of QDialog type removeEventFilter typerig.gui.widgets.TR2FieldDLG.removeEventFilter = unbound qt slot removeEventFilter of QDialog type render typerig.gui.widgets.TR2FieldDLG.render = unbound qt slot render of QDialog type repaint typerig.gui.widgets.TR2FieldDLG.repaint = unbound qt slot repaint of QDialog type resize typerig.gui.widgets.TR2FieldDLG.resize = unbound qt slot resize of QDialog type resizeEvent typerig.gui.widgets.TR2FieldDLG.resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type restoreGeometry typerig.gui.widgets.TR2FieldDLG.restoreGeometry = unbound qt slot restoreGeometry of QDialog type result typerig.gui.widgets.TR2FieldDLG.result = unbound qt slot result of QDialog type saveGeometry typerig.gui.widgets.TR2FieldDLG.saveGeometry = unbound qt slot saveGeometry of QDialog type scroll typerig.gui.widgets.TR2FieldDLG.scroll = unbound qt slot scroll of QDialog type sender typerig.gui.widgets.TR2FieldDLG.sender = unbound qt slot sender of QDialog type senderSignalIndex typerig.gui.widgets.TR2FieldDLG.senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type setAcceptDrops typerig.gui.widgets.TR2FieldDLG.setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type setAccessibleDescription typerig.gui.widgets.TR2FieldDLG.setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type setAccessibleName typerig.gui.widgets.TR2FieldDLG.setAccessibleName = unbound qt slot setAccessibleName of QDialog type setAttribute typerig.gui.widgets.TR2FieldDLG.setAttribute = unbound qt slot setAttribute of QDialog type setAutoFillBackground typerig.gui.widgets.TR2FieldDLG.setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type setBackgroundRole typerig.gui.widgets.TR2FieldDLG.setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type setBaseSize typerig.gui.widgets.TR2FieldDLG.setBaseSize = unbound qt slot setBaseSize of QDialog type setContentsMargins typerig.gui.widgets.TR2FieldDLG.setContentsMargins = unbound qt slot setContentsMargins of QDialog type setContextMenuPolicy typerig.gui.widgets.TR2FieldDLG.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type setCursor typerig.gui.widgets.TR2FieldDLG.setCursor = unbound qt slot setCursor of QDialog type setDisabled typerig.gui.widgets.TR2FieldDLG.setDisabled = unbound qt slot setDisabled of QDialog type setEnabled typerig.gui.widgets.TR2FieldDLG.setEnabled = unbound qt slot setEnabled of QDialog type setFixedHeight typerig.gui.widgets.TR2FieldDLG.setFixedHeight = unbound qt slot setFixedHeight of QDialog type setFixedSize typerig.gui.widgets.TR2FieldDLG.setFixedSize = unbound qt slot setFixedSize of QDialog type setFixedWidth typerig.gui.widgets.TR2FieldDLG.setFixedWidth = unbound qt slot setFixedWidth of QDialog type setFocus typerig.gui.widgets.TR2FieldDLG.setFocus = unbound qt slot setFocus of QDialog type setFocusPolicy typerig.gui.widgets.TR2FieldDLG.setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type setFocusProxy typerig.gui.widgets.TR2FieldDLG.setFocusProxy = unbound qt slot setFocusProxy of QDialog type setFont typerig.gui.widgets.TR2FieldDLG.setFont = unbound qt slot setFont of QDialog type setForegroundRole typerig.gui.widgets.TR2FieldDLG.setForegroundRole = unbound qt slot setForegroundRole of QDialog type setGeometry typerig.gui.widgets.TR2FieldDLG.setGeometry = unbound qt slot setGeometry of QDialog type setGraphicsEffect typerig.gui.widgets.TR2FieldDLG.setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type setHidden typerig.gui.widgets.TR2FieldDLG.setHidden = unbound qt slot setHidden of QDialog type setInputMethodHints typerig.gui.widgets.TR2FieldDLG.setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type setLayout typerig.gui.widgets.TR2FieldDLG.setLayout = unbound qt slot setLayout of QDialog type setLayoutDirection typerig.gui.widgets.TR2FieldDLG.setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type setLocale typerig.gui.widgets.TR2FieldDLG.setLocale = unbound qt slot setLocale of QDialog type setMask typerig.gui.widgets.TR2FieldDLG.setMask = unbound qt slot setMask of QDialog type setMaximumHeight typerig.gui.widgets.TR2FieldDLG.setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type setMaximumSize typerig.gui.widgets.TR2FieldDLG.setMaximumSize = unbound qt slot setMaximumSize of QDialog type setMaximumWidth typerig.gui.widgets.TR2FieldDLG.setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type setMinimumHeight typerig.gui.widgets.TR2FieldDLG.setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type setMinimumSize typerig.gui.widgets.TR2FieldDLG.setMinimumSize = unbound qt slot setMinimumSize of QDialog type setMinimumWidth typerig.gui.widgets.TR2FieldDLG.setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type setModal typerig.gui.widgets.TR2FieldDLG.setModal = unbound qt slot setModal of QDialog type setMouseTracking typerig.gui.widgets.TR2FieldDLG.setMouseTracking = unbound qt slot setMouseTracking of QDialog type setObjectName typerig.gui.widgets.TR2FieldDLG.setObjectName = unbound qt slot setObjectName of QDialog type setPalette typerig.gui.widgets.TR2FieldDLG.setPalette = unbound qt slot setPalette of QDialog type setParent typerig.gui.widgets.TR2FieldDLG.setParent = unbound qt slot setParent of QDialog type setProperty typerig.gui.widgets.TR2FieldDLG.setProperty = unbound qt slot setProperty of QDialog type setResult typerig.gui.widgets.TR2FieldDLG.setResult = unbound qt slot setResult of QDialog type setShortcutAutoRepeat typerig.gui.widgets.TR2FieldDLG.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type setShortcutEnabled typerig.gui.widgets.TR2FieldDLG.setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type setSizeGripEnabled typerig.gui.widgets.TR2FieldDLG.setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type setSizeIncrement typerig.gui.widgets.TR2FieldDLG.setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type setSizePolicy typerig.gui.widgets.TR2FieldDLG.setSizePolicy = unbound qt slot setSizePolicy of QDialog type setStatusTip typerig.gui.widgets.TR2FieldDLG.setStatusTip = unbound qt slot setStatusTip of QDialog type setStyle typerig.gui.widgets.TR2FieldDLG.setStyle = unbound qt slot setStyle of QDialog type setStyleSheet typerig.gui.widgets.TR2FieldDLG.setStyleSheet = unbound qt slot setStyleSheet of QDialog type setTabOrder typerig.gui.widgets.TR2FieldDLG.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type setToolTip typerig.gui.widgets.TR2FieldDLG.setToolTip = unbound qt slot setToolTip of QDialog type setToolTipDuration typerig.gui.widgets.TR2FieldDLG.setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type setUpdatesEnabled typerig.gui.widgets.TR2FieldDLG.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type setVisible typerig.gui.widgets.TR2FieldDLG.setVisible = unbound qt slot py_q_setVisible of QDialog type setWhatsThis typerig.gui.widgets.TR2FieldDLG.setWhatsThis = unbound qt slot setWhatsThis of QDialog type setWindowFilePath typerig.gui.widgets.TR2FieldDLG.setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type setWindowFlags typerig.gui.widgets.TR2FieldDLG.setWindowFlags = unbound qt slot setWindowFlags of QDialog type setWindowIcon typerig.gui.widgets.TR2FieldDLG.setWindowIcon = unbound qt slot setWindowIcon of QDialog type setWindowIconText typerig.gui.widgets.TR2FieldDLG.setWindowIconText = unbound qt slot setWindowIconText of QDialog type setWindowModality typerig.gui.widgets.TR2FieldDLG.setWindowModality = unbound qt slot setWindowModality of QDialog type setWindowModified typerig.gui.widgets.TR2FieldDLG.setWindowModified = unbound qt slot setWindowModified of QDialog type setWindowOpacity typerig.gui.widgets.TR2FieldDLG.setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type setWindowRole typerig.gui.widgets.TR2FieldDLG.setWindowRole = unbound qt slot setWindowRole of QDialog type setWindowState typerig.gui.widgets.TR2FieldDLG.setWindowState = unbound qt slot setWindowState of QDialog type setWindowTitle typerig.gui.widgets.TR2FieldDLG.setWindowTitle = unbound qt slot setWindowTitle of QDialog type sharedPainter typerig.gui.widgets.TR2FieldDLG.sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type show typerig.gui.widgets.TR2FieldDLG.show = unbound qt slot show of QDialog type showEvent typerig.gui.widgets.TR2FieldDLG.showEvent = unbound qt slot py_q_showEvent of QDialog type showExtension typerig.gui.widgets.TR2FieldDLG.showExtension = unbound qt slot showExtension of QDialog type showFullScreen typerig.gui.widgets.TR2FieldDLG.showFullScreen = unbound qt slot showFullScreen of QDialog type showMaximized typerig.gui.widgets.TR2FieldDLG.showMaximized = unbound qt slot showMaximized of QDialog type showMinimized typerig.gui.widgets.TR2FieldDLG.showMinimized = unbound qt slot showMinimized of QDialog type showNormal typerig.gui.widgets.TR2FieldDLG.showNormal = unbound qt slot showNormal of QDialog type signalsBlocked typerig.gui.widgets.TR2FieldDLG.signalsBlocked = unbound qt slot signalsBlocked of QDialog type stackUnder typerig.gui.widgets.TR2FieldDLG.stackUnder = unbound qt slot stackUnder of QDialog type startTimer typerig.gui.widgets.TR2FieldDLG.startTimer = unbound qt slot startTimer of QDialog type style typerig.gui.widgets.TR2FieldDLG.style = unbound qt slot style of QDialog type tabletEvent typerig.gui.widgets.TR2FieldDLG.tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type testAttribute typerig.gui.widgets.TR2FieldDLG.testAttribute = unbound qt slot testAttribute of QDialog type thread typerig.gui.widgets.TR2FieldDLG.thread = unbound qt slot thread of QDialog type timerEvent typerig.gui.widgets.TR2FieldDLG.timerEvent = unbound qt slot py_q_timerEvent of QDialog type tr typerig.gui.widgets.TR2FieldDLG.tr = unbound qt slot tr of QDialog type underMouse typerig.gui.widgets.TR2FieldDLG.underMouse = unbound qt slot underMouse of QDialog type ungrabGesture typerig.gui.widgets.TR2FieldDLG.ungrabGesture = unbound qt slot ungrabGesture of QDialog type unsetCursor typerig.gui.widgets.TR2FieldDLG.unsetCursor = unbound qt slot unsetCursor of QDialog type unsetLayoutDirection typerig.gui.widgets.TR2FieldDLG.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type unsetLocale typerig.gui.widgets.TR2FieldDLG.unsetLocale = unbound qt slot unsetLocale of QDialog type update typerig.gui.widgets.TR2FieldDLG.update = unbound qt slot update of QDialog type updateGeometry typerig.gui.widgets.TR2FieldDLG.updateGeometry = unbound qt slot updateGeometry of QDialog type visibleRegion typerig.gui.widgets.TR2FieldDLG.visibleRegion = unbound qt slot visibleRegion of QDialog type wheelEvent typerig.gui.widgets.TR2FieldDLG.wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type widthMM typerig.gui.widgets.TR2FieldDLG.widthMM = unbound qt slot widthMM of QDialog type window typerig.gui.widgets.TR2FieldDLG.window = unbound qt slot window of QDialog type windowFlags typerig.gui.widgets.TR2FieldDLG.windowFlags = unbound qt slot windowFlags of QDialog type windowHandle typerig.gui.widgets.TR2FieldDLG.windowHandle = unbound qt slot windowHandle of QDialog type windowRole typerig.gui.widgets.TR2FieldDLG.windowRole = unbound qt slot windowRole of QDialog type windowState typerig.gui.widgets.TR2FieldDLG.windowState = unbound qt slot windowState of QDialog type windowType typerig.gui.widgets.TR2FieldDLG.windowType = unbound qt slot windowType of QDialog type winId typerig.gui.widgets.TR2FieldDLG.winId = unbound qt slot winId of QDialog type TRSliderCtrl typerig.gui.widgets.TRSliderCtrl = class TRSliderCtrl ( typerig.gui.QtGui.QGridLayout ) # -- Sliders ------------------------------ Method resolution order: TRSliderCtrl typerig.gui.QtGui.QGridLayout PythonQt.QtGui.QGridLayout PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, edt_0, edt_1, edt_pos, spb_step) refreshSlider (self) reset (self) sliderChange (self) Attributes SetDefaultConstraint = 0 SetFixedSize = 3 SetMaximumSize = 4 SetMinAndMaxSize = 5 SetMinimumSize = 2 SetNoConstraint = 1 SizeConstraint = class 'PythonQt.QtGui.SizeConstraint' activate = unbound qt slot activate of QGridLayout type X. activate (a) -> bool addChildLayout = unbound qt slot addChildLayout of QGridLayout type X. addChildLayout (a, b) addChildWidget = unbound qt slot addChildWidget of QGridLayout type X. addChildWidget (a, b) addItem = unbound qt slot py_q_addItem of QGridLayout type X. addItem (a, b) addLayout = unbound qt slot addLayout of QGridLayout type X. addLayout (a, b, c, d, e, f, g) addWidget = unbound qt slot addWidget of QGridLayout type X. addWidget (a, b, c, d, e, f, g) adoptLayout = unbound qt slot adoptLayout of QGridLayout type X. adoptLayout (a, b) -> bool alignment = unbound qt slot alignment of QGridLayout type X. alignment (a) alignmentRect = unbound qt slot alignmentRect of QGridLayout type X. alignmentRect (a, b) -> PythonQt.QtCore.QRect blockSignals = unbound qt slot blockSignals of QGridLayout type X. blockSignals (a, b) -> bool cellRect = unbound qt slot cellRect of QGridLayout type X. cellRect (a, b, c) -> PythonQt.QtCore.QRect childEvent = unbound qt slot py_q_childEvent of QGridLayout type X. childEvent (a, b) children = unbound qt slot children of QGridLayout type X. children (a) -> tuple className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type X. closestAcceptableSize (a, b) -> PythonQt.QtCore.QSize columnCount = unbound qt slot columnCount of QGridLayout type X. columnCount (a) -> int columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type X. columnMinimumWidth (a, b) -> int columnStretch = unbound qt slot columnStretch of QGridLayout type X. columnStretch (a, b) -> int connect = unbound qt slot connect of QGridLayout type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QGridLayout type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QGridLayout type X. contentsRect (a) -> PythonQt.QtCore.QRect controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type X. controlTypes (a) count = unbound qt slot py_q_count of QGridLayout type X. count (a) -> int customEvent = unbound qt slot py_q_customEvent of QGridLayout type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QGridLayout type X. deleteLater () destroyed = unbound qt signal destroyed of QGridLayout type disconnect = unbound qt slot disconnect of QGridLayout type X. disconnect (a, b, c, d) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type X. dynamicPropertyNames (a) event = unbound qt slot py_q_event of QGridLayout type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type X. eventFilter (a, b, c) -> bool expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type X. expandingDirections (a) findChild = unbound qt slot findChild of QGridLayout type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QGridLayout type X. findChildren (a, b, c) -> tuple geometry = unbound qt slot py_q_geometry of QGridLayout type X. geometry (a) -> PythonQt.QtCore.QRect hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type X. hasHeightForWidth (a) -> bool heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type X. heightForWidth (a, b) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type X. horizontalSpacing (a) -> int indexOf = unbound qt slot py_q_indexOf of QGridLayout type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name installEventFilter = unbound qt slot installEventFilter of QGridLayout type X. installEventFilter (a, b) invalidate = unbound qt slot py_q_invalidate of QGridLayout type X. invalidate (a) isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type X. isEmpty (a) -> bool isEnabled = unbound qt slot isEnabled of QGridLayout type X. isEnabled (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type X. isSignalConnected (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QGridLayout type X. isWidgetType (a) -> bool isWindowType = unbound qt slot isWindowType of QGridLayout type X. isWindowType (a) -> bool itemAt = unbound qt slot py_q_itemAt of QGridLayout type X. itemAt (a, b) -> PythonQt.QtGui.QLayoutItem itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type X. itemAtPosition (a, b, c) -> PythonQt.QtGui.QLayoutItem killTimer = unbound qt slot killTimer of QGridLayout type X. killTimer (a, b) layout = unbound qt slot py_q_layout of QGridLayout type X. layout (a) -> PythonQt.QtGui.QLayout margin = None maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type X. maximumSize (a) -> PythonQt.QtCore.QSize menuBar = unbound qt slot menuBar of QGridLayout type X. menuBar (a) -> PythonQt.QtGui.QWidget metaObject = unbound qt slot metaObject of QGridLayout type X. metaObject (a) -> PythonQt.QtCore.QMetaObject minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type X. minimumHeightForWidth (a, b) -> int minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type X. minimumSize (a) -> PythonQt.QtCore.QSize moveToThread = unbound qt slot moveToThread of QGridLayout type X. moveToThread (a, b) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QGridLayout type originCorner = unbound qt slot originCorner of QGridLayout type X. originCorner (a) parent = unbound qt slot parent of QGridLayout type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QGridLayout type X. parentWidget (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QGridLayout type X. property (a, b) -> object removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type X. removeEventFilter (a, b) removeItem = unbound qt slot removeItem of QGridLayout type X. removeItem (a, b) removeWidget = unbound qt slot removeWidget of QGridLayout type X. removeWidget (a, b) replaceWidget = unbound qt slot replaceWidget of QGridLayout type X. replaceWidget (a, b, c, d) -> PythonQt.QtGui.QLayoutItem rowCount = unbound qt slot rowCount of QGridLayout type X. rowCount (a) -> int rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type X. rowMinimumHeight (a, b) -> int rowStretch = unbound qt slot rowStretch of QGridLayout type X. rowStretch (a, b) -> int sender = unbound qt slot sender of QGridLayout type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type X. senderSignalIndex (a) -> int setAlignment = unbound qt slot setAlignment of QGridLayout type X. setAlignment (a, b, c) -> bool setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type X. setColumnMinimumWidth (a, b, c) setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type X. setColumnStretch (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type X. setContentsMargins (a, b, c, d, e) setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type X. setDefaultPositioning (a, b, c) setEnabled = unbound qt slot setEnabled of QGridLayout type X. setEnabled (a, b) setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type X. setGeometry (a, b) setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type X. setHorizontalSpacing (a, b) setMargin = unbound qt slot setMargin of QGridLayout type X. setMargin (a, b) setMenuBar = unbound qt slot setMenuBar of QGridLayout type X. setMenuBar (a, b) setObjectName = unbound qt slot setObjectName of QGridLayout type X. setObjectName (a, b) setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type X. setOriginCorner (a, b) setParent = unbound qt slot setParent of QGridLayout type X. setParent (a, b) setProperty = unbound qt slot setProperty of QGridLayout type X. setProperty (a, b, c) -> bool setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type X. setRowMinimumHeight (a, b, c) setRowStretch = unbound qt slot setRowStretch of QGridLayout type X. setRowStretch (a, b, c) setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type X. setSizeConstraint (a, b) setSpacing = unbound qt slot setSpacing of QGridLayout type X. setSpacing (a, b) setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type X. setVerticalSpacing (a, b) signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type X. signalsBlocked (a) -> bool sizeConstraint = None sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type X. sizeHint (a) -> PythonQt.QtCore.QSize spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type X. spacerItem (a) -> PythonQt.QtGui.QSpacerItem spacing = None startTimer = unbound qt slot startTimer of QGridLayout type X. startTimer (a, b, c) -> int takeAt = unbound qt slot py_q_takeAt of QGridLayout type X. takeAt (a, b) -> PythonQt.QtGui.QLayoutItem thread = unbound qt slot thread of QGridLayout type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type X. timerEvent (a, b) totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type X. totalHeightForWidth (a, b) -> int totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type X. totalMaximumSize (a) -> PythonQt.QtCore.QSize totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type X. totalMinimumSize (a) -> PythonQt.QtCore.QSize totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type X. totalSizeHint (a) -> PythonQt.QtCore.QSize tr = unbound qt slot tr of QGridLayout type X. tr (a, b, c, d) -> str update = unbound qt slot update of QGridLayout type X. update (a) verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type X. verticalSpacing (a) -> int widget = unbound qt slot py_q_widget of QGridLayout type X. widget (a) -> PythonQt.QtGui.QWidget widgetEvent = unbound qt slot widgetEvent of QGridLayout type X. widgetEvent (a, b) Descriptors from PythonQt.QtGui.QGridLayout __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T activate typerig.gui.widgets.TRSliderCtrl.activate = unbound qt slot activate of QGridLayout type addChildLayout typerig.gui.widgets.TRSliderCtrl.addChildLayout = unbound qt slot addChildLayout of QGridLayout type addChildWidget typerig.gui.widgets.TRSliderCtrl.addChildWidget = unbound qt slot addChildWidget of QGridLayout type addItem typerig.gui.widgets.TRSliderCtrl.addItem = unbound qt slot py_q_addItem of QGridLayout type addLayout typerig.gui.widgets.TRSliderCtrl.addLayout = unbound qt slot addLayout of QGridLayout type addWidget typerig.gui.widgets.TRSliderCtrl.addWidget = unbound qt slot addWidget of QGridLayout type adoptLayout typerig.gui.widgets.TRSliderCtrl.adoptLayout = unbound qt slot adoptLayout of QGridLayout type alignment typerig.gui.widgets.TRSliderCtrl.alignment = unbound qt slot alignment of QGridLayout type alignmentRect typerig.gui.widgets.TRSliderCtrl.alignmentRect = unbound qt slot alignmentRect of QGridLayout type blockSignals typerig.gui.widgets.TRSliderCtrl.blockSignals = unbound qt slot blockSignals of QGridLayout type cellRect typerig.gui.widgets.TRSliderCtrl.cellRect = unbound qt slot cellRect of QGridLayout type childEvent typerig.gui.widgets.TRSliderCtrl.childEvent = unbound qt slot py_q_childEvent of QGridLayout type children typerig.gui.widgets.TRSliderCtrl.children = unbound qt slot children of QGridLayout type className typerig.gui.widgets.TRSliderCtrl.className = className (...) Return the classname of the object closestAcceptableSize typerig.gui.widgets.TRSliderCtrl.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type columnCount typerig.gui.widgets.TRSliderCtrl.columnCount = unbound qt slot columnCount of QGridLayout type columnMinimumWidth typerig.gui.widgets.TRSliderCtrl.columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type columnStretch typerig.gui.widgets.TRSliderCtrl.columnStretch = unbound qt slot columnStretch of QGridLayout type connect typerig.gui.widgets.TRSliderCtrl.connect = unbound qt slot connect of QGridLayout type contentsMargins typerig.gui.widgets.TRSliderCtrl.contentsMargins = unbound qt slot contentsMargins of QGridLayout type contentsRect typerig.gui.widgets.TRSliderCtrl.contentsRect = unbound qt slot contentsRect of QGridLayout type controlTypes typerig.gui.widgets.TRSliderCtrl.controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type count typerig.gui.widgets.TRSliderCtrl.count = unbound qt slot py_q_count of QGridLayout type customEvent typerig.gui.widgets.TRSliderCtrl.customEvent = unbound qt slot py_q_customEvent of QGridLayout type delete typerig.gui.widgets.TRSliderCtrl.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.widgets.TRSliderCtrl.deleteLater = unbound qt slot deleteLater of QGridLayout type disconnect typerig.gui.widgets.TRSliderCtrl.disconnect = unbound qt slot disconnect of QGridLayout type dumpObjectInfo typerig.gui.widgets.TRSliderCtrl.dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type dumpObjectTree typerig.gui.widgets.TRSliderCtrl.dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type dynamicPropertyNames typerig.gui.widgets.TRSliderCtrl.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type event typerig.gui.widgets.TRSliderCtrl.event = unbound qt slot py_q_event of QGridLayout type eventFilter typerig.gui.widgets.TRSliderCtrl.eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type expandingDirections typerig.gui.widgets.TRSliderCtrl.expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type findChild typerig.gui.widgets.TRSliderCtrl.findChild = unbound qt slot findChild of QGridLayout type findChildren typerig.gui.widgets.TRSliderCtrl.findChildren = unbound qt slot findChildren of QGridLayout type geometry typerig.gui.widgets.TRSliderCtrl.geometry = unbound qt slot py_q_geometry of QGridLayout type hasHeightForWidth typerig.gui.widgets.TRSliderCtrl.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type heightForWidth typerig.gui.widgets.TRSliderCtrl.heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type help typerig.gui.widgets.TRSliderCtrl.help = help (...) Shows the help of available methods for this class horizontalSpacing typerig.gui.widgets.TRSliderCtrl.horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type indexOf typerig.gui.widgets.TRSliderCtrl.indexOf = unbound qt slot py_q_indexOf of QGridLayout type inherits typerig.gui.widgets.TRSliderCtrl.inherits = inherits (...) Returns if the class inherits or is of given type name installEventFilter typerig.gui.widgets.TRSliderCtrl.installEventFilter = unbound qt slot installEventFilter of QGridLayout type invalidate typerig.gui.widgets.TRSliderCtrl.invalidate = unbound qt slot py_q_invalidate of QGridLayout type isEmpty typerig.gui.widgets.TRSliderCtrl.isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type isEnabled typerig.gui.widgets.TRSliderCtrl.isEnabled = unbound qt slot isEnabled of QGridLayout type isSignalConnected typerig.gui.widgets.TRSliderCtrl.isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type isWidgetType typerig.gui.widgets.TRSliderCtrl.isWidgetType = unbound qt slot isWidgetType of QGridLayout type isWindowType typerig.gui.widgets.TRSliderCtrl.isWindowType = unbound qt slot isWindowType of QGridLayout type itemAt typerig.gui.widgets.TRSliderCtrl.itemAt = unbound qt slot py_q_itemAt of QGridLayout type itemAtPosition typerig.gui.widgets.TRSliderCtrl.itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type killTimer typerig.gui.widgets.TRSliderCtrl.killTimer = unbound qt slot killTimer of QGridLayout type layout typerig.gui.widgets.TRSliderCtrl.layout = unbound qt slot py_q_layout of QGridLayout type maximumSize typerig.gui.widgets.TRSliderCtrl.maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type menuBar typerig.gui.widgets.TRSliderCtrl.menuBar = unbound qt slot menuBar of QGridLayout type metaObject typerig.gui.widgets.TRSliderCtrl.metaObject = unbound qt slot metaObject of QGridLayout type minimumHeightForWidth typerig.gui.widgets.TRSliderCtrl.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type minimumSize typerig.gui.widgets.TRSliderCtrl.minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type moveToThread typerig.gui.widgets.TRSliderCtrl.moveToThread = unbound qt slot moveToThread of QGridLayout type originCorner typerig.gui.widgets.TRSliderCtrl.originCorner = unbound qt slot originCorner of QGridLayout type parent typerig.gui.widgets.TRSliderCtrl.parent = unbound qt slot parent of QGridLayout type parentWidget typerig.gui.widgets.TRSliderCtrl.parentWidget = unbound qt slot parentWidget of QGridLayout type property typerig.gui.widgets.TRSliderCtrl.property = unbound qt slot property of QGridLayout type removeEventFilter typerig.gui.widgets.TRSliderCtrl.removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type removeItem typerig.gui.widgets.TRSliderCtrl.removeItem = unbound qt slot removeItem of QGridLayout type removeWidget typerig.gui.widgets.TRSliderCtrl.removeWidget = unbound qt slot removeWidget of QGridLayout type replaceWidget typerig.gui.widgets.TRSliderCtrl.replaceWidget = unbound qt slot replaceWidget of QGridLayout type rowCount typerig.gui.widgets.TRSliderCtrl.rowCount = unbound qt slot rowCount of QGridLayout type rowMinimumHeight typerig.gui.widgets.TRSliderCtrl.rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type rowStretch typerig.gui.widgets.TRSliderCtrl.rowStretch = unbound qt slot rowStretch of QGridLayout type sender typerig.gui.widgets.TRSliderCtrl.sender = unbound qt slot sender of QGridLayout type senderSignalIndex typerig.gui.widgets.TRSliderCtrl.senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type setAlignment typerig.gui.widgets.TRSliderCtrl.setAlignment = unbound qt slot setAlignment of QGridLayout type setColumnMinimumWidth typerig.gui.widgets.TRSliderCtrl.setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type setColumnStretch typerig.gui.widgets.TRSliderCtrl.setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type setContentsMargins typerig.gui.widgets.TRSliderCtrl.setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type setDefaultPositioning typerig.gui.widgets.TRSliderCtrl.setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type setEnabled typerig.gui.widgets.TRSliderCtrl.setEnabled = unbound qt slot setEnabled of QGridLayout type setGeometry typerig.gui.widgets.TRSliderCtrl.setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type setHorizontalSpacing typerig.gui.widgets.TRSliderCtrl.setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type setMargin typerig.gui.widgets.TRSliderCtrl.setMargin = unbound qt slot setMargin of QGridLayout type setMenuBar typerig.gui.widgets.TRSliderCtrl.setMenuBar = unbound qt slot setMenuBar of QGridLayout type setObjectName typerig.gui.widgets.TRSliderCtrl.setObjectName = unbound qt slot setObjectName of QGridLayout type setOriginCorner typerig.gui.widgets.TRSliderCtrl.setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type setParent typerig.gui.widgets.TRSliderCtrl.setParent = unbound qt slot setParent of QGridLayout type setProperty typerig.gui.widgets.TRSliderCtrl.setProperty = unbound qt slot setProperty of QGridLayout type setRowMinimumHeight typerig.gui.widgets.TRSliderCtrl.setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type setRowStretch typerig.gui.widgets.TRSliderCtrl.setRowStretch = unbound qt slot setRowStretch of QGridLayout type setSizeConstraint typerig.gui.widgets.TRSliderCtrl.setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type setSpacing typerig.gui.widgets.TRSliderCtrl.setSpacing = unbound qt slot setSpacing of QGridLayout type setVerticalSpacing typerig.gui.widgets.TRSliderCtrl.setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type signalsBlocked typerig.gui.widgets.TRSliderCtrl.signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type sizeHint typerig.gui.widgets.TRSliderCtrl.sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type spacerItem typerig.gui.widgets.TRSliderCtrl.spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type startTimer typerig.gui.widgets.TRSliderCtrl.startTimer = unbound qt slot startTimer of QGridLayout type takeAt typerig.gui.widgets.TRSliderCtrl.takeAt = unbound qt slot py_q_takeAt of QGridLayout type thread typerig.gui.widgets.TRSliderCtrl.thread = unbound qt slot thread of QGridLayout type timerEvent typerig.gui.widgets.TRSliderCtrl.timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type totalHeightForWidth typerig.gui.widgets.TRSliderCtrl.totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type totalMaximumSize typerig.gui.widgets.TRSliderCtrl.totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type totalMinimumSize typerig.gui.widgets.TRSliderCtrl.totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type totalSizeHint typerig.gui.widgets.TRSliderCtrl.totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type tr typerig.gui.widgets.TRSliderCtrl.tr = unbound qt slot tr of QGridLayout type update typerig.gui.widgets.TRSliderCtrl.update = unbound qt slot update of QGridLayout type verticalSpacing typerig.gui.widgets.TRSliderCtrl.verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type widget typerig.gui.widgets.TRSliderCtrl.widget = unbound qt slot py_q_widget of QGridLayout type widgetEvent typerig.gui.widgets.TRSliderCtrl.widgetEvent = unbound qt slot widgetEvent of QGridLayout type TRTableView typerig.gui.widgets.TRTableView = class TRTableView ( PythonQt.QtGui.QTableWidget ) # -- Tables ------------------------------------------------------ Method resolution order: TRTableView PythonQt.QtGui.QTableWidget PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, data) getTable (self, raw =False ) markChange (self, item) setTable (self, data, sortData =(True, True) , indexColCheckable =None ) Attributes AboveItem = 1 AdjustIgnored = 0 AdjustToContents = 2 AdjustToContentsOnFirstShow = 1 AllEditTriggers = 31 AnimatingState = 6 AnyKeyPressed = 16 BelowItem = 2 Box = 1 CollapsingState = 5 ContiguousSelection = 4 CurrentChanged = 1 CursorAction = class 'PythonQt.QtGui.CursorAction' DoubleClicked = 2 DragDrop = 3 DragDropMode = class 'PythonQt.QtGui.DragDropMode' DragOnly = 1 DragSelectingState = 2 DraggingState = 1 DrawChildren = 2 DrawWindowBackground = 1 DropIndicatorPosition = class 'PythonQt.QtGui.DropIndicatorPosition' DropOnly = 2 EditKeyPressed = 8 EditTrigger = class 'PythonQt.QtGui.EditTrigger' EditTriggers = class 'PythonQt.QtGui.EditTriggers' EditingState = 3 EnsureVisible = 0 ExpandingState = 4 ExtendedSelection = 3 HLine = 4 IgnoreMask = 4 InternalMove = 4 MoveDown = 1 MoveEnd = 5 MoveHome = 4 MoveLeft = 2 MoveNext = 8 MovePageDown = 7 MovePageUp = 6 MovePrevious = 9 MoveRight = 3 MoveUp = 0 MultiSelection = 2 NoDragDrop = 0 NoEditTriggers = 0 NoFrame = 0 NoSelection = 0 NoState = 0 OnItem = 0 OnViewport = 3 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' Panel = 2 PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 Plain = 16 PositionAtBottom = 2 PositionAtCenter = 3 PositionAtTop = 1 Raised = 32 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' ScrollHint = class 'PythonQt.QtGui.ScrollHint' ScrollMode = class 'PythonQt.QtGui.ScrollMode' ScrollPerItem = 0 ScrollPerPixel = 1 SelectColumns = 2 SelectItems = 0 SelectRows = 1 SelectedClicked = 4 SelectionBehavior = class 'PythonQt.QtGui.SelectionBehavior' SelectionMode = class 'PythonQt.QtGui.SelectionMode' Shadow = class 'PythonQt.QtGui.Shadow' Shadow_Mask = 240 Shape = class 'PythonQt.QtGui.Shape' Shape_Mask = 15 SingleSelection = 1 SizeAdjustPolicy = class 'PythonQt.QtGui.SizeAdjustPolicy' State = class 'PythonQt.QtGui.State' StyleMask = class 'PythonQt.QtGui.StyleMask' StyledPanel = 6 Sunken = 48 VLine = 5 WinPanel = 3 acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QTableWidget type X. actionEvent (a, b) actions = unbound qt slot actions of QTableWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QTableWidget type X. activateWindow (a) activated = unbound qt signal activated of QTableWidget type addAction = unbound qt slot addAction of QTableWidget type X. addAction (a, b) addActions = unbound qt slot addActions of QTableWidget type X. addActions (a, b) addScrollBarWidget = unbound qt slot addScrollBarWidget of QTableWidget type X. addScrollBarWidget (a, b, c) adjustSize = unbound qt slot adjustSize of QTableWidget type X. adjustSize (a) alternatingRowColors = None autoFillBackground = None autoScroll = None autoScrollMargin = None backgroundRole = unbound qt slot backgroundRole of QTableWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QTableWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QTableWidget type X. blockSignals (a, b) -> bool cellActivated = unbound qt signal cellActivated of QTableWidget type cellChanged = unbound qt signal cellChanged of QTableWidget type cellClicked = unbound qt signal cellClicked of QTableWidget type cellDoubleClicked = unbound qt signal cellDoubleClicked of QTableWidget type cellEntered = unbound qt signal cellEntered of QTableWidget type cellPressed = unbound qt signal cellPressed of QTableWidget type cellWidget = unbound qt slot cellWidget of QTableWidget type X. cellWidget (a, b, c) -> PythonQt.QtGui.QWidget changeEvent = unbound qt slot py_q_changeEvent of QTableWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of QTableWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QTableWidget type X. childEvent (a, b) children = unbound qt slot children of QTableWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clear = unbound qt slot clear of QTableWidget type X. clear () clearContents = unbound qt slot clearContents of QTableWidget type X. clearContents () clearFocus = unbound qt slot clearFocus of QTableWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of QTableWidget type X. clearMask (a) clearSelection = unbound qt slot clearSelection of QTableWidget type X. clearSelection () clearSpans = unbound qt slot clearSpans of QTableWidget type X. clearSpans (a) clicked = unbound qt signal clicked of QTableWidget type close = unbound qt slot close of QTableWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QTableWidget type X. closeEvent (a, b) closePersistentEditor = unbound qt slot closePersistentEditor of QTableWidget type X. closePersistentEditor (a, b) colorCount = unbound qt slot colorCount of QTableWidget type X. colorCount (a) -> int column = unbound qt slot column of QTableWidget type X. column (a, b) -> int columnAt = unbound qt slot columnAt of QTableWidget type X. columnAt (a, b) -> int columnCount = None columnSpan = unbound qt slot columnSpan of QTableWidget type X. columnSpan (a, b, c) -> int columnViewportPosition = unbound qt slot columnViewportPosition of QTableWidget type X. columnViewportPosition (a, b) -> int columnWidth = unbound qt slot columnWidth of QTableWidget type X. columnWidth (a, b) -> int connect = unbound qt slot connect of QTableWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QTableWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QTableWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTableWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None cornerButtonEnabled = None cornerWidget = unbound qt slot cornerWidget of QTableWidget type X. cornerWidget (a) -> PythonQt.QtGui.QWidget createWinId = unbound qt slot createWinId of QTableWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTableWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget currentCellChanged = unbound qt signal currentCellChanged of QTableWidget type currentColumn = unbound qt slot currentColumn of QTableWidget type X. currentColumn (a) -> int currentIndex = unbound qt slot currentIndex of QTableWidget type X. currentIndex (a) -> PythonQt.QtCore.QModelIndex currentItem = unbound qt slot currentItem of QTableWidget type X. currentItem (a) -> PythonQt.QtGui.QTableWidgetItem currentItemChanged = unbound qt signal currentItemChanged of QTableWidget type currentRow = unbound qt slot currentRow of QTableWidget type X. currentRow (a) -> int cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QTableWidget type customEvent = unbound qt slot py_q_customEvent of QTableWidget type X. customEvent (a, b) defaultDropAction = None delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QTableWidget type X. deleteLater () depth = unbound qt slot depth of QTableWidget type X. depth (a) -> int destroy = unbound qt slot destroy of QTableWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QTableWidget type devType = unbound qt slot py_q_devType of QTableWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QTableWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QTableWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTableWidget type X. devicePixelRatioFScale () -> float dirtyRegionOffset = unbound qt slot dirtyRegionOffset of QTableWidget type X. dirtyRegionOffset (a) -> PythonQt.QtCore.QPoint disconnect = unbound qt slot disconnect of QTableWidget type X. disconnect (a, b, c, d) -> bool doAutoScroll = unbound qt slot doAutoScroll of QTableWidget type X. doAutoScroll (a) doItemsLayout = unbound qt slot py_q_doItemsLayout of QTableWidget type X. doItemsLayout (a) doubleClicked = unbound qt signal doubleClicked of QTableWidget type dragDropMode = None dragDropOverwriteMode = None dragEnabled = None dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTableWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTableWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTableWidget type X. dragMoveEvent (a, b) drawFrame = unbound qt slot drawFrame of QTableWidget type X. drawFrame (a, b) dropEvent = unbound qt slot py_q_dropEvent of QTableWidget type X. dropEvent (a, b) dropIndicatorPosition = unbound qt slot dropIndicatorPosition of QTableWidget type X. dropIndicatorPosition (a) -> int dropMimeData = unbound qt slot py_q_dropMimeData of QTableWidget type X. dropMimeData (a, b, c, d, e) -> bool dumpObjectInfo = unbound qt slot dumpObjectInfo of QTableWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QTableWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTableWidget type X. dynamicPropertyNames (a) edit = unbound qt slot py_q_edit of QTableWidget type X. edit (a, b, c, d) -> bool editItem = unbound qt slot editItem of QTableWidget type X. editItem (a, b) editTriggers = None effectiveWinId = unbound qt slot effectiveWinId of QTableWidget type X. effectiveWinId (a) enabled = None ensurePolished = unbound qt slot ensurePolished of QTableWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QTableWidget type X. enterEvent (a, b) entered = unbound qt signal entered of QTableWidget type event = unbound qt slot py_q_event of QTableWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QTableWidget type X. eventFilter (a, b, c) -> bool executeDelayedItemsLayout = unbound qt slot executeDelayedItemsLayout of QTableWidget type X. executeDelayedItemsLayout (a) findChild = unbound qt slot findChild of QTableWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QTableWidget type X. findChildren (a, b, c) -> tuple findItems = unbound qt slot findItems of QTableWidget type X. findItems (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QTableWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QTableWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTableWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QTableWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QTableWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QTableWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QTableWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QTableWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameRect = QRect (QRect at: 0x0) frameShadow = None frameShape = None frameSize = QSize (QSize at: 0x0) frameStyle = unbound qt slot frameStyle of QTableWidget type X. frameStyle (a) -> int frameWidth = None fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QTableWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QTableWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QTableWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QTableWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QTableWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QTableWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTableWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget gridStyle = None hasAutoScroll = unbound qt slot hasAutoScroll of QTableWidget type X. hasAutoScroll (a) -> bool hasFocus = unbound qt slot hasFocus of QTableWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTableWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QTableWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QTableWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QTableWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QTableWidget type X. hide () hideColumn = unbound qt slot hideColumn of QTableWidget type X. hideColumn (a) hideEvent = unbound qt slot py_q_hideEvent of QTableWidget type X. hideEvent (a, b) hideRow = unbound qt slot hideRow of QTableWidget type X. hideRow (a) horizontalHeader = unbound qt slot horizontalHeader of QTableWidget type X. horizontalHeader (a) -> PythonQt.QtGui.QHeaderView horizontalHeaderItem = unbound qt slot horizontalHeaderItem of QTableWidget type X. horizontalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem horizontalOffset = unbound qt slot py_q_horizontalOffset of QTableWidget type X. horizontalOffset (a) -> int horizontalScrollBar = unbound qt slot horizontalScrollBar of QTableWidget type X. horizontalScrollBar (a) -> PythonQt.QtGui.QScrollBar horizontalScrollBarPolicy = None horizontalScrollMode = None iconSize = QSize (QSize at: 0x0) iconSizeChanged = unbound qt signal iconSizeChanged of QTableWidget type indexAt = unbound qt slot py_q_indexAt of QTableWidget type X. indexAt (a, b) -> PythonQt.QtCore.QModelIndex indexFromItem = unbound qt slot indexFromItem of QTableWidget type X. indexFromItem (a, b) -> PythonQt.QtCore.QModelIndex indexWidget = unbound qt slot indexWidget of QTableWidget type X. indexWidget (a, b) -> PythonQt.QtGui.QWidget inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QTableWidget type X. initPainter (a, b) initStyleOption = unbound qt slot initStyleOption of QTableWidget type X. initStyleOption (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTableWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTableWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QTableWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QTableWidget type X. insertActions (a, b, c) insertColumn = unbound qt slot insertColumn of QTableWidget type X. insertColumn (a) insertRow = unbound qt slot insertRow of QTableWidget type X. insertRow (a) installEventFilter = unbound qt slot installEventFilter of QTableWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QTableWidget type X. isAncestorOf (a, b) -> bool isColumnHidden = unbound qt slot isColumnHidden of QTableWidget type X. isColumnHidden (a, b) -> bool isCornerButtonEnabled = unbound qt slot isCornerButtonEnabled of QTableWidget type X. isCornerButtonEnabled (a) -> bool isEnabled = unbound qt slot isEnabled of QTableWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QTableWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QTableWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QTableWidget type X. isHidden (a) -> bool isIndexHidden = unbound qt slot py_q_isIndexHidden of QTableWidget type X. isIndexHidden (a, b) -> bool isLeftToRight = unbound qt slot isLeftToRight of QTableWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QTableWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QTableWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QTableWidget type X. isModal (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QTableWidget type X. isRightToLeft (a) -> bool isRowHidden = unbound qt slot isRowHidden of QTableWidget type X. isRowHidden (a, b) -> bool isSignalConnected = unbound qt slot isSignalConnected of QTableWidget type X. isSignalConnected (a, b) -> bool isSortingEnabled = unbound qt slot isSortingEnabled of QTableWidget type X. isSortingEnabled (a) -> bool isVisible = unbound qt slot isVisible of QTableWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QTableWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QTableWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QTableWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QTableWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QTableWidget type X. isWindowType (a) -> bool item = unbound qt slot item of QTableWidget type X. item (a, b, c) -> PythonQt.QtGui.QTableWidgetItem itemActivated = unbound qt signal itemActivated of QTableWidget type itemAt = unbound qt slot itemAt of QTableWidget type X. itemAt (a, b, c) -> PythonQt.QtGui.QTableWidgetItem itemChanged = unbound qt signal itemChanged of QTableWidget type itemClicked = unbound qt signal itemClicked of QTableWidget type itemDelegate = unbound qt slot itemDelegate of QTableWidget type X. itemDelegate (a, b) -> PythonQt.QtGui.QAbstractItemDelegate itemDelegateForColumn = unbound qt slot itemDelegateForColumn of QTableWidget type X. itemDelegateForColumn (a, b) -> PythonQt.QtGui.QAbstractItemDelegate itemDelegateForRow = unbound qt slot itemDelegateForRow of QTableWidget type X. itemDelegateForRow (a, b) -> PythonQt.QtGui.QAbstractItemDelegate itemDoubleClicked = unbound qt signal itemDoubleClicked of QTableWidget type itemEntered = unbound qt signal itemEntered of QTableWidget type itemFromIndex = unbound qt slot itemFromIndex of QTableWidget type X. itemFromIndex (a, b) -> PythonQt.QtGui.QTableWidgetItem itemPressed = unbound qt signal itemPressed of QTableWidget type itemPrototype = unbound qt slot itemPrototype of QTableWidget type X. itemPrototype (a) -> PythonQt.QtGui.QTableWidgetItem itemSelectionChanged = unbound qt signal itemSelectionChanged of QTableWidget type items = unbound qt slot items of QTableWidget type X. items (a, b) -> tuple keyPressEvent = unbound qt slot py_q_keyPressEvent of QTableWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTableWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTableWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget keyboardSearch = unbound qt slot py_q_keyboardSearch of QTableWidget type X. keyboardSearch (a, b) killTimer = unbound qt slot killTimer of QTableWidget type X. killTimer (a, b) layout = unbound qt slot layout of QTableWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QTableWidget type X. leaveEvent (a, b) lineWidth = None locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QTableWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QTableWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QTableWidget type X. lower () mapFrom = unbound qt slot mapFrom of QTableWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QTableWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QTableWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QTableWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QTableWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QTableWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QTableWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumViewportSize = unbound qt slot maximumViewportSize of QTableWidget type X. maximumViewportSize (a) -> PythonQt.QtCore.QSize maximumWidth = None metaObject = unbound qt slot metaObject of QTableWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QTableWidget type X. metric (a, b) -> int midLineWidth = None mimeTypes = unbound qt slot py_q_mimeTypes of QTableWidget type X. mimeTypes (a) -> tuple minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None model = unbound qt slot model of QTableWidget type X. model (a) -> PythonQt.QtCore.QAbstractItemModel mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTableWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTableWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTableWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QTableWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTableWidget type X. mouseReleaseEvent (a, b) mouseTracking = None move = unbound qt slot move of QTableWidget type X. move (a, b, c) moveCursor = unbound qt slot moveCursor of QTableWidget type X. moveCursor (a, b, c) -> PythonQt.QtCore.QModelIndex moveEvent = unbound qt slot py_q_moveEvent of QTableWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QTableWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QTableWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QTableWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QTableWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QTableWidget type openPersistentEditor = unbound qt slot openPersistentEditor of QTableWidget type X. openPersistentEditor (a, b) overrideWindowFlags = unbound qt slot overrideWindowFlags of QTableWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QTableWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QTableWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QTableWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QTableWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QTableWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QTableWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QTableWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QTableWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) pressed = unbound qt signal pressed of QTableWidget type previousInFocusChain = unbound qt slot previousInFocusChain of QTableWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QTableWidget type X. property (a, b) -> object raise = unbound qt slot raise of QTableWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QTableWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of QTableWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QTableWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QTableWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QTableWidget type X. removeAction (a, b) removeCellWidget = unbound qt slot removeCellWidget of QTableWidget type X. removeCellWidget (a, b, c) removeColumn = unbound qt slot removeColumn of QTableWidget type X. removeColumn (a) removeEventFilter = unbound qt slot removeEventFilter of QTableWidget type X. removeEventFilter (a, b) removeRow = unbound qt slot removeRow of QTableWidget type X. removeRow (a) render = unbound qt slot render of QTableWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QTableWidget type X. repaint (a, b, c, d, e) reset = unbound qt slot py_q_reset of QTableWidget type X. reset (a) resize = unbound qt slot resize of QTableWidget type X. resize (a, b, c) resizeColumnToContents = unbound qt slot resizeColumnToContents of QTableWidget type X. resizeColumnToContents (a) resizeColumnsToContents = unbound qt slot resizeColumnsToContents of QTableWidget type X. resizeColumnsToContents () resizeEvent = unbound qt slot py_q_resizeEvent of QTableWidget type X. resizeEvent (a, b) resizeRowToContents = unbound qt slot resizeRowToContents of QTableWidget type X. resizeRowToContents (a) resizeRowsToContents = unbound qt slot resizeRowsToContents of QTableWidget type X. resizeRowsToContents () restoreGeometry = unbound qt slot restoreGeometry of QTableWidget type X. restoreGeometry (a, b) -> bool rootIndex = unbound qt slot rootIndex of QTableWidget type X. rootIndex (a) -> PythonQt.QtCore.QModelIndex row = unbound qt slot row of QTableWidget type X. row (a, b) -> int rowAt = unbound qt slot rowAt of QTableWidget type X. rowAt (a, b) -> int rowCount = None rowHeight = unbound qt slot rowHeight of QTableWidget type X. rowHeight (a, b) -> int rowSpan = unbound qt slot rowSpan of QTableWidget type X. rowSpan (a, b, c) -> int rowViewportPosition = unbound qt slot rowViewportPosition of QTableWidget type X. rowViewportPosition (a, b) -> int saveGeometry = unbound qt slot saveGeometry of QTableWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scheduleDelayedItemsLayout = unbound qt slot scheduleDelayedItemsLayout of QTableWidget type X. scheduleDelayedItemsLayout (a) scroll = unbound qt slot scroll of QTableWidget type X. scroll (a, b, c, d) scrollBarWidgets = unbound qt slot scrollBarWidgets of QTableWidget type X. scrollBarWidgets (a, b) -> tuple scrollContentsBy = unbound qt slot py_q_scrollContentsBy of QTableWidget type X. scrollContentsBy (a, b, c) scrollDirtyRegion = unbound qt slot scrollDirtyRegion of QTableWidget type X. scrollDirtyRegion (a, b, c) scrollTo = unbound qt slot py_q_scrollTo of QTableWidget type X. scrollTo (a, b, c) scrollToBottom = unbound qt slot scrollToBottom of QTableWidget type X. scrollToBottom () scrollToItem = unbound qt slot scrollToItem of QTableWidget type X. scrollToItem (a, b) scrollToTop = unbound qt slot scrollToTop of QTableWidget type X. scrollToTop () selectAll = unbound qt slot py_q_selectAll of QTableWidget type X. selectAll (a) selectColumn = unbound qt slot selectColumn of QTableWidget type X. selectColumn (a) selectRow = unbound qt slot selectRow of QTableWidget type X. selectRow (a) selectedIndexes = unbound qt slot py_q_selectedIndexes of QTableWidget type X. selectedIndexes (a) -> tuple selectedItems = unbound qt slot selectedItems of QTableWidget type X. selectedItems (a) -> tuple selectedRanges = unbound qt slot selectedRanges of QTableWidget type X. selectedRanges (a) -> tuple selectionBehavior = None selectionCommand = unbound qt slot py_q_selectionCommand of QTableWidget type X. selectionCommand (a, b, c) selectionMode = None selectionModel = unbound qt slot selectionModel of QTableWidget type X. selectionModel (a) -> PythonQt.QtGui.QItemSelectionModel sender = unbound qt slot sender of QTableWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QTableWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QTableWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QTableWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QTableWidget type X. setAccessibleName (a, b) setAlternatingRowColors = unbound qt slot setAlternatingRowColors of QTableWidget type X. setAlternatingRowColors (a, b) setAttribute = unbound qt slot setAttribute of QTableWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QTableWidget type X. setAutoFillBackground (a, b) setAutoScroll = unbound qt slot setAutoScroll of QTableWidget type X. setAutoScroll (a, b) setAutoScrollMargin = unbound qt slot setAutoScrollMargin of QTableWidget type X. setAutoScrollMargin (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QTableWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QTableWidget type X. setBaseSize (a, b, c) setCellWidget = unbound qt slot setCellWidget of QTableWidget type X. setCellWidget (a, b, c, d) setColumnCount = unbound qt slot setColumnCount of QTableWidget type X. setColumnCount (a, b) setColumnHidden = unbound qt slot setColumnHidden of QTableWidget type X. setColumnHidden (a, b, c) setColumnWidth = unbound qt slot setColumnWidth of QTableWidget type X. setColumnWidth (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QTableWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTableWidget type X. setContextMenuPolicy (a, b) setCornerButtonEnabled = unbound qt slot setCornerButtonEnabled of QTableWidget type X. setCornerButtonEnabled (a, b) setCornerWidget = unbound qt slot setCornerWidget of QTableWidget type X. setCornerWidget (a, b) setCurrentCell = unbound qt slot setCurrentCell of QTableWidget type X. setCurrentCell (a, b, c, d) setCurrentIndex = unbound qt slot setCurrentIndex of QTableWidget type X. setCurrentIndex (a) setCurrentItem = unbound qt slot setCurrentItem of QTableWidget type X. setCurrentItem (a, b, c) setCursor = unbound qt slot setCursor of QTableWidget type X. setCursor (a, b) setDefaultDropAction = unbound qt slot setDefaultDropAction of QTableWidget type X. setDefaultDropAction (a, b) setDirtyRegion = unbound qt slot setDirtyRegion of QTableWidget type X. setDirtyRegion (a, b) setDisabled = unbound qt slot setDisabled of QTableWidget type X. setDisabled (a) setDragDropMode = unbound qt slot setDragDropMode of QTableWidget type X. setDragDropMode (a, b) setDragDropOverwriteMode = unbound qt slot setDragDropOverwriteMode of QTableWidget type X. setDragDropOverwriteMode (a, b) setDragEnabled = unbound qt slot setDragEnabled of QTableWidget type X. setDragEnabled (a, b) setDropIndicatorShown = unbound qt slot setDropIndicatorShown of QTableWidget type X. setDropIndicatorShown (a, b) setEditTriggers = unbound qt slot setEditTriggers of QTableWidget type X. setEditTriggers (a, b) setEnabled = unbound qt slot setEnabled of QTableWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QTableWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QTableWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QTableWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QTableWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QTableWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QTableWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QTableWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QTableWidget type X. setForegroundRole (a, b) setFrameRect = unbound qt slot setFrameRect of QTableWidget type X. setFrameRect (a, b) setFrameShadow = unbound qt slot setFrameShadow of QTableWidget type X. setFrameShadow (a, b) setFrameShape = unbound qt slot setFrameShape of QTableWidget type X. setFrameShape (a, b) setFrameStyle = unbound qt slot setFrameStyle of QTableWidget type X. setFrameStyle (a, b) setGeometry = unbound qt slot setGeometry of QTableWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QTableWidget type X. setGraphicsEffect (a, b) setGridStyle = unbound qt slot setGridStyle of QTableWidget type X. setGridStyle (a, b) setHidden = unbound qt slot setHidden of QTableWidget type X. setHidden (a) setHorizontalHeader = unbound qt slot setHorizontalHeader of QTableWidget type X. setHorizontalHeader (a, b) setHorizontalHeaderItem = unbound qt slot setHorizontalHeaderItem of QTableWidget type X. setHorizontalHeaderItem (a, b, c) setHorizontalHeaderLabels = unbound qt slot setHorizontalHeaderLabels of QTableWidget type X. setHorizontalHeaderLabels (a, b) setHorizontalScrollBar = unbound qt slot setHorizontalScrollBar of QTableWidget type X. setHorizontalScrollBar (a, b) setHorizontalScrollBarPolicy = unbound qt slot setHorizontalScrollBarPolicy of QTableWidget type X. setHorizontalScrollBarPolicy (a, b) setHorizontalScrollMode = unbound qt slot setHorizontalScrollMode of QTableWidget type X. setHorizontalScrollMode (a, b) setIconSize = unbound qt slot setIconSize of QTableWidget type X. setIconSize (a, b) setIndexWidget = unbound qt slot setIndexWidget of QTableWidget type X. setIndexWidget (a, b, c) setInputMethodHints = unbound qt slot setInputMethodHints of QTableWidget type X. setInputMethodHints (a, b) setItem = unbound qt slot setItem of QTableWidget type X. setItem (a, b, c, d) setItemDelegate = unbound qt slot setItemDelegate of QTableWidget type X. setItemDelegate (a, b) setItemDelegateForColumn = unbound qt slot setItemDelegateForColumn of QTableWidget type X. setItemDelegateForColumn (a, b, c) setItemDelegateForRow = unbound qt slot setItemDelegateForRow of QTableWidget type X. setItemDelegateForRow (a, b, c) setItemPrototype = unbound qt slot setItemPrototype of QTableWidget type X. setItemPrototype (a, b) setLayout = unbound qt slot setLayout of QTableWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QTableWidget type X. setLayoutDirection (a, b) setLineWidth = unbound qt slot setLineWidth of QTableWidget type X. setLineWidth (a, b) setLocale = unbound qt slot setLocale of QTableWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of QTableWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QTableWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QTableWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QTableWidget type X. setMaximumWidth (a, b) setMidLineWidth = unbound qt slot setMidLineWidth of QTableWidget type X. setMidLineWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QTableWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QTableWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QTableWidget type X. setMinimumWidth (a, b) setModel = unbound qt slot py_q_setModel of QTableWidget type X. setModel (a, b) setMouseTracking = unbound qt slot setMouseTracking of QTableWidget type X. setMouseTracking (a, b) setObjectName = unbound qt slot setObjectName of QTableWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QTableWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of QTableWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QTableWidget type X. setProperty (a, b, c) -> bool setRangeSelected = unbound qt slot setRangeSelected of QTableWidget type X. setRangeSelected (a, b, c) setRootIndex = unbound qt slot py_q_setRootIndex of QTableWidget type X. setRootIndex (a, b) setRowCount = unbound qt slot setRowCount of QTableWidget type X. setRowCount (a, b) setRowHeight = unbound qt slot setRowHeight of QTableWidget type X. setRowHeight (a, b, c) setRowHidden = unbound qt slot setRowHidden of QTableWidget type X. setRowHidden (a, b, c) setSelection = unbound qt slot py_q_setSelection of QTableWidget type X. setSelection (a, b, c) setSelectionBehavior = unbound qt slot setSelectionBehavior of QTableWidget type X. setSelectionBehavior (a, b) setSelectionMode = unbound qt slot setSelectionMode of QTableWidget type X. setSelectionMode (a, b) setSelectionModel = unbound qt slot py_q_setSelectionModel of QTableWidget type X. setSelectionModel (a, b) setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTableWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QTableWidget type X. setShortcutEnabled (a, b, c) setShowGrid = unbound qt slot setShowGrid of QTableWidget type X. setShowGrid (a) setSizeAdjustPolicy = unbound qt slot setSizeAdjustPolicy of QTableWidget type X. setSizeAdjustPolicy (a, b) setSizeIncrement = unbound qt slot setSizeIncrement of QTableWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QTableWidget type X. setSizePolicy (a, b, c) setSortingEnabled = unbound qt slot setSortingEnabled of QTableWidget type X. setSortingEnabled (a, b) setSpan = unbound qt slot setSpan of QTableWidget type X. setSpan (a, b, c, d, e) setState = unbound qt slot setState of QTableWidget type X. setState (a, b) setStatusTip = unbound qt slot setStatusTip of QTableWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QTableWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QTableWidget type X. setStyleSheet (a) setTabKeyNavigation = unbound qt slot setTabKeyNavigation of QTableWidget type X. setTabKeyNavigation (a, b) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTableWidget type X. setTabOrder (a, b) setTextElideMode = unbound qt slot setTextElideMode of QTableWidget type X. setTextElideMode (a, b) setToolTip = unbound qt slot setToolTip of QTableWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QTableWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTableWidget type X. setUpdatesEnabled (a, b) setVerticalHeader = unbound qt slot setVerticalHeader of QTableWidget type X. setVerticalHeader (a, b) setVerticalHeaderItem = unbound qt slot setVerticalHeaderItem of QTableWidget type X. setVerticalHeaderItem (a, b, c) setVerticalHeaderLabels = unbound qt slot setVerticalHeaderLabels of QTableWidget type X. setVerticalHeaderLabels (a, b) setVerticalScrollBar = unbound qt slot setVerticalScrollBar of QTableWidget type X. setVerticalScrollBar (a, b) setVerticalScrollBarPolicy = unbound qt slot setVerticalScrollBarPolicy of QTableWidget type X. setVerticalScrollBarPolicy (a, b) setVerticalScrollMode = unbound qt slot setVerticalScrollMode of QTableWidget type X. setVerticalScrollMode (a, b) setViewport = unbound qt slot setViewport of QTableWidget type X. setViewport (a, b) setViewportMargins = unbound qt slot setViewportMargins of QTableWidget type X. setViewportMargins (a, b, c, d, e) setVisible = unbound qt slot py_q_setVisible of QTableWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QTableWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QTableWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QTableWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QTableWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QTableWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QTableWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QTableWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QTableWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QTableWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QTableWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QTableWidget type X. setWindowTitle (a) setWordWrap = unbound qt slot setWordWrap of QTableWidget type X. setWordWrap (a, b) setupViewport = unbound qt slot py_q_setupViewport of QTableWidget type X. setupViewport (a, b) sharedPainter = unbound qt slot py_q_sharedPainter of QTableWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QTableWidget type X. show () showColumn = unbound qt slot showColumn of QTableWidget type X. showColumn (a) showDropIndicator = None showEvent = unbound qt slot py_q_showEvent of QTableWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of QTableWidget type X. showFullScreen () showGrid = None showMaximized = unbound qt slot showMaximized of QTableWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of QTableWidget type X. showMinimized () showNormal = unbound qt slot showNormal of QTableWidget type X. showNormal () showRow = unbound qt slot showRow of QTableWidget type X. showRow (a) signalsBlocked = unbound qt slot signalsBlocked of QTableWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeAdjustPolicy = None sizeHint = QSize (QSize at: 0x0) sizeHintForColumn = unbound qt slot py_q_sizeHintForColumn of QTableWidget type X. sizeHintForColumn (a, b) -> int sizeHintForIndex = unbound qt slot sizeHintForIndex of QTableWidget type X. sizeHintForIndex (a, b) -> PythonQt.QtCore.QSize sizeHintForRow = unbound qt slot py_q_sizeHintForRow of QTableWidget type X. sizeHintForRow (a, b) -> int sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) sortByColumn = unbound qt slot sortByColumn of QTableWidget type X. sortByColumn (a, b, c) sortItems = unbound qt slot sortItems of QTableWidget type X. sortItems (a, b, c) sortingEnabled = None stackUnder = unbound qt slot stackUnder of QTableWidget type X. stackUnder (a, b) startAutoScroll = unbound qt slot startAutoScroll of QTableWidget type X. startAutoScroll (a) startDrag = unbound qt slot py_q_startDrag of QTableWidget type X. startDrag (a, b) startTimer = unbound qt slot startTimer of QTableWidget type X. startTimer (a, b, c) -> int state = unbound qt slot state of QTableWidget type X. state (a) -> int statusTip = None stopAutoScroll = unbound qt slot stopAutoScroll of QTableWidget type X. stopAutoScroll (a) style = unbound qt slot style of QTableWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None supportedDropActions = unbound qt slot py_q_supportedDropActions of QTableWidget type X. supportedDropActions (a) tabKeyNavigation = None tabletEvent = unbound qt slot py_q_tabletEvent of QTableWidget type X. tabletEvent (a, b) tabletTracking = None takeHorizontalHeaderItem = unbound qt slot takeHorizontalHeaderItem of QTableWidget type X. takeHorizontalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem takeItem = unbound qt slot takeItem of QTableWidget type X. takeItem (a, b, c) -> PythonQt.QtGui.QTableWidgetItem takeVerticalHeaderItem = unbound qt slot takeVerticalHeaderItem of QTableWidget type X. takeVerticalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem testAttribute = unbound qt slot testAttribute of QTableWidget type X. testAttribute (a, b) -> bool textElideMode = None thread = unbound qt slot thread of QTableWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QTableWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QTableWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QTableWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QTableWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QTableWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTableWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QTableWidget type X. unsetLocale (a) update = unbound qt slot update of QTableWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QTableWidget type X. updateGeometry (a) updatesEnabled = None verticalHeader = unbound qt slot verticalHeader of QTableWidget type X. verticalHeader (a) -> PythonQt.QtGui.QHeaderView verticalHeaderItem = unbound qt slot verticalHeaderItem of QTableWidget type X. verticalHeaderItem (a, b) -> PythonQt.QtGui.QTableWidgetItem verticalOffset = unbound qt slot py_q_verticalOffset of QTableWidget type X. verticalOffset (a) -> int verticalScrollBar = unbound qt slot verticalScrollBar of QTableWidget type X. verticalScrollBar (a) -> PythonQt.QtGui.QScrollBar verticalScrollBarPolicy = None verticalScrollMode = None viewOptions = unbound qt slot py_q_viewOptions of QTableWidget type X. viewOptions (a) -> PythonQt.QtGui.QStyleOptionViewItem viewport = unbound qt slot viewport of QTableWidget type X. viewport (a) -> PythonQt.QtGui.QWidget viewportEntered = unbound qt signal viewportEntered of QTableWidget type viewportEvent = unbound qt slot py_q_viewportEvent of QTableWidget type X. viewportEvent (a, b) -> bool viewportMargins = unbound qt slot viewportMargins of QTableWidget type X. viewportMargins (a) -> PythonQt.QtGui.QMargins viewportSizeHint = unbound qt slot py_q_viewportSizeHint of QTableWidget type X. viewportSizeHint (a) -> PythonQt.QtCore.QSize visible = None visibleRegion = unbound qt slot visibleRegion of QTableWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion visualColumn = unbound qt slot visualColumn of QTableWidget type X. visualColumn (a, b) -> int visualItemRect = unbound qt slot visualItemRect of QTableWidget type X. visualItemRect (a, b) -> PythonQt.QtCore.QRect visualRect = unbound qt slot py_q_visualRect of QTableWidget type X. visualRect (a, b) -> PythonQt.QtCore.QRect visualRegionForSelection = unbound qt slot py_q_visualRegionForSelection of QTableWidget type X. visualRegionForSelection (a, b) -> PythonQt.QtGui.QRegion visualRow = unbound qt slot visualRow of QTableWidget type X. visualRow (a, b) -> int whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QTableWidget type X. wheelEvent (a, b) width = None widthMM = unbound qt slot widthMM of QTableWidget type X. widthMM (a) -> int winId = unbound qt slot winId of QTableWidget type X. winId (a) window = unbound qt slot window of QTableWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QTableWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QTableWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QTableWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QTableWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QTableWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of QTableWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QTableWidget type windowType = unbound qt slot windowType of QTableWidget type X. windowType (a) wordWrap = None x = None y = None Descriptors from PythonQt.QtGui.QTableWidget __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T actionEvent typerig.gui.widgets.TRTableView.actionEvent = unbound qt slot py_q_actionEvent of QTableWidget type actions typerig.gui.widgets.TRTableView.actions = unbound qt slot actions of QTableWidget type activateWindow typerig.gui.widgets.TRTableView.activateWindow = unbound qt slot activateWindow of QTableWidget type addAction typerig.gui.widgets.TRTableView.addAction = unbound qt slot addAction of QTableWidget type addActions typerig.gui.widgets.TRTableView.addActions = unbound qt slot addActions of QTableWidget type addScrollBarWidget typerig.gui.widgets.TRTableView.addScrollBarWidget = unbound qt slot addScrollBarWidget of QTableWidget type adjustSize typerig.gui.widgets.TRTableView.adjustSize = unbound qt slot adjustSize of QTableWidget type backgroundRole typerig.gui.widgets.TRTableView.backgroundRole = unbound qt slot backgroundRole of QTableWidget type backingStore typerig.gui.widgets.TRTableView.backingStore = unbound qt slot backingStore of QTableWidget type blockSignals typerig.gui.widgets.TRTableView.blockSignals = unbound qt slot blockSignals of QTableWidget type cellWidget typerig.gui.widgets.TRTableView.cellWidget = unbound qt slot cellWidget of QTableWidget type changeEvent typerig.gui.widgets.TRTableView.changeEvent = unbound qt slot py_q_changeEvent of QTableWidget type childAt typerig.gui.widgets.TRTableView.childAt = unbound qt slot childAt of QTableWidget type childEvent typerig.gui.widgets.TRTableView.childEvent = unbound qt slot py_q_childEvent of QTableWidget type children typerig.gui.widgets.TRTableView.children = unbound qt slot children of QTableWidget type className typerig.gui.widgets.TRTableView.className = className (...) Return the classname of the object clear typerig.gui.widgets.TRTableView.clear = unbound qt slot clear of QTableWidget type clearContents typerig.gui.widgets.TRTableView.clearContents = unbound qt slot clearContents of QTableWidget type clearFocus typerig.gui.widgets.TRTableView.clearFocus = unbound qt slot clearFocus of QTableWidget type clearMask typerig.gui.widgets.TRTableView.clearMask = unbound qt slot clearMask of QTableWidget type clearSelection typerig.gui.widgets.TRTableView.clearSelection = unbound qt slot clearSelection of QTableWidget type clearSpans typerig.gui.widgets.TRTableView.clearSpans = unbound qt slot clearSpans of QTableWidget type close typerig.gui.widgets.TRTableView.close = unbound qt slot close of QTableWidget type closeEvent typerig.gui.widgets.TRTableView.closeEvent = unbound qt slot py_q_closeEvent of QTableWidget type closePersistentEditor typerig.gui.widgets.TRTableView.closePersistentEditor = unbound qt slot closePersistentEditor of QTableWidget type colorCount typerig.gui.widgets.TRTableView.colorCount = unbound qt slot colorCount of QTableWidget type column typerig.gui.widgets.TRTableView.column = unbound qt slot column of QTableWidget type columnAt typerig.gui.widgets.TRTableView.columnAt = unbound qt slot columnAt of QTableWidget type columnSpan typerig.gui.widgets.TRTableView.columnSpan = unbound qt slot columnSpan of QTableWidget type columnViewportPosition typerig.gui.widgets.TRTableView.columnViewportPosition = unbound qt slot columnViewportPosition of QTableWidget type columnWidth typerig.gui.widgets.TRTableView.columnWidth = unbound qt slot columnWidth of QTableWidget type connect typerig.gui.widgets.TRTableView.connect = unbound qt slot connect of QTableWidget type contentsMargins typerig.gui.widgets.TRTableView.contentsMargins = unbound qt slot contentsMargins of QTableWidget type contentsRect typerig.gui.widgets.TRTableView.contentsRect = unbound qt slot contentsRect of QTableWidget type contextMenuEvent typerig.gui.widgets.TRTableView.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTableWidget type cornerWidget typerig.gui.widgets.TRTableView.cornerWidget = unbound qt slot cornerWidget of QTableWidget type createWindowContainer typerig.gui.widgets.TRTableView.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTableWidget type createWinId typerig.gui.widgets.TRTableView.createWinId = unbound qt slot createWinId of QTableWidget type currentColumn typerig.gui.widgets.TRTableView.currentColumn = unbound qt slot currentColumn of QTableWidget type currentIndex typerig.gui.widgets.TRTableView.currentIndex = unbound qt slot currentIndex of QTableWidget type currentItem typerig.gui.widgets.TRTableView.currentItem = unbound qt slot currentItem of QTableWidget type currentRow typerig.gui.widgets.TRTableView.currentRow = unbound qt slot currentRow of QTableWidget type customEvent typerig.gui.widgets.TRTableView.customEvent = unbound qt slot py_q_customEvent of QTableWidget type delete typerig.gui.widgets.TRTableView.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.widgets.TRTableView.deleteLater = unbound qt slot deleteLater of QTableWidget type depth typerig.gui.widgets.TRTableView.depth = unbound qt slot depth of QTableWidget type destroy typerig.gui.widgets.TRTableView.destroy = unbound qt slot destroy of QTableWidget type devicePixelRatio typerig.gui.widgets.TRTableView.devicePixelRatio = unbound qt slot devicePixelRatio of QTableWidget type devicePixelRatioF typerig.gui.widgets.TRTableView.devicePixelRatioF = unbound qt slot devicePixelRatioF of QTableWidget type devicePixelRatioFScale typerig.gui.widgets.TRTableView.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTableWidget type devType typerig.gui.widgets.TRTableView.devType = unbound qt slot py_q_devType of QTableWidget type dirtyRegionOffset typerig.gui.widgets.TRTableView.dirtyRegionOffset = unbound qt slot dirtyRegionOffset of QTableWidget type disconnect typerig.gui.widgets.TRTableView.disconnect = unbound qt slot disconnect of QTableWidget type doAutoScroll typerig.gui.widgets.TRTableView.doAutoScroll = unbound qt slot doAutoScroll of QTableWidget type doItemsLayout typerig.gui.widgets.TRTableView.doItemsLayout = unbound qt slot py_q_doItemsLayout of QTableWidget type dragEnterEvent typerig.gui.widgets.TRTableView.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTableWidget type dragLeaveEvent typerig.gui.widgets.TRTableView.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTableWidget type dragMoveEvent typerig.gui.widgets.TRTableView.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTableWidget type drawFrame typerig.gui.widgets.TRTableView.drawFrame = unbound qt slot drawFrame of QTableWidget type dropEvent typerig.gui.widgets.TRTableView.dropEvent = unbound qt slot py_q_dropEvent of QTableWidget type dropIndicatorPosition typerig.gui.widgets.TRTableView.dropIndicatorPosition = unbound qt slot dropIndicatorPosition of QTableWidget type dropMimeData typerig.gui.widgets.TRTableView.dropMimeData = unbound qt slot py_q_dropMimeData of QTableWidget type dumpObjectInfo typerig.gui.widgets.TRTableView.dumpObjectInfo = unbound qt slot dumpObjectInfo of QTableWidget type dumpObjectTree typerig.gui.widgets.TRTableView.dumpObjectTree = unbound qt slot dumpObjectTree of QTableWidget type dynamicPropertyNames typerig.gui.widgets.TRTableView.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTableWidget type edit typerig.gui.widgets.TRTableView.edit = unbound qt slot py_q_edit of QTableWidget type editItem typerig.gui.widgets.TRTableView.editItem = unbound qt slot editItem of QTableWidget type effectiveWinId typerig.gui.widgets.TRTableView.effectiveWinId = unbound qt slot effectiveWinId of QTableWidget type ensurePolished typerig.gui.widgets.TRTableView.ensurePolished = unbound qt slot ensurePolished of QTableWidget type enterEvent typerig.gui.widgets.TRTableView.enterEvent = unbound qt slot py_q_enterEvent of QTableWidget type event typerig.gui.widgets.TRTableView.event = unbound qt slot py_q_event of QTableWidget type eventFilter typerig.gui.widgets.TRTableView.eventFilter = unbound qt slot py_q_eventFilter of QTableWidget type executeDelayedItemsLayout typerig.gui.widgets.TRTableView.executeDelayedItemsLayout = unbound qt slot executeDelayedItemsLayout of QTableWidget type findChild typerig.gui.widgets.TRTableView.findChild = unbound qt slot findChild of QTableWidget type findChildren typerig.gui.widgets.TRTableView.findChildren = unbound qt slot findChildren of QTableWidget type findItems typerig.gui.widgets.TRTableView.findItems = unbound qt slot findItems of QTableWidget type focusInEvent typerig.gui.widgets.TRTableView.focusInEvent = unbound qt slot py_q_focusInEvent of QTableWidget type focusNextChild typerig.gui.widgets.TRTableView.focusNextChild = unbound qt slot focusNextChild of QTableWidget type focusNextPrevChild typerig.gui.widgets.TRTableView.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTableWidget type focusOutEvent typerig.gui.widgets.TRTableView.focusOutEvent = unbound qt slot py_q_focusOutEvent of QTableWidget type focusPreviousChild typerig.gui.widgets.TRTableView.focusPreviousChild = unbound qt slot focusPreviousChild of QTableWidget type focusProxy typerig.gui.widgets.TRTableView.focusProxy = unbound qt slot focusProxy of QTableWidget type focusWidget typerig.gui.widgets.TRTableView.focusWidget = unbound qt slot focusWidget of QTableWidget type foregroundRole typerig.gui.widgets.TRTableView.foregroundRole = unbound qt slot foregroundRole of QTableWidget type frameStyle typerig.gui.widgets.TRTableView.frameStyle = unbound qt slot frameStyle of QTableWidget type grab typerig.gui.widgets.TRTableView.grab = unbound qt slot grab of QTableWidget type grabGesture typerig.gui.widgets.TRTableView.grabGesture = unbound qt slot grabGesture of QTableWidget type grabKeyboard typerig.gui.widgets.TRTableView.grabKeyboard = unbound qt slot grabKeyboard of QTableWidget type grabMouse typerig.gui.widgets.TRTableView.grabMouse = unbound qt slot grabMouse of QTableWidget type grabShortcut typerig.gui.widgets.TRTableView.grabShortcut = unbound qt slot grabShortcut of QTableWidget type graphicsEffect typerig.gui.widgets.TRTableView.graphicsEffect = unbound qt slot graphicsEffect of QTableWidget type graphicsProxyWidget typerig.gui.widgets.TRTableView.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTableWidget type hasAutoScroll typerig.gui.widgets.TRTableView.hasAutoScroll = unbound qt slot hasAutoScroll of QTableWidget type hasFocus typerig.gui.widgets.TRTableView.hasFocus = unbound qt slot hasFocus of QTableWidget type hasHeightForWidth typerig.gui.widgets.TRTableView.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTableWidget type hasMouseTracking typerig.gui.widgets.TRTableView.hasMouseTracking = unbound qt slot hasMouseTracking of QTableWidget type heightForWidth typerig.gui.widgets.TRTableView.heightForWidth = unbound qt slot py_q_heightForWidth of QTableWidget type heightMM typerig.gui.widgets.TRTableView.heightMM = unbound qt slot heightMM of QTableWidget type help typerig.gui.widgets.TRTableView.help = help (...) Shows the help of available methods for this class hide typerig.gui.widgets.TRTableView.hide = unbound qt slot hide of QTableWidget type hideColumn typerig.gui.widgets.TRTableView.hideColumn = unbound qt slot hideColumn of QTableWidget type hideEvent typerig.gui.widgets.TRTableView.hideEvent = unbound qt slot py_q_hideEvent of QTableWidget type hideRow typerig.gui.widgets.TRTableView.hideRow = unbound qt slot hideRow of QTableWidget type horizontalHeader typerig.gui.widgets.TRTableView.horizontalHeader = unbound qt slot horizontalHeader of QTableWidget type horizontalHeaderItem typerig.gui.widgets.TRTableView.horizontalHeaderItem = unbound qt slot horizontalHeaderItem of QTableWidget type horizontalOffset typerig.gui.widgets.TRTableView.horizontalOffset = unbound qt slot py_q_horizontalOffset of QTableWidget type horizontalScrollBar typerig.gui.widgets.TRTableView.horizontalScrollBar = unbound qt slot horizontalScrollBar of QTableWidget type indexAt typerig.gui.widgets.TRTableView.indexAt = unbound qt slot py_q_indexAt of QTableWidget type indexFromItem typerig.gui.widgets.TRTableView.indexFromItem = unbound qt slot indexFromItem of QTableWidget type indexWidget typerig.gui.widgets.TRTableView.indexWidget = unbound qt slot indexWidget of QTableWidget type inherits typerig.gui.widgets.TRTableView.inherits = inherits (...) Returns if the class inherits or is of given type name initPainter typerig.gui.widgets.TRTableView.initPainter = unbound qt slot py_q_initPainter of QTableWidget type initStyleOption typerig.gui.widgets.TRTableView.initStyleOption = unbound qt slot initStyleOption of QTableWidget type inputMethodEvent typerig.gui.widgets.TRTableView.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTableWidget type inputMethodQuery typerig.gui.widgets.TRTableView.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTableWidget type insertAction typerig.gui.widgets.TRTableView.insertAction = unbound qt slot insertAction of QTableWidget type insertActions typerig.gui.widgets.TRTableView.insertActions = unbound qt slot insertActions of QTableWidget type insertColumn typerig.gui.widgets.TRTableView.insertColumn = unbound qt slot insertColumn of QTableWidget type insertRow typerig.gui.widgets.TRTableView.insertRow = unbound qt slot insertRow of QTableWidget type installEventFilter typerig.gui.widgets.TRTableView.installEventFilter = unbound qt slot installEventFilter of QTableWidget type isAncestorOf typerig.gui.widgets.TRTableView.isAncestorOf = unbound qt slot isAncestorOf of QTableWidget type isColumnHidden typerig.gui.widgets.TRTableView.isColumnHidden = unbound qt slot isColumnHidden of QTableWidget type isCornerButtonEnabled typerig.gui.widgets.TRTableView.isCornerButtonEnabled = unbound qt slot isCornerButtonEnabled of QTableWidget type isEnabled typerig.gui.widgets.TRTableView.isEnabled = unbound qt slot isEnabled of QTableWidget type isEnabledTo typerig.gui.widgets.TRTableView.isEnabledTo = unbound qt slot isEnabledTo of QTableWidget type isFullScreen typerig.gui.widgets.TRTableView.isFullScreen = unbound qt slot isFullScreen of QTableWidget type isHidden typerig.gui.widgets.TRTableView.isHidden = unbound qt slot isHidden of QTableWidget type isIndexHidden typerig.gui.widgets.TRTableView.isIndexHidden = unbound qt slot py_q_isIndexHidden of QTableWidget type isLeftToRight typerig.gui.widgets.TRTableView.isLeftToRight = unbound qt slot isLeftToRight of QTableWidget type isMaximized typerig.gui.widgets.TRTableView.isMaximized = unbound qt slot isMaximized of QTableWidget type isMinimized typerig.gui.widgets.TRTableView.isMinimized = unbound qt slot isMinimized of QTableWidget type isModal typerig.gui.widgets.TRTableView.isModal = unbound qt slot isModal of QTableWidget type isRightToLeft typerig.gui.widgets.TRTableView.isRightToLeft = unbound qt slot isRightToLeft of QTableWidget type isRowHidden typerig.gui.widgets.TRTableView.isRowHidden = unbound qt slot isRowHidden of QTableWidget type isSignalConnected typerig.gui.widgets.TRTableView.isSignalConnected = unbound qt slot isSignalConnected of QTableWidget type isSortingEnabled typerig.gui.widgets.TRTableView.isSortingEnabled = unbound qt slot isSortingEnabled of QTableWidget type isVisible typerig.gui.widgets.TRTableView.isVisible = unbound qt slot isVisible of QTableWidget type isVisibleTo typerig.gui.widgets.TRTableView.isVisibleTo = unbound qt slot isVisibleTo of QTableWidget type isWidgetType typerig.gui.widgets.TRTableView.isWidgetType = unbound qt slot isWidgetType of QTableWidget type isWindow typerig.gui.widgets.TRTableView.isWindow = unbound qt slot isWindow of QTableWidget type isWindowModified typerig.gui.widgets.TRTableView.isWindowModified = unbound qt slot isWindowModified of QTableWidget type isWindowType typerig.gui.widgets.TRTableView.isWindowType = unbound qt slot isWindowType of QTableWidget type item typerig.gui.widgets.TRTableView.item = unbound qt slot item of QTableWidget type itemAt typerig.gui.widgets.TRTableView.itemAt = unbound qt slot itemAt of QTableWidget type itemDelegate typerig.gui.widgets.TRTableView.itemDelegate = unbound qt slot itemDelegate of QTableWidget type itemDelegateForColumn typerig.gui.widgets.TRTableView.itemDelegateForColumn = unbound qt slot itemDelegateForColumn of QTableWidget type itemDelegateForRow typerig.gui.widgets.TRTableView.itemDelegateForRow = unbound qt slot itemDelegateForRow of QTableWidget type itemFromIndex typerig.gui.widgets.TRTableView.itemFromIndex = unbound qt slot itemFromIndex of QTableWidget type itemPrototype typerig.gui.widgets.TRTableView.itemPrototype = unbound qt slot itemPrototype of QTableWidget type items typerig.gui.widgets.TRTableView.items = unbound qt slot items of QTableWidget type keyboardGrabber typerig.gui.widgets.TRTableView.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTableWidget type keyboardSearch typerig.gui.widgets.TRTableView.keyboardSearch = unbound qt slot py_q_keyboardSearch of QTableWidget type keyPressEvent typerig.gui.widgets.TRTableView.keyPressEvent = unbound qt slot py_q_keyPressEvent of QTableWidget type keyReleaseEvent typerig.gui.widgets.TRTableView.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTableWidget type killTimer typerig.gui.widgets.TRTableView.killTimer = unbound qt slot killTimer of QTableWidget type layout typerig.gui.widgets.TRTableView.layout = unbound qt slot layout of QTableWidget type leaveEvent typerig.gui.widgets.TRTableView.leaveEvent = unbound qt slot py_q_leaveEvent of QTableWidget type logicalDpiX typerig.gui.widgets.TRTableView.logicalDpiX = unbound qt slot logicalDpiX of QTableWidget type logicalDpiY typerig.gui.widgets.TRTableView.logicalDpiY = unbound qt slot logicalDpiY of QTableWidget type lower typerig.gui.widgets.TRTableView.lower = unbound qt slot lower of QTableWidget type mapFrom typerig.gui.widgets.TRTableView.mapFrom = unbound qt slot mapFrom of QTableWidget type mapFromGlobal typerig.gui.widgets.TRTableView.mapFromGlobal = unbound qt slot mapFromGlobal of QTableWidget type mapFromParent typerig.gui.widgets.TRTableView.mapFromParent = unbound qt slot mapFromParent of QTableWidget type mapTo typerig.gui.widgets.TRTableView.mapTo = unbound qt slot mapTo of QTableWidget type mapToGlobal typerig.gui.widgets.TRTableView.mapToGlobal = unbound qt slot mapToGlobal of QTableWidget type mapToParent typerig.gui.widgets.TRTableView.mapToParent = unbound qt slot mapToParent of QTableWidget type mask typerig.gui.widgets.TRTableView.mask = unbound qt slot mask of QTableWidget type maximumViewportSize typerig.gui.widgets.TRTableView.maximumViewportSize = unbound qt slot maximumViewportSize of QTableWidget type metaObject typerig.gui.widgets.TRTableView.metaObject = unbound qt slot metaObject of QTableWidget type metric typerig.gui.widgets.TRTableView.metric = unbound qt slot py_q_metric of QTableWidget type mimeTypes typerig.gui.widgets.TRTableView.mimeTypes = unbound qt slot py_q_mimeTypes of QTableWidget type model typerig.gui.widgets.TRTableView.model = unbound qt slot model of QTableWidget type mouseDoubleClickEvent typerig.gui.widgets.TRTableView.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTableWidget type mouseGrabber typerig.gui.widgets.TRTableView.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTableWidget type mouseMoveEvent typerig.gui.widgets.TRTableView.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTableWidget type mousePressEvent typerig.gui.widgets.TRTableView.mousePressEvent = unbound qt slot py_q_mousePressEvent of QTableWidget type mouseReleaseEvent typerig.gui.widgets.TRTableView.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTableWidget type move typerig.gui.widgets.TRTableView.move = unbound qt slot move of QTableWidget type moveCursor typerig.gui.widgets.TRTableView.moveCursor = unbound qt slot moveCursor of QTableWidget type moveEvent typerig.gui.widgets.TRTableView.moveEvent = unbound qt slot py_q_moveEvent of QTableWidget type moveToThread typerig.gui.widgets.TRTableView.moveToThread = unbound qt slot moveToThread of QTableWidget type nativeEvent typerig.gui.widgets.TRTableView.nativeEvent = unbound qt slot py_q_nativeEvent of QTableWidget type nativeParentWidget typerig.gui.widgets.TRTableView.nativeParentWidget = unbound qt slot nativeParentWidget of QTableWidget type nextInFocusChain typerig.gui.widgets.TRTableView.nextInFocusChain = unbound qt slot nextInFocusChain of QTableWidget type openPersistentEditor typerig.gui.widgets.TRTableView.openPersistentEditor = unbound qt slot openPersistentEditor of QTableWidget type overrideWindowFlags typerig.gui.widgets.TRTableView.overrideWindowFlags = unbound qt slot overrideWindowFlags of QTableWidget type overrideWindowState typerig.gui.widgets.TRTableView.overrideWindowState = unbound qt slot overrideWindowState of QTableWidget type paintEngine typerig.gui.widgets.TRTableView.paintEngine = unbound qt slot py_q_paintEngine of QTableWidget type paintEvent typerig.gui.widgets.TRTableView.paintEvent = unbound qt slot py_q_paintEvent of QTableWidget type paintingActive typerig.gui.widgets.TRTableView.paintingActive = unbound qt slot paintingActive of QTableWidget type parent typerig.gui.widgets.TRTableView.parent = unbound qt slot parent of QTableWidget type parentWidget typerig.gui.widgets.TRTableView.parentWidget = unbound qt slot parentWidget of QTableWidget type physicalDpiX typerig.gui.widgets.TRTableView.physicalDpiX = unbound qt slot physicalDpiX of QTableWidget type physicalDpiY typerig.gui.widgets.TRTableView.physicalDpiY = unbound qt slot physicalDpiY of QTableWidget type previousInFocusChain typerig.gui.widgets.TRTableView.previousInFocusChain = unbound qt slot previousInFocusChain of QTableWidget type property typerig.gui.widgets.TRTableView.property = unbound qt slot property of QTableWidget type raise typerig.gui.widgets.TRTableView.raise = unbound qt slot raise of QTableWidget type redirected typerig.gui.widgets.TRTableView.redirected = unbound qt slot py_q_redirected of QTableWidget type releaseKeyboard typerig.gui.widgets.TRTableView.releaseKeyboard = unbound qt slot releaseKeyboard of QTableWidget type releaseMouse typerig.gui.widgets.TRTableView.releaseMouse = unbound qt slot releaseMouse of QTableWidget type releaseShortcut typerig.gui.widgets.TRTableView.releaseShortcut = unbound qt slot releaseShortcut of QTableWidget type removeAction typerig.gui.widgets.TRTableView.removeAction = unbound qt slot removeAction of QTableWidget type removeCellWidget typerig.gui.widgets.TRTableView.removeCellWidget = unbound qt slot removeCellWidget of QTableWidget type removeColumn typerig.gui.widgets.TRTableView.removeColumn = unbound qt slot removeColumn of QTableWidget type removeEventFilter typerig.gui.widgets.TRTableView.removeEventFilter = unbound qt slot removeEventFilter of QTableWidget type removeRow typerig.gui.widgets.TRTableView.removeRow = unbound qt slot removeRow of QTableWidget type render typerig.gui.widgets.TRTableView.render = unbound qt slot render of QTableWidget type repaint typerig.gui.widgets.TRTableView.repaint = unbound qt slot repaint of QTableWidget type reset typerig.gui.widgets.TRTableView.reset = unbound qt slot py_q_reset of QTableWidget type resize typerig.gui.widgets.TRTableView.resize = unbound qt slot resize of QTableWidget type resizeColumnsToContents typerig.gui.widgets.TRTableView.resizeColumnsToContents = unbound qt slot resizeColumnsToContents of QTableWidget type resizeColumnToContents typerig.gui.widgets.TRTableView.resizeColumnToContents = unbound qt slot resizeColumnToContents of QTableWidget type resizeEvent typerig.gui.widgets.TRTableView.resizeEvent = unbound qt slot py_q_resizeEvent of QTableWidget type resizeRowsToContents typerig.gui.widgets.TRTableView.resizeRowsToContents = unbound qt slot resizeRowsToContents of QTableWidget type resizeRowToContents typerig.gui.widgets.TRTableView.resizeRowToContents = unbound qt slot resizeRowToContents of QTableWidget type restoreGeometry typerig.gui.widgets.TRTableView.restoreGeometry = unbound qt slot restoreGeometry of QTableWidget type rootIndex typerig.gui.widgets.TRTableView.rootIndex = unbound qt slot rootIndex of QTableWidget type row typerig.gui.widgets.TRTableView.row = unbound qt slot row of QTableWidget type rowAt typerig.gui.widgets.TRTableView.rowAt = unbound qt slot rowAt of QTableWidget type rowHeight typerig.gui.widgets.TRTableView.rowHeight = unbound qt slot rowHeight of QTableWidget type rowSpan typerig.gui.widgets.TRTableView.rowSpan = unbound qt slot rowSpan of QTableWidget type rowViewportPosition typerig.gui.widgets.TRTableView.rowViewportPosition = unbound qt slot rowViewportPosition of QTableWidget type saveGeometry typerig.gui.widgets.TRTableView.saveGeometry = unbound qt slot saveGeometry of QTableWidget type scheduleDelayedItemsLayout typerig.gui.widgets.TRTableView.scheduleDelayedItemsLayout = unbound qt slot scheduleDelayedItemsLayout of QTableWidget type scroll typerig.gui.widgets.TRTableView.scroll = unbound qt slot scroll of QTableWidget type scrollBarWidgets typerig.gui.widgets.TRTableView.scrollBarWidgets = unbound qt slot scrollBarWidgets of QTableWidget type scrollContentsBy typerig.gui.widgets.TRTableView.scrollContentsBy = unbound qt slot py_q_scrollContentsBy of QTableWidget type scrollDirtyRegion typerig.gui.widgets.TRTableView.scrollDirtyRegion = unbound qt slot scrollDirtyRegion of QTableWidget type scrollTo typerig.gui.widgets.TRTableView.scrollTo = unbound qt slot py_q_scrollTo of QTableWidget type scrollToBottom typerig.gui.widgets.TRTableView.scrollToBottom = unbound qt slot scrollToBottom of QTableWidget type scrollToItem typerig.gui.widgets.TRTableView.scrollToItem = unbound qt slot scrollToItem of QTableWidget type scrollToTop typerig.gui.widgets.TRTableView.scrollToTop = unbound qt slot scrollToTop of QTableWidget type selectAll typerig.gui.widgets.TRTableView.selectAll = unbound qt slot py_q_selectAll of QTableWidget type selectColumn typerig.gui.widgets.TRTableView.selectColumn = unbound qt slot selectColumn of QTableWidget type selectedIndexes typerig.gui.widgets.TRTableView.selectedIndexes = unbound qt slot py_q_selectedIndexes of QTableWidget type selectedItems typerig.gui.widgets.TRTableView.selectedItems = unbound qt slot selectedItems of QTableWidget type selectedRanges typerig.gui.widgets.TRTableView.selectedRanges = unbound qt slot selectedRanges of QTableWidget type selectionCommand typerig.gui.widgets.TRTableView.selectionCommand = unbound qt slot py_q_selectionCommand of QTableWidget type selectionModel typerig.gui.widgets.TRTableView.selectionModel = unbound qt slot selectionModel of QTableWidget type selectRow typerig.gui.widgets.TRTableView.selectRow = unbound qt slot selectRow of QTableWidget type sender typerig.gui.widgets.TRTableView.sender = unbound qt slot sender of QTableWidget type senderSignalIndex typerig.gui.widgets.TRTableView.senderSignalIndex = unbound qt slot senderSignalIndex of QTableWidget type setAcceptDrops typerig.gui.widgets.TRTableView.setAcceptDrops = unbound qt slot setAcceptDrops of QTableWidget type setAccessibleDescription typerig.gui.widgets.TRTableView.setAccessibleDescription = unbound qt slot setAccessibleDescription of QTableWidget type setAccessibleName typerig.gui.widgets.TRTableView.setAccessibleName = unbound qt slot setAccessibleName of QTableWidget type setAlternatingRowColors typerig.gui.widgets.TRTableView.setAlternatingRowColors = unbound qt slot setAlternatingRowColors of QTableWidget type setAttribute typerig.gui.widgets.TRTableView.setAttribute = unbound qt slot setAttribute of QTableWidget type setAutoFillBackground typerig.gui.widgets.TRTableView.setAutoFillBackground = unbound qt slot setAutoFillBackground of QTableWidget type setAutoScroll typerig.gui.widgets.TRTableView.setAutoScroll = unbound qt slot setAutoScroll of QTableWidget type setAutoScrollMargin typerig.gui.widgets.TRTableView.setAutoScrollMargin = unbound qt slot setAutoScrollMargin of QTableWidget type setBackgroundRole typerig.gui.widgets.TRTableView.setBackgroundRole = unbound qt slot setBackgroundRole of QTableWidget type setBaseSize typerig.gui.widgets.TRTableView.setBaseSize = unbound qt slot setBaseSize of QTableWidget type setCellWidget typerig.gui.widgets.TRTableView.setCellWidget = unbound qt slot setCellWidget of QTableWidget type setColumnCount typerig.gui.widgets.TRTableView.setColumnCount = unbound qt slot setColumnCount of QTableWidget type setColumnHidden typerig.gui.widgets.TRTableView.setColumnHidden = unbound qt slot setColumnHidden of QTableWidget type setColumnWidth typerig.gui.widgets.TRTableView.setColumnWidth = unbound qt slot setColumnWidth of QTableWidget type setContentsMargins typerig.gui.widgets.TRTableView.setContentsMargins = unbound qt slot setContentsMargins of QTableWidget type setContextMenuPolicy typerig.gui.widgets.TRTableView.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTableWidget type setCornerButtonEnabled typerig.gui.widgets.TRTableView.setCornerButtonEnabled = unbound qt slot setCornerButtonEnabled of QTableWidget type setCornerWidget typerig.gui.widgets.TRTableView.setCornerWidget = unbound qt slot setCornerWidget of QTableWidget type setCurrentCell typerig.gui.widgets.TRTableView.setCurrentCell = unbound qt slot setCurrentCell of QTableWidget type setCurrentIndex typerig.gui.widgets.TRTableView.setCurrentIndex = unbound qt slot setCurrentIndex of QTableWidget type setCurrentItem typerig.gui.widgets.TRTableView.setCurrentItem = unbound qt slot setCurrentItem of QTableWidget type setCursor typerig.gui.widgets.TRTableView.setCursor = unbound qt slot setCursor of QTableWidget type setDefaultDropAction typerig.gui.widgets.TRTableView.setDefaultDropAction = unbound qt slot setDefaultDropAction of QTableWidget type setDirtyRegion typerig.gui.widgets.TRTableView.setDirtyRegion = unbound qt slot setDirtyRegion of QTableWidget type setDisabled typerig.gui.widgets.TRTableView.setDisabled = unbound qt slot setDisabled of QTableWidget type setDragDropMode typerig.gui.widgets.TRTableView.setDragDropMode = unbound qt slot setDragDropMode of QTableWidget type setDragDropOverwriteMode typerig.gui.widgets.TRTableView.setDragDropOverwriteMode = unbound qt slot setDragDropOverwriteMode of QTableWidget type setDragEnabled typerig.gui.widgets.TRTableView.setDragEnabled = unbound qt slot setDragEnabled of QTableWidget type setDropIndicatorShown typerig.gui.widgets.TRTableView.setDropIndicatorShown = unbound qt slot setDropIndicatorShown of QTableWidget type setEditTriggers typerig.gui.widgets.TRTableView.setEditTriggers = unbound qt slot setEditTriggers of QTableWidget type setEnabled typerig.gui.widgets.TRTableView.setEnabled = unbound qt slot setEnabled of QTableWidget type setFixedHeight typerig.gui.widgets.TRTableView.setFixedHeight = unbound qt slot setFixedHeight of QTableWidget type setFixedSize typerig.gui.widgets.TRTableView.setFixedSize = unbound qt slot setFixedSize of QTableWidget type setFixedWidth typerig.gui.widgets.TRTableView.setFixedWidth = unbound qt slot setFixedWidth of QTableWidget type setFocus typerig.gui.widgets.TRTableView.setFocus = unbound qt slot setFocus of QTableWidget type setFocusPolicy typerig.gui.widgets.TRTableView.setFocusPolicy = unbound qt slot setFocusPolicy of QTableWidget type setFocusProxy typerig.gui.widgets.TRTableView.setFocusProxy = unbound qt slot setFocusProxy of QTableWidget type setFont typerig.gui.widgets.TRTableView.setFont = unbound qt slot setFont of QTableWidget type setForegroundRole typerig.gui.widgets.TRTableView.setForegroundRole = unbound qt slot setForegroundRole of QTableWidget type setFrameRect typerig.gui.widgets.TRTableView.setFrameRect = unbound qt slot setFrameRect of QTableWidget type setFrameShadow typerig.gui.widgets.TRTableView.setFrameShadow = unbound qt slot setFrameShadow of QTableWidget type setFrameShape typerig.gui.widgets.TRTableView.setFrameShape = unbound qt slot setFrameShape of QTableWidget type setFrameStyle typerig.gui.widgets.TRTableView.setFrameStyle = unbound qt slot setFrameStyle of QTableWidget type setGeometry typerig.gui.widgets.TRTableView.setGeometry = unbound qt slot setGeometry of QTableWidget type setGraphicsEffect typerig.gui.widgets.TRTableView.setGraphicsEffect = unbound qt slot setGraphicsEffect of QTableWidget type setGridStyle typerig.gui.widgets.TRTableView.setGridStyle = unbound qt slot setGridStyle of QTableWidget type setHidden typerig.gui.widgets.TRTableView.setHidden = unbound qt slot setHidden of QTableWidget type setHorizontalHeader typerig.gui.widgets.TRTableView.setHorizontalHeader = unbound qt slot setHorizontalHeader of QTableWidget type setHorizontalHeaderItem typerig.gui.widgets.TRTableView.setHorizontalHeaderItem = unbound qt slot setHorizontalHeaderItem of QTableWidget type setHorizontalHeaderLabels typerig.gui.widgets.TRTableView.setHorizontalHeaderLabels = unbound qt slot setHorizontalHeaderLabels of QTableWidget type setHorizontalScrollBar typerig.gui.widgets.TRTableView.setHorizontalScrollBar = unbound qt slot setHorizontalScrollBar of QTableWidget type setHorizontalScrollBarPolicy typerig.gui.widgets.TRTableView.setHorizontalScrollBarPolicy = unbound qt slot setHorizontalScrollBarPolicy of QTableWidget type setHorizontalScrollMode typerig.gui.widgets.TRTableView.setHorizontalScrollMode = unbound qt slot setHorizontalScrollMode of QTableWidget type setIconSize typerig.gui.widgets.TRTableView.setIconSize = unbound qt slot setIconSize of QTableWidget type setIndexWidget typerig.gui.widgets.TRTableView.setIndexWidget = unbound qt slot setIndexWidget of QTableWidget type setInputMethodHints typerig.gui.widgets.TRTableView.setInputMethodHints = unbound qt slot setInputMethodHints of QTableWidget type setItem typerig.gui.widgets.TRTableView.setItem = unbound qt slot setItem of QTableWidget type setItemDelegate typerig.gui.widgets.TRTableView.setItemDelegate = unbound qt slot setItemDelegate of QTableWidget type setItemDelegateForColumn typerig.gui.widgets.TRTableView.setItemDelegateForColumn = unbound qt slot setItemDelegateForColumn of QTableWidget type setItemDelegateForRow typerig.gui.widgets.TRTableView.setItemDelegateForRow = unbound qt slot setItemDelegateForRow of QTableWidget type setItemPrototype typerig.gui.widgets.TRTableView.setItemPrototype = unbound qt slot setItemPrototype of QTableWidget type setLayout typerig.gui.widgets.TRTableView.setLayout = unbound qt slot setLayout of QTableWidget type setLayoutDirection typerig.gui.widgets.TRTableView.setLayoutDirection = unbound qt slot setLayoutDirection of QTableWidget type setLineWidth typerig.gui.widgets.TRTableView.setLineWidth = unbound qt slot setLineWidth of QTableWidget type setLocale typerig.gui.widgets.TRTableView.setLocale = unbound qt slot setLocale of QTableWidget type setMask typerig.gui.widgets.TRTableView.setMask = unbound qt slot setMask of QTableWidget type setMaximumHeight typerig.gui.widgets.TRTableView.setMaximumHeight = unbound qt slot setMaximumHeight of QTableWidget type setMaximumSize typerig.gui.widgets.TRTableView.setMaximumSize = unbound qt slot setMaximumSize of QTableWidget type setMaximumWidth typerig.gui.widgets.TRTableView.setMaximumWidth = unbound qt slot setMaximumWidth of QTableWidget type setMidLineWidth typerig.gui.widgets.TRTableView.setMidLineWidth = unbound qt slot setMidLineWidth of QTableWidget type setMinimumHeight typerig.gui.widgets.TRTableView.setMinimumHeight = unbound qt slot setMinimumHeight of QTableWidget type setMinimumSize typerig.gui.widgets.TRTableView.setMinimumSize = unbound qt slot setMinimumSize of QTableWidget type setMinimumWidth typerig.gui.widgets.TRTableView.setMinimumWidth = unbound qt slot setMinimumWidth of QTableWidget type setModel typerig.gui.widgets.TRTableView.setModel = unbound qt slot py_q_setModel of QTableWidget type setMouseTracking typerig.gui.widgets.TRTableView.setMouseTracking = unbound qt slot setMouseTracking of QTableWidget type setObjectName typerig.gui.widgets.TRTableView.setObjectName = unbound qt slot setObjectName of QTableWidget type setPalette typerig.gui.widgets.TRTableView.setPalette = unbound qt slot setPalette of QTableWidget type setParent typerig.gui.widgets.TRTableView.setParent = unbound qt slot setParent of QTableWidget type setProperty typerig.gui.widgets.TRTableView.setProperty = unbound qt slot setProperty of QTableWidget type setRangeSelected typerig.gui.widgets.TRTableView.setRangeSelected = unbound qt slot setRangeSelected of QTableWidget type setRootIndex typerig.gui.widgets.TRTableView.setRootIndex = unbound qt slot py_q_setRootIndex of QTableWidget type setRowCount typerig.gui.widgets.TRTableView.setRowCount = unbound qt slot setRowCount of QTableWidget type setRowHeight typerig.gui.widgets.TRTableView.setRowHeight = unbound qt slot setRowHeight of QTableWidget type setRowHidden typerig.gui.widgets.TRTableView.setRowHidden = unbound qt slot setRowHidden of QTableWidget type setSelection typerig.gui.widgets.TRTableView.setSelection = unbound qt slot py_q_setSelection of QTableWidget type setSelectionBehavior typerig.gui.widgets.TRTableView.setSelectionBehavior = unbound qt slot setSelectionBehavior of QTableWidget type setSelectionMode typerig.gui.widgets.TRTableView.setSelectionMode = unbound qt slot setSelectionMode of QTableWidget type setSelectionModel typerig.gui.widgets.TRTableView.setSelectionModel = unbound qt slot py_q_setSelectionModel of QTableWidget type setShortcutAutoRepeat typerig.gui.widgets.TRTableView.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTableWidget type setShortcutEnabled typerig.gui.widgets.TRTableView.setShortcutEnabled = unbound qt slot setShortcutEnabled of QTableWidget type setShowGrid typerig.gui.widgets.TRTableView.setShowGrid = unbound qt slot setShowGrid of QTableWidget type setSizeAdjustPolicy typerig.gui.widgets.TRTableView.setSizeAdjustPolicy = unbound qt slot setSizeAdjustPolicy of QTableWidget type setSizeIncrement typerig.gui.widgets.TRTableView.setSizeIncrement = unbound qt slot setSizeIncrement of QTableWidget type setSizePolicy typerig.gui.widgets.TRTableView.setSizePolicy = unbound qt slot setSizePolicy of QTableWidget type setSortingEnabled typerig.gui.widgets.TRTableView.setSortingEnabled = unbound qt slot setSortingEnabled of QTableWidget type setSpan typerig.gui.widgets.TRTableView.setSpan = unbound qt slot setSpan of QTableWidget type setState typerig.gui.widgets.TRTableView.setState = unbound qt slot setState of QTableWidget type setStatusTip typerig.gui.widgets.TRTableView.setStatusTip = unbound qt slot setStatusTip of QTableWidget type setStyle typerig.gui.widgets.TRTableView.setStyle = unbound qt slot setStyle of QTableWidget type setStyleSheet typerig.gui.widgets.TRTableView.setStyleSheet = unbound qt slot setStyleSheet of QTableWidget type setTabKeyNavigation typerig.gui.widgets.TRTableView.setTabKeyNavigation = unbound qt slot setTabKeyNavigation of QTableWidget type setTabOrder typerig.gui.widgets.TRTableView.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTableWidget type setTextElideMode typerig.gui.widgets.TRTableView.setTextElideMode = unbound qt slot setTextElideMode of QTableWidget type setToolTip typerig.gui.widgets.TRTableView.setToolTip = unbound qt slot setToolTip of QTableWidget type setToolTipDuration typerig.gui.widgets.TRTableView.setToolTipDuration = unbound qt slot setToolTipDuration of QTableWidget type setUpdatesEnabled typerig.gui.widgets.TRTableView.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTableWidget type setupViewport typerig.gui.widgets.TRTableView.setupViewport = unbound qt slot py_q_setupViewport of QTableWidget type setVerticalHeader typerig.gui.widgets.TRTableView.setVerticalHeader = unbound qt slot setVerticalHeader of QTableWidget type setVerticalHeaderItem typerig.gui.widgets.TRTableView.setVerticalHeaderItem = unbound qt slot setVerticalHeaderItem of QTableWidget type setVerticalHeaderLabels typerig.gui.widgets.TRTableView.setVerticalHeaderLabels = unbound qt slot setVerticalHeaderLabels of QTableWidget type setVerticalScrollBar typerig.gui.widgets.TRTableView.setVerticalScrollBar = unbound qt slot setVerticalScrollBar of QTableWidget type setVerticalScrollBarPolicy typerig.gui.widgets.TRTableView.setVerticalScrollBarPolicy = unbound qt slot setVerticalScrollBarPolicy of QTableWidget type setVerticalScrollMode typerig.gui.widgets.TRTableView.setVerticalScrollMode = unbound qt slot setVerticalScrollMode of QTableWidget type setViewport typerig.gui.widgets.TRTableView.setViewport = unbound qt slot setViewport of QTableWidget type setViewportMargins typerig.gui.widgets.TRTableView.setViewportMargins = unbound qt slot setViewportMargins of QTableWidget type setVisible typerig.gui.widgets.TRTableView.setVisible = unbound qt slot py_q_setVisible of QTableWidget type setWhatsThis typerig.gui.widgets.TRTableView.setWhatsThis = unbound qt slot setWhatsThis of QTableWidget type setWindowFilePath typerig.gui.widgets.TRTableView.setWindowFilePath = unbound qt slot setWindowFilePath of QTableWidget type setWindowFlags typerig.gui.widgets.TRTableView.setWindowFlags = unbound qt slot setWindowFlags of QTableWidget type setWindowIcon typerig.gui.widgets.TRTableView.setWindowIcon = unbound qt slot setWindowIcon of QTableWidget type setWindowIconText typerig.gui.widgets.TRTableView.setWindowIconText = unbound qt slot setWindowIconText of QTableWidget type setWindowModality typerig.gui.widgets.TRTableView.setWindowModality = unbound qt slot setWindowModality of QTableWidget type setWindowModified typerig.gui.widgets.TRTableView.setWindowModified = unbound qt slot setWindowModified of QTableWidget type setWindowOpacity typerig.gui.widgets.TRTableView.setWindowOpacity = unbound qt slot setWindowOpacity of QTableWidget type setWindowRole typerig.gui.widgets.TRTableView.setWindowRole = unbound qt slot setWindowRole of QTableWidget type setWindowState typerig.gui.widgets.TRTableView.setWindowState = unbound qt slot setWindowState of QTableWidget type setWindowTitle typerig.gui.widgets.TRTableView.setWindowTitle = unbound qt slot setWindowTitle of QTableWidget type setWordWrap typerig.gui.widgets.TRTableView.setWordWrap = unbound qt slot setWordWrap of QTableWidget type sharedPainter typerig.gui.widgets.TRTableView.sharedPainter = unbound qt slot py_q_sharedPainter of QTableWidget type show typerig.gui.widgets.TRTableView.show = unbound qt slot show of QTableWidget type showColumn typerig.gui.widgets.TRTableView.showColumn = unbound qt slot showColumn of QTableWidget type showEvent typerig.gui.widgets.TRTableView.showEvent = unbound qt slot py_q_showEvent of QTableWidget type showFullScreen typerig.gui.widgets.TRTableView.showFullScreen = unbound qt slot showFullScreen of QTableWidget type showMaximized typerig.gui.widgets.TRTableView.showMaximized = unbound qt slot showMaximized of QTableWidget type showMinimized typerig.gui.widgets.TRTableView.showMinimized = unbound qt slot showMinimized of QTableWidget type showNormal typerig.gui.widgets.TRTableView.showNormal = unbound qt slot showNormal of QTableWidget type showRow typerig.gui.widgets.TRTableView.showRow = unbound qt slot showRow of QTableWidget type signalsBlocked typerig.gui.widgets.TRTableView.signalsBlocked = unbound qt slot signalsBlocked of QTableWidget type sizeHintForColumn typerig.gui.widgets.TRTableView.sizeHintForColumn = unbound qt slot py_q_sizeHintForColumn of QTableWidget type sizeHintForIndex typerig.gui.widgets.TRTableView.sizeHintForIndex = unbound qt slot sizeHintForIndex of QTableWidget type sizeHintForRow typerig.gui.widgets.TRTableView.sizeHintForRow = unbound qt slot py_q_sizeHintForRow of QTableWidget type sortByColumn typerig.gui.widgets.TRTableView.sortByColumn = unbound qt slot sortByColumn of QTableWidget type sortItems typerig.gui.widgets.TRTableView.sortItems = unbound qt slot sortItems of QTableWidget type stackUnder typerig.gui.widgets.TRTableView.stackUnder = unbound qt slot stackUnder of QTableWidget type startAutoScroll typerig.gui.widgets.TRTableView.startAutoScroll = unbound qt slot startAutoScroll of QTableWidget type startDrag typerig.gui.widgets.TRTableView.startDrag = unbound qt slot py_q_startDrag of QTableWidget type startTimer typerig.gui.widgets.TRTableView.startTimer = unbound qt slot startTimer of QTableWidget type state typerig.gui.widgets.TRTableView.state = unbound qt slot state of QTableWidget type stopAutoScroll typerig.gui.widgets.TRTableView.stopAutoScroll = unbound qt slot stopAutoScroll of QTableWidget type style typerig.gui.widgets.TRTableView.style = unbound qt slot style of QTableWidget type supportedDropActions typerig.gui.widgets.TRTableView.supportedDropActions = unbound qt slot py_q_supportedDropActions of QTableWidget type tabletEvent typerig.gui.widgets.TRTableView.tabletEvent = unbound qt slot py_q_tabletEvent of QTableWidget type takeHorizontalHeaderItem typerig.gui.widgets.TRTableView.takeHorizontalHeaderItem = unbound qt slot takeHorizontalHeaderItem of QTableWidget type takeItem typerig.gui.widgets.TRTableView.takeItem = unbound qt slot takeItem of QTableWidget type takeVerticalHeaderItem typerig.gui.widgets.TRTableView.takeVerticalHeaderItem = unbound qt slot takeVerticalHeaderItem of QTableWidget type testAttribute typerig.gui.widgets.TRTableView.testAttribute = unbound qt slot testAttribute of QTableWidget type thread typerig.gui.widgets.TRTableView.thread = unbound qt slot thread of QTableWidget type timerEvent typerig.gui.widgets.TRTableView.timerEvent = unbound qt slot py_q_timerEvent of QTableWidget type tr typerig.gui.widgets.TRTableView.tr = unbound qt slot tr of QTableWidget type underMouse typerig.gui.widgets.TRTableView.underMouse = unbound qt slot underMouse of QTableWidget type ungrabGesture typerig.gui.widgets.TRTableView.ungrabGesture = unbound qt slot ungrabGesture of QTableWidget type unsetCursor typerig.gui.widgets.TRTableView.unsetCursor = unbound qt slot unsetCursor of QTableWidget type unsetLayoutDirection typerig.gui.widgets.TRTableView.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTableWidget type unsetLocale typerig.gui.widgets.TRTableView.unsetLocale = unbound qt slot unsetLocale of QTableWidget type update typerig.gui.widgets.TRTableView.update = unbound qt slot update of QTableWidget type updateGeometry typerig.gui.widgets.TRTableView.updateGeometry = unbound qt slot updateGeometry of QTableWidget type verticalHeader typerig.gui.widgets.TRTableView.verticalHeader = unbound qt slot verticalHeader of QTableWidget type verticalHeaderItem typerig.gui.widgets.TRTableView.verticalHeaderItem = unbound qt slot verticalHeaderItem of QTableWidget type verticalOffset typerig.gui.widgets.TRTableView.verticalOffset = unbound qt slot py_q_verticalOffset of QTableWidget type verticalScrollBar typerig.gui.widgets.TRTableView.verticalScrollBar = unbound qt slot verticalScrollBar of QTableWidget type viewOptions typerig.gui.widgets.TRTableView.viewOptions = unbound qt slot py_q_viewOptions of QTableWidget type viewport typerig.gui.widgets.TRTableView.viewport = unbound qt slot viewport of QTableWidget type viewportEvent typerig.gui.widgets.TRTableView.viewportEvent = unbound qt slot py_q_viewportEvent of QTableWidget type viewportMargins typerig.gui.widgets.TRTableView.viewportMargins = unbound qt slot viewportMargins of QTableWidget type viewportSizeHint typerig.gui.widgets.TRTableView.viewportSizeHint = unbound qt slot py_q_viewportSizeHint of QTableWidget type visibleRegion typerig.gui.widgets.TRTableView.visibleRegion = unbound qt slot visibleRegion of QTableWidget type visualColumn typerig.gui.widgets.TRTableView.visualColumn = unbound qt slot visualColumn of QTableWidget type visualItemRect typerig.gui.widgets.TRTableView.visualItemRect = unbound qt slot visualItemRect of QTableWidget type visualRect typerig.gui.widgets.TRTableView.visualRect = unbound qt slot py_q_visualRect of QTableWidget type visualRegionForSelection typerig.gui.widgets.TRTableView.visualRegionForSelection = unbound qt slot py_q_visualRegionForSelection of QTableWidget type visualRow typerig.gui.widgets.TRTableView.visualRow = unbound qt slot visualRow of QTableWidget type wheelEvent typerig.gui.widgets.TRTableView.wheelEvent = unbound qt slot py_q_wheelEvent of QTableWidget type widthMM typerig.gui.widgets.TRTableView.widthMM = unbound qt slot widthMM of QTableWidget type window typerig.gui.widgets.TRTableView.window = unbound qt slot window of QTableWidget type windowFlags typerig.gui.widgets.TRTableView.windowFlags = unbound qt slot windowFlags of QTableWidget type windowHandle typerig.gui.widgets.TRTableView.windowHandle = unbound qt slot windowHandle of QTableWidget type windowRole typerig.gui.widgets.TRTableView.windowRole = unbound qt slot windowRole of QTableWidget type windowState typerig.gui.widgets.TRTableView.windowState = unbound qt slot windowState of QTableWidget type windowType typerig.gui.widgets.TRTableView.windowType = unbound qt slot windowType of QTableWidget type winId typerig.gui.widgets.TRTableView.winId = unbound qt slot winId of QTableWidget type TRHTabWidget typerig.gui.widgets.TRHTabWidget = class TRHTabWidget ( PythonQt.QtGui.QTabWidget ) Method resolution order: TRHTabWidget PythonQt.QtGui.QTabWidget PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, *args, **kwargs) Attributes DrawChildren = 2 DrawWindowBackground = 1 East = 3 IgnoreMask = 4 North = 0 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' Rounded = 0 South = 1 TabPosition = class 'PythonQt.QtGui.TabPosition' TabShape = class 'PythonQt.QtGui.TabShape' Triangular = 1 West = 2 acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type X. actionEvent (a, b) actions = unbound qt slot actions of QTabWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QTabWidget type X. activateWindow (a) addAction = unbound qt slot addAction of QTabWidget type X. addAction (a, b) addActions = unbound qt slot addActions of QTabWidget type X. addActions (a, b) addTab = unbound qt slot addTab of QTabWidget type X. addTab (a, b, c, d) -> int adjustSize = unbound qt slot adjustSize of QTabWidget type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QTabWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QTabWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QTabWidget type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of QTabWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QTabWidget type X. childEvent (a, b) children = unbound qt slot children of QTabWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clear = unbound qt slot clear of QTabWidget type X. clear (a) clearFocus = unbound qt slot clearFocus of QTabWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of QTabWidget type X. clearMask (a) close = unbound qt slot close of QTabWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QTabWidget type X. colorCount (a) -> int connect = unbound qt slot connect of QTabWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QTabWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QTabWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None cornerWidget = unbound qt slot cornerWidget of QTabWidget type X. cornerWidget (a, b) -> PythonQt.QtGui.QWidget count = None createWinId = unbound qt slot createWinId of QTabWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget currentChanged = unbound qt signal currentChanged of QTabWidget type currentIndex = None currentWidget = unbound qt slot currentWidget of QTabWidget type X. currentWidget (a) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QTabWidget type customEvent = unbound qt slot py_q_customEvent of QTabWidget type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QTabWidget type X. deleteLater () depth = unbound qt slot depth of QTabWidget type X. depth (a) -> int destroy = unbound qt slot destroy of QTabWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QTabWidget type devType = unbound qt slot py_q_devType of QTabWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QTabWidget type X. disconnect (a, b, c, d) -> bool documentMode = None dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type X. effectiveWinId (a) elideMode = None enabled = None ensurePolished = unbound qt slot ensurePolished of QTabWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type X. enterEvent (a, b) event = unbound qt slot py_q_event of QTabWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of QTabWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QTabWidget type X. findChildren (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QTabWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QTabWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QTabWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QTabWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QTabWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QTabWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QTabWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QTabWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QTabWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QTabWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QTabWidget type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type X. hideEvent (a, b) iconSize = QSize (QSize at: 0x0) indexOf = unbound qt slot indexOf of QTabWidget type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QTabWidget type X. initPainter (a, b) initStyleOption = unbound qt slot initStyleOption of QTabWidget type X. initStyleOption (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QTabWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QTabWidget type X. insertActions (a, b, c) insertTab = unbound qt slot insertTab of QTabWidget type X. insertTab (a, b, c, d, e) -> int installEventFilter = unbound qt slot installEventFilter of QTabWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QTabWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QTabWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QTabWidget type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QTabWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QTabWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QTabWidget type X. isModal (a) -> bool isMovable = unbound qt slot isMovable of QTabWidget type X. isMovable (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type X. isSignalConnected (a, b) -> bool isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type X. isTabEnabled (a, b) -> bool isVisible = unbound qt slot isVisible of QTabWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QTabWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QTabWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QTabWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QTabWidget type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QTabWidget type X. killTimer (a, b) layout = unbound qt slot layout of QTabWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QTabWidget type X. lower () mapFrom = unbound qt slot mapFrom of QTabWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QTabWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QTabWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QTabWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QTabWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QTabWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QTabWidget type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type X. mouseReleaseEvent (a, b) mouseTracking = None movable = None move = unbound qt slot move of QTabWidget type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QTabWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QTabWidget type overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QTabWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QTabWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QTabWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QTabWidget type X. property (a, b) -> object raise = unbound qt slot raise of QTabWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QTabWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QTabWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QTabWidget type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type X. removeEventFilter (a, b) removeTab = unbound qt slot removeTab of QTabWidget type X. removeTab (a, b) render = unbound qt slot render of QTabWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QTabWidget type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QTabWidget type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type X. restoreGeometry (a, b) -> bool saveGeometry = unbound qt slot saveGeometry of QTabWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QTabWidget type X. scroll (a, b, c, d) sender = unbound qt slot sender of QTabWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QTabWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QTabWidget type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type X. setContextMenuPolicy (a, b) setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type X. setCornerWidget (a, b, c) setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type X. setCurrentIndex (a) setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type X. setCurrentWidget (a) setCursor = unbound qt slot setCursor of QTabWidget type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QTabWidget type X. setDisabled (a) setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type X. setDocumentMode (a, b) setElideMode = unbound qt slot setElideMode of QTabWidget type X. setElideMode (a, b) setEnabled = unbound qt slot setEnabled of QTabWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QTabWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QTabWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QTabWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QTabWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QTabWidget type X. setHidden (a) setIconSize = unbound qt slot setIconSize of QTabWidget type X. setIconSize (a, b) setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QTabWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QTabWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of QTabWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type X. setMinimumWidth (a, b) setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type X. setMouseTracking (a, b) setMovable = unbound qt slot setMovable of QTabWidget type X. setMovable (a, b) setObjectName = unbound qt slot setObjectName of QTabWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QTabWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of QTabWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QTabWidget type X. setProperty (a, b, c) -> bool setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type X. setShortcutEnabled (a, b, c) setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QTabWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QTabWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type X. setStyleSheet (a) setTabBar = unbound qt slot setTabBar of QTabWidget type X. setTabBar (a, b) setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type X. setTabBarAutoHide (a, b) setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type X. setTabEnabled (a, b, c) setTabIcon = unbound qt slot setTabIcon of QTabWidget type X. setTabIcon (a, b, c) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type X. setTabOrder (a, b) setTabPosition = unbound qt slot setTabPosition of QTabWidget type X. setTabPosition (a, b) setTabShape = unbound qt slot setTabShape of QTabWidget type X. setTabShape (a, b) setTabText = unbound qt slot setTabText of QTabWidget type X. setTabText (a, b, c) setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type X. setTabToolTip (a, b, c) setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type X. setTabWhatsThis (a, b, c) setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type X. setTabsClosable (a, b) setToolTip = unbound qt slot setToolTip of QTabWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type X. setUpdatesEnabled (a, b) setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type X. setUsesScrollButtons (a, b) setVisible = unbound qt slot py_q_setVisible of QTabWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QTabWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QTabWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QTabWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QTabWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QTabWidget type X. show () showEvent = unbound qt slot py_q_showEvent of QTabWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of QTabWidget type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QTabWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of QTabWidget type X. showMinimized () showNormal = unbound qt slot showNormal of QTabWidget type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QTabWidget type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QTabWidget type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QTabWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabBar = unbound qt slot tabBar of QTabWidget type X. tabBar (a) -> PythonQt.QtGui.QTabBar tabBarAutoHide = None tabBarClicked = unbound qt signal tabBarClicked of QTabWidget type tabBarDoubleClicked = unbound qt signal tabBarDoubleClicked of QTabWidget type tabCloseRequested = unbound qt signal tabCloseRequested of QTabWidget type tabIcon = unbound qt slot tabIcon of QTabWidget type X. tabIcon (a, b) -> PythonQt.QtGui.QIcon tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type X. tabInserted (a, b) tabPosition = None tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type X. tabRemoved (a, b) tabShape = None tabText = unbound qt slot tabText of QTabWidget type X. tabText (a, b) -> str tabToolTip = unbound qt slot tabToolTip of QTabWidget type X. tabToolTip (a, b) -> str tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type X. tabWhatsThis (a, b) -> str tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type X. tabletEvent (a, b) tabletTracking = None tabsClosable = None testAttribute = unbound qt slot testAttribute of QTabWidget type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QTabWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QTabWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QTabWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QTabWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QTabWidget type X. unsetLocale (a) update = unbound qt slot update of QTabWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QTabWidget type X. updateGeometry (a) updatesEnabled = None usesScrollButtons = None visible = None visibleRegion = unbound qt slot visibleRegion of QTabWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type X. wheelEvent (a, b) widget = unbound qt slot widget of QTabWidget type X. widget (a, b) -> PythonQt.QtGui.QWidget width = None widthMM = unbound qt slot widthMM of QTabWidget type X. widthMM (a) -> int winId = unbound qt slot winId of QTabWidget type X. winId (a) window = unbound qt slot window of QTabWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QTabWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QTabWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QTabWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QTabWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QTabWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of QTabWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QTabWidget type windowType = unbound qt slot windowType of QTabWidget type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QTabWidget __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T actionEvent typerig.gui.widgets.TRHTabWidget.actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type actions typerig.gui.widgets.TRHTabWidget.actions = unbound qt slot actions of QTabWidget type activateWindow typerig.gui.widgets.TRHTabWidget.activateWindow = unbound qt slot activateWindow of QTabWidget type addAction typerig.gui.widgets.TRHTabWidget.addAction = unbound qt slot addAction of QTabWidget type addActions typerig.gui.widgets.TRHTabWidget.addActions = unbound qt slot addActions of QTabWidget type addTab typerig.gui.widgets.TRHTabWidget.addTab = unbound qt slot addTab of QTabWidget type adjustSize typerig.gui.widgets.TRHTabWidget.adjustSize = unbound qt slot adjustSize of QTabWidget type backgroundRole typerig.gui.widgets.TRHTabWidget.backgroundRole = unbound qt slot backgroundRole of QTabWidget type backingStore typerig.gui.widgets.TRHTabWidget.backingStore = unbound qt slot backingStore of QTabWidget type blockSignals typerig.gui.widgets.TRHTabWidget.blockSignals = unbound qt slot blockSignals of QTabWidget type changeEvent typerig.gui.widgets.TRHTabWidget.changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type childAt typerig.gui.widgets.TRHTabWidget.childAt = unbound qt slot childAt of QTabWidget type childEvent typerig.gui.widgets.TRHTabWidget.childEvent = unbound qt slot py_q_childEvent of QTabWidget type children typerig.gui.widgets.TRHTabWidget.children = unbound qt slot children of QTabWidget type className typerig.gui.widgets.TRHTabWidget.className = className (...) Return the classname of the object clear typerig.gui.widgets.TRHTabWidget.clear = unbound qt slot clear of QTabWidget type clearFocus typerig.gui.widgets.TRHTabWidget.clearFocus = unbound qt slot clearFocus of QTabWidget type clearMask typerig.gui.widgets.TRHTabWidget.clearMask = unbound qt slot clearMask of QTabWidget type close typerig.gui.widgets.TRHTabWidget.close = unbound qt slot close of QTabWidget type closeEvent typerig.gui.widgets.TRHTabWidget.closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type colorCount typerig.gui.widgets.TRHTabWidget.colorCount = unbound qt slot colorCount of QTabWidget type connect typerig.gui.widgets.TRHTabWidget.connect = unbound qt slot connect of QTabWidget type contentsMargins typerig.gui.widgets.TRHTabWidget.contentsMargins = unbound qt slot contentsMargins of QTabWidget type contentsRect typerig.gui.widgets.TRHTabWidget.contentsRect = unbound qt slot contentsRect of QTabWidget type contextMenuEvent typerig.gui.widgets.TRHTabWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type cornerWidget typerig.gui.widgets.TRHTabWidget.cornerWidget = unbound qt slot cornerWidget of QTabWidget type createWindowContainer typerig.gui.widgets.TRHTabWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type createWinId typerig.gui.widgets.TRHTabWidget.createWinId = unbound qt slot createWinId of QTabWidget type currentWidget typerig.gui.widgets.TRHTabWidget.currentWidget = unbound qt slot currentWidget of QTabWidget type customEvent typerig.gui.widgets.TRHTabWidget.customEvent = unbound qt slot py_q_customEvent of QTabWidget type delete typerig.gui.widgets.TRHTabWidget.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.widgets.TRHTabWidget.deleteLater = unbound qt slot deleteLater of QTabWidget type depth typerig.gui.widgets.TRHTabWidget.depth = unbound qt slot depth of QTabWidget type destroy typerig.gui.widgets.TRHTabWidget.destroy = unbound qt slot destroy of QTabWidget type devicePixelRatio typerig.gui.widgets.TRHTabWidget.devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type devicePixelRatioF typerig.gui.widgets.TRHTabWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type devicePixelRatioFScale typerig.gui.widgets.TRHTabWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type devType typerig.gui.widgets.TRHTabWidget.devType = unbound qt slot py_q_devType of QTabWidget type disconnect typerig.gui.widgets.TRHTabWidget.disconnect = unbound qt slot disconnect of QTabWidget type dragEnterEvent typerig.gui.widgets.TRHTabWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type dragLeaveEvent typerig.gui.widgets.TRHTabWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type dragMoveEvent typerig.gui.widgets.TRHTabWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type dropEvent typerig.gui.widgets.TRHTabWidget.dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type dumpObjectInfo typerig.gui.widgets.TRHTabWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type dumpObjectTree typerig.gui.widgets.TRHTabWidget.dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type dynamicPropertyNames typerig.gui.widgets.TRHTabWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type effectiveWinId typerig.gui.widgets.TRHTabWidget.effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type ensurePolished typerig.gui.widgets.TRHTabWidget.ensurePolished = unbound qt slot ensurePolished of QTabWidget type enterEvent typerig.gui.widgets.TRHTabWidget.enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type event typerig.gui.widgets.TRHTabWidget.event = unbound qt slot py_q_event of QTabWidget type eventFilter typerig.gui.widgets.TRHTabWidget.eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type findChild typerig.gui.widgets.TRHTabWidget.findChild = unbound qt slot findChild of QTabWidget type findChildren typerig.gui.widgets.TRHTabWidget.findChildren = unbound qt slot findChildren of QTabWidget type focusInEvent typerig.gui.widgets.TRHTabWidget.focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type focusNextChild typerig.gui.widgets.TRHTabWidget.focusNextChild = unbound qt slot focusNextChild of QTabWidget type focusNextPrevChild typerig.gui.widgets.TRHTabWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type focusOutEvent typerig.gui.widgets.TRHTabWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type focusPreviousChild typerig.gui.widgets.TRHTabWidget.focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type focusProxy typerig.gui.widgets.TRHTabWidget.focusProxy = unbound qt slot focusProxy of QTabWidget type focusWidget typerig.gui.widgets.TRHTabWidget.focusWidget = unbound qt slot focusWidget of QTabWidget type foregroundRole typerig.gui.widgets.TRHTabWidget.foregroundRole = unbound qt slot foregroundRole of QTabWidget type grab typerig.gui.widgets.TRHTabWidget.grab = unbound qt slot grab of QTabWidget type grabGesture typerig.gui.widgets.TRHTabWidget.grabGesture = unbound qt slot grabGesture of QTabWidget type grabKeyboard typerig.gui.widgets.TRHTabWidget.grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type grabMouse typerig.gui.widgets.TRHTabWidget.grabMouse = unbound qt slot grabMouse of QTabWidget type grabShortcut typerig.gui.widgets.TRHTabWidget.grabShortcut = unbound qt slot grabShortcut of QTabWidget type graphicsEffect typerig.gui.widgets.TRHTabWidget.graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type graphicsProxyWidget typerig.gui.widgets.TRHTabWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type hasFocus typerig.gui.widgets.TRHTabWidget.hasFocus = unbound qt slot hasFocus of QTabWidget type hasHeightForWidth typerig.gui.widgets.TRHTabWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type hasMouseTracking typerig.gui.widgets.TRHTabWidget.hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type heightForWidth typerig.gui.widgets.TRHTabWidget.heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type heightMM typerig.gui.widgets.TRHTabWidget.heightMM = unbound qt slot heightMM of QTabWidget type help typerig.gui.widgets.TRHTabWidget.help = help (...) Shows the help of available methods for this class hide typerig.gui.widgets.TRHTabWidget.hide = unbound qt slot hide of QTabWidget type hideEvent typerig.gui.widgets.TRHTabWidget.hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type indexOf typerig.gui.widgets.TRHTabWidget.indexOf = unbound qt slot indexOf of QTabWidget type inherits typerig.gui.widgets.TRHTabWidget.inherits = inherits (...) Returns if the class inherits or is of given type name initPainter typerig.gui.widgets.TRHTabWidget.initPainter = unbound qt slot py_q_initPainter of QTabWidget type initStyleOption typerig.gui.widgets.TRHTabWidget.initStyleOption = unbound qt slot initStyleOption of QTabWidget type inputMethodEvent typerig.gui.widgets.TRHTabWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type inputMethodQuery typerig.gui.widgets.TRHTabWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type insertAction typerig.gui.widgets.TRHTabWidget.insertAction = unbound qt slot insertAction of QTabWidget type insertActions typerig.gui.widgets.TRHTabWidget.insertActions = unbound qt slot insertActions of QTabWidget type insertTab typerig.gui.widgets.TRHTabWidget.insertTab = unbound qt slot insertTab of QTabWidget type installEventFilter typerig.gui.widgets.TRHTabWidget.installEventFilter = unbound qt slot installEventFilter of QTabWidget type isAncestorOf typerig.gui.widgets.TRHTabWidget.isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type isEnabled typerig.gui.widgets.TRHTabWidget.isEnabled = unbound qt slot isEnabled of QTabWidget type isEnabledTo typerig.gui.widgets.TRHTabWidget.isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type isFullScreen typerig.gui.widgets.TRHTabWidget.isFullScreen = unbound qt slot isFullScreen of QTabWidget type isHidden typerig.gui.widgets.TRHTabWidget.isHidden = unbound qt slot isHidden of QTabWidget type isLeftToRight typerig.gui.widgets.TRHTabWidget.isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type isMaximized typerig.gui.widgets.TRHTabWidget.isMaximized = unbound qt slot isMaximized of QTabWidget type isMinimized typerig.gui.widgets.TRHTabWidget.isMinimized = unbound qt slot isMinimized of QTabWidget type isModal typerig.gui.widgets.TRHTabWidget.isModal = unbound qt slot isModal of QTabWidget type isMovable typerig.gui.widgets.TRHTabWidget.isMovable = unbound qt slot isMovable of QTabWidget type isRightToLeft typerig.gui.widgets.TRHTabWidget.isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type isSignalConnected typerig.gui.widgets.TRHTabWidget.isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type isTabEnabled typerig.gui.widgets.TRHTabWidget.isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type isVisible typerig.gui.widgets.TRHTabWidget.isVisible = unbound qt slot isVisible of QTabWidget type isVisibleTo typerig.gui.widgets.TRHTabWidget.isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type isWidgetType typerig.gui.widgets.TRHTabWidget.isWidgetType = unbound qt slot isWidgetType of QTabWidget type isWindow typerig.gui.widgets.TRHTabWidget.isWindow = unbound qt slot isWindow of QTabWidget type isWindowModified typerig.gui.widgets.TRHTabWidget.isWindowModified = unbound qt slot isWindowModified of QTabWidget type isWindowType typerig.gui.widgets.TRHTabWidget.isWindowType = unbound qt slot isWindowType of QTabWidget type keyboardGrabber typerig.gui.widgets.TRHTabWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type keyPressEvent typerig.gui.widgets.TRHTabWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type keyReleaseEvent typerig.gui.widgets.TRHTabWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type killTimer typerig.gui.widgets.TRHTabWidget.killTimer = unbound qt slot killTimer of QTabWidget type layout typerig.gui.widgets.TRHTabWidget.layout = unbound qt slot layout of QTabWidget type leaveEvent typerig.gui.widgets.TRHTabWidget.leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type logicalDpiX typerig.gui.widgets.TRHTabWidget.logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type logicalDpiY typerig.gui.widgets.TRHTabWidget.logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type lower typerig.gui.widgets.TRHTabWidget.lower = unbound qt slot lower of QTabWidget type mapFrom typerig.gui.widgets.TRHTabWidget.mapFrom = unbound qt slot mapFrom of QTabWidget type mapFromGlobal typerig.gui.widgets.TRHTabWidget.mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type mapFromParent typerig.gui.widgets.TRHTabWidget.mapFromParent = unbound qt slot mapFromParent of QTabWidget type mapTo typerig.gui.widgets.TRHTabWidget.mapTo = unbound qt slot mapTo of QTabWidget type mapToGlobal typerig.gui.widgets.TRHTabWidget.mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type mapToParent typerig.gui.widgets.TRHTabWidget.mapToParent = unbound qt slot mapToParent of QTabWidget type mask typerig.gui.widgets.TRHTabWidget.mask = unbound qt slot mask of QTabWidget type metaObject typerig.gui.widgets.TRHTabWidget.metaObject = unbound qt slot metaObject of QTabWidget type metric typerig.gui.widgets.TRHTabWidget.metric = unbound qt slot py_q_metric of QTabWidget type mouseDoubleClickEvent typerig.gui.widgets.TRHTabWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type mouseGrabber typerig.gui.widgets.TRHTabWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type mouseMoveEvent typerig.gui.widgets.TRHTabWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type mousePressEvent typerig.gui.widgets.TRHTabWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type mouseReleaseEvent typerig.gui.widgets.TRHTabWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type move typerig.gui.widgets.TRHTabWidget.move = unbound qt slot move of QTabWidget type moveEvent typerig.gui.widgets.TRHTabWidget.moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type moveToThread typerig.gui.widgets.TRHTabWidget.moveToThread = unbound qt slot moveToThread of QTabWidget type nativeEvent typerig.gui.widgets.TRHTabWidget.nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type nativeParentWidget typerig.gui.widgets.TRHTabWidget.nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type nextInFocusChain typerig.gui.widgets.TRHTabWidget.nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type overrideWindowFlags typerig.gui.widgets.TRHTabWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type overrideWindowState typerig.gui.widgets.TRHTabWidget.overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type paintEngine typerig.gui.widgets.TRHTabWidget.paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type paintEvent typerig.gui.widgets.TRHTabWidget.paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type paintingActive typerig.gui.widgets.TRHTabWidget.paintingActive = unbound qt slot paintingActive of QTabWidget type parent typerig.gui.widgets.TRHTabWidget.parent = unbound qt slot parent of QTabWidget type parentWidget typerig.gui.widgets.TRHTabWidget.parentWidget = unbound qt slot parentWidget of QTabWidget type physicalDpiX typerig.gui.widgets.TRHTabWidget.physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type physicalDpiY typerig.gui.widgets.TRHTabWidget.physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type previousInFocusChain typerig.gui.widgets.TRHTabWidget.previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type property typerig.gui.widgets.TRHTabWidget.property = unbound qt slot property of QTabWidget type raise typerig.gui.widgets.TRHTabWidget.raise = unbound qt slot raise of QTabWidget type redirected typerig.gui.widgets.TRHTabWidget.redirected = unbound qt slot py_q_redirected of QTabWidget type releaseKeyboard typerig.gui.widgets.TRHTabWidget.releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type releaseMouse typerig.gui.widgets.TRHTabWidget.releaseMouse = unbound qt slot releaseMouse of QTabWidget type releaseShortcut typerig.gui.widgets.TRHTabWidget.releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type removeAction typerig.gui.widgets.TRHTabWidget.removeAction = unbound qt slot removeAction of QTabWidget type removeEventFilter typerig.gui.widgets.TRHTabWidget.removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type removeTab typerig.gui.widgets.TRHTabWidget.removeTab = unbound qt slot removeTab of QTabWidget type render typerig.gui.widgets.TRHTabWidget.render = unbound qt slot render of QTabWidget type repaint typerig.gui.widgets.TRHTabWidget.repaint = unbound qt slot repaint of QTabWidget type resize typerig.gui.widgets.TRHTabWidget.resize = unbound qt slot resize of QTabWidget type resizeEvent typerig.gui.widgets.TRHTabWidget.resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type restoreGeometry typerig.gui.widgets.TRHTabWidget.restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type saveGeometry typerig.gui.widgets.TRHTabWidget.saveGeometry = unbound qt slot saveGeometry of QTabWidget type scroll typerig.gui.widgets.TRHTabWidget.scroll = unbound qt slot scroll of QTabWidget type sender typerig.gui.widgets.TRHTabWidget.sender = unbound qt slot sender of QTabWidget type senderSignalIndex typerig.gui.widgets.TRHTabWidget.senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type setAcceptDrops typerig.gui.widgets.TRHTabWidget.setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type setAccessibleDescription typerig.gui.widgets.TRHTabWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type setAccessibleName typerig.gui.widgets.TRHTabWidget.setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type setAttribute typerig.gui.widgets.TRHTabWidget.setAttribute = unbound qt slot setAttribute of QTabWidget type setAutoFillBackground typerig.gui.widgets.TRHTabWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type setBackgroundRole typerig.gui.widgets.TRHTabWidget.setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type setBaseSize typerig.gui.widgets.TRHTabWidget.setBaseSize = unbound qt slot setBaseSize of QTabWidget type setContentsMargins typerig.gui.widgets.TRHTabWidget.setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type setContextMenuPolicy typerig.gui.widgets.TRHTabWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type setCornerWidget typerig.gui.widgets.TRHTabWidget.setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type setCurrentIndex typerig.gui.widgets.TRHTabWidget.setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type setCurrentWidget typerig.gui.widgets.TRHTabWidget.setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type setCursor typerig.gui.widgets.TRHTabWidget.setCursor = unbound qt slot setCursor of QTabWidget type setDisabled typerig.gui.widgets.TRHTabWidget.setDisabled = unbound qt slot setDisabled of QTabWidget type setDocumentMode typerig.gui.widgets.TRHTabWidget.setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type setElideMode typerig.gui.widgets.TRHTabWidget.setElideMode = unbound qt slot setElideMode of QTabWidget type setEnabled typerig.gui.widgets.TRHTabWidget.setEnabled = unbound qt slot setEnabled of QTabWidget type setFixedHeight typerig.gui.widgets.TRHTabWidget.setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type setFixedSize typerig.gui.widgets.TRHTabWidget.setFixedSize = unbound qt slot setFixedSize of QTabWidget type setFixedWidth typerig.gui.widgets.TRHTabWidget.setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type setFocus typerig.gui.widgets.TRHTabWidget.setFocus = unbound qt slot setFocus of QTabWidget type setFocusPolicy typerig.gui.widgets.TRHTabWidget.setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type setFocusProxy typerig.gui.widgets.TRHTabWidget.setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type setFont typerig.gui.widgets.TRHTabWidget.setFont = unbound qt slot setFont of QTabWidget type setForegroundRole typerig.gui.widgets.TRHTabWidget.setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type setGeometry typerig.gui.widgets.TRHTabWidget.setGeometry = unbound qt slot setGeometry of QTabWidget type setGraphicsEffect typerig.gui.widgets.TRHTabWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type setHidden typerig.gui.widgets.TRHTabWidget.setHidden = unbound qt slot setHidden of QTabWidget type setIconSize typerig.gui.widgets.TRHTabWidget.setIconSize = unbound qt slot setIconSize of QTabWidget type setInputMethodHints typerig.gui.widgets.TRHTabWidget.setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type setLayout typerig.gui.widgets.TRHTabWidget.setLayout = unbound qt slot setLayout of QTabWidget type setLayoutDirection typerig.gui.widgets.TRHTabWidget.setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type setLocale typerig.gui.widgets.TRHTabWidget.setLocale = unbound qt slot setLocale of QTabWidget type setMask typerig.gui.widgets.TRHTabWidget.setMask = unbound qt slot setMask of QTabWidget type setMaximumHeight typerig.gui.widgets.TRHTabWidget.setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type setMaximumSize typerig.gui.widgets.TRHTabWidget.setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type setMaximumWidth typerig.gui.widgets.TRHTabWidget.setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type setMinimumHeight typerig.gui.widgets.TRHTabWidget.setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type setMinimumSize typerig.gui.widgets.TRHTabWidget.setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type setMinimumWidth typerig.gui.widgets.TRHTabWidget.setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type setMouseTracking typerig.gui.widgets.TRHTabWidget.setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type setMovable typerig.gui.widgets.TRHTabWidget.setMovable = unbound qt slot setMovable of QTabWidget type setObjectName typerig.gui.widgets.TRHTabWidget.setObjectName = unbound qt slot setObjectName of QTabWidget type setPalette typerig.gui.widgets.TRHTabWidget.setPalette = unbound qt slot setPalette of QTabWidget type setParent typerig.gui.widgets.TRHTabWidget.setParent = unbound qt slot setParent of QTabWidget type setProperty typerig.gui.widgets.TRHTabWidget.setProperty = unbound qt slot setProperty of QTabWidget type setShortcutAutoRepeat typerig.gui.widgets.TRHTabWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type setShortcutEnabled typerig.gui.widgets.TRHTabWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type setSizeIncrement typerig.gui.widgets.TRHTabWidget.setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type setSizePolicy typerig.gui.widgets.TRHTabWidget.setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type setStatusTip typerig.gui.widgets.TRHTabWidget.setStatusTip = unbound qt slot setStatusTip of QTabWidget type setStyle typerig.gui.widgets.TRHTabWidget.setStyle = unbound qt slot setStyle of QTabWidget type setStyleSheet typerig.gui.widgets.TRHTabWidget.setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type setTabBar typerig.gui.widgets.TRHTabWidget.setTabBar = unbound qt slot setTabBar of QTabWidget type setTabBarAutoHide typerig.gui.widgets.TRHTabWidget.setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type setTabEnabled typerig.gui.widgets.TRHTabWidget.setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type setTabIcon typerig.gui.widgets.TRHTabWidget.setTabIcon = unbound qt slot setTabIcon of QTabWidget type setTabOrder typerig.gui.widgets.TRHTabWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type setTabPosition typerig.gui.widgets.TRHTabWidget.setTabPosition = unbound qt slot setTabPosition of QTabWidget type setTabsClosable typerig.gui.widgets.TRHTabWidget.setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type setTabShape typerig.gui.widgets.TRHTabWidget.setTabShape = unbound qt slot setTabShape of QTabWidget type setTabText typerig.gui.widgets.TRHTabWidget.setTabText = unbound qt slot setTabText of QTabWidget type setTabToolTip typerig.gui.widgets.TRHTabWidget.setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type setTabWhatsThis typerig.gui.widgets.TRHTabWidget.setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type setToolTip typerig.gui.widgets.TRHTabWidget.setToolTip = unbound qt slot setToolTip of QTabWidget type setToolTipDuration typerig.gui.widgets.TRHTabWidget.setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type setUpdatesEnabled typerig.gui.widgets.TRHTabWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type setUsesScrollButtons typerig.gui.widgets.TRHTabWidget.setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type setVisible typerig.gui.widgets.TRHTabWidget.setVisible = unbound qt slot py_q_setVisible of QTabWidget type setWhatsThis typerig.gui.widgets.TRHTabWidget.setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type setWindowFilePath typerig.gui.widgets.TRHTabWidget.setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type setWindowFlags typerig.gui.widgets.TRHTabWidget.setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type setWindowIcon typerig.gui.widgets.TRHTabWidget.setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type setWindowIconText typerig.gui.widgets.TRHTabWidget.setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type setWindowModality typerig.gui.widgets.TRHTabWidget.setWindowModality = unbound qt slot setWindowModality of QTabWidget type setWindowModified typerig.gui.widgets.TRHTabWidget.setWindowModified = unbound qt slot setWindowModified of QTabWidget type setWindowOpacity typerig.gui.widgets.TRHTabWidget.setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type setWindowRole typerig.gui.widgets.TRHTabWidget.setWindowRole = unbound qt slot setWindowRole of QTabWidget type setWindowState typerig.gui.widgets.TRHTabWidget.setWindowState = unbound qt slot setWindowState of QTabWidget type setWindowTitle typerig.gui.widgets.TRHTabWidget.setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type sharedPainter typerig.gui.widgets.TRHTabWidget.sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type show typerig.gui.widgets.TRHTabWidget.show = unbound qt slot show of QTabWidget type showEvent typerig.gui.widgets.TRHTabWidget.showEvent = unbound qt slot py_q_showEvent of QTabWidget type showFullScreen typerig.gui.widgets.TRHTabWidget.showFullScreen = unbound qt slot showFullScreen of QTabWidget type showMaximized typerig.gui.widgets.TRHTabWidget.showMaximized = unbound qt slot showMaximized of QTabWidget type showMinimized typerig.gui.widgets.TRHTabWidget.showMinimized = unbound qt slot showMinimized of QTabWidget type showNormal typerig.gui.widgets.TRHTabWidget.showNormal = unbound qt slot showNormal of QTabWidget type signalsBlocked typerig.gui.widgets.TRHTabWidget.signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type stackUnder typerig.gui.widgets.TRHTabWidget.stackUnder = unbound qt slot stackUnder of QTabWidget type startTimer typerig.gui.widgets.TRHTabWidget.startTimer = unbound qt slot startTimer of QTabWidget type style typerig.gui.widgets.TRHTabWidget.style = unbound qt slot style of QTabWidget type tabBar typerig.gui.widgets.TRHTabWidget.tabBar = unbound qt slot tabBar of QTabWidget type tabIcon typerig.gui.widgets.TRHTabWidget.tabIcon = unbound qt slot tabIcon of QTabWidget type tabInserted typerig.gui.widgets.TRHTabWidget.tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type tabletEvent typerig.gui.widgets.TRHTabWidget.tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type tabRemoved typerig.gui.widgets.TRHTabWidget.tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type tabText typerig.gui.widgets.TRHTabWidget.tabText = unbound qt slot tabText of QTabWidget type tabToolTip typerig.gui.widgets.TRHTabWidget.tabToolTip = unbound qt slot tabToolTip of QTabWidget type tabWhatsThis typerig.gui.widgets.TRHTabWidget.tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type testAttribute typerig.gui.widgets.TRHTabWidget.testAttribute = unbound qt slot testAttribute of QTabWidget type thread typerig.gui.widgets.TRHTabWidget.thread = unbound qt slot thread of QTabWidget type timerEvent typerig.gui.widgets.TRHTabWidget.timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type tr typerig.gui.widgets.TRHTabWidget.tr = unbound qt slot tr of QTabWidget type underMouse typerig.gui.widgets.TRHTabWidget.underMouse = unbound qt slot underMouse of QTabWidget type ungrabGesture typerig.gui.widgets.TRHTabWidget.ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type unsetCursor typerig.gui.widgets.TRHTabWidget.unsetCursor = unbound qt slot unsetCursor of QTabWidget type unsetLayoutDirection typerig.gui.widgets.TRHTabWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type unsetLocale typerig.gui.widgets.TRHTabWidget.unsetLocale = unbound qt slot unsetLocale of QTabWidget type update typerig.gui.widgets.TRHTabWidget.update = unbound qt slot update of QTabWidget type updateGeometry typerig.gui.widgets.TRHTabWidget.updateGeometry = unbound qt slot updateGeometry of QTabWidget type visibleRegion typerig.gui.widgets.TRHTabWidget.visibleRegion = unbound qt slot visibleRegion of QTabWidget type wheelEvent typerig.gui.widgets.TRHTabWidget.wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type widget typerig.gui.widgets.TRHTabWidget.widget = unbound qt slot widget of QTabWidget type widthMM typerig.gui.widgets.TRHTabWidget.widthMM = unbound qt slot widthMM of QTabWidget type window typerig.gui.widgets.TRHTabWidget.window = unbound qt slot window of QTabWidget type windowFlags typerig.gui.widgets.TRHTabWidget.windowFlags = unbound qt slot windowFlags of QTabWidget type windowHandle typerig.gui.widgets.TRHTabWidget.windowHandle = unbound qt slot windowHandle of QTabWidget type windowRole typerig.gui.widgets.TRHTabWidget.windowRole = unbound qt slot windowRole of QTabWidget type windowState typerig.gui.widgets.TRHTabWidget.windowState = unbound qt slot windowState of QTabWidget type windowType typerig.gui.widgets.TRHTabWidget.windowType = unbound qt slot windowType of QTabWidget type winId typerig.gui.widgets.TRHTabWidget.winId = unbound qt slot winId of QTabWidget type TRVTabWidget typerig.gui.widgets.TRVTabWidget = class TRVTabWidget ( PythonQt.QtGui.QTabWidget ) Method resolution order: TRVTabWidget PythonQt.QtGui.QTabWidget PythonQt.PythonQtInstanceWrapper __builtin__.object Methods __init__ (self, *args, **kwargs) Attributes DrawChildren = 2 DrawWindowBackground = 1 East = 3 IgnoreMask = 4 North = 0 PaintDeviceMetric = class 'PythonQt.QtGui.PaintDeviceMetric' PdmDepth = 6 PdmDevicePixelRatio = 11 PdmDevicePixelRatioScaled = 12 PdmDpiX = 7 PdmDpiY = 8 PdmHeight = 2 PdmHeightMM = 4 PdmNumColors = 5 PdmPhysicalDpiX = 9 PdmPhysicalDpiY = 10 PdmWidth = 1 PdmWidthMM = 3 RenderFlag = class 'PythonQt.QtGui.RenderFlag' RenderFlags = class 'PythonQt.QtGui.RenderFlags' Rounded = 0 South = 1 TabPosition = class 'PythonQt.QtGui.TabPosition' TabShape = class 'PythonQt.QtGui.TabShape' Triangular = 1 West = 2 acceptDrops = None accessibleDescription = None accessibleName = None actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type X. actionEvent (a, b) actions = unbound qt slot actions of QTabWidget type X. actions (a) -> tuple activateWindow = unbound qt slot activateWindow of QTabWidget type X. activateWindow (a) addAction = unbound qt slot addAction of QTabWidget type X. addAction (a, b) addActions = unbound qt slot addActions of QTabWidget type X. addActions (a, b) addTab = unbound qt slot addTab of QTabWidget type X. addTab (a, b, c, d) -> int adjustSize = unbound qt slot adjustSize of QTabWidget type X. adjustSize (a) autoFillBackground = None backgroundRole = unbound qt slot backgroundRole of QTabWidget type X. backgroundRole (a) backingStore = unbound qt slot backingStore of QTabWidget type X. backingStore (a) -> PythonQt.QtGui.QBackingStore baseSize = QSize (QSize at: 0x0) blockSignals = unbound qt slot blockSignals of QTabWidget type X. blockSignals (a, b) -> bool changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type X. changeEvent (a, b) childAt = unbound qt slot childAt of QTabWidget type X. childAt (a, b, c) -> PythonQt.QtGui.QWidget childEvent = unbound qt slot py_q_childEvent of QTabWidget type X. childEvent (a, b) children = unbound qt slot children of QTabWidget type X. children (a) -> tuple childrenRect = QRect (QRect at: 0x0) childrenRegion = QRegion (QRegion at: 0x0) className = built-in method className of PythonQt.PythonQtClassWrapper object Return the classname of the object clear = unbound qt slot clear of QTabWidget type X. clear (a) clearFocus = unbound qt slot clearFocus of QTabWidget type X. clearFocus (a) clearMask = unbound qt slot clearMask of QTabWidget type X. clearMask (a) close = unbound qt slot close of QTabWidget type X. close () -> bool closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type X. closeEvent (a, b) colorCount = unbound qt slot colorCount of QTabWidget type X. colorCount (a) -> int connect = unbound qt slot connect of QTabWidget type X. connect (a, b, c, d, e) -> bool contentsMargins = unbound qt slot contentsMargins of QTabWidget type X. contentsMargins (a) -> PythonQt.QtGui.QMargins contentsRect = unbound qt slot contentsRect of QTabWidget type X. contentsRect (a) -> PythonQt.QtCore.QRect contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type X. contextMenuEvent (a, b) contextMenuPolicy = None cornerWidget = unbound qt slot cornerWidget of QTabWidget type X. cornerWidget (a, b) -> PythonQt.QtGui.QWidget count = None createWinId = unbound qt slot createWinId of QTabWidget type X. createWinId (a) createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type X. createWindowContainer (a, b, c) -> PythonQt.QtGui.QWidget currentChanged = unbound qt signal currentChanged of QTabWidget type currentIndex = None currentWidget = unbound qt slot currentWidget of QTabWidget type X. currentWidget (a) -> PythonQt.QtGui.QWidget cursor = QCursor (QCursor at: 0x0) customContextMenuRequested = unbound qt signal customContextMenuRequested of QTabWidget type customEvent = unbound qt slot py_q_customEvent of QTabWidget type X. customEvent (a, b) delete = built-in method delete of PythonQt.PythonQtClassWrapper object Deletes the given C++ object deleteLater = unbound qt slot deleteLater of QTabWidget type X. deleteLater () depth = unbound qt slot depth of QTabWidget type X. depth (a) -> int destroy = unbound qt slot destroy of QTabWidget type X. destroy (a, b, c) destroyed = unbound qt signal destroyed of QTabWidget type devType = unbound qt slot py_q_devType of QTabWidget type X. devType (a) -> int devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type X. devicePixelRatio (a) -> int devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type X. devicePixelRatioF (a) -> float devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type X. devicePixelRatioFScale () -> float disconnect = unbound qt slot disconnect of QTabWidget type X. disconnect (a, b, c, d) -> bool documentMode = None dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type X. dragEnterEvent (a, b) dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type X. dragLeaveEvent (a, b) dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type X. dragMoveEvent (a, b) dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type X. dropEvent (a, b) dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type X. dumpObjectInfo (a) dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type X. dumpObjectTree (a) dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type X. dynamicPropertyNames (a) effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type X. effectiveWinId (a) elideMode = None enabled = None ensurePolished = unbound qt slot ensurePolished of QTabWidget type X. ensurePolished (a) enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type X. enterEvent (a, b) event = unbound qt slot py_q_event of QTabWidget type X. event (a, b) -> bool eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type X. eventFilter (a, b, c) -> bool findChild = unbound qt slot findChild of QTabWidget type X. findChild (a, b, c) -> PythonQt.private.QObject findChildren = unbound qt slot findChildren of QTabWidget type X. findChildren (a, b, c) -> tuple focus = None focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type X. focusInEvent (a, b) focusNextChild = unbound qt slot focusNextChild of QTabWidget type X. focusNextChild (a) -> bool focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type X. focusNextPrevChild (a, b) -> bool focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type X. focusOutEvent (a, b) focusPolicy = None focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type X. focusPreviousChild (a) -> bool focusProxy = unbound qt slot focusProxy of QTabWidget type X. focusProxy (a) -> PythonQt.QtGui.QWidget focusWidget = unbound qt slot focusWidget of QTabWidget type X. focusWidget (a) -> PythonQt.QtGui.QWidget font = QFont (QFont at: 0x0) foregroundRole = unbound qt slot foregroundRole of QTabWidget type X. foregroundRole (a) frameGeometry = QRect (QRect at: 0x0) frameSize = QSize (QSize at: 0x0) fullScreen = None geometry = QRect (QRect at: 0x0) grab = unbound qt slot grab of QTabWidget type X. grab (a, b) -> PythonQt.QtGui.QPixmap grabGesture = unbound qt slot grabGesture of QTabWidget type X. grabGesture (a, b, c) grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type X. grabKeyboard (a) grabMouse = unbound qt slot grabMouse of QTabWidget type X. grabMouse (a, b) grabShortcut = unbound qt slot grabShortcut of QTabWidget type X. grabShortcut (a, b, c) -> int graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type X. graphicsEffect (a) -> PythonQt.QtGui.QGraphicsEffect graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type X. graphicsProxyWidget (a) -> PythonQt.QtGui.QGraphicsProxyWidget hasFocus = unbound qt slot hasFocus of QTabWidget type X. hasFocus (a) -> bool hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type X. hasHeightForWidth (a) -> bool hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type X. hasMouseTracking (a) -> bool height = None heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type X. heightForWidth (a, b) -> int heightMM = unbound qt slot heightMM of QTabWidget type X. heightMM (a) -> int help = built-in method help of PythonQt.PythonQtClassWrapper object Shows the help of available methods for this class hide = unbound qt slot hide of QTabWidget type X. hide () hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type X. hideEvent (a, b) iconSize = QSize (QSize at: 0x0) indexOf = unbound qt slot indexOf of QTabWidget type X. indexOf (a, b) -> int inherits = built-in method inherits of PythonQt.PythonQtClassWrapper object Returns if the class inherits or is of given type name initPainter = unbound qt slot py_q_initPainter of QTabWidget type X. initPainter (a, b) initStyleOption = unbound qt slot initStyleOption of QTabWidget type X. initStyleOption (a, b) inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type X. inputMethodEvent (a, b) inputMethodHints = None inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type X. inputMethodQuery (a, b) -> object insertAction = unbound qt slot insertAction of QTabWidget type X. insertAction (a, b, c) insertActions = unbound qt slot insertActions of QTabWidget type X. insertActions (a, b, c) insertTab = unbound qt slot insertTab of QTabWidget type X. insertTab (a, b, c, d, e) -> int installEventFilter = unbound qt slot installEventFilter of QTabWidget type X. installEventFilter (a, b) isActiveWindow = None isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type X. isAncestorOf (a, b) -> bool isEnabled = unbound qt slot isEnabled of QTabWidget type X. isEnabled (a) -> bool isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type X. isEnabledTo (a, b) -> bool isFullScreen = unbound qt slot isFullScreen of QTabWidget type X. isFullScreen (a) -> bool isHidden = unbound qt slot isHidden of QTabWidget type X. isHidden (a) -> bool isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type X. isLeftToRight (a) -> bool isMaximized = unbound qt slot isMaximized of QTabWidget type X. isMaximized (a) -> bool isMinimized = unbound qt slot isMinimized of QTabWidget type X. isMinimized (a) -> bool isModal = unbound qt slot isModal of QTabWidget type X. isModal (a) -> bool isMovable = unbound qt slot isMovable of QTabWidget type X. isMovable (a) -> bool isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type X. isRightToLeft (a) -> bool isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type X. isSignalConnected (a, b) -> bool isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type X. isTabEnabled (a, b) -> bool isVisible = unbound qt slot isVisible of QTabWidget type X. isVisible (a) -> bool isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type X. isVisibleTo (a, b) -> bool isWidgetType = unbound qt slot isWidgetType of QTabWidget type X. isWidgetType (a) -> bool isWindow = unbound qt slot isWindow of QTabWidget type X. isWindow (a) -> bool isWindowModified = unbound qt slot isWindowModified of QTabWidget type X. isWindowModified (a) -> bool isWindowType = unbound qt slot isWindowType of QTabWidget type X. isWindowType (a) -> bool keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type X. keyPressEvent (a, b) keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type X. keyReleaseEvent (a, b) keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type X. keyboardGrabber () -> PythonQt.QtGui.QWidget killTimer = unbound qt slot killTimer of QTabWidget type X. killTimer (a, b) layout = unbound qt slot layout of QTabWidget type X. layout (a) -> PythonQt.QtGui.QLayout layoutDirection = None leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type X. leaveEvent (a, b) locale = QLocale (QLocale at: 0x0) logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type X. logicalDpiX (a) -> int logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type X. logicalDpiY (a) -> int lower = unbound qt slot lower of QTabWidget type X. lower () mapFrom = unbound qt slot mapFrom of QTabWidget type X. mapFrom (a, b, c) -> PythonQt.QtCore.QPoint mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type X. mapFromGlobal (a, b) -> PythonQt.QtCore.QPoint mapFromParent = unbound qt slot mapFromParent of QTabWidget type X. mapFromParent (a, b) -> PythonQt.QtCore.QPoint mapTo = unbound qt slot mapTo of QTabWidget type X. mapTo (a, b, c) -> PythonQt.QtCore.QPoint mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type X. mapToGlobal (a, b) -> PythonQt.QtCore.QPoint mapToParent = unbound qt slot mapToParent of QTabWidget type X. mapToParent (a, b) -> PythonQt.QtCore.QPoint mask = unbound qt slot mask of QTabWidget type X. mask (a) -> PythonQt.QtGui.QRegion maximized = None maximumHeight = None maximumSize = QSize (QSize at: 0x0) maximumWidth = None metaObject = unbound qt slot metaObject of QTabWidget type X. metaObject (a) -> PythonQt.QtCore.QMetaObject metric = unbound qt slot py_q_metric of QTabWidget type X. metric (a, b) -> int minimized = None minimumHeight = None minimumSize = QSize (QSize at: 0x0) minimumSizeHint = QSize (QSize at: 0x0) minimumWidth = None modal = None mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type X. mouseDoubleClickEvent (a, b) mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type X. mouseGrabber () -> PythonQt.QtGui.QWidget mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type X. mouseMoveEvent (a, b) mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type X. mousePressEvent (a, b) mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type X. mouseReleaseEvent (a, b) mouseTracking = None movable = None move = unbound qt slot move of QTabWidget type X. move (a, b, c) moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type X. moveEvent (a, b) moveToThread = unbound qt slot moveToThread of QTabWidget type X. moveToThread (a, b) nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type X. nativeEvent (a, b, c, d) -> bool nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type X. nativeParentWidget (a) -> PythonQt.QtGui.QWidget nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type X. nextInFocusChain (a) -> PythonQt.QtGui.QWidget normalGeometry = QRect (QRect at: 0x0) objectName = None objectNameChanged = unbound qt signal objectNameChanged of QTabWidget type overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type X. overrideWindowFlags (a, b) overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type X. overrideWindowState (a, b) paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type X. paintEngine (a) -> PythonQt.QtGui.QPaintEngine paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type X. paintEvent (a, b) paintingActive = unbound qt slot paintingActive of QTabWidget type X. paintingActive (a) -> bool palette = QPalette (QPalette at: 0x0) parent = unbound qt slot parent of QTabWidget type X. parent (a) -> PythonQt.private.QObject parentWidget = unbound qt slot parentWidget of QTabWidget type X. parentWidget (a) -> PythonQt.QtGui.QWidget physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type X. physicalDpiX (a) -> int physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type X. physicalDpiY (a) -> int pos = QPoint (QPoint at: 0x0) previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type X. previousInFocusChain (a) -> PythonQt.QtGui.QWidget property = unbound qt slot property of QTabWidget type X. property (a, b) -> object raise = unbound qt slot raise of QTabWidget type X. raise () rect = QRect (QRect at: 0x0) redirected = unbound qt slot py_q_redirected of QTabWidget type X. redirected (a, b) -> PythonQt.QtGui.QPaintDevice releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type X. releaseKeyboard (a) releaseMouse = unbound qt slot releaseMouse of QTabWidget type X. releaseMouse (a) releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type X. releaseShortcut (a, b) removeAction = unbound qt slot removeAction of QTabWidget type X. removeAction (a, b) removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type X. removeEventFilter (a, b) removeTab = unbound qt slot removeTab of QTabWidget type X. removeTab (a, b) render = unbound qt slot render of QTabWidget type X. render (a, b, c, d, e) repaint = unbound qt slot repaint of QTabWidget type X. repaint (a, b, c, d, e) resize = unbound qt slot resize of QTabWidget type X. resize (a, b, c) resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type X. resizeEvent (a, b) restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type X. restoreGeometry (a, b) -> bool saveGeometry = unbound qt slot saveGeometry of QTabWidget type X. saveGeometry (a) -> PythonQt.QtCore.QByteArray scroll = unbound qt slot scroll of QTabWidget type X. scroll (a, b, c, d) sender = unbound qt slot sender of QTabWidget type X. sender (a) -> PythonQt.private.QObject senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type X. senderSignalIndex (a) -> int setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type X. setAcceptDrops (a, b) setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type X. setAccessibleDescription (a, b) setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type X. setAccessibleName (a, b) setAttribute = unbound qt slot setAttribute of QTabWidget type X. setAttribute (a, b, c) setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type X. setAutoFillBackground (a, b) setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type X. setBackgroundRole (a, b) setBaseSize = unbound qt slot setBaseSize of QTabWidget type X. setBaseSize (a, b, c) setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type X. setContentsMargins (a, b, c, d, e) setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type X. setContextMenuPolicy (a, b) setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type X. setCornerWidget (a, b, c) setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type X. setCurrentIndex (a) setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type X. setCurrentWidget (a) setCursor = unbound qt slot setCursor of QTabWidget type X. setCursor (a, b) setDisabled = unbound qt slot setDisabled of QTabWidget type X. setDisabled (a) setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type X. setDocumentMode (a, b) setElideMode = unbound qt slot setElideMode of QTabWidget type X. setElideMode (a, b) setEnabled = unbound qt slot setEnabled of QTabWidget type X. setEnabled (a) setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type X. setFixedHeight (a, b) setFixedSize = unbound qt slot setFixedSize of QTabWidget type X. setFixedSize (a, b, c) setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type X. setFixedWidth (a, b) setFocus = unbound qt slot setFocus of QTabWidget type X. setFocus (a, b) setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type X. setFocusPolicy (a, b) setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type X. setFocusProxy (a, b) setFont = unbound qt slot setFont of QTabWidget type X. setFont (a, b) setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type X. setForegroundRole (a, b) setGeometry = unbound qt slot setGeometry of QTabWidget type X. setGeometry (a, b, c, d, e) setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type X. setGraphicsEffect (a, b) setHidden = unbound qt slot setHidden of QTabWidget type X. setHidden (a) setIconSize = unbound qt slot setIconSize of QTabWidget type X. setIconSize (a, b) setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type X. setInputMethodHints (a, b) setLayout = unbound qt slot setLayout of QTabWidget type X. setLayout (a, b) setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type X. setLayoutDirection (a, b) setLocale = unbound qt slot setLocale of QTabWidget type X. setLocale (a, b) setMask = unbound qt slot setMask of QTabWidget type X. setMask (a, b) setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type X. setMaximumHeight (a, b) setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type X. setMaximumSize (a, b, c) setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type X. setMaximumWidth (a, b) setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type X. setMinimumHeight (a, b) setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type X. setMinimumSize (a, b, c) setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type X. setMinimumWidth (a, b) setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type X. setMouseTracking (a, b) setMovable = unbound qt slot setMovable of QTabWidget type X. setMovable (a, b) setObjectName = unbound qt slot setObjectName of QTabWidget type X. setObjectName (a, b) setPalette = unbound qt slot setPalette of QTabWidget type X. setPalette (a, b) setParent = unbound qt slot setParent of QTabWidget type X. setParent (a, b, c) setProperty = unbound qt slot setProperty of QTabWidget type X. setProperty (a, b, c) -> bool setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type X. setShortcutAutoRepeat (a, b, c) setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type X. setShortcutEnabled (a, b, c) setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type X. setSizeIncrement (a, b, c) setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type X. setSizePolicy (a, b, c) setStatusTip = unbound qt slot setStatusTip of QTabWidget type X. setStatusTip (a, b) setStyle = unbound qt slot setStyle of QTabWidget type X. setStyle (a, b) setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type X. setStyleSheet (a) setTabBar = unbound qt slot setTabBar of QTabWidget type X. setTabBar (a, b) setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type X. setTabBarAutoHide (a, b) setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type X. setTabEnabled (a, b, c) setTabIcon = unbound qt slot setTabIcon of QTabWidget type X. setTabIcon (a, b, c) setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type X. setTabOrder (a, b) setTabPosition = unbound qt slot setTabPosition of QTabWidget type X. setTabPosition (a, b) setTabShape = unbound qt slot setTabShape of QTabWidget type X. setTabShape (a, b) setTabText = unbound qt slot setTabText of QTabWidget type X. setTabText (a, b, c) setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type X. setTabToolTip (a, b, c) setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type X. setTabWhatsThis (a, b, c) setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type X. setTabsClosable (a, b) setToolTip = unbound qt slot setToolTip of QTabWidget type X. setToolTip (a, b) setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type X. setToolTipDuration (a, b) setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type X. setUpdatesEnabled (a, b) setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type X. setUsesScrollButtons (a, b) setVisible = unbound qt slot py_q_setVisible of QTabWidget type X. setVisible (a, b) setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type X. setWhatsThis (a, b) setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type X. setWindowFilePath (a, b) setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type X. setWindowFlags (a, b) setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type X. setWindowIcon (a, b) setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type X. setWindowIconText (a, b) setWindowModality = unbound qt slot setWindowModality of QTabWidget type X. setWindowModality (a, b) setWindowModified = unbound qt slot setWindowModified of QTabWidget type X. setWindowModified (a) setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type X. setWindowOpacity (a, b) setWindowRole = unbound qt slot setWindowRole of QTabWidget type X. setWindowRole (a, b) setWindowState = unbound qt slot setWindowState of QTabWidget type X. setWindowState (a, b) setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type X. setWindowTitle (a) sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type X. sharedPainter (a) -> PythonQt.QtGui.QPainter show = unbound qt slot show of QTabWidget type X. show () showEvent = unbound qt slot py_q_showEvent of QTabWidget type X. showEvent (a, b) showFullScreen = unbound qt slot showFullScreen of QTabWidget type X. showFullScreen () showMaximized = unbound qt slot showMaximized of QTabWidget type X. showMaximized () showMinimized = unbound qt slot showMinimized of QTabWidget type X. showMinimized () showNormal = unbound qt slot showNormal of QTabWidget type X. showNormal () signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type X. signalsBlocked (a) -> bool size = QSize (QSize at: 0x0) sizeHint = QSize (QSize at: 0x0) sizeIncrement = QSize (QSize at: 0x0) sizePolicy = QSizePolicy (QSizePolicy at: 0x0) stackUnder = unbound qt slot stackUnder of QTabWidget type X. stackUnder (a, b) startTimer = unbound qt slot startTimer of QTabWidget type X. startTimer (a, b, c) -> int statusTip = None style = unbound qt slot style of QTabWidget type X. style (a) -> PythonQt.QtGui.QStyle styleSheet = None tabBar = unbound qt slot tabBar of QTabWidget type X. tabBar (a) -> PythonQt.QtGui.QTabBar tabBarAutoHide = None tabBarClicked = unbound qt signal tabBarClicked of QTabWidget type tabBarDoubleClicked = unbound qt signal tabBarDoubleClicked of QTabWidget type tabCloseRequested = unbound qt signal tabCloseRequested of QTabWidget type tabIcon = unbound qt slot tabIcon of QTabWidget type X. tabIcon (a, b) -> PythonQt.QtGui.QIcon tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type X. tabInserted (a, b) tabPosition = None tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type X. tabRemoved (a, b) tabShape = None tabText = unbound qt slot tabText of QTabWidget type X. tabText (a, b) -> str tabToolTip = unbound qt slot tabToolTip of QTabWidget type X. tabToolTip (a, b) -> str tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type X. tabWhatsThis (a, b) -> str tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type X. tabletEvent (a, b) tabletTracking = None tabsClosable = None testAttribute = unbound qt slot testAttribute of QTabWidget type X. testAttribute (a, b) -> bool thread = unbound qt slot thread of QTabWidget type X. thread (a) timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type X. timerEvent (a, b) toolTip = None toolTipDuration = None tr = unbound qt slot tr of QTabWidget type X. tr (a, b, c, d) -> str underMouse = unbound qt slot underMouse of QTabWidget type X. underMouse (a) -> bool ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type X. ungrabGesture (a, b) unsetCursor = unbound qt slot unsetCursor of QTabWidget type X. unsetCursor (a) unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type X. unsetLayoutDirection (a) unsetLocale = unbound qt slot unsetLocale of QTabWidget type X. unsetLocale (a) update = unbound qt slot update of QTabWidget type X. update (a, b, c, d, e) updateGeometry = unbound qt slot updateGeometry of QTabWidget type X. updateGeometry (a) updatesEnabled = None usesScrollButtons = None visible = None visibleRegion = unbound qt slot visibleRegion of QTabWidget type X. visibleRegion (a) -> PythonQt.QtGui.QRegion whatsThis = None wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type X. wheelEvent (a, b) widget = unbound qt slot widget of QTabWidget type X. widget (a, b) -> PythonQt.QtGui.QWidget width = None widthMM = unbound qt slot widthMM of QTabWidget type X. widthMM (a) -> int winId = unbound qt slot winId of QTabWidget type X. winId (a) window = unbound qt slot window of QTabWidget type X. window (a) -> PythonQt.QtGui.QWidget windowFilePath = None windowFlags = unbound qt slot windowFlags of QTabWidget type X. windowFlags (a) windowHandle = unbound qt slot windowHandle of QTabWidget type X. windowHandle (a) -> PythonQt.QtGui.QWindow windowIcon = QIcon (QIcon at: 0x0) windowIconChanged = unbound qt signal windowIconChanged of QTabWidget type windowIconText = None windowIconTextChanged = unbound qt signal windowIconTextChanged of QTabWidget type windowModality = None windowModified = None windowOpacity = None windowRole = unbound qt slot windowRole of QTabWidget type X. windowRole (a) -> str windowState = unbound qt slot windowState of QTabWidget type X. windowState (a) windowTitle = None windowTitleChanged = unbound qt signal windowTitleChanged of QTabWidget type windowType = unbound qt slot windowType of QTabWidget type X. windowType (a) x = None y = None Descriptors from PythonQt.QtGui.QTabWidget __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) Methods from PythonQt.PythonQtInstanceWrapper __delattr__ (...) x. __delattr__ ('name') < ==> del x.name __eq__ (...) x. __eq__ (y) < ==> x==y __ge__ (...) x. __ge__ (y) < ==> x>=y __getattribute__ (...) x. __getattribute__ ('name') < ==> x.name __gt__ (...) x. __gt__ (y) < ==> x>y __hash__ (...) x. __hash__ () < ==> hash(x) __le__ (...) x. __le__ (y) < ==> x < =y __lt__ (...) x. __lt__ (y) < ==> x __ne__ (...) x. __ne__ (y) < ==> x!=y __nonzero__ (...) x. __nonzero__ () < ==> x != 0 __repr__ (...) x. __repr__ () < ==> repr(x) __setattr__ (...) x. __setattr__ ('name', value) < ==> x.name = value __str__ (...) x. __str__ () < ==> str(x) Attributes from PythonQt.PythonQtInstanceWrapper __new__ = built-in method __new__ of PythonQt.PythonQtClassWrapper object T. __new__ (S, ...) -> a new object with type S, a subtype of T actionEvent typerig.gui.widgets.TRVTabWidget.actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type actions typerig.gui.widgets.TRVTabWidget.actions = unbound qt slot actions of QTabWidget type activateWindow typerig.gui.widgets.TRVTabWidget.activateWindow = unbound qt slot activateWindow of QTabWidget type addAction typerig.gui.widgets.TRVTabWidget.addAction = unbound qt slot addAction of QTabWidget type addActions typerig.gui.widgets.TRVTabWidget.addActions = unbound qt slot addActions of QTabWidget type addTab typerig.gui.widgets.TRVTabWidget.addTab = unbound qt slot addTab of QTabWidget type adjustSize typerig.gui.widgets.TRVTabWidget.adjustSize = unbound qt slot adjustSize of QTabWidget type backgroundRole typerig.gui.widgets.TRVTabWidget.backgroundRole = unbound qt slot backgroundRole of QTabWidget type backingStore typerig.gui.widgets.TRVTabWidget.backingStore = unbound qt slot backingStore of QTabWidget type blockSignals typerig.gui.widgets.TRVTabWidget.blockSignals = unbound qt slot blockSignals of QTabWidget type changeEvent typerig.gui.widgets.TRVTabWidget.changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type childAt typerig.gui.widgets.TRVTabWidget.childAt = unbound qt slot childAt of QTabWidget type childEvent typerig.gui.widgets.TRVTabWidget.childEvent = unbound qt slot py_q_childEvent of QTabWidget type children typerig.gui.widgets.TRVTabWidget.children = unbound qt slot children of QTabWidget type className typerig.gui.widgets.TRVTabWidget.className = className (...) Return the classname of the object clear typerig.gui.widgets.TRVTabWidget.clear = unbound qt slot clear of QTabWidget type clearFocus typerig.gui.widgets.TRVTabWidget.clearFocus = unbound qt slot clearFocus of QTabWidget type clearMask typerig.gui.widgets.TRVTabWidget.clearMask = unbound qt slot clearMask of QTabWidget type close typerig.gui.widgets.TRVTabWidget.close = unbound qt slot close of QTabWidget type closeEvent typerig.gui.widgets.TRVTabWidget.closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type colorCount typerig.gui.widgets.TRVTabWidget.colorCount = unbound qt slot colorCount of QTabWidget type connect typerig.gui.widgets.TRVTabWidget.connect = unbound qt slot connect of QTabWidget type contentsMargins typerig.gui.widgets.TRVTabWidget.contentsMargins = unbound qt slot contentsMargins of QTabWidget type contentsRect typerig.gui.widgets.TRVTabWidget.contentsRect = unbound qt slot contentsRect of QTabWidget type contextMenuEvent typerig.gui.widgets.TRVTabWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type cornerWidget typerig.gui.widgets.TRVTabWidget.cornerWidget = unbound qt slot cornerWidget of QTabWidget type createWindowContainer typerig.gui.widgets.TRVTabWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type createWinId typerig.gui.widgets.TRVTabWidget.createWinId = unbound qt slot createWinId of QTabWidget type currentWidget typerig.gui.widgets.TRVTabWidget.currentWidget = unbound qt slot currentWidget of QTabWidget type customEvent typerig.gui.widgets.TRVTabWidget.customEvent = unbound qt slot py_q_customEvent of QTabWidget type delete typerig.gui.widgets.TRVTabWidget.delete = delete (...) Deletes the given C++ object deleteLater typerig.gui.widgets.TRVTabWidget.deleteLater = unbound qt slot deleteLater of QTabWidget type depth typerig.gui.widgets.TRVTabWidget.depth = unbound qt slot depth of QTabWidget type destroy typerig.gui.widgets.TRVTabWidget.destroy = unbound qt slot destroy of QTabWidget type devicePixelRatio typerig.gui.widgets.TRVTabWidget.devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type devicePixelRatioF typerig.gui.widgets.TRVTabWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type devicePixelRatioFScale typerig.gui.widgets.TRVTabWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type devType typerig.gui.widgets.TRVTabWidget.devType = unbound qt slot py_q_devType of QTabWidget type disconnect typerig.gui.widgets.TRVTabWidget.disconnect = unbound qt slot disconnect of QTabWidget type dragEnterEvent typerig.gui.widgets.TRVTabWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type dragLeaveEvent typerig.gui.widgets.TRVTabWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type dragMoveEvent typerig.gui.widgets.TRVTabWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type dropEvent typerig.gui.widgets.TRVTabWidget.dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type dumpObjectInfo typerig.gui.widgets.TRVTabWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type dumpObjectTree typerig.gui.widgets.TRVTabWidget.dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type dynamicPropertyNames typerig.gui.widgets.TRVTabWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type effectiveWinId typerig.gui.widgets.TRVTabWidget.effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type ensurePolished typerig.gui.widgets.TRVTabWidget.ensurePolished = unbound qt slot ensurePolished of QTabWidget type enterEvent typerig.gui.widgets.TRVTabWidget.enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type event typerig.gui.widgets.TRVTabWidget.event = unbound qt slot py_q_event of QTabWidget type eventFilter typerig.gui.widgets.TRVTabWidget.eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type findChild typerig.gui.widgets.TRVTabWidget.findChild = unbound qt slot findChild of QTabWidget type findChildren typerig.gui.widgets.TRVTabWidget.findChildren = unbound qt slot findChildren of QTabWidget type focusInEvent typerig.gui.widgets.TRVTabWidget.focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type focusNextChild typerig.gui.widgets.TRVTabWidget.focusNextChild = unbound qt slot focusNextChild of QTabWidget type focusNextPrevChild typerig.gui.widgets.TRVTabWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type focusOutEvent typerig.gui.widgets.TRVTabWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type focusPreviousChild typerig.gui.widgets.TRVTabWidget.focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type focusProxy typerig.gui.widgets.TRVTabWidget.focusProxy = unbound qt slot focusProxy of QTabWidget type focusWidget typerig.gui.widgets.TRVTabWidget.focusWidget = unbound qt slot focusWidget of QTabWidget type foregroundRole typerig.gui.widgets.TRVTabWidget.foregroundRole = unbound qt slot foregroundRole of QTabWidget type grab typerig.gui.widgets.TRVTabWidget.grab = unbound qt slot grab of QTabWidget type grabGesture typerig.gui.widgets.TRVTabWidget.grabGesture = unbound qt slot grabGesture of QTabWidget type grabKeyboard typerig.gui.widgets.TRVTabWidget.grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type grabMouse typerig.gui.widgets.TRVTabWidget.grabMouse = unbound qt slot grabMouse of QTabWidget type grabShortcut typerig.gui.widgets.TRVTabWidget.grabShortcut = unbound qt slot grabShortcut of QTabWidget type graphicsEffect typerig.gui.widgets.TRVTabWidget.graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type graphicsProxyWidget typerig.gui.widgets.TRVTabWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type hasFocus typerig.gui.widgets.TRVTabWidget.hasFocus = unbound qt slot hasFocus of QTabWidget type hasHeightForWidth typerig.gui.widgets.TRVTabWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type hasMouseTracking typerig.gui.widgets.TRVTabWidget.hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type heightForWidth typerig.gui.widgets.TRVTabWidget.heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type heightMM typerig.gui.widgets.TRVTabWidget.heightMM = unbound qt slot heightMM of QTabWidget type help typerig.gui.widgets.TRVTabWidget.help = help (...) Shows the help of available methods for this class hide typerig.gui.widgets.TRVTabWidget.hide = unbound qt slot hide of QTabWidget type hideEvent typerig.gui.widgets.TRVTabWidget.hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type indexOf typerig.gui.widgets.TRVTabWidget.indexOf = unbound qt slot indexOf of QTabWidget type inherits typerig.gui.widgets.TRVTabWidget.inherits = inherits (...) Returns if the class inherits or is of given type name initPainter typerig.gui.widgets.TRVTabWidget.initPainter = unbound qt slot py_q_initPainter of QTabWidget type initStyleOption typerig.gui.widgets.TRVTabWidget.initStyleOption = unbound qt slot initStyleOption of QTabWidget type inputMethodEvent typerig.gui.widgets.TRVTabWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type inputMethodQuery typerig.gui.widgets.TRVTabWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type insertAction typerig.gui.widgets.TRVTabWidget.insertAction = unbound qt slot insertAction of QTabWidget type insertActions typerig.gui.widgets.TRVTabWidget.insertActions = unbound qt slot insertActions of QTabWidget type insertTab typerig.gui.widgets.TRVTabWidget.insertTab = unbound qt slot insertTab of QTabWidget type installEventFilter typerig.gui.widgets.TRVTabWidget.installEventFilter = unbound qt slot installEventFilter of QTabWidget type isAncestorOf typerig.gui.widgets.TRVTabWidget.isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type isEnabled typerig.gui.widgets.TRVTabWidget.isEnabled = unbound qt slot isEnabled of QTabWidget type isEnabledTo typerig.gui.widgets.TRVTabWidget.isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type isFullScreen typerig.gui.widgets.TRVTabWidget.isFullScreen = unbound qt slot isFullScreen of QTabWidget type isHidden typerig.gui.widgets.TRVTabWidget.isHidden = unbound qt slot isHidden of QTabWidget type isLeftToRight typerig.gui.widgets.TRVTabWidget.isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type isMaximized typerig.gui.widgets.TRVTabWidget.isMaximized = unbound qt slot isMaximized of QTabWidget type isMinimized typerig.gui.widgets.TRVTabWidget.isMinimized = unbound qt slot isMinimized of QTabWidget type isModal typerig.gui.widgets.TRVTabWidget.isModal = unbound qt slot isModal of QTabWidget type isMovable typerig.gui.widgets.TRVTabWidget.isMovable = unbound qt slot isMovable of QTabWidget type isRightToLeft typerig.gui.widgets.TRVTabWidget.isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type isSignalConnected typerig.gui.widgets.TRVTabWidget.isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type isTabEnabled typerig.gui.widgets.TRVTabWidget.isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type isVisible typerig.gui.widgets.TRVTabWidget.isVisible = unbound qt slot isVisible of QTabWidget type isVisibleTo typerig.gui.widgets.TRVTabWidget.isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type isWidgetType typerig.gui.widgets.TRVTabWidget.isWidgetType = unbound qt slot isWidgetType of QTabWidget type isWindow typerig.gui.widgets.TRVTabWidget.isWindow = unbound qt slot isWindow of QTabWidget type isWindowModified typerig.gui.widgets.TRVTabWidget.isWindowModified = unbound qt slot isWindowModified of QTabWidget type isWindowType typerig.gui.widgets.TRVTabWidget.isWindowType = unbound qt slot isWindowType of QTabWidget type keyboardGrabber typerig.gui.widgets.TRVTabWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type keyPressEvent typerig.gui.widgets.TRVTabWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type keyReleaseEvent typerig.gui.widgets.TRVTabWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type killTimer typerig.gui.widgets.TRVTabWidget.killTimer = unbound qt slot killTimer of QTabWidget type layout typerig.gui.widgets.TRVTabWidget.layout = unbound qt slot layout of QTabWidget type leaveEvent typerig.gui.widgets.TRVTabWidget.leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type logicalDpiX typerig.gui.widgets.TRVTabWidget.logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type logicalDpiY typerig.gui.widgets.TRVTabWidget.logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type lower typerig.gui.widgets.TRVTabWidget.lower = unbound qt slot lower of QTabWidget type mapFrom typerig.gui.widgets.TRVTabWidget.mapFrom = unbound qt slot mapFrom of QTabWidget type mapFromGlobal typerig.gui.widgets.TRVTabWidget.mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type mapFromParent typerig.gui.widgets.TRVTabWidget.mapFromParent = unbound qt slot mapFromParent of QTabWidget type mapTo typerig.gui.widgets.TRVTabWidget.mapTo = unbound qt slot mapTo of QTabWidget type mapToGlobal typerig.gui.widgets.TRVTabWidget.mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type mapToParent typerig.gui.widgets.TRVTabWidget.mapToParent = unbound qt slot mapToParent of QTabWidget type mask typerig.gui.widgets.TRVTabWidget.mask = unbound qt slot mask of QTabWidget type metaObject typerig.gui.widgets.TRVTabWidget.metaObject = unbound qt slot metaObject of QTabWidget type metric typerig.gui.widgets.TRVTabWidget.metric = unbound qt slot py_q_metric of QTabWidget type mouseDoubleClickEvent typerig.gui.widgets.TRVTabWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type mouseGrabber typerig.gui.widgets.TRVTabWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type mouseMoveEvent typerig.gui.widgets.TRVTabWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type mousePressEvent typerig.gui.widgets.TRVTabWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type mouseReleaseEvent typerig.gui.widgets.TRVTabWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type move typerig.gui.widgets.TRVTabWidget.move = unbound qt slot move of QTabWidget type moveEvent typerig.gui.widgets.TRVTabWidget.moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type moveToThread typerig.gui.widgets.TRVTabWidget.moveToThread = unbound qt slot moveToThread of QTabWidget type nativeEvent typerig.gui.widgets.TRVTabWidget.nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type nativeParentWidget typerig.gui.widgets.TRVTabWidget.nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type nextInFocusChain typerig.gui.widgets.TRVTabWidget.nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type overrideWindowFlags typerig.gui.widgets.TRVTabWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type overrideWindowState typerig.gui.widgets.TRVTabWidget.overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type paintEngine typerig.gui.widgets.TRVTabWidget.paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type paintEvent typerig.gui.widgets.TRVTabWidget.paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type paintingActive typerig.gui.widgets.TRVTabWidget.paintingActive = unbound qt slot paintingActive of QTabWidget type parent typerig.gui.widgets.TRVTabWidget.parent = unbound qt slot parent of QTabWidget type parentWidget typerig.gui.widgets.TRVTabWidget.parentWidget = unbound qt slot parentWidget of QTabWidget type physicalDpiX typerig.gui.widgets.TRVTabWidget.physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type physicalDpiY typerig.gui.widgets.TRVTabWidget.physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type previousInFocusChain typerig.gui.widgets.TRVTabWidget.previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type property typerig.gui.widgets.TRVTabWidget.property = unbound qt slot property of QTabWidget type raise typerig.gui.widgets.TRVTabWidget.raise = unbound qt slot raise of QTabWidget type redirected typerig.gui.widgets.TRVTabWidget.redirected = unbound qt slot py_q_redirected of QTabWidget type releaseKeyboard typerig.gui.widgets.TRVTabWidget.releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type releaseMouse typerig.gui.widgets.TRVTabWidget.releaseMouse = unbound qt slot releaseMouse of QTabWidget type releaseShortcut typerig.gui.widgets.TRVTabWidget.releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type removeAction typerig.gui.widgets.TRVTabWidget.removeAction = unbound qt slot removeAction of QTabWidget type removeEventFilter typerig.gui.widgets.TRVTabWidget.removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type removeTab typerig.gui.widgets.TRVTabWidget.removeTab = unbound qt slot removeTab of QTabWidget type render typerig.gui.widgets.TRVTabWidget.render = unbound qt slot render of QTabWidget type repaint typerig.gui.widgets.TRVTabWidget.repaint = unbound qt slot repaint of QTabWidget type resize typerig.gui.widgets.TRVTabWidget.resize = unbound qt slot resize of QTabWidget type resizeEvent typerig.gui.widgets.TRVTabWidget.resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type restoreGeometry typerig.gui.widgets.TRVTabWidget.restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type saveGeometry typerig.gui.widgets.TRVTabWidget.saveGeometry = unbound qt slot saveGeometry of QTabWidget type scroll typerig.gui.widgets.TRVTabWidget.scroll = unbound qt slot scroll of QTabWidget type sender typerig.gui.widgets.TRVTabWidget.sender = unbound qt slot sender of QTabWidget type senderSignalIndex typerig.gui.widgets.TRVTabWidget.senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type setAcceptDrops typerig.gui.widgets.TRVTabWidget.setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type setAccessibleDescription typerig.gui.widgets.TRVTabWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type setAccessibleName typerig.gui.widgets.TRVTabWidget.setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type setAttribute typerig.gui.widgets.TRVTabWidget.setAttribute = unbound qt slot setAttribute of QTabWidget type setAutoFillBackground typerig.gui.widgets.TRVTabWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type setBackgroundRole typerig.gui.widgets.TRVTabWidget.setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type setBaseSize typerig.gui.widgets.TRVTabWidget.setBaseSize = unbound qt slot setBaseSize of QTabWidget type setContentsMargins typerig.gui.widgets.TRVTabWidget.setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type setContextMenuPolicy typerig.gui.widgets.TRVTabWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type setCornerWidget typerig.gui.widgets.TRVTabWidget.setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type setCurrentIndex typerig.gui.widgets.TRVTabWidget.setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type setCurrentWidget typerig.gui.widgets.TRVTabWidget.setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type setCursor typerig.gui.widgets.TRVTabWidget.setCursor = unbound qt slot setCursor of QTabWidget type setDisabled typerig.gui.widgets.TRVTabWidget.setDisabled = unbound qt slot setDisabled of QTabWidget type setDocumentMode typerig.gui.widgets.TRVTabWidget.setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type setElideMode typerig.gui.widgets.TRVTabWidget.setElideMode = unbound qt slot setElideMode of QTabWidget type setEnabled typerig.gui.widgets.TRVTabWidget.setEnabled = unbound qt slot setEnabled of QTabWidget type setFixedHeight typerig.gui.widgets.TRVTabWidget.setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type setFixedSize typerig.gui.widgets.TRVTabWidget.setFixedSize = unbound qt slot setFixedSize of QTabWidget type setFixedWidth typerig.gui.widgets.TRVTabWidget.setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type setFocus typerig.gui.widgets.TRVTabWidget.setFocus = unbound qt slot setFocus of QTabWidget type setFocusPolicy typerig.gui.widgets.TRVTabWidget.setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type setFocusProxy typerig.gui.widgets.TRVTabWidget.setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type setFont typerig.gui.widgets.TRVTabWidget.setFont = unbound qt slot setFont of QTabWidget type setForegroundRole typerig.gui.widgets.TRVTabWidget.setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type setGeometry typerig.gui.widgets.TRVTabWidget.setGeometry = unbound qt slot setGeometry of QTabWidget type setGraphicsEffect typerig.gui.widgets.TRVTabWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type setHidden typerig.gui.widgets.TRVTabWidget.setHidden = unbound qt slot setHidden of QTabWidget type setIconSize typerig.gui.widgets.TRVTabWidget.setIconSize = unbound qt slot setIconSize of QTabWidget type setInputMethodHints typerig.gui.widgets.TRVTabWidget.setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type setLayout typerig.gui.widgets.TRVTabWidget.setLayout = unbound qt slot setLayout of QTabWidget type setLayoutDirection typerig.gui.widgets.TRVTabWidget.setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type setLocale typerig.gui.widgets.TRVTabWidget.setLocale = unbound qt slot setLocale of QTabWidget type setMask typerig.gui.widgets.TRVTabWidget.setMask = unbound qt slot setMask of QTabWidget type setMaximumHeight typerig.gui.widgets.TRVTabWidget.setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type setMaximumSize typerig.gui.widgets.TRVTabWidget.setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type setMaximumWidth typerig.gui.widgets.TRVTabWidget.setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type setMinimumHeight typerig.gui.widgets.TRVTabWidget.setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type setMinimumSize typerig.gui.widgets.TRVTabWidget.setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type setMinimumWidth typerig.gui.widgets.TRVTabWidget.setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type setMouseTracking typerig.gui.widgets.TRVTabWidget.setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type setMovable typerig.gui.widgets.TRVTabWidget.setMovable = unbound qt slot setMovable of QTabWidget type setObjectName typerig.gui.widgets.TRVTabWidget.setObjectName = unbound qt slot setObjectName of QTabWidget type setPalette typerig.gui.widgets.TRVTabWidget.setPalette = unbound qt slot setPalette of QTabWidget type setParent typerig.gui.widgets.TRVTabWidget.setParent = unbound qt slot setParent of QTabWidget type setProperty typerig.gui.widgets.TRVTabWidget.setProperty = unbound qt slot setProperty of QTabWidget type setShortcutAutoRepeat typerig.gui.widgets.TRVTabWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type setShortcutEnabled typerig.gui.widgets.TRVTabWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type setSizeIncrement typerig.gui.widgets.TRVTabWidget.setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type setSizePolicy typerig.gui.widgets.TRVTabWidget.setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type setStatusTip typerig.gui.widgets.TRVTabWidget.setStatusTip = unbound qt slot setStatusTip of QTabWidget type setStyle typerig.gui.widgets.TRVTabWidget.setStyle = unbound qt slot setStyle of QTabWidget type setStyleSheet typerig.gui.widgets.TRVTabWidget.setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type setTabBar typerig.gui.widgets.TRVTabWidget.setTabBar = unbound qt slot setTabBar of QTabWidget type setTabBarAutoHide typerig.gui.widgets.TRVTabWidget.setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type setTabEnabled typerig.gui.widgets.TRVTabWidget.setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type setTabIcon typerig.gui.widgets.TRVTabWidget.setTabIcon = unbound qt slot setTabIcon of QTabWidget type setTabOrder typerig.gui.widgets.TRVTabWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type setTabPosition typerig.gui.widgets.TRVTabWidget.setTabPosition = unbound qt slot setTabPosition of QTabWidget type setTabsClosable typerig.gui.widgets.TRVTabWidget.setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type setTabShape typerig.gui.widgets.TRVTabWidget.setTabShape = unbound qt slot setTabShape of QTabWidget type setTabText typerig.gui.widgets.TRVTabWidget.setTabText = unbound qt slot setTabText of QTabWidget type setTabToolTip typerig.gui.widgets.TRVTabWidget.setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type setTabWhatsThis typerig.gui.widgets.TRVTabWidget.setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type setToolTip typerig.gui.widgets.TRVTabWidget.setToolTip = unbound qt slot setToolTip of QTabWidget type setToolTipDuration typerig.gui.widgets.TRVTabWidget.setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type setUpdatesEnabled typerig.gui.widgets.TRVTabWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type setUsesScrollButtons typerig.gui.widgets.TRVTabWidget.setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type setVisible typerig.gui.widgets.TRVTabWidget.setVisible = unbound qt slot py_q_setVisible of QTabWidget type setWhatsThis typerig.gui.widgets.TRVTabWidget.setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type setWindowFilePath typerig.gui.widgets.TRVTabWidget.setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type setWindowFlags typerig.gui.widgets.TRVTabWidget.setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type setWindowIcon typerig.gui.widgets.TRVTabWidget.setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type setWindowIconText typerig.gui.widgets.TRVTabWidget.setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type setWindowModality typerig.gui.widgets.TRVTabWidget.setWindowModality = unbound qt slot setWindowModality of QTabWidget type setWindowModified typerig.gui.widgets.TRVTabWidget.setWindowModified = unbound qt slot setWindowModified of QTabWidget type setWindowOpacity typerig.gui.widgets.TRVTabWidget.setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type setWindowRole typerig.gui.widgets.TRVTabWidget.setWindowRole = unbound qt slot setWindowRole of QTabWidget type setWindowState typerig.gui.widgets.TRVTabWidget.setWindowState = unbound qt slot setWindowState of QTabWidget type setWindowTitle typerig.gui.widgets.TRVTabWidget.setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type sharedPainter typerig.gui.widgets.TRVTabWidget.sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type show typerig.gui.widgets.TRVTabWidget.show = unbound qt slot show of QTabWidget type showEvent typerig.gui.widgets.TRVTabWidget.showEvent = unbound qt slot py_q_showEvent of QTabWidget type showFullScreen typerig.gui.widgets.TRVTabWidget.showFullScreen = unbound qt slot showFullScreen of QTabWidget type showMaximized typerig.gui.widgets.TRVTabWidget.showMaximized = unbound qt slot showMaximized of QTabWidget type showMinimized typerig.gui.widgets.TRVTabWidget.showMinimized = unbound qt slot showMinimized of QTabWidget type showNormal typerig.gui.widgets.TRVTabWidget.showNormal = unbound qt slot showNormal of QTabWidget type signalsBlocked typerig.gui.widgets.TRVTabWidget.signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type stackUnder typerig.gui.widgets.TRVTabWidget.stackUnder = unbound qt slot stackUnder of QTabWidget type startTimer typerig.gui.widgets.TRVTabWidget.startTimer = unbound qt slot startTimer of QTabWidget type style typerig.gui.widgets.TRVTabWidget.style = unbound qt slot style of QTabWidget type tabBar typerig.gui.widgets.TRVTabWidget.tabBar = unbound qt slot tabBar of QTabWidget type tabIcon typerig.gui.widgets.TRVTabWidget.tabIcon = unbound qt slot tabIcon of QTabWidget type tabInserted typerig.gui.widgets.TRVTabWidget.tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type tabletEvent typerig.gui.widgets.TRVTabWidget.tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type tabRemoved typerig.gui.widgets.TRVTabWidget.tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type tabText typerig.gui.widgets.TRVTabWidget.tabText = unbound qt slot tabText of QTabWidget type tabToolTip typerig.gui.widgets.TRVTabWidget.tabToolTip = unbound qt slot tabToolTip of QTabWidget type tabWhatsThis typerig.gui.widgets.TRVTabWidget.tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type testAttribute typerig.gui.widgets.TRVTabWidget.testAttribute = unbound qt slot testAttribute of QTabWidget type thread typerig.gui.widgets.TRVTabWidget.thread = unbound qt slot thread of QTabWidget type timerEvent typerig.gui.widgets.TRVTabWidget.timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type tr typerig.gui.widgets.TRVTabWidget.tr = unbound qt slot tr of QTabWidget type underMouse typerig.gui.widgets.TRVTabWidget.underMouse = unbound qt slot underMouse of QTabWidget type ungrabGesture typerig.gui.widgets.TRVTabWidget.ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type unsetCursor typerig.gui.widgets.TRVTabWidget.unsetCursor = unbound qt slot unsetCursor of QTabWidget type unsetLayoutDirection typerig.gui.widgets.TRVTabWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type unsetLocale typerig.gui.widgets.TRVTabWidget.unsetLocale = unbound qt slot unsetLocale of QTabWidget type update typerig.gui.widgets.TRVTabWidget.update = unbound qt slot update of QTabWidget type updateGeometry typerig.gui.widgets.TRVTabWidget.updateGeometry = unbound qt slot updateGeometry of QTabWidget type visibleRegion typerig.gui.widgets.TRVTabWidget.visibleRegion = unbound qt slot visibleRegion of QTabWidget type wheelEvent typerig.gui.widgets.TRVTabWidget.wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type widget typerig.gui.widgets.TRVTabWidget.widget = unbound qt slot widget of QTabWidget type widthMM typerig.gui.widgets.TRVTabWidget.widthMM = unbound qt slot widthMM of QTabWidget type window typerig.gui.widgets.TRVTabWidget.window = unbound qt slot window of QTabWidget type windowFlags typerig.gui.widgets.TRVTabWidget.windowFlags = unbound qt slot windowFlags of QTabWidget type windowHandle typerig.gui.widgets.TRVTabWidget.windowHandle = unbound qt slot windowHandle of QTabWidget type windowRole typerig.gui.widgets.TRVTabWidget.windowRole = unbound qt slot windowRole of QTabWidget type windowState typerig.gui.widgets.TRVTabWidget.windowState = unbound qt slot windowState of QTabWidget type windowType typerig.gui.widgets.TRVTabWidget.windowType = unbound qt slot windowType of QTabWidget type winId typerig.gui.widgets.TRVTabWidget.winId = unbound qt slot winId of QTabWidget type","title":"gui.widgets"},{"location":"typerig.gui.widgets.html#typerigguiwidgets","text":"","title":"typerig.gui.widgets"},{"location":"typerig.gui.widgets.html#getprocessglyphs","text":"typerig.gui.widgets.getProcessGlyphs = getProcessGlyphs (mode =0 , font =None , workspace =None ) Returns a list of glyphs for processing in TypeRig gui apps Args: mode (int): 0 - Current active glyph; 1 - All glyphs in current window; 2 - All selected glyphs; 3 - All glyphs in font font (fgFont) - Font file (object) workspace (flWorkspace) - Workspace Returns: list(eGlyph)","title":"getProcessGlyphs"},{"location":"typerig.gui.widgets.html#trmsgsimple","text":"","title":"TRMsgSimple"},{"location":"typerig.gui.widgets.html#activate","text":"typerig.gui.widgets.TRMsgSimple.activate = unbound qt slot activate of QVBoxLayout type","title":"activate"},{"location":"typerig.gui.widgets.html#addchildlayout","text":"typerig.gui.widgets.TRMsgSimple.addChildLayout = unbound qt slot addChildLayout of QVBoxLayout type","title":"addChildLayout"},{"location":"typerig.gui.widgets.html#addchildwidget","text":"typerig.gui.widgets.TRMsgSimple.addChildWidget = unbound qt slot addChildWidget of QVBoxLayout type","title":"addChildWidget"},{"location":"typerig.gui.widgets.html#additem","text":"typerig.gui.widgets.TRMsgSimple.addItem = unbound qt slot py_q_addItem of QVBoxLayout type","title":"addItem"},{"location":"typerig.gui.widgets.html#addlayout","text":"typerig.gui.widgets.TRMsgSimple.addLayout = unbound qt slot addLayout of QVBoxLayout type","title":"addLayout"},{"location":"typerig.gui.widgets.html#addspaceritem","text":"typerig.gui.widgets.TRMsgSimple.addSpacerItem = unbound qt slot addSpacerItem of QVBoxLayout type","title":"addSpacerItem"},{"location":"typerig.gui.widgets.html#addspacing","text":"typerig.gui.widgets.TRMsgSimple.addSpacing = unbound qt slot addSpacing of QVBoxLayout type","title":"addSpacing"},{"location":"typerig.gui.widgets.html#addstretch","text":"typerig.gui.widgets.TRMsgSimple.addStretch = unbound qt slot addStretch of QVBoxLayout type","title":"addStretch"},{"location":"typerig.gui.widgets.html#addstrut","text":"typerig.gui.widgets.TRMsgSimple.addStrut = unbound qt slot addStrut of QVBoxLayout type","title":"addStrut"},{"location":"typerig.gui.widgets.html#addwidget","text":"typerig.gui.widgets.TRMsgSimple.addWidget = unbound qt slot addWidget of QVBoxLayout type","title":"addWidget"},{"location":"typerig.gui.widgets.html#adoptlayout","text":"typerig.gui.widgets.TRMsgSimple.adoptLayout = unbound qt slot adoptLayout of QVBoxLayout type","title":"adoptLayout"},{"location":"typerig.gui.widgets.html#alignment","text":"typerig.gui.widgets.TRMsgSimple.alignment = unbound qt slot alignment of QVBoxLayout type","title":"alignment"},{"location":"typerig.gui.widgets.html#alignmentrect","text":"typerig.gui.widgets.TRMsgSimple.alignmentRect = unbound qt slot alignmentRect of QVBoxLayout type","title":"alignmentRect"},{"location":"typerig.gui.widgets.html#blocksignals","text":"typerig.gui.widgets.TRMsgSimple.blockSignals = unbound qt slot blockSignals of QVBoxLayout type","title":"blockSignals"},{"location":"typerig.gui.widgets.html#childevent","text":"typerig.gui.widgets.TRMsgSimple.childEvent = unbound qt slot py_q_childEvent of QVBoxLayout type","title":"childEvent"},{"location":"typerig.gui.widgets.html#children","text":"typerig.gui.widgets.TRMsgSimple.children = unbound qt slot children of QVBoxLayout type","title":"children"},{"location":"typerig.gui.widgets.html#classname","text":"typerig.gui.widgets.TRMsgSimple.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.widgets.html#closestacceptablesize","text":"typerig.gui.widgets.TRMsgSimple.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QVBoxLayout type","title":"closestAcceptableSize"},{"location":"typerig.gui.widgets.html#connect","text":"typerig.gui.widgets.TRMsgSimple.connect = unbound qt slot connect of QVBoxLayout type","title":"connect"},{"location":"typerig.gui.widgets.html#contentsmargins","text":"typerig.gui.widgets.TRMsgSimple.contentsMargins = unbound qt slot contentsMargins of QVBoxLayout type","title":"contentsMargins"},{"location":"typerig.gui.widgets.html#contentsrect","text":"typerig.gui.widgets.TRMsgSimple.contentsRect = unbound qt slot contentsRect of QVBoxLayout type","title":"contentsRect"},{"location":"typerig.gui.widgets.html#controltypes","text":"typerig.gui.widgets.TRMsgSimple.controlTypes = unbound qt slot py_q_controlTypes of QVBoxLayout type","title":"controlTypes"},{"location":"typerig.gui.widgets.html#count","text":"typerig.gui.widgets.TRMsgSimple.count = unbound qt slot py_q_count of QVBoxLayout type","title":"count"},{"location":"typerig.gui.widgets.html#customevent","text":"typerig.gui.widgets.TRMsgSimple.customEvent = unbound qt slot py_q_customEvent of QVBoxLayout type","title":"customEvent"},{"location":"typerig.gui.widgets.html#delete","text":"typerig.gui.widgets.TRMsgSimple.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.widgets.html#deletelater","text":"typerig.gui.widgets.TRMsgSimple.deleteLater = unbound qt slot deleteLater of QVBoxLayout type","title":"deleteLater"},{"location":"typerig.gui.widgets.html#direction","text":"typerig.gui.widgets.TRMsgSimple.direction = unbound qt slot direction of QVBoxLayout type","title":"direction"},{"location":"typerig.gui.widgets.html#disconnect","text":"typerig.gui.widgets.TRMsgSimple.disconnect = unbound qt slot disconnect of QVBoxLayout type","title":"disconnect"},{"location":"typerig.gui.widgets.html#dumpobjectinfo","text":"typerig.gui.widgets.TRMsgSimple.dumpObjectInfo = unbound qt slot dumpObjectInfo of QVBoxLayout type","title":"dumpObjectInfo"},{"location":"typerig.gui.widgets.html#dumpobjecttree","text":"typerig.gui.widgets.TRMsgSimple.dumpObjectTree = unbound qt slot dumpObjectTree of QVBoxLayout type","title":"dumpObjectTree"},{"location":"typerig.gui.widgets.html#dynamicpropertynames","text":"typerig.gui.widgets.TRMsgSimple.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QVBoxLayout type","title":"dynamicPropertyNames"},{"location":"typerig.gui.widgets.html#event","text":"typerig.gui.widgets.TRMsgSimple.event = unbound qt slot py_q_event of QVBoxLayout type","title":"event"},{"location":"typerig.gui.widgets.html#eventfilter","text":"typerig.gui.widgets.TRMsgSimple.eventFilter = unbound qt slot py_q_eventFilter of QVBoxLayout type","title":"eventFilter"},{"location":"typerig.gui.widgets.html#expandingdirections","text":"typerig.gui.widgets.TRMsgSimple.expandingDirections = unbound qt slot py_q_expandingDirections of QVBoxLayout type","title":"expandingDirections"},{"location":"typerig.gui.widgets.html#findchild","text":"typerig.gui.widgets.TRMsgSimple.findChild = unbound qt slot findChild of QVBoxLayout type","title":"findChild"},{"location":"typerig.gui.widgets.html#findchildren","text":"typerig.gui.widgets.TRMsgSimple.findChildren = unbound qt slot findChildren of QVBoxLayout type","title":"findChildren"},{"location":"typerig.gui.widgets.html#geometry","text":"typerig.gui.widgets.TRMsgSimple.geometry = unbound qt slot py_q_geometry of QVBoxLayout type","title":"geometry"},{"location":"typerig.gui.widgets.html#hasheightforwidth","text":"typerig.gui.widgets.TRMsgSimple.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QVBoxLayout type","title":"hasHeightForWidth"},{"location":"typerig.gui.widgets.html#heightforwidth","text":"typerig.gui.widgets.TRMsgSimple.heightForWidth = unbound qt slot py_q_heightForWidth of QVBoxLayout type","title":"heightForWidth"},{"location":"typerig.gui.widgets.html#help","text":"typerig.gui.widgets.TRMsgSimple.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.widgets.html#indexof","text":"typerig.gui.widgets.TRMsgSimple.indexOf = unbound qt slot py_q_indexOf of QVBoxLayout type","title":"indexOf"},{"location":"typerig.gui.widgets.html#inherits","text":"typerig.gui.widgets.TRMsgSimple.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.widgets.html#insertitem","text":"typerig.gui.widgets.TRMsgSimple.insertItem = unbound qt slot insertItem of QVBoxLayout type","title":"insertItem"},{"location":"typerig.gui.widgets.html#insertlayout","text":"typerig.gui.widgets.TRMsgSimple.insertLayout = unbound qt slot insertLayout of QVBoxLayout type","title":"insertLayout"},{"location":"typerig.gui.widgets.html#insertspaceritem","text":"typerig.gui.widgets.TRMsgSimple.insertSpacerItem = unbound qt slot insertSpacerItem of QVBoxLayout type","title":"insertSpacerItem"},{"location":"typerig.gui.widgets.html#insertspacing","text":"typerig.gui.widgets.TRMsgSimple.insertSpacing = unbound qt slot insertSpacing of QVBoxLayout type","title":"insertSpacing"},{"location":"typerig.gui.widgets.html#insertstretch","text":"typerig.gui.widgets.TRMsgSimple.insertStretch = unbound qt slot insertStretch of QVBoxLayout type","title":"insertStretch"},{"location":"typerig.gui.widgets.html#insertwidget","text":"typerig.gui.widgets.TRMsgSimple.insertWidget = unbound qt slot insertWidget of QVBoxLayout type","title":"insertWidget"},{"location":"typerig.gui.widgets.html#installeventfilter","text":"typerig.gui.widgets.TRMsgSimple.installEventFilter = unbound qt slot installEventFilter of QVBoxLayout type","title":"installEventFilter"},{"location":"typerig.gui.widgets.html#invalidate","text":"typerig.gui.widgets.TRMsgSimple.invalidate = unbound qt slot py_q_invalidate of QVBoxLayout type","title":"invalidate"},{"location":"typerig.gui.widgets.html#isempty","text":"typerig.gui.widgets.TRMsgSimple.isEmpty = unbound qt slot py_q_isEmpty of QVBoxLayout type","title":"isEmpty"},{"location":"typerig.gui.widgets.html#isenabled","text":"typerig.gui.widgets.TRMsgSimple.isEnabled = unbound qt slot isEnabled of QVBoxLayout type","title":"isEnabled"},{"location":"typerig.gui.widgets.html#issignalconnected","text":"typerig.gui.widgets.TRMsgSimple.isSignalConnected = unbound qt slot isSignalConnected of QVBoxLayout type","title":"isSignalConnected"},{"location":"typerig.gui.widgets.html#iswidgettype","text":"typerig.gui.widgets.TRMsgSimple.isWidgetType = unbound qt slot isWidgetType of QVBoxLayout type","title":"isWidgetType"},{"location":"typerig.gui.widgets.html#iswindowtype","text":"typerig.gui.widgets.TRMsgSimple.isWindowType = unbound qt slot isWindowType of QVBoxLayout type","title":"isWindowType"},{"location":"typerig.gui.widgets.html#itemat","text":"typerig.gui.widgets.TRMsgSimple.itemAt = unbound qt slot py_q_itemAt of QVBoxLayout type","title":"itemAt"},{"location":"typerig.gui.widgets.html#killtimer","text":"typerig.gui.widgets.TRMsgSimple.killTimer = unbound qt slot killTimer of QVBoxLayout type","title":"killTimer"},{"location":"typerig.gui.widgets.html#layout","text":"typerig.gui.widgets.TRMsgSimple.layout = unbound qt slot py_q_layout of QVBoxLayout type","title":"layout"},{"location":"typerig.gui.widgets.html#maximumsize","text":"typerig.gui.widgets.TRMsgSimple.maximumSize = unbound qt slot py_q_maximumSize of QVBoxLayout type","title":"maximumSize"},{"location":"typerig.gui.widgets.html#menubar","text":"typerig.gui.widgets.TRMsgSimple.menuBar = unbound qt slot menuBar of QVBoxLayout type","title":"menuBar"},{"location":"typerig.gui.widgets.html#metaobject","text":"typerig.gui.widgets.TRMsgSimple.metaObject = unbound qt slot metaObject of QVBoxLayout type","title":"metaObject"},{"location":"typerig.gui.widgets.html#minimumheightforwidth","text":"typerig.gui.widgets.TRMsgSimple.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QVBoxLayout type","title":"minimumHeightForWidth"},{"location":"typerig.gui.widgets.html#minimumsize","text":"typerig.gui.widgets.TRMsgSimple.minimumSize = unbound qt slot py_q_minimumSize of QVBoxLayout type","title":"minimumSize"},{"location":"typerig.gui.widgets.html#movetothread","text":"typerig.gui.widgets.TRMsgSimple.moveToThread = unbound qt slot moveToThread of QVBoxLayout type","title":"moveToThread"},{"location":"typerig.gui.widgets.html#parent","text":"typerig.gui.widgets.TRMsgSimple.parent = unbound qt slot parent of QVBoxLayout type","title":"parent"},{"location":"typerig.gui.widgets.html#parentwidget","text":"typerig.gui.widgets.TRMsgSimple.parentWidget = unbound qt slot parentWidget of QVBoxLayout type","title":"parentWidget"},{"location":"typerig.gui.widgets.html#property","text":"typerig.gui.widgets.TRMsgSimple.property = unbound qt slot property of QVBoxLayout type","title":"property"},{"location":"typerig.gui.widgets.html#removeeventfilter","text":"typerig.gui.widgets.TRMsgSimple.removeEventFilter = unbound qt slot removeEventFilter of QVBoxLayout type","title":"removeEventFilter"},{"location":"typerig.gui.widgets.html#removeitem","text":"typerig.gui.widgets.TRMsgSimple.removeItem = unbound qt slot removeItem of QVBoxLayout type","title":"removeItem"},{"location":"typerig.gui.widgets.html#removewidget","text":"typerig.gui.widgets.TRMsgSimple.removeWidget = unbound qt slot removeWidget of QVBoxLayout type","title":"removeWidget"},{"location":"typerig.gui.widgets.html#replacewidget","text":"typerig.gui.widgets.TRMsgSimple.replaceWidget = unbound qt slot replaceWidget of QVBoxLayout type","title":"replaceWidget"},{"location":"typerig.gui.widgets.html#sender","text":"typerig.gui.widgets.TRMsgSimple.sender = unbound qt slot sender of QVBoxLayout type","title":"sender"},{"location":"typerig.gui.widgets.html#sendersignalindex","text":"typerig.gui.widgets.TRMsgSimple.senderSignalIndex = unbound qt slot senderSignalIndex of QVBoxLayout type","title":"senderSignalIndex"},{"location":"typerig.gui.widgets.html#setalignment","text":"typerig.gui.widgets.TRMsgSimple.setAlignment = unbound qt slot setAlignment of QVBoxLayout type","title":"setAlignment"},{"location":"typerig.gui.widgets.html#setcontentsmargins","text":"typerig.gui.widgets.TRMsgSimple.setContentsMargins = unbound qt slot setContentsMargins of QVBoxLayout type","title":"setContentsMargins"},{"location":"typerig.gui.widgets.html#setdirection","text":"typerig.gui.widgets.TRMsgSimple.setDirection = unbound qt slot setDirection of QVBoxLayout type","title":"setDirection"},{"location":"typerig.gui.widgets.html#setenabled","text":"typerig.gui.widgets.TRMsgSimple.setEnabled = unbound qt slot setEnabled of QVBoxLayout type","title":"setEnabled"},{"location":"typerig.gui.widgets.html#setgeometry","text":"typerig.gui.widgets.TRMsgSimple.setGeometry = unbound qt slot py_q_setGeometry of QVBoxLayout type","title":"setGeometry"},{"location":"typerig.gui.widgets.html#setmargin","text":"typerig.gui.widgets.TRMsgSimple.setMargin = unbound qt slot setMargin of QVBoxLayout type","title":"setMargin"},{"location":"typerig.gui.widgets.html#setmenubar","text":"typerig.gui.widgets.TRMsgSimple.setMenuBar = unbound qt slot setMenuBar of QVBoxLayout type","title":"setMenuBar"},{"location":"typerig.gui.widgets.html#setobjectname","text":"typerig.gui.widgets.TRMsgSimple.setObjectName = unbound qt slot setObjectName of QVBoxLayout type","title":"setObjectName"},{"location":"typerig.gui.widgets.html#setparent","text":"typerig.gui.widgets.TRMsgSimple.setParent = unbound qt slot setParent of QVBoxLayout type","title":"setParent"},{"location":"typerig.gui.widgets.html#setproperty","text":"typerig.gui.widgets.TRMsgSimple.setProperty = unbound qt slot setProperty of QVBoxLayout type","title":"setProperty"},{"location":"typerig.gui.widgets.html#setsizeconstraint","text":"typerig.gui.widgets.TRMsgSimple.setSizeConstraint = unbound qt slot setSizeConstraint of QVBoxLayout type","title":"setSizeConstraint"},{"location":"typerig.gui.widgets.html#setspacing","text":"typerig.gui.widgets.TRMsgSimple.setSpacing = unbound qt slot setSpacing of QVBoxLayout type","title":"setSpacing"},{"location":"typerig.gui.widgets.html#setstretch","text":"typerig.gui.widgets.TRMsgSimple.setStretch = unbound qt slot setStretch of QVBoxLayout type","title":"setStretch"},{"location":"typerig.gui.widgets.html#setstretchfactor","text":"typerig.gui.widgets.TRMsgSimple.setStretchFactor = unbound qt slot setStretchFactor of QVBoxLayout type","title":"setStretchFactor"},{"location":"typerig.gui.widgets.html#signalsblocked","text":"typerig.gui.widgets.TRMsgSimple.signalsBlocked = unbound qt slot signalsBlocked of QVBoxLayout type","title":"signalsBlocked"},{"location":"typerig.gui.widgets.html#sizehint","text":"typerig.gui.widgets.TRMsgSimple.sizeHint = unbound qt slot py_q_sizeHint of QVBoxLayout type","title":"sizeHint"},{"location":"typerig.gui.widgets.html#spaceritem","text":"typerig.gui.widgets.TRMsgSimple.spacerItem = unbound qt slot py_q_spacerItem of QVBoxLayout type","title":"spacerItem"},{"location":"typerig.gui.widgets.html#starttimer","text":"typerig.gui.widgets.TRMsgSimple.startTimer = unbound qt slot startTimer of QVBoxLayout type","title":"startTimer"},{"location":"typerig.gui.widgets.html#stretch","text":"typerig.gui.widgets.TRMsgSimple.stretch = unbound qt slot stretch of QVBoxLayout type","title":"stretch"},{"location":"typerig.gui.widgets.html#takeat","text":"typerig.gui.widgets.TRMsgSimple.takeAt = unbound qt slot py_q_takeAt of QVBoxLayout type","title":"takeAt"},{"location":"typerig.gui.widgets.html#thread","text":"typerig.gui.widgets.TRMsgSimple.thread = unbound qt slot thread of QVBoxLayout type","title":"thread"},{"location":"typerig.gui.widgets.html#timerevent","text":"typerig.gui.widgets.TRMsgSimple.timerEvent = unbound qt slot py_q_timerEvent of QVBoxLayout type","title":"timerEvent"},{"location":"typerig.gui.widgets.html#totalheightforwidth","text":"typerig.gui.widgets.TRMsgSimple.totalHeightForWidth = unbound qt slot totalHeightForWidth of QVBoxLayout type","title":"totalHeightForWidth"},{"location":"typerig.gui.widgets.html#totalmaximumsize","text":"typerig.gui.widgets.TRMsgSimple.totalMaximumSize = unbound qt slot totalMaximumSize of QVBoxLayout type","title":"totalMaximumSize"},{"location":"typerig.gui.widgets.html#totalminimumsize","text":"typerig.gui.widgets.TRMsgSimple.totalMinimumSize = unbound qt slot totalMinimumSize of QVBoxLayout type","title":"totalMinimumSize"},{"location":"typerig.gui.widgets.html#totalsizehint","text":"typerig.gui.widgets.TRMsgSimple.totalSizeHint = unbound qt slot totalSizeHint of QVBoxLayout type","title":"totalSizeHint"},{"location":"typerig.gui.widgets.html#tr","text":"typerig.gui.widgets.TRMsgSimple.tr = unbound qt slot tr of QVBoxLayout type","title":"tr"},{"location":"typerig.gui.widgets.html#update","text":"typerig.gui.widgets.TRMsgSimple.update = unbound qt slot update of QVBoxLayout type","title":"update"},{"location":"typerig.gui.widgets.html#widget","text":"typerig.gui.widgets.TRMsgSimple.widget = unbound qt slot py_q_widget of QVBoxLayout type","title":"widget"},{"location":"typerig.gui.widgets.html#widgetevent","text":"typerig.gui.widgets.TRMsgSimple.widgetEvent = unbound qt slot widgetEvent of QVBoxLayout type","title":"widgetEvent"},{"location":"typerig.gui.widgets.html#tr2fielddlg","text":"","title":"TR2FieldDLG"},{"location":"typerig.gui.widgets.html#accept","text":"typerig.gui.widgets.TR2FieldDLG.accept = unbound qt slot py_q_accept of QDialog type","title":"accept"},{"location":"typerig.gui.widgets.html#actionevent","text":"typerig.gui.widgets.TR2FieldDLG.actionEvent = unbound qt slot py_q_actionEvent of QDialog type","title":"actionEvent"},{"location":"typerig.gui.widgets.html#actions","text":"typerig.gui.widgets.TR2FieldDLG.actions = unbound qt slot actions of QDialog type","title":"actions"},{"location":"typerig.gui.widgets.html#activatewindow","text":"typerig.gui.widgets.TR2FieldDLG.activateWindow = unbound qt slot activateWindow of QDialog type","title":"activateWindow"},{"location":"typerig.gui.widgets.html#addaction","text":"typerig.gui.widgets.TR2FieldDLG.addAction = unbound qt slot addAction of QDialog type","title":"addAction"},{"location":"typerig.gui.widgets.html#addactions","text":"typerig.gui.widgets.TR2FieldDLG.addActions = unbound qt slot addActions of QDialog type","title":"addActions"},{"location":"typerig.gui.widgets.html#adjustposition","text":"typerig.gui.widgets.TR2FieldDLG.adjustPosition = unbound qt slot adjustPosition of QDialog type","title":"adjustPosition"},{"location":"typerig.gui.widgets.html#adjustsize","text":"typerig.gui.widgets.TR2FieldDLG.adjustSize = unbound qt slot adjustSize of QDialog type","title":"adjustSize"},{"location":"typerig.gui.widgets.html#backgroundrole","text":"typerig.gui.widgets.TR2FieldDLG.backgroundRole = unbound qt slot backgroundRole of QDialog type","title":"backgroundRole"},{"location":"typerig.gui.widgets.html#backingstore","text":"typerig.gui.widgets.TR2FieldDLG.backingStore = unbound qt slot backingStore of QDialog type","title":"backingStore"},{"location":"typerig.gui.widgets.html#blocksignals_1","text":"typerig.gui.widgets.TR2FieldDLG.blockSignals = unbound qt slot blockSignals of QDialog type","title":"blockSignals"},{"location":"typerig.gui.widgets.html#changeevent","text":"typerig.gui.widgets.TR2FieldDLG.changeEvent = unbound qt slot py_q_changeEvent of QDialog type","title":"changeEvent"},{"location":"typerig.gui.widgets.html#childat","text":"typerig.gui.widgets.TR2FieldDLG.childAt = unbound qt slot childAt of QDialog type","title":"childAt"},{"location":"typerig.gui.widgets.html#childevent_1","text":"typerig.gui.widgets.TR2FieldDLG.childEvent = unbound qt slot py_q_childEvent of QDialog type","title":"childEvent"},{"location":"typerig.gui.widgets.html#children_1","text":"typerig.gui.widgets.TR2FieldDLG.children = unbound qt slot children of QDialog type","title":"children"},{"location":"typerig.gui.widgets.html#classname_1","text":"typerig.gui.widgets.TR2FieldDLG.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.widgets.html#clearfocus","text":"typerig.gui.widgets.TR2FieldDLG.clearFocus = unbound qt slot clearFocus of QDialog type","title":"clearFocus"},{"location":"typerig.gui.widgets.html#clearmask","text":"typerig.gui.widgets.TR2FieldDLG.clearMask = unbound qt slot clearMask of QDialog type","title":"clearMask"},{"location":"typerig.gui.widgets.html#close","text":"typerig.gui.widgets.TR2FieldDLG.close = unbound qt slot close of QDialog type","title":"close"},{"location":"typerig.gui.widgets.html#closeevent","text":"typerig.gui.widgets.TR2FieldDLG.closeEvent = unbound qt slot py_q_closeEvent of QDialog type","title":"closeEvent"},{"location":"typerig.gui.widgets.html#colorcount","text":"typerig.gui.widgets.TR2FieldDLG.colorCount = unbound qt slot colorCount of QDialog type","title":"colorCount"},{"location":"typerig.gui.widgets.html#connect_1","text":"typerig.gui.widgets.TR2FieldDLG.connect = unbound qt slot connect of QDialog type","title":"connect"},{"location":"typerig.gui.widgets.html#contentsmargins_1","text":"typerig.gui.widgets.TR2FieldDLG.contentsMargins = unbound qt slot contentsMargins of QDialog type","title":"contentsMargins"},{"location":"typerig.gui.widgets.html#contentsrect_1","text":"typerig.gui.widgets.TR2FieldDLG.contentsRect = unbound qt slot contentsRect of QDialog type","title":"contentsRect"},{"location":"typerig.gui.widgets.html#contextmenuevent","text":"typerig.gui.widgets.TR2FieldDLG.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QDialog type","title":"contextMenuEvent"},{"location":"typerig.gui.widgets.html#createwindowcontainer","text":"typerig.gui.widgets.TR2FieldDLG.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QDialog type","title":"createWindowContainer"},{"location":"typerig.gui.widgets.html#createwinid","text":"typerig.gui.widgets.TR2FieldDLG.createWinId = unbound qt slot createWinId of QDialog type","title":"createWinId"},{"location":"typerig.gui.widgets.html#customevent_1","text":"typerig.gui.widgets.TR2FieldDLG.customEvent = unbound qt slot py_q_customEvent of QDialog type","title":"customEvent"},{"location":"typerig.gui.widgets.html#delete_1","text":"typerig.gui.widgets.TR2FieldDLG.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.widgets.html#deletelater_1","text":"typerig.gui.widgets.TR2FieldDLG.deleteLater = unbound qt slot deleteLater of QDialog type","title":"deleteLater"},{"location":"typerig.gui.widgets.html#depth","text":"typerig.gui.widgets.TR2FieldDLG.depth = unbound qt slot depth of QDialog type","title":"depth"},{"location":"typerig.gui.widgets.html#destroy","text":"typerig.gui.widgets.TR2FieldDLG.destroy = unbound qt slot destroy of QDialog type","title":"destroy"},{"location":"typerig.gui.widgets.html#devicepixelratio","text":"typerig.gui.widgets.TR2FieldDLG.devicePixelRatio = unbound qt slot devicePixelRatio of QDialog type","title":"devicePixelRatio"},{"location":"typerig.gui.widgets.html#devicepixelratiof","text":"typerig.gui.widgets.TR2FieldDLG.devicePixelRatioF = unbound qt slot devicePixelRatioF of QDialog type","title":"devicePixelRatioF"},{"location":"typerig.gui.widgets.html#devicepixelratiofscale","text":"typerig.gui.widgets.TR2FieldDLG.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QDialog type","title":"devicePixelRatioFScale"},{"location":"typerig.gui.widgets.html#devtype","text":"typerig.gui.widgets.TR2FieldDLG.devType = unbound qt slot py_q_devType of QDialog type","title":"devType"},{"location":"typerig.gui.widgets.html#disconnect_1","text":"typerig.gui.widgets.TR2FieldDLG.disconnect = unbound qt slot disconnect of QDialog type","title":"disconnect"},{"location":"typerig.gui.widgets.html#done","text":"typerig.gui.widgets.TR2FieldDLG.done = unbound qt slot py_q_done of QDialog type","title":"done"},{"location":"typerig.gui.widgets.html#dragenterevent","text":"typerig.gui.widgets.TR2FieldDLG.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QDialog type","title":"dragEnterEvent"},{"location":"typerig.gui.widgets.html#dragleaveevent","text":"typerig.gui.widgets.TR2FieldDLG.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QDialog type","title":"dragLeaveEvent"},{"location":"typerig.gui.widgets.html#dragmoveevent","text":"typerig.gui.widgets.TR2FieldDLG.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QDialog type","title":"dragMoveEvent"},{"location":"typerig.gui.widgets.html#dropevent","text":"typerig.gui.widgets.TR2FieldDLG.dropEvent = unbound qt slot py_q_dropEvent of QDialog type","title":"dropEvent"},{"location":"typerig.gui.widgets.html#dumpobjectinfo_1","text":"typerig.gui.widgets.TR2FieldDLG.dumpObjectInfo = unbound qt slot dumpObjectInfo of QDialog type","title":"dumpObjectInfo"},{"location":"typerig.gui.widgets.html#dumpobjecttree_1","text":"typerig.gui.widgets.TR2FieldDLG.dumpObjectTree = unbound qt slot dumpObjectTree of QDialog type","title":"dumpObjectTree"},{"location":"typerig.gui.widgets.html#dynamicpropertynames_1","text":"typerig.gui.widgets.TR2FieldDLG.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QDialog type","title":"dynamicPropertyNames"},{"location":"typerig.gui.widgets.html#effectivewinid","text":"typerig.gui.widgets.TR2FieldDLG.effectiveWinId = unbound qt slot effectiveWinId of QDialog type","title":"effectiveWinId"},{"location":"typerig.gui.widgets.html#ensurepolished","text":"typerig.gui.widgets.TR2FieldDLG.ensurePolished = unbound qt slot ensurePolished of QDialog type","title":"ensurePolished"},{"location":"typerig.gui.widgets.html#enterevent","text":"typerig.gui.widgets.TR2FieldDLG.enterEvent = unbound qt slot py_q_enterEvent of QDialog type","title":"enterEvent"},{"location":"typerig.gui.widgets.html#event_1","text":"typerig.gui.widgets.TR2FieldDLG.event = unbound qt slot py_q_event of QDialog type","title":"event"},{"location":"typerig.gui.widgets.html#eventfilter_1","text":"typerig.gui.widgets.TR2FieldDLG.eventFilter = unbound qt slot py_q_eventFilter of QDialog type","title":"eventFilter"},{"location":"typerig.gui.widgets.html#exec","text":"typerig.gui.widgets.TR2FieldDLG.exec = unbound qt slot py_q_exec of QDialog type","title":"exec"},{"location":"typerig.gui.widgets.html#findchild_1","text":"typerig.gui.widgets.TR2FieldDLG.findChild = unbound qt slot findChild of QDialog type","title":"findChild"},{"location":"typerig.gui.widgets.html#findchildren_1","text":"typerig.gui.widgets.TR2FieldDLG.findChildren = unbound qt slot findChildren of QDialog type","title":"findChildren"},{"location":"typerig.gui.widgets.html#focusinevent","text":"typerig.gui.widgets.TR2FieldDLG.focusInEvent = unbound qt slot py_q_focusInEvent of QDialog type","title":"focusInEvent"},{"location":"typerig.gui.widgets.html#focusnextchild","text":"typerig.gui.widgets.TR2FieldDLG.focusNextChild = unbound qt slot focusNextChild of QDialog type","title":"focusNextChild"},{"location":"typerig.gui.widgets.html#focusnextprevchild","text":"typerig.gui.widgets.TR2FieldDLG.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QDialog type","title":"focusNextPrevChild"},{"location":"typerig.gui.widgets.html#focusoutevent","text":"typerig.gui.widgets.TR2FieldDLG.focusOutEvent = unbound qt slot py_q_focusOutEvent of QDialog type","title":"focusOutEvent"},{"location":"typerig.gui.widgets.html#focuspreviouschild","text":"typerig.gui.widgets.TR2FieldDLG.focusPreviousChild = unbound qt slot focusPreviousChild of QDialog type","title":"focusPreviousChild"},{"location":"typerig.gui.widgets.html#focusproxy","text":"typerig.gui.widgets.TR2FieldDLG.focusProxy = unbound qt slot focusProxy of QDialog type","title":"focusProxy"},{"location":"typerig.gui.widgets.html#focuswidget","text":"typerig.gui.widgets.TR2FieldDLG.focusWidget = unbound qt slot focusWidget of QDialog type","title":"focusWidget"},{"location":"typerig.gui.widgets.html#foregroundrole","text":"typerig.gui.widgets.TR2FieldDLG.foregroundRole = unbound qt slot foregroundRole of QDialog type","title":"foregroundRole"},{"location":"typerig.gui.widgets.html#grab","text":"typerig.gui.widgets.TR2FieldDLG.grab = unbound qt slot grab of QDialog type","title":"grab"},{"location":"typerig.gui.widgets.html#grabgesture","text":"typerig.gui.widgets.TR2FieldDLG.grabGesture = unbound qt slot grabGesture of QDialog type","title":"grabGesture"},{"location":"typerig.gui.widgets.html#grabkeyboard","text":"typerig.gui.widgets.TR2FieldDLG.grabKeyboard = unbound qt slot grabKeyboard of QDialog type","title":"grabKeyboard"},{"location":"typerig.gui.widgets.html#grabmouse","text":"typerig.gui.widgets.TR2FieldDLG.grabMouse = unbound qt slot grabMouse of QDialog type","title":"grabMouse"},{"location":"typerig.gui.widgets.html#grabshortcut","text":"typerig.gui.widgets.TR2FieldDLG.grabShortcut = unbound qt slot grabShortcut of QDialog type","title":"grabShortcut"},{"location":"typerig.gui.widgets.html#graphicseffect","text":"typerig.gui.widgets.TR2FieldDLG.graphicsEffect = unbound qt slot graphicsEffect of QDialog type","title":"graphicsEffect"},{"location":"typerig.gui.widgets.html#graphicsproxywidget","text":"typerig.gui.widgets.TR2FieldDLG.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QDialog type","title":"graphicsProxyWidget"},{"location":"typerig.gui.widgets.html#hasfocus","text":"typerig.gui.widgets.TR2FieldDLG.hasFocus = unbound qt slot hasFocus of QDialog type","title":"hasFocus"},{"location":"typerig.gui.widgets.html#hasheightforwidth_1","text":"typerig.gui.widgets.TR2FieldDLG.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QDialog type","title":"hasHeightForWidth"},{"location":"typerig.gui.widgets.html#hasmousetracking","text":"typerig.gui.widgets.TR2FieldDLG.hasMouseTracking = unbound qt slot hasMouseTracking of QDialog type","title":"hasMouseTracking"},{"location":"typerig.gui.widgets.html#heightforwidth_1","text":"typerig.gui.widgets.TR2FieldDLG.heightForWidth = unbound qt slot py_q_heightForWidth of QDialog type","title":"heightForWidth"},{"location":"typerig.gui.widgets.html#heightmm","text":"typerig.gui.widgets.TR2FieldDLG.heightMM = unbound qt slot heightMM of QDialog type","title":"heightMM"},{"location":"typerig.gui.widgets.html#help_1","text":"typerig.gui.widgets.TR2FieldDLG.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.widgets.html#hide","text":"typerig.gui.widgets.TR2FieldDLG.hide = unbound qt slot hide of QDialog type","title":"hide"},{"location":"typerig.gui.widgets.html#hideevent","text":"typerig.gui.widgets.TR2FieldDLG.hideEvent = unbound qt slot py_q_hideEvent of QDialog type","title":"hideEvent"},{"location":"typerig.gui.widgets.html#inherits_1","text":"typerig.gui.widgets.TR2FieldDLG.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.widgets.html#initpainter","text":"typerig.gui.widgets.TR2FieldDLG.initPainter = unbound qt slot py_q_initPainter of QDialog type","title":"initPainter"},{"location":"typerig.gui.widgets.html#inputmethodevent","text":"typerig.gui.widgets.TR2FieldDLG.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QDialog type","title":"inputMethodEvent"},{"location":"typerig.gui.widgets.html#inputmethodquery","text":"typerig.gui.widgets.TR2FieldDLG.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QDialog type","title":"inputMethodQuery"},{"location":"typerig.gui.widgets.html#insertaction","text":"typerig.gui.widgets.TR2FieldDLG.insertAction = unbound qt slot insertAction of QDialog type","title":"insertAction"},{"location":"typerig.gui.widgets.html#insertactions","text":"typerig.gui.widgets.TR2FieldDLG.insertActions = unbound qt slot insertActions of QDialog type","title":"insertActions"},{"location":"typerig.gui.widgets.html#installeventfilter_1","text":"typerig.gui.widgets.TR2FieldDLG.installEventFilter = unbound qt slot installEventFilter of QDialog type","title":"installEventFilter"},{"location":"typerig.gui.widgets.html#isancestorof","text":"typerig.gui.widgets.TR2FieldDLG.isAncestorOf = unbound qt slot isAncestorOf of QDialog type","title":"isAncestorOf"},{"location":"typerig.gui.widgets.html#isenabled_1","text":"typerig.gui.widgets.TR2FieldDLG.isEnabled = unbound qt slot isEnabled of QDialog type","title":"isEnabled"},{"location":"typerig.gui.widgets.html#isenabledto","text":"typerig.gui.widgets.TR2FieldDLG.isEnabledTo = unbound qt slot isEnabledTo of QDialog type","title":"isEnabledTo"},{"location":"typerig.gui.widgets.html#isfullscreen","text":"typerig.gui.widgets.TR2FieldDLG.isFullScreen = unbound qt slot isFullScreen of QDialog type","title":"isFullScreen"},{"location":"typerig.gui.widgets.html#ishidden","text":"typerig.gui.widgets.TR2FieldDLG.isHidden = unbound qt slot isHidden of QDialog type","title":"isHidden"},{"location":"typerig.gui.widgets.html#islefttoright","text":"typerig.gui.widgets.TR2FieldDLG.isLeftToRight = unbound qt slot isLeftToRight of QDialog type","title":"isLeftToRight"},{"location":"typerig.gui.widgets.html#ismaximized","text":"typerig.gui.widgets.TR2FieldDLG.isMaximized = unbound qt slot isMaximized of QDialog type","title":"isMaximized"},{"location":"typerig.gui.widgets.html#isminimized","text":"typerig.gui.widgets.TR2FieldDLG.isMinimized = unbound qt slot isMinimized of QDialog type","title":"isMinimized"},{"location":"typerig.gui.widgets.html#ismodal","text":"typerig.gui.widgets.TR2FieldDLG.isModal = unbound qt slot isModal of QDialog type","title":"isModal"},{"location":"typerig.gui.widgets.html#isrighttoleft","text":"typerig.gui.widgets.TR2FieldDLG.isRightToLeft = unbound qt slot isRightToLeft of QDialog type","title":"isRightToLeft"},{"location":"typerig.gui.widgets.html#issignalconnected_1","text":"typerig.gui.widgets.TR2FieldDLG.isSignalConnected = unbound qt slot isSignalConnected of QDialog type","title":"isSignalConnected"},{"location":"typerig.gui.widgets.html#issizegripenabled","text":"typerig.gui.widgets.TR2FieldDLG.isSizeGripEnabled = unbound qt slot isSizeGripEnabled of QDialog type","title":"isSizeGripEnabled"},{"location":"typerig.gui.widgets.html#isvisible","text":"typerig.gui.widgets.TR2FieldDLG.isVisible = unbound qt slot isVisible of QDialog type","title":"isVisible"},{"location":"typerig.gui.widgets.html#isvisibleto","text":"typerig.gui.widgets.TR2FieldDLG.isVisibleTo = unbound qt slot isVisibleTo of QDialog type","title":"isVisibleTo"},{"location":"typerig.gui.widgets.html#iswidgettype_1","text":"typerig.gui.widgets.TR2FieldDLG.isWidgetType = unbound qt slot isWidgetType of QDialog type","title":"isWidgetType"},{"location":"typerig.gui.widgets.html#iswindow","text":"typerig.gui.widgets.TR2FieldDLG.isWindow = unbound qt slot isWindow of QDialog type","title":"isWindow"},{"location":"typerig.gui.widgets.html#iswindowmodified","text":"typerig.gui.widgets.TR2FieldDLG.isWindowModified = unbound qt slot isWindowModified of QDialog type","title":"isWindowModified"},{"location":"typerig.gui.widgets.html#iswindowtype_1","text":"typerig.gui.widgets.TR2FieldDLG.isWindowType = unbound qt slot isWindowType of QDialog type","title":"isWindowType"},{"location":"typerig.gui.widgets.html#keyboardgrabber","text":"typerig.gui.widgets.TR2FieldDLG.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QDialog type","title":"keyboardGrabber"},{"location":"typerig.gui.widgets.html#keypressevent","text":"typerig.gui.widgets.TR2FieldDLG.keyPressEvent = unbound qt slot py_q_keyPressEvent of QDialog type","title":"keyPressEvent"},{"location":"typerig.gui.widgets.html#keyreleaseevent","text":"typerig.gui.widgets.TR2FieldDLG.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QDialog type","title":"keyReleaseEvent"},{"location":"typerig.gui.widgets.html#killtimer_1","text":"typerig.gui.widgets.TR2FieldDLG.killTimer = unbound qt slot killTimer of QDialog type","title":"killTimer"},{"location":"typerig.gui.widgets.html#layout_1","text":"typerig.gui.widgets.TR2FieldDLG.layout = unbound qt slot layout of QDialog type","title":"layout"},{"location":"typerig.gui.widgets.html#leaveevent","text":"typerig.gui.widgets.TR2FieldDLG.leaveEvent = unbound qt slot py_q_leaveEvent of QDialog type","title":"leaveEvent"},{"location":"typerig.gui.widgets.html#logicaldpix","text":"typerig.gui.widgets.TR2FieldDLG.logicalDpiX = unbound qt slot logicalDpiX of QDialog type","title":"logicalDpiX"},{"location":"typerig.gui.widgets.html#logicaldpiy","text":"typerig.gui.widgets.TR2FieldDLG.logicalDpiY = unbound qt slot logicalDpiY of QDialog type","title":"logicalDpiY"},{"location":"typerig.gui.widgets.html#lower","text":"typerig.gui.widgets.TR2FieldDLG.lower = unbound qt slot lower of QDialog type","title":"lower"},{"location":"typerig.gui.widgets.html#mapfrom","text":"typerig.gui.widgets.TR2FieldDLG.mapFrom = unbound qt slot mapFrom of QDialog type","title":"mapFrom"},{"location":"typerig.gui.widgets.html#mapfromglobal","text":"typerig.gui.widgets.TR2FieldDLG.mapFromGlobal = unbound qt slot mapFromGlobal of QDialog type","title":"mapFromGlobal"},{"location":"typerig.gui.widgets.html#mapfromparent","text":"typerig.gui.widgets.TR2FieldDLG.mapFromParent = unbound qt slot mapFromParent of QDialog type","title":"mapFromParent"},{"location":"typerig.gui.widgets.html#mapto","text":"typerig.gui.widgets.TR2FieldDLG.mapTo = unbound qt slot mapTo of QDialog type","title":"mapTo"},{"location":"typerig.gui.widgets.html#maptoglobal","text":"typerig.gui.widgets.TR2FieldDLG.mapToGlobal = unbound qt slot mapToGlobal of QDialog type","title":"mapToGlobal"},{"location":"typerig.gui.widgets.html#maptoparent","text":"typerig.gui.widgets.TR2FieldDLG.mapToParent = unbound qt slot mapToParent of QDialog type","title":"mapToParent"},{"location":"typerig.gui.widgets.html#mask","text":"typerig.gui.widgets.TR2FieldDLG.mask = unbound qt slot mask of QDialog type","title":"mask"},{"location":"typerig.gui.widgets.html#metaobject_1","text":"typerig.gui.widgets.TR2FieldDLG.metaObject = unbound qt slot metaObject of QDialog type","title":"metaObject"},{"location":"typerig.gui.widgets.html#metric","text":"typerig.gui.widgets.TR2FieldDLG.metric = unbound qt slot py_q_metric of QDialog type","title":"metric"},{"location":"typerig.gui.widgets.html#mousedoubleclickevent","text":"typerig.gui.widgets.TR2FieldDLG.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QDialog type","title":"mouseDoubleClickEvent"},{"location":"typerig.gui.widgets.html#mousegrabber","text":"typerig.gui.widgets.TR2FieldDLG.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QDialog type","title":"mouseGrabber"},{"location":"typerig.gui.widgets.html#mousemoveevent","text":"typerig.gui.widgets.TR2FieldDLG.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QDialog type","title":"mouseMoveEvent"},{"location":"typerig.gui.widgets.html#mousepressevent","text":"typerig.gui.widgets.TR2FieldDLG.mousePressEvent = unbound qt slot py_q_mousePressEvent of QDialog type","title":"mousePressEvent"},{"location":"typerig.gui.widgets.html#mousereleaseevent","text":"typerig.gui.widgets.TR2FieldDLG.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QDialog type","title":"mouseReleaseEvent"},{"location":"typerig.gui.widgets.html#move","text":"typerig.gui.widgets.TR2FieldDLG.move = unbound qt slot move of QDialog type","title":"move"},{"location":"typerig.gui.widgets.html#moveevent","text":"typerig.gui.widgets.TR2FieldDLG.moveEvent = unbound qt slot py_q_moveEvent of QDialog type","title":"moveEvent"},{"location":"typerig.gui.widgets.html#movetothread_1","text":"typerig.gui.widgets.TR2FieldDLG.moveToThread = unbound qt slot moveToThread of QDialog type","title":"moveToThread"},{"location":"typerig.gui.widgets.html#nativeevent","text":"typerig.gui.widgets.TR2FieldDLG.nativeEvent = unbound qt slot py_q_nativeEvent of QDialog type","title":"nativeEvent"},{"location":"typerig.gui.widgets.html#nativeparentwidget","text":"typerig.gui.widgets.TR2FieldDLG.nativeParentWidget = unbound qt slot nativeParentWidget of QDialog type","title":"nativeParentWidget"},{"location":"typerig.gui.widgets.html#nextinfocuschain","text":"typerig.gui.widgets.TR2FieldDLG.nextInFocusChain = unbound qt slot nextInFocusChain of QDialog type","title":"nextInFocusChain"},{"location":"typerig.gui.widgets.html#open","text":"typerig.gui.widgets.TR2FieldDLG.open = unbound qt slot py_q_open of QDialog type","title":"open"},{"location":"typerig.gui.widgets.html#overridewindowflags","text":"typerig.gui.widgets.TR2FieldDLG.overrideWindowFlags = unbound qt slot overrideWindowFlags of QDialog type","title":"overrideWindowFlags"},{"location":"typerig.gui.widgets.html#overridewindowstate","text":"typerig.gui.widgets.TR2FieldDLG.overrideWindowState = unbound qt slot overrideWindowState of QDialog type","title":"overrideWindowState"},{"location":"typerig.gui.widgets.html#paintengine","text":"typerig.gui.widgets.TR2FieldDLG.paintEngine = unbound qt slot py_q_paintEngine of QDialog type","title":"paintEngine"},{"location":"typerig.gui.widgets.html#paintevent","text":"typerig.gui.widgets.TR2FieldDLG.paintEvent = unbound qt slot py_q_paintEvent of QDialog type","title":"paintEvent"},{"location":"typerig.gui.widgets.html#paintingactive","text":"typerig.gui.widgets.TR2FieldDLG.paintingActive = unbound qt slot paintingActive of QDialog type","title":"paintingActive"},{"location":"typerig.gui.widgets.html#parent_1","text":"typerig.gui.widgets.TR2FieldDLG.parent = unbound qt slot parent of QDialog type","title":"parent"},{"location":"typerig.gui.widgets.html#parentwidget_1","text":"typerig.gui.widgets.TR2FieldDLG.parentWidget = unbound qt slot parentWidget of QDialog type","title":"parentWidget"},{"location":"typerig.gui.widgets.html#physicaldpix","text":"typerig.gui.widgets.TR2FieldDLG.physicalDpiX = unbound qt slot physicalDpiX of QDialog type","title":"physicalDpiX"},{"location":"typerig.gui.widgets.html#physicaldpiy","text":"typerig.gui.widgets.TR2FieldDLG.physicalDpiY = unbound qt slot physicalDpiY of QDialog type","title":"physicalDpiY"},{"location":"typerig.gui.widgets.html#previousinfocuschain","text":"typerig.gui.widgets.TR2FieldDLG.previousInFocusChain = unbound qt slot previousInFocusChain of QDialog type","title":"previousInFocusChain"},{"location":"typerig.gui.widgets.html#property_1","text":"typerig.gui.widgets.TR2FieldDLG.property = unbound qt slot property of QDialog type","title":"property"},{"location":"typerig.gui.widgets.html#raise","text":"typerig.gui.widgets.TR2FieldDLG.raise = unbound qt slot raise of QDialog type","title":"raise"},{"location":"typerig.gui.widgets.html#redirected","text":"typerig.gui.widgets.TR2FieldDLG.redirected = unbound qt slot py_q_redirected of QDialog type","title":"redirected"},{"location":"typerig.gui.widgets.html#reject","text":"typerig.gui.widgets.TR2FieldDLG.reject = unbound qt slot py_q_reject of QDialog type","title":"reject"},{"location":"typerig.gui.widgets.html#releasekeyboard","text":"typerig.gui.widgets.TR2FieldDLG.releaseKeyboard = unbound qt slot releaseKeyboard of QDialog type","title":"releaseKeyboard"},{"location":"typerig.gui.widgets.html#releasemouse","text":"typerig.gui.widgets.TR2FieldDLG.releaseMouse = unbound qt slot releaseMouse of QDialog type","title":"releaseMouse"},{"location":"typerig.gui.widgets.html#releaseshortcut","text":"typerig.gui.widgets.TR2FieldDLG.releaseShortcut = unbound qt slot releaseShortcut of QDialog type","title":"releaseShortcut"},{"location":"typerig.gui.widgets.html#removeaction","text":"typerig.gui.widgets.TR2FieldDLG.removeAction = unbound qt slot removeAction of QDialog type","title":"removeAction"},{"location":"typerig.gui.widgets.html#removeeventfilter_1","text":"typerig.gui.widgets.TR2FieldDLG.removeEventFilter = unbound qt slot removeEventFilter of QDialog type","title":"removeEventFilter"},{"location":"typerig.gui.widgets.html#render","text":"typerig.gui.widgets.TR2FieldDLG.render = unbound qt slot render of QDialog type","title":"render"},{"location":"typerig.gui.widgets.html#repaint","text":"typerig.gui.widgets.TR2FieldDLG.repaint = unbound qt slot repaint of QDialog type","title":"repaint"},{"location":"typerig.gui.widgets.html#resize","text":"typerig.gui.widgets.TR2FieldDLG.resize = unbound qt slot resize of QDialog type","title":"resize"},{"location":"typerig.gui.widgets.html#resizeevent","text":"typerig.gui.widgets.TR2FieldDLG.resizeEvent = unbound qt slot py_q_resizeEvent of QDialog type","title":"resizeEvent"},{"location":"typerig.gui.widgets.html#restoregeometry","text":"typerig.gui.widgets.TR2FieldDLG.restoreGeometry = unbound qt slot restoreGeometry of QDialog type","title":"restoreGeometry"},{"location":"typerig.gui.widgets.html#result","text":"typerig.gui.widgets.TR2FieldDLG.result = unbound qt slot result of QDialog type","title":"result"},{"location":"typerig.gui.widgets.html#savegeometry","text":"typerig.gui.widgets.TR2FieldDLG.saveGeometry = unbound qt slot saveGeometry of QDialog type","title":"saveGeometry"},{"location":"typerig.gui.widgets.html#scroll","text":"typerig.gui.widgets.TR2FieldDLG.scroll = unbound qt slot scroll of QDialog type","title":"scroll"},{"location":"typerig.gui.widgets.html#sender_1","text":"typerig.gui.widgets.TR2FieldDLG.sender = unbound qt slot sender of QDialog type","title":"sender"},{"location":"typerig.gui.widgets.html#sendersignalindex_1","text":"typerig.gui.widgets.TR2FieldDLG.senderSignalIndex = unbound qt slot senderSignalIndex of QDialog type","title":"senderSignalIndex"},{"location":"typerig.gui.widgets.html#setacceptdrops","text":"typerig.gui.widgets.TR2FieldDLG.setAcceptDrops = unbound qt slot setAcceptDrops of QDialog type","title":"setAcceptDrops"},{"location":"typerig.gui.widgets.html#setaccessibledescription","text":"typerig.gui.widgets.TR2FieldDLG.setAccessibleDescription = unbound qt slot setAccessibleDescription of QDialog type","title":"setAccessibleDescription"},{"location":"typerig.gui.widgets.html#setaccessiblename","text":"typerig.gui.widgets.TR2FieldDLG.setAccessibleName = unbound qt slot setAccessibleName of QDialog type","title":"setAccessibleName"},{"location":"typerig.gui.widgets.html#setattribute","text":"typerig.gui.widgets.TR2FieldDLG.setAttribute = unbound qt slot setAttribute of QDialog type","title":"setAttribute"},{"location":"typerig.gui.widgets.html#setautofillbackground","text":"typerig.gui.widgets.TR2FieldDLG.setAutoFillBackground = unbound qt slot setAutoFillBackground of QDialog type","title":"setAutoFillBackground"},{"location":"typerig.gui.widgets.html#setbackgroundrole","text":"typerig.gui.widgets.TR2FieldDLG.setBackgroundRole = unbound qt slot setBackgroundRole of QDialog type","title":"setBackgroundRole"},{"location":"typerig.gui.widgets.html#setbasesize","text":"typerig.gui.widgets.TR2FieldDLG.setBaseSize = unbound qt slot setBaseSize of QDialog type","title":"setBaseSize"},{"location":"typerig.gui.widgets.html#setcontentsmargins_1","text":"typerig.gui.widgets.TR2FieldDLG.setContentsMargins = unbound qt slot setContentsMargins of QDialog type","title":"setContentsMargins"},{"location":"typerig.gui.widgets.html#setcontextmenupolicy","text":"typerig.gui.widgets.TR2FieldDLG.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QDialog type","title":"setContextMenuPolicy"},{"location":"typerig.gui.widgets.html#setcursor","text":"typerig.gui.widgets.TR2FieldDLG.setCursor = unbound qt slot setCursor of QDialog type","title":"setCursor"},{"location":"typerig.gui.widgets.html#setdisabled","text":"typerig.gui.widgets.TR2FieldDLG.setDisabled = unbound qt slot setDisabled of QDialog type","title":"setDisabled"},{"location":"typerig.gui.widgets.html#setenabled_1","text":"typerig.gui.widgets.TR2FieldDLG.setEnabled = unbound qt slot setEnabled of QDialog type","title":"setEnabled"},{"location":"typerig.gui.widgets.html#setfixedheight","text":"typerig.gui.widgets.TR2FieldDLG.setFixedHeight = unbound qt slot setFixedHeight of QDialog type","title":"setFixedHeight"},{"location":"typerig.gui.widgets.html#setfixedsize","text":"typerig.gui.widgets.TR2FieldDLG.setFixedSize = unbound qt slot setFixedSize of QDialog type","title":"setFixedSize"},{"location":"typerig.gui.widgets.html#setfixedwidth","text":"typerig.gui.widgets.TR2FieldDLG.setFixedWidth = unbound qt slot setFixedWidth of QDialog type","title":"setFixedWidth"},{"location":"typerig.gui.widgets.html#setfocus","text":"typerig.gui.widgets.TR2FieldDLG.setFocus = unbound qt slot setFocus of QDialog type","title":"setFocus"},{"location":"typerig.gui.widgets.html#setfocuspolicy","text":"typerig.gui.widgets.TR2FieldDLG.setFocusPolicy = unbound qt slot setFocusPolicy of QDialog type","title":"setFocusPolicy"},{"location":"typerig.gui.widgets.html#setfocusproxy","text":"typerig.gui.widgets.TR2FieldDLG.setFocusProxy = unbound qt slot setFocusProxy of QDialog type","title":"setFocusProxy"},{"location":"typerig.gui.widgets.html#setfont","text":"typerig.gui.widgets.TR2FieldDLG.setFont = unbound qt slot setFont of QDialog type","title":"setFont"},{"location":"typerig.gui.widgets.html#setforegroundrole","text":"typerig.gui.widgets.TR2FieldDLG.setForegroundRole = unbound qt slot setForegroundRole of QDialog type","title":"setForegroundRole"},{"location":"typerig.gui.widgets.html#setgeometry_1","text":"typerig.gui.widgets.TR2FieldDLG.setGeometry = unbound qt slot setGeometry of QDialog type","title":"setGeometry"},{"location":"typerig.gui.widgets.html#setgraphicseffect","text":"typerig.gui.widgets.TR2FieldDLG.setGraphicsEffect = unbound qt slot setGraphicsEffect of QDialog type","title":"setGraphicsEffect"},{"location":"typerig.gui.widgets.html#sethidden","text":"typerig.gui.widgets.TR2FieldDLG.setHidden = unbound qt slot setHidden of QDialog type","title":"setHidden"},{"location":"typerig.gui.widgets.html#setinputmethodhints","text":"typerig.gui.widgets.TR2FieldDLG.setInputMethodHints = unbound qt slot setInputMethodHints of QDialog type","title":"setInputMethodHints"},{"location":"typerig.gui.widgets.html#setlayout","text":"typerig.gui.widgets.TR2FieldDLG.setLayout = unbound qt slot setLayout of QDialog type","title":"setLayout"},{"location":"typerig.gui.widgets.html#setlayoutdirection","text":"typerig.gui.widgets.TR2FieldDLG.setLayoutDirection = unbound qt slot setLayoutDirection of QDialog type","title":"setLayoutDirection"},{"location":"typerig.gui.widgets.html#setlocale","text":"typerig.gui.widgets.TR2FieldDLG.setLocale = unbound qt slot setLocale of QDialog type","title":"setLocale"},{"location":"typerig.gui.widgets.html#setmask","text":"typerig.gui.widgets.TR2FieldDLG.setMask = unbound qt slot setMask of QDialog type","title":"setMask"},{"location":"typerig.gui.widgets.html#setmaximumheight","text":"typerig.gui.widgets.TR2FieldDLG.setMaximumHeight = unbound qt slot setMaximumHeight of QDialog type","title":"setMaximumHeight"},{"location":"typerig.gui.widgets.html#setmaximumsize","text":"typerig.gui.widgets.TR2FieldDLG.setMaximumSize = unbound qt slot setMaximumSize of QDialog type","title":"setMaximumSize"},{"location":"typerig.gui.widgets.html#setmaximumwidth","text":"typerig.gui.widgets.TR2FieldDLG.setMaximumWidth = unbound qt slot setMaximumWidth of QDialog type","title":"setMaximumWidth"},{"location":"typerig.gui.widgets.html#setminimumheight","text":"typerig.gui.widgets.TR2FieldDLG.setMinimumHeight = unbound qt slot setMinimumHeight of QDialog type","title":"setMinimumHeight"},{"location":"typerig.gui.widgets.html#setminimumsize","text":"typerig.gui.widgets.TR2FieldDLG.setMinimumSize = unbound qt slot setMinimumSize of QDialog type","title":"setMinimumSize"},{"location":"typerig.gui.widgets.html#setminimumwidth","text":"typerig.gui.widgets.TR2FieldDLG.setMinimumWidth = unbound qt slot setMinimumWidth of QDialog type","title":"setMinimumWidth"},{"location":"typerig.gui.widgets.html#setmodal","text":"typerig.gui.widgets.TR2FieldDLG.setModal = unbound qt slot setModal of QDialog type","title":"setModal"},{"location":"typerig.gui.widgets.html#setmousetracking","text":"typerig.gui.widgets.TR2FieldDLG.setMouseTracking = unbound qt slot setMouseTracking of QDialog type","title":"setMouseTracking"},{"location":"typerig.gui.widgets.html#setobjectname_1","text":"typerig.gui.widgets.TR2FieldDLG.setObjectName = unbound qt slot setObjectName of QDialog type","title":"setObjectName"},{"location":"typerig.gui.widgets.html#setpalette","text":"typerig.gui.widgets.TR2FieldDLG.setPalette = unbound qt slot setPalette of QDialog type","title":"setPalette"},{"location":"typerig.gui.widgets.html#setparent_1","text":"typerig.gui.widgets.TR2FieldDLG.setParent = unbound qt slot setParent of QDialog type","title":"setParent"},{"location":"typerig.gui.widgets.html#setproperty_1","text":"typerig.gui.widgets.TR2FieldDLG.setProperty = unbound qt slot setProperty of QDialog type","title":"setProperty"},{"location":"typerig.gui.widgets.html#setresult","text":"typerig.gui.widgets.TR2FieldDLG.setResult = unbound qt slot setResult of QDialog type","title":"setResult"},{"location":"typerig.gui.widgets.html#setshortcutautorepeat","text":"typerig.gui.widgets.TR2FieldDLG.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QDialog type","title":"setShortcutAutoRepeat"},{"location":"typerig.gui.widgets.html#setshortcutenabled","text":"typerig.gui.widgets.TR2FieldDLG.setShortcutEnabled = unbound qt slot setShortcutEnabled of QDialog type","title":"setShortcutEnabled"},{"location":"typerig.gui.widgets.html#setsizegripenabled","text":"typerig.gui.widgets.TR2FieldDLG.setSizeGripEnabled = unbound qt slot setSizeGripEnabled of QDialog type","title":"setSizeGripEnabled"},{"location":"typerig.gui.widgets.html#setsizeincrement","text":"typerig.gui.widgets.TR2FieldDLG.setSizeIncrement = unbound qt slot setSizeIncrement of QDialog type","title":"setSizeIncrement"},{"location":"typerig.gui.widgets.html#setsizepolicy","text":"typerig.gui.widgets.TR2FieldDLG.setSizePolicy = unbound qt slot setSizePolicy of QDialog type","title":"setSizePolicy"},{"location":"typerig.gui.widgets.html#setstatustip","text":"typerig.gui.widgets.TR2FieldDLG.setStatusTip = unbound qt slot setStatusTip of QDialog type","title":"setStatusTip"},{"location":"typerig.gui.widgets.html#setstyle","text":"typerig.gui.widgets.TR2FieldDLG.setStyle = unbound qt slot setStyle of QDialog type","title":"setStyle"},{"location":"typerig.gui.widgets.html#setstylesheet","text":"typerig.gui.widgets.TR2FieldDLG.setStyleSheet = unbound qt slot setStyleSheet of QDialog type","title":"setStyleSheet"},{"location":"typerig.gui.widgets.html#settaborder","text":"typerig.gui.widgets.TR2FieldDLG.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QDialog type","title":"setTabOrder"},{"location":"typerig.gui.widgets.html#settooltip","text":"typerig.gui.widgets.TR2FieldDLG.setToolTip = unbound qt slot setToolTip of QDialog type","title":"setToolTip"},{"location":"typerig.gui.widgets.html#settooltipduration","text":"typerig.gui.widgets.TR2FieldDLG.setToolTipDuration = unbound qt slot setToolTipDuration of QDialog type","title":"setToolTipDuration"},{"location":"typerig.gui.widgets.html#setupdatesenabled","text":"typerig.gui.widgets.TR2FieldDLG.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QDialog type","title":"setUpdatesEnabled"},{"location":"typerig.gui.widgets.html#setvisible","text":"typerig.gui.widgets.TR2FieldDLG.setVisible = unbound qt slot py_q_setVisible of QDialog type","title":"setVisible"},{"location":"typerig.gui.widgets.html#setwhatsthis","text":"typerig.gui.widgets.TR2FieldDLG.setWhatsThis = unbound qt slot setWhatsThis of QDialog type","title":"setWhatsThis"},{"location":"typerig.gui.widgets.html#setwindowfilepath","text":"typerig.gui.widgets.TR2FieldDLG.setWindowFilePath = unbound qt slot setWindowFilePath of QDialog type","title":"setWindowFilePath"},{"location":"typerig.gui.widgets.html#setwindowflags","text":"typerig.gui.widgets.TR2FieldDLG.setWindowFlags = unbound qt slot setWindowFlags of QDialog type","title":"setWindowFlags"},{"location":"typerig.gui.widgets.html#setwindowicon","text":"typerig.gui.widgets.TR2FieldDLG.setWindowIcon = unbound qt slot setWindowIcon of QDialog type","title":"setWindowIcon"},{"location":"typerig.gui.widgets.html#setwindowicontext","text":"typerig.gui.widgets.TR2FieldDLG.setWindowIconText = unbound qt slot setWindowIconText of QDialog type","title":"setWindowIconText"},{"location":"typerig.gui.widgets.html#setwindowmodality","text":"typerig.gui.widgets.TR2FieldDLG.setWindowModality = unbound qt slot setWindowModality of QDialog type","title":"setWindowModality"},{"location":"typerig.gui.widgets.html#setwindowmodified","text":"typerig.gui.widgets.TR2FieldDLG.setWindowModified = unbound qt slot setWindowModified of QDialog type","title":"setWindowModified"},{"location":"typerig.gui.widgets.html#setwindowopacity","text":"typerig.gui.widgets.TR2FieldDLG.setWindowOpacity = unbound qt slot setWindowOpacity of QDialog type","title":"setWindowOpacity"},{"location":"typerig.gui.widgets.html#setwindowrole","text":"typerig.gui.widgets.TR2FieldDLG.setWindowRole = unbound qt slot setWindowRole of QDialog type","title":"setWindowRole"},{"location":"typerig.gui.widgets.html#setwindowstate","text":"typerig.gui.widgets.TR2FieldDLG.setWindowState = unbound qt slot setWindowState of QDialog type","title":"setWindowState"},{"location":"typerig.gui.widgets.html#setwindowtitle","text":"typerig.gui.widgets.TR2FieldDLG.setWindowTitle = unbound qt slot setWindowTitle of QDialog type","title":"setWindowTitle"},{"location":"typerig.gui.widgets.html#sharedpainter","text":"typerig.gui.widgets.TR2FieldDLG.sharedPainter = unbound qt slot py_q_sharedPainter of QDialog type","title":"sharedPainter"},{"location":"typerig.gui.widgets.html#show","text":"typerig.gui.widgets.TR2FieldDLG.show = unbound qt slot show of QDialog type","title":"show"},{"location":"typerig.gui.widgets.html#showevent","text":"typerig.gui.widgets.TR2FieldDLG.showEvent = unbound qt slot py_q_showEvent of QDialog type","title":"showEvent"},{"location":"typerig.gui.widgets.html#showextension","text":"typerig.gui.widgets.TR2FieldDLG.showExtension = unbound qt slot showExtension of QDialog type","title":"showExtension"},{"location":"typerig.gui.widgets.html#showfullscreen","text":"typerig.gui.widgets.TR2FieldDLG.showFullScreen = unbound qt slot showFullScreen of QDialog type","title":"showFullScreen"},{"location":"typerig.gui.widgets.html#showmaximized","text":"typerig.gui.widgets.TR2FieldDLG.showMaximized = unbound qt slot showMaximized of QDialog type","title":"showMaximized"},{"location":"typerig.gui.widgets.html#showminimized","text":"typerig.gui.widgets.TR2FieldDLG.showMinimized = unbound qt slot showMinimized of QDialog type","title":"showMinimized"},{"location":"typerig.gui.widgets.html#shownormal","text":"typerig.gui.widgets.TR2FieldDLG.showNormal = unbound qt slot showNormal of QDialog type","title":"showNormal"},{"location":"typerig.gui.widgets.html#signalsblocked_1","text":"typerig.gui.widgets.TR2FieldDLG.signalsBlocked = unbound qt slot signalsBlocked of QDialog type","title":"signalsBlocked"},{"location":"typerig.gui.widgets.html#stackunder","text":"typerig.gui.widgets.TR2FieldDLG.stackUnder = unbound qt slot stackUnder of QDialog type","title":"stackUnder"},{"location":"typerig.gui.widgets.html#starttimer_1","text":"typerig.gui.widgets.TR2FieldDLG.startTimer = unbound qt slot startTimer of QDialog type","title":"startTimer"},{"location":"typerig.gui.widgets.html#style","text":"typerig.gui.widgets.TR2FieldDLG.style = unbound qt slot style of QDialog type","title":"style"},{"location":"typerig.gui.widgets.html#tabletevent","text":"typerig.gui.widgets.TR2FieldDLG.tabletEvent = unbound qt slot py_q_tabletEvent of QDialog type","title":"tabletEvent"},{"location":"typerig.gui.widgets.html#testattribute","text":"typerig.gui.widgets.TR2FieldDLG.testAttribute = unbound qt slot testAttribute of QDialog type","title":"testAttribute"},{"location":"typerig.gui.widgets.html#thread_1","text":"typerig.gui.widgets.TR2FieldDLG.thread = unbound qt slot thread of QDialog type","title":"thread"},{"location":"typerig.gui.widgets.html#timerevent_1","text":"typerig.gui.widgets.TR2FieldDLG.timerEvent = unbound qt slot py_q_timerEvent of QDialog type","title":"timerEvent"},{"location":"typerig.gui.widgets.html#tr_1","text":"typerig.gui.widgets.TR2FieldDLG.tr = unbound qt slot tr of QDialog type","title":"tr"},{"location":"typerig.gui.widgets.html#undermouse","text":"typerig.gui.widgets.TR2FieldDLG.underMouse = unbound qt slot underMouse of QDialog type","title":"underMouse"},{"location":"typerig.gui.widgets.html#ungrabgesture","text":"typerig.gui.widgets.TR2FieldDLG.ungrabGesture = unbound qt slot ungrabGesture of QDialog type","title":"ungrabGesture"},{"location":"typerig.gui.widgets.html#unsetcursor","text":"typerig.gui.widgets.TR2FieldDLG.unsetCursor = unbound qt slot unsetCursor of QDialog type","title":"unsetCursor"},{"location":"typerig.gui.widgets.html#unsetlayoutdirection","text":"typerig.gui.widgets.TR2FieldDLG.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QDialog type","title":"unsetLayoutDirection"},{"location":"typerig.gui.widgets.html#unsetlocale","text":"typerig.gui.widgets.TR2FieldDLG.unsetLocale = unbound qt slot unsetLocale of QDialog type","title":"unsetLocale"},{"location":"typerig.gui.widgets.html#update_1","text":"typerig.gui.widgets.TR2FieldDLG.update = unbound qt slot update of QDialog type","title":"update"},{"location":"typerig.gui.widgets.html#updategeometry","text":"typerig.gui.widgets.TR2FieldDLG.updateGeometry = unbound qt slot updateGeometry of QDialog type","title":"updateGeometry"},{"location":"typerig.gui.widgets.html#visibleregion","text":"typerig.gui.widgets.TR2FieldDLG.visibleRegion = unbound qt slot visibleRegion of QDialog type","title":"visibleRegion"},{"location":"typerig.gui.widgets.html#wheelevent","text":"typerig.gui.widgets.TR2FieldDLG.wheelEvent = unbound qt slot py_q_wheelEvent of QDialog type","title":"wheelEvent"},{"location":"typerig.gui.widgets.html#widthmm","text":"typerig.gui.widgets.TR2FieldDLG.widthMM = unbound qt slot widthMM of QDialog type","title":"widthMM"},{"location":"typerig.gui.widgets.html#window","text":"typerig.gui.widgets.TR2FieldDLG.window = unbound qt slot window of QDialog type","title":"window"},{"location":"typerig.gui.widgets.html#windowflags","text":"typerig.gui.widgets.TR2FieldDLG.windowFlags = unbound qt slot windowFlags of QDialog type","title":"windowFlags"},{"location":"typerig.gui.widgets.html#windowhandle","text":"typerig.gui.widgets.TR2FieldDLG.windowHandle = unbound qt slot windowHandle of QDialog type","title":"windowHandle"},{"location":"typerig.gui.widgets.html#windowrole","text":"typerig.gui.widgets.TR2FieldDLG.windowRole = unbound qt slot windowRole of QDialog type","title":"windowRole"},{"location":"typerig.gui.widgets.html#windowstate","text":"typerig.gui.widgets.TR2FieldDLG.windowState = unbound qt slot windowState of QDialog type","title":"windowState"},{"location":"typerig.gui.widgets.html#windowtype","text":"typerig.gui.widgets.TR2FieldDLG.windowType = unbound qt slot windowType of QDialog type","title":"windowType"},{"location":"typerig.gui.widgets.html#winid","text":"typerig.gui.widgets.TR2FieldDLG.winId = unbound qt slot winId of QDialog type","title":"winId"},{"location":"typerig.gui.widgets.html#trsliderctrl","text":"","title":"TRSliderCtrl"},{"location":"typerig.gui.widgets.html#activate_1","text":"typerig.gui.widgets.TRSliderCtrl.activate = unbound qt slot activate of QGridLayout type","title":"activate"},{"location":"typerig.gui.widgets.html#addchildlayout_1","text":"typerig.gui.widgets.TRSliderCtrl.addChildLayout = unbound qt slot addChildLayout of QGridLayout type","title":"addChildLayout"},{"location":"typerig.gui.widgets.html#addchildwidget_1","text":"typerig.gui.widgets.TRSliderCtrl.addChildWidget = unbound qt slot addChildWidget of QGridLayout type","title":"addChildWidget"},{"location":"typerig.gui.widgets.html#additem_1","text":"typerig.gui.widgets.TRSliderCtrl.addItem = unbound qt slot py_q_addItem of QGridLayout type","title":"addItem"},{"location":"typerig.gui.widgets.html#addlayout_1","text":"typerig.gui.widgets.TRSliderCtrl.addLayout = unbound qt slot addLayout of QGridLayout type","title":"addLayout"},{"location":"typerig.gui.widgets.html#addwidget_1","text":"typerig.gui.widgets.TRSliderCtrl.addWidget = unbound qt slot addWidget of QGridLayout type","title":"addWidget"},{"location":"typerig.gui.widgets.html#adoptlayout_1","text":"typerig.gui.widgets.TRSliderCtrl.adoptLayout = unbound qt slot adoptLayout of QGridLayout type","title":"adoptLayout"},{"location":"typerig.gui.widgets.html#alignment_1","text":"typerig.gui.widgets.TRSliderCtrl.alignment = unbound qt slot alignment of QGridLayout type","title":"alignment"},{"location":"typerig.gui.widgets.html#alignmentrect_1","text":"typerig.gui.widgets.TRSliderCtrl.alignmentRect = unbound qt slot alignmentRect of QGridLayout type","title":"alignmentRect"},{"location":"typerig.gui.widgets.html#blocksignals_2","text":"typerig.gui.widgets.TRSliderCtrl.blockSignals = unbound qt slot blockSignals of QGridLayout type","title":"blockSignals"},{"location":"typerig.gui.widgets.html#cellrect","text":"typerig.gui.widgets.TRSliderCtrl.cellRect = unbound qt slot cellRect of QGridLayout type","title":"cellRect"},{"location":"typerig.gui.widgets.html#childevent_2","text":"typerig.gui.widgets.TRSliderCtrl.childEvent = unbound qt slot py_q_childEvent of QGridLayout type","title":"childEvent"},{"location":"typerig.gui.widgets.html#children_2","text":"typerig.gui.widgets.TRSliderCtrl.children = unbound qt slot children of QGridLayout type","title":"children"},{"location":"typerig.gui.widgets.html#classname_2","text":"typerig.gui.widgets.TRSliderCtrl.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.widgets.html#closestacceptablesize_1","text":"typerig.gui.widgets.TRSliderCtrl.closestAcceptableSize = unbound qt slot static_QLayout_closestAcceptableSize of QGridLayout type","title":"closestAcceptableSize"},{"location":"typerig.gui.widgets.html#columncount","text":"typerig.gui.widgets.TRSliderCtrl.columnCount = unbound qt slot columnCount of QGridLayout type","title":"columnCount"},{"location":"typerig.gui.widgets.html#columnminimumwidth","text":"typerig.gui.widgets.TRSliderCtrl.columnMinimumWidth = unbound qt slot columnMinimumWidth of QGridLayout type","title":"columnMinimumWidth"},{"location":"typerig.gui.widgets.html#columnstretch","text":"typerig.gui.widgets.TRSliderCtrl.columnStretch = unbound qt slot columnStretch of QGridLayout type","title":"columnStretch"},{"location":"typerig.gui.widgets.html#connect_2","text":"typerig.gui.widgets.TRSliderCtrl.connect = unbound qt slot connect of QGridLayout type","title":"connect"},{"location":"typerig.gui.widgets.html#contentsmargins_2","text":"typerig.gui.widgets.TRSliderCtrl.contentsMargins = unbound qt slot contentsMargins of QGridLayout type","title":"contentsMargins"},{"location":"typerig.gui.widgets.html#contentsrect_2","text":"typerig.gui.widgets.TRSliderCtrl.contentsRect = unbound qt slot contentsRect of QGridLayout type","title":"contentsRect"},{"location":"typerig.gui.widgets.html#controltypes_1","text":"typerig.gui.widgets.TRSliderCtrl.controlTypes = unbound qt slot py_q_controlTypes of QGridLayout type","title":"controlTypes"},{"location":"typerig.gui.widgets.html#count_1","text":"typerig.gui.widgets.TRSliderCtrl.count = unbound qt slot py_q_count of QGridLayout type","title":"count"},{"location":"typerig.gui.widgets.html#customevent_2","text":"typerig.gui.widgets.TRSliderCtrl.customEvent = unbound qt slot py_q_customEvent of QGridLayout type","title":"customEvent"},{"location":"typerig.gui.widgets.html#delete_2","text":"typerig.gui.widgets.TRSliderCtrl.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.widgets.html#deletelater_2","text":"typerig.gui.widgets.TRSliderCtrl.deleteLater = unbound qt slot deleteLater of QGridLayout type","title":"deleteLater"},{"location":"typerig.gui.widgets.html#disconnect_2","text":"typerig.gui.widgets.TRSliderCtrl.disconnect = unbound qt slot disconnect of QGridLayout type","title":"disconnect"},{"location":"typerig.gui.widgets.html#dumpobjectinfo_2","text":"typerig.gui.widgets.TRSliderCtrl.dumpObjectInfo = unbound qt slot dumpObjectInfo of QGridLayout type","title":"dumpObjectInfo"},{"location":"typerig.gui.widgets.html#dumpobjecttree_2","text":"typerig.gui.widgets.TRSliderCtrl.dumpObjectTree = unbound qt slot dumpObjectTree of QGridLayout type","title":"dumpObjectTree"},{"location":"typerig.gui.widgets.html#dynamicpropertynames_2","text":"typerig.gui.widgets.TRSliderCtrl.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QGridLayout type","title":"dynamicPropertyNames"},{"location":"typerig.gui.widgets.html#event_2","text":"typerig.gui.widgets.TRSliderCtrl.event = unbound qt slot py_q_event of QGridLayout type","title":"event"},{"location":"typerig.gui.widgets.html#eventfilter_2","text":"typerig.gui.widgets.TRSliderCtrl.eventFilter = unbound qt slot py_q_eventFilter of QGridLayout type","title":"eventFilter"},{"location":"typerig.gui.widgets.html#expandingdirections_1","text":"typerig.gui.widgets.TRSliderCtrl.expandingDirections = unbound qt slot py_q_expandingDirections of QGridLayout type","title":"expandingDirections"},{"location":"typerig.gui.widgets.html#findchild_2","text":"typerig.gui.widgets.TRSliderCtrl.findChild = unbound qt slot findChild of QGridLayout type","title":"findChild"},{"location":"typerig.gui.widgets.html#findchildren_2","text":"typerig.gui.widgets.TRSliderCtrl.findChildren = unbound qt slot findChildren of QGridLayout type","title":"findChildren"},{"location":"typerig.gui.widgets.html#geometry_1","text":"typerig.gui.widgets.TRSliderCtrl.geometry = unbound qt slot py_q_geometry of QGridLayout type","title":"geometry"},{"location":"typerig.gui.widgets.html#hasheightforwidth_2","text":"typerig.gui.widgets.TRSliderCtrl.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QGridLayout type","title":"hasHeightForWidth"},{"location":"typerig.gui.widgets.html#heightforwidth_2","text":"typerig.gui.widgets.TRSliderCtrl.heightForWidth = unbound qt slot py_q_heightForWidth of QGridLayout type","title":"heightForWidth"},{"location":"typerig.gui.widgets.html#help_2","text":"typerig.gui.widgets.TRSliderCtrl.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.widgets.html#horizontalspacing","text":"typerig.gui.widgets.TRSliderCtrl.horizontalSpacing = unbound qt slot horizontalSpacing of QGridLayout type","title":"horizontalSpacing"},{"location":"typerig.gui.widgets.html#indexof_1","text":"typerig.gui.widgets.TRSliderCtrl.indexOf = unbound qt slot py_q_indexOf of QGridLayout type","title":"indexOf"},{"location":"typerig.gui.widgets.html#inherits_2","text":"typerig.gui.widgets.TRSliderCtrl.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.widgets.html#installeventfilter_2","text":"typerig.gui.widgets.TRSliderCtrl.installEventFilter = unbound qt slot installEventFilter of QGridLayout type","title":"installEventFilter"},{"location":"typerig.gui.widgets.html#invalidate_1","text":"typerig.gui.widgets.TRSliderCtrl.invalidate = unbound qt slot py_q_invalidate of QGridLayout type","title":"invalidate"},{"location":"typerig.gui.widgets.html#isempty_1","text":"typerig.gui.widgets.TRSliderCtrl.isEmpty = unbound qt slot py_q_isEmpty of QGridLayout type","title":"isEmpty"},{"location":"typerig.gui.widgets.html#isenabled_2","text":"typerig.gui.widgets.TRSliderCtrl.isEnabled = unbound qt slot isEnabled of QGridLayout type","title":"isEnabled"},{"location":"typerig.gui.widgets.html#issignalconnected_2","text":"typerig.gui.widgets.TRSliderCtrl.isSignalConnected = unbound qt slot isSignalConnected of QGridLayout type","title":"isSignalConnected"},{"location":"typerig.gui.widgets.html#iswidgettype_2","text":"typerig.gui.widgets.TRSliderCtrl.isWidgetType = unbound qt slot isWidgetType of QGridLayout type","title":"isWidgetType"},{"location":"typerig.gui.widgets.html#iswindowtype_2","text":"typerig.gui.widgets.TRSliderCtrl.isWindowType = unbound qt slot isWindowType of QGridLayout type","title":"isWindowType"},{"location":"typerig.gui.widgets.html#itemat_1","text":"typerig.gui.widgets.TRSliderCtrl.itemAt = unbound qt slot py_q_itemAt of QGridLayout type","title":"itemAt"},{"location":"typerig.gui.widgets.html#itematposition","text":"typerig.gui.widgets.TRSliderCtrl.itemAtPosition = unbound qt slot itemAtPosition of QGridLayout type","title":"itemAtPosition"},{"location":"typerig.gui.widgets.html#killtimer_2","text":"typerig.gui.widgets.TRSliderCtrl.killTimer = unbound qt slot killTimer of QGridLayout type","title":"killTimer"},{"location":"typerig.gui.widgets.html#layout_2","text":"typerig.gui.widgets.TRSliderCtrl.layout = unbound qt slot py_q_layout of QGridLayout type","title":"layout"},{"location":"typerig.gui.widgets.html#maximumsize_1","text":"typerig.gui.widgets.TRSliderCtrl.maximumSize = unbound qt slot py_q_maximumSize of QGridLayout type","title":"maximumSize"},{"location":"typerig.gui.widgets.html#menubar_1","text":"typerig.gui.widgets.TRSliderCtrl.menuBar = unbound qt slot menuBar of QGridLayout type","title":"menuBar"},{"location":"typerig.gui.widgets.html#metaobject_2","text":"typerig.gui.widgets.TRSliderCtrl.metaObject = unbound qt slot metaObject of QGridLayout type","title":"metaObject"},{"location":"typerig.gui.widgets.html#minimumheightforwidth_1","text":"typerig.gui.widgets.TRSliderCtrl.minimumHeightForWidth = unbound qt slot py_q_minimumHeightForWidth of QGridLayout type","title":"minimumHeightForWidth"},{"location":"typerig.gui.widgets.html#minimumsize_1","text":"typerig.gui.widgets.TRSliderCtrl.minimumSize = unbound qt slot py_q_minimumSize of QGridLayout type","title":"minimumSize"},{"location":"typerig.gui.widgets.html#movetothread_2","text":"typerig.gui.widgets.TRSliderCtrl.moveToThread = unbound qt slot moveToThread of QGridLayout type","title":"moveToThread"},{"location":"typerig.gui.widgets.html#origincorner","text":"typerig.gui.widgets.TRSliderCtrl.originCorner = unbound qt slot originCorner of QGridLayout type","title":"originCorner"},{"location":"typerig.gui.widgets.html#parent_2","text":"typerig.gui.widgets.TRSliderCtrl.parent = unbound qt slot parent of QGridLayout type","title":"parent"},{"location":"typerig.gui.widgets.html#parentwidget_2","text":"typerig.gui.widgets.TRSliderCtrl.parentWidget = unbound qt slot parentWidget of QGridLayout type","title":"parentWidget"},{"location":"typerig.gui.widgets.html#property_2","text":"typerig.gui.widgets.TRSliderCtrl.property = unbound qt slot property of QGridLayout type","title":"property"},{"location":"typerig.gui.widgets.html#removeeventfilter_2","text":"typerig.gui.widgets.TRSliderCtrl.removeEventFilter = unbound qt slot removeEventFilter of QGridLayout type","title":"removeEventFilter"},{"location":"typerig.gui.widgets.html#removeitem_1","text":"typerig.gui.widgets.TRSliderCtrl.removeItem = unbound qt slot removeItem of QGridLayout type","title":"removeItem"},{"location":"typerig.gui.widgets.html#removewidget_1","text":"typerig.gui.widgets.TRSliderCtrl.removeWidget = unbound qt slot removeWidget of QGridLayout type","title":"removeWidget"},{"location":"typerig.gui.widgets.html#replacewidget_1","text":"typerig.gui.widgets.TRSliderCtrl.replaceWidget = unbound qt slot replaceWidget of QGridLayout type","title":"replaceWidget"},{"location":"typerig.gui.widgets.html#rowcount","text":"typerig.gui.widgets.TRSliderCtrl.rowCount = unbound qt slot rowCount of QGridLayout type","title":"rowCount"},{"location":"typerig.gui.widgets.html#rowminimumheight","text":"typerig.gui.widgets.TRSliderCtrl.rowMinimumHeight = unbound qt slot rowMinimumHeight of QGridLayout type","title":"rowMinimumHeight"},{"location":"typerig.gui.widgets.html#rowstretch","text":"typerig.gui.widgets.TRSliderCtrl.rowStretch = unbound qt slot rowStretch of QGridLayout type","title":"rowStretch"},{"location":"typerig.gui.widgets.html#sender_2","text":"typerig.gui.widgets.TRSliderCtrl.sender = unbound qt slot sender of QGridLayout type","title":"sender"},{"location":"typerig.gui.widgets.html#sendersignalindex_2","text":"typerig.gui.widgets.TRSliderCtrl.senderSignalIndex = unbound qt slot senderSignalIndex of QGridLayout type","title":"senderSignalIndex"},{"location":"typerig.gui.widgets.html#setalignment_1","text":"typerig.gui.widgets.TRSliderCtrl.setAlignment = unbound qt slot setAlignment of QGridLayout type","title":"setAlignment"},{"location":"typerig.gui.widgets.html#setcolumnminimumwidth","text":"typerig.gui.widgets.TRSliderCtrl.setColumnMinimumWidth = unbound qt slot setColumnMinimumWidth of QGridLayout type","title":"setColumnMinimumWidth"},{"location":"typerig.gui.widgets.html#setcolumnstretch","text":"typerig.gui.widgets.TRSliderCtrl.setColumnStretch = unbound qt slot setColumnStretch of QGridLayout type","title":"setColumnStretch"},{"location":"typerig.gui.widgets.html#setcontentsmargins_2","text":"typerig.gui.widgets.TRSliderCtrl.setContentsMargins = unbound qt slot setContentsMargins of QGridLayout type","title":"setContentsMargins"},{"location":"typerig.gui.widgets.html#setdefaultpositioning","text":"typerig.gui.widgets.TRSliderCtrl.setDefaultPositioning = unbound qt slot setDefaultPositioning of QGridLayout type","title":"setDefaultPositioning"},{"location":"typerig.gui.widgets.html#setenabled_2","text":"typerig.gui.widgets.TRSliderCtrl.setEnabled = unbound qt slot setEnabled of QGridLayout type","title":"setEnabled"},{"location":"typerig.gui.widgets.html#setgeometry_2","text":"typerig.gui.widgets.TRSliderCtrl.setGeometry = unbound qt slot py_q_setGeometry of QGridLayout type","title":"setGeometry"},{"location":"typerig.gui.widgets.html#sethorizontalspacing","text":"typerig.gui.widgets.TRSliderCtrl.setHorizontalSpacing = unbound qt slot setHorizontalSpacing of QGridLayout type","title":"setHorizontalSpacing"},{"location":"typerig.gui.widgets.html#setmargin_1","text":"typerig.gui.widgets.TRSliderCtrl.setMargin = unbound qt slot setMargin of QGridLayout type","title":"setMargin"},{"location":"typerig.gui.widgets.html#setmenubar_1","text":"typerig.gui.widgets.TRSliderCtrl.setMenuBar = unbound qt slot setMenuBar of QGridLayout type","title":"setMenuBar"},{"location":"typerig.gui.widgets.html#setobjectname_2","text":"typerig.gui.widgets.TRSliderCtrl.setObjectName = unbound qt slot setObjectName of QGridLayout type","title":"setObjectName"},{"location":"typerig.gui.widgets.html#setorigincorner","text":"typerig.gui.widgets.TRSliderCtrl.setOriginCorner = unbound qt slot setOriginCorner of QGridLayout type","title":"setOriginCorner"},{"location":"typerig.gui.widgets.html#setparent_2","text":"typerig.gui.widgets.TRSliderCtrl.setParent = unbound qt slot setParent of QGridLayout type","title":"setParent"},{"location":"typerig.gui.widgets.html#setproperty_2","text":"typerig.gui.widgets.TRSliderCtrl.setProperty = unbound qt slot setProperty of QGridLayout type","title":"setProperty"},{"location":"typerig.gui.widgets.html#setrowminimumheight","text":"typerig.gui.widgets.TRSliderCtrl.setRowMinimumHeight = unbound qt slot setRowMinimumHeight of QGridLayout type","title":"setRowMinimumHeight"},{"location":"typerig.gui.widgets.html#setrowstretch","text":"typerig.gui.widgets.TRSliderCtrl.setRowStretch = unbound qt slot setRowStretch of QGridLayout type","title":"setRowStretch"},{"location":"typerig.gui.widgets.html#setsizeconstraint_1","text":"typerig.gui.widgets.TRSliderCtrl.setSizeConstraint = unbound qt slot setSizeConstraint of QGridLayout type","title":"setSizeConstraint"},{"location":"typerig.gui.widgets.html#setspacing_1","text":"typerig.gui.widgets.TRSliderCtrl.setSpacing = unbound qt slot setSpacing of QGridLayout type","title":"setSpacing"},{"location":"typerig.gui.widgets.html#setverticalspacing","text":"typerig.gui.widgets.TRSliderCtrl.setVerticalSpacing = unbound qt slot setVerticalSpacing of QGridLayout type","title":"setVerticalSpacing"},{"location":"typerig.gui.widgets.html#signalsblocked_2","text":"typerig.gui.widgets.TRSliderCtrl.signalsBlocked = unbound qt slot signalsBlocked of QGridLayout type","title":"signalsBlocked"},{"location":"typerig.gui.widgets.html#sizehint_1","text":"typerig.gui.widgets.TRSliderCtrl.sizeHint = unbound qt slot py_q_sizeHint of QGridLayout type","title":"sizeHint"},{"location":"typerig.gui.widgets.html#spaceritem_1","text":"typerig.gui.widgets.TRSliderCtrl.spacerItem = unbound qt slot py_q_spacerItem of QGridLayout type","title":"spacerItem"},{"location":"typerig.gui.widgets.html#starttimer_2","text":"typerig.gui.widgets.TRSliderCtrl.startTimer = unbound qt slot startTimer of QGridLayout type","title":"startTimer"},{"location":"typerig.gui.widgets.html#takeat_1","text":"typerig.gui.widgets.TRSliderCtrl.takeAt = unbound qt slot py_q_takeAt of QGridLayout type","title":"takeAt"},{"location":"typerig.gui.widgets.html#thread_2","text":"typerig.gui.widgets.TRSliderCtrl.thread = unbound qt slot thread of QGridLayout type","title":"thread"},{"location":"typerig.gui.widgets.html#timerevent_2","text":"typerig.gui.widgets.TRSliderCtrl.timerEvent = unbound qt slot py_q_timerEvent of QGridLayout type","title":"timerEvent"},{"location":"typerig.gui.widgets.html#totalheightforwidth_1","text":"typerig.gui.widgets.TRSliderCtrl.totalHeightForWidth = unbound qt slot totalHeightForWidth of QGridLayout type","title":"totalHeightForWidth"},{"location":"typerig.gui.widgets.html#totalmaximumsize_1","text":"typerig.gui.widgets.TRSliderCtrl.totalMaximumSize = unbound qt slot totalMaximumSize of QGridLayout type","title":"totalMaximumSize"},{"location":"typerig.gui.widgets.html#totalminimumsize_1","text":"typerig.gui.widgets.TRSliderCtrl.totalMinimumSize = unbound qt slot totalMinimumSize of QGridLayout type","title":"totalMinimumSize"},{"location":"typerig.gui.widgets.html#totalsizehint_1","text":"typerig.gui.widgets.TRSliderCtrl.totalSizeHint = unbound qt slot totalSizeHint of QGridLayout type","title":"totalSizeHint"},{"location":"typerig.gui.widgets.html#tr_2","text":"typerig.gui.widgets.TRSliderCtrl.tr = unbound qt slot tr of QGridLayout type","title":"tr"},{"location":"typerig.gui.widgets.html#update_2","text":"typerig.gui.widgets.TRSliderCtrl.update = unbound qt slot update of QGridLayout type","title":"update"},{"location":"typerig.gui.widgets.html#verticalspacing","text":"typerig.gui.widgets.TRSliderCtrl.verticalSpacing = unbound qt slot verticalSpacing of QGridLayout type","title":"verticalSpacing"},{"location":"typerig.gui.widgets.html#widget_1","text":"typerig.gui.widgets.TRSliderCtrl.widget = unbound qt slot py_q_widget of QGridLayout type","title":"widget"},{"location":"typerig.gui.widgets.html#widgetevent_1","text":"typerig.gui.widgets.TRSliderCtrl.widgetEvent = unbound qt slot widgetEvent of QGridLayout type","title":"widgetEvent"},{"location":"typerig.gui.widgets.html#trtableview","text":"","title":"TRTableView"},{"location":"typerig.gui.widgets.html#actionevent_1","text":"typerig.gui.widgets.TRTableView.actionEvent = unbound qt slot py_q_actionEvent of QTableWidget type","title":"actionEvent"},{"location":"typerig.gui.widgets.html#actions_1","text":"typerig.gui.widgets.TRTableView.actions = unbound qt slot actions of QTableWidget type","title":"actions"},{"location":"typerig.gui.widgets.html#activatewindow_1","text":"typerig.gui.widgets.TRTableView.activateWindow = unbound qt slot activateWindow of QTableWidget type","title":"activateWindow"},{"location":"typerig.gui.widgets.html#addaction_1","text":"typerig.gui.widgets.TRTableView.addAction = unbound qt slot addAction of QTableWidget type","title":"addAction"},{"location":"typerig.gui.widgets.html#addactions_1","text":"typerig.gui.widgets.TRTableView.addActions = unbound qt slot addActions of QTableWidget type","title":"addActions"},{"location":"typerig.gui.widgets.html#addscrollbarwidget","text":"typerig.gui.widgets.TRTableView.addScrollBarWidget = unbound qt slot addScrollBarWidget of QTableWidget type","title":"addScrollBarWidget"},{"location":"typerig.gui.widgets.html#adjustsize_1","text":"typerig.gui.widgets.TRTableView.adjustSize = unbound qt slot adjustSize of QTableWidget type","title":"adjustSize"},{"location":"typerig.gui.widgets.html#backgroundrole_1","text":"typerig.gui.widgets.TRTableView.backgroundRole = unbound qt slot backgroundRole of QTableWidget type","title":"backgroundRole"},{"location":"typerig.gui.widgets.html#backingstore_1","text":"typerig.gui.widgets.TRTableView.backingStore = unbound qt slot backingStore of QTableWidget type","title":"backingStore"},{"location":"typerig.gui.widgets.html#blocksignals_3","text":"typerig.gui.widgets.TRTableView.blockSignals = unbound qt slot blockSignals of QTableWidget type","title":"blockSignals"},{"location":"typerig.gui.widgets.html#cellwidget","text":"typerig.gui.widgets.TRTableView.cellWidget = unbound qt slot cellWidget of QTableWidget type","title":"cellWidget"},{"location":"typerig.gui.widgets.html#changeevent_1","text":"typerig.gui.widgets.TRTableView.changeEvent = unbound qt slot py_q_changeEvent of QTableWidget type","title":"changeEvent"},{"location":"typerig.gui.widgets.html#childat_1","text":"typerig.gui.widgets.TRTableView.childAt = unbound qt slot childAt of QTableWidget type","title":"childAt"},{"location":"typerig.gui.widgets.html#childevent_3","text":"typerig.gui.widgets.TRTableView.childEvent = unbound qt slot py_q_childEvent of QTableWidget type","title":"childEvent"},{"location":"typerig.gui.widgets.html#children_3","text":"typerig.gui.widgets.TRTableView.children = unbound qt slot children of QTableWidget type","title":"children"},{"location":"typerig.gui.widgets.html#classname_3","text":"typerig.gui.widgets.TRTableView.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.widgets.html#clear","text":"typerig.gui.widgets.TRTableView.clear = unbound qt slot clear of QTableWidget type","title":"clear"},{"location":"typerig.gui.widgets.html#clearcontents","text":"typerig.gui.widgets.TRTableView.clearContents = unbound qt slot clearContents of QTableWidget type","title":"clearContents"},{"location":"typerig.gui.widgets.html#clearfocus_1","text":"typerig.gui.widgets.TRTableView.clearFocus = unbound qt slot clearFocus of QTableWidget type","title":"clearFocus"},{"location":"typerig.gui.widgets.html#clearmask_1","text":"typerig.gui.widgets.TRTableView.clearMask = unbound qt slot clearMask of QTableWidget type","title":"clearMask"},{"location":"typerig.gui.widgets.html#clearselection","text":"typerig.gui.widgets.TRTableView.clearSelection = unbound qt slot clearSelection of QTableWidget type","title":"clearSelection"},{"location":"typerig.gui.widgets.html#clearspans","text":"typerig.gui.widgets.TRTableView.clearSpans = unbound qt slot clearSpans of QTableWidget type","title":"clearSpans"},{"location":"typerig.gui.widgets.html#close_1","text":"typerig.gui.widgets.TRTableView.close = unbound qt slot close of QTableWidget type","title":"close"},{"location":"typerig.gui.widgets.html#closeevent_1","text":"typerig.gui.widgets.TRTableView.closeEvent = unbound qt slot py_q_closeEvent of QTableWidget type","title":"closeEvent"},{"location":"typerig.gui.widgets.html#closepersistenteditor","text":"typerig.gui.widgets.TRTableView.closePersistentEditor = unbound qt slot closePersistentEditor of QTableWidget type","title":"closePersistentEditor"},{"location":"typerig.gui.widgets.html#colorcount_1","text":"typerig.gui.widgets.TRTableView.colorCount = unbound qt slot colorCount of QTableWidget type","title":"colorCount"},{"location":"typerig.gui.widgets.html#column","text":"typerig.gui.widgets.TRTableView.column = unbound qt slot column of QTableWidget type","title":"column"},{"location":"typerig.gui.widgets.html#columnat","text":"typerig.gui.widgets.TRTableView.columnAt = unbound qt slot columnAt of QTableWidget type","title":"columnAt"},{"location":"typerig.gui.widgets.html#columnspan","text":"typerig.gui.widgets.TRTableView.columnSpan = unbound qt slot columnSpan of QTableWidget type","title":"columnSpan"},{"location":"typerig.gui.widgets.html#columnviewportposition","text":"typerig.gui.widgets.TRTableView.columnViewportPosition = unbound qt slot columnViewportPosition of QTableWidget type","title":"columnViewportPosition"},{"location":"typerig.gui.widgets.html#columnwidth","text":"typerig.gui.widgets.TRTableView.columnWidth = unbound qt slot columnWidth of QTableWidget type","title":"columnWidth"},{"location":"typerig.gui.widgets.html#connect_3","text":"typerig.gui.widgets.TRTableView.connect = unbound qt slot connect of QTableWidget type","title":"connect"},{"location":"typerig.gui.widgets.html#contentsmargins_3","text":"typerig.gui.widgets.TRTableView.contentsMargins = unbound qt slot contentsMargins of QTableWidget type","title":"contentsMargins"},{"location":"typerig.gui.widgets.html#contentsrect_3","text":"typerig.gui.widgets.TRTableView.contentsRect = unbound qt slot contentsRect of QTableWidget type","title":"contentsRect"},{"location":"typerig.gui.widgets.html#contextmenuevent_1","text":"typerig.gui.widgets.TRTableView.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTableWidget type","title":"contextMenuEvent"},{"location":"typerig.gui.widgets.html#cornerwidget","text":"typerig.gui.widgets.TRTableView.cornerWidget = unbound qt slot cornerWidget of QTableWidget type","title":"cornerWidget"},{"location":"typerig.gui.widgets.html#createwindowcontainer_1","text":"typerig.gui.widgets.TRTableView.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTableWidget type","title":"createWindowContainer"},{"location":"typerig.gui.widgets.html#createwinid_1","text":"typerig.gui.widgets.TRTableView.createWinId = unbound qt slot createWinId of QTableWidget type","title":"createWinId"},{"location":"typerig.gui.widgets.html#currentcolumn","text":"typerig.gui.widgets.TRTableView.currentColumn = unbound qt slot currentColumn of QTableWidget type","title":"currentColumn"},{"location":"typerig.gui.widgets.html#currentindex","text":"typerig.gui.widgets.TRTableView.currentIndex = unbound qt slot currentIndex of QTableWidget type","title":"currentIndex"},{"location":"typerig.gui.widgets.html#currentitem","text":"typerig.gui.widgets.TRTableView.currentItem = unbound qt slot currentItem of QTableWidget type","title":"currentItem"},{"location":"typerig.gui.widgets.html#currentrow","text":"typerig.gui.widgets.TRTableView.currentRow = unbound qt slot currentRow of QTableWidget type","title":"currentRow"},{"location":"typerig.gui.widgets.html#customevent_3","text":"typerig.gui.widgets.TRTableView.customEvent = unbound qt slot py_q_customEvent of QTableWidget type","title":"customEvent"},{"location":"typerig.gui.widgets.html#delete_3","text":"typerig.gui.widgets.TRTableView.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.widgets.html#deletelater_3","text":"typerig.gui.widgets.TRTableView.deleteLater = unbound qt slot deleteLater of QTableWidget type","title":"deleteLater"},{"location":"typerig.gui.widgets.html#depth_1","text":"typerig.gui.widgets.TRTableView.depth = unbound qt slot depth of QTableWidget type","title":"depth"},{"location":"typerig.gui.widgets.html#destroy_1","text":"typerig.gui.widgets.TRTableView.destroy = unbound qt slot destroy of QTableWidget type","title":"destroy"},{"location":"typerig.gui.widgets.html#devicepixelratio_1","text":"typerig.gui.widgets.TRTableView.devicePixelRatio = unbound qt slot devicePixelRatio of QTableWidget type","title":"devicePixelRatio"},{"location":"typerig.gui.widgets.html#devicepixelratiof_1","text":"typerig.gui.widgets.TRTableView.devicePixelRatioF = unbound qt slot devicePixelRatioF of QTableWidget type","title":"devicePixelRatioF"},{"location":"typerig.gui.widgets.html#devicepixelratiofscale_1","text":"typerig.gui.widgets.TRTableView.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTableWidget type","title":"devicePixelRatioFScale"},{"location":"typerig.gui.widgets.html#devtype_1","text":"typerig.gui.widgets.TRTableView.devType = unbound qt slot py_q_devType of QTableWidget type","title":"devType"},{"location":"typerig.gui.widgets.html#dirtyregionoffset","text":"typerig.gui.widgets.TRTableView.dirtyRegionOffset = unbound qt slot dirtyRegionOffset of QTableWidget type","title":"dirtyRegionOffset"},{"location":"typerig.gui.widgets.html#disconnect_3","text":"typerig.gui.widgets.TRTableView.disconnect = unbound qt slot disconnect of QTableWidget type","title":"disconnect"},{"location":"typerig.gui.widgets.html#doautoscroll","text":"typerig.gui.widgets.TRTableView.doAutoScroll = unbound qt slot doAutoScroll of QTableWidget type","title":"doAutoScroll"},{"location":"typerig.gui.widgets.html#doitemslayout","text":"typerig.gui.widgets.TRTableView.doItemsLayout = unbound qt slot py_q_doItemsLayout of QTableWidget type","title":"doItemsLayout"},{"location":"typerig.gui.widgets.html#dragenterevent_1","text":"typerig.gui.widgets.TRTableView.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTableWidget type","title":"dragEnterEvent"},{"location":"typerig.gui.widgets.html#dragleaveevent_1","text":"typerig.gui.widgets.TRTableView.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTableWidget type","title":"dragLeaveEvent"},{"location":"typerig.gui.widgets.html#dragmoveevent_1","text":"typerig.gui.widgets.TRTableView.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTableWidget type","title":"dragMoveEvent"},{"location":"typerig.gui.widgets.html#drawframe","text":"typerig.gui.widgets.TRTableView.drawFrame = unbound qt slot drawFrame of QTableWidget type","title":"drawFrame"},{"location":"typerig.gui.widgets.html#dropevent_1","text":"typerig.gui.widgets.TRTableView.dropEvent = unbound qt slot py_q_dropEvent of QTableWidget type","title":"dropEvent"},{"location":"typerig.gui.widgets.html#dropindicatorposition","text":"typerig.gui.widgets.TRTableView.dropIndicatorPosition = unbound qt slot dropIndicatorPosition of QTableWidget type","title":"dropIndicatorPosition"},{"location":"typerig.gui.widgets.html#dropmimedata","text":"typerig.gui.widgets.TRTableView.dropMimeData = unbound qt slot py_q_dropMimeData of QTableWidget type","title":"dropMimeData"},{"location":"typerig.gui.widgets.html#dumpobjectinfo_3","text":"typerig.gui.widgets.TRTableView.dumpObjectInfo = unbound qt slot dumpObjectInfo of QTableWidget type","title":"dumpObjectInfo"},{"location":"typerig.gui.widgets.html#dumpobjecttree_3","text":"typerig.gui.widgets.TRTableView.dumpObjectTree = unbound qt slot dumpObjectTree of QTableWidget type","title":"dumpObjectTree"},{"location":"typerig.gui.widgets.html#dynamicpropertynames_3","text":"typerig.gui.widgets.TRTableView.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTableWidget type","title":"dynamicPropertyNames"},{"location":"typerig.gui.widgets.html#edit","text":"typerig.gui.widgets.TRTableView.edit = unbound qt slot py_q_edit of QTableWidget type","title":"edit"},{"location":"typerig.gui.widgets.html#edititem","text":"typerig.gui.widgets.TRTableView.editItem = unbound qt slot editItem of QTableWidget type","title":"editItem"},{"location":"typerig.gui.widgets.html#effectivewinid_1","text":"typerig.gui.widgets.TRTableView.effectiveWinId = unbound qt slot effectiveWinId of QTableWidget type","title":"effectiveWinId"},{"location":"typerig.gui.widgets.html#ensurepolished_1","text":"typerig.gui.widgets.TRTableView.ensurePolished = unbound qt slot ensurePolished of QTableWidget type","title":"ensurePolished"},{"location":"typerig.gui.widgets.html#enterevent_1","text":"typerig.gui.widgets.TRTableView.enterEvent = unbound qt slot py_q_enterEvent of QTableWidget type","title":"enterEvent"},{"location":"typerig.gui.widgets.html#event_3","text":"typerig.gui.widgets.TRTableView.event = unbound qt slot py_q_event of QTableWidget type","title":"event"},{"location":"typerig.gui.widgets.html#eventfilter_3","text":"typerig.gui.widgets.TRTableView.eventFilter = unbound qt slot py_q_eventFilter of QTableWidget type","title":"eventFilter"},{"location":"typerig.gui.widgets.html#executedelayeditemslayout","text":"typerig.gui.widgets.TRTableView.executeDelayedItemsLayout = unbound qt slot executeDelayedItemsLayout of QTableWidget type","title":"executeDelayedItemsLayout"},{"location":"typerig.gui.widgets.html#findchild_3","text":"typerig.gui.widgets.TRTableView.findChild = unbound qt slot findChild of QTableWidget type","title":"findChild"},{"location":"typerig.gui.widgets.html#findchildren_3","text":"typerig.gui.widgets.TRTableView.findChildren = unbound qt slot findChildren of QTableWidget type","title":"findChildren"},{"location":"typerig.gui.widgets.html#finditems","text":"typerig.gui.widgets.TRTableView.findItems = unbound qt slot findItems of QTableWidget type","title":"findItems"},{"location":"typerig.gui.widgets.html#focusinevent_1","text":"typerig.gui.widgets.TRTableView.focusInEvent = unbound qt slot py_q_focusInEvent of QTableWidget type","title":"focusInEvent"},{"location":"typerig.gui.widgets.html#focusnextchild_1","text":"typerig.gui.widgets.TRTableView.focusNextChild = unbound qt slot focusNextChild of QTableWidget type","title":"focusNextChild"},{"location":"typerig.gui.widgets.html#focusnextprevchild_1","text":"typerig.gui.widgets.TRTableView.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTableWidget type","title":"focusNextPrevChild"},{"location":"typerig.gui.widgets.html#focusoutevent_1","text":"typerig.gui.widgets.TRTableView.focusOutEvent = unbound qt slot py_q_focusOutEvent of QTableWidget type","title":"focusOutEvent"},{"location":"typerig.gui.widgets.html#focuspreviouschild_1","text":"typerig.gui.widgets.TRTableView.focusPreviousChild = unbound qt slot focusPreviousChild of QTableWidget type","title":"focusPreviousChild"},{"location":"typerig.gui.widgets.html#focusproxy_1","text":"typerig.gui.widgets.TRTableView.focusProxy = unbound qt slot focusProxy of QTableWidget type","title":"focusProxy"},{"location":"typerig.gui.widgets.html#focuswidget_1","text":"typerig.gui.widgets.TRTableView.focusWidget = unbound qt slot focusWidget of QTableWidget type","title":"focusWidget"},{"location":"typerig.gui.widgets.html#foregroundrole_1","text":"typerig.gui.widgets.TRTableView.foregroundRole = unbound qt slot foregroundRole of QTableWidget type","title":"foregroundRole"},{"location":"typerig.gui.widgets.html#framestyle","text":"typerig.gui.widgets.TRTableView.frameStyle = unbound qt slot frameStyle of QTableWidget type","title":"frameStyle"},{"location":"typerig.gui.widgets.html#grab_1","text":"typerig.gui.widgets.TRTableView.grab = unbound qt slot grab of QTableWidget type","title":"grab"},{"location":"typerig.gui.widgets.html#grabgesture_1","text":"typerig.gui.widgets.TRTableView.grabGesture = unbound qt slot grabGesture of QTableWidget type","title":"grabGesture"},{"location":"typerig.gui.widgets.html#grabkeyboard_1","text":"typerig.gui.widgets.TRTableView.grabKeyboard = unbound qt slot grabKeyboard of QTableWidget type","title":"grabKeyboard"},{"location":"typerig.gui.widgets.html#grabmouse_1","text":"typerig.gui.widgets.TRTableView.grabMouse = unbound qt slot grabMouse of QTableWidget type","title":"grabMouse"},{"location":"typerig.gui.widgets.html#grabshortcut_1","text":"typerig.gui.widgets.TRTableView.grabShortcut = unbound qt slot grabShortcut of QTableWidget type","title":"grabShortcut"},{"location":"typerig.gui.widgets.html#graphicseffect_1","text":"typerig.gui.widgets.TRTableView.graphicsEffect = unbound qt slot graphicsEffect of QTableWidget type","title":"graphicsEffect"},{"location":"typerig.gui.widgets.html#graphicsproxywidget_1","text":"typerig.gui.widgets.TRTableView.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTableWidget type","title":"graphicsProxyWidget"},{"location":"typerig.gui.widgets.html#hasautoscroll","text":"typerig.gui.widgets.TRTableView.hasAutoScroll = unbound qt slot hasAutoScroll of QTableWidget type","title":"hasAutoScroll"},{"location":"typerig.gui.widgets.html#hasfocus_1","text":"typerig.gui.widgets.TRTableView.hasFocus = unbound qt slot hasFocus of QTableWidget type","title":"hasFocus"},{"location":"typerig.gui.widgets.html#hasheightforwidth_3","text":"typerig.gui.widgets.TRTableView.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTableWidget type","title":"hasHeightForWidth"},{"location":"typerig.gui.widgets.html#hasmousetracking_1","text":"typerig.gui.widgets.TRTableView.hasMouseTracking = unbound qt slot hasMouseTracking of QTableWidget type","title":"hasMouseTracking"},{"location":"typerig.gui.widgets.html#heightforwidth_3","text":"typerig.gui.widgets.TRTableView.heightForWidth = unbound qt slot py_q_heightForWidth of QTableWidget type","title":"heightForWidth"},{"location":"typerig.gui.widgets.html#heightmm_1","text":"typerig.gui.widgets.TRTableView.heightMM = unbound qt slot heightMM of QTableWidget type","title":"heightMM"},{"location":"typerig.gui.widgets.html#help_3","text":"typerig.gui.widgets.TRTableView.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.widgets.html#hide_1","text":"typerig.gui.widgets.TRTableView.hide = unbound qt slot hide of QTableWidget type","title":"hide"},{"location":"typerig.gui.widgets.html#hidecolumn","text":"typerig.gui.widgets.TRTableView.hideColumn = unbound qt slot hideColumn of QTableWidget type","title":"hideColumn"},{"location":"typerig.gui.widgets.html#hideevent_1","text":"typerig.gui.widgets.TRTableView.hideEvent = unbound qt slot py_q_hideEvent of QTableWidget type","title":"hideEvent"},{"location":"typerig.gui.widgets.html#hiderow","text":"typerig.gui.widgets.TRTableView.hideRow = unbound qt slot hideRow of QTableWidget type","title":"hideRow"},{"location":"typerig.gui.widgets.html#horizontalheader","text":"typerig.gui.widgets.TRTableView.horizontalHeader = unbound qt slot horizontalHeader of QTableWidget type","title":"horizontalHeader"},{"location":"typerig.gui.widgets.html#horizontalheaderitem","text":"typerig.gui.widgets.TRTableView.horizontalHeaderItem = unbound qt slot horizontalHeaderItem of QTableWidget type","title":"horizontalHeaderItem"},{"location":"typerig.gui.widgets.html#horizontaloffset","text":"typerig.gui.widgets.TRTableView.horizontalOffset = unbound qt slot py_q_horizontalOffset of QTableWidget type","title":"horizontalOffset"},{"location":"typerig.gui.widgets.html#horizontalscrollbar","text":"typerig.gui.widgets.TRTableView.horizontalScrollBar = unbound qt slot horizontalScrollBar of QTableWidget type","title":"horizontalScrollBar"},{"location":"typerig.gui.widgets.html#indexat","text":"typerig.gui.widgets.TRTableView.indexAt = unbound qt slot py_q_indexAt of QTableWidget type","title":"indexAt"},{"location":"typerig.gui.widgets.html#indexfromitem","text":"typerig.gui.widgets.TRTableView.indexFromItem = unbound qt slot indexFromItem of QTableWidget type","title":"indexFromItem"},{"location":"typerig.gui.widgets.html#indexwidget","text":"typerig.gui.widgets.TRTableView.indexWidget = unbound qt slot indexWidget of QTableWidget type","title":"indexWidget"},{"location":"typerig.gui.widgets.html#inherits_3","text":"typerig.gui.widgets.TRTableView.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.widgets.html#initpainter_1","text":"typerig.gui.widgets.TRTableView.initPainter = unbound qt slot py_q_initPainter of QTableWidget type","title":"initPainter"},{"location":"typerig.gui.widgets.html#initstyleoption","text":"typerig.gui.widgets.TRTableView.initStyleOption = unbound qt slot initStyleOption of QTableWidget type","title":"initStyleOption"},{"location":"typerig.gui.widgets.html#inputmethodevent_1","text":"typerig.gui.widgets.TRTableView.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTableWidget type","title":"inputMethodEvent"},{"location":"typerig.gui.widgets.html#inputmethodquery_1","text":"typerig.gui.widgets.TRTableView.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTableWidget type","title":"inputMethodQuery"},{"location":"typerig.gui.widgets.html#insertaction_1","text":"typerig.gui.widgets.TRTableView.insertAction = unbound qt slot insertAction of QTableWidget type","title":"insertAction"},{"location":"typerig.gui.widgets.html#insertactions_1","text":"typerig.gui.widgets.TRTableView.insertActions = unbound qt slot insertActions of QTableWidget type","title":"insertActions"},{"location":"typerig.gui.widgets.html#insertcolumn","text":"typerig.gui.widgets.TRTableView.insertColumn = unbound qt slot insertColumn of QTableWidget type","title":"insertColumn"},{"location":"typerig.gui.widgets.html#insertrow","text":"typerig.gui.widgets.TRTableView.insertRow = unbound qt slot insertRow of QTableWidget type","title":"insertRow"},{"location":"typerig.gui.widgets.html#installeventfilter_3","text":"typerig.gui.widgets.TRTableView.installEventFilter = unbound qt slot installEventFilter of QTableWidget type","title":"installEventFilter"},{"location":"typerig.gui.widgets.html#isancestorof_1","text":"typerig.gui.widgets.TRTableView.isAncestorOf = unbound qt slot isAncestorOf of QTableWidget type","title":"isAncestorOf"},{"location":"typerig.gui.widgets.html#iscolumnhidden","text":"typerig.gui.widgets.TRTableView.isColumnHidden = unbound qt slot isColumnHidden of QTableWidget type","title":"isColumnHidden"},{"location":"typerig.gui.widgets.html#iscornerbuttonenabled","text":"typerig.gui.widgets.TRTableView.isCornerButtonEnabled = unbound qt slot isCornerButtonEnabled of QTableWidget type","title":"isCornerButtonEnabled"},{"location":"typerig.gui.widgets.html#isenabled_3","text":"typerig.gui.widgets.TRTableView.isEnabled = unbound qt slot isEnabled of QTableWidget type","title":"isEnabled"},{"location":"typerig.gui.widgets.html#isenabledto_1","text":"typerig.gui.widgets.TRTableView.isEnabledTo = unbound qt slot isEnabledTo of QTableWidget type","title":"isEnabledTo"},{"location":"typerig.gui.widgets.html#isfullscreen_1","text":"typerig.gui.widgets.TRTableView.isFullScreen = unbound qt slot isFullScreen of QTableWidget type","title":"isFullScreen"},{"location":"typerig.gui.widgets.html#ishidden_1","text":"typerig.gui.widgets.TRTableView.isHidden = unbound qt slot isHidden of QTableWidget type","title":"isHidden"},{"location":"typerig.gui.widgets.html#isindexhidden","text":"typerig.gui.widgets.TRTableView.isIndexHidden = unbound qt slot py_q_isIndexHidden of QTableWidget type","title":"isIndexHidden"},{"location":"typerig.gui.widgets.html#islefttoright_1","text":"typerig.gui.widgets.TRTableView.isLeftToRight = unbound qt slot isLeftToRight of QTableWidget type","title":"isLeftToRight"},{"location":"typerig.gui.widgets.html#ismaximized_1","text":"typerig.gui.widgets.TRTableView.isMaximized = unbound qt slot isMaximized of QTableWidget type","title":"isMaximized"},{"location":"typerig.gui.widgets.html#isminimized_1","text":"typerig.gui.widgets.TRTableView.isMinimized = unbound qt slot isMinimized of QTableWidget type","title":"isMinimized"},{"location":"typerig.gui.widgets.html#ismodal_1","text":"typerig.gui.widgets.TRTableView.isModal = unbound qt slot isModal of QTableWidget type","title":"isModal"},{"location":"typerig.gui.widgets.html#isrighttoleft_1","text":"typerig.gui.widgets.TRTableView.isRightToLeft = unbound qt slot isRightToLeft of QTableWidget type","title":"isRightToLeft"},{"location":"typerig.gui.widgets.html#isrowhidden","text":"typerig.gui.widgets.TRTableView.isRowHidden = unbound qt slot isRowHidden of QTableWidget type","title":"isRowHidden"},{"location":"typerig.gui.widgets.html#issignalconnected_3","text":"typerig.gui.widgets.TRTableView.isSignalConnected = unbound qt slot isSignalConnected of QTableWidget type","title":"isSignalConnected"},{"location":"typerig.gui.widgets.html#issortingenabled","text":"typerig.gui.widgets.TRTableView.isSortingEnabled = unbound qt slot isSortingEnabled of QTableWidget type","title":"isSortingEnabled"},{"location":"typerig.gui.widgets.html#isvisible_1","text":"typerig.gui.widgets.TRTableView.isVisible = unbound qt slot isVisible of QTableWidget type","title":"isVisible"},{"location":"typerig.gui.widgets.html#isvisibleto_1","text":"typerig.gui.widgets.TRTableView.isVisibleTo = unbound qt slot isVisibleTo of QTableWidget type","title":"isVisibleTo"},{"location":"typerig.gui.widgets.html#iswidgettype_3","text":"typerig.gui.widgets.TRTableView.isWidgetType = unbound qt slot isWidgetType of QTableWidget type","title":"isWidgetType"},{"location":"typerig.gui.widgets.html#iswindow_1","text":"typerig.gui.widgets.TRTableView.isWindow = unbound qt slot isWindow of QTableWidget type","title":"isWindow"},{"location":"typerig.gui.widgets.html#iswindowmodified_1","text":"typerig.gui.widgets.TRTableView.isWindowModified = unbound qt slot isWindowModified of QTableWidget type","title":"isWindowModified"},{"location":"typerig.gui.widgets.html#iswindowtype_3","text":"typerig.gui.widgets.TRTableView.isWindowType = unbound qt slot isWindowType of QTableWidget type","title":"isWindowType"},{"location":"typerig.gui.widgets.html#item","text":"typerig.gui.widgets.TRTableView.item = unbound qt slot item of QTableWidget type","title":"item"},{"location":"typerig.gui.widgets.html#itemat_2","text":"typerig.gui.widgets.TRTableView.itemAt = unbound qt slot itemAt of QTableWidget type","title":"itemAt"},{"location":"typerig.gui.widgets.html#itemdelegate","text":"typerig.gui.widgets.TRTableView.itemDelegate = unbound qt slot itemDelegate of QTableWidget type","title":"itemDelegate"},{"location":"typerig.gui.widgets.html#itemdelegateforcolumn","text":"typerig.gui.widgets.TRTableView.itemDelegateForColumn = unbound qt slot itemDelegateForColumn of QTableWidget type","title":"itemDelegateForColumn"},{"location":"typerig.gui.widgets.html#itemdelegateforrow","text":"typerig.gui.widgets.TRTableView.itemDelegateForRow = unbound qt slot itemDelegateForRow of QTableWidget type","title":"itemDelegateForRow"},{"location":"typerig.gui.widgets.html#itemfromindex","text":"typerig.gui.widgets.TRTableView.itemFromIndex = unbound qt slot itemFromIndex of QTableWidget type","title":"itemFromIndex"},{"location":"typerig.gui.widgets.html#itemprototype","text":"typerig.gui.widgets.TRTableView.itemPrototype = unbound qt slot itemPrototype of QTableWidget type","title":"itemPrototype"},{"location":"typerig.gui.widgets.html#items","text":"typerig.gui.widgets.TRTableView.items = unbound qt slot items of QTableWidget type","title":"items"},{"location":"typerig.gui.widgets.html#keyboardgrabber_1","text":"typerig.gui.widgets.TRTableView.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTableWidget type","title":"keyboardGrabber"},{"location":"typerig.gui.widgets.html#keyboardsearch","text":"typerig.gui.widgets.TRTableView.keyboardSearch = unbound qt slot py_q_keyboardSearch of QTableWidget type","title":"keyboardSearch"},{"location":"typerig.gui.widgets.html#keypressevent_1","text":"typerig.gui.widgets.TRTableView.keyPressEvent = unbound qt slot py_q_keyPressEvent of QTableWidget type","title":"keyPressEvent"},{"location":"typerig.gui.widgets.html#keyreleaseevent_1","text":"typerig.gui.widgets.TRTableView.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTableWidget type","title":"keyReleaseEvent"},{"location":"typerig.gui.widgets.html#killtimer_3","text":"typerig.gui.widgets.TRTableView.killTimer = unbound qt slot killTimer of QTableWidget type","title":"killTimer"},{"location":"typerig.gui.widgets.html#layout_3","text":"typerig.gui.widgets.TRTableView.layout = unbound qt slot layout of QTableWidget type","title":"layout"},{"location":"typerig.gui.widgets.html#leaveevent_1","text":"typerig.gui.widgets.TRTableView.leaveEvent = unbound qt slot py_q_leaveEvent of QTableWidget type","title":"leaveEvent"},{"location":"typerig.gui.widgets.html#logicaldpix_1","text":"typerig.gui.widgets.TRTableView.logicalDpiX = unbound qt slot logicalDpiX of QTableWidget type","title":"logicalDpiX"},{"location":"typerig.gui.widgets.html#logicaldpiy_1","text":"typerig.gui.widgets.TRTableView.logicalDpiY = unbound qt slot logicalDpiY of QTableWidget type","title":"logicalDpiY"},{"location":"typerig.gui.widgets.html#lower_1","text":"typerig.gui.widgets.TRTableView.lower = unbound qt slot lower of QTableWidget type","title":"lower"},{"location":"typerig.gui.widgets.html#mapfrom_1","text":"typerig.gui.widgets.TRTableView.mapFrom = unbound qt slot mapFrom of QTableWidget type","title":"mapFrom"},{"location":"typerig.gui.widgets.html#mapfromglobal_1","text":"typerig.gui.widgets.TRTableView.mapFromGlobal = unbound qt slot mapFromGlobal of QTableWidget type","title":"mapFromGlobal"},{"location":"typerig.gui.widgets.html#mapfromparent_1","text":"typerig.gui.widgets.TRTableView.mapFromParent = unbound qt slot mapFromParent of QTableWidget type","title":"mapFromParent"},{"location":"typerig.gui.widgets.html#mapto_1","text":"typerig.gui.widgets.TRTableView.mapTo = unbound qt slot mapTo of QTableWidget type","title":"mapTo"},{"location":"typerig.gui.widgets.html#maptoglobal_1","text":"typerig.gui.widgets.TRTableView.mapToGlobal = unbound qt slot mapToGlobal of QTableWidget type","title":"mapToGlobal"},{"location":"typerig.gui.widgets.html#maptoparent_1","text":"typerig.gui.widgets.TRTableView.mapToParent = unbound qt slot mapToParent of QTableWidget type","title":"mapToParent"},{"location":"typerig.gui.widgets.html#mask_1","text":"typerig.gui.widgets.TRTableView.mask = unbound qt slot mask of QTableWidget type","title":"mask"},{"location":"typerig.gui.widgets.html#maximumviewportsize","text":"typerig.gui.widgets.TRTableView.maximumViewportSize = unbound qt slot maximumViewportSize of QTableWidget type","title":"maximumViewportSize"},{"location":"typerig.gui.widgets.html#metaobject_3","text":"typerig.gui.widgets.TRTableView.metaObject = unbound qt slot metaObject of QTableWidget type","title":"metaObject"},{"location":"typerig.gui.widgets.html#metric_1","text":"typerig.gui.widgets.TRTableView.metric = unbound qt slot py_q_metric of QTableWidget type","title":"metric"},{"location":"typerig.gui.widgets.html#mimetypes","text":"typerig.gui.widgets.TRTableView.mimeTypes = unbound qt slot py_q_mimeTypes of QTableWidget type","title":"mimeTypes"},{"location":"typerig.gui.widgets.html#model","text":"typerig.gui.widgets.TRTableView.model = unbound qt slot model of QTableWidget type","title":"model"},{"location":"typerig.gui.widgets.html#mousedoubleclickevent_1","text":"typerig.gui.widgets.TRTableView.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTableWidget type","title":"mouseDoubleClickEvent"},{"location":"typerig.gui.widgets.html#mousegrabber_1","text":"typerig.gui.widgets.TRTableView.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTableWidget type","title":"mouseGrabber"},{"location":"typerig.gui.widgets.html#mousemoveevent_1","text":"typerig.gui.widgets.TRTableView.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTableWidget type","title":"mouseMoveEvent"},{"location":"typerig.gui.widgets.html#mousepressevent_1","text":"typerig.gui.widgets.TRTableView.mousePressEvent = unbound qt slot py_q_mousePressEvent of QTableWidget type","title":"mousePressEvent"},{"location":"typerig.gui.widgets.html#mousereleaseevent_1","text":"typerig.gui.widgets.TRTableView.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTableWidget type","title":"mouseReleaseEvent"},{"location":"typerig.gui.widgets.html#move_1","text":"typerig.gui.widgets.TRTableView.move = unbound qt slot move of QTableWidget type","title":"move"},{"location":"typerig.gui.widgets.html#movecursor","text":"typerig.gui.widgets.TRTableView.moveCursor = unbound qt slot moveCursor of QTableWidget type","title":"moveCursor"},{"location":"typerig.gui.widgets.html#moveevent_1","text":"typerig.gui.widgets.TRTableView.moveEvent = unbound qt slot py_q_moveEvent of QTableWidget type","title":"moveEvent"},{"location":"typerig.gui.widgets.html#movetothread_3","text":"typerig.gui.widgets.TRTableView.moveToThread = unbound qt slot moveToThread of QTableWidget type","title":"moveToThread"},{"location":"typerig.gui.widgets.html#nativeevent_1","text":"typerig.gui.widgets.TRTableView.nativeEvent = unbound qt slot py_q_nativeEvent of QTableWidget type","title":"nativeEvent"},{"location":"typerig.gui.widgets.html#nativeparentwidget_1","text":"typerig.gui.widgets.TRTableView.nativeParentWidget = unbound qt slot nativeParentWidget of QTableWidget type","title":"nativeParentWidget"},{"location":"typerig.gui.widgets.html#nextinfocuschain_1","text":"typerig.gui.widgets.TRTableView.nextInFocusChain = unbound qt slot nextInFocusChain of QTableWidget type","title":"nextInFocusChain"},{"location":"typerig.gui.widgets.html#openpersistenteditor","text":"typerig.gui.widgets.TRTableView.openPersistentEditor = unbound qt slot openPersistentEditor of QTableWidget type","title":"openPersistentEditor"},{"location":"typerig.gui.widgets.html#overridewindowflags_1","text":"typerig.gui.widgets.TRTableView.overrideWindowFlags = unbound qt slot overrideWindowFlags of QTableWidget type","title":"overrideWindowFlags"},{"location":"typerig.gui.widgets.html#overridewindowstate_1","text":"typerig.gui.widgets.TRTableView.overrideWindowState = unbound qt slot overrideWindowState of QTableWidget type","title":"overrideWindowState"},{"location":"typerig.gui.widgets.html#paintengine_1","text":"typerig.gui.widgets.TRTableView.paintEngine = unbound qt slot py_q_paintEngine of QTableWidget type","title":"paintEngine"},{"location":"typerig.gui.widgets.html#paintevent_1","text":"typerig.gui.widgets.TRTableView.paintEvent = unbound qt slot py_q_paintEvent of QTableWidget type","title":"paintEvent"},{"location":"typerig.gui.widgets.html#paintingactive_1","text":"typerig.gui.widgets.TRTableView.paintingActive = unbound qt slot paintingActive of QTableWidget type","title":"paintingActive"},{"location":"typerig.gui.widgets.html#parent_3","text":"typerig.gui.widgets.TRTableView.parent = unbound qt slot parent of QTableWidget type","title":"parent"},{"location":"typerig.gui.widgets.html#parentwidget_3","text":"typerig.gui.widgets.TRTableView.parentWidget = unbound qt slot parentWidget of QTableWidget type","title":"parentWidget"},{"location":"typerig.gui.widgets.html#physicaldpix_1","text":"typerig.gui.widgets.TRTableView.physicalDpiX = unbound qt slot physicalDpiX of QTableWidget type","title":"physicalDpiX"},{"location":"typerig.gui.widgets.html#physicaldpiy_1","text":"typerig.gui.widgets.TRTableView.physicalDpiY = unbound qt slot physicalDpiY of QTableWidget type","title":"physicalDpiY"},{"location":"typerig.gui.widgets.html#previousinfocuschain_1","text":"typerig.gui.widgets.TRTableView.previousInFocusChain = unbound qt slot previousInFocusChain of QTableWidget type","title":"previousInFocusChain"},{"location":"typerig.gui.widgets.html#property_3","text":"typerig.gui.widgets.TRTableView.property = unbound qt slot property of QTableWidget type","title":"property"},{"location":"typerig.gui.widgets.html#raise_1","text":"typerig.gui.widgets.TRTableView.raise = unbound qt slot raise of QTableWidget type","title":"raise"},{"location":"typerig.gui.widgets.html#redirected_1","text":"typerig.gui.widgets.TRTableView.redirected = unbound qt slot py_q_redirected of QTableWidget type","title":"redirected"},{"location":"typerig.gui.widgets.html#releasekeyboard_1","text":"typerig.gui.widgets.TRTableView.releaseKeyboard = unbound qt slot releaseKeyboard of QTableWidget type","title":"releaseKeyboard"},{"location":"typerig.gui.widgets.html#releasemouse_1","text":"typerig.gui.widgets.TRTableView.releaseMouse = unbound qt slot releaseMouse of QTableWidget type","title":"releaseMouse"},{"location":"typerig.gui.widgets.html#releaseshortcut_1","text":"typerig.gui.widgets.TRTableView.releaseShortcut = unbound qt slot releaseShortcut of QTableWidget type","title":"releaseShortcut"},{"location":"typerig.gui.widgets.html#removeaction_1","text":"typerig.gui.widgets.TRTableView.removeAction = unbound qt slot removeAction of QTableWidget type","title":"removeAction"},{"location":"typerig.gui.widgets.html#removecellwidget","text":"typerig.gui.widgets.TRTableView.removeCellWidget = unbound qt slot removeCellWidget of QTableWidget type","title":"removeCellWidget"},{"location":"typerig.gui.widgets.html#removecolumn","text":"typerig.gui.widgets.TRTableView.removeColumn = unbound qt slot removeColumn of QTableWidget type","title":"removeColumn"},{"location":"typerig.gui.widgets.html#removeeventfilter_3","text":"typerig.gui.widgets.TRTableView.removeEventFilter = unbound qt slot removeEventFilter of QTableWidget type","title":"removeEventFilter"},{"location":"typerig.gui.widgets.html#removerow","text":"typerig.gui.widgets.TRTableView.removeRow = unbound qt slot removeRow of QTableWidget type","title":"removeRow"},{"location":"typerig.gui.widgets.html#render_1","text":"typerig.gui.widgets.TRTableView.render = unbound qt slot render of QTableWidget type","title":"render"},{"location":"typerig.gui.widgets.html#repaint_1","text":"typerig.gui.widgets.TRTableView.repaint = unbound qt slot repaint of QTableWidget type","title":"repaint"},{"location":"typerig.gui.widgets.html#reset","text":"typerig.gui.widgets.TRTableView.reset = unbound qt slot py_q_reset of QTableWidget type","title":"reset"},{"location":"typerig.gui.widgets.html#resize_1","text":"typerig.gui.widgets.TRTableView.resize = unbound qt slot resize of QTableWidget type","title":"resize"},{"location":"typerig.gui.widgets.html#resizecolumnstocontents","text":"typerig.gui.widgets.TRTableView.resizeColumnsToContents = unbound qt slot resizeColumnsToContents of QTableWidget type","title":"resizeColumnsToContents"},{"location":"typerig.gui.widgets.html#resizecolumntocontents","text":"typerig.gui.widgets.TRTableView.resizeColumnToContents = unbound qt slot resizeColumnToContents of QTableWidget type","title":"resizeColumnToContents"},{"location":"typerig.gui.widgets.html#resizeevent_1","text":"typerig.gui.widgets.TRTableView.resizeEvent = unbound qt slot py_q_resizeEvent of QTableWidget type","title":"resizeEvent"},{"location":"typerig.gui.widgets.html#resizerowstocontents","text":"typerig.gui.widgets.TRTableView.resizeRowsToContents = unbound qt slot resizeRowsToContents of QTableWidget type","title":"resizeRowsToContents"},{"location":"typerig.gui.widgets.html#resizerowtocontents","text":"typerig.gui.widgets.TRTableView.resizeRowToContents = unbound qt slot resizeRowToContents of QTableWidget type","title":"resizeRowToContents"},{"location":"typerig.gui.widgets.html#restoregeometry_1","text":"typerig.gui.widgets.TRTableView.restoreGeometry = unbound qt slot restoreGeometry of QTableWidget type","title":"restoreGeometry"},{"location":"typerig.gui.widgets.html#rootindex","text":"typerig.gui.widgets.TRTableView.rootIndex = unbound qt slot rootIndex of QTableWidget type","title":"rootIndex"},{"location":"typerig.gui.widgets.html#row","text":"typerig.gui.widgets.TRTableView.row = unbound qt slot row of QTableWidget type","title":"row"},{"location":"typerig.gui.widgets.html#rowat","text":"typerig.gui.widgets.TRTableView.rowAt = unbound qt slot rowAt of QTableWidget type","title":"rowAt"},{"location":"typerig.gui.widgets.html#rowheight","text":"typerig.gui.widgets.TRTableView.rowHeight = unbound qt slot rowHeight of QTableWidget type","title":"rowHeight"},{"location":"typerig.gui.widgets.html#rowspan","text":"typerig.gui.widgets.TRTableView.rowSpan = unbound qt slot rowSpan of QTableWidget type","title":"rowSpan"},{"location":"typerig.gui.widgets.html#rowviewportposition","text":"typerig.gui.widgets.TRTableView.rowViewportPosition = unbound qt slot rowViewportPosition of QTableWidget type","title":"rowViewportPosition"},{"location":"typerig.gui.widgets.html#savegeometry_1","text":"typerig.gui.widgets.TRTableView.saveGeometry = unbound qt slot saveGeometry of QTableWidget type","title":"saveGeometry"},{"location":"typerig.gui.widgets.html#scheduledelayeditemslayout","text":"typerig.gui.widgets.TRTableView.scheduleDelayedItemsLayout = unbound qt slot scheduleDelayedItemsLayout of QTableWidget type","title":"scheduleDelayedItemsLayout"},{"location":"typerig.gui.widgets.html#scroll_1","text":"typerig.gui.widgets.TRTableView.scroll = unbound qt slot scroll of QTableWidget type","title":"scroll"},{"location":"typerig.gui.widgets.html#scrollbarwidgets","text":"typerig.gui.widgets.TRTableView.scrollBarWidgets = unbound qt slot scrollBarWidgets of QTableWidget type","title":"scrollBarWidgets"},{"location":"typerig.gui.widgets.html#scrollcontentsby","text":"typerig.gui.widgets.TRTableView.scrollContentsBy = unbound qt slot py_q_scrollContentsBy of QTableWidget type","title":"scrollContentsBy"},{"location":"typerig.gui.widgets.html#scrolldirtyregion","text":"typerig.gui.widgets.TRTableView.scrollDirtyRegion = unbound qt slot scrollDirtyRegion of QTableWidget type","title":"scrollDirtyRegion"},{"location":"typerig.gui.widgets.html#scrollto","text":"typerig.gui.widgets.TRTableView.scrollTo = unbound qt slot py_q_scrollTo of QTableWidget type","title":"scrollTo"},{"location":"typerig.gui.widgets.html#scrolltobottom","text":"typerig.gui.widgets.TRTableView.scrollToBottom = unbound qt slot scrollToBottom of QTableWidget type","title":"scrollToBottom"},{"location":"typerig.gui.widgets.html#scrolltoitem","text":"typerig.gui.widgets.TRTableView.scrollToItem = unbound qt slot scrollToItem of QTableWidget type","title":"scrollToItem"},{"location":"typerig.gui.widgets.html#scrolltotop","text":"typerig.gui.widgets.TRTableView.scrollToTop = unbound qt slot scrollToTop of QTableWidget type","title":"scrollToTop"},{"location":"typerig.gui.widgets.html#selectall","text":"typerig.gui.widgets.TRTableView.selectAll = unbound qt slot py_q_selectAll of QTableWidget type","title":"selectAll"},{"location":"typerig.gui.widgets.html#selectcolumn","text":"typerig.gui.widgets.TRTableView.selectColumn = unbound qt slot selectColumn of QTableWidget type","title":"selectColumn"},{"location":"typerig.gui.widgets.html#selectedindexes","text":"typerig.gui.widgets.TRTableView.selectedIndexes = unbound qt slot py_q_selectedIndexes of QTableWidget type","title":"selectedIndexes"},{"location":"typerig.gui.widgets.html#selecteditems","text":"typerig.gui.widgets.TRTableView.selectedItems = unbound qt slot selectedItems of QTableWidget type","title":"selectedItems"},{"location":"typerig.gui.widgets.html#selectedranges","text":"typerig.gui.widgets.TRTableView.selectedRanges = unbound qt slot selectedRanges of QTableWidget type","title":"selectedRanges"},{"location":"typerig.gui.widgets.html#selectioncommand","text":"typerig.gui.widgets.TRTableView.selectionCommand = unbound qt slot py_q_selectionCommand of QTableWidget type","title":"selectionCommand"},{"location":"typerig.gui.widgets.html#selectionmodel","text":"typerig.gui.widgets.TRTableView.selectionModel = unbound qt slot selectionModel of QTableWidget type","title":"selectionModel"},{"location":"typerig.gui.widgets.html#selectrow","text":"typerig.gui.widgets.TRTableView.selectRow = unbound qt slot selectRow of QTableWidget type","title":"selectRow"},{"location":"typerig.gui.widgets.html#sender_3","text":"typerig.gui.widgets.TRTableView.sender = unbound qt slot sender of QTableWidget type","title":"sender"},{"location":"typerig.gui.widgets.html#sendersignalindex_3","text":"typerig.gui.widgets.TRTableView.senderSignalIndex = unbound qt slot senderSignalIndex of QTableWidget type","title":"senderSignalIndex"},{"location":"typerig.gui.widgets.html#setacceptdrops_1","text":"typerig.gui.widgets.TRTableView.setAcceptDrops = unbound qt slot setAcceptDrops of QTableWidget type","title":"setAcceptDrops"},{"location":"typerig.gui.widgets.html#setaccessibledescription_1","text":"typerig.gui.widgets.TRTableView.setAccessibleDescription = unbound qt slot setAccessibleDescription of QTableWidget type","title":"setAccessibleDescription"},{"location":"typerig.gui.widgets.html#setaccessiblename_1","text":"typerig.gui.widgets.TRTableView.setAccessibleName = unbound qt slot setAccessibleName of QTableWidget type","title":"setAccessibleName"},{"location":"typerig.gui.widgets.html#setalternatingrowcolors","text":"typerig.gui.widgets.TRTableView.setAlternatingRowColors = unbound qt slot setAlternatingRowColors of QTableWidget type","title":"setAlternatingRowColors"},{"location":"typerig.gui.widgets.html#setattribute_1","text":"typerig.gui.widgets.TRTableView.setAttribute = unbound qt slot setAttribute of QTableWidget type","title":"setAttribute"},{"location":"typerig.gui.widgets.html#setautofillbackground_1","text":"typerig.gui.widgets.TRTableView.setAutoFillBackground = unbound qt slot setAutoFillBackground of QTableWidget type","title":"setAutoFillBackground"},{"location":"typerig.gui.widgets.html#setautoscroll","text":"typerig.gui.widgets.TRTableView.setAutoScroll = unbound qt slot setAutoScroll of QTableWidget type","title":"setAutoScroll"},{"location":"typerig.gui.widgets.html#setautoscrollmargin","text":"typerig.gui.widgets.TRTableView.setAutoScrollMargin = unbound qt slot setAutoScrollMargin of QTableWidget type","title":"setAutoScrollMargin"},{"location":"typerig.gui.widgets.html#setbackgroundrole_1","text":"typerig.gui.widgets.TRTableView.setBackgroundRole = unbound qt slot setBackgroundRole of QTableWidget type","title":"setBackgroundRole"},{"location":"typerig.gui.widgets.html#setbasesize_1","text":"typerig.gui.widgets.TRTableView.setBaseSize = unbound qt slot setBaseSize of QTableWidget type","title":"setBaseSize"},{"location":"typerig.gui.widgets.html#setcellwidget","text":"typerig.gui.widgets.TRTableView.setCellWidget = unbound qt slot setCellWidget of QTableWidget type","title":"setCellWidget"},{"location":"typerig.gui.widgets.html#setcolumncount","text":"typerig.gui.widgets.TRTableView.setColumnCount = unbound qt slot setColumnCount of QTableWidget type","title":"setColumnCount"},{"location":"typerig.gui.widgets.html#setcolumnhidden","text":"typerig.gui.widgets.TRTableView.setColumnHidden = unbound qt slot setColumnHidden of QTableWidget type","title":"setColumnHidden"},{"location":"typerig.gui.widgets.html#setcolumnwidth","text":"typerig.gui.widgets.TRTableView.setColumnWidth = unbound qt slot setColumnWidth of QTableWidget type","title":"setColumnWidth"},{"location":"typerig.gui.widgets.html#setcontentsmargins_3","text":"typerig.gui.widgets.TRTableView.setContentsMargins = unbound qt slot setContentsMargins of QTableWidget type","title":"setContentsMargins"},{"location":"typerig.gui.widgets.html#setcontextmenupolicy_1","text":"typerig.gui.widgets.TRTableView.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTableWidget type","title":"setContextMenuPolicy"},{"location":"typerig.gui.widgets.html#setcornerbuttonenabled","text":"typerig.gui.widgets.TRTableView.setCornerButtonEnabled = unbound qt slot setCornerButtonEnabled of QTableWidget type","title":"setCornerButtonEnabled"},{"location":"typerig.gui.widgets.html#setcornerwidget","text":"typerig.gui.widgets.TRTableView.setCornerWidget = unbound qt slot setCornerWidget of QTableWidget type","title":"setCornerWidget"},{"location":"typerig.gui.widgets.html#setcurrentcell","text":"typerig.gui.widgets.TRTableView.setCurrentCell = unbound qt slot setCurrentCell of QTableWidget type","title":"setCurrentCell"},{"location":"typerig.gui.widgets.html#setcurrentindex","text":"typerig.gui.widgets.TRTableView.setCurrentIndex = unbound qt slot setCurrentIndex of QTableWidget type","title":"setCurrentIndex"},{"location":"typerig.gui.widgets.html#setcurrentitem","text":"typerig.gui.widgets.TRTableView.setCurrentItem = unbound qt slot setCurrentItem of QTableWidget type","title":"setCurrentItem"},{"location":"typerig.gui.widgets.html#setcursor_1","text":"typerig.gui.widgets.TRTableView.setCursor = unbound qt slot setCursor of QTableWidget type","title":"setCursor"},{"location":"typerig.gui.widgets.html#setdefaultdropaction","text":"typerig.gui.widgets.TRTableView.setDefaultDropAction = unbound qt slot setDefaultDropAction of QTableWidget type","title":"setDefaultDropAction"},{"location":"typerig.gui.widgets.html#setdirtyregion","text":"typerig.gui.widgets.TRTableView.setDirtyRegion = unbound qt slot setDirtyRegion of QTableWidget type","title":"setDirtyRegion"},{"location":"typerig.gui.widgets.html#setdisabled_1","text":"typerig.gui.widgets.TRTableView.setDisabled = unbound qt slot setDisabled of QTableWidget type","title":"setDisabled"},{"location":"typerig.gui.widgets.html#setdragdropmode","text":"typerig.gui.widgets.TRTableView.setDragDropMode = unbound qt slot setDragDropMode of QTableWidget type","title":"setDragDropMode"},{"location":"typerig.gui.widgets.html#setdragdropoverwritemode","text":"typerig.gui.widgets.TRTableView.setDragDropOverwriteMode = unbound qt slot setDragDropOverwriteMode of QTableWidget type","title":"setDragDropOverwriteMode"},{"location":"typerig.gui.widgets.html#setdragenabled","text":"typerig.gui.widgets.TRTableView.setDragEnabled = unbound qt slot setDragEnabled of QTableWidget type","title":"setDragEnabled"},{"location":"typerig.gui.widgets.html#setdropindicatorshown","text":"typerig.gui.widgets.TRTableView.setDropIndicatorShown = unbound qt slot setDropIndicatorShown of QTableWidget type","title":"setDropIndicatorShown"},{"location":"typerig.gui.widgets.html#setedittriggers","text":"typerig.gui.widgets.TRTableView.setEditTriggers = unbound qt slot setEditTriggers of QTableWidget type","title":"setEditTriggers"},{"location":"typerig.gui.widgets.html#setenabled_3","text":"typerig.gui.widgets.TRTableView.setEnabled = unbound qt slot setEnabled of QTableWidget type","title":"setEnabled"},{"location":"typerig.gui.widgets.html#setfixedheight_1","text":"typerig.gui.widgets.TRTableView.setFixedHeight = unbound qt slot setFixedHeight of QTableWidget type","title":"setFixedHeight"},{"location":"typerig.gui.widgets.html#setfixedsize_1","text":"typerig.gui.widgets.TRTableView.setFixedSize = unbound qt slot setFixedSize of QTableWidget type","title":"setFixedSize"},{"location":"typerig.gui.widgets.html#setfixedwidth_1","text":"typerig.gui.widgets.TRTableView.setFixedWidth = unbound qt slot setFixedWidth of QTableWidget type","title":"setFixedWidth"},{"location":"typerig.gui.widgets.html#setfocus_1","text":"typerig.gui.widgets.TRTableView.setFocus = unbound qt slot setFocus of QTableWidget type","title":"setFocus"},{"location":"typerig.gui.widgets.html#setfocuspolicy_1","text":"typerig.gui.widgets.TRTableView.setFocusPolicy = unbound qt slot setFocusPolicy of QTableWidget type","title":"setFocusPolicy"},{"location":"typerig.gui.widgets.html#setfocusproxy_1","text":"typerig.gui.widgets.TRTableView.setFocusProxy = unbound qt slot setFocusProxy of QTableWidget type","title":"setFocusProxy"},{"location":"typerig.gui.widgets.html#setfont_1","text":"typerig.gui.widgets.TRTableView.setFont = unbound qt slot setFont of QTableWidget type","title":"setFont"},{"location":"typerig.gui.widgets.html#setforegroundrole_1","text":"typerig.gui.widgets.TRTableView.setForegroundRole = unbound qt slot setForegroundRole of QTableWidget type","title":"setForegroundRole"},{"location":"typerig.gui.widgets.html#setframerect","text":"typerig.gui.widgets.TRTableView.setFrameRect = unbound qt slot setFrameRect of QTableWidget type","title":"setFrameRect"},{"location":"typerig.gui.widgets.html#setframeshadow","text":"typerig.gui.widgets.TRTableView.setFrameShadow = unbound qt slot setFrameShadow of QTableWidget type","title":"setFrameShadow"},{"location":"typerig.gui.widgets.html#setframeshape","text":"typerig.gui.widgets.TRTableView.setFrameShape = unbound qt slot setFrameShape of QTableWidget type","title":"setFrameShape"},{"location":"typerig.gui.widgets.html#setframestyle","text":"typerig.gui.widgets.TRTableView.setFrameStyle = unbound qt slot setFrameStyle of QTableWidget type","title":"setFrameStyle"},{"location":"typerig.gui.widgets.html#setgeometry_3","text":"typerig.gui.widgets.TRTableView.setGeometry = unbound qt slot setGeometry of QTableWidget type","title":"setGeometry"},{"location":"typerig.gui.widgets.html#setgraphicseffect_1","text":"typerig.gui.widgets.TRTableView.setGraphicsEffect = unbound qt slot setGraphicsEffect of QTableWidget type","title":"setGraphicsEffect"},{"location":"typerig.gui.widgets.html#setgridstyle","text":"typerig.gui.widgets.TRTableView.setGridStyle = unbound qt slot setGridStyle of QTableWidget type","title":"setGridStyle"},{"location":"typerig.gui.widgets.html#sethidden_1","text":"typerig.gui.widgets.TRTableView.setHidden = unbound qt slot setHidden of QTableWidget type","title":"setHidden"},{"location":"typerig.gui.widgets.html#sethorizontalheader","text":"typerig.gui.widgets.TRTableView.setHorizontalHeader = unbound qt slot setHorizontalHeader of QTableWidget type","title":"setHorizontalHeader"},{"location":"typerig.gui.widgets.html#sethorizontalheaderitem","text":"typerig.gui.widgets.TRTableView.setHorizontalHeaderItem = unbound qt slot setHorizontalHeaderItem of QTableWidget type","title":"setHorizontalHeaderItem"},{"location":"typerig.gui.widgets.html#sethorizontalheaderlabels","text":"typerig.gui.widgets.TRTableView.setHorizontalHeaderLabels = unbound qt slot setHorizontalHeaderLabels of QTableWidget type","title":"setHorizontalHeaderLabels"},{"location":"typerig.gui.widgets.html#sethorizontalscrollbar","text":"typerig.gui.widgets.TRTableView.setHorizontalScrollBar = unbound qt slot setHorizontalScrollBar of QTableWidget type","title":"setHorizontalScrollBar"},{"location":"typerig.gui.widgets.html#sethorizontalscrollbarpolicy","text":"typerig.gui.widgets.TRTableView.setHorizontalScrollBarPolicy = unbound qt slot setHorizontalScrollBarPolicy of QTableWidget type","title":"setHorizontalScrollBarPolicy"},{"location":"typerig.gui.widgets.html#sethorizontalscrollmode","text":"typerig.gui.widgets.TRTableView.setHorizontalScrollMode = unbound qt slot setHorizontalScrollMode of QTableWidget type","title":"setHorizontalScrollMode"},{"location":"typerig.gui.widgets.html#seticonsize","text":"typerig.gui.widgets.TRTableView.setIconSize = unbound qt slot setIconSize of QTableWidget type","title":"setIconSize"},{"location":"typerig.gui.widgets.html#setindexwidget","text":"typerig.gui.widgets.TRTableView.setIndexWidget = unbound qt slot setIndexWidget of QTableWidget type","title":"setIndexWidget"},{"location":"typerig.gui.widgets.html#setinputmethodhints_1","text":"typerig.gui.widgets.TRTableView.setInputMethodHints = unbound qt slot setInputMethodHints of QTableWidget type","title":"setInputMethodHints"},{"location":"typerig.gui.widgets.html#setitem","text":"typerig.gui.widgets.TRTableView.setItem = unbound qt slot setItem of QTableWidget type","title":"setItem"},{"location":"typerig.gui.widgets.html#setitemdelegate","text":"typerig.gui.widgets.TRTableView.setItemDelegate = unbound qt slot setItemDelegate of QTableWidget type","title":"setItemDelegate"},{"location":"typerig.gui.widgets.html#setitemdelegateforcolumn","text":"typerig.gui.widgets.TRTableView.setItemDelegateForColumn = unbound qt slot setItemDelegateForColumn of QTableWidget type","title":"setItemDelegateForColumn"},{"location":"typerig.gui.widgets.html#setitemdelegateforrow","text":"typerig.gui.widgets.TRTableView.setItemDelegateForRow = unbound qt slot setItemDelegateForRow of QTableWidget type","title":"setItemDelegateForRow"},{"location":"typerig.gui.widgets.html#setitemprototype","text":"typerig.gui.widgets.TRTableView.setItemPrototype = unbound qt slot setItemPrototype of QTableWidget type","title":"setItemPrototype"},{"location":"typerig.gui.widgets.html#setlayout_1","text":"typerig.gui.widgets.TRTableView.setLayout = unbound qt slot setLayout of QTableWidget type","title":"setLayout"},{"location":"typerig.gui.widgets.html#setlayoutdirection_1","text":"typerig.gui.widgets.TRTableView.setLayoutDirection = unbound qt slot setLayoutDirection of QTableWidget type","title":"setLayoutDirection"},{"location":"typerig.gui.widgets.html#setlinewidth","text":"typerig.gui.widgets.TRTableView.setLineWidth = unbound qt slot setLineWidth of QTableWidget type","title":"setLineWidth"},{"location":"typerig.gui.widgets.html#setlocale_1","text":"typerig.gui.widgets.TRTableView.setLocale = unbound qt slot setLocale of QTableWidget type","title":"setLocale"},{"location":"typerig.gui.widgets.html#setmask_1","text":"typerig.gui.widgets.TRTableView.setMask = unbound qt slot setMask of QTableWidget type","title":"setMask"},{"location":"typerig.gui.widgets.html#setmaximumheight_1","text":"typerig.gui.widgets.TRTableView.setMaximumHeight = unbound qt slot setMaximumHeight of QTableWidget type","title":"setMaximumHeight"},{"location":"typerig.gui.widgets.html#setmaximumsize_1","text":"typerig.gui.widgets.TRTableView.setMaximumSize = unbound qt slot setMaximumSize of QTableWidget type","title":"setMaximumSize"},{"location":"typerig.gui.widgets.html#setmaximumwidth_1","text":"typerig.gui.widgets.TRTableView.setMaximumWidth = unbound qt slot setMaximumWidth of QTableWidget type","title":"setMaximumWidth"},{"location":"typerig.gui.widgets.html#setmidlinewidth","text":"typerig.gui.widgets.TRTableView.setMidLineWidth = unbound qt slot setMidLineWidth of QTableWidget type","title":"setMidLineWidth"},{"location":"typerig.gui.widgets.html#setminimumheight_1","text":"typerig.gui.widgets.TRTableView.setMinimumHeight = unbound qt slot setMinimumHeight of QTableWidget type","title":"setMinimumHeight"},{"location":"typerig.gui.widgets.html#setminimumsize_1","text":"typerig.gui.widgets.TRTableView.setMinimumSize = unbound qt slot setMinimumSize of QTableWidget type","title":"setMinimumSize"},{"location":"typerig.gui.widgets.html#setminimumwidth_1","text":"typerig.gui.widgets.TRTableView.setMinimumWidth = unbound qt slot setMinimumWidth of QTableWidget type","title":"setMinimumWidth"},{"location":"typerig.gui.widgets.html#setmodel","text":"typerig.gui.widgets.TRTableView.setModel = unbound qt slot py_q_setModel of QTableWidget type","title":"setModel"},{"location":"typerig.gui.widgets.html#setmousetracking_1","text":"typerig.gui.widgets.TRTableView.setMouseTracking = unbound qt slot setMouseTracking of QTableWidget type","title":"setMouseTracking"},{"location":"typerig.gui.widgets.html#setobjectname_3","text":"typerig.gui.widgets.TRTableView.setObjectName = unbound qt slot setObjectName of QTableWidget type","title":"setObjectName"},{"location":"typerig.gui.widgets.html#setpalette_1","text":"typerig.gui.widgets.TRTableView.setPalette = unbound qt slot setPalette of QTableWidget type","title":"setPalette"},{"location":"typerig.gui.widgets.html#setparent_3","text":"typerig.gui.widgets.TRTableView.setParent = unbound qt slot setParent of QTableWidget type","title":"setParent"},{"location":"typerig.gui.widgets.html#setproperty_3","text":"typerig.gui.widgets.TRTableView.setProperty = unbound qt slot setProperty of QTableWidget type","title":"setProperty"},{"location":"typerig.gui.widgets.html#setrangeselected","text":"typerig.gui.widgets.TRTableView.setRangeSelected = unbound qt slot setRangeSelected of QTableWidget type","title":"setRangeSelected"},{"location":"typerig.gui.widgets.html#setrootindex","text":"typerig.gui.widgets.TRTableView.setRootIndex = unbound qt slot py_q_setRootIndex of QTableWidget type","title":"setRootIndex"},{"location":"typerig.gui.widgets.html#setrowcount","text":"typerig.gui.widgets.TRTableView.setRowCount = unbound qt slot setRowCount of QTableWidget type","title":"setRowCount"},{"location":"typerig.gui.widgets.html#setrowheight","text":"typerig.gui.widgets.TRTableView.setRowHeight = unbound qt slot setRowHeight of QTableWidget type","title":"setRowHeight"},{"location":"typerig.gui.widgets.html#setrowhidden","text":"typerig.gui.widgets.TRTableView.setRowHidden = unbound qt slot setRowHidden of QTableWidget type","title":"setRowHidden"},{"location":"typerig.gui.widgets.html#setselection","text":"typerig.gui.widgets.TRTableView.setSelection = unbound qt slot py_q_setSelection of QTableWidget type","title":"setSelection"},{"location":"typerig.gui.widgets.html#setselectionbehavior","text":"typerig.gui.widgets.TRTableView.setSelectionBehavior = unbound qt slot setSelectionBehavior of QTableWidget type","title":"setSelectionBehavior"},{"location":"typerig.gui.widgets.html#setselectionmode","text":"typerig.gui.widgets.TRTableView.setSelectionMode = unbound qt slot setSelectionMode of QTableWidget type","title":"setSelectionMode"},{"location":"typerig.gui.widgets.html#setselectionmodel","text":"typerig.gui.widgets.TRTableView.setSelectionModel = unbound qt slot py_q_setSelectionModel of QTableWidget type","title":"setSelectionModel"},{"location":"typerig.gui.widgets.html#setshortcutautorepeat_1","text":"typerig.gui.widgets.TRTableView.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTableWidget type","title":"setShortcutAutoRepeat"},{"location":"typerig.gui.widgets.html#setshortcutenabled_1","text":"typerig.gui.widgets.TRTableView.setShortcutEnabled = unbound qt slot setShortcutEnabled of QTableWidget type","title":"setShortcutEnabled"},{"location":"typerig.gui.widgets.html#setshowgrid","text":"typerig.gui.widgets.TRTableView.setShowGrid = unbound qt slot setShowGrid of QTableWidget type","title":"setShowGrid"},{"location":"typerig.gui.widgets.html#setsizeadjustpolicy","text":"typerig.gui.widgets.TRTableView.setSizeAdjustPolicy = unbound qt slot setSizeAdjustPolicy of QTableWidget type","title":"setSizeAdjustPolicy"},{"location":"typerig.gui.widgets.html#setsizeincrement_1","text":"typerig.gui.widgets.TRTableView.setSizeIncrement = unbound qt slot setSizeIncrement of QTableWidget type","title":"setSizeIncrement"},{"location":"typerig.gui.widgets.html#setsizepolicy_1","text":"typerig.gui.widgets.TRTableView.setSizePolicy = unbound qt slot setSizePolicy of QTableWidget type","title":"setSizePolicy"},{"location":"typerig.gui.widgets.html#setsortingenabled","text":"typerig.gui.widgets.TRTableView.setSortingEnabled = unbound qt slot setSortingEnabled of QTableWidget type","title":"setSortingEnabled"},{"location":"typerig.gui.widgets.html#setspan","text":"typerig.gui.widgets.TRTableView.setSpan = unbound qt slot setSpan of QTableWidget type","title":"setSpan"},{"location":"typerig.gui.widgets.html#setstate","text":"typerig.gui.widgets.TRTableView.setState = unbound qt slot setState of QTableWidget type","title":"setState"},{"location":"typerig.gui.widgets.html#setstatustip_1","text":"typerig.gui.widgets.TRTableView.setStatusTip = unbound qt slot setStatusTip of QTableWidget type","title":"setStatusTip"},{"location":"typerig.gui.widgets.html#setstyle_1","text":"typerig.gui.widgets.TRTableView.setStyle = unbound qt slot setStyle of QTableWidget type","title":"setStyle"},{"location":"typerig.gui.widgets.html#setstylesheet_1","text":"typerig.gui.widgets.TRTableView.setStyleSheet = unbound qt slot setStyleSheet of QTableWidget type","title":"setStyleSheet"},{"location":"typerig.gui.widgets.html#settabkeynavigation","text":"typerig.gui.widgets.TRTableView.setTabKeyNavigation = unbound qt slot setTabKeyNavigation of QTableWidget type","title":"setTabKeyNavigation"},{"location":"typerig.gui.widgets.html#settaborder_1","text":"typerig.gui.widgets.TRTableView.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTableWidget type","title":"setTabOrder"},{"location":"typerig.gui.widgets.html#settextelidemode","text":"typerig.gui.widgets.TRTableView.setTextElideMode = unbound qt slot setTextElideMode of QTableWidget type","title":"setTextElideMode"},{"location":"typerig.gui.widgets.html#settooltip_1","text":"typerig.gui.widgets.TRTableView.setToolTip = unbound qt slot setToolTip of QTableWidget type","title":"setToolTip"},{"location":"typerig.gui.widgets.html#settooltipduration_1","text":"typerig.gui.widgets.TRTableView.setToolTipDuration = unbound qt slot setToolTipDuration of QTableWidget type","title":"setToolTipDuration"},{"location":"typerig.gui.widgets.html#setupdatesenabled_1","text":"typerig.gui.widgets.TRTableView.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTableWidget type","title":"setUpdatesEnabled"},{"location":"typerig.gui.widgets.html#setupviewport","text":"typerig.gui.widgets.TRTableView.setupViewport = unbound qt slot py_q_setupViewport of QTableWidget type","title":"setupViewport"},{"location":"typerig.gui.widgets.html#setverticalheader","text":"typerig.gui.widgets.TRTableView.setVerticalHeader = unbound qt slot setVerticalHeader of QTableWidget type","title":"setVerticalHeader"},{"location":"typerig.gui.widgets.html#setverticalheaderitem","text":"typerig.gui.widgets.TRTableView.setVerticalHeaderItem = unbound qt slot setVerticalHeaderItem of QTableWidget type","title":"setVerticalHeaderItem"},{"location":"typerig.gui.widgets.html#setverticalheaderlabels","text":"typerig.gui.widgets.TRTableView.setVerticalHeaderLabels = unbound qt slot setVerticalHeaderLabels of QTableWidget type","title":"setVerticalHeaderLabels"},{"location":"typerig.gui.widgets.html#setverticalscrollbar","text":"typerig.gui.widgets.TRTableView.setVerticalScrollBar = unbound qt slot setVerticalScrollBar of QTableWidget type","title":"setVerticalScrollBar"},{"location":"typerig.gui.widgets.html#setverticalscrollbarpolicy","text":"typerig.gui.widgets.TRTableView.setVerticalScrollBarPolicy = unbound qt slot setVerticalScrollBarPolicy of QTableWidget type","title":"setVerticalScrollBarPolicy"},{"location":"typerig.gui.widgets.html#setverticalscrollmode","text":"typerig.gui.widgets.TRTableView.setVerticalScrollMode = unbound qt slot setVerticalScrollMode of QTableWidget type","title":"setVerticalScrollMode"},{"location":"typerig.gui.widgets.html#setviewport","text":"typerig.gui.widgets.TRTableView.setViewport = unbound qt slot setViewport of QTableWidget type","title":"setViewport"},{"location":"typerig.gui.widgets.html#setviewportmargins","text":"typerig.gui.widgets.TRTableView.setViewportMargins = unbound qt slot setViewportMargins of QTableWidget type","title":"setViewportMargins"},{"location":"typerig.gui.widgets.html#setvisible_1","text":"typerig.gui.widgets.TRTableView.setVisible = unbound qt slot py_q_setVisible of QTableWidget type","title":"setVisible"},{"location":"typerig.gui.widgets.html#setwhatsthis_1","text":"typerig.gui.widgets.TRTableView.setWhatsThis = unbound qt slot setWhatsThis of QTableWidget type","title":"setWhatsThis"},{"location":"typerig.gui.widgets.html#setwindowfilepath_1","text":"typerig.gui.widgets.TRTableView.setWindowFilePath = unbound qt slot setWindowFilePath of QTableWidget type","title":"setWindowFilePath"},{"location":"typerig.gui.widgets.html#setwindowflags_1","text":"typerig.gui.widgets.TRTableView.setWindowFlags = unbound qt slot setWindowFlags of QTableWidget type","title":"setWindowFlags"},{"location":"typerig.gui.widgets.html#setwindowicon_1","text":"typerig.gui.widgets.TRTableView.setWindowIcon = unbound qt slot setWindowIcon of QTableWidget type","title":"setWindowIcon"},{"location":"typerig.gui.widgets.html#setwindowicontext_1","text":"typerig.gui.widgets.TRTableView.setWindowIconText = unbound qt slot setWindowIconText of QTableWidget type","title":"setWindowIconText"},{"location":"typerig.gui.widgets.html#setwindowmodality_1","text":"typerig.gui.widgets.TRTableView.setWindowModality = unbound qt slot setWindowModality of QTableWidget type","title":"setWindowModality"},{"location":"typerig.gui.widgets.html#setwindowmodified_1","text":"typerig.gui.widgets.TRTableView.setWindowModified = unbound qt slot setWindowModified of QTableWidget type","title":"setWindowModified"},{"location":"typerig.gui.widgets.html#setwindowopacity_1","text":"typerig.gui.widgets.TRTableView.setWindowOpacity = unbound qt slot setWindowOpacity of QTableWidget type","title":"setWindowOpacity"},{"location":"typerig.gui.widgets.html#setwindowrole_1","text":"typerig.gui.widgets.TRTableView.setWindowRole = unbound qt slot setWindowRole of QTableWidget type","title":"setWindowRole"},{"location":"typerig.gui.widgets.html#setwindowstate_1","text":"typerig.gui.widgets.TRTableView.setWindowState = unbound qt slot setWindowState of QTableWidget type","title":"setWindowState"},{"location":"typerig.gui.widgets.html#setwindowtitle_1","text":"typerig.gui.widgets.TRTableView.setWindowTitle = unbound qt slot setWindowTitle of QTableWidget type","title":"setWindowTitle"},{"location":"typerig.gui.widgets.html#setwordwrap","text":"typerig.gui.widgets.TRTableView.setWordWrap = unbound qt slot setWordWrap of QTableWidget type","title":"setWordWrap"},{"location":"typerig.gui.widgets.html#sharedpainter_1","text":"typerig.gui.widgets.TRTableView.sharedPainter = unbound qt slot py_q_sharedPainter of QTableWidget type","title":"sharedPainter"},{"location":"typerig.gui.widgets.html#show_1","text":"typerig.gui.widgets.TRTableView.show = unbound qt slot show of QTableWidget type","title":"show"},{"location":"typerig.gui.widgets.html#showcolumn","text":"typerig.gui.widgets.TRTableView.showColumn = unbound qt slot showColumn of QTableWidget type","title":"showColumn"},{"location":"typerig.gui.widgets.html#showevent_1","text":"typerig.gui.widgets.TRTableView.showEvent = unbound qt slot py_q_showEvent of QTableWidget type","title":"showEvent"},{"location":"typerig.gui.widgets.html#showfullscreen_1","text":"typerig.gui.widgets.TRTableView.showFullScreen = unbound qt slot showFullScreen of QTableWidget type","title":"showFullScreen"},{"location":"typerig.gui.widgets.html#showmaximized_1","text":"typerig.gui.widgets.TRTableView.showMaximized = unbound qt slot showMaximized of QTableWidget type","title":"showMaximized"},{"location":"typerig.gui.widgets.html#showminimized_1","text":"typerig.gui.widgets.TRTableView.showMinimized = unbound qt slot showMinimized of QTableWidget type","title":"showMinimized"},{"location":"typerig.gui.widgets.html#shownormal_1","text":"typerig.gui.widgets.TRTableView.showNormal = unbound qt slot showNormal of QTableWidget type","title":"showNormal"},{"location":"typerig.gui.widgets.html#showrow","text":"typerig.gui.widgets.TRTableView.showRow = unbound qt slot showRow of QTableWidget type","title":"showRow"},{"location":"typerig.gui.widgets.html#signalsblocked_3","text":"typerig.gui.widgets.TRTableView.signalsBlocked = unbound qt slot signalsBlocked of QTableWidget type","title":"signalsBlocked"},{"location":"typerig.gui.widgets.html#sizehintforcolumn","text":"typerig.gui.widgets.TRTableView.sizeHintForColumn = unbound qt slot py_q_sizeHintForColumn of QTableWidget type","title":"sizeHintForColumn"},{"location":"typerig.gui.widgets.html#sizehintforindex","text":"typerig.gui.widgets.TRTableView.sizeHintForIndex = unbound qt slot sizeHintForIndex of QTableWidget type","title":"sizeHintForIndex"},{"location":"typerig.gui.widgets.html#sizehintforrow","text":"typerig.gui.widgets.TRTableView.sizeHintForRow = unbound qt slot py_q_sizeHintForRow of QTableWidget type","title":"sizeHintForRow"},{"location":"typerig.gui.widgets.html#sortbycolumn","text":"typerig.gui.widgets.TRTableView.sortByColumn = unbound qt slot sortByColumn of QTableWidget type","title":"sortByColumn"},{"location":"typerig.gui.widgets.html#sortitems","text":"typerig.gui.widgets.TRTableView.sortItems = unbound qt slot sortItems of QTableWidget type","title":"sortItems"},{"location":"typerig.gui.widgets.html#stackunder_1","text":"typerig.gui.widgets.TRTableView.stackUnder = unbound qt slot stackUnder of QTableWidget type","title":"stackUnder"},{"location":"typerig.gui.widgets.html#startautoscroll","text":"typerig.gui.widgets.TRTableView.startAutoScroll = unbound qt slot startAutoScroll of QTableWidget type","title":"startAutoScroll"},{"location":"typerig.gui.widgets.html#startdrag","text":"typerig.gui.widgets.TRTableView.startDrag = unbound qt slot py_q_startDrag of QTableWidget type","title":"startDrag"},{"location":"typerig.gui.widgets.html#starttimer_3","text":"typerig.gui.widgets.TRTableView.startTimer = unbound qt slot startTimer of QTableWidget type","title":"startTimer"},{"location":"typerig.gui.widgets.html#state","text":"typerig.gui.widgets.TRTableView.state = unbound qt slot state of QTableWidget type","title":"state"},{"location":"typerig.gui.widgets.html#stopautoscroll","text":"typerig.gui.widgets.TRTableView.stopAutoScroll = unbound qt slot stopAutoScroll of QTableWidget type","title":"stopAutoScroll"},{"location":"typerig.gui.widgets.html#style_1","text":"typerig.gui.widgets.TRTableView.style = unbound qt slot style of QTableWidget type","title":"style"},{"location":"typerig.gui.widgets.html#supporteddropactions","text":"typerig.gui.widgets.TRTableView.supportedDropActions = unbound qt slot py_q_supportedDropActions of QTableWidget type","title":"supportedDropActions"},{"location":"typerig.gui.widgets.html#tabletevent_1","text":"typerig.gui.widgets.TRTableView.tabletEvent = unbound qt slot py_q_tabletEvent of QTableWidget type","title":"tabletEvent"},{"location":"typerig.gui.widgets.html#takehorizontalheaderitem","text":"typerig.gui.widgets.TRTableView.takeHorizontalHeaderItem = unbound qt slot takeHorizontalHeaderItem of QTableWidget type","title":"takeHorizontalHeaderItem"},{"location":"typerig.gui.widgets.html#takeitem","text":"typerig.gui.widgets.TRTableView.takeItem = unbound qt slot takeItem of QTableWidget type","title":"takeItem"},{"location":"typerig.gui.widgets.html#takeverticalheaderitem","text":"typerig.gui.widgets.TRTableView.takeVerticalHeaderItem = unbound qt slot takeVerticalHeaderItem of QTableWidget type","title":"takeVerticalHeaderItem"},{"location":"typerig.gui.widgets.html#testattribute_1","text":"typerig.gui.widgets.TRTableView.testAttribute = unbound qt slot testAttribute of QTableWidget type","title":"testAttribute"},{"location":"typerig.gui.widgets.html#thread_3","text":"typerig.gui.widgets.TRTableView.thread = unbound qt slot thread of QTableWidget type","title":"thread"},{"location":"typerig.gui.widgets.html#timerevent_3","text":"typerig.gui.widgets.TRTableView.timerEvent = unbound qt slot py_q_timerEvent of QTableWidget type","title":"timerEvent"},{"location":"typerig.gui.widgets.html#tr_3","text":"typerig.gui.widgets.TRTableView.tr = unbound qt slot tr of QTableWidget type","title":"tr"},{"location":"typerig.gui.widgets.html#undermouse_1","text":"typerig.gui.widgets.TRTableView.underMouse = unbound qt slot underMouse of QTableWidget type","title":"underMouse"},{"location":"typerig.gui.widgets.html#ungrabgesture_1","text":"typerig.gui.widgets.TRTableView.ungrabGesture = unbound qt slot ungrabGesture of QTableWidget type","title":"ungrabGesture"},{"location":"typerig.gui.widgets.html#unsetcursor_1","text":"typerig.gui.widgets.TRTableView.unsetCursor = unbound qt slot unsetCursor of QTableWidget type","title":"unsetCursor"},{"location":"typerig.gui.widgets.html#unsetlayoutdirection_1","text":"typerig.gui.widgets.TRTableView.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTableWidget type","title":"unsetLayoutDirection"},{"location":"typerig.gui.widgets.html#unsetlocale_1","text":"typerig.gui.widgets.TRTableView.unsetLocale = unbound qt slot unsetLocale of QTableWidget type","title":"unsetLocale"},{"location":"typerig.gui.widgets.html#update_3","text":"typerig.gui.widgets.TRTableView.update = unbound qt slot update of QTableWidget type","title":"update"},{"location":"typerig.gui.widgets.html#updategeometry_1","text":"typerig.gui.widgets.TRTableView.updateGeometry = unbound qt slot updateGeometry of QTableWidget type","title":"updateGeometry"},{"location":"typerig.gui.widgets.html#verticalheader","text":"typerig.gui.widgets.TRTableView.verticalHeader = unbound qt slot verticalHeader of QTableWidget type","title":"verticalHeader"},{"location":"typerig.gui.widgets.html#verticalheaderitem","text":"typerig.gui.widgets.TRTableView.verticalHeaderItem = unbound qt slot verticalHeaderItem of QTableWidget type","title":"verticalHeaderItem"},{"location":"typerig.gui.widgets.html#verticaloffset","text":"typerig.gui.widgets.TRTableView.verticalOffset = unbound qt slot py_q_verticalOffset of QTableWidget type","title":"verticalOffset"},{"location":"typerig.gui.widgets.html#verticalscrollbar","text":"typerig.gui.widgets.TRTableView.verticalScrollBar = unbound qt slot verticalScrollBar of QTableWidget type","title":"verticalScrollBar"},{"location":"typerig.gui.widgets.html#viewoptions","text":"typerig.gui.widgets.TRTableView.viewOptions = unbound qt slot py_q_viewOptions of QTableWidget type","title":"viewOptions"},{"location":"typerig.gui.widgets.html#viewport","text":"typerig.gui.widgets.TRTableView.viewport = unbound qt slot viewport of QTableWidget type","title":"viewport"},{"location":"typerig.gui.widgets.html#viewportevent","text":"typerig.gui.widgets.TRTableView.viewportEvent = unbound qt slot py_q_viewportEvent of QTableWidget type","title":"viewportEvent"},{"location":"typerig.gui.widgets.html#viewportmargins","text":"typerig.gui.widgets.TRTableView.viewportMargins = unbound qt slot viewportMargins of QTableWidget type","title":"viewportMargins"},{"location":"typerig.gui.widgets.html#viewportsizehint","text":"typerig.gui.widgets.TRTableView.viewportSizeHint = unbound qt slot py_q_viewportSizeHint of QTableWidget type","title":"viewportSizeHint"},{"location":"typerig.gui.widgets.html#visibleregion_1","text":"typerig.gui.widgets.TRTableView.visibleRegion = unbound qt slot visibleRegion of QTableWidget type","title":"visibleRegion"},{"location":"typerig.gui.widgets.html#visualcolumn","text":"typerig.gui.widgets.TRTableView.visualColumn = unbound qt slot visualColumn of QTableWidget type","title":"visualColumn"},{"location":"typerig.gui.widgets.html#visualitemrect","text":"typerig.gui.widgets.TRTableView.visualItemRect = unbound qt slot visualItemRect of QTableWidget type","title":"visualItemRect"},{"location":"typerig.gui.widgets.html#visualrect","text":"typerig.gui.widgets.TRTableView.visualRect = unbound qt slot py_q_visualRect of QTableWidget type","title":"visualRect"},{"location":"typerig.gui.widgets.html#visualregionforselection","text":"typerig.gui.widgets.TRTableView.visualRegionForSelection = unbound qt slot py_q_visualRegionForSelection of QTableWidget type","title":"visualRegionForSelection"},{"location":"typerig.gui.widgets.html#visualrow","text":"typerig.gui.widgets.TRTableView.visualRow = unbound qt slot visualRow of QTableWidget type","title":"visualRow"},{"location":"typerig.gui.widgets.html#wheelevent_1","text":"typerig.gui.widgets.TRTableView.wheelEvent = unbound qt slot py_q_wheelEvent of QTableWidget type","title":"wheelEvent"},{"location":"typerig.gui.widgets.html#widthmm_1","text":"typerig.gui.widgets.TRTableView.widthMM = unbound qt slot widthMM of QTableWidget type","title":"widthMM"},{"location":"typerig.gui.widgets.html#window_1","text":"typerig.gui.widgets.TRTableView.window = unbound qt slot window of QTableWidget type","title":"window"},{"location":"typerig.gui.widgets.html#windowflags_1","text":"typerig.gui.widgets.TRTableView.windowFlags = unbound qt slot windowFlags of QTableWidget type","title":"windowFlags"},{"location":"typerig.gui.widgets.html#windowhandle_1","text":"typerig.gui.widgets.TRTableView.windowHandle = unbound qt slot windowHandle of QTableWidget type","title":"windowHandle"},{"location":"typerig.gui.widgets.html#windowrole_1","text":"typerig.gui.widgets.TRTableView.windowRole = unbound qt slot windowRole of QTableWidget type","title":"windowRole"},{"location":"typerig.gui.widgets.html#windowstate_1","text":"typerig.gui.widgets.TRTableView.windowState = unbound qt slot windowState of QTableWidget type","title":"windowState"},{"location":"typerig.gui.widgets.html#windowtype_1","text":"typerig.gui.widgets.TRTableView.windowType = unbound qt slot windowType of QTableWidget type","title":"windowType"},{"location":"typerig.gui.widgets.html#winid_1","text":"typerig.gui.widgets.TRTableView.winId = unbound qt slot winId of QTableWidget type","title":"winId"},{"location":"typerig.gui.widgets.html#trhtabwidget","text":"","title":"TRHTabWidget"},{"location":"typerig.gui.widgets.html#actionevent_2","text":"typerig.gui.widgets.TRHTabWidget.actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type","title":"actionEvent"},{"location":"typerig.gui.widgets.html#actions_2","text":"typerig.gui.widgets.TRHTabWidget.actions = unbound qt slot actions of QTabWidget type","title":"actions"},{"location":"typerig.gui.widgets.html#activatewindow_2","text":"typerig.gui.widgets.TRHTabWidget.activateWindow = unbound qt slot activateWindow of QTabWidget type","title":"activateWindow"},{"location":"typerig.gui.widgets.html#addaction_2","text":"typerig.gui.widgets.TRHTabWidget.addAction = unbound qt slot addAction of QTabWidget type","title":"addAction"},{"location":"typerig.gui.widgets.html#addactions_2","text":"typerig.gui.widgets.TRHTabWidget.addActions = unbound qt slot addActions of QTabWidget type","title":"addActions"},{"location":"typerig.gui.widgets.html#addtab","text":"typerig.gui.widgets.TRHTabWidget.addTab = unbound qt slot addTab of QTabWidget type","title":"addTab"},{"location":"typerig.gui.widgets.html#adjustsize_2","text":"typerig.gui.widgets.TRHTabWidget.adjustSize = unbound qt slot adjustSize of QTabWidget type","title":"adjustSize"},{"location":"typerig.gui.widgets.html#backgroundrole_2","text":"typerig.gui.widgets.TRHTabWidget.backgroundRole = unbound qt slot backgroundRole of QTabWidget type","title":"backgroundRole"},{"location":"typerig.gui.widgets.html#backingstore_2","text":"typerig.gui.widgets.TRHTabWidget.backingStore = unbound qt slot backingStore of QTabWidget type","title":"backingStore"},{"location":"typerig.gui.widgets.html#blocksignals_4","text":"typerig.gui.widgets.TRHTabWidget.blockSignals = unbound qt slot blockSignals of QTabWidget type","title":"blockSignals"},{"location":"typerig.gui.widgets.html#changeevent_2","text":"typerig.gui.widgets.TRHTabWidget.changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type","title":"changeEvent"},{"location":"typerig.gui.widgets.html#childat_2","text":"typerig.gui.widgets.TRHTabWidget.childAt = unbound qt slot childAt of QTabWidget type","title":"childAt"},{"location":"typerig.gui.widgets.html#childevent_4","text":"typerig.gui.widgets.TRHTabWidget.childEvent = unbound qt slot py_q_childEvent of QTabWidget type","title":"childEvent"},{"location":"typerig.gui.widgets.html#children_4","text":"typerig.gui.widgets.TRHTabWidget.children = unbound qt slot children of QTabWidget type","title":"children"},{"location":"typerig.gui.widgets.html#classname_4","text":"typerig.gui.widgets.TRHTabWidget.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.widgets.html#clear_1","text":"typerig.gui.widgets.TRHTabWidget.clear = unbound qt slot clear of QTabWidget type","title":"clear"},{"location":"typerig.gui.widgets.html#clearfocus_2","text":"typerig.gui.widgets.TRHTabWidget.clearFocus = unbound qt slot clearFocus of QTabWidget type","title":"clearFocus"},{"location":"typerig.gui.widgets.html#clearmask_2","text":"typerig.gui.widgets.TRHTabWidget.clearMask = unbound qt slot clearMask of QTabWidget type","title":"clearMask"},{"location":"typerig.gui.widgets.html#close_2","text":"typerig.gui.widgets.TRHTabWidget.close = unbound qt slot close of QTabWidget type","title":"close"},{"location":"typerig.gui.widgets.html#closeevent_2","text":"typerig.gui.widgets.TRHTabWidget.closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type","title":"closeEvent"},{"location":"typerig.gui.widgets.html#colorcount_2","text":"typerig.gui.widgets.TRHTabWidget.colorCount = unbound qt slot colorCount of QTabWidget type","title":"colorCount"},{"location":"typerig.gui.widgets.html#connect_4","text":"typerig.gui.widgets.TRHTabWidget.connect = unbound qt slot connect of QTabWidget type","title":"connect"},{"location":"typerig.gui.widgets.html#contentsmargins_4","text":"typerig.gui.widgets.TRHTabWidget.contentsMargins = unbound qt slot contentsMargins of QTabWidget type","title":"contentsMargins"},{"location":"typerig.gui.widgets.html#contentsrect_4","text":"typerig.gui.widgets.TRHTabWidget.contentsRect = unbound qt slot contentsRect of QTabWidget type","title":"contentsRect"},{"location":"typerig.gui.widgets.html#contextmenuevent_2","text":"typerig.gui.widgets.TRHTabWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type","title":"contextMenuEvent"},{"location":"typerig.gui.widgets.html#cornerwidget_1","text":"typerig.gui.widgets.TRHTabWidget.cornerWidget = unbound qt slot cornerWidget of QTabWidget type","title":"cornerWidget"},{"location":"typerig.gui.widgets.html#createwindowcontainer_2","text":"typerig.gui.widgets.TRHTabWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type","title":"createWindowContainer"},{"location":"typerig.gui.widgets.html#createwinid_2","text":"typerig.gui.widgets.TRHTabWidget.createWinId = unbound qt slot createWinId of QTabWidget type","title":"createWinId"},{"location":"typerig.gui.widgets.html#currentwidget","text":"typerig.gui.widgets.TRHTabWidget.currentWidget = unbound qt slot currentWidget of QTabWidget type","title":"currentWidget"},{"location":"typerig.gui.widgets.html#customevent_4","text":"typerig.gui.widgets.TRHTabWidget.customEvent = unbound qt slot py_q_customEvent of QTabWidget type","title":"customEvent"},{"location":"typerig.gui.widgets.html#delete_4","text":"typerig.gui.widgets.TRHTabWidget.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.widgets.html#deletelater_4","text":"typerig.gui.widgets.TRHTabWidget.deleteLater = unbound qt slot deleteLater of QTabWidget type","title":"deleteLater"},{"location":"typerig.gui.widgets.html#depth_2","text":"typerig.gui.widgets.TRHTabWidget.depth = unbound qt slot depth of QTabWidget type","title":"depth"},{"location":"typerig.gui.widgets.html#destroy_2","text":"typerig.gui.widgets.TRHTabWidget.destroy = unbound qt slot destroy of QTabWidget type","title":"destroy"},{"location":"typerig.gui.widgets.html#devicepixelratio_2","text":"typerig.gui.widgets.TRHTabWidget.devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type","title":"devicePixelRatio"},{"location":"typerig.gui.widgets.html#devicepixelratiof_2","text":"typerig.gui.widgets.TRHTabWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type","title":"devicePixelRatioF"},{"location":"typerig.gui.widgets.html#devicepixelratiofscale_2","text":"typerig.gui.widgets.TRHTabWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type","title":"devicePixelRatioFScale"},{"location":"typerig.gui.widgets.html#devtype_2","text":"typerig.gui.widgets.TRHTabWidget.devType = unbound qt slot py_q_devType of QTabWidget type","title":"devType"},{"location":"typerig.gui.widgets.html#disconnect_4","text":"typerig.gui.widgets.TRHTabWidget.disconnect = unbound qt slot disconnect of QTabWidget type","title":"disconnect"},{"location":"typerig.gui.widgets.html#dragenterevent_2","text":"typerig.gui.widgets.TRHTabWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type","title":"dragEnterEvent"},{"location":"typerig.gui.widgets.html#dragleaveevent_2","text":"typerig.gui.widgets.TRHTabWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type","title":"dragLeaveEvent"},{"location":"typerig.gui.widgets.html#dragmoveevent_2","text":"typerig.gui.widgets.TRHTabWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type","title":"dragMoveEvent"},{"location":"typerig.gui.widgets.html#dropevent_2","text":"typerig.gui.widgets.TRHTabWidget.dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type","title":"dropEvent"},{"location":"typerig.gui.widgets.html#dumpobjectinfo_4","text":"typerig.gui.widgets.TRHTabWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type","title":"dumpObjectInfo"},{"location":"typerig.gui.widgets.html#dumpobjecttree_4","text":"typerig.gui.widgets.TRHTabWidget.dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type","title":"dumpObjectTree"},{"location":"typerig.gui.widgets.html#dynamicpropertynames_4","text":"typerig.gui.widgets.TRHTabWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type","title":"dynamicPropertyNames"},{"location":"typerig.gui.widgets.html#effectivewinid_2","text":"typerig.gui.widgets.TRHTabWidget.effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type","title":"effectiveWinId"},{"location":"typerig.gui.widgets.html#ensurepolished_2","text":"typerig.gui.widgets.TRHTabWidget.ensurePolished = unbound qt slot ensurePolished of QTabWidget type","title":"ensurePolished"},{"location":"typerig.gui.widgets.html#enterevent_2","text":"typerig.gui.widgets.TRHTabWidget.enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type","title":"enterEvent"},{"location":"typerig.gui.widgets.html#event_4","text":"typerig.gui.widgets.TRHTabWidget.event = unbound qt slot py_q_event of QTabWidget type","title":"event"},{"location":"typerig.gui.widgets.html#eventfilter_4","text":"typerig.gui.widgets.TRHTabWidget.eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type","title":"eventFilter"},{"location":"typerig.gui.widgets.html#findchild_4","text":"typerig.gui.widgets.TRHTabWidget.findChild = unbound qt slot findChild of QTabWidget type","title":"findChild"},{"location":"typerig.gui.widgets.html#findchildren_4","text":"typerig.gui.widgets.TRHTabWidget.findChildren = unbound qt slot findChildren of QTabWidget type","title":"findChildren"},{"location":"typerig.gui.widgets.html#focusinevent_2","text":"typerig.gui.widgets.TRHTabWidget.focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type","title":"focusInEvent"},{"location":"typerig.gui.widgets.html#focusnextchild_2","text":"typerig.gui.widgets.TRHTabWidget.focusNextChild = unbound qt slot focusNextChild of QTabWidget type","title":"focusNextChild"},{"location":"typerig.gui.widgets.html#focusnextprevchild_2","text":"typerig.gui.widgets.TRHTabWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type","title":"focusNextPrevChild"},{"location":"typerig.gui.widgets.html#focusoutevent_2","text":"typerig.gui.widgets.TRHTabWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type","title":"focusOutEvent"},{"location":"typerig.gui.widgets.html#focuspreviouschild_2","text":"typerig.gui.widgets.TRHTabWidget.focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type","title":"focusPreviousChild"},{"location":"typerig.gui.widgets.html#focusproxy_2","text":"typerig.gui.widgets.TRHTabWidget.focusProxy = unbound qt slot focusProxy of QTabWidget type","title":"focusProxy"},{"location":"typerig.gui.widgets.html#focuswidget_2","text":"typerig.gui.widgets.TRHTabWidget.focusWidget = unbound qt slot focusWidget of QTabWidget type","title":"focusWidget"},{"location":"typerig.gui.widgets.html#foregroundrole_2","text":"typerig.gui.widgets.TRHTabWidget.foregroundRole = unbound qt slot foregroundRole of QTabWidget type","title":"foregroundRole"},{"location":"typerig.gui.widgets.html#grab_2","text":"typerig.gui.widgets.TRHTabWidget.grab = unbound qt slot grab of QTabWidget type","title":"grab"},{"location":"typerig.gui.widgets.html#grabgesture_2","text":"typerig.gui.widgets.TRHTabWidget.grabGesture = unbound qt slot grabGesture of QTabWidget type","title":"grabGesture"},{"location":"typerig.gui.widgets.html#grabkeyboard_2","text":"typerig.gui.widgets.TRHTabWidget.grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type","title":"grabKeyboard"},{"location":"typerig.gui.widgets.html#grabmouse_2","text":"typerig.gui.widgets.TRHTabWidget.grabMouse = unbound qt slot grabMouse of QTabWidget type","title":"grabMouse"},{"location":"typerig.gui.widgets.html#grabshortcut_2","text":"typerig.gui.widgets.TRHTabWidget.grabShortcut = unbound qt slot grabShortcut of QTabWidget type","title":"grabShortcut"},{"location":"typerig.gui.widgets.html#graphicseffect_2","text":"typerig.gui.widgets.TRHTabWidget.graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type","title":"graphicsEffect"},{"location":"typerig.gui.widgets.html#graphicsproxywidget_2","text":"typerig.gui.widgets.TRHTabWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type","title":"graphicsProxyWidget"},{"location":"typerig.gui.widgets.html#hasfocus_2","text":"typerig.gui.widgets.TRHTabWidget.hasFocus = unbound qt slot hasFocus of QTabWidget type","title":"hasFocus"},{"location":"typerig.gui.widgets.html#hasheightforwidth_4","text":"typerig.gui.widgets.TRHTabWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type","title":"hasHeightForWidth"},{"location":"typerig.gui.widgets.html#hasmousetracking_2","text":"typerig.gui.widgets.TRHTabWidget.hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type","title":"hasMouseTracking"},{"location":"typerig.gui.widgets.html#heightforwidth_4","text":"typerig.gui.widgets.TRHTabWidget.heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type","title":"heightForWidth"},{"location":"typerig.gui.widgets.html#heightmm_2","text":"typerig.gui.widgets.TRHTabWidget.heightMM = unbound qt slot heightMM of QTabWidget type","title":"heightMM"},{"location":"typerig.gui.widgets.html#help_4","text":"typerig.gui.widgets.TRHTabWidget.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.widgets.html#hide_2","text":"typerig.gui.widgets.TRHTabWidget.hide = unbound qt slot hide of QTabWidget type","title":"hide"},{"location":"typerig.gui.widgets.html#hideevent_2","text":"typerig.gui.widgets.TRHTabWidget.hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type","title":"hideEvent"},{"location":"typerig.gui.widgets.html#indexof_2","text":"typerig.gui.widgets.TRHTabWidget.indexOf = unbound qt slot indexOf of QTabWidget type","title":"indexOf"},{"location":"typerig.gui.widgets.html#inherits_4","text":"typerig.gui.widgets.TRHTabWidget.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.widgets.html#initpainter_2","text":"typerig.gui.widgets.TRHTabWidget.initPainter = unbound qt slot py_q_initPainter of QTabWidget type","title":"initPainter"},{"location":"typerig.gui.widgets.html#initstyleoption_1","text":"typerig.gui.widgets.TRHTabWidget.initStyleOption = unbound qt slot initStyleOption of QTabWidget type","title":"initStyleOption"},{"location":"typerig.gui.widgets.html#inputmethodevent_2","text":"typerig.gui.widgets.TRHTabWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type","title":"inputMethodEvent"},{"location":"typerig.gui.widgets.html#inputmethodquery_2","text":"typerig.gui.widgets.TRHTabWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type","title":"inputMethodQuery"},{"location":"typerig.gui.widgets.html#insertaction_2","text":"typerig.gui.widgets.TRHTabWidget.insertAction = unbound qt slot insertAction of QTabWidget type","title":"insertAction"},{"location":"typerig.gui.widgets.html#insertactions_2","text":"typerig.gui.widgets.TRHTabWidget.insertActions = unbound qt slot insertActions of QTabWidget type","title":"insertActions"},{"location":"typerig.gui.widgets.html#inserttab","text":"typerig.gui.widgets.TRHTabWidget.insertTab = unbound qt slot insertTab of QTabWidget type","title":"insertTab"},{"location":"typerig.gui.widgets.html#installeventfilter_4","text":"typerig.gui.widgets.TRHTabWidget.installEventFilter = unbound qt slot installEventFilter of QTabWidget type","title":"installEventFilter"},{"location":"typerig.gui.widgets.html#isancestorof_2","text":"typerig.gui.widgets.TRHTabWidget.isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type","title":"isAncestorOf"},{"location":"typerig.gui.widgets.html#isenabled_4","text":"typerig.gui.widgets.TRHTabWidget.isEnabled = unbound qt slot isEnabled of QTabWidget type","title":"isEnabled"},{"location":"typerig.gui.widgets.html#isenabledto_2","text":"typerig.gui.widgets.TRHTabWidget.isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type","title":"isEnabledTo"},{"location":"typerig.gui.widgets.html#isfullscreen_2","text":"typerig.gui.widgets.TRHTabWidget.isFullScreen = unbound qt slot isFullScreen of QTabWidget type","title":"isFullScreen"},{"location":"typerig.gui.widgets.html#ishidden_2","text":"typerig.gui.widgets.TRHTabWidget.isHidden = unbound qt slot isHidden of QTabWidget type","title":"isHidden"},{"location":"typerig.gui.widgets.html#islefttoright_2","text":"typerig.gui.widgets.TRHTabWidget.isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type","title":"isLeftToRight"},{"location":"typerig.gui.widgets.html#ismaximized_2","text":"typerig.gui.widgets.TRHTabWidget.isMaximized = unbound qt slot isMaximized of QTabWidget type","title":"isMaximized"},{"location":"typerig.gui.widgets.html#isminimized_2","text":"typerig.gui.widgets.TRHTabWidget.isMinimized = unbound qt slot isMinimized of QTabWidget type","title":"isMinimized"},{"location":"typerig.gui.widgets.html#ismodal_2","text":"typerig.gui.widgets.TRHTabWidget.isModal = unbound qt slot isModal of QTabWidget type","title":"isModal"},{"location":"typerig.gui.widgets.html#ismovable","text":"typerig.gui.widgets.TRHTabWidget.isMovable = unbound qt slot isMovable of QTabWidget type","title":"isMovable"},{"location":"typerig.gui.widgets.html#isrighttoleft_2","text":"typerig.gui.widgets.TRHTabWidget.isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type","title":"isRightToLeft"},{"location":"typerig.gui.widgets.html#issignalconnected_4","text":"typerig.gui.widgets.TRHTabWidget.isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type","title":"isSignalConnected"},{"location":"typerig.gui.widgets.html#istabenabled","text":"typerig.gui.widgets.TRHTabWidget.isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type","title":"isTabEnabled"},{"location":"typerig.gui.widgets.html#isvisible_2","text":"typerig.gui.widgets.TRHTabWidget.isVisible = unbound qt slot isVisible of QTabWidget type","title":"isVisible"},{"location":"typerig.gui.widgets.html#isvisibleto_2","text":"typerig.gui.widgets.TRHTabWidget.isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type","title":"isVisibleTo"},{"location":"typerig.gui.widgets.html#iswidgettype_4","text":"typerig.gui.widgets.TRHTabWidget.isWidgetType = unbound qt slot isWidgetType of QTabWidget type","title":"isWidgetType"},{"location":"typerig.gui.widgets.html#iswindow_2","text":"typerig.gui.widgets.TRHTabWidget.isWindow = unbound qt slot isWindow of QTabWidget type","title":"isWindow"},{"location":"typerig.gui.widgets.html#iswindowmodified_2","text":"typerig.gui.widgets.TRHTabWidget.isWindowModified = unbound qt slot isWindowModified of QTabWidget type","title":"isWindowModified"},{"location":"typerig.gui.widgets.html#iswindowtype_4","text":"typerig.gui.widgets.TRHTabWidget.isWindowType = unbound qt slot isWindowType of QTabWidget type","title":"isWindowType"},{"location":"typerig.gui.widgets.html#keyboardgrabber_2","text":"typerig.gui.widgets.TRHTabWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type","title":"keyboardGrabber"},{"location":"typerig.gui.widgets.html#keypressevent_2","text":"typerig.gui.widgets.TRHTabWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type","title":"keyPressEvent"},{"location":"typerig.gui.widgets.html#keyreleaseevent_2","text":"typerig.gui.widgets.TRHTabWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type","title":"keyReleaseEvent"},{"location":"typerig.gui.widgets.html#killtimer_4","text":"typerig.gui.widgets.TRHTabWidget.killTimer = unbound qt slot killTimer of QTabWidget type","title":"killTimer"},{"location":"typerig.gui.widgets.html#layout_4","text":"typerig.gui.widgets.TRHTabWidget.layout = unbound qt slot layout of QTabWidget type","title":"layout"},{"location":"typerig.gui.widgets.html#leaveevent_2","text":"typerig.gui.widgets.TRHTabWidget.leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type","title":"leaveEvent"},{"location":"typerig.gui.widgets.html#logicaldpix_2","text":"typerig.gui.widgets.TRHTabWidget.logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type","title":"logicalDpiX"},{"location":"typerig.gui.widgets.html#logicaldpiy_2","text":"typerig.gui.widgets.TRHTabWidget.logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type","title":"logicalDpiY"},{"location":"typerig.gui.widgets.html#lower_2","text":"typerig.gui.widgets.TRHTabWidget.lower = unbound qt slot lower of QTabWidget type","title":"lower"},{"location":"typerig.gui.widgets.html#mapfrom_2","text":"typerig.gui.widgets.TRHTabWidget.mapFrom = unbound qt slot mapFrom of QTabWidget type","title":"mapFrom"},{"location":"typerig.gui.widgets.html#mapfromglobal_2","text":"typerig.gui.widgets.TRHTabWidget.mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type","title":"mapFromGlobal"},{"location":"typerig.gui.widgets.html#mapfromparent_2","text":"typerig.gui.widgets.TRHTabWidget.mapFromParent = unbound qt slot mapFromParent of QTabWidget type","title":"mapFromParent"},{"location":"typerig.gui.widgets.html#mapto_2","text":"typerig.gui.widgets.TRHTabWidget.mapTo = unbound qt slot mapTo of QTabWidget type","title":"mapTo"},{"location":"typerig.gui.widgets.html#maptoglobal_2","text":"typerig.gui.widgets.TRHTabWidget.mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type","title":"mapToGlobal"},{"location":"typerig.gui.widgets.html#maptoparent_2","text":"typerig.gui.widgets.TRHTabWidget.mapToParent = unbound qt slot mapToParent of QTabWidget type","title":"mapToParent"},{"location":"typerig.gui.widgets.html#mask_2","text":"typerig.gui.widgets.TRHTabWidget.mask = unbound qt slot mask of QTabWidget type","title":"mask"},{"location":"typerig.gui.widgets.html#metaobject_4","text":"typerig.gui.widgets.TRHTabWidget.metaObject = unbound qt slot metaObject of QTabWidget type","title":"metaObject"},{"location":"typerig.gui.widgets.html#metric_2","text":"typerig.gui.widgets.TRHTabWidget.metric = unbound qt slot py_q_metric of QTabWidget type","title":"metric"},{"location":"typerig.gui.widgets.html#mousedoubleclickevent_2","text":"typerig.gui.widgets.TRHTabWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type","title":"mouseDoubleClickEvent"},{"location":"typerig.gui.widgets.html#mousegrabber_2","text":"typerig.gui.widgets.TRHTabWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type","title":"mouseGrabber"},{"location":"typerig.gui.widgets.html#mousemoveevent_2","text":"typerig.gui.widgets.TRHTabWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type","title":"mouseMoveEvent"},{"location":"typerig.gui.widgets.html#mousepressevent_2","text":"typerig.gui.widgets.TRHTabWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type","title":"mousePressEvent"},{"location":"typerig.gui.widgets.html#mousereleaseevent_2","text":"typerig.gui.widgets.TRHTabWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type","title":"mouseReleaseEvent"},{"location":"typerig.gui.widgets.html#move_2","text":"typerig.gui.widgets.TRHTabWidget.move = unbound qt slot move of QTabWidget type","title":"move"},{"location":"typerig.gui.widgets.html#moveevent_2","text":"typerig.gui.widgets.TRHTabWidget.moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type","title":"moveEvent"},{"location":"typerig.gui.widgets.html#movetothread_4","text":"typerig.gui.widgets.TRHTabWidget.moveToThread = unbound qt slot moveToThread of QTabWidget type","title":"moveToThread"},{"location":"typerig.gui.widgets.html#nativeevent_2","text":"typerig.gui.widgets.TRHTabWidget.nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type","title":"nativeEvent"},{"location":"typerig.gui.widgets.html#nativeparentwidget_2","text":"typerig.gui.widgets.TRHTabWidget.nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type","title":"nativeParentWidget"},{"location":"typerig.gui.widgets.html#nextinfocuschain_2","text":"typerig.gui.widgets.TRHTabWidget.nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type","title":"nextInFocusChain"},{"location":"typerig.gui.widgets.html#overridewindowflags_2","text":"typerig.gui.widgets.TRHTabWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type","title":"overrideWindowFlags"},{"location":"typerig.gui.widgets.html#overridewindowstate_2","text":"typerig.gui.widgets.TRHTabWidget.overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type","title":"overrideWindowState"},{"location":"typerig.gui.widgets.html#paintengine_2","text":"typerig.gui.widgets.TRHTabWidget.paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type","title":"paintEngine"},{"location":"typerig.gui.widgets.html#paintevent_2","text":"typerig.gui.widgets.TRHTabWidget.paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type","title":"paintEvent"},{"location":"typerig.gui.widgets.html#paintingactive_2","text":"typerig.gui.widgets.TRHTabWidget.paintingActive = unbound qt slot paintingActive of QTabWidget type","title":"paintingActive"},{"location":"typerig.gui.widgets.html#parent_4","text":"typerig.gui.widgets.TRHTabWidget.parent = unbound qt slot parent of QTabWidget type","title":"parent"},{"location":"typerig.gui.widgets.html#parentwidget_4","text":"typerig.gui.widgets.TRHTabWidget.parentWidget = unbound qt slot parentWidget of QTabWidget type","title":"parentWidget"},{"location":"typerig.gui.widgets.html#physicaldpix_2","text":"typerig.gui.widgets.TRHTabWidget.physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type","title":"physicalDpiX"},{"location":"typerig.gui.widgets.html#physicaldpiy_2","text":"typerig.gui.widgets.TRHTabWidget.physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type","title":"physicalDpiY"},{"location":"typerig.gui.widgets.html#previousinfocuschain_2","text":"typerig.gui.widgets.TRHTabWidget.previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type","title":"previousInFocusChain"},{"location":"typerig.gui.widgets.html#property_4","text":"typerig.gui.widgets.TRHTabWidget.property = unbound qt slot property of QTabWidget type","title":"property"},{"location":"typerig.gui.widgets.html#raise_2","text":"typerig.gui.widgets.TRHTabWidget.raise = unbound qt slot raise of QTabWidget type","title":"raise"},{"location":"typerig.gui.widgets.html#redirected_2","text":"typerig.gui.widgets.TRHTabWidget.redirected = unbound qt slot py_q_redirected of QTabWidget type","title":"redirected"},{"location":"typerig.gui.widgets.html#releasekeyboard_2","text":"typerig.gui.widgets.TRHTabWidget.releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type","title":"releaseKeyboard"},{"location":"typerig.gui.widgets.html#releasemouse_2","text":"typerig.gui.widgets.TRHTabWidget.releaseMouse = unbound qt slot releaseMouse of QTabWidget type","title":"releaseMouse"},{"location":"typerig.gui.widgets.html#releaseshortcut_2","text":"typerig.gui.widgets.TRHTabWidget.releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type","title":"releaseShortcut"},{"location":"typerig.gui.widgets.html#removeaction_2","text":"typerig.gui.widgets.TRHTabWidget.removeAction = unbound qt slot removeAction of QTabWidget type","title":"removeAction"},{"location":"typerig.gui.widgets.html#removeeventfilter_4","text":"typerig.gui.widgets.TRHTabWidget.removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type","title":"removeEventFilter"},{"location":"typerig.gui.widgets.html#removetab","text":"typerig.gui.widgets.TRHTabWidget.removeTab = unbound qt slot removeTab of QTabWidget type","title":"removeTab"},{"location":"typerig.gui.widgets.html#render_2","text":"typerig.gui.widgets.TRHTabWidget.render = unbound qt slot render of QTabWidget type","title":"render"},{"location":"typerig.gui.widgets.html#repaint_2","text":"typerig.gui.widgets.TRHTabWidget.repaint = unbound qt slot repaint of QTabWidget type","title":"repaint"},{"location":"typerig.gui.widgets.html#resize_2","text":"typerig.gui.widgets.TRHTabWidget.resize = unbound qt slot resize of QTabWidget type","title":"resize"},{"location":"typerig.gui.widgets.html#resizeevent_2","text":"typerig.gui.widgets.TRHTabWidget.resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type","title":"resizeEvent"},{"location":"typerig.gui.widgets.html#restoregeometry_2","text":"typerig.gui.widgets.TRHTabWidget.restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type","title":"restoreGeometry"},{"location":"typerig.gui.widgets.html#savegeometry_2","text":"typerig.gui.widgets.TRHTabWidget.saveGeometry = unbound qt slot saveGeometry of QTabWidget type","title":"saveGeometry"},{"location":"typerig.gui.widgets.html#scroll_2","text":"typerig.gui.widgets.TRHTabWidget.scroll = unbound qt slot scroll of QTabWidget type","title":"scroll"},{"location":"typerig.gui.widgets.html#sender_4","text":"typerig.gui.widgets.TRHTabWidget.sender = unbound qt slot sender of QTabWidget type","title":"sender"},{"location":"typerig.gui.widgets.html#sendersignalindex_4","text":"typerig.gui.widgets.TRHTabWidget.senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type","title":"senderSignalIndex"},{"location":"typerig.gui.widgets.html#setacceptdrops_2","text":"typerig.gui.widgets.TRHTabWidget.setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type","title":"setAcceptDrops"},{"location":"typerig.gui.widgets.html#setaccessibledescription_2","text":"typerig.gui.widgets.TRHTabWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type","title":"setAccessibleDescription"},{"location":"typerig.gui.widgets.html#setaccessiblename_2","text":"typerig.gui.widgets.TRHTabWidget.setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type","title":"setAccessibleName"},{"location":"typerig.gui.widgets.html#setattribute_2","text":"typerig.gui.widgets.TRHTabWidget.setAttribute = unbound qt slot setAttribute of QTabWidget type","title":"setAttribute"},{"location":"typerig.gui.widgets.html#setautofillbackground_2","text":"typerig.gui.widgets.TRHTabWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type","title":"setAutoFillBackground"},{"location":"typerig.gui.widgets.html#setbackgroundrole_2","text":"typerig.gui.widgets.TRHTabWidget.setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type","title":"setBackgroundRole"},{"location":"typerig.gui.widgets.html#setbasesize_2","text":"typerig.gui.widgets.TRHTabWidget.setBaseSize = unbound qt slot setBaseSize of QTabWidget type","title":"setBaseSize"},{"location":"typerig.gui.widgets.html#setcontentsmargins_4","text":"typerig.gui.widgets.TRHTabWidget.setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type","title":"setContentsMargins"},{"location":"typerig.gui.widgets.html#setcontextmenupolicy_2","text":"typerig.gui.widgets.TRHTabWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type","title":"setContextMenuPolicy"},{"location":"typerig.gui.widgets.html#setcornerwidget_1","text":"typerig.gui.widgets.TRHTabWidget.setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type","title":"setCornerWidget"},{"location":"typerig.gui.widgets.html#setcurrentindex_1","text":"typerig.gui.widgets.TRHTabWidget.setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type","title":"setCurrentIndex"},{"location":"typerig.gui.widgets.html#setcurrentwidget","text":"typerig.gui.widgets.TRHTabWidget.setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type","title":"setCurrentWidget"},{"location":"typerig.gui.widgets.html#setcursor_2","text":"typerig.gui.widgets.TRHTabWidget.setCursor = unbound qt slot setCursor of QTabWidget type","title":"setCursor"},{"location":"typerig.gui.widgets.html#setdisabled_2","text":"typerig.gui.widgets.TRHTabWidget.setDisabled = unbound qt slot setDisabled of QTabWidget type","title":"setDisabled"},{"location":"typerig.gui.widgets.html#setdocumentmode","text":"typerig.gui.widgets.TRHTabWidget.setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type","title":"setDocumentMode"},{"location":"typerig.gui.widgets.html#setelidemode","text":"typerig.gui.widgets.TRHTabWidget.setElideMode = unbound qt slot setElideMode of QTabWidget type","title":"setElideMode"},{"location":"typerig.gui.widgets.html#setenabled_4","text":"typerig.gui.widgets.TRHTabWidget.setEnabled = unbound qt slot setEnabled of QTabWidget type","title":"setEnabled"},{"location":"typerig.gui.widgets.html#setfixedheight_2","text":"typerig.gui.widgets.TRHTabWidget.setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type","title":"setFixedHeight"},{"location":"typerig.gui.widgets.html#setfixedsize_2","text":"typerig.gui.widgets.TRHTabWidget.setFixedSize = unbound qt slot setFixedSize of QTabWidget type","title":"setFixedSize"},{"location":"typerig.gui.widgets.html#setfixedwidth_2","text":"typerig.gui.widgets.TRHTabWidget.setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type","title":"setFixedWidth"},{"location":"typerig.gui.widgets.html#setfocus_2","text":"typerig.gui.widgets.TRHTabWidget.setFocus = unbound qt slot setFocus of QTabWidget type","title":"setFocus"},{"location":"typerig.gui.widgets.html#setfocuspolicy_2","text":"typerig.gui.widgets.TRHTabWidget.setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type","title":"setFocusPolicy"},{"location":"typerig.gui.widgets.html#setfocusproxy_2","text":"typerig.gui.widgets.TRHTabWidget.setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type","title":"setFocusProxy"},{"location":"typerig.gui.widgets.html#setfont_2","text":"typerig.gui.widgets.TRHTabWidget.setFont = unbound qt slot setFont of QTabWidget type","title":"setFont"},{"location":"typerig.gui.widgets.html#setforegroundrole_2","text":"typerig.gui.widgets.TRHTabWidget.setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type","title":"setForegroundRole"},{"location":"typerig.gui.widgets.html#setgeometry_4","text":"typerig.gui.widgets.TRHTabWidget.setGeometry = unbound qt slot setGeometry of QTabWidget type","title":"setGeometry"},{"location":"typerig.gui.widgets.html#setgraphicseffect_2","text":"typerig.gui.widgets.TRHTabWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type","title":"setGraphicsEffect"},{"location":"typerig.gui.widgets.html#sethidden_2","text":"typerig.gui.widgets.TRHTabWidget.setHidden = unbound qt slot setHidden of QTabWidget type","title":"setHidden"},{"location":"typerig.gui.widgets.html#seticonsize_1","text":"typerig.gui.widgets.TRHTabWidget.setIconSize = unbound qt slot setIconSize of QTabWidget type","title":"setIconSize"},{"location":"typerig.gui.widgets.html#setinputmethodhints_2","text":"typerig.gui.widgets.TRHTabWidget.setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type","title":"setInputMethodHints"},{"location":"typerig.gui.widgets.html#setlayout_2","text":"typerig.gui.widgets.TRHTabWidget.setLayout = unbound qt slot setLayout of QTabWidget type","title":"setLayout"},{"location":"typerig.gui.widgets.html#setlayoutdirection_2","text":"typerig.gui.widgets.TRHTabWidget.setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type","title":"setLayoutDirection"},{"location":"typerig.gui.widgets.html#setlocale_2","text":"typerig.gui.widgets.TRHTabWidget.setLocale = unbound qt slot setLocale of QTabWidget type","title":"setLocale"},{"location":"typerig.gui.widgets.html#setmask_2","text":"typerig.gui.widgets.TRHTabWidget.setMask = unbound qt slot setMask of QTabWidget type","title":"setMask"},{"location":"typerig.gui.widgets.html#setmaximumheight_2","text":"typerig.gui.widgets.TRHTabWidget.setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type","title":"setMaximumHeight"},{"location":"typerig.gui.widgets.html#setmaximumsize_2","text":"typerig.gui.widgets.TRHTabWidget.setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type","title":"setMaximumSize"},{"location":"typerig.gui.widgets.html#setmaximumwidth_2","text":"typerig.gui.widgets.TRHTabWidget.setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type","title":"setMaximumWidth"},{"location":"typerig.gui.widgets.html#setminimumheight_2","text":"typerig.gui.widgets.TRHTabWidget.setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type","title":"setMinimumHeight"},{"location":"typerig.gui.widgets.html#setminimumsize_2","text":"typerig.gui.widgets.TRHTabWidget.setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type","title":"setMinimumSize"},{"location":"typerig.gui.widgets.html#setminimumwidth_2","text":"typerig.gui.widgets.TRHTabWidget.setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type","title":"setMinimumWidth"},{"location":"typerig.gui.widgets.html#setmousetracking_2","text":"typerig.gui.widgets.TRHTabWidget.setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type","title":"setMouseTracking"},{"location":"typerig.gui.widgets.html#setmovable","text":"typerig.gui.widgets.TRHTabWidget.setMovable = unbound qt slot setMovable of QTabWidget type","title":"setMovable"},{"location":"typerig.gui.widgets.html#setobjectname_4","text":"typerig.gui.widgets.TRHTabWidget.setObjectName = unbound qt slot setObjectName of QTabWidget type","title":"setObjectName"},{"location":"typerig.gui.widgets.html#setpalette_2","text":"typerig.gui.widgets.TRHTabWidget.setPalette = unbound qt slot setPalette of QTabWidget type","title":"setPalette"},{"location":"typerig.gui.widgets.html#setparent_4","text":"typerig.gui.widgets.TRHTabWidget.setParent = unbound qt slot setParent of QTabWidget type","title":"setParent"},{"location":"typerig.gui.widgets.html#setproperty_4","text":"typerig.gui.widgets.TRHTabWidget.setProperty = unbound qt slot setProperty of QTabWidget type","title":"setProperty"},{"location":"typerig.gui.widgets.html#setshortcutautorepeat_2","text":"typerig.gui.widgets.TRHTabWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type","title":"setShortcutAutoRepeat"},{"location":"typerig.gui.widgets.html#setshortcutenabled_2","text":"typerig.gui.widgets.TRHTabWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type","title":"setShortcutEnabled"},{"location":"typerig.gui.widgets.html#setsizeincrement_2","text":"typerig.gui.widgets.TRHTabWidget.setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type","title":"setSizeIncrement"},{"location":"typerig.gui.widgets.html#setsizepolicy_2","text":"typerig.gui.widgets.TRHTabWidget.setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type","title":"setSizePolicy"},{"location":"typerig.gui.widgets.html#setstatustip_2","text":"typerig.gui.widgets.TRHTabWidget.setStatusTip = unbound qt slot setStatusTip of QTabWidget type","title":"setStatusTip"},{"location":"typerig.gui.widgets.html#setstyle_2","text":"typerig.gui.widgets.TRHTabWidget.setStyle = unbound qt slot setStyle of QTabWidget type","title":"setStyle"},{"location":"typerig.gui.widgets.html#setstylesheet_2","text":"typerig.gui.widgets.TRHTabWidget.setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type","title":"setStyleSheet"},{"location":"typerig.gui.widgets.html#settabbar","text":"typerig.gui.widgets.TRHTabWidget.setTabBar = unbound qt slot setTabBar of QTabWidget type","title":"setTabBar"},{"location":"typerig.gui.widgets.html#settabbarautohide","text":"typerig.gui.widgets.TRHTabWidget.setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type","title":"setTabBarAutoHide"},{"location":"typerig.gui.widgets.html#settabenabled","text":"typerig.gui.widgets.TRHTabWidget.setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type","title":"setTabEnabled"},{"location":"typerig.gui.widgets.html#settabicon","text":"typerig.gui.widgets.TRHTabWidget.setTabIcon = unbound qt slot setTabIcon of QTabWidget type","title":"setTabIcon"},{"location":"typerig.gui.widgets.html#settaborder_2","text":"typerig.gui.widgets.TRHTabWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type","title":"setTabOrder"},{"location":"typerig.gui.widgets.html#settabposition","text":"typerig.gui.widgets.TRHTabWidget.setTabPosition = unbound qt slot setTabPosition of QTabWidget type","title":"setTabPosition"},{"location":"typerig.gui.widgets.html#settabsclosable","text":"typerig.gui.widgets.TRHTabWidget.setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type","title":"setTabsClosable"},{"location":"typerig.gui.widgets.html#settabshape","text":"typerig.gui.widgets.TRHTabWidget.setTabShape = unbound qt slot setTabShape of QTabWidget type","title":"setTabShape"},{"location":"typerig.gui.widgets.html#settabtext","text":"typerig.gui.widgets.TRHTabWidget.setTabText = unbound qt slot setTabText of QTabWidget type","title":"setTabText"},{"location":"typerig.gui.widgets.html#settabtooltip","text":"typerig.gui.widgets.TRHTabWidget.setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type","title":"setTabToolTip"},{"location":"typerig.gui.widgets.html#settabwhatsthis","text":"typerig.gui.widgets.TRHTabWidget.setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type","title":"setTabWhatsThis"},{"location":"typerig.gui.widgets.html#settooltip_2","text":"typerig.gui.widgets.TRHTabWidget.setToolTip = unbound qt slot setToolTip of QTabWidget type","title":"setToolTip"},{"location":"typerig.gui.widgets.html#settooltipduration_2","text":"typerig.gui.widgets.TRHTabWidget.setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type","title":"setToolTipDuration"},{"location":"typerig.gui.widgets.html#setupdatesenabled_2","text":"typerig.gui.widgets.TRHTabWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type","title":"setUpdatesEnabled"},{"location":"typerig.gui.widgets.html#setusesscrollbuttons","text":"typerig.gui.widgets.TRHTabWidget.setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type","title":"setUsesScrollButtons"},{"location":"typerig.gui.widgets.html#setvisible_2","text":"typerig.gui.widgets.TRHTabWidget.setVisible = unbound qt slot py_q_setVisible of QTabWidget type","title":"setVisible"},{"location":"typerig.gui.widgets.html#setwhatsthis_2","text":"typerig.gui.widgets.TRHTabWidget.setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type","title":"setWhatsThis"},{"location":"typerig.gui.widgets.html#setwindowfilepath_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type","title":"setWindowFilePath"},{"location":"typerig.gui.widgets.html#setwindowflags_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type","title":"setWindowFlags"},{"location":"typerig.gui.widgets.html#setwindowicon_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type","title":"setWindowIcon"},{"location":"typerig.gui.widgets.html#setwindowicontext_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type","title":"setWindowIconText"},{"location":"typerig.gui.widgets.html#setwindowmodality_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowModality = unbound qt slot setWindowModality of QTabWidget type","title":"setWindowModality"},{"location":"typerig.gui.widgets.html#setwindowmodified_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowModified = unbound qt slot setWindowModified of QTabWidget type","title":"setWindowModified"},{"location":"typerig.gui.widgets.html#setwindowopacity_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type","title":"setWindowOpacity"},{"location":"typerig.gui.widgets.html#setwindowrole_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowRole = unbound qt slot setWindowRole of QTabWidget type","title":"setWindowRole"},{"location":"typerig.gui.widgets.html#setwindowstate_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowState = unbound qt slot setWindowState of QTabWidget type","title":"setWindowState"},{"location":"typerig.gui.widgets.html#setwindowtitle_2","text":"typerig.gui.widgets.TRHTabWidget.setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type","title":"setWindowTitle"},{"location":"typerig.gui.widgets.html#sharedpainter_2","text":"typerig.gui.widgets.TRHTabWidget.sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type","title":"sharedPainter"},{"location":"typerig.gui.widgets.html#show_2","text":"typerig.gui.widgets.TRHTabWidget.show = unbound qt slot show of QTabWidget type","title":"show"},{"location":"typerig.gui.widgets.html#showevent_2","text":"typerig.gui.widgets.TRHTabWidget.showEvent = unbound qt slot py_q_showEvent of QTabWidget type","title":"showEvent"},{"location":"typerig.gui.widgets.html#showfullscreen_2","text":"typerig.gui.widgets.TRHTabWidget.showFullScreen = unbound qt slot showFullScreen of QTabWidget type","title":"showFullScreen"},{"location":"typerig.gui.widgets.html#showmaximized_2","text":"typerig.gui.widgets.TRHTabWidget.showMaximized = unbound qt slot showMaximized of QTabWidget type","title":"showMaximized"},{"location":"typerig.gui.widgets.html#showminimized_2","text":"typerig.gui.widgets.TRHTabWidget.showMinimized = unbound qt slot showMinimized of QTabWidget type","title":"showMinimized"},{"location":"typerig.gui.widgets.html#shownormal_2","text":"typerig.gui.widgets.TRHTabWidget.showNormal = unbound qt slot showNormal of QTabWidget type","title":"showNormal"},{"location":"typerig.gui.widgets.html#signalsblocked_4","text":"typerig.gui.widgets.TRHTabWidget.signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type","title":"signalsBlocked"},{"location":"typerig.gui.widgets.html#stackunder_2","text":"typerig.gui.widgets.TRHTabWidget.stackUnder = unbound qt slot stackUnder of QTabWidget type","title":"stackUnder"},{"location":"typerig.gui.widgets.html#starttimer_4","text":"typerig.gui.widgets.TRHTabWidget.startTimer = unbound qt slot startTimer of QTabWidget type","title":"startTimer"},{"location":"typerig.gui.widgets.html#style_2","text":"typerig.gui.widgets.TRHTabWidget.style = unbound qt slot style of QTabWidget type","title":"style"},{"location":"typerig.gui.widgets.html#tabbar","text":"typerig.gui.widgets.TRHTabWidget.tabBar = unbound qt slot tabBar of QTabWidget type","title":"tabBar"},{"location":"typerig.gui.widgets.html#tabicon","text":"typerig.gui.widgets.TRHTabWidget.tabIcon = unbound qt slot tabIcon of QTabWidget type","title":"tabIcon"},{"location":"typerig.gui.widgets.html#tabinserted","text":"typerig.gui.widgets.TRHTabWidget.tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type","title":"tabInserted"},{"location":"typerig.gui.widgets.html#tabletevent_2","text":"typerig.gui.widgets.TRHTabWidget.tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type","title":"tabletEvent"},{"location":"typerig.gui.widgets.html#tabremoved","text":"typerig.gui.widgets.TRHTabWidget.tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type","title":"tabRemoved"},{"location":"typerig.gui.widgets.html#tabtext","text":"typerig.gui.widgets.TRHTabWidget.tabText = unbound qt slot tabText of QTabWidget type","title":"tabText"},{"location":"typerig.gui.widgets.html#tabtooltip","text":"typerig.gui.widgets.TRHTabWidget.tabToolTip = unbound qt slot tabToolTip of QTabWidget type","title":"tabToolTip"},{"location":"typerig.gui.widgets.html#tabwhatsthis","text":"typerig.gui.widgets.TRHTabWidget.tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type","title":"tabWhatsThis"},{"location":"typerig.gui.widgets.html#testattribute_2","text":"typerig.gui.widgets.TRHTabWidget.testAttribute = unbound qt slot testAttribute of QTabWidget type","title":"testAttribute"},{"location":"typerig.gui.widgets.html#thread_4","text":"typerig.gui.widgets.TRHTabWidget.thread = unbound qt slot thread of QTabWidget type","title":"thread"},{"location":"typerig.gui.widgets.html#timerevent_4","text":"typerig.gui.widgets.TRHTabWidget.timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type","title":"timerEvent"},{"location":"typerig.gui.widgets.html#tr_4","text":"typerig.gui.widgets.TRHTabWidget.tr = unbound qt slot tr of QTabWidget type","title":"tr"},{"location":"typerig.gui.widgets.html#undermouse_2","text":"typerig.gui.widgets.TRHTabWidget.underMouse = unbound qt slot underMouse of QTabWidget type","title":"underMouse"},{"location":"typerig.gui.widgets.html#ungrabgesture_2","text":"typerig.gui.widgets.TRHTabWidget.ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type","title":"ungrabGesture"},{"location":"typerig.gui.widgets.html#unsetcursor_2","text":"typerig.gui.widgets.TRHTabWidget.unsetCursor = unbound qt slot unsetCursor of QTabWidget type","title":"unsetCursor"},{"location":"typerig.gui.widgets.html#unsetlayoutdirection_2","text":"typerig.gui.widgets.TRHTabWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type","title":"unsetLayoutDirection"},{"location":"typerig.gui.widgets.html#unsetlocale_2","text":"typerig.gui.widgets.TRHTabWidget.unsetLocale = unbound qt slot unsetLocale of QTabWidget type","title":"unsetLocale"},{"location":"typerig.gui.widgets.html#update_4","text":"typerig.gui.widgets.TRHTabWidget.update = unbound qt slot update of QTabWidget type","title":"update"},{"location":"typerig.gui.widgets.html#updategeometry_2","text":"typerig.gui.widgets.TRHTabWidget.updateGeometry = unbound qt slot updateGeometry of QTabWidget type","title":"updateGeometry"},{"location":"typerig.gui.widgets.html#visibleregion_2","text":"typerig.gui.widgets.TRHTabWidget.visibleRegion = unbound qt slot visibleRegion of QTabWidget type","title":"visibleRegion"},{"location":"typerig.gui.widgets.html#wheelevent_2","text":"typerig.gui.widgets.TRHTabWidget.wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type","title":"wheelEvent"},{"location":"typerig.gui.widgets.html#widget_2","text":"typerig.gui.widgets.TRHTabWidget.widget = unbound qt slot widget of QTabWidget type","title":"widget"},{"location":"typerig.gui.widgets.html#widthmm_2","text":"typerig.gui.widgets.TRHTabWidget.widthMM = unbound qt slot widthMM of QTabWidget type","title":"widthMM"},{"location":"typerig.gui.widgets.html#window_2","text":"typerig.gui.widgets.TRHTabWidget.window = unbound qt slot window of QTabWidget type","title":"window"},{"location":"typerig.gui.widgets.html#windowflags_2","text":"typerig.gui.widgets.TRHTabWidget.windowFlags = unbound qt slot windowFlags of QTabWidget type","title":"windowFlags"},{"location":"typerig.gui.widgets.html#windowhandle_2","text":"typerig.gui.widgets.TRHTabWidget.windowHandle = unbound qt slot windowHandle of QTabWidget type","title":"windowHandle"},{"location":"typerig.gui.widgets.html#windowrole_2","text":"typerig.gui.widgets.TRHTabWidget.windowRole = unbound qt slot windowRole of QTabWidget type","title":"windowRole"},{"location":"typerig.gui.widgets.html#windowstate_2","text":"typerig.gui.widgets.TRHTabWidget.windowState = unbound qt slot windowState of QTabWidget type","title":"windowState"},{"location":"typerig.gui.widgets.html#windowtype_2","text":"typerig.gui.widgets.TRHTabWidget.windowType = unbound qt slot windowType of QTabWidget type","title":"windowType"},{"location":"typerig.gui.widgets.html#winid_2","text":"typerig.gui.widgets.TRHTabWidget.winId = unbound qt slot winId of QTabWidget type","title":"winId"},{"location":"typerig.gui.widgets.html#trvtabwidget","text":"","title":"TRVTabWidget"},{"location":"typerig.gui.widgets.html#actionevent_3","text":"typerig.gui.widgets.TRVTabWidget.actionEvent = unbound qt slot py_q_actionEvent of QTabWidget type","title":"actionEvent"},{"location":"typerig.gui.widgets.html#actions_3","text":"typerig.gui.widgets.TRVTabWidget.actions = unbound qt slot actions of QTabWidget type","title":"actions"},{"location":"typerig.gui.widgets.html#activatewindow_3","text":"typerig.gui.widgets.TRVTabWidget.activateWindow = unbound qt slot activateWindow of QTabWidget type","title":"activateWindow"},{"location":"typerig.gui.widgets.html#addaction_3","text":"typerig.gui.widgets.TRVTabWidget.addAction = unbound qt slot addAction of QTabWidget type","title":"addAction"},{"location":"typerig.gui.widgets.html#addactions_3","text":"typerig.gui.widgets.TRVTabWidget.addActions = unbound qt slot addActions of QTabWidget type","title":"addActions"},{"location":"typerig.gui.widgets.html#addtab_1","text":"typerig.gui.widgets.TRVTabWidget.addTab = unbound qt slot addTab of QTabWidget type","title":"addTab"},{"location":"typerig.gui.widgets.html#adjustsize_3","text":"typerig.gui.widgets.TRVTabWidget.adjustSize = unbound qt slot adjustSize of QTabWidget type","title":"adjustSize"},{"location":"typerig.gui.widgets.html#backgroundrole_3","text":"typerig.gui.widgets.TRVTabWidget.backgroundRole = unbound qt slot backgroundRole of QTabWidget type","title":"backgroundRole"},{"location":"typerig.gui.widgets.html#backingstore_3","text":"typerig.gui.widgets.TRVTabWidget.backingStore = unbound qt slot backingStore of QTabWidget type","title":"backingStore"},{"location":"typerig.gui.widgets.html#blocksignals_5","text":"typerig.gui.widgets.TRVTabWidget.blockSignals = unbound qt slot blockSignals of QTabWidget type","title":"blockSignals"},{"location":"typerig.gui.widgets.html#changeevent_3","text":"typerig.gui.widgets.TRVTabWidget.changeEvent = unbound qt slot py_q_changeEvent of QTabWidget type","title":"changeEvent"},{"location":"typerig.gui.widgets.html#childat_3","text":"typerig.gui.widgets.TRVTabWidget.childAt = unbound qt slot childAt of QTabWidget type","title":"childAt"},{"location":"typerig.gui.widgets.html#childevent_5","text":"typerig.gui.widgets.TRVTabWidget.childEvent = unbound qt slot py_q_childEvent of QTabWidget type","title":"childEvent"},{"location":"typerig.gui.widgets.html#children_5","text":"typerig.gui.widgets.TRVTabWidget.children = unbound qt slot children of QTabWidget type","title":"children"},{"location":"typerig.gui.widgets.html#classname_5","text":"typerig.gui.widgets.TRVTabWidget.className = className (...) Return the classname of the object","title":"className"},{"location":"typerig.gui.widgets.html#clear_2","text":"typerig.gui.widgets.TRVTabWidget.clear = unbound qt slot clear of QTabWidget type","title":"clear"},{"location":"typerig.gui.widgets.html#clearfocus_3","text":"typerig.gui.widgets.TRVTabWidget.clearFocus = unbound qt slot clearFocus of QTabWidget type","title":"clearFocus"},{"location":"typerig.gui.widgets.html#clearmask_3","text":"typerig.gui.widgets.TRVTabWidget.clearMask = unbound qt slot clearMask of QTabWidget type","title":"clearMask"},{"location":"typerig.gui.widgets.html#close_3","text":"typerig.gui.widgets.TRVTabWidget.close = unbound qt slot close of QTabWidget type","title":"close"},{"location":"typerig.gui.widgets.html#closeevent_3","text":"typerig.gui.widgets.TRVTabWidget.closeEvent = unbound qt slot py_q_closeEvent of QTabWidget type","title":"closeEvent"},{"location":"typerig.gui.widgets.html#colorcount_3","text":"typerig.gui.widgets.TRVTabWidget.colorCount = unbound qt slot colorCount of QTabWidget type","title":"colorCount"},{"location":"typerig.gui.widgets.html#connect_5","text":"typerig.gui.widgets.TRVTabWidget.connect = unbound qt slot connect of QTabWidget type","title":"connect"},{"location":"typerig.gui.widgets.html#contentsmargins_5","text":"typerig.gui.widgets.TRVTabWidget.contentsMargins = unbound qt slot contentsMargins of QTabWidget type","title":"contentsMargins"},{"location":"typerig.gui.widgets.html#contentsrect_5","text":"typerig.gui.widgets.TRVTabWidget.contentsRect = unbound qt slot contentsRect of QTabWidget type","title":"contentsRect"},{"location":"typerig.gui.widgets.html#contextmenuevent_3","text":"typerig.gui.widgets.TRVTabWidget.contextMenuEvent = unbound qt slot py_q_contextMenuEvent of QTabWidget type","title":"contextMenuEvent"},{"location":"typerig.gui.widgets.html#cornerwidget_2","text":"typerig.gui.widgets.TRVTabWidget.cornerWidget = unbound qt slot cornerWidget of QTabWidget type","title":"cornerWidget"},{"location":"typerig.gui.widgets.html#createwindowcontainer_3","text":"typerig.gui.widgets.TRVTabWidget.createWindowContainer = unbound qt slot static_QWidget_createWindowContainer of QTabWidget type","title":"createWindowContainer"},{"location":"typerig.gui.widgets.html#createwinid_3","text":"typerig.gui.widgets.TRVTabWidget.createWinId = unbound qt slot createWinId of QTabWidget type","title":"createWinId"},{"location":"typerig.gui.widgets.html#currentwidget_1","text":"typerig.gui.widgets.TRVTabWidget.currentWidget = unbound qt slot currentWidget of QTabWidget type","title":"currentWidget"},{"location":"typerig.gui.widgets.html#customevent_5","text":"typerig.gui.widgets.TRVTabWidget.customEvent = unbound qt slot py_q_customEvent of QTabWidget type","title":"customEvent"},{"location":"typerig.gui.widgets.html#delete_5","text":"typerig.gui.widgets.TRVTabWidget.delete = delete (...) Deletes the given C++ object","title":"delete"},{"location":"typerig.gui.widgets.html#deletelater_5","text":"typerig.gui.widgets.TRVTabWidget.deleteLater = unbound qt slot deleteLater of QTabWidget type","title":"deleteLater"},{"location":"typerig.gui.widgets.html#depth_3","text":"typerig.gui.widgets.TRVTabWidget.depth = unbound qt slot depth of QTabWidget type","title":"depth"},{"location":"typerig.gui.widgets.html#destroy_3","text":"typerig.gui.widgets.TRVTabWidget.destroy = unbound qt slot destroy of QTabWidget type","title":"destroy"},{"location":"typerig.gui.widgets.html#devicepixelratio_3","text":"typerig.gui.widgets.TRVTabWidget.devicePixelRatio = unbound qt slot devicePixelRatio of QTabWidget type","title":"devicePixelRatio"},{"location":"typerig.gui.widgets.html#devicepixelratiof_3","text":"typerig.gui.widgets.TRVTabWidget.devicePixelRatioF = unbound qt slot devicePixelRatioF of QTabWidget type","title":"devicePixelRatioF"},{"location":"typerig.gui.widgets.html#devicepixelratiofscale_3","text":"typerig.gui.widgets.TRVTabWidget.devicePixelRatioFScale = unbound qt slot static_QPaintDevice_devicePixelRatioFScale of QTabWidget type","title":"devicePixelRatioFScale"},{"location":"typerig.gui.widgets.html#devtype_3","text":"typerig.gui.widgets.TRVTabWidget.devType = unbound qt slot py_q_devType of QTabWidget type","title":"devType"},{"location":"typerig.gui.widgets.html#disconnect_5","text":"typerig.gui.widgets.TRVTabWidget.disconnect = unbound qt slot disconnect of QTabWidget type","title":"disconnect"},{"location":"typerig.gui.widgets.html#dragenterevent_3","text":"typerig.gui.widgets.TRVTabWidget.dragEnterEvent = unbound qt slot py_q_dragEnterEvent of QTabWidget type","title":"dragEnterEvent"},{"location":"typerig.gui.widgets.html#dragleaveevent_3","text":"typerig.gui.widgets.TRVTabWidget.dragLeaveEvent = unbound qt slot py_q_dragLeaveEvent of QTabWidget type","title":"dragLeaveEvent"},{"location":"typerig.gui.widgets.html#dragmoveevent_3","text":"typerig.gui.widgets.TRVTabWidget.dragMoveEvent = unbound qt slot py_q_dragMoveEvent of QTabWidget type","title":"dragMoveEvent"},{"location":"typerig.gui.widgets.html#dropevent_3","text":"typerig.gui.widgets.TRVTabWidget.dropEvent = unbound qt slot py_q_dropEvent of QTabWidget type","title":"dropEvent"},{"location":"typerig.gui.widgets.html#dumpobjectinfo_5","text":"typerig.gui.widgets.TRVTabWidget.dumpObjectInfo = unbound qt slot dumpObjectInfo of QTabWidget type","title":"dumpObjectInfo"},{"location":"typerig.gui.widgets.html#dumpobjecttree_5","text":"typerig.gui.widgets.TRVTabWidget.dumpObjectTree = unbound qt slot dumpObjectTree of QTabWidget type","title":"dumpObjectTree"},{"location":"typerig.gui.widgets.html#dynamicpropertynames_5","text":"typerig.gui.widgets.TRVTabWidget.dynamicPropertyNames = unbound qt slot dynamicPropertyNames of QTabWidget type","title":"dynamicPropertyNames"},{"location":"typerig.gui.widgets.html#effectivewinid_3","text":"typerig.gui.widgets.TRVTabWidget.effectiveWinId = unbound qt slot effectiveWinId of QTabWidget type","title":"effectiveWinId"},{"location":"typerig.gui.widgets.html#ensurepolished_3","text":"typerig.gui.widgets.TRVTabWidget.ensurePolished = unbound qt slot ensurePolished of QTabWidget type","title":"ensurePolished"},{"location":"typerig.gui.widgets.html#enterevent_3","text":"typerig.gui.widgets.TRVTabWidget.enterEvent = unbound qt slot py_q_enterEvent of QTabWidget type","title":"enterEvent"},{"location":"typerig.gui.widgets.html#event_5","text":"typerig.gui.widgets.TRVTabWidget.event = unbound qt slot py_q_event of QTabWidget type","title":"event"},{"location":"typerig.gui.widgets.html#eventfilter_5","text":"typerig.gui.widgets.TRVTabWidget.eventFilter = unbound qt slot py_q_eventFilter of QTabWidget type","title":"eventFilter"},{"location":"typerig.gui.widgets.html#findchild_5","text":"typerig.gui.widgets.TRVTabWidget.findChild = unbound qt slot findChild of QTabWidget type","title":"findChild"},{"location":"typerig.gui.widgets.html#findchildren_5","text":"typerig.gui.widgets.TRVTabWidget.findChildren = unbound qt slot findChildren of QTabWidget type","title":"findChildren"},{"location":"typerig.gui.widgets.html#focusinevent_3","text":"typerig.gui.widgets.TRVTabWidget.focusInEvent = unbound qt slot py_q_focusInEvent of QTabWidget type","title":"focusInEvent"},{"location":"typerig.gui.widgets.html#focusnextchild_3","text":"typerig.gui.widgets.TRVTabWidget.focusNextChild = unbound qt slot focusNextChild of QTabWidget type","title":"focusNextChild"},{"location":"typerig.gui.widgets.html#focusnextprevchild_3","text":"typerig.gui.widgets.TRVTabWidget.focusNextPrevChild = unbound qt slot py_q_focusNextPrevChild of QTabWidget type","title":"focusNextPrevChild"},{"location":"typerig.gui.widgets.html#focusoutevent_3","text":"typerig.gui.widgets.TRVTabWidget.focusOutEvent = unbound qt slot py_q_focusOutEvent of QTabWidget type","title":"focusOutEvent"},{"location":"typerig.gui.widgets.html#focuspreviouschild_3","text":"typerig.gui.widgets.TRVTabWidget.focusPreviousChild = unbound qt slot focusPreviousChild of QTabWidget type","title":"focusPreviousChild"},{"location":"typerig.gui.widgets.html#focusproxy_3","text":"typerig.gui.widgets.TRVTabWidget.focusProxy = unbound qt slot focusProxy of QTabWidget type","title":"focusProxy"},{"location":"typerig.gui.widgets.html#focuswidget_3","text":"typerig.gui.widgets.TRVTabWidget.focusWidget = unbound qt slot focusWidget of QTabWidget type","title":"focusWidget"},{"location":"typerig.gui.widgets.html#foregroundrole_3","text":"typerig.gui.widgets.TRVTabWidget.foregroundRole = unbound qt slot foregroundRole of QTabWidget type","title":"foregroundRole"},{"location":"typerig.gui.widgets.html#grab_3","text":"typerig.gui.widgets.TRVTabWidget.grab = unbound qt slot grab of QTabWidget type","title":"grab"},{"location":"typerig.gui.widgets.html#grabgesture_3","text":"typerig.gui.widgets.TRVTabWidget.grabGesture = unbound qt slot grabGesture of QTabWidget type","title":"grabGesture"},{"location":"typerig.gui.widgets.html#grabkeyboard_3","text":"typerig.gui.widgets.TRVTabWidget.grabKeyboard = unbound qt slot grabKeyboard of QTabWidget type","title":"grabKeyboard"},{"location":"typerig.gui.widgets.html#grabmouse_3","text":"typerig.gui.widgets.TRVTabWidget.grabMouse = unbound qt slot grabMouse of QTabWidget type","title":"grabMouse"},{"location":"typerig.gui.widgets.html#grabshortcut_3","text":"typerig.gui.widgets.TRVTabWidget.grabShortcut = unbound qt slot grabShortcut of QTabWidget type","title":"grabShortcut"},{"location":"typerig.gui.widgets.html#graphicseffect_3","text":"typerig.gui.widgets.TRVTabWidget.graphicsEffect = unbound qt slot graphicsEffect of QTabWidget type","title":"graphicsEffect"},{"location":"typerig.gui.widgets.html#graphicsproxywidget_3","text":"typerig.gui.widgets.TRVTabWidget.graphicsProxyWidget = unbound qt slot graphicsProxyWidget of QTabWidget type","title":"graphicsProxyWidget"},{"location":"typerig.gui.widgets.html#hasfocus_3","text":"typerig.gui.widgets.TRVTabWidget.hasFocus = unbound qt slot hasFocus of QTabWidget type","title":"hasFocus"},{"location":"typerig.gui.widgets.html#hasheightforwidth_5","text":"typerig.gui.widgets.TRVTabWidget.hasHeightForWidth = unbound qt slot py_q_hasHeightForWidth of QTabWidget type","title":"hasHeightForWidth"},{"location":"typerig.gui.widgets.html#hasmousetracking_3","text":"typerig.gui.widgets.TRVTabWidget.hasMouseTracking = unbound qt slot hasMouseTracking of QTabWidget type","title":"hasMouseTracking"},{"location":"typerig.gui.widgets.html#heightforwidth_5","text":"typerig.gui.widgets.TRVTabWidget.heightForWidth = unbound qt slot py_q_heightForWidth of QTabWidget type","title":"heightForWidth"},{"location":"typerig.gui.widgets.html#heightmm_3","text":"typerig.gui.widgets.TRVTabWidget.heightMM = unbound qt slot heightMM of QTabWidget type","title":"heightMM"},{"location":"typerig.gui.widgets.html#help_5","text":"typerig.gui.widgets.TRVTabWidget.help = help (...) Shows the help of available methods for this class","title":"help"},{"location":"typerig.gui.widgets.html#hide_3","text":"typerig.gui.widgets.TRVTabWidget.hide = unbound qt slot hide of QTabWidget type","title":"hide"},{"location":"typerig.gui.widgets.html#hideevent_3","text":"typerig.gui.widgets.TRVTabWidget.hideEvent = unbound qt slot py_q_hideEvent of QTabWidget type","title":"hideEvent"},{"location":"typerig.gui.widgets.html#indexof_3","text":"typerig.gui.widgets.TRVTabWidget.indexOf = unbound qt slot indexOf of QTabWidget type","title":"indexOf"},{"location":"typerig.gui.widgets.html#inherits_5","text":"typerig.gui.widgets.TRVTabWidget.inherits = inherits (...) Returns if the class inherits or is of given type name","title":"inherits"},{"location":"typerig.gui.widgets.html#initpainter_3","text":"typerig.gui.widgets.TRVTabWidget.initPainter = unbound qt slot py_q_initPainter of QTabWidget type","title":"initPainter"},{"location":"typerig.gui.widgets.html#initstyleoption_2","text":"typerig.gui.widgets.TRVTabWidget.initStyleOption = unbound qt slot initStyleOption of QTabWidget type","title":"initStyleOption"},{"location":"typerig.gui.widgets.html#inputmethodevent_3","text":"typerig.gui.widgets.TRVTabWidget.inputMethodEvent = unbound qt slot py_q_inputMethodEvent of QTabWidget type","title":"inputMethodEvent"},{"location":"typerig.gui.widgets.html#inputmethodquery_3","text":"typerig.gui.widgets.TRVTabWidget.inputMethodQuery = unbound qt slot py_q_inputMethodQuery of QTabWidget type","title":"inputMethodQuery"},{"location":"typerig.gui.widgets.html#insertaction_3","text":"typerig.gui.widgets.TRVTabWidget.insertAction = unbound qt slot insertAction of QTabWidget type","title":"insertAction"},{"location":"typerig.gui.widgets.html#insertactions_3","text":"typerig.gui.widgets.TRVTabWidget.insertActions = unbound qt slot insertActions of QTabWidget type","title":"insertActions"},{"location":"typerig.gui.widgets.html#inserttab_1","text":"typerig.gui.widgets.TRVTabWidget.insertTab = unbound qt slot insertTab of QTabWidget type","title":"insertTab"},{"location":"typerig.gui.widgets.html#installeventfilter_5","text":"typerig.gui.widgets.TRVTabWidget.installEventFilter = unbound qt slot installEventFilter of QTabWidget type","title":"installEventFilter"},{"location":"typerig.gui.widgets.html#isancestorof_3","text":"typerig.gui.widgets.TRVTabWidget.isAncestorOf = unbound qt slot isAncestorOf of QTabWidget type","title":"isAncestorOf"},{"location":"typerig.gui.widgets.html#isenabled_5","text":"typerig.gui.widgets.TRVTabWidget.isEnabled = unbound qt slot isEnabled of QTabWidget type","title":"isEnabled"},{"location":"typerig.gui.widgets.html#isenabledto_3","text":"typerig.gui.widgets.TRVTabWidget.isEnabledTo = unbound qt slot isEnabledTo of QTabWidget type","title":"isEnabledTo"},{"location":"typerig.gui.widgets.html#isfullscreen_3","text":"typerig.gui.widgets.TRVTabWidget.isFullScreen = unbound qt slot isFullScreen of QTabWidget type","title":"isFullScreen"},{"location":"typerig.gui.widgets.html#ishidden_3","text":"typerig.gui.widgets.TRVTabWidget.isHidden = unbound qt slot isHidden of QTabWidget type","title":"isHidden"},{"location":"typerig.gui.widgets.html#islefttoright_3","text":"typerig.gui.widgets.TRVTabWidget.isLeftToRight = unbound qt slot isLeftToRight of QTabWidget type","title":"isLeftToRight"},{"location":"typerig.gui.widgets.html#ismaximized_3","text":"typerig.gui.widgets.TRVTabWidget.isMaximized = unbound qt slot isMaximized of QTabWidget type","title":"isMaximized"},{"location":"typerig.gui.widgets.html#isminimized_3","text":"typerig.gui.widgets.TRVTabWidget.isMinimized = unbound qt slot isMinimized of QTabWidget type","title":"isMinimized"},{"location":"typerig.gui.widgets.html#ismodal_3","text":"typerig.gui.widgets.TRVTabWidget.isModal = unbound qt slot isModal of QTabWidget type","title":"isModal"},{"location":"typerig.gui.widgets.html#ismovable_1","text":"typerig.gui.widgets.TRVTabWidget.isMovable = unbound qt slot isMovable of QTabWidget type","title":"isMovable"},{"location":"typerig.gui.widgets.html#isrighttoleft_3","text":"typerig.gui.widgets.TRVTabWidget.isRightToLeft = unbound qt slot isRightToLeft of QTabWidget type","title":"isRightToLeft"},{"location":"typerig.gui.widgets.html#issignalconnected_5","text":"typerig.gui.widgets.TRVTabWidget.isSignalConnected = unbound qt slot isSignalConnected of QTabWidget type","title":"isSignalConnected"},{"location":"typerig.gui.widgets.html#istabenabled_1","text":"typerig.gui.widgets.TRVTabWidget.isTabEnabled = unbound qt slot isTabEnabled of QTabWidget type","title":"isTabEnabled"},{"location":"typerig.gui.widgets.html#isvisible_3","text":"typerig.gui.widgets.TRVTabWidget.isVisible = unbound qt slot isVisible of QTabWidget type","title":"isVisible"},{"location":"typerig.gui.widgets.html#isvisibleto_3","text":"typerig.gui.widgets.TRVTabWidget.isVisibleTo = unbound qt slot isVisibleTo of QTabWidget type","title":"isVisibleTo"},{"location":"typerig.gui.widgets.html#iswidgettype_5","text":"typerig.gui.widgets.TRVTabWidget.isWidgetType = unbound qt slot isWidgetType of QTabWidget type","title":"isWidgetType"},{"location":"typerig.gui.widgets.html#iswindow_3","text":"typerig.gui.widgets.TRVTabWidget.isWindow = unbound qt slot isWindow of QTabWidget type","title":"isWindow"},{"location":"typerig.gui.widgets.html#iswindowmodified_3","text":"typerig.gui.widgets.TRVTabWidget.isWindowModified = unbound qt slot isWindowModified of QTabWidget type","title":"isWindowModified"},{"location":"typerig.gui.widgets.html#iswindowtype_5","text":"typerig.gui.widgets.TRVTabWidget.isWindowType = unbound qt slot isWindowType of QTabWidget type","title":"isWindowType"},{"location":"typerig.gui.widgets.html#keyboardgrabber_3","text":"typerig.gui.widgets.TRVTabWidget.keyboardGrabber = unbound qt slot static_QWidget_keyboardGrabber of QTabWidget type","title":"keyboardGrabber"},{"location":"typerig.gui.widgets.html#keypressevent_3","text":"typerig.gui.widgets.TRVTabWidget.keyPressEvent = unbound qt slot py_q_keyPressEvent of QTabWidget type","title":"keyPressEvent"},{"location":"typerig.gui.widgets.html#keyreleaseevent_3","text":"typerig.gui.widgets.TRVTabWidget.keyReleaseEvent = unbound qt slot py_q_keyReleaseEvent of QTabWidget type","title":"keyReleaseEvent"},{"location":"typerig.gui.widgets.html#killtimer_5","text":"typerig.gui.widgets.TRVTabWidget.killTimer = unbound qt slot killTimer of QTabWidget type","title":"killTimer"},{"location":"typerig.gui.widgets.html#layout_5","text":"typerig.gui.widgets.TRVTabWidget.layout = unbound qt slot layout of QTabWidget type","title":"layout"},{"location":"typerig.gui.widgets.html#leaveevent_3","text":"typerig.gui.widgets.TRVTabWidget.leaveEvent = unbound qt slot py_q_leaveEvent of QTabWidget type","title":"leaveEvent"},{"location":"typerig.gui.widgets.html#logicaldpix_3","text":"typerig.gui.widgets.TRVTabWidget.logicalDpiX = unbound qt slot logicalDpiX of QTabWidget type","title":"logicalDpiX"},{"location":"typerig.gui.widgets.html#logicaldpiy_3","text":"typerig.gui.widgets.TRVTabWidget.logicalDpiY = unbound qt slot logicalDpiY of QTabWidget type","title":"logicalDpiY"},{"location":"typerig.gui.widgets.html#lower_3","text":"typerig.gui.widgets.TRVTabWidget.lower = unbound qt slot lower of QTabWidget type","title":"lower"},{"location":"typerig.gui.widgets.html#mapfrom_3","text":"typerig.gui.widgets.TRVTabWidget.mapFrom = unbound qt slot mapFrom of QTabWidget type","title":"mapFrom"},{"location":"typerig.gui.widgets.html#mapfromglobal_3","text":"typerig.gui.widgets.TRVTabWidget.mapFromGlobal = unbound qt slot mapFromGlobal of QTabWidget type","title":"mapFromGlobal"},{"location":"typerig.gui.widgets.html#mapfromparent_3","text":"typerig.gui.widgets.TRVTabWidget.mapFromParent = unbound qt slot mapFromParent of QTabWidget type","title":"mapFromParent"},{"location":"typerig.gui.widgets.html#mapto_3","text":"typerig.gui.widgets.TRVTabWidget.mapTo = unbound qt slot mapTo of QTabWidget type","title":"mapTo"},{"location":"typerig.gui.widgets.html#maptoglobal_3","text":"typerig.gui.widgets.TRVTabWidget.mapToGlobal = unbound qt slot mapToGlobal of QTabWidget type","title":"mapToGlobal"},{"location":"typerig.gui.widgets.html#maptoparent_3","text":"typerig.gui.widgets.TRVTabWidget.mapToParent = unbound qt slot mapToParent of QTabWidget type","title":"mapToParent"},{"location":"typerig.gui.widgets.html#mask_3","text":"typerig.gui.widgets.TRVTabWidget.mask = unbound qt slot mask of QTabWidget type","title":"mask"},{"location":"typerig.gui.widgets.html#metaobject_5","text":"typerig.gui.widgets.TRVTabWidget.metaObject = unbound qt slot metaObject of QTabWidget type","title":"metaObject"},{"location":"typerig.gui.widgets.html#metric_3","text":"typerig.gui.widgets.TRVTabWidget.metric = unbound qt slot py_q_metric of QTabWidget type","title":"metric"},{"location":"typerig.gui.widgets.html#mousedoubleclickevent_3","text":"typerig.gui.widgets.TRVTabWidget.mouseDoubleClickEvent = unbound qt slot py_q_mouseDoubleClickEvent of QTabWidget type","title":"mouseDoubleClickEvent"},{"location":"typerig.gui.widgets.html#mousegrabber_3","text":"typerig.gui.widgets.TRVTabWidget.mouseGrabber = unbound qt slot static_QWidget_mouseGrabber of QTabWidget type","title":"mouseGrabber"},{"location":"typerig.gui.widgets.html#mousemoveevent_3","text":"typerig.gui.widgets.TRVTabWidget.mouseMoveEvent = unbound qt slot py_q_mouseMoveEvent of QTabWidget type","title":"mouseMoveEvent"},{"location":"typerig.gui.widgets.html#mousepressevent_3","text":"typerig.gui.widgets.TRVTabWidget.mousePressEvent = unbound qt slot py_q_mousePressEvent of QTabWidget type","title":"mousePressEvent"},{"location":"typerig.gui.widgets.html#mousereleaseevent_3","text":"typerig.gui.widgets.TRVTabWidget.mouseReleaseEvent = unbound qt slot py_q_mouseReleaseEvent of QTabWidget type","title":"mouseReleaseEvent"},{"location":"typerig.gui.widgets.html#move_3","text":"typerig.gui.widgets.TRVTabWidget.move = unbound qt slot move of QTabWidget type","title":"move"},{"location":"typerig.gui.widgets.html#moveevent_3","text":"typerig.gui.widgets.TRVTabWidget.moveEvent = unbound qt slot py_q_moveEvent of QTabWidget type","title":"moveEvent"},{"location":"typerig.gui.widgets.html#movetothread_5","text":"typerig.gui.widgets.TRVTabWidget.moveToThread = unbound qt slot moveToThread of QTabWidget type","title":"moveToThread"},{"location":"typerig.gui.widgets.html#nativeevent_3","text":"typerig.gui.widgets.TRVTabWidget.nativeEvent = unbound qt slot py_q_nativeEvent of QTabWidget type","title":"nativeEvent"},{"location":"typerig.gui.widgets.html#nativeparentwidget_3","text":"typerig.gui.widgets.TRVTabWidget.nativeParentWidget = unbound qt slot nativeParentWidget of QTabWidget type","title":"nativeParentWidget"},{"location":"typerig.gui.widgets.html#nextinfocuschain_3","text":"typerig.gui.widgets.TRVTabWidget.nextInFocusChain = unbound qt slot nextInFocusChain of QTabWidget type","title":"nextInFocusChain"},{"location":"typerig.gui.widgets.html#overridewindowflags_3","text":"typerig.gui.widgets.TRVTabWidget.overrideWindowFlags = unbound qt slot overrideWindowFlags of QTabWidget type","title":"overrideWindowFlags"},{"location":"typerig.gui.widgets.html#overridewindowstate_3","text":"typerig.gui.widgets.TRVTabWidget.overrideWindowState = unbound qt slot overrideWindowState of QTabWidget type","title":"overrideWindowState"},{"location":"typerig.gui.widgets.html#paintengine_3","text":"typerig.gui.widgets.TRVTabWidget.paintEngine = unbound qt slot py_q_paintEngine of QTabWidget type","title":"paintEngine"},{"location":"typerig.gui.widgets.html#paintevent_3","text":"typerig.gui.widgets.TRVTabWidget.paintEvent = unbound qt slot py_q_paintEvent of QTabWidget type","title":"paintEvent"},{"location":"typerig.gui.widgets.html#paintingactive_3","text":"typerig.gui.widgets.TRVTabWidget.paintingActive = unbound qt slot paintingActive of QTabWidget type","title":"paintingActive"},{"location":"typerig.gui.widgets.html#parent_5","text":"typerig.gui.widgets.TRVTabWidget.parent = unbound qt slot parent of QTabWidget type","title":"parent"},{"location":"typerig.gui.widgets.html#parentwidget_5","text":"typerig.gui.widgets.TRVTabWidget.parentWidget = unbound qt slot parentWidget of QTabWidget type","title":"parentWidget"},{"location":"typerig.gui.widgets.html#physicaldpix_3","text":"typerig.gui.widgets.TRVTabWidget.physicalDpiX = unbound qt slot physicalDpiX of QTabWidget type","title":"physicalDpiX"},{"location":"typerig.gui.widgets.html#physicaldpiy_3","text":"typerig.gui.widgets.TRVTabWidget.physicalDpiY = unbound qt slot physicalDpiY of QTabWidget type","title":"physicalDpiY"},{"location":"typerig.gui.widgets.html#previousinfocuschain_3","text":"typerig.gui.widgets.TRVTabWidget.previousInFocusChain = unbound qt slot previousInFocusChain of QTabWidget type","title":"previousInFocusChain"},{"location":"typerig.gui.widgets.html#property_5","text":"typerig.gui.widgets.TRVTabWidget.property = unbound qt slot property of QTabWidget type","title":"property"},{"location":"typerig.gui.widgets.html#raise_3","text":"typerig.gui.widgets.TRVTabWidget.raise = unbound qt slot raise of QTabWidget type","title":"raise"},{"location":"typerig.gui.widgets.html#redirected_3","text":"typerig.gui.widgets.TRVTabWidget.redirected = unbound qt slot py_q_redirected of QTabWidget type","title":"redirected"},{"location":"typerig.gui.widgets.html#releasekeyboard_3","text":"typerig.gui.widgets.TRVTabWidget.releaseKeyboard = unbound qt slot releaseKeyboard of QTabWidget type","title":"releaseKeyboard"},{"location":"typerig.gui.widgets.html#releasemouse_3","text":"typerig.gui.widgets.TRVTabWidget.releaseMouse = unbound qt slot releaseMouse of QTabWidget type","title":"releaseMouse"},{"location":"typerig.gui.widgets.html#releaseshortcut_3","text":"typerig.gui.widgets.TRVTabWidget.releaseShortcut = unbound qt slot releaseShortcut of QTabWidget type","title":"releaseShortcut"},{"location":"typerig.gui.widgets.html#removeaction_3","text":"typerig.gui.widgets.TRVTabWidget.removeAction = unbound qt slot removeAction of QTabWidget type","title":"removeAction"},{"location":"typerig.gui.widgets.html#removeeventfilter_5","text":"typerig.gui.widgets.TRVTabWidget.removeEventFilter = unbound qt slot removeEventFilter of QTabWidget type","title":"removeEventFilter"},{"location":"typerig.gui.widgets.html#removetab_1","text":"typerig.gui.widgets.TRVTabWidget.removeTab = unbound qt slot removeTab of QTabWidget type","title":"removeTab"},{"location":"typerig.gui.widgets.html#render_3","text":"typerig.gui.widgets.TRVTabWidget.render = unbound qt slot render of QTabWidget type","title":"render"},{"location":"typerig.gui.widgets.html#repaint_3","text":"typerig.gui.widgets.TRVTabWidget.repaint = unbound qt slot repaint of QTabWidget type","title":"repaint"},{"location":"typerig.gui.widgets.html#resize_3","text":"typerig.gui.widgets.TRVTabWidget.resize = unbound qt slot resize of QTabWidget type","title":"resize"},{"location":"typerig.gui.widgets.html#resizeevent_3","text":"typerig.gui.widgets.TRVTabWidget.resizeEvent = unbound qt slot py_q_resizeEvent of QTabWidget type","title":"resizeEvent"},{"location":"typerig.gui.widgets.html#restoregeometry_3","text":"typerig.gui.widgets.TRVTabWidget.restoreGeometry = unbound qt slot restoreGeometry of QTabWidget type","title":"restoreGeometry"},{"location":"typerig.gui.widgets.html#savegeometry_3","text":"typerig.gui.widgets.TRVTabWidget.saveGeometry = unbound qt slot saveGeometry of QTabWidget type","title":"saveGeometry"},{"location":"typerig.gui.widgets.html#scroll_3","text":"typerig.gui.widgets.TRVTabWidget.scroll = unbound qt slot scroll of QTabWidget type","title":"scroll"},{"location":"typerig.gui.widgets.html#sender_5","text":"typerig.gui.widgets.TRVTabWidget.sender = unbound qt slot sender of QTabWidget type","title":"sender"},{"location":"typerig.gui.widgets.html#sendersignalindex_5","text":"typerig.gui.widgets.TRVTabWidget.senderSignalIndex = unbound qt slot senderSignalIndex of QTabWidget type","title":"senderSignalIndex"},{"location":"typerig.gui.widgets.html#setacceptdrops_3","text":"typerig.gui.widgets.TRVTabWidget.setAcceptDrops = unbound qt slot setAcceptDrops of QTabWidget type","title":"setAcceptDrops"},{"location":"typerig.gui.widgets.html#setaccessibledescription_3","text":"typerig.gui.widgets.TRVTabWidget.setAccessibleDescription = unbound qt slot setAccessibleDescription of QTabWidget type","title":"setAccessibleDescription"},{"location":"typerig.gui.widgets.html#setaccessiblename_3","text":"typerig.gui.widgets.TRVTabWidget.setAccessibleName = unbound qt slot setAccessibleName of QTabWidget type","title":"setAccessibleName"},{"location":"typerig.gui.widgets.html#setattribute_3","text":"typerig.gui.widgets.TRVTabWidget.setAttribute = unbound qt slot setAttribute of QTabWidget type","title":"setAttribute"},{"location":"typerig.gui.widgets.html#setautofillbackground_3","text":"typerig.gui.widgets.TRVTabWidget.setAutoFillBackground = unbound qt slot setAutoFillBackground of QTabWidget type","title":"setAutoFillBackground"},{"location":"typerig.gui.widgets.html#setbackgroundrole_3","text":"typerig.gui.widgets.TRVTabWidget.setBackgroundRole = unbound qt slot setBackgroundRole of QTabWidget type","title":"setBackgroundRole"},{"location":"typerig.gui.widgets.html#setbasesize_3","text":"typerig.gui.widgets.TRVTabWidget.setBaseSize = unbound qt slot setBaseSize of QTabWidget type","title":"setBaseSize"},{"location":"typerig.gui.widgets.html#setcontentsmargins_5","text":"typerig.gui.widgets.TRVTabWidget.setContentsMargins = unbound qt slot setContentsMargins of QTabWidget type","title":"setContentsMargins"},{"location":"typerig.gui.widgets.html#setcontextmenupolicy_3","text":"typerig.gui.widgets.TRVTabWidget.setContextMenuPolicy = unbound qt slot setContextMenuPolicy of QTabWidget type","title":"setContextMenuPolicy"},{"location":"typerig.gui.widgets.html#setcornerwidget_2","text":"typerig.gui.widgets.TRVTabWidget.setCornerWidget = unbound qt slot setCornerWidget of QTabWidget type","title":"setCornerWidget"},{"location":"typerig.gui.widgets.html#setcurrentindex_2","text":"typerig.gui.widgets.TRVTabWidget.setCurrentIndex = unbound qt slot setCurrentIndex of QTabWidget type","title":"setCurrentIndex"},{"location":"typerig.gui.widgets.html#setcurrentwidget_1","text":"typerig.gui.widgets.TRVTabWidget.setCurrentWidget = unbound qt slot setCurrentWidget of QTabWidget type","title":"setCurrentWidget"},{"location":"typerig.gui.widgets.html#setcursor_3","text":"typerig.gui.widgets.TRVTabWidget.setCursor = unbound qt slot setCursor of QTabWidget type","title":"setCursor"},{"location":"typerig.gui.widgets.html#setdisabled_3","text":"typerig.gui.widgets.TRVTabWidget.setDisabled = unbound qt slot setDisabled of QTabWidget type","title":"setDisabled"},{"location":"typerig.gui.widgets.html#setdocumentmode_1","text":"typerig.gui.widgets.TRVTabWidget.setDocumentMode = unbound qt slot setDocumentMode of QTabWidget type","title":"setDocumentMode"},{"location":"typerig.gui.widgets.html#setelidemode_1","text":"typerig.gui.widgets.TRVTabWidget.setElideMode = unbound qt slot setElideMode of QTabWidget type","title":"setElideMode"},{"location":"typerig.gui.widgets.html#setenabled_5","text":"typerig.gui.widgets.TRVTabWidget.setEnabled = unbound qt slot setEnabled of QTabWidget type","title":"setEnabled"},{"location":"typerig.gui.widgets.html#setfixedheight_3","text":"typerig.gui.widgets.TRVTabWidget.setFixedHeight = unbound qt slot setFixedHeight of QTabWidget type","title":"setFixedHeight"},{"location":"typerig.gui.widgets.html#setfixedsize_3","text":"typerig.gui.widgets.TRVTabWidget.setFixedSize = unbound qt slot setFixedSize of QTabWidget type","title":"setFixedSize"},{"location":"typerig.gui.widgets.html#setfixedwidth_3","text":"typerig.gui.widgets.TRVTabWidget.setFixedWidth = unbound qt slot setFixedWidth of QTabWidget type","title":"setFixedWidth"},{"location":"typerig.gui.widgets.html#setfocus_3","text":"typerig.gui.widgets.TRVTabWidget.setFocus = unbound qt slot setFocus of QTabWidget type","title":"setFocus"},{"location":"typerig.gui.widgets.html#setfocuspolicy_3","text":"typerig.gui.widgets.TRVTabWidget.setFocusPolicy = unbound qt slot setFocusPolicy of QTabWidget type","title":"setFocusPolicy"},{"location":"typerig.gui.widgets.html#setfocusproxy_3","text":"typerig.gui.widgets.TRVTabWidget.setFocusProxy = unbound qt slot setFocusProxy of QTabWidget type","title":"setFocusProxy"},{"location":"typerig.gui.widgets.html#setfont_3","text":"typerig.gui.widgets.TRVTabWidget.setFont = unbound qt slot setFont of QTabWidget type","title":"setFont"},{"location":"typerig.gui.widgets.html#setforegroundrole_3","text":"typerig.gui.widgets.TRVTabWidget.setForegroundRole = unbound qt slot setForegroundRole of QTabWidget type","title":"setForegroundRole"},{"location":"typerig.gui.widgets.html#setgeometry_5","text":"typerig.gui.widgets.TRVTabWidget.setGeometry = unbound qt slot setGeometry of QTabWidget type","title":"setGeometry"},{"location":"typerig.gui.widgets.html#setgraphicseffect_3","text":"typerig.gui.widgets.TRVTabWidget.setGraphicsEffect = unbound qt slot setGraphicsEffect of QTabWidget type","title":"setGraphicsEffect"},{"location":"typerig.gui.widgets.html#sethidden_3","text":"typerig.gui.widgets.TRVTabWidget.setHidden = unbound qt slot setHidden of QTabWidget type","title":"setHidden"},{"location":"typerig.gui.widgets.html#seticonsize_2","text":"typerig.gui.widgets.TRVTabWidget.setIconSize = unbound qt slot setIconSize of QTabWidget type","title":"setIconSize"},{"location":"typerig.gui.widgets.html#setinputmethodhints_3","text":"typerig.gui.widgets.TRVTabWidget.setInputMethodHints = unbound qt slot setInputMethodHints of QTabWidget type","title":"setInputMethodHints"},{"location":"typerig.gui.widgets.html#setlayout_3","text":"typerig.gui.widgets.TRVTabWidget.setLayout = unbound qt slot setLayout of QTabWidget type","title":"setLayout"},{"location":"typerig.gui.widgets.html#setlayoutdirection_3","text":"typerig.gui.widgets.TRVTabWidget.setLayoutDirection = unbound qt slot setLayoutDirection of QTabWidget type","title":"setLayoutDirection"},{"location":"typerig.gui.widgets.html#setlocale_3","text":"typerig.gui.widgets.TRVTabWidget.setLocale = unbound qt slot setLocale of QTabWidget type","title":"setLocale"},{"location":"typerig.gui.widgets.html#setmask_3","text":"typerig.gui.widgets.TRVTabWidget.setMask = unbound qt slot setMask of QTabWidget type","title":"setMask"},{"location":"typerig.gui.widgets.html#setmaximumheight_3","text":"typerig.gui.widgets.TRVTabWidget.setMaximumHeight = unbound qt slot setMaximumHeight of QTabWidget type","title":"setMaximumHeight"},{"location":"typerig.gui.widgets.html#setmaximumsize_3","text":"typerig.gui.widgets.TRVTabWidget.setMaximumSize = unbound qt slot setMaximumSize of QTabWidget type","title":"setMaximumSize"},{"location":"typerig.gui.widgets.html#setmaximumwidth_3","text":"typerig.gui.widgets.TRVTabWidget.setMaximumWidth = unbound qt slot setMaximumWidth of QTabWidget type","title":"setMaximumWidth"},{"location":"typerig.gui.widgets.html#setminimumheight_3","text":"typerig.gui.widgets.TRVTabWidget.setMinimumHeight = unbound qt slot setMinimumHeight of QTabWidget type","title":"setMinimumHeight"},{"location":"typerig.gui.widgets.html#setminimumsize_3","text":"typerig.gui.widgets.TRVTabWidget.setMinimumSize = unbound qt slot setMinimumSize of QTabWidget type","title":"setMinimumSize"},{"location":"typerig.gui.widgets.html#setminimumwidth_3","text":"typerig.gui.widgets.TRVTabWidget.setMinimumWidth = unbound qt slot setMinimumWidth of QTabWidget type","title":"setMinimumWidth"},{"location":"typerig.gui.widgets.html#setmousetracking_3","text":"typerig.gui.widgets.TRVTabWidget.setMouseTracking = unbound qt slot setMouseTracking of QTabWidget type","title":"setMouseTracking"},{"location":"typerig.gui.widgets.html#setmovable_1","text":"typerig.gui.widgets.TRVTabWidget.setMovable = unbound qt slot setMovable of QTabWidget type","title":"setMovable"},{"location":"typerig.gui.widgets.html#setobjectname_5","text":"typerig.gui.widgets.TRVTabWidget.setObjectName = unbound qt slot setObjectName of QTabWidget type","title":"setObjectName"},{"location":"typerig.gui.widgets.html#setpalette_3","text":"typerig.gui.widgets.TRVTabWidget.setPalette = unbound qt slot setPalette of QTabWidget type","title":"setPalette"},{"location":"typerig.gui.widgets.html#setparent_5","text":"typerig.gui.widgets.TRVTabWidget.setParent = unbound qt slot setParent of QTabWidget type","title":"setParent"},{"location":"typerig.gui.widgets.html#setproperty_5","text":"typerig.gui.widgets.TRVTabWidget.setProperty = unbound qt slot setProperty of QTabWidget type","title":"setProperty"},{"location":"typerig.gui.widgets.html#setshortcutautorepeat_3","text":"typerig.gui.widgets.TRVTabWidget.setShortcutAutoRepeat = unbound qt slot setShortcutAutoRepeat of QTabWidget type","title":"setShortcutAutoRepeat"},{"location":"typerig.gui.widgets.html#setshortcutenabled_3","text":"typerig.gui.widgets.TRVTabWidget.setShortcutEnabled = unbound qt slot setShortcutEnabled of QTabWidget type","title":"setShortcutEnabled"},{"location":"typerig.gui.widgets.html#setsizeincrement_3","text":"typerig.gui.widgets.TRVTabWidget.setSizeIncrement = unbound qt slot setSizeIncrement of QTabWidget type","title":"setSizeIncrement"},{"location":"typerig.gui.widgets.html#setsizepolicy_3","text":"typerig.gui.widgets.TRVTabWidget.setSizePolicy = unbound qt slot setSizePolicy of QTabWidget type","title":"setSizePolicy"},{"location":"typerig.gui.widgets.html#setstatustip_3","text":"typerig.gui.widgets.TRVTabWidget.setStatusTip = unbound qt slot setStatusTip of QTabWidget type","title":"setStatusTip"},{"location":"typerig.gui.widgets.html#setstyle_3","text":"typerig.gui.widgets.TRVTabWidget.setStyle = unbound qt slot setStyle of QTabWidget type","title":"setStyle"},{"location":"typerig.gui.widgets.html#setstylesheet_3","text":"typerig.gui.widgets.TRVTabWidget.setStyleSheet = unbound qt slot setStyleSheet of QTabWidget type","title":"setStyleSheet"},{"location":"typerig.gui.widgets.html#settabbar_1","text":"typerig.gui.widgets.TRVTabWidget.setTabBar = unbound qt slot setTabBar of QTabWidget type","title":"setTabBar"},{"location":"typerig.gui.widgets.html#settabbarautohide_1","text":"typerig.gui.widgets.TRVTabWidget.setTabBarAutoHide = unbound qt slot setTabBarAutoHide of QTabWidget type","title":"setTabBarAutoHide"},{"location":"typerig.gui.widgets.html#settabenabled_1","text":"typerig.gui.widgets.TRVTabWidget.setTabEnabled = unbound qt slot setTabEnabled of QTabWidget type","title":"setTabEnabled"},{"location":"typerig.gui.widgets.html#settabicon_1","text":"typerig.gui.widgets.TRVTabWidget.setTabIcon = unbound qt slot setTabIcon of QTabWidget type","title":"setTabIcon"},{"location":"typerig.gui.widgets.html#settaborder_3","text":"typerig.gui.widgets.TRVTabWidget.setTabOrder = unbound qt slot static_QWidget_setTabOrder of QTabWidget type","title":"setTabOrder"},{"location":"typerig.gui.widgets.html#settabposition_1","text":"typerig.gui.widgets.TRVTabWidget.setTabPosition = unbound qt slot setTabPosition of QTabWidget type","title":"setTabPosition"},{"location":"typerig.gui.widgets.html#settabsclosable_1","text":"typerig.gui.widgets.TRVTabWidget.setTabsClosable = unbound qt slot setTabsClosable of QTabWidget type","title":"setTabsClosable"},{"location":"typerig.gui.widgets.html#settabshape_1","text":"typerig.gui.widgets.TRVTabWidget.setTabShape = unbound qt slot setTabShape of QTabWidget type","title":"setTabShape"},{"location":"typerig.gui.widgets.html#settabtext_1","text":"typerig.gui.widgets.TRVTabWidget.setTabText = unbound qt slot setTabText of QTabWidget type","title":"setTabText"},{"location":"typerig.gui.widgets.html#settabtooltip_1","text":"typerig.gui.widgets.TRVTabWidget.setTabToolTip = unbound qt slot setTabToolTip of QTabWidget type","title":"setTabToolTip"},{"location":"typerig.gui.widgets.html#settabwhatsthis_1","text":"typerig.gui.widgets.TRVTabWidget.setTabWhatsThis = unbound qt slot setTabWhatsThis of QTabWidget type","title":"setTabWhatsThis"},{"location":"typerig.gui.widgets.html#settooltip_3","text":"typerig.gui.widgets.TRVTabWidget.setToolTip = unbound qt slot setToolTip of QTabWidget type","title":"setToolTip"},{"location":"typerig.gui.widgets.html#settooltipduration_3","text":"typerig.gui.widgets.TRVTabWidget.setToolTipDuration = unbound qt slot setToolTipDuration of QTabWidget type","title":"setToolTipDuration"},{"location":"typerig.gui.widgets.html#setupdatesenabled_3","text":"typerig.gui.widgets.TRVTabWidget.setUpdatesEnabled = unbound qt slot setUpdatesEnabled of QTabWidget type","title":"setUpdatesEnabled"},{"location":"typerig.gui.widgets.html#setusesscrollbuttons_1","text":"typerig.gui.widgets.TRVTabWidget.setUsesScrollButtons = unbound qt slot setUsesScrollButtons of QTabWidget type","title":"setUsesScrollButtons"},{"location":"typerig.gui.widgets.html#setvisible_3","text":"typerig.gui.widgets.TRVTabWidget.setVisible = unbound qt slot py_q_setVisible of QTabWidget type","title":"setVisible"},{"location":"typerig.gui.widgets.html#setwhatsthis_3","text":"typerig.gui.widgets.TRVTabWidget.setWhatsThis = unbound qt slot setWhatsThis of QTabWidget type","title":"setWhatsThis"},{"location":"typerig.gui.widgets.html#setwindowfilepath_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowFilePath = unbound qt slot setWindowFilePath of QTabWidget type","title":"setWindowFilePath"},{"location":"typerig.gui.widgets.html#setwindowflags_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowFlags = unbound qt slot setWindowFlags of QTabWidget type","title":"setWindowFlags"},{"location":"typerig.gui.widgets.html#setwindowicon_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowIcon = unbound qt slot setWindowIcon of QTabWidget type","title":"setWindowIcon"},{"location":"typerig.gui.widgets.html#setwindowicontext_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowIconText = unbound qt slot setWindowIconText of QTabWidget type","title":"setWindowIconText"},{"location":"typerig.gui.widgets.html#setwindowmodality_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowModality = unbound qt slot setWindowModality of QTabWidget type","title":"setWindowModality"},{"location":"typerig.gui.widgets.html#setwindowmodified_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowModified = unbound qt slot setWindowModified of QTabWidget type","title":"setWindowModified"},{"location":"typerig.gui.widgets.html#setwindowopacity_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowOpacity = unbound qt slot setWindowOpacity of QTabWidget type","title":"setWindowOpacity"},{"location":"typerig.gui.widgets.html#setwindowrole_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowRole = unbound qt slot setWindowRole of QTabWidget type","title":"setWindowRole"},{"location":"typerig.gui.widgets.html#setwindowstate_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowState = unbound qt slot setWindowState of QTabWidget type","title":"setWindowState"},{"location":"typerig.gui.widgets.html#setwindowtitle_3","text":"typerig.gui.widgets.TRVTabWidget.setWindowTitle = unbound qt slot setWindowTitle of QTabWidget type","title":"setWindowTitle"},{"location":"typerig.gui.widgets.html#sharedpainter_3","text":"typerig.gui.widgets.TRVTabWidget.sharedPainter = unbound qt slot py_q_sharedPainter of QTabWidget type","title":"sharedPainter"},{"location":"typerig.gui.widgets.html#show_3","text":"typerig.gui.widgets.TRVTabWidget.show = unbound qt slot show of QTabWidget type","title":"show"},{"location":"typerig.gui.widgets.html#showevent_3","text":"typerig.gui.widgets.TRVTabWidget.showEvent = unbound qt slot py_q_showEvent of QTabWidget type","title":"showEvent"},{"location":"typerig.gui.widgets.html#showfullscreen_3","text":"typerig.gui.widgets.TRVTabWidget.showFullScreen = unbound qt slot showFullScreen of QTabWidget type","title":"showFullScreen"},{"location":"typerig.gui.widgets.html#showmaximized_3","text":"typerig.gui.widgets.TRVTabWidget.showMaximized = unbound qt slot showMaximized of QTabWidget type","title":"showMaximized"},{"location":"typerig.gui.widgets.html#showminimized_3","text":"typerig.gui.widgets.TRVTabWidget.showMinimized = unbound qt slot showMinimized of QTabWidget type","title":"showMinimized"},{"location":"typerig.gui.widgets.html#shownormal_3","text":"typerig.gui.widgets.TRVTabWidget.showNormal = unbound qt slot showNormal of QTabWidget type","title":"showNormal"},{"location":"typerig.gui.widgets.html#signalsblocked_5","text":"typerig.gui.widgets.TRVTabWidget.signalsBlocked = unbound qt slot signalsBlocked of QTabWidget type","title":"signalsBlocked"},{"location":"typerig.gui.widgets.html#stackunder_3","text":"typerig.gui.widgets.TRVTabWidget.stackUnder = unbound qt slot stackUnder of QTabWidget type","title":"stackUnder"},{"location":"typerig.gui.widgets.html#starttimer_5","text":"typerig.gui.widgets.TRVTabWidget.startTimer = unbound qt slot startTimer of QTabWidget type","title":"startTimer"},{"location":"typerig.gui.widgets.html#style_3","text":"typerig.gui.widgets.TRVTabWidget.style = unbound qt slot style of QTabWidget type","title":"style"},{"location":"typerig.gui.widgets.html#tabbar_1","text":"typerig.gui.widgets.TRVTabWidget.tabBar = unbound qt slot tabBar of QTabWidget type","title":"tabBar"},{"location":"typerig.gui.widgets.html#tabicon_1","text":"typerig.gui.widgets.TRVTabWidget.tabIcon = unbound qt slot tabIcon of QTabWidget type","title":"tabIcon"},{"location":"typerig.gui.widgets.html#tabinserted_1","text":"typerig.gui.widgets.TRVTabWidget.tabInserted = unbound qt slot py_q_tabInserted of QTabWidget type","title":"tabInserted"},{"location":"typerig.gui.widgets.html#tabletevent_3","text":"typerig.gui.widgets.TRVTabWidget.tabletEvent = unbound qt slot py_q_tabletEvent of QTabWidget type","title":"tabletEvent"},{"location":"typerig.gui.widgets.html#tabremoved_1","text":"typerig.gui.widgets.TRVTabWidget.tabRemoved = unbound qt slot py_q_tabRemoved of QTabWidget type","title":"tabRemoved"},{"location":"typerig.gui.widgets.html#tabtext_1","text":"typerig.gui.widgets.TRVTabWidget.tabText = unbound qt slot tabText of QTabWidget type","title":"tabText"},{"location":"typerig.gui.widgets.html#tabtooltip_1","text":"typerig.gui.widgets.TRVTabWidget.tabToolTip = unbound qt slot tabToolTip of QTabWidget type","title":"tabToolTip"},{"location":"typerig.gui.widgets.html#tabwhatsthis_1","text":"typerig.gui.widgets.TRVTabWidget.tabWhatsThis = unbound qt slot tabWhatsThis of QTabWidget type","title":"tabWhatsThis"},{"location":"typerig.gui.widgets.html#testattribute_3","text":"typerig.gui.widgets.TRVTabWidget.testAttribute = unbound qt slot testAttribute of QTabWidget type","title":"testAttribute"},{"location":"typerig.gui.widgets.html#thread_5","text":"typerig.gui.widgets.TRVTabWidget.thread = unbound qt slot thread of QTabWidget type","title":"thread"},{"location":"typerig.gui.widgets.html#timerevent_5","text":"typerig.gui.widgets.TRVTabWidget.timerEvent = unbound qt slot py_q_timerEvent of QTabWidget type","title":"timerEvent"},{"location":"typerig.gui.widgets.html#tr_5","text":"typerig.gui.widgets.TRVTabWidget.tr = unbound qt slot tr of QTabWidget type","title":"tr"},{"location":"typerig.gui.widgets.html#undermouse_3","text":"typerig.gui.widgets.TRVTabWidget.underMouse = unbound qt slot underMouse of QTabWidget type","title":"underMouse"},{"location":"typerig.gui.widgets.html#ungrabgesture_3","text":"typerig.gui.widgets.TRVTabWidget.ungrabGesture = unbound qt slot ungrabGesture of QTabWidget type","title":"ungrabGesture"},{"location":"typerig.gui.widgets.html#unsetcursor_3","text":"typerig.gui.widgets.TRVTabWidget.unsetCursor = unbound qt slot unsetCursor of QTabWidget type","title":"unsetCursor"},{"location":"typerig.gui.widgets.html#unsetlayoutdirection_3","text":"typerig.gui.widgets.TRVTabWidget.unsetLayoutDirection = unbound qt slot unsetLayoutDirection of QTabWidget type","title":"unsetLayoutDirection"},{"location":"typerig.gui.widgets.html#unsetlocale_3","text":"typerig.gui.widgets.TRVTabWidget.unsetLocale = unbound qt slot unsetLocale of QTabWidget type","title":"unsetLocale"},{"location":"typerig.gui.widgets.html#update_5","text":"typerig.gui.widgets.TRVTabWidget.update = unbound qt slot update of QTabWidget type","title":"update"},{"location":"typerig.gui.widgets.html#updategeometry_3","text":"typerig.gui.widgets.TRVTabWidget.updateGeometry = unbound qt slot updateGeometry of QTabWidget type","title":"updateGeometry"},{"location":"typerig.gui.widgets.html#visibleregion_3","text":"typerig.gui.widgets.TRVTabWidget.visibleRegion = unbound qt slot visibleRegion of QTabWidget type","title":"visibleRegion"},{"location":"typerig.gui.widgets.html#wheelevent_3","text":"typerig.gui.widgets.TRVTabWidget.wheelEvent = unbound qt slot py_q_wheelEvent of QTabWidget type","title":"wheelEvent"},{"location":"typerig.gui.widgets.html#widget_3","text":"typerig.gui.widgets.TRVTabWidget.widget = unbound qt slot widget of QTabWidget type","title":"widget"},{"location":"typerig.gui.widgets.html#widthmm_3","text":"typerig.gui.widgets.TRVTabWidget.widthMM = unbound qt slot widthMM of QTabWidget type","title":"widthMM"},{"location":"typerig.gui.widgets.html#window_3","text":"typerig.gui.widgets.TRVTabWidget.window = unbound qt slot window of QTabWidget type","title":"window"},{"location":"typerig.gui.widgets.html#windowflags_3","text":"typerig.gui.widgets.TRVTabWidget.windowFlags = unbound qt slot windowFlags of QTabWidget type","title":"windowFlags"},{"location":"typerig.gui.widgets.html#windowhandle_3","text":"typerig.gui.widgets.TRVTabWidget.windowHandle = unbound qt slot windowHandle of QTabWidget type","title":"windowHandle"},{"location":"typerig.gui.widgets.html#windowrole_3","text":"typerig.gui.widgets.TRVTabWidget.windowRole = unbound qt slot windowRole of QTabWidget type","title":"windowRole"},{"location":"typerig.gui.widgets.html#windowstate_3","text":"typerig.gui.widgets.TRVTabWidget.windowState = unbound qt slot windowState of QTabWidget type","title":"windowState"},{"location":"typerig.gui.widgets.html#windowtype_3","text":"typerig.gui.widgets.TRVTabWidget.windowType = unbound qt slot windowType of QTabWidget type","title":"windowType"},{"location":"typerig.gui.widgets.html#winid_3","text":"typerig.gui.widgets.TRVTabWidget.winId = unbound qt slot winId of QTabWidget type","title":"winId"},{"location":"typerig.html","text":"typerig typerig from proxy import __version__ as current_ver __version__ = current_ver Package Contents core (package) gui (package) proxy (package)","title":"typerig"},{"location":"typerig.html#typerig","text":"","title":"typerig"},{"location":"typerig.proxy.application.app.html","text":"typerig.proxy.application.app typerig . proxy . application .app ( version 0.76.0) # MODULE: Typerig / Proxy / Application # ----------------------------------------------------------- # (C) Vassil Kateliev, 2019-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab PythonQt Classes builtin .object pItems pTextBlock pWorkspace class pItems ( builtin .object ) Proxy to flItems object Constructor: pItems() Attributes: .fl (flItems): Current workspace Methods init (self) outputGlyphNames (self, glyphNamesList, layerList =[] , cursor_location =0 ) Output text string using glyph names and layers specified outputString (self, string, cursor_location =0 ) Output text to the application Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pTextBlock ( builtin .object ) Proxy to flTextBlock object Constructor: pTextBlock(flTextBlock) Attributes: .fl (flTextBlock): flTextBlock Parent Methods init (self, textBlock) repr (self) clone (self) getFontSize (self) getFrameSize (self) getGlyphBounds (self) getString (self) getTransform (self) getWrapState (self) height (self) reloc (self, x, y) resetTransform (self) setFontSize (self, fontSize) setFrameSize (self, width, height) setFrameWidth (self, width) setPageSize (self, sizeName, fixedHeight =(True, True) ) setTextWrap (self, width) setTransform (self, newTransform) setWrapState (self, wrapText =True ) update (self) width (self) x (self) y (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pWorkspace ( builtin .object ) Proxy to flWorkspace object Constructor: pWorkspace() Attributes: .fl (flWorkspace): Current workspace .main (QWidget): Main QWidget's window Methods init (self) createFrame (self, string, x, y) getActiveGlyph (self, tbi =0 ) getActiveGlyphInfo (self, tbi =0 ) getActiveIndex (self, tbi =0 ) getActiveKernPair (self, tbi =0 ) getActiveLine (self, tbi =0 ) getCanvas (self, atCursor =False ) getCanvasList (self) getNextGlyphInfo (self, tbi =0 ) getPrevGlyphInfo (self, tbi =0 ) getSelectedNodes (self) getTextBlockGlyphs (self, tbi =0 ) getTextBlockList (self, atCursor =False ) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Functions openFont (file_path) Loads Font file from path (str) and returns opened fgFont object openFont typerig.proxy.application.app.openFont = openFont (file_path) Loads Font file from path (str) and returns opened fgFont object pItems typerig.proxy.application.app.pItems = class pItems ( __builtin__.object ) Proxy to flItems object Constructor: pItems() Attributes: .fl (flItems): Current workspace Methods __init__ (self) outputGlyphNames (self, glyphNamesList, layerList =[] , cursor_location =0 ) Output text string using glyph names and layers specified outputString (self, string, cursor_location =0 ) Output text to the application Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) outputString typerig.proxy.application.app.pItems.outputString = outputString (self, string, cursor_location =0 ) unbound typerig.proxy.application.app.pItems method Output text to the application outputGlyphNames typerig.proxy.application.app.pItems.outputGlyphNames = outputGlyphNames (self, glyphNamesList, layerList =[] , cursor_location =0 ) unbound typerig.proxy.application.app.pItems method Output text string using glyph names and layers specified pWorkspace typerig.proxy.application.app.pWorkspace = class pWorkspace ( __builtin__.object ) Proxy to flWorkspace object Constructor: pWorkspace() Attributes: .fl (flWorkspace): Current workspace .main (QWidget): Main QWidget's window Methods __init__ (self) createFrame (self, string, x, y) getActiveGlyph (self, tbi =0 ) getActiveGlyphInfo (self, tbi =0 ) getActiveIndex (self, tbi =0 ) getActiveKernPair (self, tbi =0 ) getActiveLine (self, tbi =0 ) getCanvas (self, atCursor =False ) getCanvasList (self) getNextGlyphInfo (self, tbi =0 ) getPrevGlyphInfo (self, tbi =0 ) getSelectedNodes (self) getTextBlockGlyphs (self, tbi =0 ) getTextBlockList (self, atCursor =False ) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) pTextBlock typerig.proxy.application.app.pTextBlock = class pTextBlock ( __builtin__.object ) Proxy to flTextBlock object Constructor: pTextBlock(flTextBlock) Attributes: .fl (flTextBlock): flTextBlock Parent Methods __init__ (self, textBlock) __repr__ (self) clone (self) getFontSize (self) getFrameSize (self) getGlyphBounds (self) getString (self) getTransform (self) getWrapState (self) height (self) reloc (self, x, y) resetTransform (self) setFontSize (self, fontSize) setFrameSize (self, width, height) setFrameWidth (self, width) setPageSize (self, sizeName, fixedHeight =(True, True) ) setTextWrap (self, width) setTransform (self, newTransform) setWrapState (self, wrapText =True ) update (self) width (self) x (self) y (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"proxy.application.app"},{"location":"typerig.proxy.application.app.html#typerigproxyapplicationapp","text":"","title":"typerig.proxy.application.app"},{"location":"typerig.proxy.application.app.html#openfont","text":"typerig.proxy.application.app.openFont = openFont (file_path) Loads Font file from path (str) and returns opened fgFont object","title":"openFont"},{"location":"typerig.proxy.application.app.html#pitems","text":"","title":"pItems"},{"location":"typerig.proxy.application.app.html#outputstring","text":"typerig.proxy.application.app.pItems.outputString = outputString (self, string, cursor_location =0 ) unbound typerig.proxy.application.app.pItems method Output text to the application","title":"outputString"},{"location":"typerig.proxy.application.app.html#outputglyphnames","text":"typerig.proxy.application.app.pItems.outputGlyphNames = outputGlyphNames (self, glyphNamesList, layerList =[] , cursor_location =0 ) unbound typerig.proxy.application.app.pItems method Output text string using glyph names and layers specified","title":"outputGlyphNames"},{"location":"typerig.proxy.application.app.html#pworkspace","text":"","title":"pWorkspace"},{"location":"typerig.proxy.application.app.html#ptextblock","text":"","title":"pTextBlock"},{"location":"typerig.proxy.application.automat.html","text":"typerig.proxy.application.automat typerig . proxy . application .automat # MODULE: Typerig / Proxy / Automat (FL App Actions) # -------------------------------------------------- # (C) Adam Twardoch, 2019 # -------------------------------------------------- # www.typerig.com Classes builtin .object Automat class Automat ( builtin .object ) Methods init (self) getQAction (self, code) help (self, code) helpAll (self) run (self, code) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined)","title":"proxy.application.automat"},{"location":"typerig.proxy.application.automat.html#typerigproxyapplicationautomat","text":"","title":"typerig.proxy.application.automat"},{"location":"typerig.proxy.application.html","text":"typerig.proxy.application typerig . proxy .application from proxy import __version__ as current_ver __version__ = current_ver Package Contents app automat","title":"proxy.application"},{"location":"typerig.proxy.application.html#typerigproxyapplication","text":"","title":"typerig.proxy.application"},{"location":"typerig.proxy.html","text":"typerig.proxy typerig .proxy from proxy import __version__ as current_ver __version__ = current_ver Package Contents application (package) objects (package) pens (package)","title":"proxy"},{"location":"typerig.proxy.html#typerigproxy","text":"","title":"typerig.proxy"},{"location":"typerig.proxy.objects.base.html","text":"typerig.proxy.objects.base typerig . proxy . objects .base ( version 0.26.0) # MODULE: Typerig / Proxy / Base (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab math PythonQt random typerig.core.objects Classes typerig.core.objects.cubicbezier.CubicBezier ( builtin .object ) Curve typerig.core.objects.line.Line ( builtin .object ) Line typerig.core.objects.line.Vector ( typerig.core.objects.line.Line ) Vector typerig.core.objects.point.Point ( builtin .object ) Coord class Coord ( typerig.core.objects.point.Point ) # - FL Proxy model ------------------------------------------- Method resolution order: Coord typerig.core.objects.point.Point builtin .object Methods init (self, *argv) repr (self) asQPoint (self) asQPointF (self) Methods from typerig.core.objects.point.Point abs (self) add (self, other) # -- Operators and (self, other) self & other: Used as for Scalar product div (self, other) mul (self, other) neg (self) or (self, other) self | other: Used as for Cross product rdiv = div (self, other) rmul = mul (self, other) sub (self, other) truediv = div (self, other) angle_to (self, other, add =90 ) Angle to another point in radians diff_to (self, other) doFlip (self, sign =(True, True) ) doSwap (self) # -- Modifiers doTransform (self, transform =None ) solve_width (self, y =0 ) Get width - find adjacent X by opposite Y solve_x (self, y) solve_y (self, x) Descriptors from typerig.core.objects.point.Point dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) angle magnitude slope swap tuple unit y_intercept class Curve ( typerig.core.objects.cubicbezier.CubicBezier ) Method resolution order: Curve typerig.core.objects.cubicbezier.CubicBezier builtin .object Methods init (self, *argv) Methods from typerig.core.objects.cubicbezier.CubicBezier repr (self) asList (self) # -- Modifiers doSwap (self) doTransform (self, transform =None ) get_handle_length (self) Returns handle length and radii from base points. lerp_first (self, shift) lerp_last (self, shift) solve_curvature (self, time) Find Curvature of on-curve point at given time solve_derivative (self, time) Returns point of on-curve point at given time and vector of 1st and 2nd derivative. solve_distance_end (self, distance, timeStep =0.01 ) Returns time at which the given distance to end of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_distance_start (self, distance, timeStep =0.01 ) Returns time at which the given distance to beginning of bezier is met. Probing is executed withing timeStep in range from 0 to 1. The finer the step the preciser the results. solve_extremes (self) Finds curve extremes and returns [(extreme_01_x, extreme_01_y, extreme_01_t)...(extreme_n_x, extreme_n_y, extreme_n_t)] solve_handle_distance_from_base (self, ratio =(0.5, 0.5) ) Finds new handle positions for given ratio from base points. solve_hobby (self, curvature =(0.9, 0.9) ) Calculates and applies John Hobby's mock-curvature-smoothness by given curvature - tuple (float,float) or (float) Based on Metapolator's Hobby Spline by Juraj Sukop, Lasse Fister, Simon Egli solve_hobby_curvature (self) Returns current curvature coefficients (complex(alpha), complex(beta)) for both handles according to John Hobby's mock-curvature calculation solve_parallel (self, vector, fullOutput =False ) Finds the t value along a cubic Bezier where a tangent (1st derivative) is parallel with the direction vector. vector: a pair of values representing the direction of interest (magnitude is ignored). returns 0.0 < = t < = 1.0 or None # Solving the dot product of cubic beziers first derivate to the vector given B'(t) x V. Two vectors are perpendicular if their dot product is zero. # So if you could find the (1) perpendicular of V it will be collinear == tangent of the curve so the equation to be solved is: # B'(t) x V(x,y) = 0; -(a*t^2 + b*t + c)*x + (g*t^2 + h*t + i)*y = 0 solved for t, where a,b,c are coefs for X and g,h,i for Y B'(t) derivate of curve # # Inspired by answer given by 'unutbu' on the stackoverflow question: http://stackoverflow.com/questions/20825173/how-to-find-a-point-if-any-on-quadratic-bezier-with-a-given-tangent-direction # Recoded and recalculated for qubic beziers. Used 'Rearrange It' app at http://www.wolframalpha.com/widgets/view.jsp?id=4be4308d0f9d17d1da68eea39de9b2ce was invaluable. # # DOTO: Fix calculation optimization error - will yield false positive result in cases #1 and #2 if vector is 45 degrees solve_point (self, time) Find point on cubic bezier at given time solve_proportional_handles (self, proportion =0.3 ) Equalizes handle length to given float(proportion) solve_slice (self, time) Returns two segments representing cubic bezier sliced at given time. Output: list [(Start), (Start_BCP_out), (Slice_BCP_in), (Slice), (Slice_BCP_out), (End_BCP_in), (End)] of tuples (x,y) solve_tunni (self) Make proportional handles keeping curvature and on-curve point positions Based on modified Andres Torresi implementation of Eduardo Tunni's method for control points Descriptors from typerig.core.objects.cubicbezier.CubicBezier dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) height line points tuple width x x_max y y_max class Line ( typerig.core.objects.line.Line ) Method resolution order: Line typerig.core.objects.line.Line builtin .object Methods init (self, *argv) asQLineF (self) asQPoint (self) Methods from typerig.core.objects.line.Line add (self, other) and (self, other) div (self, other) mul (self, other) repr (self) rmul = mul (self, other) sub (self, other) doSwap (self) # -- Modifiers doTransform (self, transform =None ) intersect_line (self, other_line) Find intersection point (X, Y) for two lines. Returns (None, None) if lines do not intersect. lerp (self, time) lerp_xy (self, time_x, time_y) shift (self, dx, dy) Shift coordinates by dx, dy solve_point (self, time) Find point on the line at given time solve_slice (self, time) Slice line at given time solve_x (self, y) Solve line equation for X coordinate. solve_y (self, x) Solve line equation for Y coordinate. Descriptors from typerig.core.objects.line.Line dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) angle diff_x diff_y height length points slope tuple width x x_max y y_intercept Get the Y intercept of a line segment y_max class Vector ( typerig.core.objects.line.Vector ) Method resolution order: Vector typerig.core.objects.line.Vector typerig.core.objects.line.Line builtin .object Methods init (self, *argv) asQLineF (self) asQPoint (self) Methods from typerig.core.objects.line.Vector repr (self) getAngle (self) getSlope (self) # - Getters Descriptors from typerig.core.objects.line.Vector angle slope x y Methods from typerig.core.objects.line.Line add (self, other) and (self, other) div (self, other) mul (self, other) rmul = mul (self, other) sub (self, other) doSwap (self) # -- Modifiers doTransform (self, transform =None ) intersect_line (self, other_line) Find intersection point (X, Y) for two lines. Returns (None, None) if lines do not intersect. lerp (self, time) lerp_xy (self, time_x, time_y) shift (self, dx, dy) Shift coordinates by dx, dy solve_point (self, time) Find point on the line at given time solve_slice (self, time) Slice line at given time solve_x (self, y) Solve line equation for X coordinate. solve_y (self, x) Solve line equation for Y coordinate. Descriptors from typerig.core.objects.line.Line dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) diff_x diff_y height length points tuple width x_max y_intercept Get the Y intercept of a line segment y_max","title":"proxy.objects.base"},{"location":"typerig.proxy.objects.base.html#typerigproxyobjectsbase","text":"","title":"typerig.proxy.objects.base"},{"location":"typerig.proxy.objects.composer.html","text":"typerig.proxy.objects.composer typerig . proxy . objects .composer ( version 0.0.1) # MODULE: Typerig / Proxy / Composer (Objects) # ------------------------------------------------------ # (C) Vassil Kateliev, 2017 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #-------------------------------------------------------- # www.typerig.com Classes builtin .object dictComposer class dictComposer ( builtin .object ) For CSV I/O Methods getitem (self, comp_name) init (self, glyph) repr (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) components Attributes componentTransform = class 'typerig.proxy.objects.composer.componentTransform' dictComposer typerig.proxy.objects.composer.dictComposer = class dictComposer ( __builtin__.object ) For CSV I/O Methods __getitem__ (self, comp_name) __init__ (self, glyph) __repr__ (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) components Attributes componentTransform = class 'typerig.proxy.objects.composer.componentTransform'","title":"proxy.objects.composer"},{"location":"typerig.proxy.objects.composer.html#typerigproxyobjectscomposer","text":"","title":"typerig.proxy.objects.composer"},{"location":"typerig.proxy.objects.composer.html#dictcomposer","text":"","title":"dictComposer"},{"location":"typerig.proxy.objects.contour.html","text":"typerig.proxy.objects.contour typerig . proxy . objects .contour ( version 0.26.1) # MODULE: Typerig / Proxy / Contour (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2019-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontlab math PythonQt Classes builtin .object pContour eContour class eContour ( pContour ) Extended representation of the Proxy Contour, adding some advanced functionality. Constructor: eContour(flContour) Method resolution order: eContour pContour builtin .object Methods alignTo (self, entity, alignMode ='' , align =(True, True) ) Align current contour. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS asCoord (self) Returns Coord object of the Bottom lest corner. getNext (self) getPrev (self) Methods from pContour init (self, contour) repr (self) draw (self, pen, transform =None ) Utilizes the Pen protocol isAllSelected (self) Is the whole contour selected isCCW (self) isCW (self) reverse (self) rotate (self, deg) scale (self, sx, sy) setCCW (self) setCW (self) slant (self, deg) translate (self, dx, dy) Descriptors from pContour dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pContour ( builtin .object ) Proxy to flContour object Constructor: pContour(flContour) Attributes: .fl (flContour): Original flContour Methods init (self, contour) repr (self) draw (self, pen, transform =None ) Utilizes the Pen protocol isAllSelected (self) Is the whole contour selected isCCW (self) isCW (self) reverse (self) rotate (self, deg) scale (self, sx, sy) setCCW (self) setCW (self) slant (self, deg) translate (self, dx, dy) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) pContour typerig.proxy.objects.contour.pContour = class pContour ( __builtin__.object ) Proxy to flContour object Constructor: pContour(flContour) Attributes: .fl (flContour): Original flContour Methods __init__ (self, contour) __repr__ (self) draw (self, pen, transform =None ) Utilizes the Pen protocol isAllSelected (self) Is the whole contour selected isCCW (self) isCW (self) reverse (self) rotate (self, deg) scale (self, sx, sy) setCCW (self) setCW (self) slant (self, deg) translate (self, dx, dy) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) isAllSelected typerig.proxy.objects.contour.pContour.isAllSelected = isAllSelected (self) unbound typerig.proxy.objects.contour.pContour method Is the whole contour selected draw typerig.proxy.objects.contour.pContour.draw = draw (self, pen, transform =None ) unbound typerig.proxy.objects.contour.pContour method Utilizes the Pen protocol eContour typerig.proxy.objects.contour.eContour = class eContour ( pContour ) Extended representation of the Proxy Contour, adding some advanced functionality. Constructor: eContour(flContour) Method resolution order: eContour pContour __builtin__.object Methods alignTo (self, entity, alignMode ='' , align =(True, True) ) Align current contour. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS asCoord (self) Returns Coord object of the Bottom lest corner. getNext (self) getPrev (self) Methods from pContour __init__ (self, contour) __repr__ (self) draw (self, pen, transform =None ) Utilizes the Pen protocol isAllSelected (self) Is the whole contour selected isCCW (self) isCW (self) reverse (self) rotate (self, deg) scale (self, sx, sy) setCCW (self) setCW (self) slant (self, deg) translate (self, dx, dy) Descriptors from pContour __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) asCoord typerig.proxy.objects.contour.eContour.asCoord = asCoord (self) unbound typerig.proxy.objects.contour.eContour method Returns Coord object of the Bottom lest corner. alignTo typerig.proxy.objects.contour.eContour.alignTo = alignTo (self, entity, alignMode ='' , align =(True, True) ) unbound typerig.proxy.objects.contour.eContour method Align current contour. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS","title":"proxy.objects.contour"},{"location":"typerig.proxy.objects.contour.html#typerigproxyobjectscontour","text":"","title":"typerig.proxy.objects.contour"},{"location":"typerig.proxy.objects.contour.html#pcontour","text":"","title":"pContour"},{"location":"typerig.proxy.objects.contour.html#isallselected","text":"typerig.proxy.objects.contour.pContour.isAllSelected = isAllSelected (self) unbound typerig.proxy.objects.contour.pContour method Is the whole contour selected","title":"isAllSelected"},{"location":"typerig.proxy.objects.contour.html#draw","text":"typerig.proxy.objects.contour.pContour.draw = draw (self, pen, transform =None ) unbound typerig.proxy.objects.contour.pContour method Utilizes the Pen protocol","title":"draw"},{"location":"typerig.proxy.objects.contour.html#econtour","text":"","title":"eContour"},{"location":"typerig.proxy.objects.contour.html#ascoord","text":"typerig.proxy.objects.contour.eContour.asCoord = asCoord (self) unbound typerig.proxy.objects.contour.eContour method Returns Coord object of the Bottom lest corner.","title":"asCoord"},{"location":"typerig.proxy.objects.contour.html#alignto","text":"typerig.proxy.objects.contour.eContour.alignTo = alignTo (self, entity, alignMode ='' , align =(True, True) ) unbound typerig.proxy.objects.contour.eContour method Align current contour. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS","title":"alignTo"},{"location":"typerig.proxy.objects.curve.html","text":"typerig.proxy.objects.curve typerig . proxy . objects .curve ( version 0.3.7) # MODULE: Typerig / Proxy / Curve (Objects) # ---------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab math PythonQt random typerig.core.objects warnings Classes builtin .object eCurveEx class eCurveEx ( builtin .object ) Extended representation of flCurveEx, adding some advanced functionality Constructor: eCurveEx(flCurveEx, list[flNode]) eCurveEx(list[flNode]) eCurveEx(flContour, time (int)) ... Methods init (self, *argv) repr (self) # - Basic functionality ---------------------------- eqHobbySpline (self, curvature =(0.9, 0.9) , apply =True ) eqProportionalHandles (self, proportion =0.3 , apply =True ) eqRatioHandles (self, ratio =0.3 , apply =True ) eqTunni (self, apply =True ) # - Curve optimization ---------------------------- updateCurve (self) updateNodes (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) eCurveEx typerig.proxy.objects.curve.eCurveEx = class eCurveEx ( __builtin__.object ) Extended representation of flCurveEx, adding some advanced functionality Constructor: eCurveEx(flCurveEx, list[flNode]) eCurveEx(list[flNode]) eCurveEx(flContour, time (int)) ... Methods __init__ (self, *argv) __repr__ (self) # - Basic functionality ---------------------------- eqHobbySpline (self, curvature =(0.9, 0.9) , apply =True ) eqProportionalHandles (self, proportion =0.3 , apply =True ) eqRatioHandles (self, ratio =0.3 , apply =True ) eqTunni (self, apply =True ) # - Curve optimization ---------------------------- updateCurve (self) updateNodes (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"proxy.objects.curve"},{"location":"typerig.proxy.objects.curve.html#typerigproxyobjectscurve","text":"","title":"typerig.proxy.objects.curve"},{"location":"typerig.proxy.objects.curve.html#ecurveex","text":"","title":"eCurveEx"},{"location":"typerig.proxy.objects.font.html","text":"typerig.proxy.objects.font typerig . proxy . objects .font ( version 0.27.4) # MODULE: Typerig / Proxy / Font (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab json FL math PythonQt fontTools.pens.statisticsPen Classes builtin .object jFont pDesignSpace pFont eFont pFontMetrics pMasters typerig.core.objects.collection.treeDict ( collections.defaultdict ) pMaster class eFont ( pFont ) Proxy Font extension, packing some useful tools. Constructor: eFont() - default represents the current glyph and current font eFont(fgFont) Method resolution order: eFont pFont builtin .object Methods copyZones (self, font) Methods from pFont init (self, font =None ) repr (self) addGlyph (self, glyph) Adds a Glyph (fgGlyph or flGlyph) to font addGlyphList (self, glyphList) Adds a List of Glyphs [fgGlyph or flGlyph] to font addGuideline (self, flGuide) Adds a guideline (flGuide) to font guidelines addOTgroup (self, groupName, glyphList) addZone (self, position, width, layer =None ) A very dirty way to add a new Zone to Font add_kerning_group (self, key, glyphNameList, type, layer =None ) Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None alternates (self, namesOnly =False ) Returns all alternate characters (list[fgGlyph]) axes (self) # - Axes and MM ---------------------------------------------------- clearFeatures (self) clearGuidelines (self) Removes all font guidelines delFeature (self, tag) delGuideline (self, flGuide) Removes a guideline (flGuide) from font guidelines dict_to_kerning_groups (self, groupDict, layer =None ) duplicateGlyph (self, src_name, dst_name, dst_unicode =None , options ={'adv': True, 'anc': True, 'flg': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True, 'tag': True} ) Duplicates a glyph and adds it to the font Args: src_name, dst_name (str): Source and destination names dst_unicode (int): Unicode int of the new glyph references (bool): Keep existing element references (True) or decompose (False) Returns: pGlyph figures (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) findShape (self, shapeName, master =None ) Search for element (flShape) in font and return it fl_kerning_groups (self, layer =None ) fl_kerning_groups_to_dict (self, layer =None ) fontMetrics (self) Returns pFontMetrics Object with getter/setter functionality fontMetricsInfo (self, layer) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics ( object ) getFeaPrefix (self) getFeature (self, tag) getFeatureTags (self) getFeatures (self) # - OpenType and features ------------------------------------- getGlyphNameDict (self) getGlyphNames (self) # - Charset ----------------------------------------------- # -- Return Names getGlyphUnicodeDict (self, encoding ='utf-8' ) getItalicAngle (self) # - Font metrics ----------------------------------------------- getOTgroups (self) getSelectedIndices (self) # Functions --------------------------------------------------- # - Font Basics ----------------------------------------------- getZones (self, layer =None , HintingDataType =0 ) Returns font alignment (blue) zones (list[flGuideline]). Note: HintingDataType = {'HintingPS': 0, 'HintingTT': 1} glyph (self, glyph, extend =None ) Return TypeRig proxy glyph object (pGlyph) by index (int) or name (str). glyphs (self, indexList =[] , extend =None ) Return list of FontGate glyph objects (list[fgGlyph]). guidelines (self, hostInf =False , fontgate =False ) Return font guidelines Args: hostInf (bool): If True Return flHostInfo guidelines host objects fontgate (bool): If True return FontGate font guideline objects Returns list[flGuideline] or list[fgGuideline] hasFeature (self, tag) hasGlyph (self, glyphName) hasMaster (self, layerName) hinting (self) Returns fonts hinting instances (self) kerning (self, layer =None ) Return the fonts kerning object (fgKerning) no matter the reference. kerning_dump (self, layer =None , mark_groups ='@' , pairs_only =False ) Dump layer kerning to simple tuples. Args: layer (None, Int, String): Extract kerning data for layer specified; mark_groups (String): Mark group kerning with special symbol pairs_only (Bool): Export pairs without value Returns: pairs_only is False: list(tuple(tuple(str(First), str(Second))), Int(Value))) pairs_only is True: list(tuple(str(First), str(Second))) kerning_groups (self, layer =None ) Return the fonts kerning groups object (fgKerningGroups) no matter the reference. kerning_groups_to_dict (self, layer =None , byPosition =False , sortUnicode =False ) Return dictionary containing kerning groups Args: layer (None, Int, String): Extract kerning data for layer specified; byPosition (bool): Dictionary by class kerning positions - KernLeft(1st), KernRight(2nd) or KernBothSide(Both); sortUnicode (bool): Sort members of kern group according to their Unicode value. Returns: dict kerning_to_list (self, layer =None ) ligatures (self, namesOnly =False ) Returns all ligature characters (list[fgGlyph]) lowercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) masters (self) newGlyph (self, glyph_name, layers =[] , unicode_int =None ) Creates new glyph and adds it to the font Args: glyph_name (str): New glyph name layers (list(str) or list(flLayer)): List of layers to be added to the new glyph unicode_int (int): Unicode int of the new glyph Returns: pGlyph newGlyphFromRecipe (self, glyph_name, recipe, layers =[] , unicode_int =None , rtl =False ) Generate new glyph (glyph_name) using String Recipe (recipe) Args: glyph_name (str): New glyph name recipe (str): Glyph composition recipe using OLD Fontlab syntax (ex. A+acute=Aacute) layers (list(str)): List of layer names to be added unicode_int (int): Unicode int of the new glyph rtl (bool): Right to left Returns: pGlyph newKernPair (self, glyphLeft, glyphRight, modeLeft, modeRight) newOTgroup (self, groupName, glyphList) pGlyphs (self, fgGlyphList =[] ) Return list of TypeRig proxy Glyph objects glyph objects (list[pGlyph]). remove_kerning_group (self, key, layer =None ) Remove a group from fonts kerning groups at given layer. rename_kerning_group (self, oldkey, newkey, layer =None ) Rename a group in fonts kerning groups at given layer. reset_kerning_groups (self, layer =None ) selectGlyphs (self, glyphNameList) selectedGlyphs (self, extend =None ) Return TypeRig proxy glyph object for each selected glyph selected_pGlyphs (self) Return TypeRig proxy glyph object for each selected glyph setFeaPrefix (self, feaString) setFeature (self, tag, feaString) setSelectedIndices (self, indList) setZones (self, fontZones, layer =None ) symbol (self, gID) Return fgSymbol by glyph index (int) symbols (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) unselectAll (self) update (self) updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. uppercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) zonesFromTuples (self, zoneTupleList, layer =None , forceNames =False ) zonesToTuples (self, layer =None , HintingDataType =0 ) Descriptors from pFont OTfullName PSfullName dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) familyName info italic_angle name path class jFont ( builtin .object ) Proxy VFJ Font (Fontlab JSON Font format) Constructor: jFont(): Construct an empty jFont jFont(vfj_file_path): Load VFJ form vfj_file_path (STR) jFont(pFont): Load VFJ from pFont.path. VFJ Font has to be in the same path as the VFC Methods: .data(): Access to VFJ font .load(file_path): Load VFJ font from path .save_as(file_path): Save VFJ font to path .save(): Save VFJ (overwrite) Methods init (self, source =None ) load (self, file_path) save (self) save_as (self, file_path) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pDesignSpace ( builtin .object ) Methods init (self, parent) repr (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) axes axes_dict axes_list class pFont ( builtin .object ) A Proxy Font representation of Fonlab fgFont and flPackage. Constructor: pFont(None) : Default represents the current glyph and current font pFont(fgFont) : Creates a pFont object from FontGate fgFont object pFont(file_path) : Loats a existing font form file_path (str) and creates a pFont object Methods init (self, font =None ) repr (self) addGlyph (self, glyph) Adds a Glyph (fgGlyph or flGlyph) to font addGlyphList (self, glyphList) Adds a List of Glyphs [fgGlyph or flGlyph] to font addGuideline (self, flGuide) Adds a guideline (flGuide) to font guidelines addOTgroup (self, groupName, glyphList) addZone (self, position, width, layer =None ) A very dirty way to add a new Zone to Font add_kerning_group (self, key, glyphNameList, type, layer =None ) Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None alternates (self, namesOnly =False ) Returns all alternate characters (list[fgGlyph]) axes (self) # - Axes and MM ---------------------------------------------------- clearFeatures (self) clearGuidelines (self) Removes all font guidelines delFeature (self, tag) delGuideline (self, flGuide) Removes a guideline (flGuide) from font guidelines dict_to_kerning_groups (self, groupDict, layer =None ) duplicateGlyph (self, src_name, dst_name, dst_unicode =None , options ={'adv': True, 'anc': True, 'flg': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True, 'tag': True} ) Duplicates a glyph and adds it to the font Args: src_name, dst_name (str): Source and destination names dst_unicode (int): Unicode int of the new glyph references (bool): Keep existing element references (True) or decompose (False) Returns: pGlyph figures (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) findShape (self, shapeName, master =None ) Search for element (flShape) in font and return it fl_kerning_groups (self, layer =None ) fl_kerning_groups_to_dict (self, layer =None ) fontMetrics (self) Returns pFontMetrics Object with getter/setter functionality fontMetricsInfo (self, layer) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics ( object ) getFeaPrefix (self) getFeature (self, tag) getFeatureTags (self) getFeatures (self) # - OpenType and features ------------------------------------- getGlyphNameDict (self) getGlyphNames (self) # - Charset ----------------------------------------------- # -- Return Names getGlyphUnicodeDict (self, encoding ='utf-8' ) getItalicAngle (self) # - Font metrics ----------------------------------------------- getOTgroups (self) getSelectedIndices (self) # Functions --------------------------------------------------- # - Font Basics ----------------------------------------------- getZones (self, layer =None , HintingDataType =0 ) Returns font alignment (blue) zones (list[flGuideline]). Note: HintingDataType = {'HintingPS': 0, 'HintingTT': 1} glyph (self, glyph, extend =None ) Return TypeRig proxy glyph object (pGlyph) by index (int) or name (str). glyphs (self, indexList =[] , extend =None ) Return list of FontGate glyph objects (list[fgGlyph]). guidelines (self, hostInf =False , fontgate =False ) Return font guidelines Args: hostInf (bool): If True Return flHostInfo guidelines host objects fontgate (bool): If True return FontGate font guideline objects Returns list[flGuideline] or list[fgGuideline] hasFeature (self, tag) hasGlyph (self, glyphName) hasMaster (self, layerName) hinting (self) Returns fonts hinting instances (self) kerning (self, layer =None ) Return the fonts kerning object (fgKerning) no matter the reference. kerning_dump (self, layer =None , mark_groups ='@' , pairs_only =False ) Dump layer kerning to simple tuples. Args: layer (None, Int, String): Extract kerning data for layer specified; mark_groups (String): Mark group kerning with special symbol pairs_only (Bool): Export pairs without value Returns: pairs_only is False: list(tuple(tuple(str(First), str(Second))), Int(Value))) pairs_only is True: list(tuple(str(First), str(Second))) kerning_groups (self, layer =None ) Return the fonts kerning groups object (fgKerningGroups) no matter the reference. kerning_groups_to_dict (self, layer =None , byPosition =False , sortUnicode =False ) Return dictionary containing kerning groups Args: layer (None, Int, String): Extract kerning data for layer specified; byPosition (bool): Dictionary by class kerning positions - KernLeft(1st), KernRight(2nd) or KernBothSide(Both); sortUnicode (bool): Sort members of kern group according to their Unicode value. Returns: dict kerning_to_list (self, layer =None ) ligatures (self, namesOnly =False ) Returns all ligature characters (list[fgGlyph]) lowercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) masters (self) newGlyph (self, glyph_name, layers =[] , unicode_int =None ) Creates new glyph and adds it to the font Args: glyph_name (str): New glyph name layers (list(str) or list(flLayer)): List of layers to be added to the new glyph unicode_int (int): Unicode int of the new glyph Returns: pGlyph newGlyphFromRecipe (self, glyph_name, recipe, layers =[] , unicode_int =None , rtl =False ) Generate new glyph (glyph_name) using String Recipe (recipe) Args: glyph_name (str): New glyph name recipe (str): Glyph composition recipe using OLD Fontlab syntax (ex. A+acute=Aacute) layers (list(str)): List of layer names to be added unicode_int (int): Unicode int of the new glyph rtl (bool): Right to left Returns: pGlyph newKernPair (self, glyphLeft, glyphRight, modeLeft, modeRight) newOTgroup (self, groupName, glyphList) pGlyphs (self, fgGlyphList =[] ) Return list of TypeRig proxy Glyph objects glyph objects (list[pGlyph]). remove_kerning_group (self, key, layer =None ) Remove a group from fonts kerning groups at given layer. rename_kerning_group (self, oldkey, newkey, layer =None ) Rename a group in fonts kerning groups at given layer. reset_kerning_groups (self, layer =None ) selectGlyphs (self, glyphNameList) selectedGlyphs (self, extend =None ) Return TypeRig proxy glyph object for each selected glyph selected_pGlyphs (self) Return TypeRig proxy glyph object for each selected glyph setFeaPrefix (self, feaString) setFeature (self, tag, feaString) setSelectedIndices (self, indList) setZones (self, fontZones, layer =None ) symbol (self, gID) Return fgSymbol by glyph index (int) symbols (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) unselectAll (self) update (self) updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. uppercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) zonesFromTuples (self, zoneTupleList, layer =None , forceNames =False ) zonesToTuples (self, layer =None , HintingDataType =0 ) Descriptors OTfullName PSfullName dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) familyName info italic_angle name path class pFontMetrics ( builtin .object ) An Abstract Font Metrics getter/setter of a flPackage. Constructor: pFontMetrics() - default represents the current glyph and current font pFontMetrics(flPackage) Methods init (self, font) asDict (self, layer =None ) # - Export & Import fromDict (self, metricDict, layer =None ) getAscender (self, layer =None ) # - Getters getCapsHeight (self, layer =None ) getCaretOffset (self, layer =None ) getDescender (self, layer =None ) getItalicAngle (self, layer =None ) getLineGap (self, layer =None ) getXHeight (self, layer =None ) setAscender (self, value, layer =None ) # - Setters setCapsHeight (self, value, layer =None ) setCaretOffset (self, value, layer =None ) setDescender (self, value, layer =None ) setItalicAngle (self, value, layer =None ) setLineGap (self, value, layer =None ) setXHeight (self, value, layer =None ) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pMaster ( typerig.core.objects.collection.treeDict ) Method resolution order: pMaster typerig.core.objects.collection.treeDict collections.defaultdict builtin .dict builtin .object Methods init (self, *args, **kwargs) repr (self) Methods from typerig.core.objects.collection.treeDict getattribute (self, name) setattr (self, name, value) Descriptors from typerig.core.objects.collection.treeDict dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) Methods from collections.defaultdict copy (...) D. copy () -> a shallow copy of D. missing (...) __missing__ (key) # Called by __getitem__ for missing key; pseudo-code: if self. default_factory is None: raise KeyError((key,)) self[key] = value = self. default_factory () return value reduce (...) Return state information for pickling. copy (...) D. copy () -> a shallow copy of D. Descriptors from collections.defaultdict default_factory Factory for default value called by __missing__(). Methods from builtin .dict cmp (...) x. __cmp__ (y) < ==> cmp(x,y) contains (...) D. __contains__ (k) -> True if D has a key k, else False delitem (...) x. __delitem__ (y) < ==> del x[y] eq (...) x. __eq__ (y) < ==> x==y ge (...) x. __ge__ (y) < ==> x>=y getitem (...) x. __getitem__ (y) < ==> x[y] gt (...) x. __gt__ (y) < ==> x>y iter (...) x. __iter__ () < ==> iter(x) le (...) x. __le__ (y) < ==> x < =y len (...) x. __len__ () < ==> len(x) lt (...) x. __lt__ (y) < ==> x ne (...) x. __ne__ (y) < ==> x!=y setitem (...) x. __setitem__ (i, y) < ==> x[i]=y sizeof (...) D. __sizeof__ () -> size of D in memory, in bytes clear (...) D. clear () -> None. Remove all items from D. fromkeys (...) dict. fromkeys (S[,v]) -> New dict with keys from S and values equal to v. v defaults to None. get (...) D. get (k[,d]) -> D[k] if k in D, else d. d defaults to None. has_key (...) D. has_key (k) -> True if D has a key k, else False items (...) D. items () -> list of D's (key, value) pairs, as 2-tuples iteritems (...) D. iteritems () -> an iterator over the (key, value) items of D iterkeys (...) D. iterkeys () -> an iterator over the keys of D itervalues (...) D. itervalues () -> an iterator over the values of D keys (...) D. keys () -> list of D's keys pop (...) D. pop (k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem (...) D. popitem () -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault (...) D. setdefault (k[,d]) -> D. get (k,d), also set D[k]=d if k not in D update (...) D. update ([E, ]**F) -> None. Update D from dict/iterable E and F. If E present and has a . keys () method, does: for k in E: D[k] = E[k] If E present and lacks . keys () method, does: for (k, v) in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values (...) D. values () -> list of D's values viewitems (...) D. viewitems () -> a set-like object providing a view on D's items viewkeys (...) D. viewkeys () -> a set-like object providing a view on D's keys viewvalues (...) D. viewvalues () -> an object providing a view on D's values Attributes from builtin .dict hash = None new = built-in method new of type object T. __new__ (S, ...) -> a new object with type S, a subtype of T class pMasters ( builtin .object ) Methods init (self, parent) repr (self) groupByWidth (self, double =0.0 ) locate (self, master_name, axes_list =None ) locateAxis (self, master_name, axis_tag, width =False ) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) masters pFontMetrics typerig.proxy.objects.font.pFontMetrics = class pFontMetrics ( __builtin__.object ) An Abstract Font Metrics getter/setter of a flPackage. Constructor: pFontMetrics() - default represents the current glyph and current font pFontMetrics(flPackage) Methods __init__ (self, font) asDict (self, layer =None ) # - Export & Import fromDict (self, metricDict, layer =None ) getAscender (self, layer =None ) # - Getters getCapsHeight (self, layer =None ) getCaretOffset (self, layer =None ) getDescender (self, layer =None ) getItalicAngle (self, layer =None ) getLineGap (self, layer =None ) getXHeight (self, layer =None ) setAscender (self, value, layer =None ) # - Setters setCapsHeight (self, value, layer =None ) setCaretOffset (self, value, layer =None ) setDescender (self, value, layer =None ) setItalicAngle (self, value, layer =None ) setLineGap (self, value, layer =None ) setXHeight (self, value, layer =None ) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) pFont typerig.proxy.objects.font.pFont = class pFont ( __builtin__.object ) A Proxy Font representation of Fonlab fgFont and flPackage. Constructor: pFont(None) : Default represents the current glyph and current font pFont(fgFont) : Creates a pFont object from FontGate fgFont object pFont(file_path) : Loats a existing font form file_path (str) and creates a pFont object Methods __init__ (self, font =None ) __repr__ (self) addGlyph (self, glyph) Adds a Glyph (fgGlyph or flGlyph) to font addGlyphList (self, glyphList) Adds a List of Glyphs [fgGlyph or flGlyph] to font addGuideline (self, flGuide) Adds a guideline (flGuide) to font guidelines addOTgroup (self, groupName, glyphList) addZone (self, position, width, layer =None ) A very dirty way to add a new Zone to Font add_kerning_group (self, key, glyphNameList, type, layer =None ) Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None alternates (self, namesOnly =False ) Returns all alternate characters (list[fgGlyph]) axes (self) # - Axes and MM ---------------------------------------------------- clearFeatures (self) clearGuidelines (self) Removes all font guidelines delFeature (self, tag) delGuideline (self, flGuide) Removes a guideline (flGuide) from font guidelines dict_to_kerning_groups (self, groupDict, layer =None ) duplicateGlyph (self, src_name, dst_name, dst_unicode =None , options ={'adv': True, 'anc': True, 'flg': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True, 'tag': True} ) Duplicates a glyph and adds it to the font Args: src_name, dst_name (str): Source and destination names dst_unicode (int): Unicode int of the new glyph references (bool): Keep existing element references (True) or decompose (False) Returns: pGlyph figures (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) findShape (self, shapeName, master =None ) Search for element (flShape) in font and return it fl_kerning_groups (self, layer =None ) fl_kerning_groups_to_dict (self, layer =None ) fontMetrics (self) Returns pFontMetrics Object with getter/setter functionality fontMetricsInfo (self, layer) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object) getFeaPrefix (self) getFeature (self, tag) getFeatureTags (self) getFeatures (self) # - OpenType and features ------------------------------------- getGlyphNameDict (self) getGlyphNames (self) # - Charset ----------------------------------------------- # -- Return Names getGlyphUnicodeDict (self, encoding ='utf-8' ) getItalicAngle (self) # - Font metrics ----------------------------------------------- getOTgroups (self) getSelectedIndices (self) # Functions --------------------------------------------------- # - Font Basics ----------------------------------------------- getZones (self, layer =None , HintingDataType =0 ) Returns font alignment (blue) zones (list[flGuideline]). Note: HintingDataType = {'HintingPS': 0, 'HintingTT': 1} glyph (self, glyph, extend =None ) Return TypeRig proxy glyph object (pGlyph) by index (int) or name (str). glyphs (self, indexList =[] , extend =None ) Return list of FontGate glyph objects (list[fgGlyph]). guidelines (self, hostInf =False , fontgate =False ) Return font guidelines Args: hostInf (bool): If True Return flHostInfo guidelines host objects fontgate (bool): If True return FontGate font guideline objects Returns list[flGuideline] or list[fgGuideline] hasFeature (self, tag) hasGlyph (self, glyphName) hasMaster (self, layerName) hinting (self) Returns fonts hinting instances (self) kerning (self, layer =None ) Return the fonts kerning object (fgKerning) no matter the reference. kerning_dump (self, layer =None , mark_groups ='@' , pairs_only =False ) Dump layer kerning to simple tuples. Args: layer (None, Int, String): Extract kerning data for layer specified; mark_groups (String): Mark group kerning with special symbol pairs_only (Bool): Export pairs without value Returns: pairs_only is False: list(tuple(tuple(str(First), str(Second))), Int(Value))) pairs_only is True: list(tuple(str(First), str(Second))) kerning_groups (self, layer =None ) Return the fonts kerning groups object (fgKerningGroups) no matter the reference. kerning_groups_to_dict (self, layer =None , byPosition =False , sortUnicode =False ) Return dictionary containing kerning groups Args: layer (None, Int, String): Extract kerning data for layer specified; byPosition (bool): Dictionary by class kerning positions - KernLeft(1st), KernRight(2nd) or KernBothSide(Both); sortUnicode (bool): Sort members of kern group according to their Unicode value. Returns: dict kerning_to_list (self, layer =None ) ligatures (self, namesOnly =False ) Returns all ligature characters (list[fgGlyph]) lowercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) masters (self) newGlyph (self, glyph_name, layers =[] , unicode_int =None ) Creates new glyph and adds it to the font Args: glyph_name (str): New glyph name layers (list(str) or list(flLayer)): List of layers to be added to the new glyph unicode_int (int): Unicode int of the new glyph Returns: pGlyph newGlyphFromRecipe (self, glyph_name, recipe, layers =[] , unicode_int =None , rtl =False ) Generate new glyph (glyph_name) using String Recipe (recipe) Args: glyph_name (str): New glyph name recipe (str): Glyph composition recipe using OLD Fontlab syntax (ex. A+acute=Aacute) layers (list(str)): List of layer names to be added unicode_int (int): Unicode int of the new glyph rtl (bool): Right to left Returns: pGlyph newKernPair (self, glyphLeft, glyphRight, modeLeft, modeRight) newOTgroup (self, groupName, glyphList) pGlyphs (self, fgGlyphList =[] ) Return list of TypeRig proxy Glyph objects glyph objects (list[pGlyph]). remove_kerning_group (self, key, layer =None ) Remove a group from fonts kerning groups at given layer. rename_kerning_group (self, oldkey, newkey, layer =None ) Rename a group in fonts kerning groups at given layer. reset_kerning_groups (self, layer =None ) selectGlyphs (self, glyphNameList) selectedGlyphs (self, extend =None ) Return TypeRig proxy glyph object for each selected glyph selected_pGlyphs (self) Return TypeRig proxy glyph object for each selected glyph setFeaPrefix (self, feaString) setFeature (self, tag, feaString) setSelectedIndices (self, indList) setZones (self, fontZones, layer =None ) symbol (self, gID) Return fgSymbol by glyph index (int) symbols (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) unselectAll (self) update (self) updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. uppercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) zonesFromTuples (self, zoneTupleList, layer =None , forceNames =False ) zonesToTuples (self, layer =None , HintingDataType =0 ) Descriptors OTfullName PSfullName __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) familyName info italic_angle name path selected_pGlyphs typerig.proxy.objects.font.pFont.selected_pGlyphs = selected_pGlyphs (self) unbound typerig.proxy.objects.font.pFont method Return TypeRig proxy glyph object for each selected glyph selectedGlyphs typerig.proxy.objects.font.pFont.selectedGlyphs = selectedGlyphs (self, extend =None ) unbound typerig.proxy.objects.font.pFont method Return TypeRig proxy glyph object for each selected glyph glyph typerig.proxy.objects.font.pFont.glyph = glyph (self, glyph, extend =None ) unbound typerig.proxy.objects.font.pFont method Return TypeRig proxy glyph object (pGlyph) by index (int) or name (str). symbol typerig.proxy.objects.font.pFont.symbol = symbol (self, gID) unbound typerig.proxy.objects.font.pFont method Return fgSymbol by glyph index (int) glyphs typerig.proxy.objects.font.pFont.glyphs = glyphs (self, indexList =[] , extend =None ) unbound typerig.proxy.objects.font.pFont method Return list of FontGate glyph objects (list[fgGlyph]). pGlyphs typerig.proxy.objects.font.pFont.pGlyphs = pGlyphs (self, fgGlyphList =[] ) unbound typerig.proxy.objects.font.pFont method Return list of TypeRig proxy Glyph objects glyph objects (list[pGlyph]). findShape typerig.proxy.objects.font.pFont.findShape = findShape (self, shapeName, master =None ) unbound typerig.proxy.objects.font.pFont method Search for element (flShape) in font and return it fontMetricsInfo typerig.proxy.objects.font.pFont.fontMetricsInfo = fontMetricsInfo (self, layer) unbound typerig.proxy.objects.font.pFont method Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object) fontMetrics typerig.proxy.objects.font.pFont.fontMetrics = fontMetrics (self) unbound typerig.proxy.objects.font.pFont method Returns pFontMetrics Object with getter/setter functionality updateObject typerig.proxy.objects.font.pFont.updateObject = updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) unbound typerig.proxy.objects.font.pFont method Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. guidelines typerig.proxy.objects.font.pFont.guidelines = guidelines (self, hostInf =False , fontgate =False ) unbound typerig.proxy.objects.font.pFont method Return font guidelines Args: hostInf (bool): If True Return flHostInfo guidelines host objects fontgate (bool): If True return FontGate font guideline objects Returns list[flGuideline] or list[fgGuideline] addGuideline typerig.proxy.objects.font.pFont.addGuideline = addGuideline (self, flGuide) unbound typerig.proxy.objects.font.pFont method Adds a guideline (flGuide) to font guidelines delGuideline typerig.proxy.objects.font.pFont.delGuideline = delGuideline (self, flGuide) unbound typerig.proxy.objects.font.pFont method Removes a guideline (flGuide) from font guidelines clearGuidelines typerig.proxy.objects.font.pFont.clearGuidelines = clearGuidelines (self) unbound typerig.proxy.objects.font.pFont method Removes all font guidelines getZones typerig.proxy.objects.font.pFont.getZones = getZones (self, layer =None , HintingDataType =0 ) unbound typerig.proxy.objects.font.pFont method Returns font alignment (blue) zones (list[flGuideline]). Note: HintingDataType = {'HintingPS': 0, 'HintingTT': 1} addZone typerig.proxy.objects.font.pFont.addZone = addZone (self, position, width, layer =None ) unbound typerig.proxy.objects.font.pFont method A very dirty way to add a new Zone to Font hinting typerig.proxy.objects.font.pFont.hinting = hinting (self) unbound typerig.proxy.objects.font.pFont method Returns fonts hinting uppercase typerig.proxy.objects.font.pFont.uppercase = uppercase (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph]) lowercase typerig.proxy.objects.font.pFont.lowercase = lowercase (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph]) figures typerig.proxy.objects.font.pFont.figures = figures (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph]) symbols typerig.proxy.objects.font.pFont.symbols = symbols (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph]) ligatures typerig.proxy.objects.font.pFont.ligatures = ligatures (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all ligature characters (list[fgGlyph]) alternates typerig.proxy.objects.font.pFont.alternates = alternates (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all alternate characters (list[fgGlyph]) addGlyph typerig.proxy.objects.font.pFont.addGlyph = addGlyph (self, glyph) unbound typerig.proxy.objects.font.pFont method Adds a Glyph (fgGlyph or flGlyph) to font addGlyphList typerig.proxy.objects.font.pFont.addGlyphList = addGlyphList (self, glyphList) unbound typerig.proxy.objects.font.pFont method Adds a List of Glyphs [fgGlyph or flGlyph] to font newGlyph typerig.proxy.objects.font.pFont.newGlyph = newGlyph (self, glyph_name, layers =[] , unicode_int =None ) unbound typerig.proxy.objects.font.pFont method Creates new glyph and adds it to the font Args: glyph_name (str): New glyph name layers (list(str) or list(flLayer)): List of layers to be added to the new glyph unicode_int (int): Unicode int of the new glyph Returns: pGlyph newGlyphFromRecipe typerig.proxy.objects.font.pFont.newGlyphFromRecipe = newGlyphFromRecipe (self, glyph_name, recipe, layers =[] , unicode_int =None , rtl =False ) unbound typerig.proxy.objects.font.pFont method Generate new glyph (glyph_name) using String Recipe (recipe) Args: glyph_name (str): New glyph name recipe (str): Glyph composition recipe using OLD Fontlab syntax (ex. A+acute=Aacute) layers (list(str)): List of layer names to be added unicode_int (int): Unicode int of the new glyph rtl (bool): Right to left Returns: pGlyph duplicateGlyph typerig.proxy.objects.font.pFont.duplicateGlyph = duplicateGlyph (self, src_name, dst_name, dst_unicode =None , options ={'adv': True, 'anc': True, 'flg': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True, 'tag': True} ) unbound typerig.proxy.objects.font.pFont method Duplicates a glyph and adds it to the font Args: src_name, dst_name (str): Source and destination names dst_unicode (int): Unicode int of the new glyph references (bool): Keep existing element references (True) or decompose (False) Returns: pGlyph kerning typerig.proxy.objects.font.pFont.kerning = kerning (self, layer =None ) unbound typerig.proxy.objects.font.pFont method Return the fonts kerning object (fgKerning) no matter the reference. kerning_dump typerig.proxy.objects.font.pFont.kerning_dump = kerning_dump (self, layer =None , mark_groups ='@' , pairs_only =False ) unbound typerig.proxy.objects.font.pFont method Dump layer kerning to simple tuples. Args: layer (None, Int, String): Extract kerning data for layer specified; mark_groups (String): Mark group kerning with special symbol pairs_only (Bool): Export pairs without value Returns: pairs_only is False: list(tuple(tuple(str(First), str(Second))), Int(Value))) pairs_only is True: list(tuple(str(First), str(Second))) kerning_groups typerig.proxy.objects.font.pFont.kerning_groups = kerning_groups (self, layer =None ) unbound typerig.proxy.objects.font.pFont method Return the fonts kerning groups object (fgKerningGroups) no matter the reference. kerning_groups_to_dict typerig.proxy.objects.font.pFont.kerning_groups_to_dict = kerning_groups_to_dict (self, layer =None , byPosition =False , sortUnicode =False ) unbound typerig.proxy.objects.font.pFont method Return dictionary containing kerning groups Args: layer (None, Int, String): Extract kerning data for layer specified; byPosition (bool): Dictionary by class kerning positions - KernLeft(1st), KernRight(2nd) or KernBothSide(Both); sortUnicode (bool): Sort members of kern group according to their Unicode value. Returns: dict add_kerning_group typerig.proxy.objects.font.pFont.add_kerning_group = add_kerning_group (self, key, glyphNameList, type, layer =None ) unbound typerig.proxy.objects.font.pFont method Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None remove_kerning_group typerig.proxy.objects.font.pFont.remove_kerning_group = remove_kerning_group (self, key, layer =None ) unbound typerig.proxy.objects.font.pFont method Remove a group from fonts kerning groups at given layer. rename_kerning_group typerig.proxy.objects.font.pFont.rename_kerning_group = rename_kerning_group (self, oldkey, newkey, layer =None ) unbound typerig.proxy.objects.font.pFont method Rename a group in fonts kerning groups at given layer. eFont typerig.proxy.objects.font.eFont = class eFont ( pFont ) Proxy Font extension, packing some useful tools. Constructor: eFont() - default represents the current glyph and current font eFont(fgFont) Method resolution order: eFont pFont __builtin__.object Methods copyZones (self, font) Methods from pFont __init__ (self, font =None ) __repr__ (self) addGlyph (self, glyph) Adds a Glyph (fgGlyph or flGlyph) to font addGlyphList (self, glyphList) Adds a List of Glyphs [fgGlyph or flGlyph] to font addGuideline (self, flGuide) Adds a guideline (flGuide) to font guidelines addOTgroup (self, groupName, glyphList) addZone (self, position, width, layer =None ) A very dirty way to add a new Zone to Font add_kerning_group (self, key, glyphNameList, type, layer =None ) Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None alternates (self, namesOnly =False ) Returns all alternate characters (list[fgGlyph]) axes (self) # - Axes and MM ---------------------------------------------------- clearFeatures (self) clearGuidelines (self) Removes all font guidelines delFeature (self, tag) delGuideline (self, flGuide) Removes a guideline (flGuide) from font guidelines dict_to_kerning_groups (self, groupDict, layer =None ) duplicateGlyph (self, src_name, dst_name, dst_unicode =None , options ={'adv': True, 'anc': True, 'flg': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True, 'tag': True} ) Duplicates a glyph and adds it to the font Args: src_name, dst_name (str): Source and destination names dst_unicode (int): Unicode int of the new glyph references (bool): Keep existing element references (True) or decompose (False) Returns: pGlyph figures (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) findShape (self, shapeName, master =None ) Search for element (flShape) in font and return it fl_kerning_groups (self, layer =None ) fl_kerning_groups_to_dict (self, layer =None ) fontMetrics (self) Returns pFontMetrics Object with getter/setter functionality fontMetricsInfo (self, layer) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object) getFeaPrefix (self) getFeature (self, tag) getFeatureTags (self) getFeatures (self) # - OpenType and features ------------------------------------- getGlyphNameDict (self) getGlyphNames (self) # - Charset ----------------------------------------------- # -- Return Names getGlyphUnicodeDict (self, encoding ='utf-8' ) getItalicAngle (self) # - Font metrics ----------------------------------------------- getOTgroups (self) getSelectedIndices (self) # Functions --------------------------------------------------- # - Font Basics ----------------------------------------------- getZones (self, layer =None , HintingDataType =0 ) Returns font alignment (blue) zones (list[flGuideline]). Note: HintingDataType = {'HintingPS': 0, 'HintingTT': 1} glyph (self, glyph, extend =None ) Return TypeRig proxy glyph object (pGlyph) by index (int) or name (str). glyphs (self, indexList =[] , extend =None ) Return list of FontGate glyph objects (list[fgGlyph]). guidelines (self, hostInf =False , fontgate =False ) Return font guidelines Args: hostInf (bool): If True Return flHostInfo guidelines host objects fontgate (bool): If True return FontGate font guideline objects Returns list[flGuideline] or list[fgGuideline] hasFeature (self, tag) hasGlyph (self, glyphName) hasMaster (self, layerName) hinting (self) Returns fonts hinting instances (self) kerning (self, layer =None ) Return the fonts kerning object (fgKerning) no matter the reference. kerning_dump (self, layer =None , mark_groups ='@' , pairs_only =False ) Dump layer kerning to simple tuples. Args: layer (None, Int, String): Extract kerning data for layer specified; mark_groups (String): Mark group kerning with special symbol pairs_only (Bool): Export pairs without value Returns: pairs_only is False: list(tuple(tuple(str(First), str(Second))), Int(Value))) pairs_only is True: list(tuple(str(First), str(Second))) kerning_groups (self, layer =None ) Return the fonts kerning groups object (fgKerningGroups) no matter the reference. kerning_groups_to_dict (self, layer =None , byPosition =False , sortUnicode =False ) Return dictionary containing kerning groups Args: layer (None, Int, String): Extract kerning data for layer specified; byPosition (bool): Dictionary by class kerning positions - KernLeft(1st), KernRight(2nd) or KernBothSide(Both); sortUnicode (bool): Sort members of kern group according to their Unicode value. Returns: dict kerning_to_list (self, layer =None ) ligatures (self, namesOnly =False ) Returns all ligature characters (list[fgGlyph]) lowercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) masters (self) newGlyph (self, glyph_name, layers =[] , unicode_int =None ) Creates new glyph and adds it to the font Args: glyph_name (str): New glyph name layers (list(str) or list(flLayer)): List of layers to be added to the new glyph unicode_int (int): Unicode int of the new glyph Returns: pGlyph newGlyphFromRecipe (self, glyph_name, recipe, layers =[] , unicode_int =None , rtl =False ) Generate new glyph (glyph_name) using String Recipe (recipe) Args: glyph_name (str): New glyph name recipe (str): Glyph composition recipe using OLD Fontlab syntax (ex. A+acute=Aacute) layers (list(str)): List of layer names to be added unicode_int (int): Unicode int of the new glyph rtl (bool): Right to left Returns: pGlyph newKernPair (self, glyphLeft, glyphRight, modeLeft, modeRight) newOTgroup (self, groupName, glyphList) pGlyphs (self, fgGlyphList =[] ) Return list of TypeRig proxy Glyph objects glyph objects (list[pGlyph]). remove_kerning_group (self, key, layer =None ) Remove a group from fonts kerning groups at given layer. rename_kerning_group (self, oldkey, newkey, layer =None ) Rename a group in fonts kerning groups at given layer. reset_kerning_groups (self, layer =None ) selectGlyphs (self, glyphNameList) selectedGlyphs (self, extend =None ) Return TypeRig proxy glyph object for each selected glyph selected_pGlyphs (self) Return TypeRig proxy glyph object for each selected glyph setFeaPrefix (self, feaString) setFeature (self, tag, feaString) setSelectedIndices (self, indList) setZones (self, fontZones, layer =None ) symbol (self, gID) Return fgSymbol by glyph index (int) symbols (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) unselectAll (self) update (self) updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. uppercase (self, namesOnly =False ) Returns all uppercase characters (list[fgGlyph]) zonesFromTuples (self, zoneTupleList, layer =None , forceNames =False ) zonesToTuples (self, layer =None , HintingDataType =0 ) Descriptors from pFont OTfullName PSfullName __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) familyName info italic_angle name path jFont typerig.proxy.objects.font.jFont = class jFont ( __builtin__.object ) Proxy VFJ Font (Fontlab JSON Font format) Constructor: jFont(): Construct an empty jFont jFont(vfj_file_path): Load VFJ form vfj_file_path (STR) jFont(pFont): Load VFJ from pFont.path. VFJ Font has to be in the same path as the VFC Methods: .data(): Access to VFJ font .load(file_path): Load VFJ font from path .save_as(file_path): Save VFJ font to path .save(): Save VFJ (overwrite) Methods __init__ (self, source =None ) load (self, file_path) save (self) save_as (self, file_path) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"proxy.objects.font"},{"location":"typerig.proxy.objects.font.html#typerigproxyobjectsfont","text":"","title":"typerig.proxy.objects.font"},{"location":"typerig.proxy.objects.font.html#pfontmetrics","text":"","title":"pFontMetrics"},{"location":"typerig.proxy.objects.font.html#pfont","text":"","title":"pFont"},{"location":"typerig.proxy.objects.font.html#selected_pglyphs","text":"typerig.proxy.objects.font.pFont.selected_pGlyphs = selected_pGlyphs (self) unbound typerig.proxy.objects.font.pFont method Return TypeRig proxy glyph object for each selected glyph","title":"selected_pGlyphs"},{"location":"typerig.proxy.objects.font.html#selectedglyphs","text":"typerig.proxy.objects.font.pFont.selectedGlyphs = selectedGlyphs (self, extend =None ) unbound typerig.proxy.objects.font.pFont method Return TypeRig proxy glyph object for each selected glyph","title":"selectedGlyphs"},{"location":"typerig.proxy.objects.font.html#glyph","text":"typerig.proxy.objects.font.pFont.glyph = glyph (self, glyph, extend =None ) unbound typerig.proxy.objects.font.pFont method Return TypeRig proxy glyph object (pGlyph) by index (int) or name (str).","title":"glyph"},{"location":"typerig.proxy.objects.font.html#symbol","text":"typerig.proxy.objects.font.pFont.symbol = symbol (self, gID) unbound typerig.proxy.objects.font.pFont method Return fgSymbol by glyph index (int)","title":"symbol"},{"location":"typerig.proxy.objects.font.html#glyphs","text":"typerig.proxy.objects.font.pFont.glyphs = glyphs (self, indexList =[] , extend =None ) unbound typerig.proxy.objects.font.pFont method Return list of FontGate glyph objects (list[fgGlyph]).","title":"glyphs"},{"location":"typerig.proxy.objects.font.html#pglyphs","text":"typerig.proxy.objects.font.pFont.pGlyphs = pGlyphs (self, fgGlyphList =[] ) unbound typerig.proxy.objects.font.pFont method Return list of TypeRig proxy Glyph objects glyph objects (list[pGlyph]).","title":"pGlyphs"},{"location":"typerig.proxy.objects.font.html#findshape","text":"typerig.proxy.objects.font.pFont.findShape = findShape (self, shapeName, master =None ) unbound typerig.proxy.objects.font.pFont method Search for element (flShape) in font and return it","title":"findShape"},{"location":"typerig.proxy.objects.font.html#fontmetricsinfo","text":"typerig.proxy.objects.font.pFont.fontMetricsInfo = fontMetricsInfo (self, layer) unbound typerig.proxy.objects.font.pFont method Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object)","title":"fontMetricsInfo"},{"location":"typerig.proxy.objects.font.html#fontmetrics","text":"typerig.proxy.objects.font.pFont.fontMetrics = fontMetrics (self) unbound typerig.proxy.objects.font.pFont method Returns pFontMetrics Object with getter/setter functionality","title":"fontMetrics"},{"location":"typerig.proxy.objects.font.html#updateobject","text":"typerig.proxy.objects.font.pFont.updateObject = updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) unbound typerig.proxy.objects.font.pFont method Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list.","title":"updateObject"},{"location":"typerig.proxy.objects.font.html#guidelines","text":"typerig.proxy.objects.font.pFont.guidelines = guidelines (self, hostInf =False , fontgate =False ) unbound typerig.proxy.objects.font.pFont method Return font guidelines Args: hostInf (bool): If True Return flHostInfo guidelines host objects fontgate (bool): If True return FontGate font guideline objects Returns list[flGuideline] or list[fgGuideline]","title":"guidelines"},{"location":"typerig.proxy.objects.font.html#addguideline","text":"typerig.proxy.objects.font.pFont.addGuideline = addGuideline (self, flGuide) unbound typerig.proxy.objects.font.pFont method Adds a guideline (flGuide) to font guidelines","title":"addGuideline"},{"location":"typerig.proxy.objects.font.html#delguideline","text":"typerig.proxy.objects.font.pFont.delGuideline = delGuideline (self, flGuide) unbound typerig.proxy.objects.font.pFont method Removes a guideline (flGuide) from font guidelines","title":"delGuideline"},{"location":"typerig.proxy.objects.font.html#clearguidelines","text":"typerig.proxy.objects.font.pFont.clearGuidelines = clearGuidelines (self) unbound typerig.proxy.objects.font.pFont method Removes all font guidelines","title":"clearGuidelines"},{"location":"typerig.proxy.objects.font.html#getzones","text":"typerig.proxy.objects.font.pFont.getZones = getZones (self, layer =None , HintingDataType =0 ) unbound typerig.proxy.objects.font.pFont method Returns font alignment (blue) zones (list[flGuideline]). Note: HintingDataType = {'HintingPS': 0, 'HintingTT': 1}","title":"getZones"},{"location":"typerig.proxy.objects.font.html#addzone","text":"typerig.proxy.objects.font.pFont.addZone = addZone (self, position, width, layer =None ) unbound typerig.proxy.objects.font.pFont method A very dirty way to add a new Zone to Font","title":"addZone"},{"location":"typerig.proxy.objects.font.html#hinting","text":"typerig.proxy.objects.font.pFont.hinting = hinting (self) unbound typerig.proxy.objects.font.pFont method Returns fonts hinting","title":"hinting"},{"location":"typerig.proxy.objects.font.html#uppercase","text":"typerig.proxy.objects.font.pFont.uppercase = uppercase (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph])","title":"uppercase"},{"location":"typerig.proxy.objects.font.html#lowercase","text":"typerig.proxy.objects.font.pFont.lowercase = lowercase (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph])","title":"lowercase"},{"location":"typerig.proxy.objects.font.html#figures","text":"typerig.proxy.objects.font.pFont.figures = figures (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph])","title":"figures"},{"location":"typerig.proxy.objects.font.html#symbols","text":"typerig.proxy.objects.font.pFont.symbols = symbols (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all uppercase characters (list[fgGlyph])","title":"symbols"},{"location":"typerig.proxy.objects.font.html#ligatures","text":"typerig.proxy.objects.font.pFont.ligatures = ligatures (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all ligature characters (list[fgGlyph])","title":"ligatures"},{"location":"typerig.proxy.objects.font.html#alternates","text":"typerig.proxy.objects.font.pFont.alternates = alternates (self, namesOnly =False ) unbound typerig.proxy.objects.font.pFont method Returns all alternate characters (list[fgGlyph])","title":"alternates"},{"location":"typerig.proxy.objects.font.html#addglyph","text":"typerig.proxy.objects.font.pFont.addGlyph = addGlyph (self, glyph) unbound typerig.proxy.objects.font.pFont method Adds a Glyph (fgGlyph or flGlyph) to font","title":"addGlyph"},{"location":"typerig.proxy.objects.font.html#addglyphlist","text":"typerig.proxy.objects.font.pFont.addGlyphList = addGlyphList (self, glyphList) unbound typerig.proxy.objects.font.pFont method Adds a List of Glyphs [fgGlyph or flGlyph] to font","title":"addGlyphList"},{"location":"typerig.proxy.objects.font.html#newglyph","text":"typerig.proxy.objects.font.pFont.newGlyph = newGlyph (self, glyph_name, layers =[] , unicode_int =None ) unbound typerig.proxy.objects.font.pFont method Creates new glyph and adds it to the font Args: glyph_name (str): New glyph name layers (list(str) or list(flLayer)): List of layers to be added to the new glyph unicode_int (int): Unicode int of the new glyph Returns: pGlyph","title":"newGlyph"},{"location":"typerig.proxy.objects.font.html#newglyphfromrecipe","text":"typerig.proxy.objects.font.pFont.newGlyphFromRecipe = newGlyphFromRecipe (self, glyph_name, recipe, layers =[] , unicode_int =None , rtl =False ) unbound typerig.proxy.objects.font.pFont method Generate new glyph (glyph_name) using String Recipe (recipe) Args: glyph_name (str): New glyph name recipe (str): Glyph composition recipe using OLD Fontlab syntax (ex. A+acute=Aacute) layers (list(str)): List of layer names to be added unicode_int (int): Unicode int of the new glyph rtl (bool): Right to left Returns: pGlyph","title":"newGlyphFromRecipe"},{"location":"typerig.proxy.objects.font.html#duplicateglyph","text":"typerig.proxy.objects.font.pFont.duplicateGlyph = duplicateGlyph (self, src_name, dst_name, dst_unicode =None , options ={'adv': True, 'anc': True, 'flg': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True, 'tag': True} ) unbound typerig.proxy.objects.font.pFont method Duplicates a glyph and adds it to the font Args: src_name, dst_name (str): Source and destination names dst_unicode (int): Unicode int of the new glyph references (bool): Keep existing element references (True) or decompose (False) Returns: pGlyph","title":"duplicateGlyph"},{"location":"typerig.proxy.objects.font.html#kerning","text":"typerig.proxy.objects.font.pFont.kerning = kerning (self, layer =None ) unbound typerig.proxy.objects.font.pFont method Return the fonts kerning object (fgKerning) no matter the reference.","title":"kerning"},{"location":"typerig.proxy.objects.font.html#kerning_dump","text":"typerig.proxy.objects.font.pFont.kerning_dump = kerning_dump (self, layer =None , mark_groups ='@' , pairs_only =False ) unbound typerig.proxy.objects.font.pFont method Dump layer kerning to simple tuples. Args: layer (None, Int, String): Extract kerning data for layer specified; mark_groups (String): Mark group kerning with special symbol pairs_only (Bool): Export pairs without value Returns: pairs_only is False: list(tuple(tuple(str(First), str(Second))), Int(Value))) pairs_only is True: list(tuple(str(First), str(Second)))","title":"kerning_dump"},{"location":"typerig.proxy.objects.font.html#kerning_groups","text":"typerig.proxy.objects.font.pFont.kerning_groups = kerning_groups (self, layer =None ) unbound typerig.proxy.objects.font.pFont method Return the fonts kerning groups object (fgKerningGroups) no matter the reference.","title":"kerning_groups"},{"location":"typerig.proxy.objects.font.html#kerning_groups_to_dict","text":"typerig.proxy.objects.font.pFont.kerning_groups_to_dict = kerning_groups_to_dict (self, layer =None , byPosition =False , sortUnicode =False ) unbound typerig.proxy.objects.font.pFont method Return dictionary containing kerning groups Args: layer (None, Int, String): Extract kerning data for layer specified; byPosition (bool): Dictionary by class kerning positions - KernLeft(1st), KernRight(2nd) or KernBothSide(Both); sortUnicode (bool): Sort members of kern group according to their Unicode value. Returns: dict","title":"kerning_groups_to_dict"},{"location":"typerig.proxy.objects.font.html#add_kerning_group","text":"typerig.proxy.objects.font.pFont.add_kerning_group = add_kerning_group (self, key, glyphNameList, type, layer =None ) unbound typerig.proxy.objects.font.pFont method Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None","title":"add_kerning_group"},{"location":"typerig.proxy.objects.font.html#remove_kerning_group","text":"typerig.proxy.objects.font.pFont.remove_kerning_group = remove_kerning_group (self, key, layer =None ) unbound typerig.proxy.objects.font.pFont method Remove a group from fonts kerning groups at given layer.","title":"remove_kerning_group"},{"location":"typerig.proxy.objects.font.html#rename_kerning_group","text":"typerig.proxy.objects.font.pFont.rename_kerning_group = rename_kerning_group (self, oldkey, newkey, layer =None ) unbound typerig.proxy.objects.font.pFont method Rename a group in fonts kerning groups at given layer.","title":"rename_kerning_group"},{"location":"typerig.proxy.objects.font.html#efont","text":"","title":"eFont"},{"location":"typerig.proxy.objects.font.html#jfont","text":"","title":"jFont"},{"location":"typerig.proxy.objects.glyph.html","text":"typerig.proxy.objects.glyph typerig . proxy . objects .glyph ( version 0.26.9) # MODULE: Typerig / Proxy / Glyph # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab math PythonQt fontTools.pens.statisticsPen Classes builtin .object pGlyph eGlyph class eGlyph ( pGlyph ) Extended representation of the Proxy Glyph, adding some advanced functionality Constructor: pGlyph() - default represents the current glyph and current font pGlyph(fgFont, fgGlyph) Method resolution order: eGlyph pGlyph builtin .object Methods bindCompMetrics (self, layer =None , bindIndex =None ) Auto bind metrics to the base composite glyph or to specified shape index blendLayers (self, layerA, layerB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) Blend two layers at given times (anisotropic support). Args: layerA (flLayer), layerB (flLayer): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: flLayer breakContour (self, contourId, nodeId, layer =None , expand =0 ) Split Contour at given node and layer. Extrapolate line endings if needed. Args: contourId (int): Contour Index nodeId (int): Node Index layer (int or str): Layer index or name, works with both expand (float): Will extrapolate the line endings at that given value Returns: flContour copyADVbyName (self, glyphName, layers =None , adjustPercent =100 , adjustUnits =0 ) Copy Advance width from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None copyLSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) Copy LSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None copyMetricsbyName (self, metricTriple =(None, None, None) , layers =None , order =(0, 0, 0) , adjustPercent =(100, 100, 100) , adjustUnits =(0, 0, 0) ) Copy LSB, RSB and Advance width from glyphs specified by Glyph Name. Args: metricTriple tuple(str): Names of source glyphs for (LSB, RSB, ADV) layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order tuple(bool): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. (LSB, RSB, 0) adjustPercent tuple(int): Adjust the copied metric by percent (100 default) - (LSB, RSB, ADV) adjustUnits tuple(int): Adjust the copied metric by units (0 default) - (LSB, RSB, ADV) Return: None copyRSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) Copy RSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None dropAnchor (self, name, layer, coordTuple, alignTuple =(None, None) , tolerance =5 , italic =False ) Drop anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None dropGuide (self, nodes =None , layers =None , name ='*DropGuideline' , tag ='' , color ='darkMagenta' , flip =(1, 1) , style ='gsGlyphGuideline' ) Build guideline trough *any two* given points or the *first two of the current selection*. If *single point* is given will create a vertical guideline trough that point, with guideline inclined according to the font's Italic Angle. if process layers (pLayers) is None guideline will be created in all compatible layers, otherwise the bool control tuple (active_layer (True or False), masters (True or False), masks (True or False), services (True or False)) is used. If all are set to False only the active layer is used. Args: nodes (list(int)): List of node indexes layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. name (str): Name of the guideline to be build color (str): Color of the guideline according to QtCore colors style (str): Style of the guideline according to FontLab 6 Returns: None getAttachmentCenters (self, layer, tolerance =5 , applyTransform =True , getAll =False ) Return X center of lowest, highest Y of [glyph] for [layer] within given [tolerance] Note: Determine diacritic to glyph attachment positions (for anchor placement) getNewBaseCoords (self, layer, adjustTuple, alignTuple, tolerance =5 , italic =False , initPosTuple =(0.0, 0.0) ) Calculate Anchor base position Args: layer (int or str): Layer index or name, works with both coordTuple (int/float, int/float): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int/float): Outline feature auto detection tolerance* initPosTuple (int/float, int/float): Itinital anchor position *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: x, y (int/float) lerpLayerFg (self, l0_Name, l1_Name) moveAnchor (self, name, layer, coordTuple =(0, 0) , alignTuple =(None, None) , tolerance =5 , italic =False ) Move anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None reorder_shapes (self, layer =None , mode =(0, 0) ) Auto reorder shapes on given layer using criteria. Args: layer (int or str): Layer index or name, works with both mode (bool, bool): Mode of shape reordering/sorting by (X, Y) Returns: None setStart (self, layer =None , control =(0, 0) ) splitContour (self, scnPairs =None , layers =None , expand =0 , close =False ) Split Contour at given node and combinations of compatible layers. Extrapolate line endings and close contour if needed. Args: scnPairs (list(tuple)): Shape-contour-node pairs for the selected nodes [(Shape Index, Contour Index, Node Index)..()] layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. expand (float): Will extrapolate the line endings at that given value close (bool): True = Close contour Return: None ungroup_all_shapes (self, layer =None , applyTransform =True ) Ungroup all shapes at given layer. Args: layer (int or str): Layer index or name, works with both applyTransform (bool): Apply transformation at shape. Returns: None Methods from pGlyph init (self, *argv) repr (self) activeGuides (self) activeLayer (self) addAnchor (self, coordTuple, name, layer =None , isAnchor =True ) Adds named Anchor at given layer. Args: coordTuple (tuple(float,float)): Anchor coordinates X, Y name (str): Anchor name layer (int or str): Layer index or name. If None returns ActiveLayer isAnchor (bool): True creates a true flAnchor, False ? (flPinPoint) Returns: None addComponents (self, componentConfig, layer =None , useAnchors =True , colorize =False ) Adds a components to given glyph layer. Args: componentConfig (list(tuple(glyph_name (str), glyph_transform (QTransform), layer_pointer (str)))): List contianign component configuration. layer (int or str): Layer index or name. If None returns ActiveLayer useAnchors (bool): Compose using anchors colorize (bool): Flag new glyphs Returns: list(flShapes): List of components added addGuideline (self, coordTuple, layer =None , angle =0 , name ='' , tag ='' , color ='darkMagenta' , style ='gsGlyphGuideline' ) Adds named Guideline at given layer Args: coordTuple (tuple(float,float) or tuple(float,float,float,float)): Guideline coordinates X, Y and given angle or two node reference x1,y1 and x2,y2 name (str): Anchor name angle (float): Incline of the guideline layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None addLayer (self, layer, toBack =False ) Adds a layer to glyph. Args: layer (flLayer or fgLayer) toBack (bool): Send layer to back Returns: None addShape (self, shape, layer =None , clone =False ) Add a new shape at given layer. Args: shape (flShape): Shape to be added Returns: flShape addShapeContainer (self, shapeList, layer =None , remove =True ) Add a new shape container* at given layer. A flShape containing all of the shapes given that could be transformed to Shape-group or shape-filter. Args: shapeList list(flShape): List if Shapes to be grouped. Returns: flShape anchors (self, layer =None ) Return list of anchors (list[flAnchor]) at given layer (int or str) blendShapes (self, shapeA, shapeB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) Blend two shapes at given times (anisotropic support). Args: shapeA (flShape), shapeB (flShape): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: Native (interpolation engine dependent) or flShape (default) clearAnchors (self, layer =None ) Remove all anchors at given layer (int or str) components (self, layer =None , extend =None ) Return all glyph components besides glyph. containers (self, layer =None , extend =None ) Return all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] contours (self, layer =None , deep =True , extend =None ) Return all contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flContours] copyLayer (self, srcLayerName, dstLayerName, options ={'adv': True, 'anc': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True} , addLayer =False , cleanDST =True , toBack =True ) Copies a layer within the glyph. Args: srcLayerName, dstLayerName (string): Source and destination layer names options (dict): Copy Options as follows {'out': Outline, 'gui': Guidelines, 'anc': Anchors, 'lsb': LSB, 'adv': Advance, 'rsb': RSB, 'lnk': Linked metrics, 'ref': References}, addLayer=False): addLayer (bool): Create a new layer cleanDST (bool): Clean destination layer toBack (bool): Add layer to back of the layer stack Returns: flLayer decompose (self, layer =None ) Decompose all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None dereference (self, layer =None ) Remove all shape references but leave components. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] draw (self, pen, layer =None ) Utilizes the Pen protocol drawPoints (self, pen, layer =None ) Utilizes the PointPen protocol duplicateLayer (self, layer =None , newLayerName ='New Layer' , references =False ) Duplicates a layer with new name and adds it to glyph's layers. Args: layer (int or str): Layer index or name. If None returns ActiveLayer toBack(bool): send to back Returns: flLayer elements (self, layer =None , extend =None ) Return all glyph elements in glyph fg_activeLayer (self) fg_contours (self, layer =None ) Return all FontGate contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgContours] fg_hasLayer (self, layerName) fg_layer (self, layer =None ) Returns FontGate layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: fgLayer fg_layers (self, asDict =False ) Return all FotnGate layers fg_nodes (self, layer =None ) Return all FontGate nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgNodes] fg_shapes (self, layer =None ) Return all FontGate shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgShapes] findAnchor (self, anchorName, layer =None ) Find anchor by name/tag findAnchorCoords (self, anchorName, layer =None ) Find anchor coordinates by name/tag findNode (self, nodeName, layer =None ) Find node by name/tag findNodeCoords (self, nodeName, layer =None ) Find node coordinates by name/tag findShape (self, shapeName, layer =None ) Finds shape by name on given layer Args: shapeName (str): Shape name layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flShape or None fontMetricsInfo (self, layer =None ) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics ( object ) getAdvance (self, layer =None ) Get the Advance Width at given layer (int or str) getBounds (self, layer =None ) Get Glyph's Boundig Box at given layer (int or str). Returns QRectF. getBuilders (self, layer =None , store =False ) getCompositionDict (self, layer =None ) Return composition dict of a glyph. Elements! getCompositionNames (self, layer =None ) Return name of glyph and the parts it is made of. getElementNames (self, layer =None ) Return names of elements references used in glyph. getLSB (self, layer =None ) Get the Left Side-bearing at given layer (int or str) getRSB (self, layer =None ) Get the Right Side-bearing at given layer (int or str) getSBeq (self, layer =None ) GET LSB, RSB metric equations on given layer getSegment (self, cID, nID, layer =None ) Returns contour segment of the node specified at given layer Args: cID (int): Contour index nID (int): Node of insertion index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: CurveEx getTags (self) # - Tags ----------------------------------------------- guidelines (self, layer =None ) Return list of guidelines (list[flGuideline]) at given layer (int or str) hasLayer (self, layerName) insertNodeAt (self, cID, nID_time, layer =None ) Inserts node in contour at specified layer Arg: cID (int): Contour Index nID_time (float): Node index + float time layer (int or str): Layer index or name. If None returns ActiveLayer !NOTE: FL6 treats contour insertions (as well as nodes) as float times along contour, so inserting a node at .5 t between nodes with indexes 3 and 4 will be 3 (index) + 0.5 (time) = 3.5 insertNodesAt (self, cID, nID, nodeList, layer =None ) Inserts a list of nodes to specified contour, starting at given index all on layer specified. Args: cID (int): Contour index nID (int): Node of insertion index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None isCompatible (self, strong =False ) Test if glyph is ready for interpolation - all master layers are compatible. isMixedReference (self) Test if glyph has mixed references - components on some layers and referenced shapes on others italicAngle (self) layer (self, layer =None ) Returns layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flLayer layers (self) Return all layers mLine (self) mapNodes2Times (self, layer =None ) Create map of Nodes at contour times for every contour in given layer Returns: dict{Contour index (int) : dict{Contour Time (int): Node Index (int) }} mapTimes2Nodes (self, layer =None ) Create map of Contour times at node indexes for every contour in given layer Returns: dict{Contour index (int) : dict{Node Index (int) : Contour Time (int) }} mask (self) masks (self) Returns all mask layers. masters (self) Returns all master layers. newAnchor (self, coordTuple, name, anchorType =1 ) Not working nodes (self, layer =None , extend =None , deep =False ) Return all nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer. extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNodes] nodes4segments (self, cID, layer =None ) Returns all contour segments and their corresponding nodes at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: dict{time(int):(CurveEx, list[flNode]} nodesForIndices (self, indices, layer =None , filterOn =False , extend =None , deep =False ) noncomplex (self, layer =None , extend =None ) Return all glyph shapes that are not glyph references or components object (self) removeLayer (self, layer) Removes a layer from glyph. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodeAt (self, cID, nID, layer =None ) Removes a node from contour at layer specified. Args: cID (int): Contour index nID (int): Index of Node to be removed layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodes (self, cID, nodeList, layer =None ) Removes a list of nodes from contour at layer specified. Args: cID (int): Contour index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeShape (self, shape, layer =None , recursive =True ) Remove a new shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name recursive (bool): Returns: None replaceShape (self, old_shape, new_shape, layer =None ) Repalce a shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name Returns: None reportLayerComp (self, strong =False ) Returns a layer compatibility report rotate (self, deg, layer =None ) Rotate outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None scale (self, sx, sy, layer =None ) Scale outline at given layer. Args: sx (float), sy (float): delta (scaling) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None segments (self, cID, layer =None ) Returns all contour segments at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selected (self, filterOn =False , deep =False ) Return all selected nodes indexes at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedAtContours (self, index =True , layer =None , filterOn =False , deep =False ) Return all selected nodes and the contours they rest upon at current layer. Args: index (bool): If True returns only indexes, False returns flContour, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(contourID, nodeID)..()] or list[tuple(flContour, flNode)] selectedAtShapes (self, index =True , filterOn =False , layer =None , deep =False ) Return all selected nodes and the shapes they belong at current layer. Args: index (bool): If True returns only indexes, False returns flShape, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(shapeID, nodeID)..()] or list[tuple(flShape, flNode)] !TODO: Make it working with layers as selectedAtContours (). This is legacy mode so other scripts would work! selectedContours (self, layer =None , allNodesSelected =False ) selectedCoords (self, layer =None , filterOn =False , applyTransform =False ) Return the coordinates of all selected nodes at the current layer or other. Args: layer (int or str): Layer index or name. If None returns ActiveLayer filterOn (bool): Return only on-curve nodes applyTransform (bool) : Gets local shape transformation matrix and applies it to the node coordinates Returns: list[QPointF] selectedNodeIndices (self, filterOn =False , deep =False ) Return all indices of nodes selected at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedNodes (self, layer =None , filterOn =False , extend =None , deep =False ) Return all selected nodes at given layer. Args: filterOn (bool): Return only on-curve nodes extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNode] selectedNodesOnCanvas (self, filterOn =False ) # - Glyph Selection ----------------------------------------------- selectedSegments (self, layer =None ) Returns list of currently selected segments Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selectedShapeIndices (self, select_all =False , deep =False ) Return all indices of nodes selected at current layer. Args: select_all (bool): True all nodes on Shape should be selected. False any node will do. Returns: list[int] selectedShapes (self, layer =None , select_all =False , deep =False , extend =None ) Return all shapes that have a node selected. services (self) Returns all service layers. setADVeq (self, equationStr, layer =None ) Set Advance width metric equation on given layer setAdvance (self, newAdvance, layer =None ) Set the Advance Width (int) at given layer (int or str) setLSB (self, newLSB, layer =None ) Set the Left Side-bearing (int) at given layer (int or str) setLSBeq (self, equationStr, layer =None ) Set LSB metric equation on given layer setMark (self, mark_color, layer =None ) setName (self, glyph_name) setRSB (self, newRSB, layer =None ) Set the Right Side-bearing (int) at given layer (int or str) setRSBeq (self, equationStr, layer =None ) Set RSB metric equation on given layer setTags (self, tagList, append =True ) shapes (self, layer =None , extend =None ) Return all shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] shapes_data (self, layer =None ) Return all flShapeData objects at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapeData] slant (self, deg, layer =None ) Slant outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None tag (self, newTag) translate (self, dx, dy, layer =None ) Translate (shift) outline at given layer. Args: dx (float), dy (float): delta (shift) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None update (self, fl =True , fg =False ) Updates the glyph and sends notification to the editor. Args: fl (bool): Update the flGlyph fg (bool): Update the fgGlyph updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. version (self) # - Basics ----------------------------------------------- Descriptors from pGlyph dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) id index mark name package tags unicode unicodes class pGlyph ( builtin .object ) Proxy to flGlyph and fgGlyph combined into single entity. Constructor: pGlyph() : default represents the current glyph and current font pGlyph(flGlyph) pGlyph(fgFont, fgGlyph) Methods: Attributes: .parent (fgFont) .fg (fgGlyph) .fl (flGlyph) ... Methods init (self, *argv) repr (self) activeGuides (self) activeLayer (self) addAnchor (self, coordTuple, name, layer =None , isAnchor =True ) Adds named Anchor at given layer. Args: coordTuple (tuple(float,float)): Anchor coordinates X, Y name (str): Anchor name layer (int or str): Layer index or name. If None returns ActiveLayer isAnchor (bool): True creates a true flAnchor, False ? (flPinPoint) Returns: None addComponents (self, componentConfig, layer =None , useAnchors =True , colorize =False ) Adds a components to given glyph layer. Args: componentConfig (list(tuple(glyph_name (str), glyph_transform (QTransform), layer_pointer (str)))): List contianign component configuration. layer (int or str): Layer index or name. If None returns ActiveLayer useAnchors (bool): Compose using anchors colorize (bool): Flag new glyphs Returns: list(flShapes): List of components added addGuideline (self, coordTuple, layer =None , angle =0 , name ='' , tag ='' , color ='darkMagenta' , style ='gsGlyphGuideline' ) Adds named Guideline at given layer Args: coordTuple (tuple(float,float) or tuple(float,float,float,float)): Guideline coordinates X, Y and given angle or two node reference x1,y1 and x2,y2 name (str): Anchor name angle (float): Incline of the guideline layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None addLayer (self, layer, toBack =False ) Adds a layer to glyph. Args: layer (flLayer or fgLayer) toBack (bool): Send layer to back Returns: None addShape (self, shape, layer =None , clone =False ) Add a new shape at given layer. Args: shape (flShape): Shape to be added Returns: flShape addShapeContainer (self, shapeList, layer =None , remove =True ) Add a new shape container* at given layer. A flShape containing all of the shapes given that could be transformed to Shape-group or shape-filter. Args: shapeList list(flShape): List if Shapes to be grouped. Returns: flShape anchors (self, layer =None ) Return list of anchors (list[flAnchor]) at given layer (int or str) blendShapes (self, shapeA, shapeB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) Blend two shapes at given times (anisotropic support). Args: shapeA (flShape), shapeB (flShape): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: Native (interpolation engine dependent) or flShape (default) clearAnchors (self, layer =None ) Remove all anchors at given layer (int or str) components (self, layer =None , extend =None ) Return all glyph components besides glyph. containers (self, layer =None , extend =None ) Return all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] contours (self, layer =None , deep =True , extend =None ) Return all contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flContours] copyLayer (self, srcLayerName, dstLayerName, options ={'adv': True, 'anc': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True} , addLayer =False , cleanDST =True , toBack =True ) Copies a layer within the glyph. Args: srcLayerName, dstLayerName (string): Source and destination layer names options (dict): Copy Options as follows {'out': Outline, 'gui': Guidelines, 'anc': Anchors, 'lsb': LSB, 'adv': Advance, 'rsb': RSB, 'lnk': Linked metrics, 'ref': References}, addLayer=False): addLayer (bool): Create a new layer cleanDST (bool): Clean destination layer toBack (bool): Add layer to back of the layer stack Returns: flLayer decompose (self, layer =None ) Decompose all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None dereference (self, layer =None ) Remove all shape references but leave components. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] draw (self, pen, layer =None ) Utilizes the Pen protocol drawPoints (self, pen, layer =None ) Utilizes the PointPen protocol duplicateLayer (self, layer =None , newLayerName ='New Layer' , references =False ) Duplicates a layer with new name and adds it to glyph's layers. Args: layer (int or str): Layer index or name. If None returns ActiveLayer toBack(bool): send to back Returns: flLayer elements (self, layer =None , extend =None ) Return all glyph elements in glyph fg_activeLayer (self) fg_contours (self, layer =None ) Return all FontGate contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgContours] fg_hasLayer (self, layerName) fg_layer (self, layer =None ) Returns FontGate layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: fgLayer fg_layers (self, asDict =False ) Return all FotnGate layers fg_nodes (self, layer =None ) Return all FontGate nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgNodes] fg_shapes (self, layer =None ) Return all FontGate shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgShapes] findAnchor (self, anchorName, layer =None ) Find anchor by name/tag findAnchorCoords (self, anchorName, layer =None ) Find anchor coordinates by name/tag findNode (self, nodeName, layer =None ) Find node by name/tag findNodeCoords (self, nodeName, layer =None ) Find node coordinates by name/tag findShape (self, shapeName, layer =None ) Finds shape by name on given layer Args: shapeName (str): Shape name layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flShape or None fontMetricsInfo (self, layer =None ) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics ( object ) getAdvance (self, layer =None ) Get the Advance Width at given layer (int or str) getBounds (self, layer =None ) Get Glyph's Boundig Box at given layer (int or str). Returns QRectF. getBuilders (self, layer =None , store =False ) getCompositionDict (self, layer =None ) Return composition dict of a glyph. Elements! getCompositionNames (self, layer =None ) Return name of glyph and the parts it is made of. getElementNames (self, layer =None ) Return names of elements references used in glyph. getLSB (self, layer =None ) Get the Left Side-bearing at given layer (int or str) getRSB (self, layer =None ) Get the Right Side-bearing at given layer (int or str) getSBeq (self, layer =None ) GET LSB, RSB metric equations on given layer getSegment (self, cID, nID, layer =None ) Returns contour segment of the node specified at given layer Args: cID (int): Contour index nID (int): Node of insertion index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: CurveEx getTags (self) # - Tags ----------------------------------------------- guidelines (self, layer =None ) Return list of guidelines (list[flGuideline]) at given layer (int or str) hasLayer (self, layerName) insertNodeAt (self, cID, nID_time, layer =None ) Inserts node in contour at specified layer Arg: cID (int): Contour Index nID_time (float): Node index + float time layer (int or str): Layer index or name. If None returns ActiveLayer !NOTE: FL6 treats contour insertions (as well as nodes) as float times along contour, so inserting a node at .5 t between nodes with indexes 3 and 4 will be 3 (index) + 0.5 (time) = 3.5 insertNodesAt (self, cID, nID, nodeList, layer =None ) Inserts a list of nodes to specified contour, starting at given index all on layer specified. Args: cID (int): Contour index nID (int): Node of insertion index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None isCompatible (self, strong =False ) Test if glyph is ready for interpolation - all master layers are compatible. isMixedReference (self) Test if glyph has mixed references - components on some layers and referenced shapes on others italicAngle (self) layer (self, layer =None ) Returns layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flLayer layers (self) Return all layers mLine (self) mapNodes2Times (self, layer =None ) Create map of Nodes at contour times for every contour in given layer Returns: dict{Contour index (int) : dict{Contour Time (int): Node Index (int) }} mapTimes2Nodes (self, layer =None ) Create map of Contour times at node indexes for every contour in given layer Returns: dict{Contour index (int) : dict{Node Index (int) : Contour Time (int) }} mask (self) masks (self) Returns all mask layers. masters (self) Returns all master layers. newAnchor (self, coordTuple, name, anchorType =1 ) Not working nodes (self, layer =None , extend =None , deep =False ) Return all nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer. extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNodes] nodes4segments (self, cID, layer =None ) Returns all contour segments and their corresponding nodes at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: dict{time(int):(CurveEx, list[flNode]} nodesForIndices (self, indices, layer =None , filterOn =False , extend =None , deep =False ) noncomplex (self, layer =None , extend =None ) Return all glyph shapes that are not glyph references or components object (self) removeLayer (self, layer) Removes a layer from glyph. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodeAt (self, cID, nID, layer =None ) Removes a node from contour at layer specified. Args: cID (int): Contour index nID (int): Index of Node to be removed layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodes (self, cID, nodeList, layer =None ) Removes a list of nodes from contour at layer specified. Args: cID (int): Contour index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeShape (self, shape, layer =None , recursive =True ) Remove a new shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name recursive (bool): Returns: None replaceShape (self, old_shape, new_shape, layer =None ) Repalce a shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name Returns: None reportLayerComp (self, strong =False ) Returns a layer compatibility report rotate (self, deg, layer =None ) Rotate outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None scale (self, sx, sy, layer =None ) Scale outline at given layer. Args: sx (float), sy (float): delta (scaling) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None segments (self, cID, layer =None ) Returns all contour segments at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selected (self, filterOn =False , deep =False ) Return all selected nodes indexes at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedAtContours (self, index =True , layer =None , filterOn =False , deep =False ) Return all selected nodes and the contours they rest upon at current layer. Args: index (bool): If True returns only indexes, False returns flContour, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(contourID, nodeID)..()] or list[tuple(flContour, flNode)] selectedAtShapes (self, index =True , filterOn =False , layer =None , deep =False ) Return all selected nodes and the shapes they belong at current layer. Args: index (bool): If True returns only indexes, False returns flShape, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(shapeID, nodeID)..()] or list[tuple(flShape, flNode)] !TODO: Make it working with layers as selectedAtContours (). This is legacy mode so other scripts would work! selectedContours (self, layer =None , allNodesSelected =False ) selectedCoords (self, layer =None , filterOn =False , applyTransform =False ) Return the coordinates of all selected nodes at the current layer or other. Args: layer (int or str): Layer index or name. If None returns ActiveLayer filterOn (bool): Return only on-curve nodes applyTransform (bool) : Gets local shape transformation matrix and applies it to the node coordinates Returns: list[QPointF] selectedNodeIndices (self, filterOn =False , deep =False ) Return all indices of nodes selected at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedNodes (self, layer =None , filterOn =False , extend =None , deep =False ) Return all selected nodes at given layer. Args: filterOn (bool): Return only on-curve nodes extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNode] selectedNodesOnCanvas (self, filterOn =False ) # - Glyph Selection ----------------------------------------------- selectedSegments (self, layer =None ) Returns list of currently selected segments Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selectedShapeIndices (self, select_all =False , deep =False ) Return all indices of nodes selected at current layer. Args: select_all (bool): True all nodes on Shape should be selected. False any node will do. Returns: list[int] selectedShapes (self, layer =None , select_all =False , deep =False , extend =None ) Return all shapes that have a node selected. services (self) Returns all service layers. setADVeq (self, equationStr, layer =None ) Set Advance width metric equation on given layer setAdvance (self, newAdvance, layer =None ) Set the Advance Width (int) at given layer (int or str) setLSB (self, newLSB, layer =None ) Set the Left Side-bearing (int) at given layer (int or str) setLSBeq (self, equationStr, layer =None ) Set LSB metric equation on given layer setMark (self, mark_color, layer =None ) setName (self, glyph_name) setRSB (self, newRSB, layer =None ) Set the Right Side-bearing (int) at given layer (int or str) setRSBeq (self, equationStr, layer =None ) Set RSB metric equation on given layer setTags (self, tagList, append =True ) shapes (self, layer =None , extend =None ) Return all shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] shapes_data (self, layer =None ) Return all flShapeData objects at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapeData] slant (self, deg, layer =None ) Slant outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None tag (self, newTag) translate (self, dx, dy, layer =None ) Translate (shift) outline at given layer. Args: dx (float), dy (float): delta (shift) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None update (self, fl =True , fg =False ) Updates the glyph and sends notification to the editor. Args: fl (bool): Update the flGlyph fg (bool): Update the fgGlyph updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. version (self) # - Basics ----------------------------------------------- Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) id index mark name package tags unicode unicodes pGlyph typerig.proxy.objects.glyph.pGlyph = class pGlyph ( __builtin__.object ) Proxy to flGlyph and fgGlyph combined into single entity. Constructor: pGlyph() : default represents the current glyph and current font pGlyph(flGlyph) pGlyph(fgFont, fgGlyph) Methods: Attributes: .parent (fgFont) .fg (fgGlyph) .fl (flGlyph) ... Methods __init__ (self, *argv) __repr__ (self) activeGuides (self) activeLayer (self) addAnchor (self, coordTuple, name, layer =None , isAnchor =True ) Adds named Anchor at given layer. Args: coordTuple (tuple(float,float)): Anchor coordinates X, Y name (str): Anchor name layer (int or str): Layer index or name. If None returns ActiveLayer isAnchor (bool): True creates a true flAnchor, False ? (flPinPoint) Returns: None addComponents (self, componentConfig, layer =None , useAnchors =True , colorize =False ) Adds a components to given glyph layer. Args: componentConfig (list(tuple(glyph_name (str), glyph_transform (QTransform), layer_pointer (str)))): List contianign component configuration. layer (int or str): Layer index or name. If None returns ActiveLayer useAnchors (bool): Compose using anchors colorize (bool): Flag new glyphs Returns: list(flShapes): List of components added addGuideline (self, coordTuple, layer =None , angle =0 , name ='' , tag ='' , color ='darkMagenta' , style ='gsGlyphGuideline' ) Adds named Guideline at given layer Args: coordTuple (tuple(float,float) or tuple(float,float,float,float)): Guideline coordinates X, Y and given angle or two node reference x1,y1 and x2,y2 name (str): Anchor name angle (float): Incline of the guideline layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None addLayer (self, layer, toBack =False ) Adds a layer to glyph. Args: layer (flLayer or fgLayer) toBack (bool): Send layer to back Returns: None addShape (self, shape, layer =None , clone =False ) Add a new shape at given layer. Args: shape (flShape): Shape to be added Returns: flShape addShapeContainer (self, shapeList, layer =None , remove =True ) Add a new shape container* at given layer. A flShape containing all of the shapes given that could be transformed to Shape-group or shape-filter. Args: shapeList list(flShape): List if Shapes to be grouped. Returns: flShape anchors (self, layer =None ) Return list of anchors (list[flAnchor]) at given layer (int or str) blendShapes (self, shapeA, shapeB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) Blend two shapes at given times (anisotropic support). Args: shapeA (flShape), shapeB (flShape): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: Native (interpolation engine dependent) or flShape (default) clearAnchors (self, layer =None ) Remove all anchors at given layer (int or str) components (self, layer =None , extend =None ) Return all glyph components besides glyph. containers (self, layer =None , extend =None ) Return all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] contours (self, layer =None , deep =True , extend =None ) Return all contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flContours] copyLayer (self, srcLayerName, dstLayerName, options ={'adv': True, 'anc': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True} , addLayer =False , cleanDST =True , toBack =True ) Copies a layer within the glyph. Args: srcLayerName, dstLayerName (string): Source and destination layer names options (dict): Copy Options as follows {'out': Outline, 'gui': Guidelines, 'anc': Anchors, 'lsb': LSB, 'adv': Advance, 'rsb': RSB, 'lnk': Linked metrics, 'ref': References}, addLayer=False): addLayer (bool): Create a new layer cleanDST (bool): Clean destination layer toBack (bool): Add layer to back of the layer stack Returns: flLayer decompose (self, layer =None ) Decompose all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None dereference (self, layer =None ) Remove all shape references but leave components. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] draw (self, pen, layer =None ) Utilizes the Pen protocol drawPoints (self, pen, layer =None ) Utilizes the PointPen protocol duplicateLayer (self, layer =None , newLayerName ='New Layer' , references =False ) Duplicates a layer with new name and adds it to glyph's layers. Args: layer (int or str): Layer index or name. If None returns ActiveLayer toBack(bool): send to back Returns: flLayer elements (self, layer =None , extend =None ) Return all glyph elements in glyph fg_activeLayer (self) fg_contours (self, layer =None ) Return all FontGate contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgContours] fg_hasLayer (self, layerName) fg_layer (self, layer =None ) Returns FontGate layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: fgLayer fg_layers (self, asDict =False ) Return all FotnGate layers fg_nodes (self, layer =None ) Return all FontGate nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgNodes] fg_shapes (self, layer =None ) Return all FontGate shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgShapes] findAnchor (self, anchorName, layer =None ) Find anchor by name/tag findAnchorCoords (self, anchorName, layer =None ) Find anchor coordinates by name/tag findNode (self, nodeName, layer =None ) Find node by name/tag findNodeCoords (self, nodeName, layer =None ) Find node coordinates by name/tag findShape (self, shapeName, layer =None ) Finds shape by name on given layer Args: shapeName (str): Shape name layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flShape or None fontMetricsInfo (self, layer =None ) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object) getAdvance (self, layer =None ) Get the Advance Width at given layer (int or str) getBounds (self, layer =None ) Get Glyph's Boundig Box at given layer (int or str). Returns QRectF. getBuilders (self, layer =None , store =False ) getCompositionDict (self, layer =None ) Return composition dict of a glyph. Elements! getCompositionNames (self, layer =None ) Return name of glyph and the parts it is made of. getElementNames (self, layer =None ) Return names of elements references used in glyph. getLSB (self, layer =None ) Get the Left Side-bearing at given layer (int or str) getRSB (self, layer =None ) Get the Right Side-bearing at given layer (int or str) getSBeq (self, layer =None ) GET LSB, RSB metric equations on given layer getSegment (self, cID, nID, layer =None ) Returns contour segment of the node specified at given layer Args: cID (int): Contour index nID (int): Node of insertion index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: CurveEx getTags (self) # - Tags ----------------------------------------------- guidelines (self, layer =None ) Return list of guidelines (list[flGuideline]) at given layer (int or str) hasLayer (self, layerName) insertNodeAt (self, cID, nID_time, layer =None ) Inserts node in contour at specified layer Arg: cID (int): Contour Index nID_time (float): Node index + float time layer (int or str): Layer index or name. If None returns ActiveLayer !NOTE: FL6 treats contour insertions (as well as nodes) as float times along contour, so inserting a node at .5 t between nodes with indexes 3 and 4 will be 3 (index) + 0.5 (time) = 3.5 insertNodesAt (self, cID, nID, nodeList, layer =None ) Inserts a list of nodes to specified contour, starting at given index all on layer specified. Args: cID (int): Contour index nID (int): Node of insertion index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None isCompatible (self, strong =False ) Test if glyph is ready for interpolation - all master layers are compatible. isMixedReference (self) Test if glyph has mixed references - components on some layers and referenced shapes on others italicAngle (self) layer (self, layer =None ) Returns layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flLayer layers (self) Return all layers mLine (self) mapNodes2Times (self, layer =None ) Create map of Nodes at contour times for every contour in given layer Returns: dict{Contour index (int) : dict{Contour Time (int): Node Index (int) }} mapTimes2Nodes (self, layer =None ) Create map of Contour times at node indexes for every contour in given layer Returns: dict{Contour index (int) : dict{Node Index (int) : Contour Time (int) }} mask (self) masks (self) Returns all mask layers. masters (self) Returns all master layers. newAnchor (self, coordTuple, name, anchorType =1 ) Not working nodes (self, layer =None , extend =None , deep =False ) Return all nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer. extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNodes] nodes4segments (self, cID, layer =None ) Returns all contour segments and their corresponding nodes at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: dict{time(int):(CurveEx, list[flNode]} nodesForIndices (self, indices, layer =None , filterOn =False , extend =None , deep =False ) noncomplex (self, layer =None , extend =None ) Return all glyph shapes that are not glyph references or components object (self) removeLayer (self, layer) Removes a layer from glyph. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodeAt (self, cID, nID, layer =None ) Removes a node from contour at layer specified. Args: cID (int): Contour index nID (int): Index of Node to be removed layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodes (self, cID, nodeList, layer =None ) Removes a list of nodes from contour at layer specified. Args: cID (int): Contour index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeShape (self, shape, layer =None , recursive =True ) Remove a new shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name recursive (bool): Returns: None replaceShape (self, old_shape, new_shape, layer =None ) Repalce a shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name Returns: None reportLayerComp (self, strong =False ) Returns a layer compatibility report rotate (self, deg, layer =None ) Rotate outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None scale (self, sx, sy, layer =None ) Scale outline at given layer. Args: sx (float), sy (float): delta (scaling) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None segments (self, cID, layer =None ) Returns all contour segments at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selected (self, filterOn =False , deep =False ) Return all selected nodes indexes at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedAtContours (self, index =True , layer =None , filterOn =False , deep =False ) Return all selected nodes and the contours they rest upon at current layer. Args: index (bool): If True returns only indexes, False returns flContour, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(contourID, nodeID)..()] or list[tuple(flContour, flNode)] selectedAtShapes (self, index =True , filterOn =False , layer =None , deep =False ) Return all selected nodes and the shapes they belong at current layer. Args: index (bool): If True returns only indexes, False returns flShape, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(shapeID, nodeID)..()] or list[tuple(flShape, flNode)] !TODO: Make it working with layers as selectedAtContours (). This is legacy mode so other scripts would work! selectedContours (self, layer =None , allNodesSelected =False ) selectedCoords (self, layer =None , filterOn =False , applyTransform =False ) Return the coordinates of all selected nodes at the current layer or other. Args: layer (int or str): Layer index or name. If None returns ActiveLayer filterOn (bool): Return only on-curve nodes applyTransform (bool) : Gets local shape transformation matrix and applies it to the node coordinates Returns: list[QPointF] selectedNodeIndices (self, filterOn =False , deep =False ) Return all indices of nodes selected at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedNodes (self, layer =None , filterOn =False , extend =None , deep =False ) Return all selected nodes at given layer. Args: filterOn (bool): Return only on-curve nodes extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNode] selectedNodesOnCanvas (self, filterOn =False ) # - Glyph Selection ----------------------------------------------- selectedSegments (self, layer =None ) Returns list of currently selected segments Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selectedShapeIndices (self, select_all =False , deep =False ) Return all indices of nodes selected at current layer. Args: select_all (bool): True all nodes on Shape should be selected. False any node will do. Returns: list[int] selectedShapes (self, layer =None , select_all =False , deep =False , extend =None ) Return all shapes that have a node selected. services (self) Returns all service layers. setADVeq (self, equationStr, layer =None ) Set Advance width metric equation on given layer setAdvance (self, newAdvance, layer =None ) Set the Advance Width (int) at given layer (int or str) setLSB (self, newLSB, layer =None ) Set the Left Side-bearing (int) at given layer (int or str) setLSBeq (self, equationStr, layer =None ) Set LSB metric equation on given layer setMark (self, mark_color, layer =None ) setName (self, glyph_name) setRSB (self, newRSB, layer =None ) Set the Right Side-bearing (int) at given layer (int or str) setRSBeq (self, equationStr, layer =None ) Set RSB metric equation on given layer setTags (self, tagList, append =True ) shapes (self, layer =None , extend =None ) Return all shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] shapes_data (self, layer =None ) Return all flShapeData objects at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapeData] slant (self, deg, layer =None ) Slant outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None tag (self, newTag) translate (self, dx, dy, layer =None ) Translate (shift) outline at given layer. Args: dx (float), dy (float): delta (shift) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None update (self, fl =True , fg =False ) Updates the glyph and sends notification to the editor. Args: fl (bool): Update the flGlyph fg (bool): Update the fgGlyph updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. version (self) # - Basics ----------------------------------------------- Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) id index mark name package tags unicode unicodes nodes typerig.proxy.objects.glyph.pGlyph.nodes = nodes (self, layer =None , extend =None , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer. extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNodes] fg_nodes typerig.proxy.objects.glyph.pGlyph.fg_nodes = fg_nodes (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FontGate nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgNodes] contours typerig.proxy.objects.glyph.pGlyph.contours = contours (self, layer =None , deep =True , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flContours] fg_contours typerig.proxy.objects.glyph.pGlyph.fg_contours = fg_contours (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FontGate contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgContours] layers typerig.proxy.objects.glyph.pGlyph.layers = layers (self) unbound typerig.proxy.objects.glyph.pGlyph method Return all layers fg_layers typerig.proxy.objects.glyph.pGlyph.fg_layers = fg_layers (self, asDict =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FotnGate layers layer typerig.proxy.objects.glyph.pGlyph.layer = layer (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flLayer fg_layer typerig.proxy.objects.glyph.pGlyph.fg_layer = fg_layer (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns FontGate layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: fgLayer shapes typerig.proxy.objects.glyph.pGlyph.shapes = shapes (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] getElementNames typerig.proxy.objects.glyph.pGlyph.getElementNames = getElementNames (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return names of elements references used in glyph. dereference typerig.proxy.objects.glyph.pGlyph.dereference = dereference (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Remove all shape references but leave components. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] containers typerig.proxy.objects.glyph.pGlyph.containers = containers (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] decompose typerig.proxy.objects.glyph.pGlyph.decompose = decompose (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Decompose all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None addShape typerig.proxy.objects.glyph.pGlyph.addShape = addShape (self, shape, layer =None , clone =False ) unbound typerig.proxy.objects.glyph.pGlyph method Add a new shape at given layer. Args: shape (flShape): Shape to be added Returns: flShape replaceShape typerig.proxy.objects.glyph.pGlyph.replaceShape = replaceShape (self, old_shape, new_shape, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Repalce a shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name Returns: None removeShape typerig.proxy.objects.glyph.pGlyph.removeShape = removeShape (self, shape, layer =None , recursive =True ) unbound typerig.proxy.objects.glyph.pGlyph method Remove a new shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name recursive (bool): Returns: None addShapeContainer typerig.proxy.objects.glyph.pGlyph.addShapeContainer = addShapeContainer (self, shapeList, layer =None , remove =True ) unbound typerig.proxy.objects.glyph.pGlyph method Add a new shape container* at given layer. A flShape containing all of the shapes given that could be transformed to Shape-group or shape-filter. Args: shapeList list(flShape): List if Shapes to be grouped. Returns: flShape findShape typerig.proxy.objects.glyph.pGlyph.findShape = findShape (self, shapeName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Finds shape by name on given layer Args: shapeName (str): Shape name layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flShape or None shapes_data typerig.proxy.objects.glyph.pGlyph.shapes_data = shapes_data (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all flShapeData objects at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapeData] fg_shapes typerig.proxy.objects.glyph.pGlyph.fg_shapes = fg_shapes (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FontGate shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgShapes] elements typerig.proxy.objects.glyph.pGlyph.elements = elements (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all glyph elements in glyph noncomplex typerig.proxy.objects.glyph.pGlyph.noncomplex = noncomplex (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all glyph shapes that are not glyph references or components components typerig.proxy.objects.glyph.pGlyph.components = components (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all glyph components besides glyph. getCompositionNames typerig.proxy.objects.glyph.pGlyph.getCompositionNames = getCompositionNames (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return name of glyph and the parts it is made of. getCompositionDict typerig.proxy.objects.glyph.pGlyph.getCompositionDict = getCompositionDict (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return composition dict of a glyph. Elements! addComponents typerig.proxy.objects.glyph.pGlyph.addComponents = addComponents (self, componentConfig, layer =None , useAnchors =True , colorize =False ) unbound typerig.proxy.objects.glyph.pGlyph method Adds a components to given glyph layer. Args: componentConfig (list(tuple(glyph_name (str), glyph_transform (QTransform), layer_pointer (str)))): List contianign component configuration. layer (int or str): Layer index or name. If None returns ActiveLayer useAnchors (bool): Compose using anchors colorize (bool): Flag new glyphs Returns: list(flShapes): List of components added masters typerig.proxy.objects.glyph.pGlyph.masters = masters (self) unbound typerig.proxy.objects.glyph.pGlyph method Returns all master layers. masks typerig.proxy.objects.glyph.pGlyph.masks = masks (self) unbound typerig.proxy.objects.glyph.pGlyph method Returns all mask layers. services typerig.proxy.objects.glyph.pGlyph.services = services (self) unbound typerig.proxy.objects.glyph.pGlyph method Returns all service layers. addLayer typerig.proxy.objects.glyph.pGlyph.addLayer = addLayer (self, layer, toBack =False ) unbound typerig.proxy.objects.glyph.pGlyph method Adds a layer to glyph. Args: layer (flLayer or fgLayer) toBack (bool): Send layer to back Returns: None removeLayer typerig.proxy.objects.glyph.pGlyph.removeLayer = removeLayer (self, layer) unbound typerig.proxy.objects.glyph.pGlyph method Removes a layer from glyph. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None duplicateLayer typerig.proxy.objects.glyph.pGlyph.duplicateLayer = duplicateLayer (self, layer =None , newLayerName ='New Layer' , references =False ) unbound typerig.proxy.objects.glyph.pGlyph method Duplicates a layer with new name and adds it to glyph's layers. Args: layer (int or str): Layer index or name. If None returns ActiveLayer toBack(bool): send to back Returns: flLayer copyLayer typerig.proxy.objects.glyph.pGlyph.copyLayer = copyLayer (self, srcLayerName, dstLayerName, options ={'adv': True, 'anc': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True} , addLayer =False , cleanDST =True , toBack =True ) unbound typerig.proxy.objects.glyph.pGlyph method Copies a layer within the glyph. Args: srcLayerName, dstLayerName (string): Source and destination layer names options (dict): Copy Options as follows {'out': Outline, 'gui': Guidelines, 'anc': Anchors, 'lsb': LSB, 'adv': Advance, 'rsb': RSB, 'lnk': Linked metrics, 'ref': References}, addLayer=False): addLayer (bool): Create a new layer cleanDST (bool): Clean destination layer toBack (bool): Add layer to back of the layer stack Returns: flLayer isCompatible typerig.proxy.objects.glyph.pGlyph.isCompatible = isCompatible (self, strong =False ) unbound typerig.proxy.objects.glyph.pGlyph method Test if glyph is ready for interpolation - all master layers are compatible. isMixedReference typerig.proxy.objects.glyph.pGlyph.isMixedReference = isMixedReference (self) unbound typerig.proxy.objects.glyph.pGlyph method Test if glyph has mixed references - components on some layers and referenced shapes on others reportLayerComp typerig.proxy.objects.glyph.pGlyph.reportLayerComp = reportLayerComp (self, strong =False ) unbound typerig.proxy.objects.glyph.pGlyph method Returns a layer compatibility report update typerig.proxy.objects.glyph.pGlyph.update = update (self, fl =True , fg =False ) unbound typerig.proxy.objects.glyph.pGlyph method Updates the glyph and sends notification to the editor. Args: fl (bool): Update the flGlyph fg (bool): Update the fgGlyph updateObject typerig.proxy.objects.glyph.pGlyph.updateObject = updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) unbound typerig.proxy.objects.glyph.pGlyph method Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. selectedNodeIndices typerig.proxy.objects.glyph.pGlyph.selectedNodeIndices = selectedNodeIndices (self, filterOn =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all indices of nodes selected at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selected typerig.proxy.objects.glyph.pGlyph.selected = selected (self, filterOn =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes indexes at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedNodes typerig.proxy.objects.glyph.pGlyph.selectedNodes = selectedNodes (self, layer =None , filterOn =False , extend =None , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes at given layer. Args: filterOn (bool): Return only on-curve nodes extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNode] selectedAtContours typerig.proxy.objects.glyph.pGlyph.selectedAtContours = selectedAtContours (self, index =True , layer =None , filterOn =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes and the contours they rest upon at current layer. Args: index (bool): If True returns only indexes, False returns flContour, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(contourID, nodeID)..()] or list[tuple(flContour, flNode)] selectedAtShapes typerig.proxy.objects.glyph.pGlyph.selectedAtShapes = selectedAtShapes (self, index =True , filterOn =False , layer =None , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes and the shapes they belong at current layer. Args: index (bool): If True returns only indexes, False returns flShape, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(shapeID, nodeID)..()] or list[tuple(flShape, flNode)] !TODO: Make it working with layers as selectedAtContours(). This is legacy mode so other scripts would work! selectedShapeIndices typerig.proxy.objects.glyph.pGlyph.selectedShapeIndices = selectedShapeIndices (self, select_all =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all indices of nodes selected at current layer. Args: select_all (bool): True all nodes on Shape should be selected. False any node will do. Returns: list[int] selectedShapes typerig.proxy.objects.glyph.pGlyph.selectedShapes = selectedShapes (self, layer =None , select_all =False , deep =False , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all shapes that have a node selected. selectedCoords typerig.proxy.objects.glyph.pGlyph.selectedCoords = selectedCoords (self, layer =None , filterOn =False , applyTransform =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return the coordinates of all selected nodes at the current layer or other. Args: layer (int or str): Layer index or name. If None returns ActiveLayer filterOn (bool): Return only on-curve nodes applyTransform (bool) : Gets local shape transformation matrix and applies it to the node coordinates Returns: list[QPointF] selectedSegments typerig.proxy.objects.glyph.pGlyph.selectedSegments = selectedSegments (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns list of currently selected segments Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] findNode typerig.proxy.objects.glyph.pGlyph.findNode = findNode (self, nodeName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find node by name/tag findNodeCoords typerig.proxy.objects.glyph.pGlyph.findNodeCoords = findNodeCoords (self, nodeName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find node coordinates by name/tag mapNodes2Times typerig.proxy.objects.glyph.pGlyph.mapNodes2Times = mapNodes2Times (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Create map of Nodes at contour times for every contour in given layer Returns: dict{Contour index (int) : dict{Contour Time (int): Node Index (int) }} mapTimes2Nodes typerig.proxy.objects.glyph.pGlyph.mapTimes2Nodes = mapTimes2Nodes (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Create map of Contour times at node indexes for every contour in given layer Returns: dict{Contour index (int) : dict{Node Index (int) : Contour Time (int) }} getSegment typerig.proxy.objects.glyph.pGlyph.getSegment = getSegment (self, cID, nID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns contour segment of the node specified at given layer Args: cID (int): Contour index nID (int): Node of insertion index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: CurveEx segments typerig.proxy.objects.glyph.pGlyph.segments = segments (self, cID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns all contour segments at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] nodes4segments typerig.proxy.objects.glyph.pGlyph.nodes4segments = nodes4segments (self, cID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns all contour segments and their corresponding nodes at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: dict{time(int):(CurveEx, list[flNode]} insertNodesAt typerig.proxy.objects.glyph.pGlyph.insertNodesAt = insertNodesAt (self, cID, nID, nodeList, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Inserts a list of nodes to specified contour, starting at given index all on layer specified. Args: cID (int): Contour index nID (int): Node of insertion index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodes typerig.proxy.objects.glyph.pGlyph.removeNodes = removeNodes (self, cID, nodeList, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Removes a list of nodes from contour at layer specified. Args: cID (int): Contour index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None insertNodeAt typerig.proxy.objects.glyph.pGlyph.insertNodeAt = insertNodeAt (self, cID, nID_time, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Inserts node in contour at specified layer Arg: cID (int): Contour Index nID_time (float): Node index + float time layer (int or str): Layer index or name. If None returns ActiveLayer !NOTE: FL6 treats contour insertions (as well as nodes) as float times along contour, so inserting a node at .5 t between nodes with indexes 3 and 4 will be 3 (index) + 0.5 (time) = 3.5 removeNodeAt typerig.proxy.objects.glyph.pGlyph.removeNodeAt = removeNodeAt (self, cID, nID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Removes a node from contour at layer specified. Args: cID (int): Contour index nID (int): Index of Node to be removed layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None translate typerig.proxy.objects.glyph.pGlyph.translate = translate (self, dx, dy, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Translate (shift) outline at given layer. Args: dx (float), dy (float): delta (shift) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None scale typerig.proxy.objects.glyph.pGlyph.scale = scale (self, sx, sy, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Scale outline at given layer. Args: sx (float), sy (float): delta (scaling) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None slant typerig.proxy.objects.glyph.pGlyph.slant = slant (self, deg, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Slant outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None rotate typerig.proxy.objects.glyph.pGlyph.rotate = rotate (self, deg, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Rotate outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None blendShapes typerig.proxy.objects.glyph.pGlyph.blendShapes = blendShapes (self, shapeA, shapeB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) unbound typerig.proxy.objects.glyph.pGlyph method Blend two shapes at given times (anisotropic support). Args: shapeA (flShape), shapeB (flShape): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: Native (interpolation engine dependent) or flShape (default) getLSB typerig.proxy.objects.glyph.pGlyph.getLSB = getLSB (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get the Left Side-bearing at given layer (int or str) getAdvance typerig.proxy.objects.glyph.pGlyph.getAdvance = getAdvance (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get the Advance Width at given layer (int or str) getRSB typerig.proxy.objects.glyph.pGlyph.getRSB = getRSB (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get the Right Side-bearing at given layer (int or str) getBounds typerig.proxy.objects.glyph.pGlyph.getBounds = getBounds (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get Glyph's Boundig Box at given layer (int or str). Returns QRectF. setLSB typerig.proxy.objects.glyph.pGlyph.setLSB = setLSB (self, newLSB, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set the Left Side-bearing (int) at given layer (int or str) setRSB typerig.proxy.objects.glyph.pGlyph.setRSB = setRSB (self, newRSB, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set the Right Side-bearing (int) at given layer (int or str) setAdvance typerig.proxy.objects.glyph.pGlyph.setAdvance = setAdvance (self, newAdvance, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set the Advance Width (int) at given layer (int or str) setLSBeq typerig.proxy.objects.glyph.pGlyph.setLSBeq = setLSBeq (self, equationStr, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set LSB metric equation on given layer setRSBeq typerig.proxy.objects.glyph.pGlyph.setRSBeq = setRSBeq (self, equationStr, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set RSB metric equation on given layer setADVeq typerig.proxy.objects.glyph.pGlyph.setADVeq = setADVeq (self, equationStr, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set Advance width metric equation on given layer getSBeq typerig.proxy.objects.glyph.pGlyph.getSBeq = getSBeq (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method GET LSB, RSB metric equations on given layer fontMetricsInfo typerig.proxy.objects.glyph.pGlyph.fontMetricsInfo = fontMetricsInfo (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object) anchors typerig.proxy.objects.glyph.pGlyph.anchors = anchors (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return list of anchors (list[flAnchor]) at given layer (int or str) addAnchor typerig.proxy.objects.glyph.pGlyph.addAnchor = addAnchor (self, coordTuple, name, layer =None , isAnchor =True ) unbound typerig.proxy.objects.glyph.pGlyph method Adds named Anchor at given layer. Args: coordTuple (tuple(float,float)): Anchor coordinates X, Y name (str): Anchor name layer (int or str): Layer index or name. If None returns ActiveLayer isAnchor (bool): True creates a true flAnchor, False ? (flPinPoint) Returns: None newAnchor typerig.proxy.objects.glyph.pGlyph.newAnchor = newAnchor (self, coordTuple, name, anchorType =1 ) unbound typerig.proxy.objects.glyph.pGlyph method Not working clearAnchors typerig.proxy.objects.glyph.pGlyph.clearAnchors = clearAnchors (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Remove all anchors at given layer (int or str) findAnchor typerig.proxy.objects.glyph.pGlyph.findAnchor = findAnchor (self, anchorName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find anchor by name/tag findAnchorCoords typerig.proxy.objects.glyph.pGlyph.findAnchorCoords = findAnchorCoords (self, anchorName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find anchor coordinates by name/tag guidelines typerig.proxy.objects.glyph.pGlyph.guidelines = guidelines (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return list of guidelines (list[flGuideline]) at given layer (int or str) addGuideline typerig.proxy.objects.glyph.pGlyph.addGuideline = addGuideline (self, coordTuple, layer =None , angle =0 , name ='' , tag ='' , color ='darkMagenta' , style ='gsGlyphGuideline' ) unbound typerig.proxy.objects.glyph.pGlyph method Adds named Guideline at given layer Args: coordTuple (tuple(float,float) or tuple(float,float,float,float)): Guideline coordinates X, Y and given angle or two node reference x1,y1 and x2,y2 name (str): Anchor name angle (float): Incline of the guideline layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None draw typerig.proxy.objects.glyph.pGlyph.draw = draw (self, pen, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Utilizes the Pen protocol drawPoints typerig.proxy.objects.glyph.pGlyph.drawPoints = drawPoints (self, pen, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Utilizes the PointPen protocol eGlyph typerig.proxy.objects.glyph.eGlyph = class eGlyph ( pGlyph ) Extended representation of the Proxy Glyph, adding some advanced functionality Constructor: pGlyph() - default represents the current glyph and current font pGlyph(fgFont, fgGlyph) Method resolution order: eGlyph pGlyph __builtin__.object Methods bindCompMetrics (self, layer =None , bindIndex =None ) Auto bind metrics to the base composite glyph or to specified shape index blendLayers (self, layerA, layerB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) Blend two layers at given times (anisotropic support). Args: layerA (flLayer), layerB (flLayer): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: flLayer breakContour (self, contourId, nodeId, layer =None , expand =0 ) Split Contour at given node and layer. Extrapolate line endings if needed. Args: contourId (int): Contour Index nodeId (int): Node Index layer (int or str): Layer index or name, works with both expand (float): Will extrapolate the line endings at that given value Returns: flContour copyADVbyName (self, glyphName, layers =None , adjustPercent =100 , adjustUnits =0 ) Copy Advance width from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None copyLSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) Copy LSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None copyMetricsbyName (self, metricTriple =(None, None, None) , layers =None , order =(0, 0, 0) , adjustPercent =(100, 100, 100) , adjustUnits =(0, 0, 0) ) Copy LSB, RSB and Advance width from glyphs specified by Glyph Name. Args: metricTriple tuple(str): Names of source glyphs for (LSB, RSB, ADV) layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order tuple(bool): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. (LSB, RSB, 0) adjustPercent tuple(int): Adjust the copied metric by percent (100 default) - (LSB, RSB, ADV) adjustUnits tuple(int): Adjust the copied metric by units (0 default) - (LSB, RSB, ADV) Return: None copyRSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) Copy RSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None dropAnchor (self, name, layer, coordTuple, alignTuple =(None, None) , tolerance =5 , italic =False ) Drop anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None dropGuide (self, nodes =None , layers =None , name ='*DropGuideline' , tag ='' , color ='darkMagenta' , flip =(1, 1) , style ='gsGlyphGuideline' ) Build guideline trough *any two* given points or the *first two of the current selection*. If *single point* is given will create a vertical guideline trough that point, with guideline inclined according to the font's Italic Angle. if process layers (pLayers) is None guideline will be created in all compatible layers, otherwise the bool control tuple (active_layer (True or False), masters (True or False), masks (True or False), services (True or False)) is used. If all are set to False only the active layer is used. Args: nodes (list(int)): List of node indexes layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. name (str): Name of the guideline to be build color (str): Color of the guideline according to QtCore colors style (str): Style of the guideline according to FontLab 6 Returns: None getAttachmentCenters (self, layer, tolerance =5 , applyTransform =True , getAll =False ) Return X center of lowest, highest Y of [glyph] for [layer] within given [tolerance] Note: Determine diacritic to glyph attachment positions (for anchor placement) getNewBaseCoords (self, layer, adjustTuple, alignTuple, tolerance =5 , italic =False , initPosTuple =(0.0, 0.0) ) Calculate Anchor base position Args: layer (int or str): Layer index or name, works with both coordTuple (int/float, int/float): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int/float): Outline feature auto detection tolerance* initPosTuple (int/float, int/float): Itinital anchor position *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: x, y (int/float) lerpLayerFg (self, l0_Name, l1_Name) moveAnchor (self, name, layer, coordTuple =(0, 0) , alignTuple =(None, None) , tolerance =5 , italic =False ) Move anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None reorder_shapes (self, layer =None , mode =(0, 0) ) Auto reorder shapes on given layer using criteria. Args: layer (int or str): Layer index or name, works with both mode (bool, bool): Mode of shape reordering/sorting by (X, Y) Returns: None setStart (self, layer =None , control =(0, 0) ) splitContour (self, scnPairs =None , layers =None , expand =0 , close =False ) Split Contour at given node and combinations of compatible layers. Extrapolate line endings and close contour if needed. Args: scnPairs (list(tuple)): Shape-contour-node pairs for the selected nodes [(Shape Index, Contour Index, Node Index)..()] layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. expand (float): Will extrapolate the line endings at that given value close (bool): True = Close contour Return: None ungroup_all_shapes (self, layer =None , applyTransform =True ) Ungroup all shapes at given layer. Args: layer (int or str): Layer index or name, works with both applyTransform (bool): Apply transformation at shape. Returns: None Methods from pGlyph __init__ (self, *argv) __repr__ (self) activeGuides (self) activeLayer (self) addAnchor (self, coordTuple, name, layer =None , isAnchor =True ) Adds named Anchor at given layer. Args: coordTuple (tuple(float,float)): Anchor coordinates X, Y name (str): Anchor name layer (int or str): Layer index or name. If None returns ActiveLayer isAnchor (bool): True creates a true flAnchor, False ? (flPinPoint) Returns: None addComponents (self, componentConfig, layer =None , useAnchors =True , colorize =False ) Adds a components to given glyph layer. Args: componentConfig (list(tuple(glyph_name (str), glyph_transform (QTransform), layer_pointer (str)))): List contianign component configuration. layer (int or str): Layer index or name. If None returns ActiveLayer useAnchors (bool): Compose using anchors colorize (bool): Flag new glyphs Returns: list(flShapes): List of components added addGuideline (self, coordTuple, layer =None , angle =0 , name ='' , tag ='' , color ='darkMagenta' , style ='gsGlyphGuideline' ) Adds named Guideline at given layer Args: coordTuple (tuple(float,float) or tuple(float,float,float,float)): Guideline coordinates X, Y and given angle or two node reference x1,y1 and x2,y2 name (str): Anchor name angle (float): Incline of the guideline layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None addLayer (self, layer, toBack =False ) Adds a layer to glyph. Args: layer (flLayer or fgLayer) toBack (bool): Send layer to back Returns: None addShape (self, shape, layer =None , clone =False ) Add a new shape at given layer. Args: shape (flShape): Shape to be added Returns: flShape addShapeContainer (self, shapeList, layer =None , remove =True ) Add a new shape container* at given layer. A flShape containing all of the shapes given that could be transformed to Shape-group or shape-filter. Args: shapeList list(flShape): List if Shapes to be grouped. Returns: flShape anchors (self, layer =None ) Return list of anchors (list[flAnchor]) at given layer (int or str) blendShapes (self, shapeA, shapeB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) Blend two shapes at given times (anisotropic support). Args: shapeA (flShape), shapeB (flShape): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: Native (interpolation engine dependent) or flShape (default) clearAnchors (self, layer =None ) Remove all anchors at given layer (int or str) components (self, layer =None , extend =None ) Return all glyph components besides glyph. containers (self, layer =None , extend =None ) Return all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] contours (self, layer =None , deep =True , extend =None ) Return all contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flContours] copyLayer (self, srcLayerName, dstLayerName, options ={'adv': True, 'anc': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True} , addLayer =False , cleanDST =True , toBack =True ) Copies a layer within the glyph. Args: srcLayerName, dstLayerName (string): Source and destination layer names options (dict): Copy Options as follows {'out': Outline, 'gui': Guidelines, 'anc': Anchors, 'lsb': LSB, 'adv': Advance, 'rsb': RSB, 'lnk': Linked metrics, 'ref': References}, addLayer=False): addLayer (bool): Create a new layer cleanDST (bool): Clean destination layer toBack (bool): Add layer to back of the layer stack Returns: flLayer decompose (self, layer =None ) Decompose all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None dereference (self, layer =None ) Remove all shape references but leave components. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] draw (self, pen, layer =None ) Utilizes the Pen protocol drawPoints (self, pen, layer =None ) Utilizes the PointPen protocol duplicateLayer (self, layer =None , newLayerName ='New Layer' , references =False ) Duplicates a layer with new name and adds it to glyph's layers. Args: layer (int or str): Layer index or name. If None returns ActiveLayer toBack(bool): send to back Returns: flLayer elements (self, layer =None , extend =None ) Return all glyph elements in glyph fg_activeLayer (self) fg_contours (self, layer =None ) Return all FontGate contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgContours] fg_hasLayer (self, layerName) fg_layer (self, layer =None ) Returns FontGate layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: fgLayer fg_layers (self, asDict =False ) Return all FotnGate layers fg_nodes (self, layer =None ) Return all FontGate nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgNodes] fg_shapes (self, layer =None ) Return all FontGate shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgShapes] findAnchor (self, anchorName, layer =None ) Find anchor by name/tag findAnchorCoords (self, anchorName, layer =None ) Find anchor coordinates by name/tag findNode (self, nodeName, layer =None ) Find node by name/tag findNodeCoords (self, nodeName, layer =None ) Find node coordinates by name/tag findShape (self, shapeName, layer =None ) Finds shape by name on given layer Args: shapeName (str): Shape name layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flShape or None fontMetricsInfo (self, layer =None ) Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object) getAdvance (self, layer =None ) Get the Advance Width at given layer (int or str) getBounds (self, layer =None ) Get Glyph's Boundig Box at given layer (int or str). Returns QRectF. getBuilders (self, layer =None , store =False ) getCompositionDict (self, layer =None ) Return composition dict of a glyph. Elements! getCompositionNames (self, layer =None ) Return name of glyph and the parts it is made of. getElementNames (self, layer =None ) Return names of elements references used in glyph. getLSB (self, layer =None ) Get the Left Side-bearing at given layer (int or str) getRSB (self, layer =None ) Get the Right Side-bearing at given layer (int or str) getSBeq (self, layer =None ) GET LSB, RSB metric equations on given layer getSegment (self, cID, nID, layer =None ) Returns contour segment of the node specified at given layer Args: cID (int): Contour index nID (int): Node of insertion index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: CurveEx getTags (self) # - Tags ----------------------------------------------- guidelines (self, layer =None ) Return list of guidelines (list[flGuideline]) at given layer (int or str) hasLayer (self, layerName) insertNodeAt (self, cID, nID_time, layer =None ) Inserts node in contour at specified layer Arg: cID (int): Contour Index nID_time (float): Node index + float time layer (int or str): Layer index or name. If None returns ActiveLayer !NOTE: FL6 treats contour insertions (as well as nodes) as float times along contour, so inserting a node at .5 t between nodes with indexes 3 and 4 will be 3 (index) + 0.5 (time) = 3.5 insertNodesAt (self, cID, nID, nodeList, layer =None ) Inserts a list of nodes to specified contour, starting at given index all on layer specified. Args: cID (int): Contour index nID (int): Node of insertion index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None isCompatible (self, strong =False ) Test if glyph is ready for interpolation - all master layers are compatible. isMixedReference (self) Test if glyph has mixed references - components on some layers and referenced shapes on others italicAngle (self) layer (self, layer =None ) Returns layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flLayer layers (self) Return all layers mLine (self) mapNodes2Times (self, layer =None ) Create map of Nodes at contour times for every contour in given layer Returns: dict{Contour index (int) : dict{Contour Time (int): Node Index (int) }} mapTimes2Nodes (self, layer =None ) Create map of Contour times at node indexes for every contour in given layer Returns: dict{Contour index (int) : dict{Node Index (int) : Contour Time (int) }} mask (self) masks (self) Returns all mask layers. masters (self) Returns all master layers. newAnchor (self, coordTuple, name, anchorType =1 ) Not working nodes (self, layer =None , extend =None , deep =False ) Return all nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer. extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNodes] nodes4segments (self, cID, layer =None ) Returns all contour segments and their corresponding nodes at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: dict{time(int):(CurveEx, list[flNode]} nodesForIndices (self, indices, layer =None , filterOn =False , extend =None , deep =False ) noncomplex (self, layer =None , extend =None ) Return all glyph shapes that are not glyph references or components object (self) removeLayer (self, layer) Removes a layer from glyph. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodeAt (self, cID, nID, layer =None ) Removes a node from contour at layer specified. Args: cID (int): Contour index nID (int): Index of Node to be removed layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeNodes (self, cID, nodeList, layer =None ) Removes a list of nodes from contour at layer specified. Args: cID (int): Contour index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None removeShape (self, shape, layer =None , recursive =True ) Remove a new shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name recursive (bool): Returns: None replaceShape (self, old_shape, new_shape, layer =None ) Repalce a shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name Returns: None reportLayerComp (self, strong =False ) Returns a layer compatibility report rotate (self, deg, layer =None ) Rotate outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None scale (self, sx, sy, layer =None ) Scale outline at given layer. Args: sx (float), sy (float): delta (scaling) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None segments (self, cID, layer =None ) Returns all contour segments at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selected (self, filterOn =False , deep =False ) Return all selected nodes indexes at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedAtContours (self, index =True , layer =None , filterOn =False , deep =False ) Return all selected nodes and the contours they rest upon at current layer. Args: index (bool): If True returns only indexes, False returns flContour, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(contourID, nodeID)..()] or list[tuple(flContour, flNode)] selectedAtShapes (self, index =True , filterOn =False , layer =None , deep =False ) Return all selected nodes and the shapes they belong at current layer. Args: index (bool): If True returns only indexes, False returns flShape, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(shapeID, nodeID)..()] or list[tuple(flShape, flNode)] !TODO: Make it working with layers as selectedAtContours (). This is legacy mode so other scripts would work! selectedContours (self, layer =None , allNodesSelected =False ) selectedCoords (self, layer =None , filterOn =False , applyTransform =False ) Return the coordinates of all selected nodes at the current layer or other. Args: layer (int or str): Layer index or name. If None returns ActiveLayer filterOn (bool): Return only on-curve nodes applyTransform (bool) : Gets local shape transformation matrix and applies it to the node coordinates Returns: list[QPointF] selectedNodeIndices (self, filterOn =False , deep =False ) Return all indices of nodes selected at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int] selectedNodes (self, layer =None , filterOn =False , extend =None , deep =False ) Return all selected nodes at given layer. Args: filterOn (bool): Return only on-curve nodes extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNode] selectedNodesOnCanvas (self, filterOn =False ) # - Glyph Selection ----------------------------------------------- selectedSegments (self, layer =None ) Returns list of currently selected segments Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx] selectedShapeIndices (self, select_all =False , deep =False ) Return all indices of nodes selected at current layer. Args: select_all (bool): True all nodes on Shape should be selected. False any node will do. Returns: list[int] selectedShapes (self, layer =None , select_all =False , deep =False , extend =None ) Return all shapes that have a node selected. services (self) Returns all service layers. setADVeq (self, equationStr, layer =None ) Set Advance width metric equation on given layer setAdvance (self, newAdvance, layer =None ) Set the Advance Width (int) at given layer (int or str) setLSB (self, newLSB, layer =None ) Set the Left Side-bearing (int) at given layer (int or str) setLSBeq (self, equationStr, layer =None ) Set LSB metric equation on given layer setMark (self, mark_color, layer =None ) setName (self, glyph_name) setRSB (self, newRSB, layer =None ) Set the Right Side-bearing (int) at given layer (int or str) setRSBeq (self, equationStr, layer =None ) Set RSB metric equation on given layer setTags (self, tagList, append =True ) shapes (self, layer =None , extend =None ) Return all shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes] shapes_data (self, layer =None ) Return all flShapeData objects at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapeData] slant (self, deg, layer =None ) Slant outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None tag (self, newTag) translate (self, dx, dy, layer =None ) Translate (shift) outline at given layer. Args: dx (float), dy (float): delta (shift) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None update (self, fl =True , fg =False ) Updates the glyph and sends notification to the editor. Args: fl (bool): Update the flGlyph fg (bool): Update the fgGlyph updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list. version (self) # - Basics ----------------------------------------------- Descriptors from pGlyph __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) id index mark name package tags unicode unicodes breakContour typerig.proxy.objects.glyph.eGlyph.breakContour = breakContour (self, contourId, nodeId, layer =None , expand =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Split Contour at given node and layer. Extrapolate line endings if needed. Args: contourId (int): Contour Index nodeId (int): Node Index layer (int or str): Layer index or name, works with both expand (float): Will extrapolate the line endings at that given value Returns: flContour splitContour typerig.proxy.objects.glyph.eGlyph.splitContour = splitContour (self, scnPairs =None , layers =None , expand =0 , close =False ) unbound typerig.proxy.objects.glyph.eGlyph method Split Contour at given node and combinations of compatible layers. Extrapolate line endings and close contour if needed. Args: scnPairs (list(tuple)): Shape-contour-node pairs for the selected nodes [(Shape Index, Contour Index, Node Index)..()] layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. expand (float): Will extrapolate the line endings at that given value close (bool): True = Close contour Return: None dropGuide typerig.proxy.objects.glyph.eGlyph.dropGuide = dropGuide (self, nodes =None , layers =None , name ='*DropGuideline' , tag ='' , color ='darkMagenta' , flip =(1, 1) , style ='gsGlyphGuideline' ) unbound typerig.proxy.objects.glyph.eGlyph method Build guideline trough *any two* given points or the *first two of the current selection*. If *single point* is given will create a vertical guideline trough that point, with guideline inclined according to the font's Italic Angle. if process layers (pLayers) is None guideline will be created in all compatible layers, otherwise the bool control tuple (active_layer (True or False), masters (True or False), masks (True or False), services (True or False)) is used. If all are set to False only the active layer is used. Args: nodes (list(int)): List of node indexes layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. name (str): Name of the guideline to be build color (str): Color of the guideline according to QtCore colors style (str): Style of the guideline according to FontLab 6 Returns: None copyLSBbyName typerig.proxy.objects.glyph.eGlyph.copyLSBbyName = copyLSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Copy LSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None copyRSBbyName typerig.proxy.objects.glyph.eGlyph.copyRSBbyName = copyRSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Copy RSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None copyADVbyName typerig.proxy.objects.glyph.eGlyph.copyADVbyName = copyADVbyName (self, glyphName, layers =None , adjustPercent =100 , adjustUnits =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Copy Advance width from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None copyMetricsbyName typerig.proxy.objects.glyph.eGlyph.copyMetricsbyName = copyMetricsbyName (self, metricTriple =(None, None, None) , layers =None , order =(0, 0, 0) , adjustPercent =(100, 100, 100) , adjustUnits =(0, 0, 0) ) unbound typerig.proxy.objects.glyph.eGlyph method Copy LSB, RSB and Advance width from glyphs specified by Glyph Name. Args: metricTriple tuple(str): Names of source glyphs for (LSB, RSB, ADV) layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order tuple(bool): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. (LSB, RSB, 0) adjustPercent tuple(int): Adjust the copied metric by percent (100 default) - (LSB, RSB, ADV) adjustUnits tuple(int): Adjust the copied metric by units (0 default) - (LSB, RSB, ADV) Return: None bindCompMetrics typerig.proxy.objects.glyph.eGlyph.bindCompMetrics = bindCompMetrics (self, layer =None , bindIndex =None ) unbound typerig.proxy.objects.glyph.eGlyph method Auto bind metrics to the base composite glyph or to specified shape index blendLayers typerig.proxy.objects.glyph.eGlyph.blendLayers = blendLayers (self, layerA, layerB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) unbound typerig.proxy.objects.glyph.eGlyph method Blend two layers at given times (anisotropic support). Args: layerA (flLayer), layerB (flLayer): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: flLayer getAttachmentCenters typerig.proxy.objects.glyph.eGlyph.getAttachmentCenters = getAttachmentCenters (self, layer, tolerance =5 , applyTransform =True , getAll =False ) unbound typerig.proxy.objects.glyph.eGlyph method Return X center of lowest, highest Y of [glyph] for [layer] within given [tolerance] Note: Determine diacritic to glyph attachment positions (for anchor placement) getNewBaseCoords typerig.proxy.objects.glyph.eGlyph.getNewBaseCoords = getNewBaseCoords (self, layer, adjustTuple, alignTuple, tolerance =5 , italic =False , initPosTuple =(0.0, 0.0) ) unbound typerig.proxy.objects.glyph.eGlyph method Calculate Anchor base position Args: layer (int or str): Layer index or name, works with both coordTuple (int/float, int/float): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int/float): Outline feature auto detection tolerance* initPosTuple (int/float, int/float): Itinital anchor position *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: x, y (int/float) dropAnchor typerig.proxy.objects.glyph.eGlyph.dropAnchor = dropAnchor (self, name, layer, coordTuple, alignTuple =(None, None) , tolerance =5 , italic =False ) unbound typerig.proxy.objects.glyph.eGlyph method Drop anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None moveAnchor typerig.proxy.objects.glyph.eGlyph.moveAnchor = moveAnchor (self, name, layer, coordTuple =(0, 0) , alignTuple =(None, None) , tolerance =5 , italic =False ) unbound typerig.proxy.objects.glyph.eGlyph method Move anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None reorder_shapes typerig.proxy.objects.glyph.eGlyph.reorder_shapes = reorder_shapes (self, layer =None , mode =(0, 0) ) unbound typerig.proxy.objects.glyph.eGlyph method Auto reorder shapes on given layer using criteria. Args: layer (int or str): Layer index or name, works with both mode (bool, bool): Mode of shape reordering/sorting by (X, Y) Returns: None ungroup_all_shapes typerig.proxy.objects.glyph.eGlyph.ungroup_all_shapes = ungroup_all_shapes (self, layer =None , applyTransform =True ) unbound typerig.proxy.objects.glyph.eGlyph method Ungroup all shapes at given layer. Args: layer (int or str): Layer index or name, works with both applyTransform (bool): Apply transformation at shape. Returns: None","title":"proxy.objects.glyph"},{"location":"typerig.proxy.objects.glyph.html#typerigproxyobjectsglyph","text":"","title":"typerig.proxy.objects.glyph"},{"location":"typerig.proxy.objects.glyph.html#pglyph","text":"","title":"pGlyph"},{"location":"typerig.proxy.objects.glyph.html#nodes","text":"typerig.proxy.objects.glyph.pGlyph.nodes = nodes (self, layer =None , extend =None , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer. extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNodes]","title":"nodes"},{"location":"typerig.proxy.objects.glyph.html#fg_nodes","text":"typerig.proxy.objects.glyph.pGlyph.fg_nodes = fg_nodes (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FontGate nodes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgNodes]","title":"fg_nodes"},{"location":"typerig.proxy.objects.glyph.html#contours","text":"typerig.proxy.objects.glyph.pGlyph.contours = contours (self, layer =None , deep =True , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flContours]","title":"contours"},{"location":"typerig.proxy.objects.glyph.html#fg_contours","text":"typerig.proxy.objects.glyph.pGlyph.fg_contours = fg_contours (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FontGate contours at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgContours]","title":"fg_contours"},{"location":"typerig.proxy.objects.glyph.html#layers","text":"typerig.proxy.objects.glyph.pGlyph.layers = layers (self) unbound typerig.proxy.objects.glyph.pGlyph method Return all layers","title":"layers"},{"location":"typerig.proxy.objects.glyph.html#fg_layers","text":"typerig.proxy.objects.glyph.pGlyph.fg_layers = fg_layers (self, asDict =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FotnGate layers","title":"fg_layers"},{"location":"typerig.proxy.objects.glyph.html#layer","text":"typerig.proxy.objects.glyph.pGlyph.layer = layer (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flLayer","title":"layer"},{"location":"typerig.proxy.objects.glyph.html#fg_layer","text":"typerig.proxy.objects.glyph.pGlyph.fg_layer = fg_layer (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns FontGate layer no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: fgLayer","title":"fg_layer"},{"location":"typerig.proxy.objects.glyph.html#shapes","text":"typerig.proxy.objects.glyph.pGlyph.shapes = shapes (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes]","title":"shapes"},{"location":"typerig.proxy.objects.glyph.html#getelementnames","text":"typerig.proxy.objects.glyph.pGlyph.getElementNames = getElementNames (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return names of elements references used in glyph.","title":"getElementNames"},{"location":"typerig.proxy.objects.glyph.html#dereference","text":"typerig.proxy.objects.glyph.pGlyph.dereference = dereference (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Remove all shape references but leave components. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes]","title":"dereference"},{"location":"typerig.proxy.objects.glyph.html#containers","text":"typerig.proxy.objects.glyph.pGlyph.containers = containers (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapes]","title":"containers"},{"location":"typerig.proxy.objects.glyph.html#decompose","text":"typerig.proxy.objects.glyph.pGlyph.decompose = decompose (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Decompose all complex shapes that contain other shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"decompose"},{"location":"typerig.proxy.objects.glyph.html#addshape","text":"typerig.proxy.objects.glyph.pGlyph.addShape = addShape (self, shape, layer =None , clone =False ) unbound typerig.proxy.objects.glyph.pGlyph method Add a new shape at given layer. Args: shape (flShape): Shape to be added Returns: flShape","title":"addShape"},{"location":"typerig.proxy.objects.glyph.html#replaceshape","text":"typerig.proxy.objects.glyph.pGlyph.replaceShape = replaceShape (self, old_shape, new_shape, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Repalce a shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name Returns: None","title":"replaceShape"},{"location":"typerig.proxy.objects.glyph.html#removeshape","text":"typerig.proxy.objects.glyph.pGlyph.removeShape = removeShape (self, shape, layer =None , recursive =True ) unbound typerig.proxy.objects.glyph.pGlyph method Remove a new shape at given layer. Args: old_shape, new_shape (flShape): Shapes layer (str): Layer name recursive (bool): Returns: None","title":"removeShape"},{"location":"typerig.proxy.objects.glyph.html#addshapecontainer","text":"typerig.proxy.objects.glyph.pGlyph.addShapeContainer = addShapeContainer (self, shapeList, layer =None , remove =True ) unbound typerig.proxy.objects.glyph.pGlyph method Add a new shape container* at given layer. A flShape containing all of the shapes given that could be transformed to Shape-group or shape-filter. Args: shapeList list(flShape): List if Shapes to be grouped. Returns: flShape","title":"addShapeContainer"},{"location":"typerig.proxy.objects.glyph.html#findshape","text":"typerig.proxy.objects.glyph.pGlyph.findShape = findShape (self, shapeName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Finds shape by name on given layer Args: shapeName (str): Shape name layer (int or str): Layer index or name. If None returns ActiveLayer Returns: flShape or None","title":"findShape"},{"location":"typerig.proxy.objects.glyph.html#shapes_data","text":"typerig.proxy.objects.glyph.pGlyph.shapes_data = shapes_data (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all flShapeData objects at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[flShapeData]","title":"shapes_data"},{"location":"typerig.proxy.objects.glyph.html#fg_shapes","text":"typerig.proxy.objects.glyph.pGlyph.fg_shapes = fg_shapes (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all FontGate shapes at given layer. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[fgShapes]","title":"fg_shapes"},{"location":"typerig.proxy.objects.glyph.html#elements","text":"typerig.proxy.objects.glyph.pGlyph.elements = elements (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all glyph elements in glyph","title":"elements"},{"location":"typerig.proxy.objects.glyph.html#noncomplex","text":"typerig.proxy.objects.glyph.pGlyph.noncomplex = noncomplex (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all glyph shapes that are not glyph references or components","title":"noncomplex"},{"location":"typerig.proxy.objects.glyph.html#components","text":"typerig.proxy.objects.glyph.pGlyph.components = components (self, layer =None , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all glyph components besides glyph.","title":"components"},{"location":"typerig.proxy.objects.glyph.html#getcompositionnames","text":"typerig.proxy.objects.glyph.pGlyph.getCompositionNames = getCompositionNames (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return name of glyph and the parts it is made of.","title":"getCompositionNames"},{"location":"typerig.proxy.objects.glyph.html#getcompositiondict","text":"typerig.proxy.objects.glyph.pGlyph.getCompositionDict = getCompositionDict (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return composition dict of a glyph. Elements!","title":"getCompositionDict"},{"location":"typerig.proxy.objects.glyph.html#addcomponents","text":"typerig.proxy.objects.glyph.pGlyph.addComponents = addComponents (self, componentConfig, layer =None , useAnchors =True , colorize =False ) unbound typerig.proxy.objects.glyph.pGlyph method Adds a components to given glyph layer. Args: componentConfig (list(tuple(glyph_name (str), glyph_transform (QTransform), layer_pointer (str)))): List contianign component configuration. layer (int or str): Layer index or name. If None returns ActiveLayer useAnchors (bool): Compose using anchors colorize (bool): Flag new glyphs Returns: list(flShapes): List of components added","title":"addComponents"},{"location":"typerig.proxy.objects.glyph.html#masters","text":"typerig.proxy.objects.glyph.pGlyph.masters = masters (self) unbound typerig.proxy.objects.glyph.pGlyph method Returns all master layers.","title":"masters"},{"location":"typerig.proxy.objects.glyph.html#masks","text":"typerig.proxy.objects.glyph.pGlyph.masks = masks (self) unbound typerig.proxy.objects.glyph.pGlyph method Returns all mask layers.","title":"masks"},{"location":"typerig.proxy.objects.glyph.html#services","text":"typerig.proxy.objects.glyph.pGlyph.services = services (self) unbound typerig.proxy.objects.glyph.pGlyph method Returns all service layers.","title":"services"},{"location":"typerig.proxy.objects.glyph.html#addlayer","text":"typerig.proxy.objects.glyph.pGlyph.addLayer = addLayer (self, layer, toBack =False ) unbound typerig.proxy.objects.glyph.pGlyph method Adds a layer to glyph. Args: layer (flLayer or fgLayer) toBack (bool): Send layer to back Returns: None","title":"addLayer"},{"location":"typerig.proxy.objects.glyph.html#removelayer","text":"typerig.proxy.objects.glyph.pGlyph.removeLayer = removeLayer (self, layer) unbound typerig.proxy.objects.glyph.pGlyph method Removes a layer from glyph. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"removeLayer"},{"location":"typerig.proxy.objects.glyph.html#duplicatelayer","text":"typerig.proxy.objects.glyph.pGlyph.duplicateLayer = duplicateLayer (self, layer =None , newLayerName ='New Layer' , references =False ) unbound typerig.proxy.objects.glyph.pGlyph method Duplicates a layer with new name and adds it to glyph's layers. Args: layer (int or str): Layer index or name. If None returns ActiveLayer toBack(bool): send to back Returns: flLayer","title":"duplicateLayer"},{"location":"typerig.proxy.objects.glyph.html#copylayer","text":"typerig.proxy.objects.glyph.pGlyph.copyLayer = copyLayer (self, srcLayerName, dstLayerName, options ={'adv': True, 'anc': True, 'gui': True, 'lnk': True, 'lsb': True, 'out': True, 'ref': True, 'rsb': True} , addLayer =False , cleanDST =True , toBack =True ) unbound typerig.proxy.objects.glyph.pGlyph method Copies a layer within the glyph. Args: srcLayerName, dstLayerName (string): Source and destination layer names options (dict): Copy Options as follows {'out': Outline, 'gui': Guidelines, 'anc': Anchors, 'lsb': LSB, 'adv': Advance, 'rsb': RSB, 'lnk': Linked metrics, 'ref': References}, addLayer=False): addLayer (bool): Create a new layer cleanDST (bool): Clean destination layer toBack (bool): Add layer to back of the layer stack Returns: flLayer","title":"copyLayer"},{"location":"typerig.proxy.objects.glyph.html#iscompatible","text":"typerig.proxy.objects.glyph.pGlyph.isCompatible = isCompatible (self, strong =False ) unbound typerig.proxy.objects.glyph.pGlyph method Test if glyph is ready for interpolation - all master layers are compatible.","title":"isCompatible"},{"location":"typerig.proxy.objects.glyph.html#ismixedreference","text":"typerig.proxy.objects.glyph.pGlyph.isMixedReference = isMixedReference (self) unbound typerig.proxy.objects.glyph.pGlyph method Test if glyph has mixed references - components on some layers and referenced shapes on others","title":"isMixedReference"},{"location":"typerig.proxy.objects.glyph.html#reportlayercomp","text":"typerig.proxy.objects.glyph.pGlyph.reportLayerComp = reportLayerComp (self, strong =False ) unbound typerig.proxy.objects.glyph.pGlyph method Returns a layer compatibility report","title":"reportLayerComp"},{"location":"typerig.proxy.objects.glyph.html#update","text":"typerig.proxy.objects.glyph.pGlyph.update = update (self, fl =True , fg =False ) unbound typerig.proxy.objects.glyph.pGlyph method Updates the glyph and sends notification to the editor. Args: fl (bool): Update the flGlyph fg (bool): Update the fgGlyph","title":"update"},{"location":"typerig.proxy.objects.glyph.html#updateobject","text":"typerig.proxy.objects.glyph.pGlyph.updateObject = updateObject (self, flObject, undoMessage ='TypeRig' , verbose =True ) unbound typerig.proxy.objects.glyph.pGlyph method Updates a flObject sends notification to the editor as well as undo/history item. Args: flObject (flGlyph, flLayer, flShape, flNode, flContour): Object to be update and set undo state undoMessage (string): Message to be added in undo/history list.","title":"updateObject"},{"location":"typerig.proxy.objects.glyph.html#selectednodeindices","text":"typerig.proxy.objects.glyph.pGlyph.selectedNodeIndices = selectedNodeIndices (self, filterOn =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all indices of nodes selected at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int]","title":"selectedNodeIndices"},{"location":"typerig.proxy.objects.glyph.html#selected","text":"typerig.proxy.objects.glyph.pGlyph.selected = selected (self, filterOn =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes indexes at current layer. Args: filterOn (bool): Return only on-curve nodes Returns: list[int]","title":"selected"},{"location":"typerig.proxy.objects.glyph.html#selectednodes","text":"typerig.proxy.objects.glyph.pGlyph.selectedNodes = selectedNodes (self, layer =None , filterOn =False , extend =None , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes at given layer. Args: filterOn (bool): Return only on-curve nodes extend (class): A class construct with extended functionality to be applied on every node. Returns: list[flNode]","title":"selectedNodes"},{"location":"typerig.proxy.objects.glyph.html#selectedatcontours","text":"typerig.proxy.objects.glyph.pGlyph.selectedAtContours = selectedAtContours (self, index =True , layer =None , filterOn =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes and the contours they rest upon at current layer. Args: index (bool): If True returns only indexes, False returns flContour, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(contourID, nodeID)..()] or list[tuple(flContour, flNode)]","title":"selectedAtContours"},{"location":"typerig.proxy.objects.glyph.html#selectedatshapes","text":"typerig.proxy.objects.glyph.pGlyph.selectedAtShapes = selectedAtShapes (self, index =True , filterOn =False , layer =None , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all selected nodes and the shapes they belong at current layer. Args: index (bool): If True returns only indexes, False returns flShape, flNode filterOn (bool): Return only on-curve nodes Returns: list[tuple(int, int)]: [(shapeID, nodeID)..()] or list[tuple(flShape, flNode)] !TODO: Make it working with layers as selectedAtContours(). This is legacy mode so other scripts would work!","title":"selectedAtShapes"},{"location":"typerig.proxy.objects.glyph.html#selectedshapeindices","text":"typerig.proxy.objects.glyph.pGlyph.selectedShapeIndices = selectedShapeIndices (self, select_all =False , deep =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return all indices of nodes selected at current layer. Args: select_all (bool): True all nodes on Shape should be selected. False any node will do. Returns: list[int]","title":"selectedShapeIndices"},{"location":"typerig.proxy.objects.glyph.html#selectedshapes","text":"typerig.proxy.objects.glyph.pGlyph.selectedShapes = selectedShapes (self, layer =None , select_all =False , deep =False , extend =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return all shapes that have a node selected.","title":"selectedShapes"},{"location":"typerig.proxy.objects.glyph.html#selectedcoords","text":"typerig.proxy.objects.glyph.pGlyph.selectedCoords = selectedCoords (self, layer =None , filterOn =False , applyTransform =False ) unbound typerig.proxy.objects.glyph.pGlyph method Return the coordinates of all selected nodes at the current layer or other. Args: layer (int or str): Layer index or name. If None returns ActiveLayer filterOn (bool): Return only on-curve nodes applyTransform (bool) : Gets local shape transformation matrix and applies it to the node coordinates Returns: list[QPointF]","title":"selectedCoords"},{"location":"typerig.proxy.objects.glyph.html#selectedsegments","text":"typerig.proxy.objects.glyph.pGlyph.selectedSegments = selectedSegments (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns list of currently selected segments Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx]","title":"selectedSegments"},{"location":"typerig.proxy.objects.glyph.html#findnode","text":"typerig.proxy.objects.glyph.pGlyph.findNode = findNode (self, nodeName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find node by name/tag","title":"findNode"},{"location":"typerig.proxy.objects.glyph.html#findnodecoords","text":"typerig.proxy.objects.glyph.pGlyph.findNodeCoords = findNodeCoords (self, nodeName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find node coordinates by name/tag","title":"findNodeCoords"},{"location":"typerig.proxy.objects.glyph.html#mapnodes2times","text":"typerig.proxy.objects.glyph.pGlyph.mapNodes2Times = mapNodes2Times (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Create map of Nodes at contour times for every contour in given layer Returns: dict{Contour index (int) : dict{Contour Time (int): Node Index (int) }}","title":"mapNodes2Times"},{"location":"typerig.proxy.objects.glyph.html#maptimes2nodes","text":"typerig.proxy.objects.glyph.pGlyph.mapTimes2Nodes = mapTimes2Nodes (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Create map of Contour times at node indexes for every contour in given layer Returns: dict{Contour index (int) : dict{Node Index (int) : Contour Time (int) }}","title":"mapTimes2Nodes"},{"location":"typerig.proxy.objects.glyph.html#getsegment","text":"typerig.proxy.objects.glyph.pGlyph.getSegment = getSegment (self, cID, nID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns contour segment of the node specified at given layer Args: cID (int): Contour index nID (int): Node of insertion index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: CurveEx","title":"getSegment"},{"location":"typerig.proxy.objects.glyph.html#segments","text":"typerig.proxy.objects.glyph.pGlyph.segments = segments (self, cID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns all contour segments at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: list[CurveEx]","title":"segments"},{"location":"typerig.proxy.objects.glyph.html#nodes4segments","text":"typerig.proxy.objects.glyph.pGlyph.nodes4segments = nodes4segments (self, cID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns all contour segments and their corresponding nodes at given layer Args: cID (int): Contour index layer (int or str): Layer index or name. If None returns ActiveLayer Returns: dict{time(int):(CurveEx, list[flNode]}","title":"nodes4segments"},{"location":"typerig.proxy.objects.glyph.html#insertnodesat","text":"typerig.proxy.objects.glyph.pGlyph.insertNodesAt = insertNodesAt (self, cID, nID, nodeList, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Inserts a list of nodes to specified contour, starting at given index all on layer specified. Args: cID (int): Contour index nID (int): Node of insertion index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"insertNodesAt"},{"location":"typerig.proxy.objects.glyph.html#removenodes","text":"typerig.proxy.objects.glyph.pGlyph.removeNodes = removeNodes (self, cID, nodeList, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Removes a list of nodes from contour at layer specified. Args: cID (int): Contour index nodeList (list): List of flNode objects layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"removeNodes"},{"location":"typerig.proxy.objects.glyph.html#insertnodeat","text":"typerig.proxy.objects.glyph.pGlyph.insertNodeAt = insertNodeAt (self, cID, nID_time, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Inserts node in contour at specified layer Arg: cID (int): Contour Index nID_time (float): Node index + float time layer (int or str): Layer index or name. If None returns ActiveLayer !NOTE: FL6 treats contour insertions (as well as nodes) as float times along contour, so inserting a node at .5 t between nodes with indexes 3 and 4 will be 3 (index) + 0.5 (time) = 3.5","title":"insertNodeAt"},{"location":"typerig.proxy.objects.glyph.html#removenodeat","text":"typerig.proxy.objects.glyph.pGlyph.removeNodeAt = removeNodeAt (self, cID, nID, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Removes a node from contour at layer specified. Args: cID (int): Contour index nID (int): Index of Node to be removed layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"removeNodeAt"},{"location":"typerig.proxy.objects.glyph.html#translate","text":"typerig.proxy.objects.glyph.pGlyph.translate = translate (self, dx, dy, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Translate (shift) outline at given layer. Args: dx (float), dy (float): delta (shift) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"translate"},{"location":"typerig.proxy.objects.glyph.html#scale","text":"typerig.proxy.objects.glyph.pGlyph.scale = scale (self, sx, sy, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Scale outline at given layer. Args: sx (float), sy (float): delta (scaling) X, Y layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"scale"},{"location":"typerig.proxy.objects.glyph.html#slant","text":"typerig.proxy.objects.glyph.pGlyph.slant = slant (self, deg, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Slant outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"slant"},{"location":"typerig.proxy.objects.glyph.html#rotate","text":"typerig.proxy.objects.glyph.pGlyph.rotate = rotate (self, deg, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Rotate outline at given layer. Args: deg (float): degrees of slant layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"rotate"},{"location":"typerig.proxy.objects.glyph.html#blendshapes","text":"typerig.proxy.objects.glyph.pGlyph.blendShapes = blendShapes (self, shapeA, shapeB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) unbound typerig.proxy.objects.glyph.pGlyph method Blend two shapes at given times (anisotropic support). Args: shapeA (flShape), shapeB (flShape): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: Native (interpolation engine dependent) or flShape (default)","title":"blendShapes"},{"location":"typerig.proxy.objects.glyph.html#getlsb","text":"typerig.proxy.objects.glyph.pGlyph.getLSB = getLSB (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get the Left Side-bearing at given layer (int or str)","title":"getLSB"},{"location":"typerig.proxy.objects.glyph.html#getadvance","text":"typerig.proxy.objects.glyph.pGlyph.getAdvance = getAdvance (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get the Advance Width at given layer (int or str)","title":"getAdvance"},{"location":"typerig.proxy.objects.glyph.html#getrsb","text":"typerig.proxy.objects.glyph.pGlyph.getRSB = getRSB (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get the Right Side-bearing at given layer (int or str)","title":"getRSB"},{"location":"typerig.proxy.objects.glyph.html#getbounds","text":"typerig.proxy.objects.glyph.pGlyph.getBounds = getBounds (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Get Glyph's Boundig Box at given layer (int or str). Returns QRectF.","title":"getBounds"},{"location":"typerig.proxy.objects.glyph.html#setlsb","text":"typerig.proxy.objects.glyph.pGlyph.setLSB = setLSB (self, newLSB, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set the Left Side-bearing (int) at given layer (int or str)","title":"setLSB"},{"location":"typerig.proxy.objects.glyph.html#setrsb","text":"typerig.proxy.objects.glyph.pGlyph.setRSB = setRSB (self, newRSB, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set the Right Side-bearing (int) at given layer (int or str)","title":"setRSB"},{"location":"typerig.proxy.objects.glyph.html#setadvance","text":"typerig.proxy.objects.glyph.pGlyph.setAdvance = setAdvance (self, newAdvance, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set the Advance Width (int) at given layer (int or str)","title":"setAdvance"},{"location":"typerig.proxy.objects.glyph.html#setlsbeq","text":"typerig.proxy.objects.glyph.pGlyph.setLSBeq = setLSBeq (self, equationStr, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set LSB metric equation on given layer","title":"setLSBeq"},{"location":"typerig.proxy.objects.glyph.html#setrsbeq","text":"typerig.proxy.objects.glyph.pGlyph.setRSBeq = setRSBeq (self, equationStr, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set RSB metric equation on given layer","title":"setRSBeq"},{"location":"typerig.proxy.objects.glyph.html#setadveq","text":"typerig.proxy.objects.glyph.pGlyph.setADVeq = setADVeq (self, equationStr, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Set Advance width metric equation on given layer","title":"setADVeq"},{"location":"typerig.proxy.objects.glyph.html#getsbeq","text":"typerig.proxy.objects.glyph.pGlyph.getSBeq = getSBeq (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method GET LSB, RSB metric equations on given layer","title":"getSBeq"},{"location":"typerig.proxy.objects.glyph.html#fontmetricsinfo","text":"typerig.proxy.objects.glyph.pGlyph.fontMetricsInfo = fontMetricsInfo (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Returns Font(layer) metrics no matter the reference. Args: layer (int or str): Layer index or name. If None returns ActiveLayer Returns: FontMetrics (object)","title":"fontMetricsInfo"},{"location":"typerig.proxy.objects.glyph.html#anchors","text":"typerig.proxy.objects.glyph.pGlyph.anchors = anchors (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return list of anchors (list[flAnchor]) at given layer (int or str)","title":"anchors"},{"location":"typerig.proxy.objects.glyph.html#addanchor","text":"typerig.proxy.objects.glyph.pGlyph.addAnchor = addAnchor (self, coordTuple, name, layer =None , isAnchor =True ) unbound typerig.proxy.objects.glyph.pGlyph method Adds named Anchor at given layer. Args: coordTuple (tuple(float,float)): Anchor coordinates X, Y name (str): Anchor name layer (int or str): Layer index or name. If None returns ActiveLayer isAnchor (bool): True creates a true flAnchor, False ? (flPinPoint) Returns: None","title":"addAnchor"},{"location":"typerig.proxy.objects.glyph.html#newanchor","text":"typerig.proxy.objects.glyph.pGlyph.newAnchor = newAnchor (self, coordTuple, name, anchorType =1 ) unbound typerig.proxy.objects.glyph.pGlyph method Not working","title":"newAnchor"},{"location":"typerig.proxy.objects.glyph.html#clearanchors","text":"typerig.proxy.objects.glyph.pGlyph.clearAnchors = clearAnchors (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Remove all anchors at given layer (int or str)","title":"clearAnchors"},{"location":"typerig.proxy.objects.glyph.html#findanchor","text":"typerig.proxy.objects.glyph.pGlyph.findAnchor = findAnchor (self, anchorName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find anchor by name/tag","title":"findAnchor"},{"location":"typerig.proxy.objects.glyph.html#findanchorcoords","text":"typerig.proxy.objects.glyph.pGlyph.findAnchorCoords = findAnchorCoords (self, anchorName, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Find anchor coordinates by name/tag","title":"findAnchorCoords"},{"location":"typerig.proxy.objects.glyph.html#guidelines","text":"typerig.proxy.objects.glyph.pGlyph.guidelines = guidelines (self, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Return list of guidelines (list[flGuideline]) at given layer (int or str)","title":"guidelines"},{"location":"typerig.proxy.objects.glyph.html#addguideline","text":"typerig.proxy.objects.glyph.pGlyph.addGuideline = addGuideline (self, coordTuple, layer =None , angle =0 , name ='' , tag ='' , color ='darkMagenta' , style ='gsGlyphGuideline' ) unbound typerig.proxy.objects.glyph.pGlyph method Adds named Guideline at given layer Args: coordTuple (tuple(float,float) or tuple(float,float,float,float)): Guideline coordinates X, Y and given angle or two node reference x1,y1 and x2,y2 name (str): Anchor name angle (float): Incline of the guideline layer (int or str): Layer index or name. If None returns ActiveLayer Returns: None","title":"addGuideline"},{"location":"typerig.proxy.objects.glyph.html#draw","text":"typerig.proxy.objects.glyph.pGlyph.draw = draw (self, pen, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Utilizes the Pen protocol","title":"draw"},{"location":"typerig.proxy.objects.glyph.html#drawpoints","text":"typerig.proxy.objects.glyph.pGlyph.drawPoints = drawPoints (self, pen, layer =None ) unbound typerig.proxy.objects.glyph.pGlyph method Utilizes the PointPen protocol","title":"drawPoints"},{"location":"typerig.proxy.objects.glyph.html#eglyph","text":"","title":"eGlyph"},{"location":"typerig.proxy.objects.glyph.html#breakcontour","text":"typerig.proxy.objects.glyph.eGlyph.breakContour = breakContour (self, contourId, nodeId, layer =None , expand =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Split Contour at given node and layer. Extrapolate line endings if needed. Args: contourId (int): Contour Index nodeId (int): Node Index layer (int or str): Layer index or name, works with both expand (float): Will extrapolate the line endings at that given value Returns: flContour","title":"breakContour"},{"location":"typerig.proxy.objects.glyph.html#splitcontour","text":"typerig.proxy.objects.glyph.eGlyph.splitContour = splitContour (self, scnPairs =None , layers =None , expand =0 , close =False ) unbound typerig.proxy.objects.glyph.eGlyph method Split Contour at given node and combinations of compatible layers. Extrapolate line endings and close contour if needed. Args: scnPairs (list(tuple)): Shape-contour-node pairs for the selected nodes [(Shape Index, Contour Index, Node Index)..()] layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. expand (float): Will extrapolate the line endings at that given value close (bool): True = Close contour Return: None","title":"splitContour"},{"location":"typerig.proxy.objects.glyph.html#dropguide","text":"typerig.proxy.objects.glyph.eGlyph.dropGuide = dropGuide (self, nodes =None , layers =None , name ='*DropGuideline' , tag ='' , color ='darkMagenta' , flip =(1, 1) , style ='gsGlyphGuideline' ) unbound typerig.proxy.objects.glyph.eGlyph method Build guideline trough *any two* given points or the *first two of the current selection*. If *single point* is given will create a vertical guideline trough that point, with guideline inclined according to the font's Italic Angle. if process layers (pLayers) is None guideline will be created in all compatible layers, otherwise the bool control tuple (active_layer (True or False), masters (True or False), masks (True or False), services (True or False)) is used. If all are set to False only the active layer is used. Args: nodes (list(int)): List of node indexes layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. name (str): Name of the guideline to be build color (str): Color of the guideline according to QtCore colors style (str): Style of the guideline according to FontLab 6 Returns: None","title":"dropGuide"},{"location":"typerig.proxy.objects.glyph.html#copylsbbyname","text":"typerig.proxy.objects.glyph.eGlyph.copyLSBbyName = copyLSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Copy LSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None","title":"copyLSBbyName"},{"location":"typerig.proxy.objects.glyph.html#copyrsbbyname","text":"typerig.proxy.objects.glyph.eGlyph.copyRSBbyName = copyRSBbyName (self, glyphName, layers =None , order =0 , adjustPercent =100 , adjustUnits =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Copy RSB from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order (bool or int): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None","title":"copyRSBbyName"},{"location":"typerig.proxy.objects.glyph.html#copyadvbyname","text":"typerig.proxy.objects.glyph.eGlyph.copyADVbyName = copyADVbyName (self, glyphName, layers =None , adjustPercent =100 , adjustUnits =0 ) unbound typerig.proxy.objects.glyph.eGlyph method Copy Advance width from another glyph specified by Glyph Name. Args: glyphName (str): Name of source glyph layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. adjustPercent (int): Adjust the copied metric by percent (100 default) adjustUnits (int): Adjust the copied metric by units (0 default) Return: None","title":"copyADVbyName"},{"location":"typerig.proxy.objects.glyph.html#copymetricsbyname","text":"typerig.proxy.objects.glyph.eGlyph.copyMetricsbyName = copyMetricsbyName (self, metricTriple =(None, None, None) , layers =None , order =(0, 0, 0) , adjustPercent =(100, 100, 100) , adjustUnits =(0, 0, 0) ) unbound typerig.proxy.objects.glyph.eGlyph method Copy LSB, RSB and Advance width from glyphs specified by Glyph Name. Args: metricTriple tuple(str): Names of source glyphs for (LSB, RSB, ADV) layers tuple(bool): Bool control tuple(active_layer, masters, masks, services). Note If all are set to False only the active layer is used. order tuple(bool): Use source LSB (0 False) or RSB (1 True). Flips the metric copied. (LSB, RSB, 0) adjustPercent tuple(int): Adjust the copied metric by percent (100 default) - (LSB, RSB, ADV) adjustUnits tuple(int): Adjust the copied metric by units (0 default) - (LSB, RSB, ADV) Return: None","title":"copyMetricsbyName"},{"location":"typerig.proxy.objects.glyph.html#bindcompmetrics","text":"typerig.proxy.objects.glyph.eGlyph.bindCompMetrics = bindCompMetrics (self, layer =None , bindIndex =None ) unbound typerig.proxy.objects.glyph.eGlyph method Auto bind metrics to the base composite glyph or to specified shape index","title":"bindCompMetrics"},{"location":"typerig.proxy.objects.glyph.html#blendlayers","text":"typerig.proxy.objects.glyph.eGlyph.blendLayers = blendLayers (self, layerA, layerB, blendTimes, outputFL =True , blendMode =0 , engine ='fg' ) unbound typerig.proxy.objects.glyph.eGlyph method Blend two layers at given times (anisotropic support). Args: layerA (flLayer), layerB (flLayer): Shapes to be interpolated blendTimes (int or float or tuple(float, float)): (int) for percent 0%-100% or (float) time for both X,Y or tuple(float,float) times for anisotropic blending outputFL (bool): Return blend native format or flShape (default) blendMode (int): ? engine (str): 'fg' for FontGate (in-build). Returns: flLayer","title":"blendLayers"},{"location":"typerig.proxy.objects.glyph.html#getattachmentcenters","text":"typerig.proxy.objects.glyph.eGlyph.getAttachmentCenters = getAttachmentCenters (self, layer, tolerance =5 , applyTransform =True , getAll =False ) unbound typerig.proxy.objects.glyph.eGlyph method Return X center of lowest, highest Y of [glyph] for [layer] within given [tolerance] Note: Determine diacritic to glyph attachment positions (for anchor placement)","title":"getAttachmentCenters"},{"location":"typerig.proxy.objects.glyph.html#getnewbasecoords","text":"typerig.proxy.objects.glyph.eGlyph.getNewBaseCoords = getNewBaseCoords (self, layer, adjustTuple, alignTuple, tolerance =5 , italic =False , initPosTuple =(0.0, 0.0) ) unbound typerig.proxy.objects.glyph.eGlyph method Calculate Anchor base position Args: layer (int or str): Layer index or name, works with both coordTuple (int/float, int/float): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int/float): Outline feature auto detection tolerance* initPosTuple (int/float, int/float): Itinital anchor position *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: x, y (int/float)","title":"getNewBaseCoords"},{"location":"typerig.proxy.objects.glyph.html#dropanchor","text":"typerig.proxy.objects.glyph.eGlyph.dropAnchor = dropAnchor (self, name, layer, coordTuple, alignTuple =(None, None) , tolerance =5 , italic =False ) unbound typerig.proxy.objects.glyph.eGlyph method Drop anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None","title":"dropAnchor"},{"location":"typerig.proxy.objects.glyph.html#moveanchor","text":"typerig.proxy.objects.glyph.eGlyph.moveAnchor = moveAnchor (self, name, layer, coordTuple =(0, 0) , alignTuple =(None, None) , tolerance =5 , italic =False ) unbound typerig.proxy.objects.glyph.eGlyph method Move anchor at given layer Args: name (str): Anchor Name layer (int or str): Layer index or name, works with both coordTuple (int, int): New anchor coordinates or auto aligment offsets* alignTuple (str,str): New anchor aligment* tolerance (int): Outline feature auto detection tolerance* *Aligment rules: (width, height) - (None,None) - Uses coordinates given - width - (L) Left; (R) Right; (A) Auto Bottom with tolerance; (AT) Auto Top with tolerance; (C) Center; - height - (T) Top; (B) Bottom; (C) Center; Returns: None","title":"moveAnchor"},{"location":"typerig.proxy.objects.glyph.html#reorder_shapes","text":"typerig.proxy.objects.glyph.eGlyph.reorder_shapes = reorder_shapes (self, layer =None , mode =(0, 0) ) unbound typerig.proxy.objects.glyph.eGlyph method Auto reorder shapes on given layer using criteria. Args: layer (int or str): Layer index or name, works with both mode (bool, bool): Mode of shape reordering/sorting by (X, Y) Returns: None","title":"reorder_shapes"},{"location":"typerig.proxy.objects.glyph.html#ungroup_all_shapes","text":"typerig.proxy.objects.glyph.eGlyph.ungroup_all_shapes = ungroup_all_shapes (self, layer =None , applyTransform =True ) unbound typerig.proxy.objects.glyph.eGlyph method Ungroup all shapes at given layer. Args: layer (int or str): Layer index or name, works with both applyTransform (bool): Apply transformation at shape. Returns: None","title":"ungroup_all_shapes"},{"location":"typerig.proxy.objects.kern.html","text":"typerig.proxy.objects.kern typerig . proxy . objects .kern ( version 0.26.3) # MODULE: Typerig / Proxy / Kern (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab PythonQt Classes builtin .object pKerning class pKerning ( builtin .object ) Proxy to fgKerning object Constructor: pKerning(fgKerning) Attributes: .fg (fgKerning): Original Fontgate Kerning object .groups (fgKerningGroups): Fontgate Group kerning object Methods init (self, fgKerningObject, externalGroupData =None ) repr (self) addGroup (self, key, glyphNameList, type) Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None asDict (self) asList (self) clear (self) # - Basic functions ------------------------------------- getKerningForLeaders (self, transformLeft =None , transformRight =None ) Now in FL6 we do not have leaders, but this returns the first glyph name in the group getPair (self, pairTuple) getPairGroups (self, pairTuple) getPairObject (self, pairTuple) groups (self) groupsAsDict (self) groupsBiDict (self) groupsFromDict (self, groupDict) newPair (self, glyphLeft, glyphRight, modeLeft, modeRight) removeGroup (self, key) Remove a group from fonts kerning groups at given layer. renameGroup (self, oldkey, newkey) Rename a group in fonts kerning groups at given layer. resetGroups (self) setExternalGroupData (self, externalGroupData) setPair (self, pairTuple, modeTuple =(0, 0) ) setPairs (self, pairTupleList, extend =False ) storeExternalGroupData (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) pKerning typerig.proxy.objects.kern.pKerning = class pKerning ( __builtin__.object ) Proxy to fgKerning object Constructor: pKerning(fgKerning) Attributes: .fg (fgKerning): Original Fontgate Kerning object .groups (fgKerningGroups): Fontgate Group kerning object Methods __init__ (self, fgKerningObject, externalGroupData =None ) __repr__ (self) addGroup (self, key, glyphNameList, type) Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None asDict (self) asList (self) clear (self) # - Basic functions ------------------------------------- getKerningForLeaders (self, transformLeft =None , transformRight =None ) Now in FL6 we do not have leaders, but this returns the first glyph name in the group getPair (self, pairTuple) getPairGroups (self, pairTuple) getPairObject (self, pairTuple) groups (self) groupsAsDict (self) groupsBiDict (self) groupsFromDict (self, groupDict) newPair (self, glyphLeft, glyphRight, modeLeft, modeRight) removeGroup (self, key) Remove a group from fonts kerning groups at given layer. renameGroup (self, oldkey, newkey) Rename a group in fonts kerning groups at given layer. resetGroups (self) setExternalGroupData (self, externalGroupData) setPair (self, pairTuple, modeTuple =(0, 0) ) setPairs (self, pairTupleList, extend =False ) storeExternalGroupData (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) removeGroup typerig.proxy.objects.kern.pKerning.removeGroup = removeGroup (self, key) unbound typerig.proxy.objects.kern.pKerning method Remove a group from fonts kerning groups at given layer. renameGroup typerig.proxy.objects.kern.pKerning.renameGroup = renameGroup (self, oldkey, newkey) unbound typerig.proxy.objects.kern.pKerning method Rename a group in fonts kerning groups at given layer. addGroup typerig.proxy.objects.kern.pKerning.addGroup = addGroup (self, key, glyphNameList, type) unbound typerig.proxy.objects.kern.pKerning method Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None getKerningForLeaders typerig.proxy.objects.kern.pKerning.getKerningForLeaders = getKerningForLeaders (self, transformLeft =None , transformRight =None ) unbound typerig.proxy.objects.kern.pKerning method Now in FL6 we do not have leaders, but this returns the first glyph name in the group","title":"proxy.objects.kern"},{"location":"typerig.proxy.objects.kern.html#typerigproxyobjectskern","text":"","title":"typerig.proxy.objects.kern"},{"location":"typerig.proxy.objects.kern.html#pkerning","text":"","title":"pKerning"},{"location":"typerig.proxy.objects.kern.html#removegroup","text":"typerig.proxy.objects.kern.pKerning.removeGroup = removeGroup (self, key) unbound typerig.proxy.objects.kern.pKerning method Remove a group from fonts kerning groups at given layer.","title":"removeGroup"},{"location":"typerig.proxy.objects.kern.html#renamegroup","text":"typerig.proxy.objects.kern.pKerning.renameGroup = renameGroup (self, oldkey, newkey) unbound typerig.proxy.objects.kern.pKerning method Rename a group in fonts kerning groups at given layer.","title":"renameGroup"},{"location":"typerig.proxy.objects.kern.html#addgroup","text":"typerig.proxy.objects.kern.pKerning.addGroup = addGroup (self, key, glyphNameList, type) unbound typerig.proxy.objects.kern.pKerning method Adds a new group to fonts kerning groups. Args: key (string): Group name glyphNameList (list(string)): List of glyph names type (string): Kern group types: L - Left group (1st), R - Right group (2nd), B - Both (1st and 2nd) layer (None, Int, String) Returns: None","title":"addGroup"},{"location":"typerig.proxy.objects.kern.html#getkerningforleaders","text":"typerig.proxy.objects.kern.pKerning.getKerningForLeaders = getKerningForLeaders (self, transformLeft =None , transformRight =None ) unbound typerig.proxy.objects.kern.pKerning method Now in FL6 we do not have leaders, but this returns the first glyph name in the group","title":"getKerningForLeaders"},{"location":"typerig.proxy.objects.html","text":"typerig.proxy.objects typerig . proxy .objects from proxy import __version__ as current_ver __version__ = current_ver Package Contents base composer contour curve font glyph kern node shape string","title":"proxy.objects"},{"location":"typerig.proxy.objects.html#typerigproxyobjects","text":"","title":"typerig.proxy.objects"},{"location":"typerig.proxy.objects.node.html","text":"typerig.proxy.objects.node typerig . proxy . objects .node ( version 0.26.3) # MODULE: Typerig / Proxy / Node (Obejcts) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab math PythonQt random typerig.core.objects Classes builtin .object pNode eNode pNodesContainer eNodesContainer class eNode ( pNode ) Extended representation of the Proxy Node, adding some advanced functionality Constructor: eNode(flNode) Method resolution order: eNode pNode builtin .object Methods alignTo (self, entity, align =(True, True) ) Align current node to a node or line given. Arguments: entity (flNode, pNode , eNode or Line) align (tuple(Align_X (bool), Align_Y (bool)) asCoord (self) Returns Coord object of the node. cornerMitre (self, mitreSize =5 , isRadius =False ) # - Corner operations --------------- cornerRound (self, size =5 , proportion =None , curvature =None , isRadius =False ) cornerTrap (self, aperture =10 , depth =20 , trap =2 ) Trap a corner by given aperture. Arguments: aperture (float): Width of the traps mouth (opening); depth (float): Length of the traps sides; trap (float): Width of the traps bottom. Returns: tuple(flNode, flNode, flNode, flNode) cornerTrapInc (self, incision =10 , depth =50 , trap =2 , smooth =True ) Trap a corner by given incision into the glyph flesh. Arguments: incision (float): How much to cut into glyphs flesh based from that corner inward; depth (float): Length of the traps sides; trap (float): Width of the traps bottom; smooth (bool): Creates a smooth trap. Returns: tuple(flNode, flNode, flNode, flNode) four base (ON) nodes of the trap. diffTo (self, node) diffToNext (self) diffToPrev (self) getNextLine (self) getPrevLine (self) interpShift (self, shift_x, shift_y) Interpolated move aka Interpolated Nudge. Arguments: shift_x, shift_y (float) polarReloc (self, angle, distance) polarRelocFromPrev (self, distance) polarTo (self, node) polarToNext (self) polarToPrev (self) shiftFromNext (self, diffX, diffY) shiftFromPrev (self, diffX, diffY) slantShift (self, shift_x, shift_y, angle) Slanted move - move a node (in inclined space) according to Y coordinate slanted at given angle. Arguments: shift_x, shift_y (float) angle (float): Angle in degrees smartPolarReloc (self, angle, distance) Methods from pNode init (self, node) repr (self) angleTo (self, node) angleToNext (self) angleToPrev (self) delSmartAngle (self) distanceTo (self, node) distanceToNext (self) distanceToPrev (self) getContour (self) getMaxY (self, naked =True ) getMinY (self, naked =True ) getNext (self, naked =True ) getNextOn (self, naked =True ) getOn (self, naked =True ) getPrev (self, naked =True ) getPrevOn (self, naked =True ) getSegment (self, relativeTime =0 ) getSegmentNodes (self, relativeTime =0 ) getSmartAngle (self) # - Effects -------------------------------- getSmartAngleRadius (self) getTime (self) # - Basics ----------------------------------------------- insertAfter (self, time) insertAfterDist (self, distance) insertBefore (self, time) insertBeforeDist (self, distance) reloc (self, newX, newY) Relocate the node to new coordinates remove (self) setSmartAngle (self, radius) setSmartAngleRadius (self, radius) shift (self, deltaX, deltaY) Shift the node by given amout smartReloc (self, newX, newY) Relocate the node and adjacent BCPs to new coordinates smartShift (self, deltaX, deltaY) Shift the node and adjacent BCPs by given amout update (self) Descriptors from pNode dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class eNodesContainer ( pNodesContainer ) Extended representation of Abstract nodes container Constructor: eNodesContainer(list(flNode)) Method resolution order: eNodesContainer pNodesContainer builtin .object Methods alignTo (self, entity, alignMode ='' , align =(True, True) ) Align Abstract nodes container to. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS Methods from pNodesContainer delitem (self, index) getitem (self, index) hash (self) init (self, nodeList, extend = class 'typerig.proxy.objects.node.pNode' ) len (self) repr (self) setitem (self, index, value) append (self, index) applyTransform (self, transform) clone (self) cloneTransform (self, transform) getBounds (self) getCoord (self) getPosition (self) insert (self, index, value) reverse (self) shift (self, dx, dy) smartShift (self, dx, dy) Descriptors from pNodesContainer dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pNode ( builtin .object ) Proxy to flNode object Constructor: pNode(flNode) Attributes: .fl (flNode): Original flNode .parent (flContour): parent contour .contour (flContour): parent contour Methods init (self, node) repr (self) angleTo (self, node) angleToNext (self) angleToPrev (self) delSmartAngle (self) distanceTo (self, node) distanceToNext (self) distanceToPrev (self) getContour (self) getMaxY (self, naked =True ) getMinY (self, naked =True ) getNext (self, naked =True ) getNextOn (self, naked =True ) getOn (self, naked =True ) getPrev (self, naked =True ) getPrevOn (self, naked =True ) getSegment (self, relativeTime =0 ) getSegmentNodes (self, relativeTime =0 ) getSmartAngle (self) # - Effects -------------------------------- getSmartAngleRadius (self) getTime (self) # - Basics ----------------------------------------------- insertAfter (self, time) insertAfterDist (self, distance) insertBefore (self, time) insertBeforeDist (self, distance) reloc (self, newX, newY) Relocate the node to new coordinates remove (self) setSmartAngle (self, radius) setSmartAngleRadius (self, radius) shift (self, deltaX, deltaY) Shift the node by given amout smartReloc (self, newX, newY) Relocate the node and adjacent BCPs to new coordinates smartShift (self, deltaX, deltaY) Shift the node and adjacent BCPs by given amout update (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pNodesContainer ( builtin .object ) Abstract nodes container Constructor: pNodesContainer(list(flNode)) Attributes: Methods delitem (self, index) getitem (self, index) hash (self) init (self, nodeList, extend = class 'typerig.proxy.objects.node.pNode' ) len (self) repr (self) setitem (self, index, value) append (self, index) applyTransform (self, transform) clone (self) cloneTransform (self, transform) getBounds (self) getCoord (self) getPosition (self) insert (self, index, value) reverse (self) shift (self, dx, dy) smartShift (self, dx, dy) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) pNode typerig.proxy.objects.node.pNode = class pNode ( __builtin__.object ) Proxy to flNode object Constructor: pNode(flNode) Attributes: .fl (flNode): Original flNode .parent (flContour): parent contour .contour (flContour): parent contour Methods __init__ (self, node) __repr__ (self) angleTo (self, node) angleToNext (self) angleToPrev (self) delSmartAngle (self) distanceTo (self, node) distanceToNext (self) distanceToPrev (self) getContour (self) getMaxY (self, naked =True ) getMinY (self, naked =True ) getNext (self, naked =True ) getNextOn (self, naked =True ) getOn (self, naked =True ) getPrev (self, naked =True ) getPrevOn (self, naked =True ) getSegment (self, relativeTime =0 ) getSegmentNodes (self, relativeTime =0 ) getSmartAngle (self) # - Effects -------------------------------- getSmartAngleRadius (self) getTime (self) # - Basics ----------------------------------------------- insertAfter (self, time) insertAfterDist (self, distance) insertBefore (self, time) insertBeforeDist (self, distance) reloc (self, newX, newY) Relocate the node to new coordinates remove (self) setSmartAngle (self, radius) setSmartAngleRadius (self, radius) shift (self, deltaX, deltaY) Shift the node by given amout smartReloc (self, newX, newY) Relocate the node and adjacent BCPs to new coordinates smartShift (self, deltaX, deltaY) Shift the node and adjacent BCPs by given amout update (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) reloc typerig.proxy.objects.node.pNode.reloc = reloc (self, newX, newY) unbound typerig.proxy.objects.node.pNode method Relocate the node to new coordinates shift typerig.proxy.objects.node.pNode.shift = shift (self, deltaX, deltaY) unbound typerig.proxy.objects.node.pNode method Shift the node by given amout smartReloc typerig.proxy.objects.node.pNode.smartReloc = smartReloc (self, newX, newY) unbound typerig.proxy.objects.node.pNode method Relocate the node and adjacent BCPs to new coordinates smartShift typerig.proxy.objects.node.pNode.smartShift = smartShift (self, deltaX, deltaY) unbound typerig.proxy.objects.node.pNode method Shift the node and adjacent BCPs by given amout pNodesContainer typerig.proxy.objects.node.pNodesContainer = class pNodesContainer ( __builtin__.object ) Abstract nodes container Constructor: pNodesContainer(list(flNode)) Attributes: Methods __delitem__ (self, index) __getitem__ (self, index) __hash__ (self) __init__ (self, nodeList, extend = class 'typerig.proxy.objects.node.pNode' ) __len__ (self) __repr__ (self) __setitem__ (self, index, value) append (self, index) applyTransform (self, transform) clone (self) cloneTransform (self, transform) getBounds (self) getCoord (self) getPosition (self) insert (self, index, value) reverse (self) shift (self, dx, dy) smartShift (self, dx, dy) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) eNode typerig.proxy.objects.node.eNode = class eNode ( pNode ) Extended representation of the Proxy Node, adding some advanced functionality Constructor: eNode(flNode) Method resolution order: eNode pNode __builtin__.object Methods alignTo (self, entity, align =(True, True) ) Align current node to a node or line given. Arguments: entity (flNode, pNode, eNode or Line) align (tuple(Align_X (bool), Align_Y (bool)) asCoord (self) Returns Coord object of the node. cornerMitre (self, mitreSize =5 , isRadius =False ) # - Corner operations --------------- cornerRound (self, size =5 , proportion =None , curvature =None , isRadius =False ) cornerTrap (self, aperture =10 , depth =20 , trap =2 ) Trap a corner by given aperture. Arguments: aperture (float): Width of the traps mouth (opening); depth (float): Length of the traps sides; trap (float): Width of the traps bottom. Returns: tuple(flNode, flNode, flNode, flNode) cornerTrapInc (self, incision =10 , depth =50 , trap =2 , smooth =True ) Trap a corner by given incision into the glyph flesh. Arguments: incision (float): How much to cut into glyphs flesh based from that corner inward; depth (float): Length of the traps sides; trap (float): Width of the traps bottom; smooth (bool): Creates a smooth trap. Returns: tuple(flNode, flNode, flNode, flNode) four base (ON) nodes of the trap. diffTo (self, node) diffToNext (self) diffToPrev (self) getNextLine (self) getPrevLine (self) interpShift (self, shift_x, shift_y) Interpolated move aka Interpolated Nudge. Arguments: shift_x, shift_y (float) polarReloc (self, angle, distance) polarRelocFromPrev (self, distance) polarTo (self, node) polarToNext (self) polarToPrev (self) shiftFromNext (self, diffX, diffY) shiftFromPrev (self, diffX, diffY) slantShift (self, shift_x, shift_y, angle) Slanted move - move a node (in inclined space) according to Y coordinate slanted at given angle. Arguments: shift_x, shift_y (float) angle (float): Angle in degrees smartPolarReloc (self, angle, distance) Methods from pNode __init__ (self, node) __repr__ (self) angleTo (self, node) angleToNext (self) angleToPrev (self) delSmartAngle (self) distanceTo (self, node) distanceToNext (self) distanceToPrev (self) getContour (self) getMaxY (self, naked =True ) getMinY (self, naked =True ) getNext (self, naked =True ) getNextOn (self, naked =True ) getOn (self, naked =True ) getPrev (self, naked =True ) getPrevOn (self, naked =True ) getSegment (self, relativeTime =0 ) getSegmentNodes (self, relativeTime =0 ) getSmartAngle (self) # - Effects -------------------------------- getSmartAngleRadius (self) getTime (self) # - Basics ----------------------------------------------- insertAfter (self, time) insertAfterDist (self, distance) insertBefore (self, time) insertBeforeDist (self, distance) reloc (self, newX, newY) Relocate the node to new coordinates remove (self) setSmartAngle (self, radius) setSmartAngleRadius (self, radius) shift (self, deltaX, deltaY) Shift the node by given amout smartReloc (self, newX, newY) Relocate the node and adjacent BCPs to new coordinates smartShift (self, deltaX, deltaY) Shift the node and adjacent BCPs by given amout update (self) Descriptors from pNode __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) asCoord typerig.proxy.objects.node.eNode.asCoord = asCoord (self) unbound typerig.proxy.objects.node.eNode method Returns Coord object of the node. cornerTrap typerig.proxy.objects.node.eNode.cornerTrap = cornerTrap (self, aperture =10 , depth =20 , trap =2 ) unbound typerig.proxy.objects.node.eNode method Trap a corner by given aperture. Arguments: aperture (float): Width of the traps mouth (opening); depth (float): Length of the traps sides; trap (float): Width of the traps bottom. Returns: tuple(flNode, flNode, flNode, flNode) cornerTrapInc typerig.proxy.objects.node.eNode.cornerTrapInc = cornerTrapInc (self, incision =10 , depth =50 , trap =2 , smooth =True ) unbound typerig.proxy.objects.node.eNode method Trap a corner by given incision into the glyph flesh. Arguments: incision (float): How much to cut into glyphs flesh based from that corner inward; depth (float): Length of the traps sides; trap (float): Width of the traps bottom; smooth (bool): Creates a smooth trap. Returns: tuple(flNode, flNode, flNode, flNode) four base (ON) nodes of the trap. interpShift typerig.proxy.objects.node.eNode.interpShift = interpShift (self, shift_x, shift_y) unbound typerig.proxy.objects.node.eNode method Interpolated move aka Interpolated Nudge. Arguments: shift_x, shift_y (float) slantShift typerig.proxy.objects.node.eNode.slantShift = slantShift (self, shift_x, shift_y, angle) unbound typerig.proxy.objects.node.eNode method Slanted move - move a node (in inclined space) according to Y coordinate slanted at given angle. Arguments: shift_x, shift_y (float) angle (float): Angle in degrees alignTo typerig.proxy.objects.node.eNode.alignTo = alignTo (self, entity, align =(True, True) ) unbound typerig.proxy.objects.node.eNode method Align current node to a node or line given. Arguments: entity (flNode, pNode, eNode or Line) align (tuple(Align_X (bool), Align_Y (bool)) eNodesContainer typerig.proxy.objects.node.eNodesContainer = class eNodesContainer ( pNodesContainer ) Extended representation of Abstract nodes container Constructor: eNodesContainer(list(flNode)) Method resolution order: eNodesContainer pNodesContainer __builtin__.object Methods alignTo (self, entity, alignMode ='' , align =(True, True) ) Align Abstract nodes container to. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS Methods from pNodesContainer __delitem__ (self, index) __getitem__ (self, index) __hash__ (self) __init__ (self, nodeList, extend = class 'typerig.proxy.objects.node.pNode' ) __len__ (self) __repr__ (self) __setitem__ (self, index, value) append (self, index) applyTransform (self, transform) clone (self) cloneTransform (self, transform) getBounds (self) getCoord (self) getPosition (self) insert (self, index, value) reverse (self) shift (self, dx, dy) smartShift (self, dx, dy) Descriptors from pNodesContainer __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) alignTo typerig.proxy.objects.node.eNodesContainer.alignTo = alignTo (self, entity, alignMode ='' , align =(True, True) ) unbound typerig.proxy.objects.node.eNodesContainer method Align Abstract nodes container to. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS","title":"proxy.objects.node"},{"location":"typerig.proxy.objects.node.html#typerigproxyobjectsnode","text":"","title":"typerig.proxy.objects.node"},{"location":"typerig.proxy.objects.node.html#pnode","text":"","title":"pNode"},{"location":"typerig.proxy.objects.node.html#reloc","text":"typerig.proxy.objects.node.pNode.reloc = reloc (self, newX, newY) unbound typerig.proxy.objects.node.pNode method Relocate the node to new coordinates","title":"reloc"},{"location":"typerig.proxy.objects.node.html#shift","text":"typerig.proxy.objects.node.pNode.shift = shift (self, deltaX, deltaY) unbound typerig.proxy.objects.node.pNode method Shift the node by given amout","title":"shift"},{"location":"typerig.proxy.objects.node.html#smartreloc","text":"typerig.proxy.objects.node.pNode.smartReloc = smartReloc (self, newX, newY) unbound typerig.proxy.objects.node.pNode method Relocate the node and adjacent BCPs to new coordinates","title":"smartReloc"},{"location":"typerig.proxy.objects.node.html#smartshift","text":"typerig.proxy.objects.node.pNode.smartShift = smartShift (self, deltaX, deltaY) unbound typerig.proxy.objects.node.pNode method Shift the node and adjacent BCPs by given amout","title":"smartShift"},{"location":"typerig.proxy.objects.node.html#pnodescontainer","text":"","title":"pNodesContainer"},{"location":"typerig.proxy.objects.node.html#enode","text":"","title":"eNode"},{"location":"typerig.proxy.objects.node.html#ascoord","text":"typerig.proxy.objects.node.eNode.asCoord = asCoord (self) unbound typerig.proxy.objects.node.eNode method Returns Coord object of the node.","title":"asCoord"},{"location":"typerig.proxy.objects.node.html#cornertrap","text":"typerig.proxy.objects.node.eNode.cornerTrap = cornerTrap (self, aperture =10 , depth =20 , trap =2 ) unbound typerig.proxy.objects.node.eNode method Trap a corner by given aperture. Arguments: aperture (float): Width of the traps mouth (opening); depth (float): Length of the traps sides; trap (float): Width of the traps bottom. Returns: tuple(flNode, flNode, flNode, flNode)","title":"cornerTrap"},{"location":"typerig.proxy.objects.node.html#cornertrapinc","text":"typerig.proxy.objects.node.eNode.cornerTrapInc = cornerTrapInc (self, incision =10 , depth =50 , trap =2 , smooth =True ) unbound typerig.proxy.objects.node.eNode method Trap a corner by given incision into the glyph flesh. Arguments: incision (float): How much to cut into glyphs flesh based from that corner inward; depth (float): Length of the traps sides; trap (float): Width of the traps bottom; smooth (bool): Creates a smooth trap. Returns: tuple(flNode, flNode, flNode, flNode) four base (ON) nodes of the trap.","title":"cornerTrapInc"},{"location":"typerig.proxy.objects.node.html#interpshift","text":"typerig.proxy.objects.node.eNode.interpShift = interpShift (self, shift_x, shift_y) unbound typerig.proxy.objects.node.eNode method Interpolated move aka Interpolated Nudge. Arguments: shift_x, shift_y (float)","title":"interpShift"},{"location":"typerig.proxy.objects.node.html#slantshift","text":"typerig.proxy.objects.node.eNode.slantShift = slantShift (self, shift_x, shift_y, angle) unbound typerig.proxy.objects.node.eNode method Slanted move - move a node (in inclined space) according to Y coordinate slanted at given angle. Arguments: shift_x, shift_y (float) angle (float): Angle in degrees","title":"slantShift"},{"location":"typerig.proxy.objects.node.html#alignto","text":"typerig.proxy.objects.node.eNode.alignTo = alignTo (self, entity, align =(True, True) ) unbound typerig.proxy.objects.node.eNode method Align current node to a node or line given. Arguments: entity (flNode, pNode, eNode or Line) align (tuple(Align_X (bool), Align_Y (bool))","title":"alignTo"},{"location":"typerig.proxy.objects.node.html#enodescontainer","text":"","title":"eNodesContainer"},{"location":"typerig.proxy.objects.node.html#alignto_1","text":"typerig.proxy.objects.node.eNodesContainer.alignTo = alignTo (self, entity, alignMode ='' , align =(True, True) ) unbound typerig.proxy.objects.node.eNodesContainer method Align Abstract nodes container to. Arguments: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS","title":"alignTo"},{"location":"typerig.proxy.objects.shape.html","text":"typerig.proxy.objects.shape typerig . proxy . objects .shape ( version 0.26.5) # MODULE: Typerig / Proxy / Shape (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2018-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab math PythonQt random typerig.core.objects Classes builtin .object pShape eShape class eShape ( pShape ) Extended representation of the Proxy Shape, adding some advanced functionality. Constructor: eShape(flShape) Method resolution order: eShape pShape builtin .object Methods alignTo (self, entity, alignMode ='' , align =(True, True) ) Align current contour. Args: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS asCoord (self) Returns Coord object of the Bottom lest corner. contourOrder (self, order =(True, True) ) Rearrange shape contours: Args: order (tuple(Bool,Bool)): X (Left(True) to Right(False)) and Y (Bottom(True), Top(False)) order or None to sort on single coordinate. Returns: None getNext (self) getPrev (self) round (self) Methods from pShape init (self, shape, layer =None , glyph =None ) repr (self) builder (self) Return flShapeBuilder Object container (self) Returns a list of flShape Objects that are contained within this shape. contours (self) copyBuilder (self, source) # - Complex shapes, builders and etc. --------------------- data (self) Return flShapeData Object decompose (self) # - Position, composition --------------------------------- draw (self, pen) Utilizes the Pen protocol goBackOf (self, flShape) goDown (self) goFrontOf (self, flShape) goLayerBack (self) goLayerFront (self) goUp (self) info (self) Return flShapeInfo Object isChanged (self) nodes (self) reset_transform (self) # - Transformation ---------------------------------------- rotate (self, angle, reset =False ) scale (self, sx, sy, reset =False ) segments (self) # - Contours, Segmets, Nodes ------------------------------ setName (self, shape_name) # - Management --------------------------------- shear (self, sh, sv, reset =False ) shift (self, dx, dy, reset =False ) sortContours (self, criteria ='y' , ascending =True ) tag (self, tagString) update (self) Descriptors from pShape dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class pShape ( builtin .object ) Proxy to flShape, flShapeData and flShapeInfo objects Constructor: pShape(flShape) Attributes: .fl (flNode): Original flNode .parent (flContour): parent contour .contour (flContour): parent contour Methods init (self, shape, layer =None , glyph =None ) repr (self) builder (self) Return flShapeBuilder Object container (self) Returns a list of flShape Objects that are contained within this shape. contours (self) copyBuilder (self, source) # - Complex shapes, builders and etc. --------------------- data (self) Return flShapeData Object decompose (self) # - Position, composition --------------------------------- draw (self, pen) Utilizes the Pen protocol goBackOf (self, flShape) goDown (self) goFrontOf (self, flShape) goLayerBack (self) goLayerFront (self) goUp (self) info (self) Return flShapeInfo Object isChanged (self) nodes (self) reset_transform (self) # - Transformation ---------------------------------------- rotate (self, angle, reset =False ) scale (self, sx, sy, reset =False ) segments (self) # - Contours, Segmets, Nodes ------------------------------ setName (self, shape_name) # - Management --------------------------------- shear (self, sh, sv, reset =False ) shift (self, dx, dy, reset =False ) sortContours (self, criteria ='y' , ascending =True ) tag (self, tagString) update (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) pShape typerig.proxy.objects.shape.pShape = class pShape ( __builtin__.object ) Proxy to flShape, flShapeData and flShapeInfo objects Constructor: pShape(flShape) Attributes: .fl (flNode): Original flNode .parent (flContour): parent contour .contour (flContour): parent contour Methods __init__ (self, shape, layer =None , glyph =None ) __repr__ (self) builder (self) Return flShapeBuilder Object container (self) Returns a list of flShape Objects that are contained within this shape. contours (self) copyBuilder (self, source) # - Complex shapes, builders and etc. --------------------- data (self) Return flShapeData Object decompose (self) # - Position, composition --------------------------------- draw (self, pen) Utilizes the Pen protocol goBackOf (self, flShape) goDown (self) goFrontOf (self, flShape) goLayerBack (self) goLayerFront (self) goUp (self) info (self) Return flShapeInfo Object isChanged (self) nodes (self) reset_transform (self) # - Transformation ---------------------------------------- rotate (self, angle, reset =False ) scale (self, sx, sy, reset =False ) segments (self) # - Contours, Segmets, Nodes ------------------------------ setName (self, shape_name) # - Management --------------------------------- shear (self, sh, sv, reset =False ) shift (self, dx, dy, reset =False ) sortContours (self, criteria ='y' , ascending =True ) tag (self, tagString) update (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) data typerig.proxy.objects.shape.pShape.data = data (self) unbound typerig.proxy.objects.shape.pShape method Return flShapeData Object info typerig.proxy.objects.shape.pShape.info = info (self) unbound typerig.proxy.objects.shape.pShape method Return flShapeInfo Object builder typerig.proxy.objects.shape.pShape.builder = builder (self) unbound typerig.proxy.objects.shape.pShape method Return flShapeBuilder Object container typerig.proxy.objects.shape.pShape.container = container (self) unbound typerig.proxy.objects.shape.pShape method Returns a list of flShape Objects that are contained within this shape. draw typerig.proxy.objects.shape.pShape.draw = draw (self, pen) unbound typerig.proxy.objects.shape.pShape method Utilizes the Pen protocol eShape typerig.proxy.objects.shape.eShape = class eShape ( pShape ) Extended representation of the Proxy Shape, adding some advanced functionality. Constructor: eShape(flShape) Method resolution order: eShape pShape __builtin__.object Methods alignTo (self, entity, alignMode ='' , align =(True, True) ) Align current contour. Args: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS asCoord (self) Returns Coord object of the Bottom lest corner. contourOrder (self, order =(True, True) ) Rearrange shape contours: Args: order (tuple(Bool,Bool)): X (Left(True) to Right(False)) and Y (Bottom(True), Top(False)) order or None to sort on single coordinate. Returns: None getNext (self) getPrev (self) round (self) Methods from pShape __init__ (self, shape, layer =None , glyph =None ) __repr__ (self) builder (self) Return flShapeBuilder Object container (self) Returns a list of flShape Objects that are contained within this shape. contours (self) copyBuilder (self, source) # - Complex shapes, builders and etc. --------------------- data (self) Return flShapeData Object decompose (self) # - Position, composition --------------------------------- draw (self, pen) Utilizes the Pen protocol goBackOf (self, flShape) goDown (self) goFrontOf (self, flShape) goLayerBack (self) goLayerFront (self) goUp (self) info (self) Return flShapeInfo Object isChanged (self) nodes (self) reset_transform (self) # - Transformation ---------------------------------------- rotate (self, angle, reset =False ) scale (self, sx, sy, reset =False ) segments (self) # - Contours, Segmets, Nodes ------------------------------ setName (self, shape_name) # - Management --------------------------------- shear (self, sh, sv, reset =False ) shift (self, dx, dy, reset =False ) sortContours (self, criteria ='y' , ascending =True ) tag (self, tagString) update (self) Descriptors from pShape __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) asCoord typerig.proxy.objects.shape.eShape.asCoord = asCoord (self) unbound typerig.proxy.objects.shape.eShape method Returns Coord object of the Bottom lest corner. contourOrder typerig.proxy.objects.shape.eShape.contourOrder = contourOrder (self, order =(True, True) ) unbound typerig.proxy.objects.shape.eShape method Rearrange shape contours: Args: order (tuple(Bool,Bool)): X (Left(True) to Right(False)) and Y (Bottom(True), Top(False)) order or None to sort on single coordinate. Returns: None alignTo typerig.proxy.objects.shape.eShape.alignTo = alignTo (self, entity, alignMode ='' , align =(True, True) ) unbound typerig.proxy.objects.shape.eShape method Align current contour. Args: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS","title":"proxy.objects.shape"},{"location":"typerig.proxy.objects.shape.html#typerigproxyobjectsshape","text":"","title":"typerig.proxy.objects.shape"},{"location":"typerig.proxy.objects.shape.html#pshape","text":"","title":"pShape"},{"location":"typerig.proxy.objects.shape.html#data","text":"typerig.proxy.objects.shape.pShape.data = data (self) unbound typerig.proxy.objects.shape.pShape method Return flShapeData Object","title":"data"},{"location":"typerig.proxy.objects.shape.html#info","text":"typerig.proxy.objects.shape.pShape.info = info (self) unbound typerig.proxy.objects.shape.pShape method Return flShapeInfo Object","title":"info"},{"location":"typerig.proxy.objects.shape.html#builder","text":"typerig.proxy.objects.shape.pShape.builder = builder (self) unbound typerig.proxy.objects.shape.pShape method Return flShapeBuilder Object","title":"builder"},{"location":"typerig.proxy.objects.shape.html#container","text":"typerig.proxy.objects.shape.pShape.container = container (self) unbound typerig.proxy.objects.shape.pShape method Returns a list of flShape Objects that are contained within this shape.","title":"container"},{"location":"typerig.proxy.objects.shape.html#draw","text":"typerig.proxy.objects.shape.pShape.draw = draw (self, pen) unbound typerig.proxy.objects.shape.pShape method Utilizes the Pen protocol","title":"draw"},{"location":"typerig.proxy.objects.shape.html#eshape","text":"","title":"eShape"},{"location":"typerig.proxy.objects.shape.html#ascoord","text":"typerig.proxy.objects.shape.eShape.asCoord = asCoord (self) unbound typerig.proxy.objects.shape.eShape method Returns Coord object of the Bottom lest corner.","title":"asCoord"},{"location":"typerig.proxy.objects.shape.html#contourorder","text":"typerig.proxy.objects.shape.eShape.contourOrder = contourOrder (self, order =(True, True) ) unbound typerig.proxy.objects.shape.eShape method Rearrange shape contours: Args: order (tuple(Bool,Bool)): X (Left(True) to Right(False)) and Y (Bottom(True), Top(False)) order or None to sort on single coordinate. Returns: None","title":"contourOrder"},{"location":"typerig.proxy.objects.shape.html#alignto","text":"typerig.proxy.objects.shape.eShape.alignTo = alignTo (self, entity, alignMode ='' , align =(True, True) ) unbound typerig.proxy.objects.shape.eShape method Align current contour. Args: entity () alignMode (String) : L(left), R(right), C(center), T(top), B(bottom), E(vertical center) !ORDER MATTERS","title":"alignTo"},{"location":"typerig.proxy.objects.string.html","text":"typerig.proxy.objects.string typerig . proxy . objects .string ( version 0.18.3) # MODULE: Typerig / Proxy / String (Constants) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2017-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Classes builtin .object OTGen class OTGen ( builtin .object ) Generate OpenType features Methods init (self) Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) OTGen typerig.proxy.objects.string.OTGen = class OTGen ( __builtin__.object ) Generate OpenType features Methods __init__ (self) Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined)","title":"proxy.objects.string"},{"location":"typerig.proxy.objects.string.html#typerigproxyobjectsstring","text":"","title":"typerig.proxy.objects.string"},{"location":"typerig.proxy.objects.string.html#otgen","text":"","title":"OTGen"},{"location":"typerig.proxy.pens.abstractPen.html","text":"typerig.proxy.pens.abstractPen typerig . proxy . pens .abstractPen ( version 0.0.1) # MODULE: Typerig / Proxy / Pen (Objects) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2019-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab Classes builtin .object AbstractPen AbstractPointPen class AbstractPen ( builtin .object ) AbstractPen as specified by FontTools (fontTools.pens.basePen.py) Methods addComponent (self, glyphName, transformation) Add a sub glyph. The 'transformation' argument must be a 6-tuple containing an affine transformation, or a Transform object from the fontTools.misc.transform module. More precisely: it should be a sequence containing 6 numbers. closePath (self) Close the current sub path. You must call either pen. closePath () or pen. endPath () after each sub path. curveTo (self, *points) Draw a cubic bezier with an arbitrary number of control points. The last point specified is on-curve, all others are off-curve (control) points. If the number of control points is > 2, the segment is split into multiple bezier segments. This works like this: Let n be the number of control points (which is the number of arguments to this call minus 1). If n==2, a plain vanilla cubic bezier is drawn. If n==1, we fall back to a quadratic segment and if n==0 we draw a straight line. It gets interesting when n>2: n-1 PostScript-style cubic segments will be drawn as if it were one curve. See decomposeSuperBezierSegment(). The conversion algorithm used for n>2 is inspired by NURB splines, and is conceptually equivalent to the TrueType \"implied points\" principle. See also decomposeQuadraticSegment(). endPath (self) End the current sub path, but don't close it. You must call either pen. closePath () or pen. endPath () after each sub path. lineTo (self, pt) Draw a straight line from the current point to 'pt'. moveTo (self, pt) Begin a new sub path, set the current point to 'pt'. You must end each sub path with a call to pen. closePath () or pen. endPath (). qCurveTo (self, *points) Draw a whole string of quadratic curve segments. The last point specified is on-curve, all others are off-curve points. This method implements TrueType-style curves, breaking up curves using 'implied points': between each two consequtive off-curve points, there is one implied point exactly in the middle between them. See also decomposeQuadraticSegment(). The last argument (normally the on-curve point) may be None. This is to support contours that have NO on-curve points (a rarely seen feature of TrueType outlines). Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) class AbstractPointPen ( builtin .object ) Baseclass for all PointPens as specified by FontTools (fontTools.pens.pointPen.py) Methods addComponent (self, baseGlyphName, transformation, identifier =None , **kwargs) Add a sub glyph. addPoint (self, pt, segmentType =None , smooth =False , name =None , identifier =None , **kwargs) Add a point to the current sub path. beginPath (self, identifier =None , **kwargs) Start a new sub path. endPath (self) End the current sub path. Descriptors dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) AbstractPen typerig.proxy.pens.abstractPen.AbstractPen = class AbstractPen ( __builtin__.object ) AbstractPen as specified by FontTools (fontTools.pens.basePen.py) Methods addComponent (self, glyphName, transformation) Add a sub glyph. The 'transformation' argument must be a 6-tuple containing an affine transformation, or a Transform object from the fontTools.misc.transform module. More precisely: it should be a sequence containing 6 numbers. closePath (self) Close the current sub path. You must call either pen. closePath () or pen. endPath () after each sub path. curveTo (self, *points) Draw a cubic bezier with an arbitrary number of control points. The last point specified is on-curve, all others are off-curve (control) points. If the number of control points is > 2, the segment is split into multiple bezier segments. This works like this: Let n be the number of control points (which is the number of arguments to this call minus 1). If n==2, a plain vanilla cubic bezier is drawn. If n==1, we fall back to a quadratic segment and if n==0 we draw a straight line. It gets interesting when n>2: n-1 PostScript-style cubic segments will be drawn as if it were one curve. See decomposeSuperBezierSegment(). The conversion algorithm used for n>2 is inspired by NURB splines, and is conceptually equivalent to the TrueType \"implied points\" principle. See also decomposeQuadraticSegment(). endPath (self) End the current sub path, but don't close it. You must call either pen. closePath () or pen. endPath () after each sub path. lineTo (self, pt) Draw a straight line from the current point to 'pt'. moveTo (self, pt) Begin a new sub path, set the current point to 'pt'. You must end each sub path with a call to pen. closePath () or pen. endPath (). qCurveTo (self, *points) Draw a whole string of quadratic curve segments. The last point specified is on-curve, all others are off-curve points. This method implements TrueType-style curves, breaking up curves using 'implied points': between each two consequtive off-curve points, there is one implied point exactly in the middle between them. See also decomposeQuadraticSegment(). The last argument (normally the on-curve point) may be None. This is to support contours that have NO on-curve points (a rarely seen feature of TrueType outlines). Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) moveTo typerig.proxy.pens.abstractPen.AbstractPen.moveTo = moveTo (self, pt) unbound typerig.proxy.pens.abstractPen.AbstractPen method Begin a new sub path, set the current point to 'pt'. You must end each sub path with a call to pen.closePath() or pen.endPath(). lineTo typerig.proxy.pens.abstractPen.AbstractPen.lineTo = lineTo (self, pt) unbound typerig.proxy.pens.abstractPen.AbstractPen method Draw a straight line from the current point to 'pt'. curveTo typerig.proxy.pens.abstractPen.AbstractPen.curveTo = curveTo (self, *points) unbound typerig.proxy.pens.abstractPen.AbstractPen method Draw a cubic bezier with an arbitrary number of control points. The last point specified is on-curve, all others are off-curve (control) points. If the number of control points is > 2, the segment is split into multiple bezier segments. This works like this: Let n be the number of control points (which is the number of arguments to this call minus 1). If n==2, a plain vanilla cubic bezier is drawn. If n==1, we fall back to a quadratic segment and if n==0 we draw a straight line. It gets interesting when n>2: n-1 PostScript-style cubic segments will be drawn as if it were one curve. See decomposeSuperBezierSegment(). The conversion algorithm used for n>2 is inspired by NURB splines, and is conceptually equivalent to the TrueType \"implied points\" principle. See also decomposeQuadraticSegment(). qCurveTo typerig.proxy.pens.abstractPen.AbstractPen.qCurveTo = qCurveTo (self, *points) unbound typerig.proxy.pens.abstractPen.AbstractPen method Draw a whole string of quadratic curve segments. The last point specified is on-curve, all others are off-curve points. This method implements TrueType-style curves, breaking up curves using 'implied points': between each two consequtive off-curve points, there is one implied point exactly in the middle between them. See also decomposeQuadraticSegment(). The last argument (normally the on-curve point) may be None. This is to support contours that have NO on-curve points (a rarely seen feature of TrueType outlines). closePath typerig.proxy.pens.abstractPen.AbstractPen.closePath = closePath (self) unbound typerig.proxy.pens.abstractPen.AbstractPen method Close the current sub path. You must call either pen.closePath() or pen.endPath() after each sub path. endPath typerig.proxy.pens.abstractPen.AbstractPen.endPath = endPath (self) unbound typerig.proxy.pens.abstractPen.AbstractPen method End the current sub path, but don't close it. You must call either pen.closePath() or pen.endPath() after each sub path. addComponent typerig.proxy.pens.abstractPen.AbstractPen.addComponent = addComponent (self, glyphName, transformation) unbound typerig.proxy.pens.abstractPen.AbstractPen method Add a sub glyph. The 'transformation' argument must be a 6-tuple containing an affine transformation, or a Transform object from the fontTools.misc.transform module. More precisely: it should be a sequence containing 6 numbers. AbstractPointPen typerig.proxy.pens.abstractPen.AbstractPointPen = class AbstractPointPen ( __builtin__.object ) Baseclass for all PointPens as specified by FontTools (fontTools.pens.pointPen.py) Methods addComponent (self, baseGlyphName, transformation, identifier =None , **kwargs) Add a sub glyph. addPoint (self, pt, segmentType =None , smooth =False , name =None , identifier =None , **kwargs) Add a point to the current sub path. beginPath (self, identifier =None , **kwargs) Start a new sub path. endPath (self) End the current sub path. Descriptors __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) beginPath typerig.proxy.pens.abstractPen.AbstractPointPen.beginPath = beginPath (self, identifier =None , **kwargs) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method Start a new sub path. endPath typerig.proxy.pens.abstractPen.AbstractPointPen.endPath = endPath (self) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method End the current sub path. addPoint typerig.proxy.pens.abstractPen.AbstractPointPen.addPoint = addPoint (self, pt, segmentType =None , smooth =False , name =None , identifier =None , **kwargs) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method Add a point to the current sub path. addComponent typerig.proxy.pens.abstractPen.AbstractPointPen.addComponent = addComponent (self, baseGlyphName, transformation, identifier =None , **kwargs) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method Add a sub glyph.","title":"proxy.pens.abstractPen"},{"location":"typerig.proxy.pens.abstractPen.html#typerigproxypensabstractpen","text":"","title":"typerig.proxy.pens.abstractPen"},{"location":"typerig.proxy.pens.abstractPen.html#abstractpen","text":"","title":"AbstractPen"},{"location":"typerig.proxy.pens.abstractPen.html#moveto","text":"typerig.proxy.pens.abstractPen.AbstractPen.moveTo = moveTo (self, pt) unbound typerig.proxy.pens.abstractPen.AbstractPen method Begin a new sub path, set the current point to 'pt'. You must end each sub path with a call to pen.closePath() or pen.endPath().","title":"moveTo"},{"location":"typerig.proxy.pens.abstractPen.html#lineto","text":"typerig.proxy.pens.abstractPen.AbstractPen.lineTo = lineTo (self, pt) unbound typerig.proxy.pens.abstractPen.AbstractPen method Draw a straight line from the current point to 'pt'.","title":"lineTo"},{"location":"typerig.proxy.pens.abstractPen.html#curveto","text":"typerig.proxy.pens.abstractPen.AbstractPen.curveTo = curveTo (self, *points) unbound typerig.proxy.pens.abstractPen.AbstractPen method Draw a cubic bezier with an arbitrary number of control points. The last point specified is on-curve, all others are off-curve (control) points. If the number of control points is > 2, the segment is split into multiple bezier segments. This works like this: Let n be the number of control points (which is the number of arguments to this call minus 1). If n==2, a plain vanilla cubic bezier is drawn. If n==1, we fall back to a quadratic segment and if n==0 we draw a straight line. It gets interesting when n>2: n-1 PostScript-style cubic segments will be drawn as if it were one curve. See decomposeSuperBezierSegment(). The conversion algorithm used for n>2 is inspired by NURB splines, and is conceptually equivalent to the TrueType \"implied points\" principle. See also decomposeQuadraticSegment().","title":"curveTo"},{"location":"typerig.proxy.pens.abstractPen.html#qcurveto","text":"typerig.proxy.pens.abstractPen.AbstractPen.qCurveTo = qCurveTo (self, *points) unbound typerig.proxy.pens.abstractPen.AbstractPen method Draw a whole string of quadratic curve segments. The last point specified is on-curve, all others are off-curve points. This method implements TrueType-style curves, breaking up curves using 'implied points': between each two consequtive off-curve points, there is one implied point exactly in the middle between them. See also decomposeQuadraticSegment(). The last argument (normally the on-curve point) may be None. This is to support contours that have NO on-curve points (a rarely seen feature of TrueType outlines).","title":"qCurveTo"},{"location":"typerig.proxy.pens.abstractPen.html#closepath","text":"typerig.proxy.pens.abstractPen.AbstractPen.closePath = closePath (self) unbound typerig.proxy.pens.abstractPen.AbstractPen method Close the current sub path. You must call either pen.closePath() or pen.endPath() after each sub path.","title":"closePath"},{"location":"typerig.proxy.pens.abstractPen.html#endpath","text":"typerig.proxy.pens.abstractPen.AbstractPen.endPath = endPath (self) unbound typerig.proxy.pens.abstractPen.AbstractPen method End the current sub path, but don't close it. You must call either pen.closePath() or pen.endPath() after each sub path.","title":"endPath"},{"location":"typerig.proxy.pens.abstractPen.html#addcomponent","text":"typerig.proxy.pens.abstractPen.AbstractPen.addComponent = addComponent (self, glyphName, transformation) unbound typerig.proxy.pens.abstractPen.AbstractPen method Add a sub glyph. The 'transformation' argument must be a 6-tuple containing an affine transformation, or a Transform object from the fontTools.misc.transform module. More precisely: it should be a sequence containing 6 numbers.","title":"addComponent"},{"location":"typerig.proxy.pens.abstractPen.html#abstractpointpen","text":"","title":"AbstractPointPen"},{"location":"typerig.proxy.pens.abstractPen.html#beginpath","text":"typerig.proxy.pens.abstractPen.AbstractPointPen.beginPath = beginPath (self, identifier =None , **kwargs) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method Start a new sub path.","title":"beginPath"},{"location":"typerig.proxy.pens.abstractPen.html#endpath_1","text":"typerig.proxy.pens.abstractPen.AbstractPointPen.endPath = endPath (self) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method End the current sub path.","title":"endPath"},{"location":"typerig.proxy.pens.abstractPen.html#addpoint","text":"typerig.proxy.pens.abstractPen.AbstractPointPen.addPoint = addPoint (self, pt, segmentType =None , smooth =False , name =None , identifier =None , **kwargs) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method Add a point to the current sub path.","title":"addPoint"},{"location":"typerig.proxy.pens.abstractPen.html#addcomponent_1","text":"typerig.proxy.pens.abstractPen.AbstractPointPen.addComponent = addComponent (self, baseGlyphName, transformation, identifier =None , **kwargs) unbound typerig.proxy.pens.abstractPen.AbstractPointPen method Add a sub glyph.","title":"addComponent"},{"location":"typerig.proxy.pens.html","text":"typerig.proxy.pens typerig . proxy .pens from proxy import __version__ as current_ver __version__ = current_ver Package Contents abstractPen outlinePen","title":"proxy.pens"},{"location":"typerig.proxy.pens.html#typerigproxypens","text":"","title":"typerig.proxy.pens"},{"location":"typerig.proxy.pens.outlinePen.html","text":"typerig.proxy.pens.outlinePen typerig . proxy . pens .outlinePen ( version 0.1.3) #FLM: Refactor: Outline Pen # MODULE: Typerig / Proxy / Pen / Outline Pen (Pen) # ----------------------------------------------------------- # (C) Vassil Kateliev, 2019-2020 (http://www.kateliev.com) # (C) Karandash Type Foundry (http://www.karandash.eu) #------------------------------------------------------------ # www.typerig.com Modules fontgate fontlab math Classes fontTools.pens.basePen.BasePen ( fontTools.pens.basePen.DecomposingPen ) OutlinePen typerig.core.objects.point.Point ( builtin .object ) altPoint class OutlinePen ( fontTools.pens.basePen.BasePen ) OutlinePen (protocol) Adapted from: Frederik Berlaen's (Typemytype) outlinerRoboFontExtension Original Source: https://github.com/typemytype/outlinerRoboFontExtension Attribs: - offset (float): Outline offset - contrast (float): Outline Contrast - contrastAngle (float): Outline contrast angle - connection (string): Connection type - square; - cap (string): Cap type - round - closeOpenPaths (bool): Close open paths - optimizeCurve (bool): Optimize curve (adds an extra point of every curve at .5 time) - filterDoubles (bool): Filter double nodes - miterLimit (float): Sets miter limit Returns: - getGlyphs(): innerGlyph, outerGlyph, originalGlyph,(fgGlyph) - getShapes(): innerShape, outerShape, originalShape (flShape) - getContours(): innerContour, outerContour, originalContour (flShape) Method resolution order: OutlinePen fontTools.pens.basePen.BasePen fontTools.pens.basePen.DecomposingPen fontTools.pens.basePen.LoggingPen fontTools.misc.loggingTools.LogMixin fontTools.pens.basePen.AbstractPen builtin .object Methods init (self, **kwargs) buildCap (self, firstContour, lastContour) # - Line Caps -------------------------------- buildConnection (self, close =False ) # -- Connections -------------------------------- capButt (self, firstContour, lastContour, first, last, angle) capRound (self, firstContour, lastContour, first, last, angle) capSquare (self, firstContour, lastContour, first, last, angle) connectionButt (self, first, last, pen, close) connectionInnerCorner (self, first, last, pen, close) connectionRound (self, first, last, pen, close) connectionSquare (self, first, last, pen, close) getGlyphs (self) # - Output ----------------------------------------------- getShapes (self) getThickness (self, angle) # -- Thickness Attributes magicCurve = 0.5522847498 pointClass = class 'typerig.proxy.pens.outlinePen.altPoint' Methods from fontTools.pens.basePen.BasePen closePath (self) curveTo (self, *points) endPath (self) lineTo (self, pt) moveTo (self, pt) qCurveTo (self, *points) Methods from fontTools.pens.basePen.DecomposingPen addComponent (self, glyphName, transformation) Transform the points of the base glyph and draw it onto self. Attributes from fontTools.pens.basePen.DecomposingPen skipMissingComponents = True Descriptors from fontTools.misc.loggingTools.LogMixin dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) log class altPoint ( typerig.core.objects.point.Point ) # - Classes ------------------------------ Method resolution order: altPoint typerig.core.objects.point.Point builtin .object Methods eq (self, p) getitem (self, index) init (self, x, y =None ) iter (self) ne (self, p) Descriptors fgPoint Methods from typerig.core.objects.point.Point abs (self) add (self, other) # -- Operators and (self, other) self & other: Used as for Scalar product div (self, other) mul (self, other) neg (self) or (self, other) self | other: Used as for Cross product rdiv = div (self, other) repr (self) rmul = mul (self, other) sub (self, other) truediv = div (self, other) angle_to (self, other, add =90 ) Angle to another point in radians diff_to (self, other) doFlip (self, sign =(True, True) ) doSwap (self) # -- Modifiers doTransform (self, transform =None ) solve_width (self, y =0 ) Get width - find adjacent X by opposite Y solve_x (self, y) solve_y (self, x) Descriptors from typerig.core.objects.point.Point dict dictionary for instance variables (if defined) weakref list of weak references to the object (if defined) angle magnitude slope swap tuple unit y_intercept OutlinePen typerig.proxy.pens.outlinePen.OutlinePen = class OutlinePen ( fontTools.pens.basePen.BasePen ) OutlinePen (protocol) Adapted from: Frederik Berlaen's (Typemytype) outlinerRoboFontExtension Original Source: https://github.com/typemytype/outlinerRoboFontExtension Attribs: - offset (float): Outline offset - contrast (float): Outline Contrast - contrastAngle (float): Outline contrast angle - connection (string): Connection type - square; - cap (string): Cap type - round - closeOpenPaths (bool): Close open paths - optimizeCurve (bool): Optimize curve (adds an extra point of every curve at .5 time) - filterDoubles (bool): Filter double nodes - miterLimit (float): Sets miter limit Returns: - getGlyphs(): innerGlyph, outerGlyph, originalGlyph,(fgGlyph) - getShapes(): innerShape, outerShape, originalShape (flShape) - getContours(): innerContour, outerContour, originalContour (flShape) Method resolution order: OutlinePen fontTools.pens.basePen.BasePen fontTools.pens.basePen.DecomposingPen fontTools.pens.basePen.LoggingPen fontTools.misc.loggingTools.LogMixin fontTools.pens.basePen.AbstractPen __builtin__.object Methods __init__ (self, **kwargs) buildCap (self, firstContour, lastContour) # - Line Caps -------------------------------- buildConnection (self, close =False ) # -- Connections -------------------------------- capButt (self, firstContour, lastContour, first, last, angle) capRound (self, firstContour, lastContour, first, last, angle) capSquare (self, firstContour, lastContour, first, last, angle) connectionButt (self, first, last, pen, close) connectionInnerCorner (self, first, last, pen, close) connectionRound (self, first, last, pen, close) connectionSquare (self, first, last, pen, close) getGlyphs (self) # - Output ----------------------------------------------- getShapes (self) getThickness (self, angle) # -- Thickness Attributes magicCurve = 0.5522847498 pointClass = class 'typerig.proxy.pens.outlinePen.altPoint' Methods from fontTools.pens.basePen.BasePen closePath (self) curveTo (self, *points) endPath (self) lineTo (self, pt) moveTo (self, pt) qCurveTo (self, *points) Methods from fontTools.pens.basePen.DecomposingPen addComponent (self, glyphName, transformation) Transform the points of the base glyph and draw it onto self. Attributes from fontTools.pens.basePen.DecomposingPen skipMissingComponents = True Descriptors from fontTools.misc.loggingTools.LogMixin __dict__ dictionary for instance variables (if defined) __weakref__ list of weak references to the object (if defined) log magicCurve typerig.proxy.pens.outlinePen.OutlinePen.magicCurve = 0.5522847498","title":"proxy.pens.outlinePen"},{"location":"typerig.proxy.pens.outlinePen.html#typerigproxypensoutlinepen","text":"","title":"typerig.proxy.pens.outlinePen"},{"location":"typerig.proxy.pens.outlinePen.html#outlinepen","text":"","title":"OutlinePen"},{"location":"typerig.proxy.pens.outlinePen.html#magiccurve","text":"typerig.proxy.pens.outlinePen.OutlinePen.magicCurve = 0.5522847498","title":"magicCurve"}]}